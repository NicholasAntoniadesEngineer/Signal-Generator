
STM32F407VGT6 UART to serial port.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007678  08007678  00017678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007720  08007720  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08007720  08007720  00017720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007728  08007728  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800772c  0800772c  0001772c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08007730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001954  200001e8  08007918  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b3c  08007918  00021b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013d9a  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f93  00000000  00000000  00033fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d28  00000000  00000000  00036f48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bb0  00000000  00000000  00037c70  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000235e5  00000000  00000000  00038820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e1be  00000000  00000000  0005be05  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6017  00000000  00000000  00069fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012ffda  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000378c  00000000  00000000  00130058  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007660 	.word	0x08007660

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08007660 	.word	0x08007660

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b10      	ldr	r3, [pc, #64]	; (80005cc <MX_GPIO_Init+0x4c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a0f      	ldr	r2, [pc, #60]	; (80005cc <MX_GPIO_Init+0x4c>)
 8000590:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b0d      	ldr	r3, [pc, #52]	; (80005cc <MX_GPIO_Init+0x4c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b09      	ldr	r3, [pc, #36]	; (80005cc <MX_GPIO_Init+0x4c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a08      	ldr	r2, [pc, #32]	; (80005cc <MX_GPIO_Init+0x4c>)
 80005ac:	f043 0301 	orr.w	r3, r3, #1
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <MX_GPIO_Init+0x4c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

}
 80005be:	bf00      	nop
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	40023800 	.word	0x40023800

080005d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d6:	f000 f9f7 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005da:	f000 f841 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005de:	f7ff ffcf 	bl	8000580 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e2:	f000 f955 	bl	8000890 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80005e6:	f005 fef3 	bl	80063d0 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	strcpy((char*)buf, "Hello!\r\n");
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <main+0x7c>)
 80005ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80005f0:	c303      	stmia	r3!, {r0, r1}
 80005f2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, buf, strlen((char*)buf), HAL_MAX_DELAY);
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fdea 	bl	80001d0 <strlen>
 80005fc:	4603      	mov	r3, r0
 80005fe:	b29a      	uxth	r2, r3
 8000600:	1d39      	adds	r1, r7, #4
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	4812      	ldr	r0, [pc, #72]	; (8000650 <main+0x80>)
 8000608:	f002 fb51 	bl	8002cae <HAL_UART_Transmit>
	HAL_Delay(100);
 800060c:	2064      	movs	r0, #100	; 0x64
 800060e:	f000 fa4d 	bl	8000aac <HAL_Delay>

	sprintf(txBuf, "%u\r\n", count);
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <main+0x84>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	461a      	mov	r2, r3
 8000618:	490f      	ldr	r1, [pc, #60]	; (8000658 <main+0x88>)
 800061a:	4810      	ldr	r0, [pc, #64]	; (800065c <main+0x8c>)
 800061c:	f006 fcd2 	bl	8006fc4 <siprintf>
	count++;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <main+0x84>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <main+0x84>)
 800062a:	701a      	strb	r2, [r3, #0]

	if (count>100){
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <main+0x84>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	2b64      	cmp	r3, #100	; 0x64
 8000632:	d902      	bls.n	800063a <main+0x6a>
		count = 1;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <main+0x84>)
 8000636:	2201      	movs	r2, #1
 8000638:	701a      	strb	r2, [r3, #0]
	}

	CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <main+0x8c>)
 800063c:	f7ff fdc8 	bl	80001d0 <strlen>
 8000640:	4603      	mov	r3, r0
 8000642:	4619      	mov	r1, r3
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0x8c>)
 8000646:	f005 ff81 	bl	800654c <CDC_Transmit_FS>
  {
 800064a:	e7ce      	b.n	80005ea <main+0x1a>
 800064c:	08007678 	.word	0x08007678
 8000650:	2000021c 	.word	0x2000021c
 8000654:	20000000 	.word	0x20000000
 8000658:	08007684 	.word	0x08007684
 800065c:	20000214 	.word	0x20000214

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f006 fbe8 	bl	8006e44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a28      	ldr	r2, [pc, #160]	; (8000730 <SystemClock_Config+0xd0>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <SystemClock_Config+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a22      	ldr	r2, [pc, #136]	; (8000734 <SystemClock_Config+0xd4>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <SystemClock_Config+0xd4>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006bc:	2303      	movs	r3, #3
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006c4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c6:	2301      	movs	r3, #1
 80006c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ca:	2310      	movs	r3, #16
 80006cc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ce:	2302      	movs	r3, #2
 80006d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006d8:	2304      	movs	r3, #4
 80006da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006dc:	2348      	movs	r3, #72	; 0x48
 80006de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e0:	2302      	movs	r3, #2
 80006e2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e4:	2303      	movs	r3, #3
 80006e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e8:	f107 0320 	add.w	r3, r7, #32
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fe2f 	bl	8002350 <HAL_RCC_OscConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006f8:	f000 f81e 	bl	8000738 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fc:	230f      	movs	r3, #15
 80006fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000700:	2300      	movs	r3, #0
 8000702:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000704:	2300      	movs	r3, #0
 8000706:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f002 f88a 	bl	8002830 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000722:	f000 f809 	bl	8000738 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800073c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800073e:	e7fe      	b.n	800073e <Error_Handler+0x6>

08000740 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <HAL_MspInit+0x4c>)
 800074c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <HAL_MspInit+0x4c>)
 8000750:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000754:	6453      	str	r3, [r2, #68]	; 0x44
 8000756:	4b0d      	ldr	r3, [pc, #52]	; (800078c <HAL_MspInit+0x4c>)
 8000758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	4b09      	ldr	r3, [pc, #36]	; (800078c <HAL_MspInit+0x4c>)
 8000768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800076a:	4a08      	ldr	r2, [pc, #32]	; (800078c <HAL_MspInit+0x4c>)
 800076c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000770:	6413      	str	r3, [r2, #64]	; 0x40
 8000772:	4b06      	ldr	r3, [pc, #24]	; (800078c <HAL_MspInit+0x4c>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800077a:	603b      	str	r3, [r7, #0]
 800077c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	40023800 	.word	0x40023800

08000790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <NMI_Handler+0x4>

08000796 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <HardFault_Handler+0x4>

0800079c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <MemManage_Handler+0x4>

080007a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <BusFault_Handler+0x4>

080007a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007ac:	e7fe      	b.n	80007ac <UsageFault_Handler+0x4>

080007ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007ae:	b480      	push	{r7}
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007b2:	bf00      	nop
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr

080007ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007ca:	b480      	push	{r7}
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007dc:	f000 f946 	bl	8000a6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007e0:	bf00      	nop
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007e8:	4802      	ldr	r0, [pc, #8]	; (80007f4 <OTG_FS_IRQHandler+0x10>)
 80007ea:	f000 fd7d 	bl	80012e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20001730 	.word	0x20001730

080007f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b086      	sub	sp, #24
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000800:	4a14      	ldr	r2, [pc, #80]	; (8000854 <_sbrk+0x5c>)
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <_sbrk+0x60>)
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800080c:	4b13      	ldr	r3, [pc, #76]	; (800085c <_sbrk+0x64>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d102      	bne.n	800081a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000814:	4b11      	ldr	r3, [pc, #68]	; (800085c <_sbrk+0x64>)
 8000816:	4a12      	ldr	r2, [pc, #72]	; (8000860 <_sbrk+0x68>)
 8000818:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800081a:	4b10      	ldr	r3, [pc, #64]	; (800085c <_sbrk+0x64>)
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4413      	add	r3, r2
 8000822:	693a      	ldr	r2, [r7, #16]
 8000824:	429a      	cmp	r2, r3
 8000826:	d207      	bcs.n	8000838 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000828:	f006 fad2 	bl	8006dd0 <__errno>
 800082c:	4602      	mov	r2, r0
 800082e:	230c      	movs	r3, #12
 8000830:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000832:	f04f 33ff 	mov.w	r3, #4294967295
 8000836:	e009      	b.n	800084c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000838:	4b08      	ldr	r3, [pc, #32]	; (800085c <_sbrk+0x64>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800083e:	4b07      	ldr	r3, [pc, #28]	; (800085c <_sbrk+0x64>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	4413      	add	r3, r2
 8000846:	4a05      	ldr	r2, [pc, #20]	; (800085c <_sbrk+0x64>)
 8000848:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800084a:	68fb      	ldr	r3, [r7, #12]
}
 800084c:	4618      	mov	r0, r3
 800084e:	3718      	adds	r7, #24
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20020000 	.word	0x20020000
 8000858:	00000400 	.word	0x00000400
 800085c:	20000204 	.word	0x20000204
 8000860:	20001b40 	.word	0x20001b40

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000868:	4b08      	ldr	r3, [pc, #32]	; (800088c <SystemInit+0x28>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a07      	ldr	r2, [pc, #28]	; (800088c <SystemInit+0x28>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <SystemInit+0x28>)
 800087a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800087e:	609a      	str	r2, [r3, #8]
#endif
}
 8000880:	bf00      	nop
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000894:	4b11      	ldr	r3, [pc, #68]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <MX_USART2_UART_Init+0x50>)
 8000898:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089a:	4b10      	ldr	r3, [pc, #64]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 800089c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a2:	4b0e      	ldr	r3, [pc, #56]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008b6:	220c      	movs	r2, #12
 80008b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008ba:	4b08      	ldr	r3, [pc, #32]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c0:	4b06      	ldr	r3, [pc, #24]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	; (80008dc <MX_USART2_UART_Init+0x4c>)
 80008c8:	f002 f9a4 	bl	8002c14 <HAL_UART_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008d2:	f7ff ff31 	bl	8000738 <Error_Handler>
  }

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000021c 	.word	0x2000021c
 80008e0:	40004400 	.word	0x40004400

080008e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08a      	sub	sp, #40	; 0x28
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4a19      	ldr	r2, [pc, #100]	; (8000968 <HAL_UART_MspInit+0x84>)
 8000902:	4293      	cmp	r3, r2
 8000904:	d12b      	bne.n	800095e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	613b      	str	r3, [r7, #16]
 800090a:	4b18      	ldr	r3, [pc, #96]	; (800096c <HAL_UART_MspInit+0x88>)
 800090c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800090e:	4a17      	ldr	r2, [pc, #92]	; (800096c <HAL_UART_MspInit+0x88>)
 8000910:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000914:	6413      	str	r3, [r2, #64]	; 0x40
 8000916:	4b15      	ldr	r3, [pc, #84]	; (800096c <HAL_UART_MspInit+0x88>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_UART_MspInit+0x88>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_UART_MspInit+0x88>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_UART_MspInit+0x88>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800093e:	230c      	movs	r3, #12
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094e:	2307      	movs	r3, #7
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4805      	ldr	r0, [pc, #20]	; (8000970 <HAL_UART_MspInit+0x8c>)
 800095a:	f000 f9db 	bl	8000d14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	; 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000978:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800097a:	e003      	b.n	8000984 <LoopCopyDataInit>

0800097c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800097c:	4b0c      	ldr	r3, [pc, #48]	; (80009b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800097e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000980:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000982:	3104      	adds	r1, #4

08000984 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000984:	480b      	ldr	r0, [pc, #44]	; (80009b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000988:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800098a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800098c:	d3f6      	bcc.n	800097c <CopyDataInit>
  ldr  r2, =_sbss
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000990:	e002      	b.n	8000998 <LoopFillZerobss>

08000992 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000992:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000994:	f842 3b04 	str.w	r3, [r2], #4

08000998 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800099a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800099c:	d3f9      	bcc.n	8000992 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800099e:	f7ff ff61 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a2:	f006 fa1b 	bl	8006ddc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a6:	f7ff fe13 	bl	80005d0 <main>
  bx  lr    
 80009aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009ac:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80009b0:	08007730 	.word	0x08007730
  ldr  r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80009b8:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80009bc:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80009c0:	20001b3c 	.word	0x20001b3c

080009c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_Init+0x40>)
 80009d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_Init+0x40>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x40>)
 80009ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f94d 	bl	8000c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	2000      	movs	r0, #0
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff fea0 	bl	8000740 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f965 	bl	8000cfa <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f92d 	bl	8000ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000004 	.word	0x20000004
 8000a64:	2000000c 	.word	0x2000000c
 8000a68:	20000008 	.word	0x20000008

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	2000000c 	.word	0x2000000c
 8000a90:	2000025c 	.word	0x2000025c

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	2000025c 	.word	0x2000025c

08000aac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ab4:	f7ff ffee 	bl	8000a94 <HAL_GetTick>
 8000ab8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ac4:	d005      	beq.n	8000ad2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ac6:	4b09      	ldr	r3, [pc, #36]	; (8000aec <HAL_Delay+0x40>)
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	4413      	add	r3, r2
 8000ad0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ad2:	bf00      	nop
 8000ad4:	f7ff ffde 	bl	8000a94 <HAL_GetTick>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	68bb      	ldr	r3, [r7, #8]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	68fa      	ldr	r2, [r7, #12]
 8000ae0:	429a      	cmp	r2, r3
 8000ae2:	d8f7      	bhi.n	8000ad4 <HAL_Delay+0x28>
  {
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3710      	adds	r7, #16
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	2000000c 	.word	0x2000000c

08000af0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b085      	sub	sp, #20
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0307 	and.w	r3, r3, #7
 8000afe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b00:	4b0c      	ldr	r3, [pc, #48]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b02:	68db      	ldr	r3, [r3, #12]
 8000b04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b06:	68ba      	ldr	r2, [r7, #8]
 8000b08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b22:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <__NVIC_SetPriorityGrouping+0x44>)
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	60d3      	str	r3, [r2, #12]
}
 8000b28:	bf00      	nop
 8000b2a:	3714      	adds	r7, #20
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b3c:	4b04      	ldr	r3, [pc, #16]	; (8000b50 <__NVIC_GetPriorityGrouping+0x18>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	0a1b      	lsrs	r3, r3, #8
 8000b42:	f003 0307 	and.w	r3, r3, #7
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	db0b      	blt.n	8000b7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	f003 021f 	and.w	r2, r3, #31
 8000b6c:	4907      	ldr	r1, [pc, #28]	; (8000b8c <__NVIC_EnableIRQ+0x38>)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	095b      	lsrs	r3, r3, #5
 8000b74:	2001      	movs	r0, #1
 8000b76:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	e000e100 	.word	0xe000e100

08000b90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	6039      	str	r1, [r7, #0]
 8000b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	db0a      	blt.n	8000bba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	b2da      	uxtb	r2, r3
 8000ba8:	490c      	ldr	r1, [pc, #48]	; (8000bdc <__NVIC_SetPriority+0x4c>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	0112      	lsls	r2, r2, #4
 8000bb0:	b2d2      	uxtb	r2, r2
 8000bb2:	440b      	add	r3, r1
 8000bb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bb8:	e00a      	b.n	8000bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	b2da      	uxtb	r2, r3
 8000bbe:	4908      	ldr	r1, [pc, #32]	; (8000be0 <__NVIC_SetPriority+0x50>)
 8000bc0:	79fb      	ldrb	r3, [r7, #7]
 8000bc2:	f003 030f 	and.w	r3, r3, #15
 8000bc6:	3b04      	subs	r3, #4
 8000bc8:	0112      	lsls	r2, r2, #4
 8000bca:	b2d2      	uxtb	r2, r2
 8000bcc:	440b      	add	r3, r1
 8000bce:	761a      	strb	r2, [r3, #24]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000e100 	.word	0xe000e100
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	; 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	60f8      	str	r0, [r7, #12]
 8000bec:	60b9      	str	r1, [r7, #8]
 8000bee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	f1c3 0307 	rsb	r3, r3, #7
 8000bfe:	2b04      	cmp	r3, #4
 8000c00:	bf28      	it	cs
 8000c02:	2304      	movcs	r3, #4
 8000c04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	3304      	adds	r3, #4
 8000c0a:	2b06      	cmp	r3, #6
 8000c0c:	d902      	bls.n	8000c14 <NVIC_EncodePriority+0x30>
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3b03      	subs	r3, #3
 8000c12:	e000      	b.n	8000c16 <NVIC_EncodePriority+0x32>
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c18:	f04f 32ff 	mov.w	r2, #4294967295
 8000c1c:	69bb      	ldr	r3, [r7, #24]
 8000c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c22:	43da      	mvns	r2, r3
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	401a      	ands	r2, r3
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	fa01 f303 	lsl.w	r3, r1, r3
 8000c36:	43d9      	mvns	r1, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c3c:	4313      	orrs	r3, r2
         );
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3724      	adds	r7, #36	; 0x24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
	...

08000c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c5c:	d301      	bcc.n	8000c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c5e:	2301      	movs	r3, #1
 8000c60:	e00f      	b.n	8000c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c62:	4a0a      	ldr	r2, [pc, #40]	; (8000c8c <SysTick_Config+0x40>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c6a:	210f      	movs	r1, #15
 8000c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c70:	f7ff ff8e 	bl	8000b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c74:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <SysTick_Config+0x40>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <SysTick_Config+0x40>)
 8000c7c:	2207      	movs	r2, #7
 8000c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c80:	2300      	movs	r3, #0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	e000e010 	.word	0xe000e010

08000c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c98:	6878      	ldr	r0, [r7, #4]
 8000c9a:	f7ff ff29 	bl	8000af0 <__NVIC_SetPriorityGrouping>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b086      	sub	sp, #24
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	60b9      	str	r1, [r7, #8]
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cb8:	f7ff ff3e 	bl	8000b38 <__NVIC_GetPriorityGrouping>
 8000cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	6978      	ldr	r0, [r7, #20]
 8000cc4:	f7ff ff8e 	bl	8000be4 <NVIC_EncodePriority>
 8000cc8:	4602      	mov	r2, r0
 8000cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cce:	4611      	mov	r1, r2
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff ff5d 	bl	8000b90 <__NVIC_SetPriority>
}
 8000cd6:	bf00      	nop
 8000cd8:	3718      	adds	r7, #24
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}

08000cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cde:	b580      	push	{r7, lr}
 8000ce0:	b082      	sub	sp, #8
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff31 	bl	8000b54 <__NVIC_EnableIRQ>
}
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}

08000cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cfa:	b580      	push	{r7, lr}
 8000cfc:	b082      	sub	sp, #8
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ffa2 	bl	8000c4c <SysTick_Config>
 8000d08:	4603      	mov	r3, r0
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
	...

08000d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b089      	sub	sp, #36	; 0x24
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d26:	2300      	movs	r3, #0
 8000d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	e16b      	b.n	8001008 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d30:	2201      	movs	r2, #1
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	697a      	ldr	r2, [r7, #20]
 8000d40:	4013      	ands	r3, r2
 8000d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d44:	693a      	ldr	r2, [r7, #16]
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	f040 815a 	bne.w	8001002 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d00b      	beq.n	8000d6e <HAL_GPIO_Init+0x5a>
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d62:	2b11      	cmp	r3, #17
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	2b12      	cmp	r3, #18
 8000d6c:	d130      	bne.n	8000dd0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	689b      	ldr	r3, [r3, #8]
 8000d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4013      	ands	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	43db      	mvns	r3, r3
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4013      	ands	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	091b      	lsrs	r3, r3, #4
 8000dba:	f003 0201 	and.w	r2, r3, #1
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	69ba      	ldr	r2, [r7, #24]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	2203      	movs	r2, #3
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	43db      	mvns	r3, r3
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4013      	ands	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	689a      	ldr	r2, [r3, #8]
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	69ba      	ldr	r2, [r7, #24]
 8000df6:	4313      	orrs	r3, r2
 8000df8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0xfc>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b12      	cmp	r3, #18
 8000e0e:	d123      	bne.n	8000e58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4013      	ands	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	69ba      	ldr	r2, [r7, #24]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	69b9      	ldr	r1, [r7, #24]
 8000e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0203 	and.w	r2, r3, #3
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 80b4 	beq.w	8001002 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	60fb      	str	r3, [r7, #12]
 8000e9e:	4b5f      	ldr	r3, [pc, #380]	; (800101c <HAL_GPIO_Init+0x308>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea2:	4a5e      	ldr	r2, [pc, #376]	; (800101c <HAL_GPIO_Init+0x308>)
 8000ea4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eaa:	4b5c      	ldr	r3, [pc, #368]	; (800101c <HAL_GPIO_Init+0x308>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000eb6:	4a5a      	ldr	r2, [pc, #360]	; (8001020 <HAL_GPIO_Init+0x30c>)
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	089b      	lsrs	r3, r3, #2
 8000ebc:	3302      	adds	r3, #2
 8000ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ec4:	69fb      	ldr	r3, [r7, #28]
 8000ec6:	f003 0303 	and.w	r3, r3, #3
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	220f      	movs	r2, #15
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43db      	mvns	r3, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a51      	ldr	r2, [pc, #324]	; (8001024 <HAL_GPIO_Init+0x310>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d02b      	beq.n	8000f3a <HAL_GPIO_Init+0x226>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a50      	ldr	r2, [pc, #320]	; (8001028 <HAL_GPIO_Init+0x314>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d025      	beq.n	8000f36 <HAL_GPIO_Init+0x222>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4f      	ldr	r2, [pc, #316]	; (800102c <HAL_GPIO_Init+0x318>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d01f      	beq.n	8000f32 <HAL_GPIO_Init+0x21e>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4e      	ldr	r2, [pc, #312]	; (8001030 <HAL_GPIO_Init+0x31c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d019      	beq.n	8000f2e <HAL_GPIO_Init+0x21a>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4d      	ldr	r2, [pc, #308]	; (8001034 <HAL_GPIO_Init+0x320>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d013      	beq.n	8000f2a <HAL_GPIO_Init+0x216>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_GPIO_Init+0x324>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d00d      	beq.n	8000f26 <HAL_GPIO_Init+0x212>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4b      	ldr	r2, [pc, #300]	; (800103c <HAL_GPIO_Init+0x328>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d007      	beq.n	8000f22 <HAL_GPIO_Init+0x20e>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	; (8001040 <HAL_GPIO_Init+0x32c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d101      	bne.n	8000f1e <HAL_GPIO_Init+0x20a>
 8000f1a:	2307      	movs	r3, #7
 8000f1c:	e00e      	b.n	8000f3c <HAL_GPIO_Init+0x228>
 8000f1e:	2308      	movs	r3, #8
 8000f20:	e00c      	b.n	8000f3c <HAL_GPIO_Init+0x228>
 8000f22:	2306      	movs	r3, #6
 8000f24:	e00a      	b.n	8000f3c <HAL_GPIO_Init+0x228>
 8000f26:	2305      	movs	r3, #5
 8000f28:	e008      	b.n	8000f3c <HAL_GPIO_Init+0x228>
 8000f2a:	2304      	movs	r3, #4
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x228>
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e004      	b.n	8000f3c <HAL_GPIO_Init+0x228>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_Init+0x228>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x228>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	69fa      	ldr	r2, [r7, #28]
 8000f3e:	f002 0203 	and.w	r2, r2, #3
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	4093      	lsls	r3, r2
 8000f46:	69ba      	ldr	r2, [r7, #24]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f4c:	4934      	ldr	r1, [pc, #208]	; (8001020 <HAL_GPIO_Init+0x30c>)
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f5a:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	43db      	mvns	r3, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4013      	ands	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f7e:	4a31      	ldr	r2, [pc, #196]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f84:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	69ba      	ldr	r2, [r7, #24]
 8000f90:	4013      	ands	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000fa0:	69ba      	ldr	r2, [r7, #24]
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fa8:	4a26      	ldr	r2, [pc, #152]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fca:	69ba      	ldr	r2, [r7, #24]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fd2:	4a1c      	ldr	r2, [pc, #112]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd8:	4b1a      	ldr	r3, [pc, #104]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	69ba      	ldr	r2, [r7, #24]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	693b      	ldr	r3, [r7, #16]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ffc:	4a11      	ldr	r2, [pc, #68]	; (8001044 <HAL_GPIO_Init+0x330>)
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3301      	adds	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
 8001008:	69fb      	ldr	r3, [r7, #28]
 800100a:	2b0f      	cmp	r3, #15
 800100c:	f67f ae90 	bls.w	8000d30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001010:	bf00      	nop
 8001012:	3724      	adds	r7, #36	; 0x24
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	40023800 	.word	0x40023800
 8001020:	40013800 	.word	0x40013800
 8001024:	40020000 	.word	0x40020000
 8001028:	40020400 	.word	0x40020400
 800102c:	40020800 	.word	0x40020800
 8001030:	40020c00 	.word	0x40020c00
 8001034:	40021000 	.word	0x40021000
 8001038:	40021400 	.word	0x40021400
 800103c:	40021800 	.word	0x40021800
 8001040:	40021c00 	.word	0x40021c00
 8001044:	40013c00 	.word	0x40013c00

08001048 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104a:	b08f      	sub	sp, #60	; 0x3c
 800104c:	af0a      	add	r7, sp, #40	; 0x28
 800104e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e10f      	b.n	800127a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d106      	bne.n	800107a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f005 fbaf 	bl	80067d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2203      	movs	r2, #3
 800107e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4618      	mov	r0, r3
 800109a:	f002 fb7c 	bl	8003796 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	687e      	ldr	r6, [r7, #4]
 80010a6:	466d      	mov	r5, sp
 80010a8:	f106 0410 	add.w	r4, r6, #16
 80010ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010b4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010b8:	e885 0003 	stmia.w	r5, {r0, r1}
 80010bc:	1d33      	adds	r3, r6, #4
 80010be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f002 fa53 	bl	800356c <USB_CoreInit>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2202      	movs	r2, #2
 80010d0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e0d0      	b.n	800127a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f002 fb6a 	bl	80037b8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	73fb      	strb	r3, [r7, #15]
 80010e8:	e04a      	b.n	8001180 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010ea:	7bfa      	ldrb	r2, [r7, #15]
 80010ec:	6879      	ldr	r1, [r7, #4]
 80010ee:	4613      	mov	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	1a9b      	subs	r3, r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	440b      	add	r3, r1
 80010f8:	333d      	adds	r3, #61	; 0x3d
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010fe:	7bfa      	ldrb	r2, [r7, #15]
 8001100:	6879      	ldr	r1, [r7, #4]
 8001102:	4613      	mov	r3, r2
 8001104:	00db      	lsls	r3, r3, #3
 8001106:	1a9b      	subs	r3, r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	440b      	add	r3, r1
 800110c:	333c      	adds	r3, #60	; 0x3c
 800110e:	7bfa      	ldrb	r2, [r7, #15]
 8001110:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001112:	7bfa      	ldrb	r2, [r7, #15]
 8001114:	7bfb      	ldrb	r3, [r7, #15]
 8001116:	b298      	uxth	r0, r3
 8001118:	6879      	ldr	r1, [r7, #4]
 800111a:	4613      	mov	r3, r2
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	1a9b      	subs	r3, r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	440b      	add	r3, r1
 8001124:	3342      	adds	r3, #66	; 0x42
 8001126:	4602      	mov	r2, r0
 8001128:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800112a:	7bfa      	ldrb	r2, [r7, #15]
 800112c:	6879      	ldr	r1, [r7, #4]
 800112e:	4613      	mov	r3, r2
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	1a9b      	subs	r3, r3, r2
 8001134:	009b      	lsls	r3, r3, #2
 8001136:	440b      	add	r3, r1
 8001138:	333f      	adds	r3, #63	; 0x3f
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800113e:	7bfa      	ldrb	r2, [r7, #15]
 8001140:	6879      	ldr	r1, [r7, #4]
 8001142:	4613      	mov	r3, r2
 8001144:	00db      	lsls	r3, r3, #3
 8001146:	1a9b      	subs	r3, r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	440b      	add	r3, r1
 800114c:	3344      	adds	r3, #68	; 0x44
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001152:	7bfa      	ldrb	r2, [r7, #15]
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4613      	mov	r3, r2
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	440b      	add	r3, r1
 8001160:	3348      	adds	r3, #72	; 0x48
 8001162:	2200      	movs	r2, #0
 8001164:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	6879      	ldr	r1, [r7, #4]
 800116a:	4613      	mov	r3, r2
 800116c:	00db      	lsls	r3, r3, #3
 800116e:	1a9b      	subs	r3, r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	440b      	add	r3, r1
 8001174:	3350      	adds	r3, #80	; 0x50
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800117a:	7bfb      	ldrb	r3, [r7, #15]
 800117c:	3301      	adds	r3, #1
 800117e:	73fb      	strb	r3, [r7, #15]
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	429a      	cmp	r2, r3
 8001188:	d3af      	bcc.n	80010ea <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800118a:	2300      	movs	r3, #0
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e044      	b.n	800121a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	00db      	lsls	r3, r3, #3
 8001198:	1a9b      	subs	r3, r3, r2
 800119a:	009b      	lsls	r3, r3, #2
 800119c:	440b      	add	r3, r1
 800119e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80011a2:	2200      	movs	r2, #0
 80011a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011a6:	7bfa      	ldrb	r2, [r7, #15]
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80011b8:	7bfa      	ldrb	r2, [r7, #15]
 80011ba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	1a9b      	subs	r3, r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4613      	mov	r3, r2
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	1a9b      	subs	r3, r3, r2
 80011dc:	009b      	lsls	r3, r3, #2
 80011de:	440b      	add	r3, r1
 80011e0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011e8:	7bfa      	ldrb	r2, [r7, #15]
 80011ea:	6879      	ldr	r1, [r7, #4]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011fe:	7bfa      	ldrb	r2, [r7, #15]
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	1a9b      	subs	r3, r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	440b      	add	r3, r1
 800120c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001214:	7bfb      	ldrb	r3, [r7, #15]
 8001216:	3301      	adds	r3, #1
 8001218:	73fb      	strb	r3, [r7, #15]
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	429a      	cmp	r2, r3
 8001222:	d3b5      	bcc.n	8001190 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	603b      	str	r3, [r7, #0]
 800122a:	687e      	ldr	r6, [r7, #4]
 800122c:	466d      	mov	r5, sp
 800122e:	f106 0410 	add.w	r4, r6, #16
 8001232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800123a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800123e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001242:	1d33      	adds	r3, r6, #4
 8001244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001246:	6838      	ldr	r0, [r7, #0]
 8001248:	f002 fae0 	bl	800380c <USB_DevInit>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d005      	beq.n	800125e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2202      	movs	r2, #2
 8001256:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800125a:	2301      	movs	r3, #1
 800125c:	e00d      	b.n	800127a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4618      	mov	r0, r3
 8001274:	f003 fb28 	bl	80048c8 <USB_DevDisconnect>

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001282 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001282:	b580      	push	{r7, lr}
 8001284:	b084      	sub	sp, #16
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001296:	2b01      	cmp	r3, #1
 8001298:	d101      	bne.n	800129e <HAL_PCD_Start+0x1c>
 800129a:	2302      	movs	r3, #2
 800129c:	e020      	b.n	80012e0 <HAL_PCD_Start+0x5e>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2201      	movs	r2, #1
 80012a2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d109      	bne.n	80012c2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d005      	beq.n	80012c2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f002 fa54 	bl	8003774 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4618      	mov	r0, r3
 80012d2:	f003 fad8 	bl	8004886 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3710      	adds	r7, #16
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}

080012e8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012e8:	b590      	push	{r4, r7, lr}
 80012ea:	b08d      	sub	sp, #52	; 0x34
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f003 fb96 	bl	8004a30 <USB_GetMode>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	f040 839d 	bne.w	8001a46 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4618      	mov	r0, r3
 8001312:	f003 fafa 	bl	800490a <USB_ReadInterrupts>
 8001316:	4603      	mov	r3, r0
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 8393 	beq.w	8001a44 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f003 faf1 	bl	800490a <USB_ReadInterrupts>
 8001328:	4603      	mov	r3, r0
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	2b02      	cmp	r3, #2
 8001330:	d107      	bne.n	8001342 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f002 0202 	and.w	r2, r2, #2
 8001340:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fadf 	bl	800490a <USB_ReadInterrupts>
 800134c:	4603      	mov	r3, r0
 800134e:	f003 0310 	and.w	r3, r3, #16
 8001352:	2b10      	cmp	r3, #16
 8001354:	d161      	bne.n	800141a <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f022 0210 	bic.w	r2, r2, #16
 8001364:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001366:	6a3b      	ldr	r3, [r7, #32]
 8001368:	6a1b      	ldr	r3, [r3, #32]
 800136a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	f003 020f 	and.w	r2, r3, #15
 8001372:	4613      	mov	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	1a9b      	subs	r3, r3, r2
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	3304      	adds	r3, #4
 8001384:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001386:	69bb      	ldr	r3, [r7, #24]
 8001388:	0c5b      	lsrs	r3, r3, #17
 800138a:	f003 030f 	and.w	r3, r3, #15
 800138e:	2b02      	cmp	r3, #2
 8001390:	d124      	bne.n	80013dc <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001398:	4013      	ands	r3, r2
 800139a:	2b00      	cmp	r3, #0
 800139c:	d035      	beq.n	800140a <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	091b      	lsrs	r3, r3, #4
 80013a6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80013a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013ac:	b29b      	uxth	r3, r3
 80013ae:	461a      	mov	r2, r3
 80013b0:	6a38      	ldr	r0, [r7, #32]
 80013b2:	f003 f945 	bl	8004640 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	68da      	ldr	r2, [r3, #12]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c2:	441a      	add	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	699a      	ldr	r2, [r3, #24]
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	091b      	lsrs	r3, r3, #4
 80013d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013d4:	441a      	add	r2, r3
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	619a      	str	r2, [r3, #24]
 80013da:	e016      	b.n	800140a <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	0c5b      	lsrs	r3, r3, #17
 80013e0:	f003 030f 	and.w	r3, r3, #15
 80013e4:	2b06      	cmp	r3, #6
 80013e6:	d110      	bne.n	800140a <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013ee:	2208      	movs	r2, #8
 80013f0:	4619      	mov	r1, r3
 80013f2:	6a38      	ldr	r0, [r7, #32]
 80013f4:	f003 f924 	bl	8004640 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	699a      	ldr	r2, [r3, #24]
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	091b      	lsrs	r3, r3, #4
 8001400:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001404:	441a      	add	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	699a      	ldr	r2, [r3, #24]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f042 0210 	orr.w	r2, r2, #16
 8001418:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4618      	mov	r0, r3
 8001420:	f003 fa73 	bl	800490a <USB_ReadInterrupts>
 8001424:	4603      	mov	r3, r0
 8001426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800142a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800142e:	d16e      	bne.n	800150e <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4618      	mov	r0, r3
 800143a:	f003 fa79 	bl	8004930 <USB_ReadDevAllOutEpInterrupt>
 800143e:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001440:	e062      	b.n	8001508 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001444:	f003 0301 	and.w	r3, r3, #1
 8001448:	2b00      	cmp	r3, #0
 800144a:	d057      	beq.n	80014fc <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001452:	b2d2      	uxtb	r2, r2
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f003 fa9e 	bl	8004998 <USB_ReadDevOutEPInterrupt>
 800145c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	f003 0301 	and.w	r3, r3, #1
 8001464:	2b00      	cmp	r3, #0
 8001466:	d00c      	beq.n	8001482 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146a:	015a      	lsls	r2, r3, #5
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	4413      	add	r3, r2
 8001470:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001474:	461a      	mov	r2, r3
 8001476:	2301      	movs	r3, #1
 8001478:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800147a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f000 fdb1 	bl	8001fe4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	f003 0308 	and.w	r3, r3, #8
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00c      	beq.n	80014a6 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	015a      	lsls	r2, r3, #5
 8001490:	69fb      	ldr	r3, [r7, #28]
 8001492:	4413      	add	r3, r2
 8001494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001498:	461a      	mov	r2, r3
 800149a:	2308      	movs	r3, #8
 800149c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800149e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f000 feab 	bl	80021fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	f003 0310 	and.w	r3, r3, #16
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d008      	beq.n	80014c2 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	015a      	lsls	r2, r3, #5
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	4413      	add	r3, r2
 80014b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014bc:	461a      	mov	r2, r3
 80014be:	2310      	movs	r3, #16
 80014c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	f003 0320 	and.w	r3, r3, #32
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	015a      	lsls	r2, r3, #5
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	4413      	add	r3, r2
 80014d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014d8:	461a      	mov	r2, r3
 80014da:	2320      	movs	r3, #32
 80014dc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d009      	beq.n	80014fc <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ea:	015a      	lsls	r2, r3, #5
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	4413      	add	r3, r2
 80014f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014f4:	461a      	mov	r2, r3
 80014f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014fa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fe:	3301      	adds	r3, #1
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800150a:	2b00      	cmp	r3, #0
 800150c:	d199      	bne.n	8001442 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f003 f9f9 	bl	800490a <USB_ReadInterrupts>
 8001518:	4603      	mov	r3, r0
 800151a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800151e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001522:	f040 80c0 	bne.w	80016a6 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f003 fa1a 	bl	8004964 <USB_ReadDevAllInEpInterrupt>
 8001530:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001536:	e0b2      	b.n	800169e <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 80a7 	beq.w	8001692 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800154a:	b2d2      	uxtb	r2, r2
 800154c:	4611      	mov	r1, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fa40 	bl	80049d4 <USB_ReadDevInEPInterrupt>
 8001554:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	f003 0301 	and.w	r3, r3, #1
 800155c:	2b00      	cmp	r3, #0
 800155e:	d057      	beq.n	8001610 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001562:	f003 030f 	and.w	r3, r3, #15
 8001566:	2201      	movs	r2, #1
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001574:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	69f9      	ldr	r1, [r7, #28]
 800157c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001580:	4013      	ands	r3, r2
 8001582:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001590:	461a      	mov	r2, r3
 8001592:	2301      	movs	r3, #1
 8001594:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691b      	ldr	r3, [r3, #16]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d132      	bne.n	8001604 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800159e:	6879      	ldr	r1, [r7, #4]
 80015a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	1a9b      	subs	r3, r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3348      	adds	r3, #72	; 0x48
 80015ae:	6819      	ldr	r1, [r3, #0]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	1a9b      	subs	r3, r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	4403      	add	r3, r0
 80015be:	3344      	adds	r3, #68	; 0x44
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4419      	add	r1, r3
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c8:	4613      	mov	r3, r2
 80015ca:	00db      	lsls	r3, r3, #3
 80015cc:	1a9b      	subs	r3, r3, r2
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4403      	add	r3, r0
 80015d2:	3348      	adds	r3, #72	; 0x48
 80015d4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d113      	bne.n	8001604 <HAL_PCD_IRQHandler+0x31c>
 80015dc:	6879      	ldr	r1, [r7, #4]
 80015de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e0:	4613      	mov	r3, r2
 80015e2:	00db      	lsls	r3, r3, #3
 80015e4:	1a9b      	subs	r3, r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	440b      	add	r3, r1
 80015ea:	3350      	adds	r3, #80	; 0x50
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d108      	bne.n	8001604 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6818      	ldr	r0, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015fc:	461a      	mov	r2, r3
 80015fe:	2101      	movs	r1, #1
 8001600:	f003 fa48 	bl	8004a94 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f005 f965 	bl	80068da <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	2b00      	cmp	r3, #0
 8001618:	d008      	beq.n	800162c <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001626:	461a      	mov	r2, r3
 8001628:	2308      	movs	r3, #8
 800162a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	f003 0310 	and.w	r3, r3, #16
 8001632:	2b00      	cmp	r3, #0
 8001634:	d008      	beq.n	8001648 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	015a      	lsls	r2, r3, #5
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	4413      	add	r3, r2
 800163e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001642:	461a      	mov	r2, r3
 8001644:	2310      	movs	r3, #16
 8001646:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800164e:	2b00      	cmp	r3, #0
 8001650:	d008      	beq.n	8001664 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001654:	015a      	lsls	r2, r3, #5
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	4413      	add	r3, r2
 800165a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800165e:	461a      	mov	r2, r3
 8001660:	2340      	movs	r3, #64	; 0x40
 8001662:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	2b00      	cmp	r3, #0
 800166c:	d008      	beq.n	8001680 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800166e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001670:	015a      	lsls	r2, r3, #5
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	4413      	add	r3, r2
 8001676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800167a:	461a      	mov	r2, r3
 800167c:	2302      	movs	r3, #2
 800167e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001686:	2b00      	cmp	r3, #0
 8001688:	d003      	beq.n	8001692 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800168a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f000 fc1b 	bl	8001ec8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001694:	3301      	adds	r3, #1
 8001696:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800169a:	085b      	lsrs	r3, r3, #1
 800169c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800169e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f47f af49 	bne.w	8001538 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f003 f92d 	bl	800490a <USB_ReadInterrupts>
 80016b0:	4603      	mov	r3, r0
 80016b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80016b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016ba:	d122      	bne.n	8001702 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	69fa      	ldr	r2, [r7, #28]
 80016c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ca:	f023 0301 	bic.w	r3, r3, #1
 80016ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80016e2:	2100      	movs	r1, #0
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fe27 	bl	8002338 <HAL_PCDEx_LPM_Callback>
 80016ea:	e002      	b.n	80016f2 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80016ec:	6878      	ldr	r0, [r7, #4]
 80016ee:	f005 f96b 	bl	80069c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	695a      	ldr	r2, [r3, #20]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001700:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f003 f8ff 	bl	800490a <USB_ReadInterrupts>
 800170c:	4603      	mov	r3, r0
 800170e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001712:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001716:	d112      	bne.n	800173e <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001718:	69fb      	ldr	r3, [r7, #28]
 800171a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f005 f927 	bl	800697c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	695a      	ldr	r2, [r3, #20]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800173c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f003 f8e1 	bl	800490a <USB_ReadInterrupts>
 8001748:	4603      	mov	r3, r0
 800174a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800174e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001752:	f040 80c7 	bne.w	80018e4 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	69fa      	ldr	r2, [r7, #28]
 8001760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001764:	f023 0301 	bic.w	r3, r3, #1
 8001768:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2110      	movs	r1, #16
 8001770:	4618      	mov	r0, r3
 8001772:	f002 f9af 	bl	8003ad4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
 800177a:	e056      	b.n	800182a <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177e:	015a      	lsls	r2, r3, #5
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001788:	461a      	mov	r2, r3
 800178a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800178e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	015a      	lsls	r2, r3, #5
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	4413      	add	r3, r2
 8001798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a0:	0151      	lsls	r1, r2, #5
 80017a2:	69fa      	ldr	r2, [r7, #28]
 80017a4:	440a      	add	r2, r1
 80017a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80017ae:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80017b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b2:	015a      	lsls	r2, r3, #5
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	4413      	add	r3, r2
 80017b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c0:	0151      	lsls	r1, r2, #5
 80017c2:	69fa      	ldr	r2, [r7, #28]
 80017c4:	440a      	add	r2, r1
 80017c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80017ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80017d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d2:	015a      	lsls	r2, r3, #5
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	4413      	add	r3, r2
 80017d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017dc:	461a      	mov	r2, r3
 80017de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80017e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80017e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017e6:	015a      	lsls	r2, r3, #5
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	4413      	add	r3, r2
 80017ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017f4:	0151      	lsls	r1, r2, #5
 80017f6:	69fa      	ldr	r2, [r7, #28]
 80017f8:	440a      	add	r2, r1
 80017fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001802:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001806:	015a      	lsls	r2, r3, #5
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	4413      	add	r3, r2
 800180c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001814:	0151      	lsls	r1, r2, #5
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	440a      	add	r2, r1
 800181a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800181e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001822:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001826:	3301      	adds	r3, #1
 8001828:	62fb      	str	r3, [r7, #44]	; 0x2c
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001830:	429a      	cmp	r2, r3
 8001832:	d3a3      	bcc.n	800177c <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001834:	69fb      	ldr	r3, [r7, #28]
 8001836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	69fa      	ldr	r2, [r7, #28]
 800183e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001842:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001846:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184c:	2b00      	cmp	r3, #0
 800184e:	d016      	beq.n	800187e <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001856:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001860:	f043 030b 	orr.w	r3, r3, #11
 8001864:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	f043 030b 	orr.w	r3, r3, #11
 800187a:	6453      	str	r3, [r2, #68]	; 0x44
 800187c:	e015      	b.n	80018aa <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800188c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001890:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001894:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800189c:	691b      	ldr	r3, [r3, #16]
 800189e:	69fa      	ldr	r2, [r7, #28]
 80018a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018a4:	f043 030b 	orr.w	r3, r3, #11
 80018a8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018b8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80018bc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6818      	ldr	r0, [r3, #0]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80018ce:	461a      	mov	r2, r3
 80018d0:	f003 f8e0 	bl	8004a94 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	695a      	ldr	r2, [r3, #20]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80018e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 f80e 	bl	800490a <USB_ReadInterrupts>
 80018ee:	4603      	mov	r3, r0
 80018f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018f8:	d124      	bne.n	8001944 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 f8a4 	bl	8004a4c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4618      	mov	r0, r3
 800190a:	f002 f944 	bl	8003b96 <USB_GetDevSpeed>
 800190e:	4603      	mov	r3, r0
 8001910:	461a      	mov	r2, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681c      	ldr	r4, [r3, #0]
 800191a:	f001 f947 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 800191e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001924:	b2db      	uxtb	r3, r3
 8001926:	461a      	mov	r2, r3
 8001928:	4620      	mov	r0, r4
 800192a:	f001 fe81 	bl	8003630 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800192e:	6878      	ldr	r0, [r7, #4]
 8001930:	f004 fffb 	bl	800692a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001942:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f002 ffde 	bl	800490a <USB_ReadInterrupts>
 800194e:	4603      	mov	r3, r0
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b08      	cmp	r3, #8
 8001956:	d10a      	bne.n	800196e <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f004 ffd8 	bl	800690e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	695a      	ldr	r2, [r3, #20]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f002 0208 	and.w	r2, r2, #8
 800196c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f002 ffc9 	bl	800490a <USB_ReadInterrupts>
 8001978:	4603      	mov	r3, r0
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001982:	d10f      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198a:	b2db      	uxtb	r3, r3
 800198c:	4619      	mov	r1, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f005 f83a 	bl	8006a08 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	695a      	ldr	r2, [r3, #20]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80019a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f002 ffae 	bl	800490a <USB_ReadInterrupts>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80019b8:	d10f      	bne.n	80019da <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80019be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c0:	b2db      	uxtb	r3, r3
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f005 f80d 	bl	80069e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80019d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f002 ff93 	bl	800490a <USB_ReadInterrupts>
 80019e4:	4603      	mov	r3, r0
 80019e6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80019ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019ee:	d10a      	bne.n	8001a06 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f005 f81b 	bl	8006a2c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	695a      	ldr	r2, [r3, #20]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 ff7d 	bl	800490a <USB_ReadInterrupts>
 8001a10:	4603      	mov	r3, r0
 8001a12:	f003 0304 	and.w	r3, r3, #4
 8001a16:	2b04      	cmp	r3, #4
 8001a18:	d115      	bne.n	8001a46 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a22:	69bb      	ldr	r3, [r7, #24]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d002      	beq.n	8001a32 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f005 f80b 	bl	8006a48 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6859      	ldr	r1, [r3, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	e000      	b.n	8001a46 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001a44:	bf00      	nop
    }
  }
}
 8001a46:	3734      	adds	r7, #52	; 0x34
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd90      	pop	{r4, r7, pc}

08001a4c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d101      	bne.n	8001a66 <HAL_PCD_SetAddress+0x1a>
 8001a62:	2302      	movs	r3, #2
 8001a64:	e013      	b.n	8001a8e <HAL_PCD_SetAddress+0x42>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	78fa      	ldrb	r2, [r7, #3]
 8001a7c:	4611      	mov	r1, r2
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f002 fedb 	bl	800483a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	4608      	mov	r0, r1
 8001aa0:	4611      	mov	r1, r2
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	70fb      	strb	r3, [r7, #3]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	803b      	strh	r3, [r7, #0]
 8001aac:	4613      	mov	r3, r2
 8001aae:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da0f      	bge.n	8001adc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	f003 020f 	and.w	r2, r3, #15
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	1a9b      	subs	r3, r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	3338      	adds	r3, #56	; 0x38
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	705a      	strb	r2, [r3, #1]
 8001ada:	e00f      	b.n	8001afc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001adc:	78fb      	ldrb	r3, [r7, #3]
 8001ade:	f003 020f 	and.w	r2, r3, #15
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	1a9b      	subs	r3, r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	3304      	adds	r3, #4
 8001af4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 030f 	and.w	r3, r3, #15
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b08:	883a      	ldrh	r2, [r7, #0]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	78ba      	ldrb	r2, [r7, #2]
 8001b12:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	785b      	ldrb	r3, [r3, #1]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d004      	beq.n	8001b26 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b26:	78bb      	ldrb	r3, [r7, #2]
 8001b28:	2b02      	cmp	r3, #2
 8001b2a:	d102      	bne.n	8001b32 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d101      	bne.n	8001b40 <HAL_PCD_EP_Open+0xaa>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e00e      	b.n	8001b5e <HAL_PCD_EP_Open+0xc8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	68f9      	ldr	r1, [r7, #12]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f002 f846 	bl	8003be0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2200      	movs	r2, #0
 8001b58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001b5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3710      	adds	r7, #16
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b084      	sub	sp, #16
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
 8001b6e:	460b      	mov	r3, r1
 8001b70:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	da0f      	bge.n	8001b9a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7a:	78fb      	ldrb	r3, [r7, #3]
 8001b7c:	f003 020f 	and.w	r2, r3, #15
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	1a9b      	subs	r3, r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	3338      	adds	r3, #56	; 0x38
 8001b8a:	687a      	ldr	r2, [r7, #4]
 8001b8c:	4413      	add	r3, r2
 8001b8e:	3304      	adds	r3, #4
 8001b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e00f      	b.n	8001bba <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 020f 	and.w	r2, r3, #15
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	1a9b      	subs	r3, r3, r2
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3304      	adds	r3, #4
 8001bb2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bba:	78fb      	ldrb	r3, [r7, #3]
 8001bbc:	f003 030f 	and.w	r3, r3, #15
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d101      	bne.n	8001bd4 <HAL_PCD_EP_Close+0x6e>
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	e00e      	b.n	8001bf2 <HAL_PCD_EP_Close+0x8c>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	68f9      	ldr	r1, [r7, #12]
 8001be2:	4618      	mov	r0, r3
 8001be4:	f002 f884 	bl	8003cf0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001bf0:	2300      	movs	r3, #0
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3710      	adds	r7, #16
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b086      	sub	sp, #24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	607a      	str	r2, [r7, #4]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	460b      	mov	r3, r1
 8001c08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	7afb      	ldrb	r3, [r7, #11]
 8001c0c:	f003 020f 	and.w	r2, r3, #15
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	1a9b      	subs	r3, r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001c1c:	68fa      	ldr	r2, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	3304      	adds	r3, #4
 8001c22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c3c:	7afb      	ldrb	r3, [r7, #11]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	691b      	ldr	r3, [r3, #16]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d102      	bne.n	8001c56 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c56:	7afb      	ldrb	r3, [r7, #11]
 8001c58:	f003 030f 	and.w	r3, r3, #15
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d109      	bne.n	8001c74 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	6979      	ldr	r1, [r7, #20]
 8001c6e:	f002 fb5f 	bl	8004330 <USB_EP0StartXfer>
 8001c72:	e008      	b.n	8001c86 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6818      	ldr	r0, [r3, #0]
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	6979      	ldr	r1, [r7, #20]
 8001c82:	f002 f911 	bl	8003ea8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
}
 8001c88:	4618      	mov	r0, r3
 8001c8a:	3718      	adds	r7, #24
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	460b      	mov	r3, r1
 8001c9a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 020f 	and.w	r2, r3, #15
 8001ca2:	6879      	ldr	r1, [r7, #4]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	00db      	lsls	r3, r3, #3
 8001ca8:	1a9b      	subs	r3, r3, r2
 8001caa:	009b      	lsls	r3, r3, #2
 8001cac:	440b      	add	r3, r1
 8001cae:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001cb2:	681b      	ldr	r3, [r3, #0]
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd0:	7afb      	ldrb	r3, [r7, #11]
 8001cd2:	f003 020f 	and.w	r2, r3, #15
 8001cd6:	4613      	mov	r3, r2
 8001cd8:	00db      	lsls	r3, r3, #3
 8001cda:	1a9b      	subs	r3, r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	3338      	adds	r3, #56	; 0x38
 8001ce0:	68fa      	ldr	r2, [r7, #12]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3304      	adds	r3, #4
 8001ce6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	683a      	ldr	r2, [r7, #0]
 8001cf2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d00:	7afb      	ldrb	r3, [r7, #11]
 8001d02:	f003 030f 	and.w	r3, r3, #15
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	2b01      	cmp	r3, #1
 8001d12:	d102      	bne.n	8001d1a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d1a:	7afb      	ldrb	r3, [r7, #11]
 8001d1c:	f003 030f 	and.w	r3, r3, #15
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6818      	ldr	r0, [r3, #0]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	691b      	ldr	r3, [r3, #16]
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	461a      	mov	r2, r3
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	f002 fafd 	bl	8004330 <USB_EP0StartXfer>
 8001d36:	e008      	b.n	8001d4a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6818      	ldr	r0, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	461a      	mov	r2, r3
 8001d44:	6979      	ldr	r1, [r7, #20]
 8001d46:	f002 f8af 	bl	8003ea8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}

08001d54 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 020f 	and.w	r2, r3, #15
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d901      	bls.n	8001d72 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e050      	b.n	8001e14 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	da0f      	bge.n	8001d9a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 020f 	and.w	r2, r3, #15
 8001d80:	4613      	mov	r3, r2
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	1a9b      	subs	r3, r3, r2
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	3338      	adds	r3, #56	; 0x38
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3304      	adds	r3, #4
 8001d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	2201      	movs	r2, #1
 8001d96:	705a      	strb	r2, [r3, #1]
 8001d98:	e00d      	b.n	8001db6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2200      	movs	r2, #0
 8001db4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	2201      	movs	r2, #1
 8001dba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dbc:	78fb      	ldrb	r3, [r7, #3]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	b2da      	uxtb	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_PCD_EP_SetStall+0x82>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e01e      	b.n	8001e14 <HAL_PCD_EP_SetStall+0xc0>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	68f9      	ldr	r1, [r7, #12]
 8001de4:	4618      	mov	r0, r3
 8001de6:	f002 fc54 	bl	8004692 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10a      	bne.n	8001e0a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	b2d9      	uxtb	r1, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001e04:	461a      	mov	r2, r3
 8001e06:	f002 fe45 	bl	8004a94 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	460b      	mov	r3, r1
 8001e26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 020f 	and.w	r2, r3, #15
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d901      	bls.n	8001e3a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e042      	b.n	8001ec0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	da0f      	bge.n	8001e62 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	1a9b      	subs	r3, r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	3338      	adds	r3, #56	; 0x38
 8001e52:	687a      	ldr	r2, [r7, #4]
 8001e54:	4413      	add	r3, r2
 8001e56:	3304      	adds	r3, #4
 8001e58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	705a      	strb	r2, [r3, #1]
 8001e60:	e00f      	b.n	8001e82 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	4613      	mov	r3, r2
 8001e6a:	00db      	lsls	r3, r3, #3
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e74:	687a      	ldr	r2, [r7, #4]
 8001e76:	4413      	add	r3, r2
 8001e78:	3304      	adds	r3, #4
 8001e7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	2200      	movs	r2, #0
 8001e86:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e88:	78fb      	ldrb	r3, [r7, #3]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	b2da      	uxtb	r2, r3
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_PCD_EP_ClrStall+0x86>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e00e      	b.n	8001ec0 <HAL_PCD_EP_ClrStall+0xa4>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68f9      	ldr	r1, [r7, #12]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f002 fc5c 	bl	800476e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3710      	adds	r7, #16
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b08a      	sub	sp, #40	; 0x28
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	1a9b      	subs	r3, r3, r2
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	3338      	adds	r3, #56	; 0x38
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	4413      	add	r3, r2
 8001eec:	3304      	adds	r3, #4
 8001eee:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	699a      	ldr	r2, [r3, #24]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	695b      	ldr	r3, [r3, #20]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d901      	bls.n	8001f00 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e06c      	b.n	8001fda <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	699b      	ldr	r3, [r3, #24]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d902      	bls.n	8001f1c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	3303      	adds	r3, #3
 8001f20:	089b      	lsrs	r3, r3, #2
 8001f22:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f24:	e02b      	b.n	8001f7e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	69fa      	ldr	r2, [r7, #28]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d902      	bls.n	8001f42 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3303      	adds	r3, #3
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	68d9      	ldr	r1, [r3, #12]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6978      	ldr	r0, [r7, #20]
 8001f62:	f002 fb38 	bl	80045d6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	441a      	add	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	699a      	ldr	r2, [r3, #24]
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	441a      	add	r2, r3
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	015a      	lsls	r2, r3, #5
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4413      	add	r3, r2
 8001f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d809      	bhi.n	8001fa8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	699a      	ldr	r2, [r3, #24]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d203      	bcs.n	8001fa8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d1be      	bne.n	8001f26 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	695a      	ldr	r2, [r3, #20]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	699b      	ldr	r3, [r3, #24]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d811      	bhi.n	8001fd8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	2201      	movs	r2, #1
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001fc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	6939      	ldr	r1, [r7, #16]
 8001fd0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3720      	adds	r7, #32
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
	...

08001fe4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	333c      	adds	r3, #60	; 0x3c
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	015a      	lsls	r2, r3, #5
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4413      	add	r3, r2
 800200a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	2b01      	cmp	r3, #1
 8002018:	f040 80a0 	bne.w	800215c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f003 0308 	and.w	r3, r3, #8
 8002022:	2b00      	cmp	r3, #0
 8002024:	d015      	beq.n	8002052 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a72      	ldr	r2, [pc, #456]	; (80021f4 <PCD_EP_OutXfrComplete_int+0x210>)
 800202a:	4293      	cmp	r3, r2
 800202c:	f240 80dd 	bls.w	80021ea <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80d7 	beq.w	80021ea <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	015a      	lsls	r2, r3, #5
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002048:	461a      	mov	r2, r3
 800204a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204e:	6093      	str	r3, [r2, #8]
 8002050:	e0cb      	b.n	80021ea <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002052:	68bb      	ldr	r3, [r7, #8]
 8002054:	f003 0320 	and.w	r3, r3, #32
 8002058:	2b00      	cmp	r3, #0
 800205a:	d009      	beq.n	8002070 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	015a      	lsls	r2, r3, #5
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4413      	add	r3, r2
 8002064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002068:	461a      	mov	r2, r3
 800206a:	2320      	movs	r3, #32
 800206c:	6093      	str	r3, [r2, #8]
 800206e:	e0bc      	b.n	80021ea <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 80b7 	bne.w	80021ea <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	4a5d      	ldr	r2, [pc, #372]	; (80021f4 <PCD_EP_OutXfrComplete_int+0x210>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d90f      	bls.n	80020a4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800209a:	461a      	mov	r2, r3
 800209c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020a0:	6093      	str	r3, [r2, #8]
 80020a2:	e0a2      	b.n	80021ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80020a4:	6879      	ldr	r1, [r7, #4]
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020b6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	0159      	lsls	r1, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	440b      	add	r3, r1
 80020c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c4:	691b      	ldr	r3, [r3, #16]
 80020c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80020ca:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4403      	add	r3, r0
 80020da:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80020de:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80020e0:	6879      	ldr	r1, [r7, #4]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020f2:	6819      	ldr	r1, [r3, #0]
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	4403      	add	r3, r0
 8002102:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4419      	add	r1, r3
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	4613      	mov	r3, r2
 8002110:	00db      	lsls	r3, r3, #3
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4403      	add	r3, r0
 8002118:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800211c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d114      	bne.n	800214e <PCD_EP_OutXfrComplete_int+0x16a>
 8002124:	6879      	ldr	r1, [r7, #4]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	1a9b      	subs	r3, r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d108      	bne.n	800214e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6818      	ldr	r0, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002146:	461a      	mov	r2, r3
 8002148:	2101      	movs	r1, #1
 800214a:	f002 fca3 	bl	8004a94 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	b2db      	uxtb	r3, r3
 8002152:	4619      	mov	r1, r3
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f004 fba5 	bl	80068a4 <HAL_PCD_DataOutStageCallback>
 800215a:	e046      	b.n	80021ea <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	4a26      	ldr	r2, [pc, #152]	; (80021f8 <PCD_EP_OutXfrComplete_int+0x214>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d124      	bne.n	80021ae <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00a      	beq.n	8002184 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800217a:	461a      	mov	r2, r3
 800217c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002180:	6093      	str	r3, [r2, #8]
 8002182:	e032      	b.n	80021ea <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	f003 0320 	and.w	r3, r3, #32
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800219a:	461a      	mov	r2, r3
 800219c:	2320      	movs	r3, #32
 800219e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f004 fb7c 	bl	80068a4 <HAL_PCD_DataOutStageCallback>
 80021ac:	e01d      	b.n	80021ea <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d114      	bne.n	80021de <PCD_EP_OutXfrComplete_int+0x1fa>
 80021b4:	6879      	ldr	r1, [r7, #4]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	4613      	mov	r3, r2
 80021ba:	00db      	lsls	r3, r3, #3
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d108      	bne.n	80021de <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021d6:	461a      	mov	r2, r3
 80021d8:	2100      	movs	r1, #0
 80021da:	f002 fc5b 	bl	8004a94 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	4619      	mov	r1, r3
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f004 fb5d 	bl	80068a4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3718      	adds	r7, #24
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	4f54300a 	.word	0x4f54300a
 80021f8:	4f54310a 	.word	0x4f54310a

080021fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	333c      	adds	r3, #60	; 0x3c
 8002214:	3304      	adds	r3, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a15      	ldr	r2, [pc, #84]	; (8002284 <PCD_EP_OutSetupPacket_int+0x88>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d90e      	bls.n	8002250 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f004 fb15 	bl	8006880 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <PCD_EP_OutSetupPacket_int+0x88>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d90c      	bls.n	8002278 <PCD_EP_OutSetupPacket_int+0x7c>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d108      	bne.n	8002278 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6818      	ldr	r0, [r3, #0]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002270:	461a      	mov	r2, r3
 8002272:	2101      	movs	r1, #1
 8002274:	f002 fc0e 	bl	8004a94 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	4f54300a 	.word	0x4f54300a

08002288 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002288:	b480      	push	{r7}
 800228a:	b085      	sub	sp, #20
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	460b      	mov	r3, r1
 8002292:	70fb      	strb	r3, [r7, #3]
 8002294:	4613      	mov	r3, r2
 8002296:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022a0:	78fb      	ldrb	r3, [r7, #3]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d107      	bne.n	80022b6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022a6:	883b      	ldrh	r3, [r7, #0]
 80022a8:	0419      	lsls	r1, r3, #16
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68ba      	ldr	r2, [r7, #8]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	629a      	str	r2, [r3, #40]	; 0x28
 80022b4:	e028      	b.n	8002308 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022bc:	0c1b      	lsrs	r3, r3, #16
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	4413      	add	r3, r2
 80022c2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022c4:	2300      	movs	r3, #0
 80022c6:	73fb      	strb	r3, [r7, #15]
 80022c8:	e00d      	b.n	80022e6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	7bfb      	ldrb	r3, [r7, #15]
 80022d0:	3340      	adds	r3, #64	; 0x40
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	4413      	add	r3, r2
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	0c1b      	lsrs	r3, r3, #16
 80022da:	68ba      	ldr	r2, [r7, #8]
 80022dc:	4413      	add	r3, r2
 80022de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	3301      	adds	r3, #1
 80022e4:	73fb      	strb	r3, [r7, #15]
 80022e6:	7bfa      	ldrb	r2, [r7, #15]
 80022e8:	78fb      	ldrb	r3, [r7, #3]
 80022ea:	3b01      	subs	r3, #1
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d3ec      	bcc.n	80022ca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022f0:	883b      	ldrh	r3, [r7, #0]
 80022f2:	0418      	lsls	r0, r3, #16
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6819      	ldr	r1, [r3, #0]
 80022f8:	78fb      	ldrb	r3, [r7, #3]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	4302      	orrs	r2, r0
 8002300:	3340      	adds	r3, #64	; 0x40
 8002302:	009b      	lsls	r3, r3, #2
 8002304:	440b      	add	r3, r1
 8002306:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002308:	2300      	movs	r3, #0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
 800231e:	460b      	mov	r3, r1
 8002320:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	887a      	ldrh	r2, [r7, #2]
 8002328:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	370c      	adds	r7, #12
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d101      	bne.n	8002362 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e25b      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0301 	and.w	r3, r3, #1
 800236a:	2b00      	cmp	r3, #0
 800236c:	d075      	beq.n	800245a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800236e:	4ba3      	ldr	r3, [pc, #652]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 030c 	and.w	r3, r3, #12
 8002376:	2b04      	cmp	r3, #4
 8002378:	d00c      	beq.n	8002394 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800237a:	4ba0      	ldr	r3, [pc, #640]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002382:	2b08      	cmp	r3, #8
 8002384:	d112      	bne.n	80023ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002386:	4b9d      	ldr	r3, [pc, #628]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800238e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002392:	d10b      	bne.n	80023ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002394:	4b99      	ldr	r3, [pc, #612]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d05b      	beq.n	8002458 <HAL_RCC_OscConfig+0x108>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d157      	bne.n	8002458 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e236      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b4:	d106      	bne.n	80023c4 <HAL_RCC_OscConfig+0x74>
 80023b6:	4b91      	ldr	r3, [pc, #580]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a90      	ldr	r2, [pc, #576]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c0:	6013      	str	r3, [r2, #0]
 80023c2:	e01d      	b.n	8002400 <HAL_RCC_OscConfig+0xb0>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCC_OscConfig+0x98>
 80023ce:	4b8b      	ldr	r3, [pc, #556]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a8a      	ldr	r2, [pc, #552]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d8:	6013      	str	r3, [r2, #0]
 80023da:	4b88      	ldr	r3, [pc, #544]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a87      	ldr	r2, [pc, #540]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e4:	6013      	str	r3, [r2, #0]
 80023e6:	e00b      	b.n	8002400 <HAL_RCC_OscConfig+0xb0>
 80023e8:	4b84      	ldr	r3, [pc, #528]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a83      	ldr	r2, [pc, #524]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	4b81      	ldr	r3, [pc, #516]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a80      	ldr	r2, [pc, #512]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d013      	beq.n	8002430 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002408:	f7fe fb44 	bl	8000a94 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002410:	f7fe fb40 	bl	8000a94 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b64      	cmp	r3, #100	; 0x64
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e1fb      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002422:	4b76      	ldr	r3, [pc, #472]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0xc0>
 800242e:	e014      	b.n	800245a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002430:	f7fe fb30 	bl	8000a94 <HAL_GetTick>
 8002434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002436:	e008      	b.n	800244a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002438:	f7fe fb2c 	bl	8000a94 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	2b64      	cmp	r3, #100	; 0x64
 8002444:	d901      	bls.n	800244a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	e1e7      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244a:	4b6c      	ldr	r3, [pc, #432]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f0      	bne.n	8002438 <HAL_RCC_OscConfig+0xe8>
 8002456:	e000      	b.n	800245a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002458:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d063      	beq.n	800252e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002466:	4b65      	ldr	r3, [pc, #404]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f003 030c 	and.w	r3, r3, #12
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00b      	beq.n	800248a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002472:	4b62      	ldr	r3, [pc, #392]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800247a:	2b08      	cmp	r3, #8
 800247c:	d11c      	bne.n	80024b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247e:	4b5f      	ldr	r3, [pc, #380]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d116      	bne.n	80024b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248a:	4b5c      	ldr	r3, [pc, #368]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d005      	beq.n	80024a2 <HAL_RCC_OscConfig+0x152>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d001      	beq.n	80024a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e1bb      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a2:	4b56      	ldr	r3, [pc, #344]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	691b      	ldr	r3, [r3, #16]
 80024ae:	00db      	lsls	r3, r3, #3
 80024b0:	4952      	ldr	r1, [pc, #328]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024b6:	e03a      	b.n	800252e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d020      	beq.n	8002502 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c0:	4b4f      	ldr	r3, [pc, #316]	; (8002600 <HAL_RCC_OscConfig+0x2b0>)
 80024c2:	2201      	movs	r2, #1
 80024c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7fe fae5 	bl	8000a94 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ce:	f7fe fae1 	bl	8000a94 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e19c      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e0:	4b46      	ldr	r3, [pc, #280]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b43      	ldr	r3, [pc, #268]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	00db      	lsls	r3, r3, #3
 80024fa:	4940      	ldr	r1, [pc, #256]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	600b      	str	r3, [r1, #0]
 8002500:	e015      	b.n	800252e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b3f      	ldr	r3, [pc, #252]	; (8002600 <HAL_RCC_OscConfig+0x2b0>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002508:	f7fe fac4 	bl	8000a94 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250e:	e008      	b.n	8002522 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002510:	f7fe fac0 	bl	8000a94 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e17b      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002522:	4b36      	ldr	r3, [pc, #216]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1f0      	bne.n	8002510 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0308 	and.w	r3, r3, #8
 8002536:	2b00      	cmp	r3, #0
 8002538:	d030      	beq.n	800259c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	695b      	ldr	r3, [r3, #20]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d016      	beq.n	8002570 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002542:	4b30      	ldr	r3, [pc, #192]	; (8002604 <HAL_RCC_OscConfig+0x2b4>)
 8002544:	2201      	movs	r2, #1
 8002546:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f7fe faa4 	bl	8000a94 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002550:	f7fe faa0 	bl	8000a94 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e15b      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b00      	cmp	r3, #0
 800256c:	d0f0      	beq.n	8002550 <HAL_RCC_OscConfig+0x200>
 800256e:	e015      	b.n	800259c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002570:	4b24      	ldr	r3, [pc, #144]	; (8002604 <HAL_RCC_OscConfig+0x2b4>)
 8002572:	2200      	movs	r2, #0
 8002574:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002576:	f7fe fa8d 	bl	8000a94 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257e:	f7fe fa89 	bl	8000a94 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b02      	cmp	r3, #2
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e144      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002590:	4b1a      	ldr	r3, [pc, #104]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 8002592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f0      	bne.n	800257e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	f000 80a0 	beq.w	80026ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025aa:	2300      	movs	r3, #0
 80025ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ae:	4b13      	ldr	r3, [pc, #76]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10f      	bne.n	80025da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60bb      	str	r3, [r7, #8]
 80025be:	4b0f      	ldr	r3, [pc, #60]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	4a0e      	ldr	r2, [pc, #56]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80025c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025c8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ca:	4b0c      	ldr	r3, [pc, #48]	; (80025fc <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d2:	60bb      	str	r3, [r7, #8]
 80025d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025d6:	2301      	movs	r3, #1
 80025d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_RCC_OscConfig+0x2b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d121      	bne.n	800262a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025e6:	4b08      	ldr	r3, [pc, #32]	; (8002608 <HAL_RCC_OscConfig+0x2b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a07      	ldr	r2, [pc, #28]	; (8002608 <HAL_RCC_OscConfig+0x2b8>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025f2:	f7fe fa4f 	bl	8000a94 <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f8:	e011      	b.n	800261e <HAL_RCC_OscConfig+0x2ce>
 80025fa:	bf00      	nop
 80025fc:	40023800 	.word	0x40023800
 8002600:	42470000 	.word	0x42470000
 8002604:	42470e80 	.word	0x42470e80
 8002608:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260c:	f7fe fa42 	bl	8000a94 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e0fd      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4b81      	ldr	r3, [pc, #516]	; (8002824 <HAL_RCC_OscConfig+0x4d4>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x2f0>
 8002632:	4b7d      	ldr	r3, [pc, #500]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 8002634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002636:	4a7c      	ldr	r2, [pc, #496]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6713      	str	r3, [r2, #112]	; 0x70
 800263e:	e01c      	b.n	800267a <HAL_RCC_OscConfig+0x32a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2b05      	cmp	r3, #5
 8002646:	d10c      	bne.n	8002662 <HAL_RCC_OscConfig+0x312>
 8002648:	4b77      	ldr	r3, [pc, #476]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	4a76      	ldr	r2, [pc, #472]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 800264e:	f043 0304 	orr.w	r3, r3, #4
 8002652:	6713      	str	r3, [r2, #112]	; 0x70
 8002654:	4b74      	ldr	r3, [pc, #464]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 8002656:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002658:	4a73      	ldr	r2, [pc, #460]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	6713      	str	r3, [r2, #112]	; 0x70
 8002660:	e00b      	b.n	800267a <HAL_RCC_OscConfig+0x32a>
 8002662:	4b71      	ldr	r3, [pc, #452]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002666:	4a70      	ldr	r2, [pc, #448]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 8002668:	f023 0301 	bic.w	r3, r3, #1
 800266c:	6713      	str	r3, [r2, #112]	; 0x70
 800266e:	4b6e      	ldr	r3, [pc, #440]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 8002670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002672:	4a6d      	ldr	r2, [pc, #436]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 8002674:	f023 0304 	bic.w	r3, r3, #4
 8002678:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d015      	beq.n	80026ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7fe fa07 	bl	8000a94 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002688:	e00a      	b.n	80026a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800268a:	f7fe fa03 	bl	8000a94 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	f241 3288 	movw	r2, #5000	; 0x1388
 8002698:	4293      	cmp	r3, r2
 800269a:	d901      	bls.n	80026a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e0bc      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a0:	4b61      	ldr	r3, [pc, #388]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 80026a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a4:	f003 0302 	and.w	r3, r3, #2
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d0ee      	beq.n	800268a <HAL_RCC_OscConfig+0x33a>
 80026ac:	e014      	b.n	80026d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ae:	f7fe f9f1 	bl	8000a94 <HAL_GetTick>
 80026b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026b4:	e00a      	b.n	80026cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe f9ed 	bl	8000a94 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e0a6      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026cc:	4b56      	ldr	r3, [pc, #344]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1ee      	bne.n	80026b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d8:	7dfb      	ldrb	r3, [r7, #23]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d105      	bne.n	80026ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026de:	4b52      	ldr	r3, [pc, #328]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	4a51      	ldr	r2, [pc, #324]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8092 	beq.w	8002818 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026f4:	4b4c      	ldr	r3, [pc, #304]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b08      	cmp	r3, #8
 80026fe:	d05c      	beq.n	80027ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	2b02      	cmp	r3, #2
 8002706:	d141      	bne.n	800278c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002708:	4b48      	ldr	r3, [pc, #288]	; (800282c <HAL_RCC_OscConfig+0x4dc>)
 800270a:	2200      	movs	r2, #0
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800270e:	f7fe f9c1 	bl	8000a94 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002716:	f7fe f9bd 	bl	8000a94 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e078      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	4b3f      	ldr	r3, [pc, #252]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1f0      	bne.n	8002716 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	69da      	ldr	r2, [r3, #28]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	431a      	orrs	r2, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002742:	019b      	lsls	r3, r3, #6
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274a:	085b      	lsrs	r3, r3, #1
 800274c:	3b01      	subs	r3, #1
 800274e:	041b      	lsls	r3, r3, #16
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002756:	061b      	lsls	r3, r3, #24
 8002758:	4933      	ldr	r1, [pc, #204]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800275e:	4b33      	ldr	r3, [pc, #204]	; (800282c <HAL_RCC_OscConfig+0x4dc>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7fe f996 	bl	8000a94 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800276c:	f7fe f992 	bl	8000a94 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b02      	cmp	r3, #2
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e04d      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800277e:	4b2a      	ldr	r3, [pc, #168]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x41c>
 800278a:	e045      	b.n	8002818 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b27      	ldr	r3, [pc, #156]	; (800282c <HAL_RCC_OscConfig+0x4dc>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe f97f 	bl	8000a94 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe f97b 	bl	8000a94 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e036      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ac:	4b1e      	ldr	r3, [pc, #120]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x44a>
 80027b8:	e02e      	b.n	8002818 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d101      	bne.n	80027c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e029      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027c6:	4b18      	ldr	r3, [pc, #96]	; (8002828 <HAL_RCC_OscConfig+0x4d8>)
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d11c      	bne.n	8002814 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d115      	bne.n	8002814 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027e8:	68fa      	ldr	r2, [r7, #12]
 80027ea:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027ee:	4013      	ands	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d10d      	bne.n	8002814 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d106      	bne.n	8002814 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e000      	b.n	800281a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3718      	adds	r7, #24
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40007000 	.word	0x40007000
 8002828:	40023800 	.word	0x40023800
 800282c:	42470060 	.word	0x42470060

08002830 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e0cc      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	683a      	ldr	r2, [r7, #0]
 800284e:	429a      	cmp	r2, r3
 8002850:	d90c      	bls.n	800286c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002852:	4b65      	ldr	r3, [pc, #404]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800285a:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	683a      	ldr	r2, [r7, #0]
 8002864:	429a      	cmp	r2, r3
 8002866:	d001      	beq.n	800286c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e0b8      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d020      	beq.n	80028ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0304 	and.w	r3, r3, #4
 8002880:	2b00      	cmp	r3, #0
 8002882:	d005      	beq.n	8002890 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002884:	4b59      	ldr	r3, [pc, #356]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	4a58      	ldr	r2, [pc, #352]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800288e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0308 	and.w	r3, r3, #8
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800289c:	4b53      	ldr	r3, [pc, #332]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	4a52      	ldr	r2, [pc, #328]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b50      	ldr	r3, [pc, #320]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	494d      	ldr	r1, [pc, #308]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d044      	beq.n	8002950 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d107      	bne.n	80028de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ce:	4b47      	ldr	r3, [pc, #284]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d119      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e07f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d003      	beq.n	80028ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d107      	bne.n	80028fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028ee:	4b3f      	ldr	r3, [pc, #252]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e06f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fe:	4b3b      	ldr	r3, [pc, #236]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b00      	cmp	r3, #0
 8002908:	d101      	bne.n	800290e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	e067      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800290e:	4b37      	ldr	r3, [pc, #220]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f023 0203 	bic.w	r2, r3, #3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	4934      	ldr	r1, [pc, #208]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 800291c:	4313      	orrs	r3, r2
 800291e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002920:	f7fe f8b8 	bl	8000a94 <HAL_GetTick>
 8002924:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002926:	e00a      	b.n	800293e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002928:	f7fe f8b4 	bl	8000a94 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	f241 3288 	movw	r2, #5000	; 0x1388
 8002936:	4293      	cmp	r3, r2
 8002938:	d901      	bls.n	800293e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e04f      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800293e:	4b2b      	ldr	r3, [pc, #172]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 020c 	and.w	r2, r3, #12
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	429a      	cmp	r2, r3
 800294e:	d1eb      	bne.n	8002928 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002950:	4b25      	ldr	r3, [pc, #148]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 030f 	and.w	r3, r3, #15
 8002958:	683a      	ldr	r2, [r7, #0]
 800295a:	429a      	cmp	r2, r3
 800295c:	d20c      	bcs.n	8002978 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295e:	4b22      	ldr	r3, [pc, #136]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	b2d2      	uxtb	r2, r2
 8002964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002966:	4b20      	ldr	r3, [pc, #128]	; (80029e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 030f 	and.w	r3, r3, #15
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d001      	beq.n	8002978 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e032      	b.n	80029de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0304 	and.w	r3, r3, #4
 8002980:	2b00      	cmp	r3, #0
 8002982:	d008      	beq.n	8002996 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002984:	4b19      	ldr	r3, [pc, #100]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	4916      	ldr	r1, [pc, #88]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 8002992:	4313      	orrs	r3, r2
 8002994:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f003 0308 	and.w	r3, r3, #8
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d009      	beq.n	80029b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029a2:	4b12      	ldr	r3, [pc, #72]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	691b      	ldr	r3, [r3, #16]
 80029ae:	00db      	lsls	r3, r3, #3
 80029b0:	490e      	ldr	r1, [pc, #56]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029b2:	4313      	orrs	r3, r2
 80029b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029b6:	f000 f821 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80029ba:	4601      	mov	r1, r0
 80029bc:	4b0b      	ldr	r3, [pc, #44]	; (80029ec <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	091b      	lsrs	r3, r3, #4
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	4a0a      	ldr	r2, [pc, #40]	; (80029f0 <HAL_RCC_ClockConfig+0x1c0>)
 80029c8:	5cd3      	ldrb	r3, [r2, r3]
 80029ca:	fa21 f303 	lsr.w	r3, r1, r3
 80029ce:	4a09      	ldr	r2, [pc, #36]	; (80029f4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <HAL_RCC_ClockConfig+0x1c8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7fe f818 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	40023c00 	.word	0x40023c00
 80029ec:	40023800 	.word	0x40023800
 80029f0:	080076d4 	.word	0x080076d4
 80029f4:	20000004 	.word	0x20000004
 80029f8:	20000008 	.word	0x20000008

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	607b      	str	r3, [r7, #4]
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a12:	4b63      	ldr	r3, [pc, #396]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	f003 030c 	and.w	r3, r3, #12
 8002a1a:	2b04      	cmp	r3, #4
 8002a1c:	d007      	beq.n	8002a2e <HAL_RCC_GetSysClockFreq+0x32>
 8002a1e:	2b08      	cmp	r3, #8
 8002a20:	d008      	beq.n	8002a34 <HAL_RCC_GetSysClockFreq+0x38>
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f040 80b4 	bne.w	8002b90 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a28:	4b5e      	ldr	r3, [pc, #376]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002a2a:	60bb      	str	r3, [r7, #8]
       break;
 8002a2c:	e0b3      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a2e:	4b5e      	ldr	r3, [pc, #376]	; (8002ba8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002a30:	60bb      	str	r3, [r7, #8]
      break;
 8002a32:	e0b0      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a34:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a3c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a3e:	4b58      	ldr	r3, [pc, #352]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04a      	beq.n	8002ae0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4a:	4b55      	ldr	r3, [pc, #340]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	099b      	lsrs	r3, r3, #6
 8002a50:	f04f 0400 	mov.w	r4, #0
 8002a54:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a58:	f04f 0200 	mov.w	r2, #0
 8002a5c:	ea03 0501 	and.w	r5, r3, r1
 8002a60:	ea04 0602 	and.w	r6, r4, r2
 8002a64:	4629      	mov	r1, r5
 8002a66:	4632      	mov	r2, r6
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	f04f 0400 	mov.w	r4, #0
 8002a70:	0154      	lsls	r4, r2, #5
 8002a72:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a76:	014b      	lsls	r3, r1, #5
 8002a78:	4619      	mov	r1, r3
 8002a7a:	4622      	mov	r2, r4
 8002a7c:	1b49      	subs	r1, r1, r5
 8002a7e:	eb62 0206 	sbc.w	r2, r2, r6
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	f04f 0400 	mov.w	r4, #0
 8002a8a:	0194      	lsls	r4, r2, #6
 8002a8c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a90:	018b      	lsls	r3, r1, #6
 8002a92:	1a5b      	subs	r3, r3, r1
 8002a94:	eb64 0402 	sbc.w	r4, r4, r2
 8002a98:	f04f 0100 	mov.w	r1, #0
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	00e2      	lsls	r2, r4, #3
 8002aa2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002aa6:	00d9      	lsls	r1, r3, #3
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4614      	mov	r4, r2
 8002aac:	195b      	adds	r3, r3, r5
 8002aae:	eb44 0406 	adc.w	r4, r4, r6
 8002ab2:	f04f 0100 	mov.w	r1, #0
 8002ab6:	f04f 0200 	mov.w	r2, #0
 8002aba:	0262      	lsls	r2, r4, #9
 8002abc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ac0:	0259      	lsls	r1, r3, #9
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4614      	mov	r4, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	4621      	mov	r1, r4
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f04f 0400 	mov.w	r4, #0
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	4623      	mov	r3, r4
 8002ad4:	f7fd fbd4 	bl	8000280 <__aeabi_uldivmod>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	460c      	mov	r4, r1
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	e049      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae0:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	099b      	lsrs	r3, r3, #6
 8002ae6:	f04f 0400 	mov.w	r4, #0
 8002aea:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	ea03 0501 	and.w	r5, r3, r1
 8002af6:	ea04 0602 	and.w	r6, r4, r2
 8002afa:	4629      	mov	r1, r5
 8002afc:	4632      	mov	r2, r6
 8002afe:	f04f 0300 	mov.w	r3, #0
 8002b02:	f04f 0400 	mov.w	r4, #0
 8002b06:	0154      	lsls	r4, r2, #5
 8002b08:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b0c:	014b      	lsls	r3, r1, #5
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4622      	mov	r2, r4
 8002b12:	1b49      	subs	r1, r1, r5
 8002b14:	eb62 0206 	sbc.w	r2, r2, r6
 8002b18:	f04f 0300 	mov.w	r3, #0
 8002b1c:	f04f 0400 	mov.w	r4, #0
 8002b20:	0194      	lsls	r4, r2, #6
 8002b22:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002b26:	018b      	lsls	r3, r1, #6
 8002b28:	1a5b      	subs	r3, r3, r1
 8002b2a:	eb64 0402 	sbc.w	r4, r4, r2
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	f04f 0200 	mov.w	r2, #0
 8002b36:	00e2      	lsls	r2, r4, #3
 8002b38:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002b3c:	00d9      	lsls	r1, r3, #3
 8002b3e:	460b      	mov	r3, r1
 8002b40:	4614      	mov	r4, r2
 8002b42:	195b      	adds	r3, r3, r5
 8002b44:	eb44 0406 	adc.w	r4, r4, r6
 8002b48:	f04f 0100 	mov.w	r1, #0
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	02a2      	lsls	r2, r4, #10
 8002b52:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b56:	0299      	lsls	r1, r3, #10
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4614      	mov	r4, r2
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	4621      	mov	r1, r4
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f04f 0400 	mov.w	r4, #0
 8002b66:	461a      	mov	r2, r3
 8002b68:	4623      	mov	r3, r4
 8002b6a:	f7fd fb89 	bl	8000280 <__aeabi_uldivmod>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	460c      	mov	r4, r1
 8002b72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b74:	4b0a      	ldr	r3, [pc, #40]	; (8002ba0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	0c1b      	lsrs	r3, r3, #16
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	3301      	adds	r3, #1
 8002b80:	005b      	lsls	r3, r3, #1
 8002b82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b84:	68fa      	ldr	r2, [r7, #12]
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b8c:	60bb      	str	r3, [r7, #8]
      break;
 8002b8e:	e002      	b.n	8002b96 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b90:	4b04      	ldr	r3, [pc, #16]	; (8002ba4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b92:	60bb      	str	r3, [r7, #8]
      break;
 8002b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b96:	68bb      	ldr	r3, [r7, #8]
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3714      	adds	r7, #20
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	00f42400 	.word	0x00f42400
 8002ba8:	007a1200 	.word	0x007a1200

08002bac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bb0:	4b03      	ldr	r3, [pc, #12]	; (8002bc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	20000004 	.word	0x20000004

08002bc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002bc8:	f7ff fff0 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bcc:	4601      	mov	r1, r0
 8002bce:	4b05      	ldr	r3, [pc, #20]	; (8002be4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	0a9b      	lsrs	r3, r3, #10
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	4a03      	ldr	r2, [pc, #12]	; (8002be8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bda:	5cd3      	ldrb	r3, [r2, r3]
 8002bdc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	080076e4 	.word	0x080076e4

08002bec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bf0:	f7ff ffdc 	bl	8002bac <HAL_RCC_GetHCLKFreq>
 8002bf4:	4601      	mov	r1, r0
 8002bf6:	4b05      	ldr	r3, [pc, #20]	; (8002c0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	0b5b      	lsrs	r3, r3, #13
 8002bfc:	f003 0307 	and.w	r3, r3, #7
 8002c00:	4a03      	ldr	r2, [pc, #12]	; (8002c10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c02:	5cd3      	ldrb	r3, [r2, r3]
 8002c04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	080076e4 	.word	0x080076e4

08002c14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e03f      	b.n	8002ca6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fd fe52 	bl	80008e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f90b 	bl	8002e74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	691a      	ldr	r2, [r3, #16]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cae:	b580      	push	{r7, lr}
 8002cb0:	b088      	sub	sp, #32
 8002cb2:	af02      	add	r7, sp, #8
 8002cb4:	60f8      	str	r0, [r7, #12]
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b20      	cmp	r3, #32
 8002ccc:	f040 8083 	bne.w	8002dd6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <HAL_UART_Transmit+0x2e>
 8002cd6:	88fb      	ldrh	r3, [r7, #6]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e07b      	b.n	8002dd8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_UART_Transmit+0x40>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e074      	b.n	8002dd8 <HAL_UART_Transmit+0x12a>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2221      	movs	r2, #33	; 0x21
 8002d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002d04:	f7fd fec6 	bl	8000a94 <HAL_GetTick>
 8002d08:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	88fa      	ldrh	r2, [r7, #6]
 8002d0e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002d1e:	e042      	b.n	8002da6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	3b01      	subs	r3, #1
 8002d28:	b29a      	uxth	r2, r3
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d36:	d122      	bne.n	8002d7e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	2180      	movs	r1, #128	; 0x80
 8002d42:	68f8      	ldr	r0, [r7, #12]
 8002d44:	f000 f84c 	bl	8002de0 <UART_WaitOnFlagUntilTimeout>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e042      	b.n	8002dd8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d64:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d103      	bne.n	8002d76 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	3302      	adds	r3, #2
 8002d72:	60bb      	str	r3, [r7, #8]
 8002d74:	e017      	b.n	8002da6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	3301      	adds	r3, #1
 8002d7a:	60bb      	str	r3, [r7, #8]
 8002d7c:	e013      	b.n	8002da6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	9300      	str	r3, [sp, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2180      	movs	r1, #128	; 0x80
 8002d88:	68f8      	ldr	r0, [r7, #12]
 8002d8a:	f000 f829 	bl	8002de0 <UART_WaitOnFlagUntilTimeout>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d001      	beq.n	8002d98 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002d94:	2303      	movs	r3, #3
 8002d96:	e01f      	b.n	8002dd8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	1c5a      	adds	r2, r3, #1
 8002d9c:	60ba      	str	r2, [r7, #8]
 8002d9e:	781a      	ldrb	r2, [r3, #0]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d1b7      	bne.n	8002d20 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	2200      	movs	r2, #0
 8002db8:	2140      	movs	r1, #64	; 0x40
 8002dba:	68f8      	ldr	r0, [r7, #12]
 8002dbc:	f000 f810 	bl	8002de0 <UART_WaitOnFlagUntilTimeout>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d001      	beq.n	8002dca <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	e006      	b.n	8002dd8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002dd6:	2302      	movs	r3, #2
  }
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3718      	adds	r7, #24
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	603b      	str	r3, [r7, #0]
 8002dec:	4613      	mov	r3, r2
 8002dee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002df0:	e02c      	b.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df8:	d028      	beq.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d007      	beq.n	8002e10 <UART_WaitOnFlagUntilTimeout+0x30>
 8002e00:	f7fd fe48 	bl	8000a94 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	69ba      	ldr	r2, [r7, #24]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d21d      	bcs.n	8002e4c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68da      	ldr	r2, [r3, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002e1e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	695a      	ldr	r2, [r3, #20]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f022 0201 	bic.w	r2, r2, #1
 8002e2e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e00f      	b.n	8002e6c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d0c3      	beq.n	8002df2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e78:	b085      	sub	sp, #20
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	430a      	orrs	r2, r1
 8002e92:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	431a      	orrs	r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	695b      	ldr	r3, [r3, #20]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002eb6:	f023 030c 	bic.w	r3, r3, #12
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	68f9      	ldr	r1, [r7, #12]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee2:	f040 818b 	bne.w	80031fc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4ac1      	ldr	r2, [pc, #772]	; (80031f0 <UART_SetConfig+0x37c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d005      	beq.n	8002efc <UART_SetConfig+0x88>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4abf      	ldr	r2, [pc, #764]	; (80031f4 <UART_SetConfig+0x380>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	f040 80bd 	bne.w	8003076 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff fe76 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8002f00:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	461d      	mov	r5, r3
 8002f06:	f04f 0600 	mov.w	r6, #0
 8002f0a:	46a8      	mov	r8, r5
 8002f0c:	46b1      	mov	r9, r6
 8002f0e:	eb18 0308 	adds.w	r3, r8, r8
 8002f12:	eb49 0409 	adc.w	r4, r9, r9
 8002f16:	4698      	mov	r8, r3
 8002f18:	46a1      	mov	r9, r4
 8002f1a:	eb18 0805 	adds.w	r8, r8, r5
 8002f1e:	eb49 0906 	adc.w	r9, r9, r6
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002f2e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002f32:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002f36:	4688      	mov	r8, r1
 8002f38:	4691      	mov	r9, r2
 8002f3a:	eb18 0005 	adds.w	r0, r8, r5
 8002f3e:	eb49 0106 	adc.w	r1, r9, r6
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	461d      	mov	r5, r3
 8002f48:	f04f 0600 	mov.w	r6, #0
 8002f4c:	196b      	adds	r3, r5, r5
 8002f4e:	eb46 0406 	adc.w	r4, r6, r6
 8002f52:	461a      	mov	r2, r3
 8002f54:	4623      	mov	r3, r4
 8002f56:	f7fd f993 	bl	8000280 <__aeabi_uldivmod>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	460c      	mov	r4, r1
 8002f5e:	461a      	mov	r2, r3
 8002f60:	4ba5      	ldr	r3, [pc, #660]	; (80031f8 <UART_SetConfig+0x384>)
 8002f62:	fba3 2302 	umull	r2, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002f6c:	68bb      	ldr	r3, [r7, #8]
 8002f6e:	461d      	mov	r5, r3
 8002f70:	f04f 0600 	mov.w	r6, #0
 8002f74:	46a9      	mov	r9, r5
 8002f76:	46b2      	mov	sl, r6
 8002f78:	eb19 0309 	adds.w	r3, r9, r9
 8002f7c:	eb4a 040a 	adc.w	r4, sl, sl
 8002f80:	4699      	mov	r9, r3
 8002f82:	46a2      	mov	sl, r4
 8002f84:	eb19 0905 	adds.w	r9, r9, r5
 8002f88:	eb4a 0a06 	adc.w	sl, sl, r6
 8002f8c:	f04f 0100 	mov.w	r1, #0
 8002f90:	f04f 0200 	mov.w	r2, #0
 8002f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002fa0:	4689      	mov	r9, r1
 8002fa2:	4692      	mov	sl, r2
 8002fa4:	eb19 0005 	adds.w	r0, r9, r5
 8002fa8:	eb4a 0106 	adc.w	r1, sl, r6
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	461d      	mov	r5, r3
 8002fb2:	f04f 0600 	mov.w	r6, #0
 8002fb6:	196b      	adds	r3, r5, r5
 8002fb8:	eb46 0406 	adc.w	r4, r6, r6
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	4623      	mov	r3, r4
 8002fc0:	f7fd f95e 	bl	8000280 <__aeabi_uldivmod>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	460c      	mov	r4, r1
 8002fc8:	461a      	mov	r2, r3
 8002fca:	4b8b      	ldr	r3, [pc, #556]	; (80031f8 <UART_SetConfig+0x384>)
 8002fcc:	fba3 1302 	umull	r1, r3, r3, r2
 8002fd0:	095b      	lsrs	r3, r3, #5
 8002fd2:	2164      	movs	r1, #100	; 0x64
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	3332      	adds	r3, #50	; 0x32
 8002fde:	4a86      	ldr	r2, [pc, #536]	; (80031f8 <UART_SetConfig+0x384>)
 8002fe0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe4:	095b      	lsrs	r3, r3, #5
 8002fe6:	005b      	lsls	r3, r3, #1
 8002fe8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002fec:	4498      	add	r8, r3
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	461d      	mov	r5, r3
 8002ff2:	f04f 0600 	mov.w	r6, #0
 8002ff6:	46a9      	mov	r9, r5
 8002ff8:	46b2      	mov	sl, r6
 8002ffa:	eb19 0309 	adds.w	r3, r9, r9
 8002ffe:	eb4a 040a 	adc.w	r4, sl, sl
 8003002:	4699      	mov	r9, r3
 8003004:	46a2      	mov	sl, r4
 8003006:	eb19 0905 	adds.w	r9, r9, r5
 800300a:	eb4a 0a06 	adc.w	sl, sl, r6
 800300e:	f04f 0100 	mov.w	r1, #0
 8003012:	f04f 0200 	mov.w	r2, #0
 8003016:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800301a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800301e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003022:	4689      	mov	r9, r1
 8003024:	4692      	mov	sl, r2
 8003026:	eb19 0005 	adds.w	r0, r9, r5
 800302a:	eb4a 0106 	adc.w	r1, sl, r6
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	461d      	mov	r5, r3
 8003034:	f04f 0600 	mov.w	r6, #0
 8003038:	196b      	adds	r3, r5, r5
 800303a:	eb46 0406 	adc.w	r4, r6, r6
 800303e:	461a      	mov	r2, r3
 8003040:	4623      	mov	r3, r4
 8003042:	f7fd f91d 	bl	8000280 <__aeabi_uldivmod>
 8003046:	4603      	mov	r3, r0
 8003048:	460c      	mov	r4, r1
 800304a:	461a      	mov	r2, r3
 800304c:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <UART_SetConfig+0x384>)
 800304e:	fba3 1302 	umull	r1, r3, r3, r2
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2164      	movs	r1, #100	; 0x64
 8003056:	fb01 f303 	mul.w	r3, r1, r3
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	00db      	lsls	r3, r3, #3
 800305e:	3332      	adds	r3, #50	; 0x32
 8003060:	4a65      	ldr	r2, [pc, #404]	; (80031f8 <UART_SetConfig+0x384>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	f003 0207 	and.w	r2, r3, #7
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4442      	add	r2, r8
 8003072:	609a      	str	r2, [r3, #8]
 8003074:	e26f      	b.n	8003556 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003076:	f7ff fda5 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 800307a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	461d      	mov	r5, r3
 8003080:	f04f 0600 	mov.w	r6, #0
 8003084:	46a8      	mov	r8, r5
 8003086:	46b1      	mov	r9, r6
 8003088:	eb18 0308 	adds.w	r3, r8, r8
 800308c:	eb49 0409 	adc.w	r4, r9, r9
 8003090:	4698      	mov	r8, r3
 8003092:	46a1      	mov	r9, r4
 8003094:	eb18 0805 	adds.w	r8, r8, r5
 8003098:	eb49 0906 	adc.w	r9, r9, r6
 800309c:	f04f 0100 	mov.w	r1, #0
 80030a0:	f04f 0200 	mov.w	r2, #0
 80030a4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80030a8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80030ac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80030b0:	4688      	mov	r8, r1
 80030b2:	4691      	mov	r9, r2
 80030b4:	eb18 0005 	adds.w	r0, r8, r5
 80030b8:	eb49 0106 	adc.w	r1, r9, r6
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	461d      	mov	r5, r3
 80030c2:	f04f 0600 	mov.w	r6, #0
 80030c6:	196b      	adds	r3, r5, r5
 80030c8:	eb46 0406 	adc.w	r4, r6, r6
 80030cc:	461a      	mov	r2, r3
 80030ce:	4623      	mov	r3, r4
 80030d0:	f7fd f8d6 	bl	8000280 <__aeabi_uldivmod>
 80030d4:	4603      	mov	r3, r0
 80030d6:	460c      	mov	r4, r1
 80030d8:	461a      	mov	r2, r3
 80030da:	4b47      	ldr	r3, [pc, #284]	; (80031f8 <UART_SetConfig+0x384>)
 80030dc:	fba3 2302 	umull	r2, r3, r3, r2
 80030e0:	095b      	lsrs	r3, r3, #5
 80030e2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	461d      	mov	r5, r3
 80030ea:	f04f 0600 	mov.w	r6, #0
 80030ee:	46a9      	mov	r9, r5
 80030f0:	46b2      	mov	sl, r6
 80030f2:	eb19 0309 	adds.w	r3, r9, r9
 80030f6:	eb4a 040a 	adc.w	r4, sl, sl
 80030fa:	4699      	mov	r9, r3
 80030fc:	46a2      	mov	sl, r4
 80030fe:	eb19 0905 	adds.w	r9, r9, r5
 8003102:	eb4a 0a06 	adc.w	sl, sl, r6
 8003106:	f04f 0100 	mov.w	r1, #0
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003112:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003116:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800311a:	4689      	mov	r9, r1
 800311c:	4692      	mov	sl, r2
 800311e:	eb19 0005 	adds.w	r0, r9, r5
 8003122:	eb4a 0106 	adc.w	r1, sl, r6
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	461d      	mov	r5, r3
 800312c:	f04f 0600 	mov.w	r6, #0
 8003130:	196b      	adds	r3, r5, r5
 8003132:	eb46 0406 	adc.w	r4, r6, r6
 8003136:	461a      	mov	r2, r3
 8003138:	4623      	mov	r3, r4
 800313a:	f7fd f8a1 	bl	8000280 <__aeabi_uldivmod>
 800313e:	4603      	mov	r3, r0
 8003140:	460c      	mov	r4, r1
 8003142:	461a      	mov	r2, r3
 8003144:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <UART_SetConfig+0x384>)
 8003146:	fba3 1302 	umull	r1, r3, r3, r2
 800314a:	095b      	lsrs	r3, r3, #5
 800314c:	2164      	movs	r1, #100	; 0x64
 800314e:	fb01 f303 	mul.w	r3, r1, r3
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	00db      	lsls	r3, r3, #3
 8003156:	3332      	adds	r3, #50	; 0x32
 8003158:	4a27      	ldr	r2, [pc, #156]	; (80031f8 <UART_SetConfig+0x384>)
 800315a:	fba2 2303 	umull	r2, r3, r2, r3
 800315e:	095b      	lsrs	r3, r3, #5
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003166:	4498      	add	r8, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	461d      	mov	r5, r3
 800316c:	f04f 0600 	mov.w	r6, #0
 8003170:	46a9      	mov	r9, r5
 8003172:	46b2      	mov	sl, r6
 8003174:	eb19 0309 	adds.w	r3, r9, r9
 8003178:	eb4a 040a 	adc.w	r4, sl, sl
 800317c:	4699      	mov	r9, r3
 800317e:	46a2      	mov	sl, r4
 8003180:	eb19 0905 	adds.w	r9, r9, r5
 8003184:	eb4a 0a06 	adc.w	sl, sl, r6
 8003188:	f04f 0100 	mov.w	r1, #0
 800318c:	f04f 0200 	mov.w	r2, #0
 8003190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003194:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003198:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800319c:	4689      	mov	r9, r1
 800319e:	4692      	mov	sl, r2
 80031a0:	eb19 0005 	adds.w	r0, r9, r5
 80031a4:	eb4a 0106 	adc.w	r1, sl, r6
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	461d      	mov	r5, r3
 80031ae:	f04f 0600 	mov.w	r6, #0
 80031b2:	196b      	adds	r3, r5, r5
 80031b4:	eb46 0406 	adc.w	r4, r6, r6
 80031b8:	461a      	mov	r2, r3
 80031ba:	4623      	mov	r3, r4
 80031bc:	f7fd f860 	bl	8000280 <__aeabi_uldivmod>
 80031c0:	4603      	mov	r3, r0
 80031c2:	460c      	mov	r4, r1
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <UART_SetConfig+0x384>)
 80031c8:	fba3 1302 	umull	r1, r3, r3, r2
 80031cc:	095b      	lsrs	r3, r3, #5
 80031ce:	2164      	movs	r1, #100	; 0x64
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	3332      	adds	r3, #50	; 0x32
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <UART_SetConfig+0x384>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	095b      	lsrs	r3, r3, #5
 80031e2:	f003 0207 	and.w	r2, r3, #7
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4442      	add	r2, r8
 80031ec:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80031ee:	e1b2      	b.n	8003556 <UART_SetConfig+0x6e2>
 80031f0:	40011000 	.word	0x40011000
 80031f4:	40011400 	.word	0x40011400
 80031f8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4ad7      	ldr	r2, [pc, #860]	; (8003560 <UART_SetConfig+0x6ec>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d005      	beq.n	8003212 <UART_SetConfig+0x39e>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4ad6      	ldr	r2, [pc, #856]	; (8003564 <UART_SetConfig+0x6f0>)
 800320c:	4293      	cmp	r3, r2
 800320e:	f040 80d1 	bne.w	80033b4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003212:	f7ff fceb 	bl	8002bec <HAL_RCC_GetPCLK2Freq>
 8003216:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	469a      	mov	sl, r3
 800321c:	f04f 0b00 	mov.w	fp, #0
 8003220:	46d0      	mov	r8, sl
 8003222:	46d9      	mov	r9, fp
 8003224:	eb18 0308 	adds.w	r3, r8, r8
 8003228:	eb49 0409 	adc.w	r4, r9, r9
 800322c:	4698      	mov	r8, r3
 800322e:	46a1      	mov	r9, r4
 8003230:	eb18 080a 	adds.w	r8, r8, sl
 8003234:	eb49 090b 	adc.w	r9, r9, fp
 8003238:	f04f 0100 	mov.w	r1, #0
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003244:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003248:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800324c:	4688      	mov	r8, r1
 800324e:	4691      	mov	r9, r2
 8003250:	eb1a 0508 	adds.w	r5, sl, r8
 8003254:	eb4b 0609 	adc.w	r6, fp, r9
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	4619      	mov	r1, r3
 800325e:	f04f 0200 	mov.w	r2, #0
 8003262:	f04f 0300 	mov.w	r3, #0
 8003266:	f04f 0400 	mov.w	r4, #0
 800326a:	0094      	lsls	r4, r2, #2
 800326c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003270:	008b      	lsls	r3, r1, #2
 8003272:	461a      	mov	r2, r3
 8003274:	4623      	mov	r3, r4
 8003276:	4628      	mov	r0, r5
 8003278:	4631      	mov	r1, r6
 800327a:	f7fd f801 	bl	8000280 <__aeabi_uldivmod>
 800327e:	4603      	mov	r3, r0
 8003280:	460c      	mov	r4, r1
 8003282:	461a      	mov	r2, r3
 8003284:	4bb8      	ldr	r3, [pc, #736]	; (8003568 <UART_SetConfig+0x6f4>)
 8003286:	fba3 2302 	umull	r2, r3, r3, r2
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	469b      	mov	fp, r3
 8003294:	f04f 0c00 	mov.w	ip, #0
 8003298:	46d9      	mov	r9, fp
 800329a:	46e2      	mov	sl, ip
 800329c:	eb19 0309 	adds.w	r3, r9, r9
 80032a0:	eb4a 040a 	adc.w	r4, sl, sl
 80032a4:	4699      	mov	r9, r3
 80032a6:	46a2      	mov	sl, r4
 80032a8:	eb19 090b 	adds.w	r9, r9, fp
 80032ac:	eb4a 0a0c 	adc.w	sl, sl, ip
 80032b0:	f04f 0100 	mov.w	r1, #0
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032bc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032c0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032c4:	4689      	mov	r9, r1
 80032c6:	4692      	mov	sl, r2
 80032c8:	eb1b 0509 	adds.w	r5, fp, r9
 80032cc:	eb4c 060a 	adc.w	r6, ip, sl
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	4619      	mov	r1, r3
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	f04f 0400 	mov.w	r4, #0
 80032e2:	0094      	lsls	r4, r2, #2
 80032e4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80032e8:	008b      	lsls	r3, r1, #2
 80032ea:	461a      	mov	r2, r3
 80032ec:	4623      	mov	r3, r4
 80032ee:	4628      	mov	r0, r5
 80032f0:	4631      	mov	r1, r6
 80032f2:	f7fc ffc5 	bl	8000280 <__aeabi_uldivmod>
 80032f6:	4603      	mov	r3, r0
 80032f8:	460c      	mov	r4, r1
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b9a      	ldr	r3, [pc, #616]	; (8003568 <UART_SetConfig+0x6f4>)
 80032fe:	fba3 1302 	umull	r1, r3, r3, r2
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2164      	movs	r1, #100	; 0x64
 8003306:	fb01 f303 	mul.w	r3, r1, r3
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	3332      	adds	r3, #50	; 0x32
 8003310:	4a95      	ldr	r2, [pc, #596]	; (8003568 <UART_SetConfig+0x6f4>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	095b      	lsrs	r3, r3, #5
 8003318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800331c:	4498      	add	r8, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	469b      	mov	fp, r3
 8003322:	f04f 0c00 	mov.w	ip, #0
 8003326:	46d9      	mov	r9, fp
 8003328:	46e2      	mov	sl, ip
 800332a:	eb19 0309 	adds.w	r3, r9, r9
 800332e:	eb4a 040a 	adc.w	r4, sl, sl
 8003332:	4699      	mov	r9, r3
 8003334:	46a2      	mov	sl, r4
 8003336:	eb19 090b 	adds.w	r9, r9, fp
 800333a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800333e:	f04f 0100 	mov.w	r1, #0
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800334a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800334e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003352:	4689      	mov	r9, r1
 8003354:	4692      	mov	sl, r2
 8003356:	eb1b 0509 	adds.w	r5, fp, r9
 800335a:	eb4c 060a 	adc.w	r6, ip, sl
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	4619      	mov	r1, r3
 8003364:	f04f 0200 	mov.w	r2, #0
 8003368:	f04f 0300 	mov.w	r3, #0
 800336c:	f04f 0400 	mov.w	r4, #0
 8003370:	0094      	lsls	r4, r2, #2
 8003372:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003376:	008b      	lsls	r3, r1, #2
 8003378:	461a      	mov	r2, r3
 800337a:	4623      	mov	r3, r4
 800337c:	4628      	mov	r0, r5
 800337e:	4631      	mov	r1, r6
 8003380:	f7fc ff7e 	bl	8000280 <__aeabi_uldivmod>
 8003384:	4603      	mov	r3, r0
 8003386:	460c      	mov	r4, r1
 8003388:	461a      	mov	r2, r3
 800338a:	4b77      	ldr	r3, [pc, #476]	; (8003568 <UART_SetConfig+0x6f4>)
 800338c:	fba3 1302 	umull	r1, r3, r3, r2
 8003390:	095b      	lsrs	r3, r3, #5
 8003392:	2164      	movs	r1, #100	; 0x64
 8003394:	fb01 f303 	mul.w	r3, r1, r3
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	011b      	lsls	r3, r3, #4
 800339c:	3332      	adds	r3, #50	; 0x32
 800339e:	4a72      	ldr	r2, [pc, #456]	; (8003568 <UART_SetConfig+0x6f4>)
 80033a0:	fba2 2303 	umull	r2, r3, r2, r3
 80033a4:	095b      	lsrs	r3, r3, #5
 80033a6:	f003 020f 	and.w	r2, r3, #15
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4442      	add	r2, r8
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	e0d0      	b.n	8003556 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80033b4:	f7ff fc06 	bl	8002bc4 <HAL_RCC_GetPCLK1Freq>
 80033b8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	469a      	mov	sl, r3
 80033be:	f04f 0b00 	mov.w	fp, #0
 80033c2:	46d0      	mov	r8, sl
 80033c4:	46d9      	mov	r9, fp
 80033c6:	eb18 0308 	adds.w	r3, r8, r8
 80033ca:	eb49 0409 	adc.w	r4, r9, r9
 80033ce:	4698      	mov	r8, r3
 80033d0:	46a1      	mov	r9, r4
 80033d2:	eb18 080a 	adds.w	r8, r8, sl
 80033d6:	eb49 090b 	adc.w	r9, r9, fp
 80033da:	f04f 0100 	mov.w	r1, #0
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80033e6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80033ea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80033ee:	4688      	mov	r8, r1
 80033f0:	4691      	mov	r9, r2
 80033f2:	eb1a 0508 	adds.w	r5, sl, r8
 80033f6:	eb4b 0609 	adc.w	r6, fp, r9
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4619      	mov	r1, r3
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	f04f 0300 	mov.w	r3, #0
 8003408:	f04f 0400 	mov.w	r4, #0
 800340c:	0094      	lsls	r4, r2, #2
 800340e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003412:	008b      	lsls	r3, r1, #2
 8003414:	461a      	mov	r2, r3
 8003416:	4623      	mov	r3, r4
 8003418:	4628      	mov	r0, r5
 800341a:	4631      	mov	r1, r6
 800341c:	f7fc ff30 	bl	8000280 <__aeabi_uldivmod>
 8003420:	4603      	mov	r3, r0
 8003422:	460c      	mov	r4, r1
 8003424:	461a      	mov	r2, r3
 8003426:	4b50      	ldr	r3, [pc, #320]	; (8003568 <UART_SetConfig+0x6f4>)
 8003428:	fba3 2302 	umull	r2, r3, r3, r2
 800342c:	095b      	lsrs	r3, r3, #5
 800342e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	469b      	mov	fp, r3
 8003436:	f04f 0c00 	mov.w	ip, #0
 800343a:	46d9      	mov	r9, fp
 800343c:	46e2      	mov	sl, ip
 800343e:	eb19 0309 	adds.w	r3, r9, r9
 8003442:	eb4a 040a 	adc.w	r4, sl, sl
 8003446:	4699      	mov	r9, r3
 8003448:	46a2      	mov	sl, r4
 800344a:	eb19 090b 	adds.w	r9, r9, fp
 800344e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003452:	f04f 0100 	mov.w	r1, #0
 8003456:	f04f 0200 	mov.w	r2, #0
 800345a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800345e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003462:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003466:	4689      	mov	r9, r1
 8003468:	4692      	mov	sl, r2
 800346a:	eb1b 0509 	adds.w	r5, fp, r9
 800346e:	eb4c 060a 	adc.w	r6, ip, sl
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	4619      	mov	r1, r3
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	f04f 0400 	mov.w	r4, #0
 8003484:	0094      	lsls	r4, r2, #2
 8003486:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800348a:	008b      	lsls	r3, r1, #2
 800348c:	461a      	mov	r2, r3
 800348e:	4623      	mov	r3, r4
 8003490:	4628      	mov	r0, r5
 8003492:	4631      	mov	r1, r6
 8003494:	f7fc fef4 	bl	8000280 <__aeabi_uldivmod>
 8003498:	4603      	mov	r3, r0
 800349a:	460c      	mov	r4, r1
 800349c:	461a      	mov	r2, r3
 800349e:	4b32      	ldr	r3, [pc, #200]	; (8003568 <UART_SetConfig+0x6f4>)
 80034a0:	fba3 1302 	umull	r1, r3, r3, r2
 80034a4:	095b      	lsrs	r3, r3, #5
 80034a6:	2164      	movs	r1, #100	; 0x64
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	3332      	adds	r3, #50	; 0x32
 80034b2:	4a2d      	ldr	r2, [pc, #180]	; (8003568 <UART_SetConfig+0x6f4>)
 80034b4:	fba2 2303 	umull	r2, r3, r2, r3
 80034b8:	095b      	lsrs	r3, r3, #5
 80034ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034be:	4498      	add	r8, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	469b      	mov	fp, r3
 80034c4:	f04f 0c00 	mov.w	ip, #0
 80034c8:	46d9      	mov	r9, fp
 80034ca:	46e2      	mov	sl, ip
 80034cc:	eb19 0309 	adds.w	r3, r9, r9
 80034d0:	eb4a 040a 	adc.w	r4, sl, sl
 80034d4:	4699      	mov	r9, r3
 80034d6:	46a2      	mov	sl, r4
 80034d8:	eb19 090b 	adds.w	r9, r9, fp
 80034dc:	eb4a 0a0c 	adc.w	sl, sl, ip
 80034e0:	f04f 0100 	mov.w	r1, #0
 80034e4:	f04f 0200 	mov.w	r2, #0
 80034e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034f4:	4689      	mov	r9, r1
 80034f6:	4692      	mov	sl, r2
 80034f8:	eb1b 0509 	adds.w	r5, fp, r9
 80034fc:	eb4c 060a 	adc.w	r6, ip, sl
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4619      	mov	r1, r3
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	f04f 0300 	mov.w	r3, #0
 800350e:	f04f 0400 	mov.w	r4, #0
 8003512:	0094      	lsls	r4, r2, #2
 8003514:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003518:	008b      	lsls	r3, r1, #2
 800351a:	461a      	mov	r2, r3
 800351c:	4623      	mov	r3, r4
 800351e:	4628      	mov	r0, r5
 8003520:	4631      	mov	r1, r6
 8003522:	f7fc fead 	bl	8000280 <__aeabi_uldivmod>
 8003526:	4603      	mov	r3, r0
 8003528:	460c      	mov	r4, r1
 800352a:	461a      	mov	r2, r3
 800352c:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <UART_SetConfig+0x6f4>)
 800352e:	fba3 1302 	umull	r1, r3, r3, r2
 8003532:	095b      	lsrs	r3, r3, #5
 8003534:	2164      	movs	r1, #100	; 0x64
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	011b      	lsls	r3, r3, #4
 800353e:	3332      	adds	r3, #50	; 0x32
 8003540:	4a09      	ldr	r2, [pc, #36]	; (8003568 <UART_SetConfig+0x6f4>)
 8003542:	fba2 2303 	umull	r2, r3, r2, r3
 8003546:	095b      	lsrs	r3, r3, #5
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4442      	add	r2, r8
 8003552:	609a      	str	r2, [r3, #8]
}
 8003554:	e7ff      	b.n	8003556 <UART_SetConfig+0x6e2>
 8003556:	bf00      	nop
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003560:	40011000 	.word	0x40011000
 8003564:	40011400 	.word	0x40011400
 8003568:	51eb851f 	.word	0x51eb851f

0800356c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800356c:	b084      	sub	sp, #16
 800356e:	b580      	push	{r7, lr}
 8003570:	b084      	sub	sp, #16
 8003572:	af00      	add	r7, sp, #0
 8003574:	6078      	str	r0, [r7, #4]
 8003576:	f107 001c 	add.w	r0, r7, #28
 800357a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800357e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003580:	2b01      	cmp	r3, #1
 8003582:	d122      	bne.n	80035ca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003588:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003598:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800359c:	687a      	ldr	r2, [r7, #4]
 800359e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80035ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d105      	bne.n	80035be <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f001 fac6 	bl	8004b50 <USB_CoreReset>
 80035c4:	4603      	mov	r3, r0
 80035c6:	73fb      	strb	r3, [r7, #15]
 80035c8:	e01a      	b.n	8003600 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f001 faba 	bl	8004b50 <USB_CoreReset>
 80035dc:	4603      	mov	r3, r0
 80035de:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80035e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	639a      	str	r2, [r3, #56]	; 0x38
 80035f2:	e005      	b.n	8003600 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003602:	2b01      	cmp	r3, #1
 8003604:	d10b      	bne.n	800361e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f043 0206 	orr.w	r2, r3, #6
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f043 0220 	orr.w	r2, r3, #32
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800361e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800362a:	b004      	add	sp, #16
 800362c:	4770      	bx	lr
	...

08003630 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003630:	b480      	push	{r7}
 8003632:	b087      	sub	sp, #28
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	4613      	mov	r3, r2
 800363c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800363e:	79fb      	ldrb	r3, [r7, #7]
 8003640:	2b02      	cmp	r3, #2
 8003642:	d165      	bne.n	8003710 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4a41      	ldr	r2, [pc, #260]	; (800374c <USB_SetTurnaroundTime+0x11c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d906      	bls.n	800365a <USB_SetTurnaroundTime+0x2a>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4a40      	ldr	r2, [pc, #256]	; (8003750 <USB_SetTurnaroundTime+0x120>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d802      	bhi.n	800365a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003654:	230f      	movs	r3, #15
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	e062      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4a3c      	ldr	r2, [pc, #240]	; (8003750 <USB_SetTurnaroundTime+0x120>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d906      	bls.n	8003670 <USB_SetTurnaroundTime+0x40>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4a3b      	ldr	r2, [pc, #236]	; (8003754 <USB_SetTurnaroundTime+0x124>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d802      	bhi.n	8003670 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800366a:	230e      	movs	r3, #14
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e057      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4a38      	ldr	r2, [pc, #224]	; (8003754 <USB_SetTurnaroundTime+0x124>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d906      	bls.n	8003686 <USB_SetTurnaroundTime+0x56>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4a37      	ldr	r2, [pc, #220]	; (8003758 <USB_SetTurnaroundTime+0x128>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d802      	bhi.n	8003686 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003680:	230d      	movs	r3, #13
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e04c      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	4a33      	ldr	r2, [pc, #204]	; (8003758 <USB_SetTurnaroundTime+0x128>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d906      	bls.n	800369c <USB_SetTurnaroundTime+0x6c>
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	4a32      	ldr	r2, [pc, #200]	; (800375c <USB_SetTurnaroundTime+0x12c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d802      	bhi.n	800369c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003696:	230c      	movs	r3, #12
 8003698:	617b      	str	r3, [r7, #20]
 800369a:	e041      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	4a2f      	ldr	r2, [pc, #188]	; (800375c <USB_SetTurnaroundTime+0x12c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d906      	bls.n	80036b2 <USB_SetTurnaroundTime+0x82>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	4a2e      	ldr	r2, [pc, #184]	; (8003760 <USB_SetTurnaroundTime+0x130>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d802      	bhi.n	80036b2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80036ac:	230b      	movs	r3, #11
 80036ae:	617b      	str	r3, [r7, #20]
 80036b0:	e036      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4a2a      	ldr	r2, [pc, #168]	; (8003760 <USB_SetTurnaroundTime+0x130>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d906      	bls.n	80036c8 <USB_SetTurnaroundTime+0x98>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	4a29      	ldr	r2, [pc, #164]	; (8003764 <USB_SetTurnaroundTime+0x134>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d802      	bhi.n	80036c8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80036c2:	230a      	movs	r3, #10
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e02b      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4a26      	ldr	r2, [pc, #152]	; (8003764 <USB_SetTurnaroundTime+0x134>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d906      	bls.n	80036de <USB_SetTurnaroundTime+0xae>
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	4a25      	ldr	r2, [pc, #148]	; (8003768 <USB_SetTurnaroundTime+0x138>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d802      	bhi.n	80036de <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80036d8:	2309      	movs	r3, #9
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	e020      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	4a21      	ldr	r2, [pc, #132]	; (8003768 <USB_SetTurnaroundTime+0x138>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d906      	bls.n	80036f4 <USB_SetTurnaroundTime+0xc4>
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	4a20      	ldr	r2, [pc, #128]	; (800376c <USB_SetTurnaroundTime+0x13c>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d802      	bhi.n	80036f4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80036ee:	2308      	movs	r3, #8
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e015      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4a1d      	ldr	r2, [pc, #116]	; (800376c <USB_SetTurnaroundTime+0x13c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d906      	bls.n	800370a <USB_SetTurnaroundTime+0xda>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	4a1c      	ldr	r2, [pc, #112]	; (8003770 <USB_SetTurnaroundTime+0x140>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d802      	bhi.n	800370a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003704:	2307      	movs	r3, #7
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	e00a      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800370a:	2306      	movs	r3, #6
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	e007      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003710:	79fb      	ldrb	r3, [r7, #7]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d102      	bne.n	800371c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003716:	2309      	movs	r3, #9
 8003718:	617b      	str	r3, [r7, #20]
 800371a:	e001      	b.n	8003720 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800371c:	2309      	movs	r3, #9
 800371e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	029b      	lsls	r3, r3, #10
 8003734:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003738:	431a      	orrs	r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr
 800374c:	00d8acbf 	.word	0x00d8acbf
 8003750:	00e4e1bf 	.word	0x00e4e1bf
 8003754:	00f423ff 	.word	0x00f423ff
 8003758:	0106737f 	.word	0x0106737f
 800375c:	011a499f 	.word	0x011a499f
 8003760:	01312cff 	.word	0x01312cff
 8003764:	014ca43f 	.word	0x014ca43f
 8003768:	016e35ff 	.word	0x016e35ff
 800376c:	01a6ab1f 	.word	0x01a6ab1f
 8003770:	01e847ff 	.word	0x01e847ff

08003774 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	f043 0201 	orr.w	r2, r3, #1
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003788:	2300      	movs	r3, #0
}
 800378a:	4618      	mov	r0, r3
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr

08003796 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f023 0201 	bic.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037aa:	2300      	movs	r3, #0
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b082      	sub	sp, #8
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	460b      	mov	r3, r1
 80037c2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d106      	bne.n	80037e4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	e00b      	b.n	80037fc <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80037e4:	78fb      	ldrb	r3, [r7, #3]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d106      	bne.n	80037f8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	60da      	str	r2, [r3, #12]
 80037f6:	e001      	b.n	80037fc <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e003      	b.n	8003804 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80037fc:	2032      	movs	r0, #50	; 0x32
 80037fe:	f7fd f955 	bl	8000aac <HAL_Delay>

  return HAL_OK;
 8003802:	2300      	movs	r3, #0
}
 8003804:	4618      	mov	r0, r3
 8003806:	3708      	adds	r7, #8
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800380c:	b084      	sub	sp, #16
 800380e:	b580      	push	{r7, lr}
 8003810:	b086      	sub	sp, #24
 8003812:	af00      	add	r7, sp, #0
 8003814:	6078      	str	r0, [r7, #4]
 8003816:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800381a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003826:	2300      	movs	r3, #0
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e009      	b.n	8003840 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	3340      	adds	r3, #64	; 0x40
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4413      	add	r3, r2
 8003836:	2200      	movs	r2, #0
 8003838:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800383a:	693b      	ldr	r3, [r7, #16]
 800383c:	3301      	adds	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	2b0e      	cmp	r3, #14
 8003844:	d9f2      	bls.n	800382c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d11c      	bne.n	8003886 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800385a:	f043 0302 	orr.w	r3, r3, #2
 800385e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003870:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
 8003884:	e00b      	b.n	800389e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003896:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80038a4:	461a      	mov	r2, r3
 80038a6:	2300      	movs	r3, #0
 80038a8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b0:	4619      	mov	r1, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038b8:	461a      	mov	r2, r3
 80038ba:	680b      	ldr	r3, [r1, #0]
 80038bc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d10c      	bne.n	80038de <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80038c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d104      	bne.n	80038d4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80038ca:	2100      	movs	r1, #0
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f949 	bl	8003b64 <USB_SetDevSpeed>
 80038d2:	e008      	b.n	80038e6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80038d4:	2101      	movs	r1, #1
 80038d6:	6878      	ldr	r0, [r7, #4]
 80038d8:	f000 f944 	bl	8003b64 <USB_SetDevSpeed>
 80038dc:	e003      	b.n	80038e6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80038de:	2103      	movs	r1, #3
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 f93f 	bl	8003b64 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038e6:	2110      	movs	r1, #16
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f000 f8f3 	bl	8003ad4 <USB_FlushTxFifo>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 f911 	bl	8003b20 <USB_FlushRxFifo>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390e:	461a      	mov	r2, r3
 8003910:	2300      	movs	r3, #0
 8003912:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	461a      	mov	r2, r3
 800391c:	2300      	movs	r3, #0
 800391e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003926:	461a      	mov	r2, r3
 8003928:	2300      	movs	r3, #0
 800392a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	e043      	b.n	80039ba <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	015a      	lsls	r2, r3, #5
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4413      	add	r3, r2
 800393a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003944:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003948:	d118      	bne.n	800397c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	015a      	lsls	r2, r3, #5
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4413      	add	r3, r2
 8003958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395c:	461a      	mov	r2, r3
 800395e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003962:	6013      	str	r3, [r2, #0]
 8003964:	e013      	b.n	800398e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	4413      	add	r3, r2
 800396e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003972:	461a      	mov	r2, r3
 8003974:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003978:	6013      	str	r3, [r2, #0]
 800397a:	e008      	b.n	800398e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	015a      	lsls	r2, r3, #5
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	4413      	add	r3, r2
 8003984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003988:	461a      	mov	r2, r3
 800398a:	2300      	movs	r3, #0
 800398c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	015a      	lsls	r2, r3, #5
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399a:	461a      	mov	r2, r3
 800399c:	2300      	movs	r3, #0
 800399e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039ac:	461a      	mov	r2, r3
 80039ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039b2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	3301      	adds	r3, #1
 80039b8:	613b      	str	r3, [r7, #16]
 80039ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	429a      	cmp	r2, r3
 80039c0:	d3b7      	bcc.n	8003932 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	e043      	b.n	8003a50 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	015a      	lsls	r2, r3, #5
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80039de:	d118      	bne.n	8003a12 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80039e0:	693b      	ldr	r3, [r7, #16]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10a      	bne.n	80039fc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f2:	461a      	mov	r2, r3
 80039f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e013      	b.n	8003a24 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a0e:	6013      	str	r3, [r2, #0]
 8003a10:	e008      	b.n	8003a24 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2300      	movs	r3, #0
 8003a22:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	2300      	movs	r3, #0
 8003a34:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	015a      	lsls	r2, r3, #5
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	4413      	add	r3, r2
 8003a3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a42:	461a      	mov	r2, r3
 8003a44:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a48:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	3301      	adds	r3, #1
 8003a4e:	613b      	str	r3, [r7, #16]
 8003a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d3b7      	bcc.n	80039c8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a5e:	691b      	ldr	r3, [r3, #16]
 8003a60:	68fa      	ldr	r2, [r7, #12]
 8003a62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a78:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d105      	bne.n	8003a8c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	f043 0210 	orr.w	r2, r3, #16
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	699a      	ldr	r2, [r3, #24]
 8003a90:	4b0f      	ldr	r3, [pc, #60]	; (8003ad0 <USB_DevInit+0x2c4>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d005      	beq.n	8003aaa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	699b      	ldr	r3, [r3, #24]
 8003aa2:	f043 0208 	orr.w	r2, r3, #8
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003aaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d107      	bne.n	8003ac0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ab8:	f043 0304 	orr.w	r3, r3, #4
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003acc:	b004      	add	sp, #16
 8003ace:	4770      	bx	lr
 8003ad0:	803c3800 	.word	0x803c3800

08003ad4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	019b      	lsls	r3, r3, #6
 8003ae6:	f043 0220 	orr.w	r2, r3, #32
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	3301      	adds	r3, #1
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4a09      	ldr	r2, [pc, #36]	; (8003b1c <USB_FlushTxFifo+0x48>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d901      	bls.n	8003b00 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003afc:	2303      	movs	r3, #3
 8003afe:	e006      	b.n	8003b0e <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	f003 0320 	and.w	r3, r3, #32
 8003b08:	2b20      	cmp	r3, #32
 8003b0a:	d0f0      	beq.n	8003aee <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	00030d40 	.word	0x00030d40

08003b20 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b085      	sub	sp, #20
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2210      	movs	r2, #16
 8003b30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4a09      	ldr	r2, [pc, #36]	; (8003b60 <USB_FlushRxFifo+0x40>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d901      	bls.n	8003b44 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003b40:	2303      	movs	r3, #3
 8003b42:	e006      	b.n	8003b52 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d0f0      	beq.n	8003b32 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3714      	adds	r7, #20
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	00030d40 	.word	0x00030d40

08003b64 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	68f9      	ldr	r1, [r7, #12]
 8003b80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b84:	4313      	orrs	r3, r2
 8003b86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3714      	adds	r7, #20
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b96:	b480      	push	{r7}
 8003b98:	b087      	sub	sp, #28
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f003 0306 	and.w	r3, r3, #6
 8003bae:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d102      	bne.n	8003bbc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	75fb      	strb	r3, [r7, #23]
 8003bba:	e00a      	b.n	8003bd2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	d002      	beq.n	8003bc8 <USB_GetDevSpeed+0x32>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b06      	cmp	r3, #6
 8003bc6:	d102      	bne.n	8003bce <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	75fb      	strb	r3, [r7, #23]
 8003bcc:	e001      	b.n	8003bd2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bce:	230f      	movs	r3, #15
 8003bd0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr

08003be0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
 8003be8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	785b      	ldrb	r3, [r3, #1]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d13a      	bne.n	8003c72 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	69da      	ldr	r2, [r3, #28]
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c12:	b29b      	uxth	r3, r3
 8003c14:	68f9      	ldr	r1, [r7, #12]
 8003c16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	015a      	lsls	r2, r3, #5
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4413      	add	r3, r2
 8003c26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d155      	bne.n	8003ce0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	78db      	ldrb	r3, [r3, #3]
 8003c4e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c50:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	059b      	lsls	r3, r3, #22
 8003c56:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	0151      	lsls	r1, r2, #5
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	440a      	add	r2, r1
 8003c62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e036      	b.n	8003ce0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c78:	69da      	ldr	r2, [r3, #28]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	f003 030f 	and.w	r3, r3, #15
 8003c82:	2101      	movs	r1, #1
 8003c84:	fa01 f303 	lsl.w	r3, r1, r3
 8003c88:	041b      	lsls	r3, r3, #16
 8003c8a:	68f9      	ldr	r1, [r7, #12]
 8003c8c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c90:	4313      	orrs	r3, r2
 8003c92:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d11a      	bne.n	8003ce0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	78db      	ldrb	r3, [r3, #3]
 8003cc4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cc6:	430b      	orrs	r3, r1
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	0151      	lsls	r1, r2, #5
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	440a      	add	r2, r1
 8003cd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cde:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3714      	adds	r7, #20
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
	...

08003cf0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b085      	sub	sp, #20
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
 8003cf8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	781b      	ldrb	r3, [r3, #0]
 8003d02:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	785b      	ldrb	r3, [r3, #1]
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d161      	bne.n	8003dd0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	015a      	lsls	r2, r3, #5
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d22:	d11f      	bne.n	8003d64 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d42:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	0151      	lsls	r1, r2, #5
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	440a      	add	r2, r1
 8003d5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d62:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	f003 030f 	and.w	r3, r3, #15
 8003d74:	2101      	movs	r1, #1
 8003d76:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d84:	4013      	ands	r3, r2
 8003d86:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d8e:	69da      	ldr	r2, [r3, #28]
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	f003 030f 	and.w	r3, r3, #15
 8003d98:	2101      	movs	r1, #1
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da8:	4013      	ands	r3, r2
 8003daa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	0159      	lsls	r1, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	440b      	add	r3, r1
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4b35      	ldr	r3, [pc, #212]	; (8003ea0 <USB_DeactivateEndpoint+0x1b0>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	600b      	str	r3, [r1, #0]
 8003dce:	e060      	b.n	8003e92 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003de6:	d11f      	bne.n	8003e28 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	015a      	lsls	r2, r3, #5
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	4413      	add	r3, r2
 8003df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	0151      	lsls	r1, r2, #5
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	440a      	add	r2, r1
 8003dfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e06:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	0151      	lsls	r1, r2, #5
 8003e1a:	68fa      	ldr	r2, [r7, #12]
 8003e1c:	440a      	add	r2, r1
 8003e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e22:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	2101      	movs	r1, #1
 8003e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e3e:	041b      	lsls	r3, r3, #16
 8003e40:	43db      	mvns	r3, r3
 8003e42:	68f9      	ldr	r1, [r7, #12]
 8003e44:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e48:	4013      	ands	r3, r2
 8003e4a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e62:	041b      	lsls	r3, r3, #16
 8003e64:	43db      	mvns	r3, r3
 8003e66:	68f9      	ldr	r1, [r7, #12]
 8003e68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	0159      	lsls	r1, r3, #5
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	440b      	add	r3, r1
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	4b05      	ldr	r3, [pc, #20]	; (8003ea4 <USB_DeactivateEndpoint+0x1b4>)
 8003e8e:	4013      	ands	r3, r2
 8003e90:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	ec337800 	.word	0xec337800
 8003ea4:	eff37800 	.word	0xeff37800

08003ea8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	785b      	ldrb	r3, [r3, #1]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	f040 815c 	bne.w	8004182 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	695b      	ldr	r3, [r3, #20]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d132      	bne.n	8003f38 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	69ba      	ldr	r2, [r7, #24]
 8003ee2:	0151      	lsls	r1, r2, #5
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	440a      	add	r2, r1
 8003ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003eec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ef0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ef4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	691b      	ldr	r3, [r3, #16]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	69fa      	ldr	r2, [r7, #28]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f10:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f14:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	69ba      	ldr	r2, [r7, #24]
 8003f26:	0151      	lsls	r1, r2, #5
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	440a      	add	r2, r1
 8003f2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f30:	0cdb      	lsrs	r3, r3, #19
 8003f32:	04db      	lsls	r3, r3, #19
 8003f34:	6113      	str	r3, [r2, #16]
 8003f36:	e074      	b.n	8004022 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	015a      	lsls	r2, r3, #5
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	4413      	add	r3, r2
 8003f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	0151      	lsls	r1, r2, #5
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	440a      	add	r2, r1
 8003f4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f52:	0cdb      	lsrs	r3, r3, #19
 8003f54:	04db      	lsls	r3, r3, #19
 8003f56:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f64:	691b      	ldr	r3, [r3, #16]
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	0151      	lsls	r1, r2, #5
 8003f6a:	69fa      	ldr	r2, [r7, #28]
 8003f6c:	440a      	add	r2, r1
 8003f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f72:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f76:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	015a      	lsls	r2, r3, #5
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	4413      	add	r3, r2
 8003f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f88:	691a      	ldr	r2, [r3, #16]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	6959      	ldr	r1, [r3, #20]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	440b      	add	r3, r1
 8003f94:	1e59      	subs	r1, r3, #1
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f9e:	04d9      	lsls	r1, r3, #19
 8003fa0:	4b9d      	ldr	r3, [pc, #628]	; (8004218 <USB_EPStartXfer+0x370>)
 8003fa2:	400b      	ands	r3, r1
 8003fa4:	69b9      	ldr	r1, [r7, #24]
 8003fa6:	0148      	lsls	r0, r1, #5
 8003fa8:	69f9      	ldr	r1, [r7, #28]
 8003faa:	4401      	add	r1, r0
 8003fac:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	015a      	lsls	r2, r3, #5
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	4413      	add	r3, r2
 8003fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fca:	69b9      	ldr	r1, [r7, #24]
 8003fcc:	0148      	lsls	r0, r1, #5
 8003fce:	69f9      	ldr	r1, [r7, #28]
 8003fd0:	4401      	add	r1, r0
 8003fd2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	78db      	ldrb	r3, [r3, #3]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d11f      	bne.n	8004022 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fe2:	69bb      	ldr	r3, [r7, #24]
 8003fe4:	015a      	lsls	r2, r3, #5
 8003fe6:	69fb      	ldr	r3, [r7, #28]
 8003fe8:	4413      	add	r3, r2
 8003fea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	0151      	lsls	r1, r2, #5
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	440a      	add	r2, r1
 8003ff8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ffc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004000:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004020:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004022:	79fb      	ldrb	r3, [r7, #7]
 8004024:	2b01      	cmp	r3, #1
 8004026:	d14b      	bne.n	80040c0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d009      	beq.n	8004044 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	461a      	mov	r2, r3
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	78db      	ldrb	r3, [r3, #3]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d128      	bne.n	800409e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d110      	bne.n	800407e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	015a      	lsls	r2, r3, #5
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	4413      	add	r3, r2
 8004064:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	0151      	lsls	r1, r2, #5
 800406e:	69fa      	ldr	r2, [r7, #28]
 8004070:	440a      	add	r2, r1
 8004072:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004076:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e00f      	b.n	800409e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800407e:	69bb      	ldr	r3, [r7, #24]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	69ba      	ldr	r2, [r7, #24]
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	440a      	add	r2, r1
 8004094:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800409c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69ba      	ldr	r2, [r7, #24]
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040bc:	6013      	str	r3, [r2, #0]
 80040be:	e12f      	b.n	8004320 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	69fa      	ldr	r2, [r7, #28]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040de:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	78db      	ldrb	r3, [r3, #3]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d015      	beq.n	8004114 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f000 8117 	beq.w	8004320 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	2101      	movs	r1, #1
 8004104:	fa01 f303 	lsl.w	r3, r1, r3
 8004108:	69f9      	ldr	r1, [r7, #28]
 800410a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800410e:	4313      	orrs	r3, r2
 8004110:	634b      	str	r3, [r1, #52]	; 0x34
 8004112:	e105      	b.n	8004320 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004120:	2b00      	cmp	r3, #0
 8004122:	d110      	bne.n	8004146 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	69fa      	ldr	r2, [r7, #28]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e00f      	b.n	8004166 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	69ba      	ldr	r2, [r7, #24]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	69fa      	ldr	r2, [r7, #28]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004164:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	68d9      	ldr	r1, [r3, #12]
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	781a      	ldrb	r2, [r3, #0]
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	b298      	uxth	r0, r3
 8004174:	79fb      	ldrb	r3, [r7, #7]
 8004176:	9300      	str	r3, [sp, #0]
 8004178:	4603      	mov	r3, r0
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa2b 	bl	80045d6 <USB_WritePacket>
 8004180:	e0ce      	b.n	8004320 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	015a      	lsls	r2, r3, #5
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4413      	add	r3, r2
 800418a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	0151      	lsls	r1, r2, #5
 8004194:	69fa      	ldr	r2, [r7, #28]
 8004196:	440a      	add	r2, r1
 8004198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800419c:	0cdb      	lsrs	r3, r3, #19
 800419e:	04db      	lsls	r3, r3, #19
 80041a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	015a      	lsls	r2, r3, #5
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	4413      	add	r3, r2
 80041aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	69ba      	ldr	r2, [r7, #24]
 80041b2:	0151      	lsls	r1, r2, #5
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	440a      	add	r2, r1
 80041b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d126      	bne.n	800421c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	691a      	ldr	r2, [r3, #16]
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e4:	69b9      	ldr	r1, [r7, #24]
 80041e6:	0148      	lsls	r0, r1, #5
 80041e8:	69f9      	ldr	r1, [r7, #28]
 80041ea:	4401      	add	r1, r0
 80041ec:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041f0:	4313      	orrs	r3, r2
 80041f2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	69fa      	ldr	r2, [r7, #28]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800420e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004212:	6113      	str	r3, [r2, #16]
 8004214:	e036      	b.n	8004284 <USB_EPStartXfer+0x3dc>
 8004216:	bf00      	nop
 8004218:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	695a      	ldr	r2, [r3, #20]
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4413      	add	r3, r2
 8004226:	1e5a      	subs	r2, r3, #1
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	691a      	ldr	r2, [r3, #16]
 8004240:	8afb      	ldrh	r3, [r7, #22]
 8004242:	04d9      	lsls	r1, r3, #19
 8004244:	4b39      	ldr	r3, [pc, #228]	; (800432c <USB_EPStartXfer+0x484>)
 8004246:	400b      	ands	r3, r1
 8004248:	69b9      	ldr	r1, [r7, #24]
 800424a:	0148      	lsls	r0, r1, #5
 800424c:	69f9      	ldr	r1, [r7, #28]
 800424e:	4401      	add	r1, r0
 8004250:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004254:	4313      	orrs	r3, r2
 8004256:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	015a      	lsls	r2, r3, #5
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	4413      	add	r3, r2
 8004260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004264:	691a      	ldr	r2, [r3, #16]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	8af9      	ldrh	r1, [r7, #22]
 800426c:	fb01 f303 	mul.w	r3, r1, r3
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	0148      	lsls	r0, r1, #5
 8004278:	69f9      	ldr	r1, [r7, #28]
 800427a:	4401      	add	r1, r0
 800427c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004280:	4313      	orrs	r3, r2
 8004282:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10d      	bne.n	80042a6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	68d9      	ldr	r1, [r3, #12]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	460a      	mov	r2, r1
 80042a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	78db      	ldrb	r3, [r3, #3]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d128      	bne.n	8004300 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d110      	bne.n	80042e0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00f      	b.n	8004300 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800431e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	1ff80000 	.word	0x1ff80000

08004330 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	2b01      	cmp	r3, #1
 800434e:	f040 80cd 	bne.w	80044ec <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d132      	bne.n	80043c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004374:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004378:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800437c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800439c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b8:	0cdb      	lsrs	r3, r3, #19
 80043ba:	04db      	lsls	r3, r3, #19
 80043bc:	6113      	str	r3, [r2, #16]
 80043be:	e04e      	b.n	800445e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043da:	0cdb      	lsrs	r3, r3, #19
 80043dc:	04db      	lsls	r3, r3, #19
 80043de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004402:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	695a      	ldr	r2, [r3, #20]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	429a      	cmp	r2, r3
 800440e:	d903      	bls.n	8004418 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	689a      	ldr	r2, [r3, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444e:	6939      	ldr	r1, [r7, #16]
 8004450:	0148      	lsls	r0, r1, #5
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	4401      	add	r1, r0
 8004456:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800445a:	4313      	orrs	r3, r2
 800445c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d11e      	bne.n	80044a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	461a      	mov	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e092      	b.n	80045c8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d07e      	beq.n	80045c8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	f003 030f 	and.w	r3, r3, #15
 80044da:	2101      	movs	r1, #1
 80044dc:	fa01 f303 	lsl.w	r3, r1, r3
 80044e0:	6979      	ldr	r1, [r7, #20]
 80044e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e6:	4313      	orrs	r3, r2
 80044e8:	634b      	str	r3, [r1, #52]	; 0x34
 80044ea:	e06d      	b.n	80045c8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	0151      	lsls	r1, r2, #5
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	440a      	add	r2, r1
 8004502:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004506:	0cdb      	lsrs	r3, r3, #19
 8004508:	04db      	lsls	r3, r3, #19
 800450a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	0151      	lsls	r1, r2, #5
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	440a      	add	r2, r1
 8004522:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004526:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800452a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800452e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	695b      	ldr	r3, [r3, #20]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	0151      	lsls	r1, r2, #5
 8004552:	697a      	ldr	r2, [r7, #20]
 8004554:	440a      	add	r2, r1
 8004556:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800455a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800455e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	015a      	lsls	r2, r3, #5
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	4413      	add	r3, r2
 8004568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004576:	6939      	ldr	r1, [r7, #16]
 8004578:	0148      	lsls	r0, r1, #5
 800457a:	6979      	ldr	r1, [r7, #20]
 800457c:	4401      	add	r1, r0
 800457e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004582:	4313      	orrs	r3, r2
 8004584:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004586:	79fb      	ldrb	r3, [r7, #7]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d10d      	bne.n	80045a8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d009      	beq.n	80045a8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	68d9      	ldr	r1, [r3, #12]
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a4:	460a      	mov	r2, r1
 80045a6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	015a      	lsls	r2, r3, #5
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	4413      	add	r3, r2
 80045b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	0151      	lsls	r1, r2, #5
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	440a      	add	r2, r1
 80045be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045c2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045c8:	2300      	movs	r3, #0
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	371c      	adds	r7, #28
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr

080045d6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80045d6:	b480      	push	{r7}
 80045d8:	b089      	sub	sp, #36	; 0x24
 80045da:	af00      	add	r7, sp, #0
 80045dc:	60f8      	str	r0, [r7, #12]
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	4611      	mov	r1, r2
 80045e2:	461a      	mov	r2, r3
 80045e4:	460b      	mov	r3, r1
 80045e6:	71fb      	strb	r3, [r7, #7]
 80045e8:	4613      	mov	r3, r2
 80045ea:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80045f4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d11a      	bne.n	8004632 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80045fc:	88bb      	ldrh	r3, [r7, #4]
 80045fe:	3303      	adds	r3, #3
 8004600:	089b      	lsrs	r3, r3, #2
 8004602:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
 8004608:	e00f      	b.n	800462a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800460a:	79fb      	ldrb	r3, [r7, #7]
 800460c:	031a      	lsls	r2, r3, #12
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	4413      	add	r3, r2
 8004612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004616:	461a      	mov	r2, r3
 8004618:	69fb      	ldr	r3, [r7, #28]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	3304      	adds	r3, #4
 8004622:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	3301      	adds	r3, #1
 8004628:	61bb      	str	r3, [r7, #24]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	429a      	cmp	r2, r3
 8004630:	d3eb      	bcc.n	800460a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3724      	adds	r7, #36	; 0x24
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004640:	b480      	push	{r7}
 8004642:	b089      	sub	sp, #36	; 0x24
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004656:	88fb      	ldrh	r3, [r7, #6]
 8004658:	3303      	adds	r3, #3
 800465a:	089b      	lsrs	r3, r3, #2
 800465c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800465e:	2300      	movs	r3, #0
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e00b      	b.n	800467c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	3304      	adds	r3, #4
 8004674:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	3301      	adds	r3, #1
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	429a      	cmp	r2, r3
 8004682:	d3ef      	bcc.n	8004664 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004684:	69fb      	ldr	r3, [r7, #28]
}
 8004686:	4618      	mov	r0, r3
 8004688:	3724      	adds	r7, #36	; 0x24
 800468a:	46bd      	mov	sp, r7
 800468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004690:	4770      	bx	lr

08004692 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004692:	b480      	push	{r7}
 8004694:	b085      	sub	sp, #20
 8004696:	af00      	add	r7, sp, #0
 8004698:	6078      	str	r0, [r7, #4]
 800469a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	2b01      	cmp	r3, #1
 80046ac:	d12c      	bne.n	8004708 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	015a      	lsls	r2, r3, #5
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	4413      	add	r3, r2
 80046b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	db12      	blt.n	80046e6 <USB_EPSetStall+0x54>
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00f      	beq.n	80046e6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	015a      	lsls	r2, r3, #5
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	4413      	add	r3, r2
 80046ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	0151      	lsls	r1, r2, #5
 80046d8:	68fa      	ldr	r2, [r7, #12]
 80046da:	440a      	add	r2, r1
 80046dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046e0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80046e4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e02b      	b.n	8004760 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	db12      	blt.n	8004740 <USB_EPSetStall+0xae>
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00f      	beq.n	8004740 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800473a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800473e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	015a      	lsls	r2, r3, #5
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	0151      	lsls	r1, r2, #5
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	440a      	add	r2, r1
 8004756:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800475e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3714      	adds	r7, #20
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800476e:	b480      	push	{r7}
 8004770:	b085      	sub	sp, #20
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
 8004776:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	785b      	ldrb	r3, [r3, #1]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d128      	bne.n	80047dc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	68ba      	ldr	r2, [r7, #8]
 800479a:	0151      	lsls	r1, r2, #5
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	440a      	add	r2, r1
 80047a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	78db      	ldrb	r3, [r3, #3]
 80047ae:	2b03      	cmp	r3, #3
 80047b0:	d003      	beq.n	80047ba <USB_EPClearStall+0x4c>
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	78db      	ldrb	r3, [r3, #3]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d138      	bne.n	800482c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	0151      	lsls	r1, r2, #5
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	440a      	add	r2, r1
 80047d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	e027      	b.n	800482c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047fa:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	78db      	ldrb	r3, [r3, #3]
 8004800:	2b03      	cmp	r3, #3
 8004802:	d003      	beq.n	800480c <USB_EPClearStall+0x9e>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	78db      	ldrb	r3, [r3, #3]
 8004808:	2b02      	cmp	r3, #2
 800480a:	d10f      	bne.n	800482c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004826:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800482a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3714      	adds	r7, #20
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr

0800483a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
 8004842:	460b      	mov	r3, r1
 8004844:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004858:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800485c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	011b      	lsls	r3, r3, #4
 800486a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800486e:	68f9      	ldr	r1, [r7, #12]
 8004870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004874:	4313      	orrs	r3, r2
 8004876:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048a0:	f023 0303 	bic.w	r3, r3, #3
 80048a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048b4:	f023 0302 	bic.w	r3, r3, #2
 80048b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3714      	adds	r7, #20
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048e2:	f023 0303 	bic.w	r3, r3, #3
 80048e6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	68fa      	ldr	r2, [r7, #12]
 80048f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048f6:	f043 0302 	orr.w	r3, r3, #2
 80048fa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048fc:	2300      	movs	r3, #0
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800490a:	b480      	push	{r7}
 800490c:	b085      	sub	sp, #20
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	695b      	ldr	r3, [r3, #20]
 8004916:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	4013      	ands	r3, r2
 8004920:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004922:	68fb      	ldr	r3, [r7, #12]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800494c:	69db      	ldr	r3, [r3, #28]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	4013      	ands	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	0c1b      	lsrs	r3, r3, #16
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004964:	b480      	push	{r7}
 8004966:	b085      	sub	sp, #20
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	68ba      	ldr	r2, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	b29b      	uxth	r3, r3
}
 800498c:	4618      	mov	r0, r3
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	460b      	mov	r3, r1
 80049a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049a8:	78fb      	ldrb	r3, [r7, #3]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	68ba      	ldr	r2, [r7, #8]
 80049c2:	4013      	ands	r3, r2
 80049c4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049c6:	68bb      	ldr	r3, [r7, #8]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b087      	sub	sp, #28
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	460b      	mov	r3, r1
 80049de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80049f8:	78fb      	ldrb	r3, [r7, #3]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	fa22 f303 	lsr.w	r3, r2, r3
 8004a04:	01db      	lsls	r3, r3, #7
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a0e:	78fb      	ldrb	r3, [r7, #3]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	693a      	ldr	r2, [r7, #16]
 8004a1e:	4013      	ands	r3, r2
 8004a20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a22:	68bb      	ldr	r3, [r7, #8]
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	371c      	adds	r7, #28
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	68fa      	ldr	r2, [r7, #12]
 8004a62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a66:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a82:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a84:	2300      	movs	r3, #0
}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr
	...

08004a94 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b087      	sub	sp, #28
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	607a      	str	r2, [r7, #4]
 8004aa0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	333c      	adds	r3, #60	; 0x3c
 8004aaa:	3304      	adds	r3, #4
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	4a26      	ldr	r2, [pc, #152]	; (8004b4c <USB_EP0_OutStart+0xb8>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d90a      	bls.n	8004ace <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ac8:	d101      	bne.n	8004ace <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004aca:	2300      	movs	r3, #0
 8004acc:	e037      	b.n	8004b3e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ae8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	697a      	ldr	r2, [r7, #20]
 8004af8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004afc:	f043 0318 	orr.w	r3, r3, #24
 8004b00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b10:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b14:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004b16:	7afb      	ldrb	r3, [r7, #11]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d10f      	bne.n	8004b3c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b22:	461a      	mov	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b36:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004b3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	371c      	adds	r7, #28
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr
 8004b4a:	bf00      	nop
 8004b4c:	4f54300a 	.word	0x4f54300a

08004b50 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	60fb      	str	r3, [r7, #12]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a13      	ldr	r2, [pc, #76]	; (8004bb4 <USB_CoreReset+0x64>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d901      	bls.n	8004b6e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e01b      	b.n	8004ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	daf2      	bge.n	8004b5c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f043 0201 	orr.w	r2, r3, #1
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	60fb      	str	r3, [r7, #12]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <USB_CoreReset+0x64>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e006      	b.n	8004ba6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	691b      	ldr	r3, [r3, #16]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d0f0      	beq.n	8004b86 <USB_CoreReset+0x36>

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	00030d40 	.word	0x00030d40

08004bb8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004bc4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004bc8:	f002 f92c 	bl	8006e24 <malloc>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d105      	bne.n	8004be2 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004bde:	2302      	movs	r3, #2
 8004be0:	e066      	b.n	8004cb0 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	7c1b      	ldrb	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d119      	bne.n	8004c26 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004bf2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	2181      	movs	r1, #129	; 0x81
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f001 ff99 	bl	8006b32 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f001 ff8f 	bl	8006b32 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2210      	movs	r2, #16
 8004c20:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004c24:	e016      	b.n	8004c54 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c26:	2340      	movs	r3, #64	; 0x40
 8004c28:	2202      	movs	r2, #2
 8004c2a:	2181      	movs	r1, #129	; 0x81
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f001 ff80 	bl	8006b32 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c38:	2340      	movs	r3, #64	; 0x40
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f001 ff77 	bl	8006b32 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c54:	2308      	movs	r3, #8
 8004c56:	2203      	movs	r2, #3
 8004c58:	2182      	movs	r1, #130	; 0x82
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f001 ff69 	bl	8006b32 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2201      	movs	r2, #1
 8004c64:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	7c1b      	ldrb	r3, [r3, #16]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c94:	2101      	movs	r1, #1
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f002 f83a 	bl	8006d10 <USBD_LL_PrepareReceive>
 8004c9c:	e007      	b.n	8004cae <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004ca4:	2340      	movs	r3, #64	; 0x40
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f002 f831 	bl	8006d10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3710      	adds	r7, #16
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	460b      	mov	r3, r1
 8004cc2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004cc8:	2181      	movs	r1, #129	; 0x81
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f001 ff57 	bl	8006b7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004cd6:	2101      	movs	r1, #1
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f001 ff50 	bl	8006b7e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004ce6:	2182      	movs	r1, #130	; 0x82
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f001 ff48 	bl	8006b7e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00e      	beq.n	8004d26 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f002 f88b 	bl	8006e34 <free>
    pdev->pClassData = NULL;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8004d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3710      	adds	r7, #16
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}

08004d30 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d40:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d03a      	beq.n	8004dd0 <USBD_CDC_Setup+0xa0>
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	f040 8097 	bne.w	8004e8e <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	88db      	ldrh	r3, [r3, #6]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d029      	beq.n	8004dbc <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da11      	bge.n	8004d96 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	683a      	ldr	r2, [r7, #0]
 8004d7c:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004d7e:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	88d2      	ldrh	r2, [r2, #6]
 8004d84:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004d86:	6939      	ldr	r1, [r7, #16]
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	88db      	ldrh	r3, [r3, #6]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 fa9d 	bl	80062ce <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004d94:	e082      	b.n	8004e9c <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	785a      	ldrb	r2, [r3, #1]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	88db      	ldrh	r3, [r3, #6]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004dac:	6939      	ldr	r1, [r7, #16]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	88db      	ldrh	r3, [r3, #6]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 fab6 	bl	8006326 <USBD_CtlPrepareRx>
    break;
 8004dba:	e06f      	b.n	8004e9c <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	7850      	ldrb	r0, [r2, #1]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	4798      	blx	r3
    break;
 8004dce:	e065      	b.n	8004e9c <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b0b      	cmp	r3, #11
 8004dd6:	d84f      	bhi.n	8004e78 <USBD_CDC_Setup+0x148>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <USBD_CDC_Setup+0xb0>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e87 	.word	0x08004e87
 8004de8:	08004e79 	.word	0x08004e79
 8004dec:	08004e79 	.word	0x08004e79
 8004df0:	08004e79 	.word	0x08004e79
 8004df4:	08004e79 	.word	0x08004e79
 8004df8:	08004e79 	.word	0x08004e79
 8004dfc:	08004e79 	.word	0x08004e79
 8004e00:	08004e79 	.word	0x08004e79
 8004e04:	08004e79 	.word	0x08004e79
 8004e08:	08004e39 	.word	0x08004e39
 8004e0c:	08004e61 	.word	0x08004e61
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e16:	2b03      	cmp	r3, #3
 8004e18:	d107      	bne.n	8004e2a <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e1a:	f107 030c 	add.w	r3, r7, #12
 8004e1e:	2202      	movs	r2, #2
 8004e20:	4619      	mov	r1, r3
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f001 fa53 	bl	80062ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004e28:	e030      	b.n	8004e8c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004e2a:	6839      	ldr	r1, [r7, #0]
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f001 f9dd 	bl	80061ec <USBD_CtlError>
        ret = USBD_FAIL;
 8004e32:	2303      	movs	r3, #3
 8004e34:	75fb      	strb	r3, [r7, #23]
      break;
 8004e36:	e029      	b.n	8004e8c <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e3e:	2b03      	cmp	r3, #3
 8004e40:	d107      	bne.n	8004e52 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e42:	f107 030f 	add.w	r3, r7, #15
 8004e46:	2201      	movs	r2, #1
 8004e48:	4619      	mov	r1, r3
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f001 fa3f 	bl	80062ce <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8004e50:	e01c      	b.n	8004e8c <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8004e52:	6839      	ldr	r1, [r7, #0]
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f001 f9c9 	bl	80061ec <USBD_CtlError>
        ret = USBD_FAIL;
 8004e5a:	2303      	movs	r3, #3
 8004e5c:	75fb      	strb	r3, [r7, #23]
      break;
 8004e5e:	e015      	b.n	8004e8c <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d00f      	beq.n	8004e8a <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8004e6a:	6839      	ldr	r1, [r7, #0]
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f001 f9bd 	bl	80061ec <USBD_CtlError>
        ret = USBD_FAIL;
 8004e72:	2303      	movs	r3, #3
 8004e74:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004e76:	e008      	b.n	8004e8a <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8004e78:	6839      	ldr	r1, [r7, #0]
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f001 f9b6 	bl	80061ec <USBD_CtlError>
      ret = USBD_FAIL;
 8004e80:	2303      	movs	r3, #3
 8004e82:	75fb      	strb	r3, [r7, #23]
      break;
 8004e84:	e002      	b.n	8004e8c <USBD_CDC_Setup+0x15c>
      break;
 8004e86:	bf00      	nop
 8004e88:	e008      	b.n	8004e9c <USBD_CDC_Setup+0x16c>
      break;
 8004e8a:	bf00      	nop
    }
    break;
 8004e8c:	e006      	b.n	8004e9c <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004e8e:	6839      	ldr	r1, [r7, #0]
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f001 f9ab 	bl	80061ec <USBD_CtlError>
    ret = USBD_FAIL;
 8004e96:	2303      	movs	r3, #3
 8004e98:	75fb      	strb	r3, [r7, #23]
    break;
 8004e9a:	bf00      	nop
  }

  return (uint8_t)ret;
 8004e9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3718      	adds	r7, #24
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop

08004ea8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004eba:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e049      	b.n	8004f5e <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ed0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004ed2:	78fa      	ldrb	r2, [r7, #3]
 8004ed4:	6879      	ldr	r1, [r7, #4]
 8004ed6:	4613      	mov	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	4413      	add	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	440b      	add	r3, r1
 8004ee0:	3318      	adds	r3, #24
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d029      	beq.n	8004f3c <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004ee8:	78fa      	ldrb	r2, [r7, #3]
 8004eea:	6879      	ldr	r1, [r7, #4]
 8004eec:	4613      	mov	r3, r2
 8004eee:	009b      	lsls	r3, r3, #2
 8004ef0:	4413      	add	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	440b      	add	r3, r1
 8004ef6:	3318      	adds	r3, #24
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	78f9      	ldrb	r1, [r7, #3]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	460b      	mov	r3, r1
 8004f00:	00db      	lsls	r3, r3, #3
 8004f02:	1a5b      	subs	r3, r3, r1
 8004f04:	009b      	lsls	r3, r3, #2
 8004f06:	4403      	add	r3, r0
 8004f08:	3344      	adds	r3, #68	; 0x44
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f10:	fb03 f301 	mul.w	r3, r3, r1
 8004f14:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d110      	bne.n	8004f3c <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004f1a:	78fa      	ldrb	r2, [r7, #3]
 8004f1c:	6879      	ldr	r1, [r7, #4]
 8004f1e:	4613      	mov	r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	440b      	add	r3, r1
 8004f28:	3318      	adds	r3, #24
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f2e:	78f9      	ldrb	r1, [r7, #3]
 8004f30:	2300      	movs	r3, #0
 8004f32:	2200      	movs	r2, #0
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f001 feca 	bl	8006cce <USBD_LL_Transmit>
 8004f3a:	e00f      	b.n	8004f5c <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004f52:	68ba      	ldr	r2, [r7, #8]
 8004f54:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004f58:	78fa      	ldrb	r2, [r7, #3]
 8004f5a:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b084      	sub	sp, #16
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	460b      	mov	r3, r1
 8004f70:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f78:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e015      	b.n	8004fb4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f001 fee0 	bl	8006d52 <USBD_LL_GetRxDataSize>
 8004f92:	4602      	mov	r2, r0
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004fae:	4611      	mov	r1, r2
 8004fb0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3710      	adds	r7, #16
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b084      	sub	sp, #16
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fca:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d015      	beq.n	8005002 <USBD_CDC_EP0_RxReady+0x46>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004fdc:	2bff      	cmp	r3, #255	; 0xff
 8004fde:	d010      	beq.n	8005002 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004fee:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ff6:	b292      	uxth	r2, r2
 8004ff8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	22ff      	movs	r2, #255	; 0xff
 8004ffe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3710      	adds	r7, #16
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}

0800500c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2243      	movs	r2, #67	; 0x43
 8005018:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800501a:	4b03      	ldr	r3, [pc, #12]	; (8005028 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800501c:	4618      	mov	r0, r3
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr
 8005028:	20000098 	.word	0x20000098

0800502c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2243      	movs	r2, #67	; 0x43
 8005038:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800503a:	4b03      	ldr	r3, [pc, #12]	; (8005048 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr
 8005048:	20000054 	.word	0x20000054

0800504c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2243      	movs	r2, #67	; 0x43
 8005058:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800505a:	4b03      	ldr	r3, [pc, #12]	; (8005068 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800505c:	4618      	mov	r0, r3
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	200000dc 	.word	0x200000dc

0800506c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	220a      	movs	r2, #10
 8005078:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800507a:	4b03      	ldr	r3, [pc, #12]	; (8005088 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800507c:	4618      	mov	r0, r3
 800507e:	370c      	adds	r7, #12
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	20000010 	.word	0x20000010

0800508c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800509c:	2303      	movs	r3, #3
 800509e:	e004      	b.n	80050aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	370c      	adds	r7, #12
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr

080050b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b087      	sub	sp, #28
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	60f8      	str	r0, [r7, #12]
 80050be:	60b9      	str	r1, [r7, #8]
 80050c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80050ca:	697b      	ldr	r3, [r7, #20]
 80050cc:	68ba      	ldr	r2, [r7, #8]
 80050ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	371c      	adds	r7, #28
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050f8:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	683a      	ldr	r2, [r7, #0]
 80050fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005102:	2300      	movs	r3, #0
}
 8005104:	4618      	mov	r0, r3
 8005106:	3714      	adds	r7, #20
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800511e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005120:	2301      	movs	r3, #1
 8005122:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800512a:	2b00      	cmp	r3, #0
 800512c:	d101      	bne.n	8005132 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800512e:	2303      	movs	r3, #3
 8005130:	e01a      	b.n	8005168 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005138:	2b00      	cmp	r3, #0
 800513a:	d114      	bne.n	8005166 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	2201      	movs	r2, #1
 8005140:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005144:	68bb      	ldr	r3, [r7, #8]
 8005146:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800514e:	68bb      	ldr	r3, [r7, #8]
 8005150:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800515a:	2181      	movs	r1, #129	; 0x81
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f001 fdb6 	bl	8006cce <USBD_LL_Transmit>

    ret = USBD_OK;
 8005162:	2300      	movs	r3, #0
 8005164:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005166:	7bfb      	ldrb	r3, [r7, #15]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800517e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005186:	2b00      	cmp	r3, #0
 8005188:	d101      	bne.n	800518e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800518a:	2303      	movs	r3, #3
 800518c:	e016      	b.n	80051bc <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	7c1b      	ldrb	r3, [r3, #16]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d109      	bne.n	80051aa <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800519c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051a0:	2101      	movs	r1, #1
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f001 fdb4 	bl	8006d10 <USBD_LL_PrepareReceive>
 80051a8:	e007      	b.n	80051ba <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051b0:	2340      	movs	r3, #64	; 0x40
 80051b2:	2101      	movs	r1, #1
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f001 fdab 	bl	8006d10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051ba:	2300      	movs	r3, #0
}
 80051bc:	4618      	mov	r0, r3
 80051be:	3710      	adds	r7, #16
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}

080051c4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	4613      	mov	r3, r2
 80051d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d101      	bne.n	80051dc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80051d8:	2303      	movs	r3, #3
 80051da:	e025      	b.n	8005228 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d003      	beq.n	8005200 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	68ba      	ldr	r2, [r7, #8]
 800520a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	79fa      	ldrb	r2, [r7, #7]
 800521a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800521c:	68f8      	ldr	r0, [r7, #12]
 800521e:	f001 fc21 	bl	8006a64 <USBD_LL_Init>
 8005222:	4603      	mov	r3, r0
 8005224:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005226:	7dfb      	ldrb	r3, [r7, #23]
}
 8005228:	4618      	mov	r0, r3
 800522a:	3718      	adds	r7, #24
 800522c:	46bd      	mov	sp, r7
 800522e:	bd80      	pop	{r7, pc}

08005230 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005244:	2303      	movs	r3, #3
 8005246:	e010      	b.n	800526a <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005258:	f107 020e 	add.w	r2, r7, #14
 800525c:	4610      	mov	r0, r2
 800525e:	4798      	blx	r3
 8005260:	4602      	mov	r2, r0
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	3710      	adds	r7, #16
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b082      	sub	sp, #8
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f001 fc3e 	bl	8006afc <USBD_LL_Start>
 8005280:	4603      	mov	r3, r0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3708      	adds	r7, #8
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}

0800528a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800528a:	b480      	push	{r7}
 800528c:	b083      	sub	sp, #12
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	460b      	mov	r3, r1
 80052aa:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80052ac:	2303      	movs	r3, #3
 80052ae:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d009      	beq.n	80052ce <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	4611      	mov	r1, r2
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	4798      	blx	r3
 80052ca:	4603      	mov	r3, r0
 80052cc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3710      	adds	r7, #16
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	460b      	mov	r3, r1
 80052e2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	4611      	mov	r1, r2
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	4798      	blx	r3
  }

  return USBD_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005318:	6839      	ldr	r1, [r7, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 ff2c 	bl	8006178 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800533c:	f003 031f 	and.w	r3, r3, #31
 8005340:	2b01      	cmp	r3, #1
 8005342:	d00e      	beq.n	8005362 <USBD_LL_SetupStage+0x5a>
 8005344:	2b01      	cmp	r3, #1
 8005346:	d302      	bcc.n	800534e <USBD_LL_SetupStage+0x46>
 8005348:	2b02      	cmp	r3, #2
 800534a:	d014      	beq.n	8005376 <USBD_LL_SetupStage+0x6e>
 800534c:	e01d      	b.n	800538a <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005354:	4619      	mov	r1, r3
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa18 	bl	800578c <USBD_StdDevReq>
 800535c:	4603      	mov	r3, r0
 800535e:	73fb      	strb	r3, [r7, #15]
      break;
 8005360:	e020      	b.n	80053a4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005368:	4619      	mov	r1, r3
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 fa7c 	bl	8005868 <USBD_StdItfReq>
 8005370:	4603      	mov	r3, r0
 8005372:	73fb      	strb	r3, [r7, #15]
      break;
 8005374:	e016      	b.n	80053a4 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800537c:	4619      	mov	r1, r3
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fab8 	bl	80058f4 <USBD_StdEPReq>
 8005384:	4603      	mov	r3, r0
 8005386:	73fb      	strb	r3, [r7, #15]
      break;
 8005388:	e00c      	b.n	80053a4 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005390:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005394:	b2db      	uxtb	r3, r3
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f001 fc0f 	bl	8006bbc <USBD_LL_StallEP>
 800539e:	4603      	mov	r3, r0
 80053a0:	73fb      	strb	r3, [r7, #15]
      break;
 80053a2:	bf00      	nop
  }

  return ret;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}

080053ae <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053ae:	b580      	push	{r7, lr}
 80053b0:	b086      	sub	sp, #24
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	60f8      	str	r0, [r7, #12]
 80053b6:	460b      	mov	r3, r1
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053bc:	7afb      	ldrb	r3, [r7, #11]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d137      	bne.n	8005432 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053c8:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d14a      	bne.n	800546a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d913      	bls.n	8005408 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80053e0:	693b      	ldr	r3, [r7, #16]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	1ad2      	subs	r2, r2, r3
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	4293      	cmp	r3, r2
 80053f8:	bf28      	it	cs
 80053fa:	4613      	movcs	r3, r2
 80053fc:	461a      	mov	r2, r3
 80053fe:	6879      	ldr	r1, [r7, #4]
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 ffad 	bl	8006360 <USBD_CtlContinueRx>
 8005406:	e030      	b.n	800546a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540e:	691b      	ldr	r3, [r3, #16]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800541a:	2b03      	cmp	r3, #3
 800541c:	d105      	bne.n	800542a <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800542a:	68f8      	ldr	r0, [r7, #12]
 800542c:	f000 ffa9 	bl	8006382 <USBD_CtlSendStatus>
 8005430:	e01b      	b.n	800546a <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d013      	beq.n	8005466 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8005444:	2b03      	cmp	r3, #3
 8005446:	d10e      	bne.n	8005466 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	699b      	ldr	r3, [r3, #24]
 8005450:	7afa      	ldrb	r2, [r7, #11]
 8005452:	4611      	mov	r1, r2
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	4798      	blx	r3
 8005458:	4603      	mov	r3, r0
 800545a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800545c:	7dfb      	ldrb	r3, [r7, #23]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d003      	beq.n	800546a <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8005462:	7dfb      	ldrb	r3, [r7, #23]
 8005464:	e002      	b.n	800546c <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005466:	2303      	movs	r3, #3
 8005468:	e000      	b.n	800546c <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3718      	adds	r7, #24
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b086      	sub	sp, #24
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	460b      	mov	r3, r1
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005482:	7afb      	ldrb	r3, [r7, #11]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d16a      	bne.n	800555e <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	3314      	adds	r3, #20
 800548c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005494:	2b02      	cmp	r3, #2
 8005496:	d155      	bne.n	8005544 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	689a      	ldr	r2, [r3, #8]
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d914      	bls.n	80054ce <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	689a      	ldr	r2, [r3, #8]
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	1ad2      	subs	r2, r2, r3
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	461a      	mov	r2, r3
 80054b8:	6879      	ldr	r1, [r7, #4]
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 ff22 	bl	8006304 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054c0:	2300      	movs	r3, #0
 80054c2:	2200      	movs	r2, #0
 80054c4:	2100      	movs	r1, #0
 80054c6:	68f8      	ldr	r0, [r7, #12]
 80054c8:	f001 fc22 	bl	8006d10 <USBD_LL_PrepareReceive>
 80054cc:	e03a      	b.n	8005544 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	68da      	ldr	r2, [r3, #12]
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d11c      	bne.n	8005514 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d316      	bcc.n	8005514 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d20f      	bcs.n	8005514 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80054f4:	2200      	movs	r2, #0
 80054f6:	2100      	movs	r1, #0
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 ff03 	bl	8006304 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	2200      	movs	r2, #0
 8005502:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005506:	2300      	movs	r3, #0
 8005508:	2200      	movs	r2, #0
 800550a:	2100      	movs	r1, #0
 800550c:	68f8      	ldr	r0, [r7, #12]
 800550e:	f001 fbff 	bl	8006d10 <USBD_LL_PrepareReceive>
 8005512:	e017      	b.n	8005544 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00a      	beq.n	8005536 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005526:	2b03      	cmp	r3, #3
 8005528:	d105      	bne.n	8005536 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005536:	2180      	movs	r1, #128	; 0x80
 8005538:	68f8      	ldr	r0, [r7, #12]
 800553a:	f001 fb3f 	bl	8006bbc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800553e:	68f8      	ldr	r0, [r7, #12]
 8005540:	f000 ff32 	bl	80063a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800554a:	2b01      	cmp	r3, #1
 800554c:	d123      	bne.n	8005596 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800554e:	68f8      	ldr	r0, [r7, #12]
 8005550:	f7ff fe9b 	bl	800528a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	2200      	movs	r2, #0
 8005558:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800555c:	e01b      	b.n	8005596 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d013      	beq.n	8005592 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8005570:	2b03      	cmp	r3, #3
 8005572:	d10e      	bne.n	8005592 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	7afa      	ldrb	r2, [r7, #11]
 800557e:	4611      	mov	r1, r2
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	4798      	blx	r3
 8005584:	4603      	mov	r3, r0
 8005586:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8005588:	7dfb      	ldrb	r3, [r7, #23]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800558e:	7dfb      	ldrb	r3, [r7, #23]
 8005590:	e002      	b.n	8005598 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8005592:	2303      	movs	r3, #3
 8005594:	e000      	b.n	8005598 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d009      	beq.n	80055e4 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	6852      	ldr	r2, [r2, #4]
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	4611      	mov	r1, r2
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	2200      	movs	r2, #0
 80055e8:	2100      	movs	r1, #0
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 faa1 	bl	8006b32 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2240      	movs	r2, #64	; 0x40
 80055fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005600:	2340      	movs	r3, #64	; 0x40
 8005602:	2200      	movs	r2, #0
 8005604:	2180      	movs	r1, #128	; 0x80
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fa93 	bl	8006b32 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2240      	movs	r2, #64	; 0x40
 8005616:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005618:	2300      	movs	r3, #0
}
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}

08005622 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005622:	b480      	push	{r7}
 8005624:	b083      	sub	sp, #12
 8005626:	af00      	add	r7, sp, #0
 8005628:	6078      	str	r0, [r7, #4]
 800562a:	460b      	mov	r3, r1
 800562c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2204      	movs	r2, #4
 800565a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800567a:	2b04      	cmp	r3, #4
 800567c:	d105      	bne.n	800568a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	370c      	adds	r7, #12
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056a6:	2b03      	cmp	r3, #3
 80056a8:	d10b      	bne.n	80056c2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d005      	beq.n	80056c2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80056c2:	2300      	movs	r3, #0
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3708      	adds	r7, #8
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	460b      	mov	r3, r1
 80056f0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80056f2:	2300      	movs	r3, #0
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	370c      	adds	r7, #12
 800570e:	46bd      	mov	sp, r7
 8005710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005714:	4770      	bx	lr

08005716 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005716:	b580      	push	{r7, lr}
 8005718:	b082      	sub	sp, #8
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d009      	beq.n	8005744 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005736:	685b      	ldr	r3, [r3, #4]
 8005738:	687a      	ldr	r2, [r7, #4]
 800573a:	6852      	ldr	r2, [r2, #4]
 800573c:	b2d2      	uxtb	r2, r2
 800573e:	4611      	mov	r1, r2
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	4798      	blx	r3
  }

  return USBD_OK;
 8005744:	2300      	movs	r3, #0
}
 8005746:	4618      	mov	r0, r3
 8005748:	3708      	adds	r7, #8
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}

0800574e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800574e:	b480      	push	{r7}
 8005750:	b087      	sub	sp, #28
 8005752:	af00      	add	r7, sp, #0
 8005754:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	3301      	adds	r3, #1
 8005764:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800576c:	8a3b      	ldrh	r3, [r7, #16]
 800576e:	021b      	lsls	r3, r3, #8
 8005770:	b21a      	sxth	r2, r3
 8005772:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005776:	4313      	orrs	r3, r2
 8005778:	b21b      	sxth	r3, r3
 800577a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800577c:	89fb      	ldrh	r3, [r7, #14]
}
 800577e:	4618      	mov	r0, r3
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr
	...

0800578c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005796:	2300      	movs	r3, #0
 8005798:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80057a2:	2b20      	cmp	r3, #32
 80057a4:	d004      	beq.n	80057b0 <USBD_StdDevReq+0x24>
 80057a6:	2b40      	cmp	r3, #64	; 0x40
 80057a8:	d002      	beq.n	80057b0 <USBD_StdDevReq+0x24>
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00a      	beq.n	80057c4 <USBD_StdDevReq+0x38>
 80057ae:	e050      	b.n	8005852 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
 80057be:	4603      	mov	r3, r0
 80057c0:	73fb      	strb	r3, [r7, #15]
    break;
 80057c2:	e04b      	b.n	800585c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	785b      	ldrb	r3, [r3, #1]
 80057c8:	2b09      	cmp	r3, #9
 80057ca:	d83c      	bhi.n	8005846 <USBD_StdDevReq+0xba>
 80057cc:	a201      	add	r2, pc, #4	; (adr r2, 80057d4 <USBD_StdDevReq+0x48>)
 80057ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d2:	bf00      	nop
 80057d4:	08005829 	.word	0x08005829
 80057d8:	0800583d 	.word	0x0800583d
 80057dc:	08005847 	.word	0x08005847
 80057e0:	08005833 	.word	0x08005833
 80057e4:	08005847 	.word	0x08005847
 80057e8:	08005807 	.word	0x08005807
 80057ec:	080057fd 	.word	0x080057fd
 80057f0:	08005847 	.word	0x08005847
 80057f4:	0800581f 	.word	0x0800581f
 80057f8:	08005811 	.word	0x08005811
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80057fc:	6839      	ldr	r1, [r7, #0]
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f9ce 	bl	8005ba0 <USBD_GetDescriptor>
      break;
 8005804:	e024      	b.n	8005850 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8005806:	6839      	ldr	r1, [r7, #0]
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fb33 	bl	8005e74 <USBD_SetAddress>
      break;
 800580e:	e01f      	b.n	8005850 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8005810:	6839      	ldr	r1, [r7, #0]
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fb70 	bl	8005ef8 <USBD_SetConfig>
 8005818:	4603      	mov	r3, r0
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	e018      	b.n	8005850 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800581e:	6839      	ldr	r1, [r7, #0]
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fc0d 	bl	8006040 <USBD_GetConfig>
      break;
 8005826:	e013      	b.n	8005850 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8005828:	6839      	ldr	r1, [r7, #0]
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 fc3c 	bl	80060a8 <USBD_GetStatus>
      break;
 8005830:	e00e      	b.n	8005850 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8005832:	6839      	ldr	r1, [r7, #0]
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f000 fc6a 	bl	800610e <USBD_SetFeature>
      break;
 800583a:	e009      	b.n	8005850 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800583c:	6839      	ldr	r1, [r7, #0]
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fc79 	bl	8006136 <USBD_ClrFeature>
      break;
 8005844:	e004      	b.n	8005850 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8005846:	6839      	ldr	r1, [r7, #0]
 8005848:	6878      	ldr	r0, [r7, #4]
 800584a:	f000 fccf 	bl	80061ec <USBD_CtlError>
      break;
 800584e:	bf00      	nop
    }
    break;
 8005850:	e004      	b.n	800585c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8005852:	6839      	ldr	r1, [r7, #0]
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 fcc9 	bl	80061ec <USBD_CtlError>
    break;
 800585a:	bf00      	nop
  }

  return ret;
 800585c:	7bfb      	ldrb	r3, [r7, #15]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop

08005868 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b084      	sub	sp, #16
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005872:	2300      	movs	r3, #0
 8005874:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800587e:	2b20      	cmp	r3, #32
 8005880:	d003      	beq.n	800588a <USBD_StdItfReq+0x22>
 8005882:	2b40      	cmp	r3, #64	; 0x40
 8005884:	d001      	beq.n	800588a <USBD_StdItfReq+0x22>
 8005886:	2b00      	cmp	r3, #0
 8005888:	d12a      	bne.n	80058e0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005890:	3b01      	subs	r3, #1
 8005892:	2b02      	cmp	r3, #2
 8005894:	d81d      	bhi.n	80058d2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	889b      	ldrh	r3, [r3, #4]
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b01      	cmp	r3, #1
 800589e:	d813      	bhi.n	80058c8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	6839      	ldr	r1, [r7, #0]
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	4798      	blx	r3
 80058ae:	4603      	mov	r3, r0
 80058b0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	88db      	ldrh	r3, [r3, #6]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d110      	bne.n	80058dc <USBD_StdItfReq+0x74>
 80058ba:	7bfb      	ldrb	r3, [r7, #15]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10d      	bne.n	80058dc <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fd5e 	bl	8006382 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80058c6:	e009      	b.n	80058dc <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80058c8:	6839      	ldr	r1, [r7, #0]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f000 fc8e 	bl	80061ec <USBD_CtlError>
      break;
 80058d0:	e004      	b.n	80058dc <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80058d2:	6839      	ldr	r1, [r7, #0]
 80058d4:	6878      	ldr	r0, [r7, #4]
 80058d6:	f000 fc89 	bl	80061ec <USBD_CtlError>
      break;
 80058da:	e000      	b.n	80058de <USBD_StdItfReq+0x76>
      break;
 80058dc:	bf00      	nop
    }
    break;
 80058de:	e004      	b.n	80058ea <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 fc82 	bl	80061ec <USBD_CtlError>
    break;
 80058e8:	bf00      	nop
  }

  return ret;
 80058ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ec:	4618      	mov	r0, r3
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	889b      	ldrh	r3, [r3, #4]
 8005906:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005910:	2b20      	cmp	r3, #32
 8005912:	d004      	beq.n	800591e <USBD_StdEPReq+0x2a>
 8005914:	2b40      	cmp	r3, #64	; 0x40
 8005916:	d002      	beq.n	800591e <USBD_StdEPReq+0x2a>
 8005918:	2b00      	cmp	r3, #0
 800591a:	d00a      	beq.n	8005932 <USBD_StdEPReq+0x3e>
 800591c:	e135      	b.n	8005b8a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	4798      	blx	r3
 800592c:	4603      	mov	r3, r0
 800592e:	73fb      	strb	r3, [r7, #15]
    break;
 8005930:	e130      	b.n	8005b94 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d03e      	beq.n	80059b8 <USBD_StdEPReq+0xc4>
 800593a:	2b03      	cmp	r3, #3
 800593c:	d002      	beq.n	8005944 <USBD_StdEPReq+0x50>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d077      	beq.n	8005a32 <USBD_StdEPReq+0x13e>
 8005942:	e11c      	b.n	8005b7e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800594a:	2b02      	cmp	r3, #2
 800594c:	d002      	beq.n	8005954 <USBD_StdEPReq+0x60>
 800594e:	2b03      	cmp	r3, #3
 8005950:	d015      	beq.n	800597e <USBD_StdEPReq+0x8a>
 8005952:	e02b      	b.n	80059ac <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005954:	7bbb      	ldrb	r3, [r7, #14]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d00c      	beq.n	8005974 <USBD_StdEPReq+0x80>
 800595a:	7bbb      	ldrb	r3, [r7, #14]
 800595c:	2b80      	cmp	r3, #128	; 0x80
 800595e:	d009      	beq.n	8005974 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8005960:	7bbb      	ldrb	r3, [r7, #14]
 8005962:	4619      	mov	r1, r3
 8005964:	6878      	ldr	r0, [r7, #4]
 8005966:	f001 f929 	bl	8006bbc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800596a:	2180      	movs	r1, #128	; 0x80
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f001 f925 	bl	8006bbc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005972:	e020      	b.n	80059b6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 fc38 	bl	80061ec <USBD_CtlError>
        break;
 800597c:	e01b      	b.n	80059b6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	885b      	ldrh	r3, [r3, #2]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10e      	bne.n	80059a4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005986:	7bbb      	ldrb	r3, [r7, #14]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d00b      	beq.n	80059a4 <USBD_StdEPReq+0xb0>
 800598c:	7bbb      	ldrb	r3, [r7, #14]
 800598e:	2b80      	cmp	r3, #128	; 0x80
 8005990:	d008      	beq.n	80059a4 <USBD_StdEPReq+0xb0>
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	88db      	ldrh	r3, [r3, #6]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800599a:	7bbb      	ldrb	r3, [r7, #14]
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f001 f90c 	bl	8006bbc <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fcec 	bl	8006382 <USBD_CtlSendStatus>

        break;
 80059aa:	e004      	b.n	80059b6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80059ac:	6839      	ldr	r1, [r7, #0]
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f000 fc1c 	bl	80061ec <USBD_CtlError>
        break;
 80059b4:	bf00      	nop
      }
      break;
 80059b6:	e0e7      	b.n	8005b88 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059be:	2b02      	cmp	r3, #2
 80059c0:	d002      	beq.n	80059c8 <USBD_StdEPReq+0xd4>
 80059c2:	2b03      	cmp	r3, #3
 80059c4:	d015      	beq.n	80059f2 <USBD_StdEPReq+0xfe>
 80059c6:	e02d      	b.n	8005a24 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80059c8:	7bbb      	ldrb	r3, [r7, #14]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d00c      	beq.n	80059e8 <USBD_StdEPReq+0xf4>
 80059ce:	7bbb      	ldrb	r3, [r7, #14]
 80059d0:	2b80      	cmp	r3, #128	; 0x80
 80059d2:	d009      	beq.n	80059e8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80059d4:	7bbb      	ldrb	r3, [r7, #14]
 80059d6:	4619      	mov	r1, r3
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f001 f8ef 	bl	8006bbc <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059de:	2180      	movs	r1, #128	; 0x80
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f001 f8eb 	bl	8006bbc <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80059e6:	e023      	b.n	8005a30 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fbfe 	bl	80061ec <USBD_CtlError>
        break;
 80059f0:	e01e      	b.n	8005a30 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	885b      	ldrh	r3, [r3, #2]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d119      	bne.n	8005a2e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80059fa:	7bbb      	ldrb	r3, [r7, #14]
 80059fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d004      	beq.n	8005a0e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005a04:	7bbb      	ldrb	r3, [r7, #14]
 8005a06:	4619      	mov	r1, r3
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f001 f8f6 	bl	8006bfa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fcb7 	bl	8006382 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	6839      	ldr	r1, [r7, #0]
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	4798      	blx	r3
        }
        break;
 8005a22:	e004      	b.n	8005a2e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 fbe0 	bl	80061ec <USBD_CtlError>
        break;
 8005a2c:	e000      	b.n	8005a30 <USBD_StdEPReq+0x13c>
        break;
 8005a2e:	bf00      	nop
      }
      break;
 8005a30:	e0aa      	b.n	8005b88 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d002      	beq.n	8005a42 <USBD_StdEPReq+0x14e>
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d032      	beq.n	8005aa6 <USBD_StdEPReq+0x1b2>
 8005a40:	e097      	b.n	8005b72 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a42:	7bbb      	ldrb	r3, [r7, #14]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d007      	beq.n	8005a58 <USBD_StdEPReq+0x164>
 8005a48:	7bbb      	ldrb	r3, [r7, #14]
 8005a4a:	2b80      	cmp	r3, #128	; 0x80
 8005a4c:	d004      	beq.n	8005a58 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8005a4e:	6839      	ldr	r1, [r7, #0]
 8005a50:	6878      	ldr	r0, [r7, #4]
 8005a52:	f000 fbcb 	bl	80061ec <USBD_CtlError>
          break;
 8005a56:	e091      	b.n	8005b7c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	da0b      	bge.n	8005a78 <USBD_StdEPReq+0x184>
 8005a60:	7bbb      	ldrb	r3, [r7, #14]
 8005a62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005a66:	4613      	mov	r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	4413      	add	r3, r2
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	3310      	adds	r3, #16
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	4413      	add	r3, r2
 8005a74:	3304      	adds	r3, #4
 8005a76:	e00b      	b.n	8005a90 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005a7e:	4613      	mov	r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	4413      	add	r3, r2
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3304      	adds	r3, #4
 8005a90:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	2200      	movs	r2, #0
 8005a96:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	2202      	movs	r2, #2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fc15 	bl	80062ce <USBD_CtlSendData>
        break;
 8005aa4:	e06a      	b.n	8005b7c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8005aa6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	da11      	bge.n	8005ad2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	f003 020f 	and.w	r2, r3, #15
 8005ab4:	6879      	ldr	r1, [r7, #4]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	4413      	add	r3, r2
 8005abc:	009b      	lsls	r3, r3, #2
 8005abe:	440b      	add	r3, r1
 8005ac0:	3324      	adds	r3, #36	; 0x24
 8005ac2:	881b      	ldrh	r3, [r3, #0]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d117      	bne.n	8005af8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fb8e 	bl	80061ec <USBD_CtlError>
            break;
 8005ad0:	e054      	b.n	8005b7c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ad2:	7bbb      	ldrb	r3, [r7, #14]
 8005ad4:	f003 020f 	and.w	r2, r3, #15
 8005ad8:	6879      	ldr	r1, [r7, #4]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ae8:	881b      	ldrh	r3, [r3, #0]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005aee:	6839      	ldr	r1, [r7, #0]
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fb7b 	bl	80061ec <USBD_CtlError>
            break;
 8005af6:	e041      	b.n	8005b7c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005af8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	da0b      	bge.n	8005b18 <USBD_StdEPReq+0x224>
 8005b00:	7bbb      	ldrb	r3, [r7, #14]
 8005b02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b06:	4613      	mov	r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	4413      	add	r3, r2
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	3310      	adds	r3, #16
 8005b10:	687a      	ldr	r2, [r7, #4]
 8005b12:	4413      	add	r3, r2
 8005b14:	3304      	adds	r3, #4
 8005b16:	e00b      	b.n	8005b30 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8005b18:	7bbb      	ldrb	r3, [r7, #14]
 8005b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b1e:	4613      	mov	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4413      	add	r3, r2
 8005b24:	009b      	lsls	r3, r3, #2
 8005b26:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	3304      	adds	r3, #4
 8005b30:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005b32:	7bbb      	ldrb	r3, [r7, #14]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <USBD_StdEPReq+0x24a>
 8005b38:	7bbb      	ldrb	r3, [r7, #14]
 8005b3a:	2b80      	cmp	r3, #128	; 0x80
 8005b3c:	d103      	bne.n	8005b46 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8005b3e:	68bb      	ldr	r3, [r7, #8]
 8005b40:	2200      	movs	r2, #0
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	e00e      	b.n	8005b64 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005b46:	7bbb      	ldrb	r3, [r7, #14]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f001 f874 	bl	8006c38 <USBD_LL_IsStallEP>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d003      	beq.n	8005b5e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
 8005b5c:	e002      	b.n	8005b64 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	2200      	movs	r2, #0
 8005b62:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2202      	movs	r2, #2
 8005b68:	4619      	mov	r1, r3
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 fbaf 	bl	80062ce <USBD_CtlSendData>
          break;
 8005b70:	e004      	b.n	8005b7c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fb39 	bl	80061ec <USBD_CtlError>
        break;
 8005b7a:	bf00      	nop
      }
      break;
 8005b7c:	e004      	b.n	8005b88 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005b7e:	6839      	ldr	r1, [r7, #0]
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fb33 	bl	80061ec <USBD_CtlError>
      break;
 8005b86:	bf00      	nop
    }
    break;
 8005b88:	e004      	b.n	8005b94 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8005b8a:	6839      	ldr	r1, [r7, #0]
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 fb2d 	bl	80061ec <USBD_CtlError>
    break;
 8005b92:	bf00      	nop
  }

  return ret;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
	...

08005ba0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005baa:	2300      	movs	r3, #0
 8005bac:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005bae:	2300      	movs	r3, #0
 8005bb0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	885b      	ldrh	r3, [r3, #2]
 8005bba:	0a1b      	lsrs	r3, r3, #8
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	3b01      	subs	r3, #1
 8005bc0:	2b06      	cmp	r3, #6
 8005bc2:	f200 8128 	bhi.w	8005e16 <USBD_GetDescriptor+0x276>
 8005bc6:	a201      	add	r2, pc, #4	; (adr r2, 8005bcc <USBD_GetDescriptor+0x2c>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be9 	.word	0x08005be9
 8005bd0:	08005c01 	.word	0x08005c01
 8005bd4:	08005c41 	.word	0x08005c41
 8005bd8:	08005e17 	.word	0x08005e17
 8005bdc:	08005e17 	.word	0x08005e17
 8005be0:	08005db7 	.word	0x08005db7
 8005be4:	08005de3 	.word	0x08005de3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	7c12      	ldrb	r2, [r2, #16]
 8005bf4:	f107 0108 	add.w	r1, r7, #8
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4798      	blx	r3
 8005bfc:	60f8      	str	r0, [r7, #12]
    break;
 8005bfe:	e112      	b.n	8005e26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	7c1b      	ldrb	r3, [r3, #16]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10d      	bne.n	8005c24 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c10:	f107 0208 	add.w	r2, r7, #8
 8005c14:	4610      	mov	r0, r2
 8005c16:	4798      	blx	r3
 8005c18:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	3301      	adds	r3, #1
 8005c1e:	2202      	movs	r2, #2
 8005c20:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8005c22:	e100      	b.n	8005e26 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	f107 0208 	add.w	r2, r7, #8
 8005c30:	4610      	mov	r0, r2
 8005c32:	4798      	blx	r3
 8005c34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3301      	adds	r3, #1
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	701a      	strb	r2, [r3, #0]
    break;
 8005c3e:	e0f2      	b.n	8005e26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	885b      	ldrh	r3, [r3, #2]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	f200 80ac 	bhi.w	8005da4 <USBD_GetDescriptor+0x204>
 8005c4c:	a201      	add	r2, pc, #4	; (adr r2, 8005c54 <USBD_GetDescriptor+0xb4>)
 8005c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c52:	bf00      	nop
 8005c54:	08005c6d 	.word	0x08005c6d
 8005c58:	08005ca1 	.word	0x08005ca1
 8005c5c:	08005cd5 	.word	0x08005cd5
 8005c60:	08005d09 	.word	0x08005d09
 8005c64:	08005d3d 	.word	0x08005d3d
 8005c68:	08005d71 	.word	0x08005d71
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d00b      	beq.n	8005c90 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	7c12      	ldrb	r2, [r2, #16]
 8005c84:	f107 0108 	add.w	r1, r7, #8
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005c8e:	e091      	b.n	8005db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	6878      	ldr	r0, [r7, #4]
 8005c94:	f000 faaa 	bl	80061ec <USBD_CtlError>
        err++;
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	3301      	adds	r3, #1
 8005c9c:	72fb      	strb	r3, [r7, #11]
      break;
 8005c9e:	e089      	b.n	8005db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00b      	beq.n	8005cc4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	7c12      	ldrb	r2, [r2, #16]
 8005cb8:	f107 0108 	add.w	r1, r7, #8
 8005cbc:	4610      	mov	r0, r2
 8005cbe:	4798      	blx	r3
 8005cc0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cc2:	e077      	b.n	8005db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005cc4:	6839      	ldr	r1, [r7, #0]
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 fa90 	bl	80061ec <USBD_CtlError>
        err++;
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	72fb      	strb	r3, [r7, #11]
      break;
 8005cd2:	e06f      	b.n	8005db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00b      	beq.n	8005cf8 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	7c12      	ldrb	r2, [r2, #16]
 8005cec:	f107 0108 	add.w	r1, r7, #8
 8005cf0:	4610      	mov	r0, r2
 8005cf2:	4798      	blx	r3
 8005cf4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005cf6:	e05d      	b.n	8005db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fa76 	bl	80061ec <USBD_CtlError>
        err++;
 8005d00:	7afb      	ldrb	r3, [r7, #11]
 8005d02:	3301      	adds	r3, #1
 8005d04:	72fb      	strb	r3, [r7, #11]
      break;
 8005d06:	e055      	b.n	8005db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d00b      	beq.n	8005d2c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	7c12      	ldrb	r2, [r2, #16]
 8005d20:	f107 0108 	add.w	r1, r7, #8
 8005d24:	4610      	mov	r0, r2
 8005d26:	4798      	blx	r3
 8005d28:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d2a:	e043      	b.n	8005db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d2c:	6839      	ldr	r1, [r7, #0]
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fa5c 	bl	80061ec <USBD_CtlError>
        err++;
 8005d34:	7afb      	ldrb	r3, [r7, #11]
 8005d36:	3301      	adds	r3, #1
 8005d38:	72fb      	strb	r3, [r7, #11]
      break;
 8005d3a:	e03b      	b.n	8005db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d42:	695b      	ldr	r3, [r3, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00b      	beq.n	8005d60 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	7c12      	ldrb	r2, [r2, #16]
 8005d54:	f107 0108 	add.w	r1, r7, #8
 8005d58:	4610      	mov	r0, r2
 8005d5a:	4798      	blx	r3
 8005d5c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d5e:	e029      	b.n	8005db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d60:	6839      	ldr	r1, [r7, #0]
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fa42 	bl	80061ec <USBD_CtlError>
        err++;
 8005d68:	7afb      	ldrb	r3, [r7, #11]
 8005d6a:	3301      	adds	r3, #1
 8005d6c:	72fb      	strb	r3, [r7, #11]
      break;
 8005d6e:	e021      	b.n	8005db4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d76:	699b      	ldr	r3, [r3, #24]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	7c12      	ldrb	r2, [r2, #16]
 8005d88:	f107 0108 	add.w	r1, r7, #8
 8005d8c:	4610      	mov	r0, r2
 8005d8e:	4798      	blx	r3
 8005d90:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d92:	e00f      	b.n	8005db4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005d94:	6839      	ldr	r1, [r7, #0]
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 fa28 	bl	80061ec <USBD_CtlError>
        err++;
 8005d9c:	7afb      	ldrb	r3, [r7, #11]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	72fb      	strb	r3, [r7, #11]
      break;
 8005da2:	e007      	b.n	8005db4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005da4:	6839      	ldr	r1, [r7, #0]
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa20 	bl	80061ec <USBD_CtlError>
      err++;
 8005dac:	7afb      	ldrb	r3, [r7, #11]
 8005dae:	3301      	adds	r3, #1
 8005db0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005db2:	bf00      	nop
    }
    break;
 8005db4:	e037      	b.n	8005e26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	7c1b      	ldrb	r3, [r3, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d109      	bne.n	8005dd2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dc6:	f107 0208 	add.w	r2, r7, #8
 8005dca:	4610      	mov	r0, r2
 8005dcc:	4798      	blx	r3
 8005dce:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005dd0:	e029      	b.n	8005e26 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f000 fa09 	bl	80061ec <USBD_CtlError>
      err++;
 8005dda:	7afb      	ldrb	r3, [r7, #11]
 8005ddc:	3301      	adds	r3, #1
 8005dde:	72fb      	strb	r3, [r7, #11]
    break;
 8005de0:	e021      	b.n	8005e26 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	7c1b      	ldrb	r3, [r3, #16]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10d      	bne.n	8005e06 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df2:	f107 0208 	add.w	r2, r7, #8
 8005df6:	4610      	mov	r0, r2
 8005df8:	4798      	blx	r3
 8005dfa:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	2207      	movs	r2, #7
 8005e02:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005e04:	e00f      	b.n	8005e26 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f9ef 	bl	80061ec <USBD_CtlError>
      err++;
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
 8005e10:	3301      	adds	r3, #1
 8005e12:	72fb      	strb	r3, [r7, #11]
    break;
 8005e14:	e007      	b.n	8005e26 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 f9e7 	bl	80061ec <USBD_CtlError>
    err++;
 8005e1e:	7afb      	ldrb	r3, [r7, #11]
 8005e20:	3301      	adds	r3, #1
 8005e22:	72fb      	strb	r3, [r7, #11]
    break;
 8005e24:	bf00      	nop
  }

  if (err != 0U)
 8005e26:	7afb      	ldrb	r3, [r7, #11]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d11e      	bne.n	8005e6a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	88db      	ldrh	r3, [r3, #6]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d016      	beq.n	8005e62 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8005e34:	893b      	ldrh	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00e      	beq.n	8005e58 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	88da      	ldrh	r2, [r3, #6]
 8005e3e:	893b      	ldrh	r3, [r7, #8]
 8005e40:	4293      	cmp	r3, r2
 8005e42:	bf28      	it	cs
 8005e44:	4613      	movcs	r3, r2
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8005e4a:	893b      	ldrh	r3, [r7, #8]
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	68f9      	ldr	r1, [r7, #12]
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fa3c 	bl	80062ce <USBD_CtlSendData>
 8005e56:	e009      	b.n	8005e6c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f9c6 	bl	80061ec <USBD_CtlError>
 8005e60:	e004      	b.n	8005e6c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 fa8d 	bl	8006382 <USBD_CtlSendStatus>
 8005e68:	e000      	b.n	8005e6c <USBD_GetDescriptor+0x2cc>
    return;
 8005e6a:	bf00      	nop
    }
  }
}
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop

08005e74 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e74:	b580      	push	{r7, lr}
 8005e76:	b084      	sub	sp, #16
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
 8005e7c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	889b      	ldrh	r3, [r3, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d130      	bne.n	8005ee8 <USBD_SetAddress+0x74>
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	88db      	ldrh	r3, [r3, #6]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d12c      	bne.n	8005ee8 <USBD_SetAddress+0x74>
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	885b      	ldrh	r3, [r3, #2]
 8005e92:	2b7f      	cmp	r3, #127	; 0x7f
 8005e94:	d828      	bhi.n	8005ee8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	885b      	ldrh	r3, [r3, #2]
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ea0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea8:	2b03      	cmp	r3, #3
 8005eaa:	d104      	bne.n	8005eb6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005eac:	6839      	ldr	r1, [r7, #0]
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f99c 	bl	80061ec <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb4:	e01c      	b.n	8005ef0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	7bfa      	ldrb	r2, [r7, #15]
 8005eba:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
 8005ec0:	4619      	mov	r1, r3
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fee4 	bl	8006c90 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	f000 fa5a 	bl	8006382 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005ece:	7bfb      	ldrb	r3, [r7, #15]
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d004      	beq.n	8005ede <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005edc:	e008      	b.n	8005ef0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee6:	e003      	b.n	8005ef0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005ee8:	6839      	ldr	r1, [r7, #0]
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 f97e 	bl	80061ec <USBD_CtlError>
  }
}
 8005ef0:	bf00      	nop
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b084      	sub	sp, #16
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	885b      	ldrh	r3, [r3, #2]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	4b4b      	ldr	r3, [pc, #300]	; (800603c <USBD_SetConfig+0x144>)
 8005f0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005f10:	4b4a      	ldr	r3, [pc, #296]	; (800603c <USBD_SetConfig+0x144>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d905      	bls.n	8005f24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 f966 	bl	80061ec <USBD_CtlError>
    return USBD_FAIL;
 8005f20:	2303      	movs	r3, #3
 8005f22:	e087      	b.n	8006034 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f2a:	2b02      	cmp	r3, #2
 8005f2c:	d002      	beq.n	8005f34 <USBD_SetConfig+0x3c>
 8005f2e:	2b03      	cmp	r3, #3
 8005f30:	d025      	beq.n	8005f7e <USBD_SetConfig+0x86>
 8005f32:	e071      	b.n	8006018 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8005f34:	4b41      	ldr	r3, [pc, #260]	; (800603c <USBD_SetConfig+0x144>)
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01c      	beq.n	8005f76 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8005f3c:	4b3f      	ldr	r3, [pc, #252]	; (800603c <USBD_SetConfig+0x144>)
 8005f3e:	781b      	ldrb	r3, [r3, #0]
 8005f40:	461a      	mov	r2, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005f46:	4b3d      	ldr	r3, [pc, #244]	; (800603c <USBD_SetConfig+0x144>)
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f7ff f9a7 	bl	80052a0 <USBD_SetClassConfig>
 8005f52:	4603      	mov	r3, r0
 8005f54:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8005f56:	7bfb      	ldrb	r3, [r7, #15]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d004      	beq.n	8005f66 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005f5c:	6839      	ldr	r1, [r7, #0]
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f000 f944 	bl	80061ec <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005f64:	e065      	b.n	8006032 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8005f66:	6878      	ldr	r0, [r7, #4]
 8005f68:	f000 fa0b 	bl	8006382 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2203      	movs	r2, #3
 8005f70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005f74:	e05d      	b.n	8006032 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa03 	bl	8006382 <USBD_CtlSendStatus>
    break;
 8005f7c:	e059      	b.n	8006032 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005f7e:	4b2f      	ldr	r3, [pc, #188]	; (800603c <USBD_SetConfig+0x144>)
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d112      	bne.n	8005fac <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2202      	movs	r2, #2
 8005f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005f8e:	4b2b      	ldr	r3, [pc, #172]	; (800603c <USBD_SetConfig+0x144>)
 8005f90:	781b      	ldrb	r3, [r3, #0]
 8005f92:	461a      	mov	r2, r3
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005f98:	4b28      	ldr	r3, [pc, #160]	; (800603c <USBD_SetConfig+0x144>)
 8005f9a:	781b      	ldrb	r3, [r3, #0]
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f7ff f99a 	bl	80052d8 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f9ec 	bl	8006382 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005faa:	e042      	b.n	8006032 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005fac:	4b23      	ldr	r3, [pc, #140]	; (800603c <USBD_SetConfig+0x144>)
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	461a      	mov	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d02a      	beq.n	8006010 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f7ff f988 	bl	80052d8 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8005fc8:	4b1c      	ldr	r3, [pc, #112]	; (800603c <USBD_SetConfig+0x144>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	461a      	mov	r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005fd2:	4b1a      	ldr	r3, [pc, #104]	; (800603c <USBD_SetConfig+0x144>)
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff f961 	bl	80052a0 <USBD_SetClassConfig>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005fe2:	7bfb      	ldrb	r3, [r7, #15]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00f      	beq.n	8006008 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 f8fe 	bl	80061ec <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff f96d 	bl	80052d8 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2202      	movs	r2, #2
 8006002:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8006006:	e014      	b.n	8006032 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f000 f9ba 	bl	8006382 <USBD_CtlSendStatus>
    break;
 800600e:	e010      	b.n	8006032 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f000 f9b6 	bl	8006382 <USBD_CtlSendStatus>
    break;
 8006016:	e00c      	b.n	8006032 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8006018:	6839      	ldr	r1, [r7, #0]
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f8e6 	bl	80061ec <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006020:	4b06      	ldr	r3, [pc, #24]	; (800603c <USBD_SetConfig+0x144>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	4619      	mov	r1, r3
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f7ff f956 	bl	80052d8 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800602c:	2303      	movs	r3, #3
 800602e:	73fb      	strb	r3, [r7, #15]
    break;
 8006030:	bf00      	nop
  }

  return ret;
 8006032:	7bfb      	ldrb	r3, [r7, #15]
}
 8006034:	4618      	mov	r0, r3
 8006036:	3710      	adds	r7, #16
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}
 800603c:	20000208 	.word	0x20000208

08006040 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b082      	sub	sp, #8
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	88db      	ldrh	r3, [r3, #6]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d004      	beq.n	800605c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006052:	6839      	ldr	r1, [r7, #0]
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f8c9 	bl	80061ec <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800605a:	e021      	b.n	80060a0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006062:	2b01      	cmp	r3, #1
 8006064:	db17      	blt.n	8006096 <USBD_GetConfig+0x56>
 8006066:	2b02      	cmp	r3, #2
 8006068:	dd02      	ble.n	8006070 <USBD_GetConfig+0x30>
 800606a:	2b03      	cmp	r3, #3
 800606c:	d00b      	beq.n	8006086 <USBD_GetConfig+0x46>
 800606e:	e012      	b.n	8006096 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	3308      	adds	r3, #8
 800607a:	2201      	movs	r2, #1
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f925 	bl	80062ce <USBD_CtlSendData>
      break;
 8006084:	e00c      	b.n	80060a0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	3304      	adds	r3, #4
 800608a:	2201      	movs	r2, #1
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f000 f91d 	bl	80062ce <USBD_CtlSendData>
      break;
 8006094:	e004      	b.n	80060a0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8006096:	6839      	ldr	r1, [r7, #0]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f8a7 	bl	80061ec <USBD_CtlError>
      break;
 800609e:	bf00      	nop
}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b082      	sub	sp, #8
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
 80060b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060b8:	3b01      	subs	r3, #1
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d81e      	bhi.n	80060fc <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	88db      	ldrh	r3, [r3, #6]
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d004      	beq.n	80060d0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 f88f 	bl	80061ec <USBD_CtlError>
      break;
 80060ce:	e01a      	b.n	8006106 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d005      	beq.n	80060ec <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f043 0202 	orr.w	r2, r3, #2
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	330c      	adds	r3, #12
 80060f0:	2202      	movs	r2, #2
 80060f2:	4619      	mov	r1, r3
 80060f4:	6878      	ldr	r0, [r7, #4]
 80060f6:	f000 f8ea 	bl	80062ce <USBD_CtlSendData>
    break;
 80060fa:	e004      	b.n	8006106 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80060fc:	6839      	ldr	r1, [r7, #0]
 80060fe:	6878      	ldr	r0, [r7, #4]
 8006100:	f000 f874 	bl	80061ec <USBD_CtlError>
    break;
 8006104:	bf00      	nop
  }
}
 8006106:	bf00      	nop
 8006108:	3708      	adds	r7, #8
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}

0800610e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
 8006116:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	885b      	ldrh	r3, [r3, #2]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d106      	bne.n	800612e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f000 f92a 	bl	8006382 <USBD_CtlSendStatus>
  }
}
 800612e:	bf00      	nop
 8006130:	3708      	adds	r7, #8
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b082      	sub	sp, #8
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006146:	3b01      	subs	r3, #1
 8006148:	2b02      	cmp	r3, #2
 800614a:	d80b      	bhi.n	8006164 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	885b      	ldrh	r3, [r3, #2]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d10c      	bne.n	800616e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2200      	movs	r2, #0
 8006158:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f910 	bl	8006382 <USBD_CtlSendStatus>
      }
      break;
 8006162:	e004      	b.n	800616e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f840 	bl	80061ec <USBD_CtlError>
      break;
 800616c:	e000      	b.n	8006170 <USBD_ClrFeature+0x3a>
      break;
 800616e:	bf00      	nop
  }
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	781a      	ldrb	r2, [r3, #0]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	3301      	adds	r3, #1
 8006192:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	781a      	ldrb	r2, [r3, #0]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80061a2:	68f8      	ldr	r0, [r7, #12]
 80061a4:	f7ff fad3 	bl	800574e <SWAPBYTE>
 80061a8:	4603      	mov	r3, r0
 80061aa:	461a      	mov	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	3301      	adds	r3, #1
 80061b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80061bc:	68f8      	ldr	r0, [r7, #12]
 80061be:	f7ff fac6 	bl	800574e <SWAPBYTE>
 80061c2:	4603      	mov	r3, r0
 80061c4:	461a      	mov	r2, r3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3301      	adds	r3, #1
 80061ce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	3301      	adds	r3, #1
 80061d4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f7ff fab9 	bl	800574e <SWAPBYTE>
 80061dc:	4603      	mov	r3, r0
 80061de:	461a      	mov	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	80da      	strh	r2, [r3, #6]
}
 80061e4:	bf00      	nop
 80061e6:	3710      	adds	r7, #16
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80061f6:	2180      	movs	r1, #128	; 0x80
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 fcdf 	bl	8006bbc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80061fe:	2100      	movs	r1, #0
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fcdb 	bl	8006bbc <USBD_LL_StallEP>
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b086      	sub	sp, #24
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d036      	beq.n	8006292 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006228:	6938      	ldr	r0, [r7, #16]
 800622a:	f000 f836 	bl	800629a <USBD_GetLen>
 800622e:	4603      	mov	r3, r0
 8006230:	3301      	adds	r3, #1
 8006232:	b29b      	uxth	r3, r3
 8006234:	005b      	lsls	r3, r3, #1
 8006236:	b29a      	uxth	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800623c:	7dfb      	ldrb	r3, [r7, #23]
 800623e:	68ba      	ldr	r2, [r7, #8]
 8006240:	4413      	add	r3, r2
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	7812      	ldrb	r2, [r2, #0]
 8006246:	701a      	strb	r2, [r3, #0]
  idx++;
 8006248:	7dfb      	ldrb	r3, [r7, #23]
 800624a:	3301      	adds	r3, #1
 800624c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
 8006250:	68ba      	ldr	r2, [r7, #8]
 8006252:	4413      	add	r3, r2
 8006254:	2203      	movs	r2, #3
 8006256:	701a      	strb	r2, [r3, #0]
  idx++;
 8006258:	7dfb      	ldrb	r3, [r7, #23]
 800625a:	3301      	adds	r3, #1
 800625c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800625e:	e013      	b.n	8006288 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006260:	7dfb      	ldrb	r3, [r7, #23]
 8006262:	68ba      	ldr	r2, [r7, #8]
 8006264:	4413      	add	r3, r2
 8006266:	693a      	ldr	r2, [r7, #16]
 8006268:	7812      	ldrb	r2, [r2, #0]
 800626a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	3301      	adds	r3, #1
 8006270:	613b      	str	r3, [r7, #16]
    idx++;
 8006272:	7dfb      	ldrb	r3, [r7, #23]
 8006274:	3301      	adds	r3, #1
 8006276:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006278:	7dfb      	ldrb	r3, [r7, #23]
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	4413      	add	r3, r2
 800627e:	2200      	movs	r2, #0
 8006280:	701a      	strb	r2, [r3, #0]
    idx++;
 8006282:	7dfb      	ldrb	r3, [r7, #23]
 8006284:	3301      	adds	r3, #1
 8006286:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e7      	bne.n	8006260 <USBD_GetString+0x52>
 8006290:	e000      	b.n	8006294 <USBD_GetString+0x86>
    return;
 8006292:	bf00      	nop
  }
}
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800629a:	b480      	push	{r7}
 800629c:	b085      	sub	sp, #20
 800629e:	af00      	add	r7, sp, #0
 80062a0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80062a2:	2300      	movs	r3, #0
 80062a4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80062aa:	e005      	b.n	80062b8 <USBD_GetLen+0x1e>
  {
    len++;
 80062ac:	7bfb      	ldrb	r3, [r7, #15]
 80062ae:	3301      	adds	r3, #1
 80062b0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	3301      	adds	r3, #1
 80062b6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d1f5      	bne.n	80062ac <USBD_GetLen+0x12>
  }

  return len;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2202      	movs	r2, #2
 80062de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	687a      	ldr	r2, [r7, #4]
 80062ec:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	2100      	movs	r1, #0
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fcea 	bl	8006cce <USBD_LL_Transmit>

  return USBD_OK;
 80062fa:	2300      	movs	r3, #0
}
 80062fc:	4618      	mov	r0, r3
 80062fe:	3710      	adds	r7, #16
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b084      	sub	sp, #16
 8006308:	af00      	add	r7, sp, #0
 800630a:	60f8      	str	r0, [r7, #12]
 800630c:	60b9      	str	r1, [r7, #8]
 800630e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	68ba      	ldr	r2, [r7, #8]
 8006314:	2100      	movs	r1, #0
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f000 fcd9 	bl	8006cce <USBD_LL_Transmit>

  return USBD_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3710      	adds	r7, #16
 8006322:	46bd      	mov	sp, r7
 8006324:	bd80      	pop	{r7, pc}

08006326 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006326:	b580      	push	{r7, lr}
 8006328:	b084      	sub	sp, #16
 800632a:	af00      	add	r7, sp, #0
 800632c:	60f8      	str	r0, [r7, #12]
 800632e:	60b9      	str	r1, [r7, #8]
 8006330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2203      	movs	r2, #3
 8006336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	2100      	movs	r1, #0
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fcdd 	bl	8006d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006356:	2300      	movs	r3, #0
}
 8006358:	4618      	mov	r0, r3
 800635a:	3710      	adds	r7, #16
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
 8006366:	60f8      	str	r0, [r7, #12]
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68ba      	ldr	r2, [r7, #8]
 8006370:	2100      	movs	r1, #0
 8006372:	68f8      	ldr	r0, [r7, #12]
 8006374:	f000 fccc 	bl	8006d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006378:	2300      	movs	r3, #0
}
 800637a:	4618      	mov	r0, r3
 800637c:	3710      	adds	r7, #16
 800637e:	46bd      	mov	sp, r7
 8006380:	bd80      	pop	{r7, pc}

08006382 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b082      	sub	sp, #8
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2204      	movs	r2, #4
 800638e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006392:	2300      	movs	r3, #0
 8006394:	2200      	movs	r2, #0
 8006396:	2100      	movs	r1, #0
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fc98 	bl	8006cce <USBD_LL_Transmit>

  return USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2205      	movs	r2, #5
 80063b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80063b8:	2300      	movs	r3, #0
 80063ba:	2200      	movs	r2, #0
 80063bc:	2100      	movs	r1, #0
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fca6 	bl	8006d10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
	...

080063d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80063d4:	2200      	movs	r2, #0
 80063d6:	4912      	ldr	r1, [pc, #72]	; (8006420 <MX_USB_DEVICE_Init+0x50>)
 80063d8:	4812      	ldr	r0, [pc, #72]	; (8006424 <MX_USB_DEVICE_Init+0x54>)
 80063da:	f7fe fef3 	bl	80051c4 <USBD_Init>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d001      	beq.n	80063e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80063e4:	f7fa f9a8 	bl	8000738 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80063e8:	490f      	ldr	r1, [pc, #60]	; (8006428 <MX_USB_DEVICE_Init+0x58>)
 80063ea:	480e      	ldr	r0, [pc, #56]	; (8006424 <MX_USB_DEVICE_Init+0x54>)
 80063ec:	f7fe ff20 	bl	8005230 <USBD_RegisterClass>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d001      	beq.n	80063fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80063f6:	f7fa f99f 	bl	8000738 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80063fa:	490c      	ldr	r1, [pc, #48]	; (800642c <MX_USB_DEVICE_Init+0x5c>)
 80063fc:	4809      	ldr	r0, [pc, #36]	; (8006424 <MX_USB_DEVICE_Init+0x54>)
 80063fe:	f7fe fe45 	bl	800508c <USBD_CDC_RegisterInterface>
 8006402:	4603      	mov	r3, r0
 8006404:	2b00      	cmp	r3, #0
 8006406:	d001      	beq.n	800640c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006408:	f7fa f996 	bl	8000738 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800640c:	4805      	ldr	r0, [pc, #20]	; (8006424 <MX_USB_DEVICE_Init+0x54>)
 800640e:	f7fe ff30 	bl	8005272 <USBD_Start>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006418:	f7fa f98e 	bl	8000738 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800641c:	bf00      	nop
 800641e:	bd80      	pop	{r7, pc}
 8006420:	20000134 	.word	0x20000134
 8006424:	20000260 	.word	0x20000260
 8006428:	2000001c 	.word	0x2000001c
 800642c:	20000120 	.word	0x20000120

08006430 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006434:	2200      	movs	r2, #0
 8006436:	4905      	ldr	r1, [pc, #20]	; (800644c <CDC_Init_FS+0x1c>)
 8006438:	4805      	ldr	r0, [pc, #20]	; (8006450 <CDC_Init_FS+0x20>)
 800643a:	f7fe fe3c 	bl	80050b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800643e:	4905      	ldr	r1, [pc, #20]	; (8006454 <CDC_Init_FS+0x24>)
 8006440:	4803      	ldr	r0, [pc, #12]	; (8006450 <CDC_Init_FS+0x20>)
 8006442:	f7fe fe51 	bl	80050e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006446:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006448:	4618      	mov	r0, r3
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000d30 	.word	0x20000d30
 8006450:	20000260 	.word	0x20000260
 8006454:	20000530 	.word	0x20000530

08006458 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006458:	b480      	push	{r7}
 800645a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800645c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800645e:	4618      	mov	r0, r3
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	4603      	mov	r3, r0
 8006470:	6039      	str	r1, [r7, #0]
 8006472:	71fb      	strb	r3, [r7, #7]
 8006474:	4613      	mov	r3, r2
 8006476:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	2b23      	cmp	r3, #35	; 0x23
 800647c:	d84a      	bhi.n	8006514 <CDC_Control_FS+0xac>
 800647e:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <CDC_Control_FS+0x1c>)
 8006480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006484:	08006515 	.word	0x08006515
 8006488:	08006515 	.word	0x08006515
 800648c:	08006515 	.word	0x08006515
 8006490:	08006515 	.word	0x08006515
 8006494:	08006515 	.word	0x08006515
 8006498:	08006515 	.word	0x08006515
 800649c:	08006515 	.word	0x08006515
 80064a0:	08006515 	.word	0x08006515
 80064a4:	08006515 	.word	0x08006515
 80064a8:	08006515 	.word	0x08006515
 80064ac:	08006515 	.word	0x08006515
 80064b0:	08006515 	.word	0x08006515
 80064b4:	08006515 	.word	0x08006515
 80064b8:	08006515 	.word	0x08006515
 80064bc:	08006515 	.word	0x08006515
 80064c0:	08006515 	.word	0x08006515
 80064c4:	08006515 	.word	0x08006515
 80064c8:	08006515 	.word	0x08006515
 80064cc:	08006515 	.word	0x08006515
 80064d0:	08006515 	.word	0x08006515
 80064d4:	08006515 	.word	0x08006515
 80064d8:	08006515 	.word	0x08006515
 80064dc:	08006515 	.word	0x08006515
 80064e0:	08006515 	.word	0x08006515
 80064e4:	08006515 	.word	0x08006515
 80064e8:	08006515 	.word	0x08006515
 80064ec:	08006515 	.word	0x08006515
 80064f0:	08006515 	.word	0x08006515
 80064f4:	08006515 	.word	0x08006515
 80064f8:	08006515 	.word	0x08006515
 80064fc:	08006515 	.word	0x08006515
 8006500:	08006515 	.word	0x08006515
 8006504:	08006515 	.word	0x08006515
 8006508:	08006515 	.word	0x08006515
 800650c:	08006515 	.word	0x08006515
 8006510:	08006515 	.word	0x08006515
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006514:	bf00      	nop
  }

  return (USBD_OK);
 8006516:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800652e:	6879      	ldr	r1, [r7, #4]
 8006530:	4805      	ldr	r0, [pc, #20]	; (8006548 <CDC_Receive_FS+0x24>)
 8006532:	f7fe fdd9 	bl	80050e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006536:	4804      	ldr	r0, [pc, #16]	; (8006548 <CDC_Receive_FS+0x24>)
 8006538:	f7fe fe1a 	bl	8005170 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800653c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000260 	.word	0x20000260

0800654c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b084      	sub	sp, #16
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	460b      	mov	r3, r1
 8006556:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006558:	2300      	movs	r3, #0
 800655a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800655c:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <CDC_Transmit_FS+0x48>)
 800655e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006562:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800656a:	2b00      	cmp	r3, #0
 800656c:	d001      	beq.n	8006572 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800656e:	2301      	movs	r3, #1
 8006570:	e00b      	b.n	800658a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006572:	887b      	ldrh	r3, [r7, #2]
 8006574:	461a      	mov	r2, r3
 8006576:	6879      	ldr	r1, [r7, #4]
 8006578:	4806      	ldr	r0, [pc, #24]	; (8006594 <CDC_Transmit_FS+0x48>)
 800657a:	f7fe fd9c 	bl	80050b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800657e:	4805      	ldr	r0, [pc, #20]	; (8006594 <CDC_Transmit_FS+0x48>)
 8006580:	f7fe fdc6 	bl	8005110 <USBD_CDC_TransmitPacket>
 8006584:	4603      	mov	r3, r0
 8006586:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000260 	.word	0x20000260

08006598 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	4613      	mov	r3, r2
 80065a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80065a6:	2300      	movs	r3, #0
 80065a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80065aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	371c      	adds	r7, #28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
	...

080065bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065bc:	b480      	push	{r7}
 80065be:	b083      	sub	sp, #12
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	4603      	mov	r3, r0
 80065c4:	6039      	str	r1, [r7, #0]
 80065c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2212      	movs	r2, #18
 80065cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80065ce:	4b03      	ldr	r3, [pc, #12]	; (80065dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr
 80065dc:	20000150 	.word	0x20000150

080065e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80065e0:	b480      	push	{r7}
 80065e2:	b083      	sub	sp, #12
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	4603      	mov	r3, r0
 80065e8:	6039      	str	r1, [r7, #0]
 80065ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	2204      	movs	r2, #4
 80065f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80065f2:	4b03      	ldr	r3, [pc, #12]	; (8006600 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000164 	.word	0x20000164

08006604 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
 800660a:	4603      	mov	r3, r0
 800660c:	6039      	str	r1, [r7, #0]
 800660e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006610:	79fb      	ldrb	r3, [r7, #7]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d105      	bne.n	8006622 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	4907      	ldr	r1, [pc, #28]	; (8006638 <USBD_FS_ProductStrDescriptor+0x34>)
 800661a:	4808      	ldr	r0, [pc, #32]	; (800663c <USBD_FS_ProductStrDescriptor+0x38>)
 800661c:	f7ff fdf7 	bl	800620e <USBD_GetString>
 8006620:	e004      	b.n	800662c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	4904      	ldr	r1, [pc, #16]	; (8006638 <USBD_FS_ProductStrDescriptor+0x34>)
 8006626:	4805      	ldr	r0, [pc, #20]	; (800663c <USBD_FS_ProductStrDescriptor+0x38>)
 8006628:	f7ff fdf1 	bl	800620e <USBD_GetString>
  }
  return USBD_StrDesc;
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20001530 	.word	0x20001530
 800663c:	0800768c 	.word	0x0800768c

08006640 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	b082      	sub	sp, #8
 8006644:	af00      	add	r7, sp, #0
 8006646:	4603      	mov	r3, r0
 8006648:	6039      	str	r1, [r7, #0]
 800664a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800664c:	683a      	ldr	r2, [r7, #0]
 800664e:	4904      	ldr	r1, [pc, #16]	; (8006660 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006650:	4804      	ldr	r0, [pc, #16]	; (8006664 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006652:	f7ff fddc 	bl	800620e <USBD_GetString>
  return USBD_StrDesc;
 8006656:	4b02      	ldr	r3, [pc, #8]	; (8006660 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	20001530 	.word	0x20001530
 8006664:	080076a4 	.word	0x080076a4

08006668 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b082      	sub	sp, #8
 800666c:	af00      	add	r7, sp, #0
 800666e:	4603      	mov	r3, r0
 8006670:	6039      	str	r1, [r7, #0]
 8006672:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	221a      	movs	r2, #26
 8006678:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800667a:	f000 f843 	bl	8006704 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800667e:	4b02      	ldr	r3, [pc, #8]	; (8006688 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006680:	4618      	mov	r0, r3
 8006682:	3708      	adds	r7, #8
 8006684:	46bd      	mov	sp, r7
 8006686:	bd80      	pop	{r7, pc}
 8006688:	20000168 	.word	0x20000168

0800668c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b082      	sub	sp, #8
 8006690:	af00      	add	r7, sp, #0
 8006692:	4603      	mov	r3, r0
 8006694:	6039      	str	r1, [r7, #0]
 8006696:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006698:	79fb      	ldrb	r3, [r7, #7]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d105      	bne.n	80066aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800669e:	683a      	ldr	r2, [r7, #0]
 80066a0:	4907      	ldr	r1, [pc, #28]	; (80066c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066a2:	4808      	ldr	r0, [pc, #32]	; (80066c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066a4:	f7ff fdb3 	bl	800620e <USBD_GetString>
 80066a8:	e004      	b.n	80066b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80066aa:	683a      	ldr	r2, [r7, #0]
 80066ac:	4904      	ldr	r1, [pc, #16]	; (80066c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80066ae:	4805      	ldr	r0, [pc, #20]	; (80066c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80066b0:	f7ff fdad 	bl	800620e <USBD_GetString>
  }
  return USBD_StrDesc;
 80066b4:	4b02      	ldr	r3, [pc, #8]	; (80066c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3708      	adds	r7, #8
 80066ba:	46bd      	mov	sp, r7
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	20001530 	.word	0x20001530
 80066c4:	080076b8 	.word	0x080076b8

080066c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	4603      	mov	r3, r0
 80066d0:	6039      	str	r1, [r7, #0]
 80066d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80066d4:	79fb      	ldrb	r3, [r7, #7]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d105      	bne.n	80066e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	4907      	ldr	r1, [pc, #28]	; (80066fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066de:	4808      	ldr	r0, [pc, #32]	; (8006700 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066e0:	f7ff fd95 	bl	800620e <USBD_GetString>
 80066e4:	e004      	b.n	80066f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	4904      	ldr	r1, [pc, #16]	; (80066fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80066ea:	4805      	ldr	r0, [pc, #20]	; (8006700 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80066ec:	f7ff fd8f 	bl	800620e <USBD_GetString>
  }
  return USBD_StrDesc;
 80066f0:	4b02      	ldr	r3, [pc, #8]	; (80066fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	3708      	adds	r7, #8
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20001530 	.word	0x20001530
 8006700:	080076c4 	.word	0x080076c4

08006704 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800670a:	4b0f      	ldr	r3, [pc, #60]	; (8006748 <Get_SerialNum+0x44>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006710:	4b0e      	ldr	r3, [pc, #56]	; (800674c <Get_SerialNum+0x48>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006716:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <Get_SerialNum+0x4c>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	4413      	add	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d009      	beq.n	800673e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800672a:	2208      	movs	r2, #8
 800672c:	4909      	ldr	r1, [pc, #36]	; (8006754 <Get_SerialNum+0x50>)
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 f814 	bl	800675c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006734:	2204      	movs	r2, #4
 8006736:	4908      	ldr	r1, [pc, #32]	; (8006758 <Get_SerialNum+0x54>)
 8006738:	68b8      	ldr	r0, [r7, #8]
 800673a:	f000 f80f 	bl	800675c <IntToUnicode>
  }
}
 800673e:	bf00      	nop
 8006740:	3710      	adds	r7, #16
 8006742:	46bd      	mov	sp, r7
 8006744:	bd80      	pop	{r7, pc}
 8006746:	bf00      	nop
 8006748:	1fff7a10 	.word	0x1fff7a10
 800674c:	1fff7a14 	.word	0x1fff7a14
 8006750:	1fff7a18 	.word	0x1fff7a18
 8006754:	2000016a 	.word	0x2000016a
 8006758:	2000017a 	.word	0x2000017a

0800675c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800675c:	b480      	push	{r7}
 800675e:	b087      	sub	sp, #28
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	4613      	mov	r3, r2
 8006768:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800676a:	2300      	movs	r3, #0
 800676c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800676e:	2300      	movs	r3, #0
 8006770:	75fb      	strb	r3, [r7, #23]
 8006772:	e027      	b.n	80067c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	0f1b      	lsrs	r3, r3, #28
 8006778:	2b09      	cmp	r3, #9
 800677a:	d80b      	bhi.n	8006794 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	0f1b      	lsrs	r3, r3, #28
 8006780:	b2da      	uxtb	r2, r3
 8006782:	7dfb      	ldrb	r3, [r7, #23]
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4619      	mov	r1, r3
 8006788:	68bb      	ldr	r3, [r7, #8]
 800678a:	440b      	add	r3, r1
 800678c:	3230      	adds	r2, #48	; 0x30
 800678e:	b2d2      	uxtb	r2, r2
 8006790:	701a      	strb	r2, [r3, #0]
 8006792:	e00a      	b.n	80067aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	0f1b      	lsrs	r3, r3, #28
 8006798:	b2da      	uxtb	r2, r3
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	4619      	mov	r1, r3
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	440b      	add	r3, r1
 80067a4:	3237      	adds	r2, #55	; 0x37
 80067a6:	b2d2      	uxtb	r2, r2
 80067a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	011b      	lsls	r3, r3, #4
 80067ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	005b      	lsls	r3, r3, #1
 80067b4:	3301      	adds	r3, #1
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	4413      	add	r3, r2
 80067ba:	2200      	movs	r2, #0
 80067bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	3301      	adds	r3, #1
 80067c2:	75fb      	strb	r3, [r7, #23]
 80067c4:	7dfa      	ldrb	r2, [r7, #23]
 80067c6:	79fb      	ldrb	r3, [r7, #7]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d3d3      	bcc.n	8006774 <IntToUnicode+0x18>
  }
}
 80067cc:	bf00      	nop
 80067ce:	371c      	adds	r7, #28
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b08a      	sub	sp, #40	; 0x28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80067e0:	f107 0314 	add.w	r3, r7, #20
 80067e4:	2200      	movs	r2, #0
 80067e6:	601a      	str	r2, [r3, #0]
 80067e8:	605a      	str	r2, [r3, #4]
 80067ea:	609a      	str	r2, [r3, #8]
 80067ec:	60da      	str	r2, [r3, #12]
 80067ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067f8:	d13a      	bne.n	8006870 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067fa:	2300      	movs	r3, #0
 80067fc:	613b      	str	r3, [r7, #16]
 80067fe:	4b1e      	ldr	r3, [pc, #120]	; (8006878 <HAL_PCD_MspInit+0xa0>)
 8006800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006802:	4a1d      	ldr	r2, [pc, #116]	; (8006878 <HAL_PCD_MspInit+0xa0>)
 8006804:	f043 0301 	orr.w	r3, r3, #1
 8006808:	6313      	str	r3, [r2, #48]	; 0x30
 800680a:	4b1b      	ldr	r3, [pc, #108]	; (8006878 <HAL_PCD_MspInit+0xa0>)
 800680c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006816:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800681a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800681c:	2302      	movs	r3, #2
 800681e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006820:	2300      	movs	r3, #0
 8006822:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006824:	2303      	movs	r3, #3
 8006826:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006828:	230a      	movs	r3, #10
 800682a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800682c:	f107 0314 	add.w	r3, r7, #20
 8006830:	4619      	mov	r1, r3
 8006832:	4812      	ldr	r0, [pc, #72]	; (800687c <HAL_PCD_MspInit+0xa4>)
 8006834:	f7fa fa6e 	bl	8000d14 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006838:	4b0f      	ldr	r3, [pc, #60]	; (8006878 <HAL_PCD_MspInit+0xa0>)
 800683a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800683c:	4a0e      	ldr	r2, [pc, #56]	; (8006878 <HAL_PCD_MspInit+0xa0>)
 800683e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006842:	6353      	str	r3, [r2, #52]	; 0x34
 8006844:	2300      	movs	r3, #0
 8006846:	60fb      	str	r3, [r7, #12]
 8006848:	4b0b      	ldr	r3, [pc, #44]	; (8006878 <HAL_PCD_MspInit+0xa0>)
 800684a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684c:	4a0a      	ldr	r2, [pc, #40]	; (8006878 <HAL_PCD_MspInit+0xa0>)
 800684e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006852:	6453      	str	r3, [r2, #68]	; 0x44
 8006854:	4b08      	ldr	r3, [pc, #32]	; (8006878 <HAL_PCD_MspInit+0xa0>)
 8006856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800685c:	60fb      	str	r3, [r7, #12]
 800685e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006860:	2200      	movs	r2, #0
 8006862:	2100      	movs	r1, #0
 8006864:	2043      	movs	r0, #67	; 0x43
 8006866:	f7fa fa1e 	bl	8000ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800686a:	2043      	movs	r0, #67	; 0x43
 800686c:	f7fa fa37 	bl	8000cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006870:	bf00      	nop
 8006872:	3728      	adds	r7, #40	; 0x28
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}
 8006878:	40023800 	.word	0x40023800
 800687c:	40020000 	.word	0x40020000

08006880 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b082      	sub	sp, #8
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f7fe fd36 	bl	8005308 <USBD_LL_SetupStage>
}
 800689c:	bf00      	nop
 800689e:	3708      	adds	r7, #8
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b082      	sub	sp, #8
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	460b      	mov	r3, r1
 80068ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	6879      	ldr	r1, [r7, #4]
 80068ba:	4613      	mov	r3, r2
 80068bc:	00db      	lsls	r3, r3, #3
 80068be:	1a9b      	subs	r3, r3, r2
 80068c0:	009b      	lsls	r3, r3, #2
 80068c2:	440b      	add	r3, r1
 80068c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	4619      	mov	r1, r3
 80068ce:	f7fe fd6e 	bl	80053ae <USBD_LL_DataOutStage>
}
 80068d2:	bf00      	nop
 80068d4:	3708      	adds	r7, #8
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	460b      	mov	r3, r1
 80068e4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80068ec:	78fa      	ldrb	r2, [r7, #3]
 80068ee:	6879      	ldr	r1, [r7, #4]
 80068f0:	4613      	mov	r3, r2
 80068f2:	00db      	lsls	r3, r3, #3
 80068f4:	1a9b      	subs	r3, r3, r2
 80068f6:	009b      	lsls	r3, r3, #2
 80068f8:	440b      	add	r3, r1
 80068fa:	3348      	adds	r3, #72	; 0x48
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	78fb      	ldrb	r3, [r7, #3]
 8006900:	4619      	mov	r1, r3
 8006902:	f7fe fdb7 	bl	8005474 <USBD_LL_DataInStage>
}
 8006906:	bf00      	nop
 8006908:	3708      	adds	r7, #8
 800690a:	46bd      	mov	sp, r7
 800690c:	bd80      	pop	{r7, pc}

0800690e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800690e:	b580      	push	{r7, lr}
 8006910:	b082      	sub	sp, #8
 8006912:	af00      	add	r7, sp, #0
 8006914:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800691c:	4618      	mov	r0, r3
 800691e:	f7fe febb 	bl	8005698 <USBD_LL_SOF>
}
 8006922:	bf00      	nop
 8006924:	3708      	adds	r7, #8
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800692a:	b580      	push	{r7, lr}
 800692c:	b084      	sub	sp, #16
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006932:	2301      	movs	r3, #1
 8006934:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d102      	bne.n	8006944 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800693e:	2300      	movs	r3, #0
 8006940:	73fb      	strb	r3, [r7, #15]
 8006942:	e008      	b.n	8006956 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	2b02      	cmp	r3, #2
 800694a:	d102      	bne.n	8006952 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800694c:	2301      	movs	r3, #1
 800694e:	73fb      	strb	r3, [r7, #15]
 8006950:	e001      	b.n	8006956 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006952:	f7f9 fef1 	bl	8000738 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800695c:	7bfa      	ldrb	r2, [r7, #15]
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe fe5e 	bl	8005622 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800696c:	4618      	mov	r0, r3
 800696e:	f7fe fe17 	bl	80055a0 <USBD_LL_Reset>
}
 8006972:	bf00      	nop
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
	...

0800697c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800697c:	b580      	push	{r7, lr}
 800697e:	b082      	sub	sp, #8
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800698a:	4618      	mov	r0, r3
 800698c:	f7fe fe59 	bl	8005642 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80069a2:	f043 0301 	orr.w	r3, r3, #1
 80069a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6a1b      	ldr	r3, [r3, #32]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d005      	beq.n	80069bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80069b0:	4b04      	ldr	r3, [pc, #16]	; (80069c4 <HAL_PCD_SuspendCallback+0x48>)
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	4a03      	ldr	r2, [pc, #12]	; (80069c4 <HAL_PCD_SuspendCallback+0x48>)
 80069b6:	f043 0306 	orr.w	r3, r3, #6
 80069ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80069bc:	bf00      	nop
 80069be:	3708      	adds	r7, #8
 80069c0:	46bd      	mov	sp, r7
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	e000ed00 	.word	0xe000ed00

080069c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7fe fe48 	bl	800566c <USBD_LL_Resume>
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}

080069e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80069f6:	78fa      	ldrb	r2, [r7, #3]
 80069f8:	4611      	mov	r1, r2
 80069fa:	4618      	mov	r0, r3
 80069fc:	f7fe fe73 	bl	80056e6 <USBD_LL_IsoOUTIncomplete>
}
 8006a00:	bf00      	nop
 8006a02:	3708      	adds	r7, #8
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a1a:	78fa      	ldrb	r2, [r7, #3]
 8006a1c:	4611      	mov	r1, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe fe54 	bl	80056cc <USBD_LL_IsoINIncomplete>
}
 8006a24:	bf00      	nop
 8006a26:	3708      	adds	r7, #8
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}

08006a2c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a2c:	b580      	push	{r7, lr}
 8006a2e:	b082      	sub	sp, #8
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	f7fe fe60 	bl	8005700 <USBD_LL_DevConnected>
}
 8006a40:	bf00      	nop
 8006a42:	3708      	adds	r7, #8
 8006a44:	46bd      	mov	sp, r7
 8006a46:	bd80      	pop	{r7, pc}

08006a48 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7fe fe5d 	bl	8005716 <USBD_LL_DevDisconnected>
}
 8006a5c:	bf00      	nop
 8006a5e:	3708      	adds	r7, #8
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b082      	sub	sp, #8
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	781b      	ldrb	r3, [r3, #0]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d13c      	bne.n	8006aee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006a74:	4a20      	ldr	r2, [pc, #128]	; (8006af8 <USBD_LL_Init+0x94>)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1e      	ldr	r2, [pc, #120]	; (8006af8 <USBD_LL_Init+0x94>)
 8006a80:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006a84:	4b1c      	ldr	r3, [pc, #112]	; (8006af8 <USBD_LL_Init+0x94>)
 8006a86:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a8a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006a8c:	4b1a      	ldr	r3, [pc, #104]	; (8006af8 <USBD_LL_Init+0x94>)
 8006a8e:	2204      	movs	r2, #4
 8006a90:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006a92:	4b19      	ldr	r3, [pc, #100]	; (8006af8 <USBD_LL_Init+0x94>)
 8006a94:	2202      	movs	r2, #2
 8006a96:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006a98:	4b17      	ldr	r3, [pc, #92]	; (8006af8 <USBD_LL_Init+0x94>)
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006a9e:	4b16      	ldr	r3, [pc, #88]	; (8006af8 <USBD_LL_Init+0x94>)
 8006aa0:	2202      	movs	r2, #2
 8006aa2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006aa4:	4b14      	ldr	r3, [pc, #80]	; (8006af8 <USBD_LL_Init+0x94>)
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006aaa:	4b13      	ldr	r3, [pc, #76]	; (8006af8 <USBD_LL_Init+0x94>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006ab0:	4b11      	ldr	r3, [pc, #68]	; (8006af8 <USBD_LL_Init+0x94>)
 8006ab2:	2200      	movs	r2, #0
 8006ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006ab6:	4b10      	ldr	r3, [pc, #64]	; (8006af8 <USBD_LL_Init+0x94>)
 8006ab8:	2200      	movs	r2, #0
 8006aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006abc:	4b0e      	ldr	r3, [pc, #56]	; (8006af8 <USBD_LL_Init+0x94>)
 8006abe:	2200      	movs	r2, #0
 8006ac0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006ac2:	480d      	ldr	r0, [pc, #52]	; (8006af8 <USBD_LL_Init+0x94>)
 8006ac4:	f7fa fac0 	bl	8001048 <HAL_PCD_Init>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d001      	beq.n	8006ad2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006ace:	f7f9 fe33 	bl	8000738 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006ad2:	2180      	movs	r1, #128	; 0x80
 8006ad4:	4808      	ldr	r0, [pc, #32]	; (8006af8 <USBD_LL_Init+0x94>)
 8006ad6:	f7fb fc1e 	bl	8002316 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006ada:	2240      	movs	r2, #64	; 0x40
 8006adc:	2100      	movs	r1, #0
 8006ade:	4806      	ldr	r0, [pc, #24]	; (8006af8 <USBD_LL_Init+0x94>)
 8006ae0:	f7fb fbd2 	bl	8002288 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006ae4:	2280      	movs	r2, #128	; 0x80
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	4803      	ldr	r0, [pc, #12]	; (8006af8 <USBD_LL_Init+0x94>)
 8006aea:	f7fb fbcd 	bl	8002288 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006aee:	2300      	movs	r3, #0
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	3708      	adds	r7, #8
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}
 8006af8:	20001730 	.word	0x20001730

08006afc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b04:	2300      	movs	r3, #0
 8006b06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b12:	4618      	mov	r0, r3
 8006b14:	f7fa fbb5 	bl	8001282 <HAL_PCD_Start>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b1c:	7bfb      	ldrb	r3, [r7, #15]
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f000 f92a 	bl	8006d78 <USBD_Get_USB_Status>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b084      	sub	sp, #16
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	4608      	mov	r0, r1
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	461a      	mov	r2, r3
 8006b40:	4603      	mov	r3, r0
 8006b42:	70fb      	strb	r3, [r7, #3]
 8006b44:	460b      	mov	r3, r1
 8006b46:	70bb      	strb	r3, [r7, #2]
 8006b48:	4613      	mov	r3, r2
 8006b4a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b50:	2300      	movs	r3, #0
 8006b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006b5a:	78bb      	ldrb	r3, [r7, #2]
 8006b5c:	883a      	ldrh	r2, [r7, #0]
 8006b5e:	78f9      	ldrb	r1, [r7, #3]
 8006b60:	f7fa ff99 	bl	8001a96 <HAL_PCD_EP_Open>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 f904 	bl	8006d78 <USBD_Get_USB_Status>
 8006b70:	4603      	mov	r3, r0
 8006b72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006b74:	7bbb      	ldrb	r3, [r7, #14]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b084      	sub	sp, #16
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	460b      	mov	r3, r1
 8006b88:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006b98:	78fa      	ldrb	r2, [r7, #3]
 8006b9a:	4611      	mov	r1, r2
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fa ffe2 	bl	8001b66 <HAL_PCD_EP_Close>
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ba6:	7bfb      	ldrb	r3, [r7, #15]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f000 f8e5 	bl	8006d78 <USBD_Get_USB_Status>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bb2:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3710      	adds	r7, #16
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f7fb f8ba 	bl	8001d54 <HAL_PCD_EP_SetStall>
 8006be0:	4603      	mov	r3, r0
 8006be2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	4618      	mov	r0, r3
 8006be8:	f000 f8c6 	bl	8006d78 <USBD_Get_USB_Status>
 8006bec:	4603      	mov	r3, r0
 8006bee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006bf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3710      	adds	r7, #16
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}

08006bfa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006bfa:	b580      	push	{r7, lr}
 8006bfc:	b084      	sub	sp, #16
 8006bfe:	af00      	add	r7, sp, #0
 8006c00:	6078      	str	r0, [r7, #4]
 8006c02:	460b      	mov	r3, r1
 8006c04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c06:	2300      	movs	r3, #0
 8006c08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	4611      	mov	r1, r2
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f7fb f8ff 	bl	8001e1c <HAL_PCD_EP_ClrStall>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	4618      	mov	r0, r3
 8006c26:	f000 f8a7 	bl	8006d78 <USBD_Get_USB_Status>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3710      	adds	r7, #16
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006c4a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006c4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	da0b      	bge.n	8006c6c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006c54:	78fb      	ldrb	r3, [r7, #3]
 8006c56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c5a:	68f9      	ldr	r1, [r7, #12]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	1a9b      	subs	r3, r3, r2
 8006c62:	009b      	lsls	r3, r3, #2
 8006c64:	440b      	add	r3, r1
 8006c66:	333e      	adds	r3, #62	; 0x3e
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	e00b      	b.n	8006c84 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c72:	68f9      	ldr	r1, [r7, #12]
 8006c74:	4613      	mov	r3, r2
 8006c76:	00db      	lsls	r3, r3, #3
 8006c78:	1a9b      	subs	r3, r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	440b      	add	r3, r1
 8006c7e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006c82:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006c84:	4618      	mov	r0, r3
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	460b      	mov	r3, r1
 8006c9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006caa:	78fa      	ldrb	r2, [r7, #3]
 8006cac:	4611      	mov	r1, r2
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fa fecc 	bl	8001a4c <HAL_PCD_SetAddress>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 f85c 	bl	8006d78 <USBD_Get_USB_Status>
 8006cc0:	4603      	mov	r3, r0
 8006cc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006cc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b086      	sub	sp, #24
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	460b      	mov	r3, r1
 8006cdc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006cec:	7af9      	ldrb	r1, [r7, #11]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	687a      	ldr	r2, [r7, #4]
 8006cf2:	f7fa ffe5 	bl	8001cc0 <HAL_PCD_EP_Transmit>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 f83b 	bl	8006d78 <USBD_Get_USB_Status>
 8006d02:	4603      	mov	r3, r0
 8006d04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d06:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3718      	adds	r7, #24
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006d10:	b580      	push	{r7, lr}
 8006d12:	b086      	sub	sp, #24
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	607a      	str	r2, [r7, #4]
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006d2e:	7af9      	ldrb	r1, [r7, #11]
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	f7fa ff61 	bl	8001bfa <HAL_PCD_EP_Receive>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d3c:	7dfb      	ldrb	r3, [r7, #23]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 f81a 	bl	8006d78 <USBD_Get_USB_Status>
 8006d44:	4603      	mov	r3, r0
 8006d46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006d48:	7dbb      	ldrb	r3, [r7, #22]
}
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b082      	sub	sp, #8
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	6078      	str	r0, [r7, #4]
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	4611      	mov	r1, r2
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f7fa ff91 	bl	8001c90 <HAL_PCD_EP_GetRxCount>
 8006d6e:	4603      	mov	r3, r0
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d82:	2300      	movs	r3, #0
 8006d84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006d86:	79fb      	ldrb	r3, [r7, #7]
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d817      	bhi.n	8006dbc <USBD_Get_USB_Status+0x44>
 8006d8c:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <USBD_Get_USB_Status+0x1c>)
 8006d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d92:	bf00      	nop
 8006d94:	08006da5 	.word	0x08006da5
 8006d98:	08006dab 	.word	0x08006dab
 8006d9c:	08006db1 	.word	0x08006db1
 8006da0:	08006db7 	.word	0x08006db7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006da4:	2300      	movs	r3, #0
 8006da6:	73fb      	strb	r3, [r7, #15]
    break;
 8006da8:	e00b      	b.n	8006dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006daa:	2303      	movs	r3, #3
 8006dac:	73fb      	strb	r3, [r7, #15]
    break;
 8006dae:	e008      	b.n	8006dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006db0:	2301      	movs	r3, #1
 8006db2:	73fb      	strb	r3, [r7, #15]
    break;
 8006db4:	e005      	b.n	8006dc2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006db6:	2303      	movs	r3, #3
 8006db8:	73fb      	strb	r3, [r7, #15]
    break;
 8006dba:	e002      	b.n	8006dc2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006dbc:	2303      	movs	r3, #3
 8006dbe:	73fb      	strb	r3, [r7, #15]
    break;
 8006dc0:	bf00      	nop
  }
  return usb_status;
 8006dc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dc4:	4618      	mov	r0, r3
 8006dc6:	3714      	adds	r7, #20
 8006dc8:	46bd      	mov	sp, r7
 8006dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dce:	4770      	bx	lr

08006dd0 <__errno>:
 8006dd0:	4b01      	ldr	r3, [pc, #4]	; (8006dd8 <__errno+0x8>)
 8006dd2:	6818      	ldr	r0, [r3, #0]
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000184 	.word	0x20000184

08006ddc <__libc_init_array>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	4e0d      	ldr	r6, [pc, #52]	; (8006e14 <__libc_init_array+0x38>)
 8006de0:	4c0d      	ldr	r4, [pc, #52]	; (8006e18 <__libc_init_array+0x3c>)
 8006de2:	1ba4      	subs	r4, r4, r6
 8006de4:	10a4      	asrs	r4, r4, #2
 8006de6:	2500      	movs	r5, #0
 8006de8:	42a5      	cmp	r5, r4
 8006dea:	d109      	bne.n	8006e00 <__libc_init_array+0x24>
 8006dec:	4e0b      	ldr	r6, [pc, #44]	; (8006e1c <__libc_init_array+0x40>)
 8006dee:	4c0c      	ldr	r4, [pc, #48]	; (8006e20 <__libc_init_array+0x44>)
 8006df0:	f000 fc36 	bl	8007660 <_init>
 8006df4:	1ba4      	subs	r4, r4, r6
 8006df6:	10a4      	asrs	r4, r4, #2
 8006df8:	2500      	movs	r5, #0
 8006dfa:	42a5      	cmp	r5, r4
 8006dfc:	d105      	bne.n	8006e0a <__libc_init_array+0x2e>
 8006dfe:	bd70      	pop	{r4, r5, r6, pc}
 8006e00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e04:	4798      	blx	r3
 8006e06:	3501      	adds	r5, #1
 8006e08:	e7ee      	b.n	8006de8 <__libc_init_array+0xc>
 8006e0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006e0e:	4798      	blx	r3
 8006e10:	3501      	adds	r5, #1
 8006e12:	e7f2      	b.n	8006dfa <__libc_init_array+0x1e>
 8006e14:	08007728 	.word	0x08007728
 8006e18:	08007728 	.word	0x08007728
 8006e1c:	08007728 	.word	0x08007728
 8006e20:	0800772c 	.word	0x0800772c

08006e24 <malloc>:
 8006e24:	4b02      	ldr	r3, [pc, #8]	; (8006e30 <malloc+0xc>)
 8006e26:	4601      	mov	r1, r0
 8006e28:	6818      	ldr	r0, [r3, #0]
 8006e2a:	f000 b861 	b.w	8006ef0 <_malloc_r>
 8006e2e:	bf00      	nop
 8006e30:	20000184 	.word	0x20000184

08006e34 <free>:
 8006e34:	4b02      	ldr	r3, [pc, #8]	; (8006e40 <free+0xc>)
 8006e36:	4601      	mov	r1, r0
 8006e38:	6818      	ldr	r0, [r3, #0]
 8006e3a:	f000 b80b 	b.w	8006e54 <_free_r>
 8006e3e:	bf00      	nop
 8006e40:	20000184 	.word	0x20000184

08006e44 <memset>:
 8006e44:	4402      	add	r2, r0
 8006e46:	4603      	mov	r3, r0
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d100      	bne.n	8006e4e <memset+0xa>
 8006e4c:	4770      	bx	lr
 8006e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8006e52:	e7f9      	b.n	8006e48 <memset+0x4>

08006e54 <_free_r>:
 8006e54:	b538      	push	{r3, r4, r5, lr}
 8006e56:	4605      	mov	r5, r0
 8006e58:	2900      	cmp	r1, #0
 8006e5a:	d045      	beq.n	8006ee8 <_free_r+0x94>
 8006e5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e60:	1f0c      	subs	r4, r1, #4
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	bfb8      	it	lt
 8006e66:	18e4      	addlt	r4, r4, r3
 8006e68:	f000 f8cc 	bl	8007004 <__malloc_lock>
 8006e6c:	4a1f      	ldr	r2, [pc, #124]	; (8006eec <_free_r+0x98>)
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	4610      	mov	r0, r2
 8006e72:	b933      	cbnz	r3, 8006e82 <_free_r+0x2e>
 8006e74:	6063      	str	r3, [r4, #4]
 8006e76:	6014      	str	r4, [r2, #0]
 8006e78:	4628      	mov	r0, r5
 8006e7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006e7e:	f000 b8c2 	b.w	8007006 <__malloc_unlock>
 8006e82:	42a3      	cmp	r3, r4
 8006e84:	d90c      	bls.n	8006ea0 <_free_r+0x4c>
 8006e86:	6821      	ldr	r1, [r4, #0]
 8006e88:	1862      	adds	r2, r4, r1
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	bf04      	itt	eq
 8006e8e:	681a      	ldreq	r2, [r3, #0]
 8006e90:	685b      	ldreq	r3, [r3, #4]
 8006e92:	6063      	str	r3, [r4, #4]
 8006e94:	bf04      	itt	eq
 8006e96:	1852      	addeq	r2, r2, r1
 8006e98:	6022      	streq	r2, [r4, #0]
 8006e9a:	6004      	str	r4, [r0, #0]
 8006e9c:	e7ec      	b.n	8006e78 <_free_r+0x24>
 8006e9e:	4613      	mov	r3, r2
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	b10a      	cbz	r2, 8006ea8 <_free_r+0x54>
 8006ea4:	42a2      	cmp	r2, r4
 8006ea6:	d9fa      	bls.n	8006e9e <_free_r+0x4a>
 8006ea8:	6819      	ldr	r1, [r3, #0]
 8006eaa:	1858      	adds	r0, r3, r1
 8006eac:	42a0      	cmp	r0, r4
 8006eae:	d10b      	bne.n	8006ec8 <_free_r+0x74>
 8006eb0:	6820      	ldr	r0, [r4, #0]
 8006eb2:	4401      	add	r1, r0
 8006eb4:	1858      	adds	r0, r3, r1
 8006eb6:	4282      	cmp	r2, r0
 8006eb8:	6019      	str	r1, [r3, #0]
 8006eba:	d1dd      	bne.n	8006e78 <_free_r+0x24>
 8006ebc:	6810      	ldr	r0, [r2, #0]
 8006ebe:	6852      	ldr	r2, [r2, #4]
 8006ec0:	605a      	str	r2, [r3, #4]
 8006ec2:	4401      	add	r1, r0
 8006ec4:	6019      	str	r1, [r3, #0]
 8006ec6:	e7d7      	b.n	8006e78 <_free_r+0x24>
 8006ec8:	d902      	bls.n	8006ed0 <_free_r+0x7c>
 8006eca:	230c      	movs	r3, #12
 8006ecc:	602b      	str	r3, [r5, #0]
 8006ece:	e7d3      	b.n	8006e78 <_free_r+0x24>
 8006ed0:	6820      	ldr	r0, [r4, #0]
 8006ed2:	1821      	adds	r1, r4, r0
 8006ed4:	428a      	cmp	r2, r1
 8006ed6:	bf04      	itt	eq
 8006ed8:	6811      	ldreq	r1, [r2, #0]
 8006eda:	6852      	ldreq	r2, [r2, #4]
 8006edc:	6062      	str	r2, [r4, #4]
 8006ede:	bf04      	itt	eq
 8006ee0:	1809      	addeq	r1, r1, r0
 8006ee2:	6021      	streq	r1, [r4, #0]
 8006ee4:	605c      	str	r4, [r3, #4]
 8006ee6:	e7c7      	b.n	8006e78 <_free_r+0x24>
 8006ee8:	bd38      	pop	{r3, r4, r5, pc}
 8006eea:	bf00      	nop
 8006eec:	2000020c 	.word	0x2000020c

08006ef0 <_malloc_r>:
 8006ef0:	b570      	push	{r4, r5, r6, lr}
 8006ef2:	1ccd      	adds	r5, r1, #3
 8006ef4:	f025 0503 	bic.w	r5, r5, #3
 8006ef8:	3508      	adds	r5, #8
 8006efa:	2d0c      	cmp	r5, #12
 8006efc:	bf38      	it	cc
 8006efe:	250c      	movcc	r5, #12
 8006f00:	2d00      	cmp	r5, #0
 8006f02:	4606      	mov	r6, r0
 8006f04:	db01      	blt.n	8006f0a <_malloc_r+0x1a>
 8006f06:	42a9      	cmp	r1, r5
 8006f08:	d903      	bls.n	8006f12 <_malloc_r+0x22>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	6033      	str	r3, [r6, #0]
 8006f0e:	2000      	movs	r0, #0
 8006f10:	bd70      	pop	{r4, r5, r6, pc}
 8006f12:	f000 f877 	bl	8007004 <__malloc_lock>
 8006f16:	4a21      	ldr	r2, [pc, #132]	; (8006f9c <_malloc_r+0xac>)
 8006f18:	6814      	ldr	r4, [r2, #0]
 8006f1a:	4621      	mov	r1, r4
 8006f1c:	b991      	cbnz	r1, 8006f44 <_malloc_r+0x54>
 8006f1e:	4c20      	ldr	r4, [pc, #128]	; (8006fa0 <_malloc_r+0xb0>)
 8006f20:	6823      	ldr	r3, [r4, #0]
 8006f22:	b91b      	cbnz	r3, 8006f2c <_malloc_r+0x3c>
 8006f24:	4630      	mov	r0, r6
 8006f26:	f000 f83d 	bl	8006fa4 <_sbrk_r>
 8006f2a:	6020      	str	r0, [r4, #0]
 8006f2c:	4629      	mov	r1, r5
 8006f2e:	4630      	mov	r0, r6
 8006f30:	f000 f838 	bl	8006fa4 <_sbrk_r>
 8006f34:	1c43      	adds	r3, r0, #1
 8006f36:	d124      	bne.n	8006f82 <_malloc_r+0x92>
 8006f38:	230c      	movs	r3, #12
 8006f3a:	6033      	str	r3, [r6, #0]
 8006f3c:	4630      	mov	r0, r6
 8006f3e:	f000 f862 	bl	8007006 <__malloc_unlock>
 8006f42:	e7e4      	b.n	8006f0e <_malloc_r+0x1e>
 8006f44:	680b      	ldr	r3, [r1, #0]
 8006f46:	1b5b      	subs	r3, r3, r5
 8006f48:	d418      	bmi.n	8006f7c <_malloc_r+0x8c>
 8006f4a:	2b0b      	cmp	r3, #11
 8006f4c:	d90f      	bls.n	8006f6e <_malloc_r+0x7e>
 8006f4e:	600b      	str	r3, [r1, #0]
 8006f50:	50cd      	str	r5, [r1, r3]
 8006f52:	18cc      	adds	r4, r1, r3
 8006f54:	4630      	mov	r0, r6
 8006f56:	f000 f856 	bl	8007006 <__malloc_unlock>
 8006f5a:	f104 000b 	add.w	r0, r4, #11
 8006f5e:	1d23      	adds	r3, r4, #4
 8006f60:	f020 0007 	bic.w	r0, r0, #7
 8006f64:	1ac3      	subs	r3, r0, r3
 8006f66:	d0d3      	beq.n	8006f10 <_malloc_r+0x20>
 8006f68:	425a      	negs	r2, r3
 8006f6a:	50e2      	str	r2, [r4, r3]
 8006f6c:	e7d0      	b.n	8006f10 <_malloc_r+0x20>
 8006f6e:	428c      	cmp	r4, r1
 8006f70:	684b      	ldr	r3, [r1, #4]
 8006f72:	bf16      	itet	ne
 8006f74:	6063      	strne	r3, [r4, #4]
 8006f76:	6013      	streq	r3, [r2, #0]
 8006f78:	460c      	movne	r4, r1
 8006f7a:	e7eb      	b.n	8006f54 <_malloc_r+0x64>
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	6849      	ldr	r1, [r1, #4]
 8006f80:	e7cc      	b.n	8006f1c <_malloc_r+0x2c>
 8006f82:	1cc4      	adds	r4, r0, #3
 8006f84:	f024 0403 	bic.w	r4, r4, #3
 8006f88:	42a0      	cmp	r0, r4
 8006f8a:	d005      	beq.n	8006f98 <_malloc_r+0xa8>
 8006f8c:	1a21      	subs	r1, r4, r0
 8006f8e:	4630      	mov	r0, r6
 8006f90:	f000 f808 	bl	8006fa4 <_sbrk_r>
 8006f94:	3001      	adds	r0, #1
 8006f96:	d0cf      	beq.n	8006f38 <_malloc_r+0x48>
 8006f98:	6025      	str	r5, [r4, #0]
 8006f9a:	e7db      	b.n	8006f54 <_malloc_r+0x64>
 8006f9c:	2000020c 	.word	0x2000020c
 8006fa0:	20000210 	.word	0x20000210

08006fa4 <_sbrk_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4c06      	ldr	r4, [pc, #24]	; (8006fc0 <_sbrk_r+0x1c>)
 8006fa8:	2300      	movs	r3, #0
 8006faa:	4605      	mov	r5, r0
 8006fac:	4608      	mov	r0, r1
 8006fae:	6023      	str	r3, [r4, #0]
 8006fb0:	f7f9 fc22 	bl	80007f8 <_sbrk>
 8006fb4:	1c43      	adds	r3, r0, #1
 8006fb6:	d102      	bne.n	8006fbe <_sbrk_r+0x1a>
 8006fb8:	6823      	ldr	r3, [r4, #0]
 8006fba:	b103      	cbz	r3, 8006fbe <_sbrk_r+0x1a>
 8006fbc:	602b      	str	r3, [r5, #0]
 8006fbe:	bd38      	pop	{r3, r4, r5, pc}
 8006fc0:	20001b38 	.word	0x20001b38

08006fc4 <siprintf>:
 8006fc4:	b40e      	push	{r1, r2, r3}
 8006fc6:	b500      	push	{lr}
 8006fc8:	b09c      	sub	sp, #112	; 0x70
 8006fca:	ab1d      	add	r3, sp, #116	; 0x74
 8006fcc:	9002      	str	r0, [sp, #8]
 8006fce:	9006      	str	r0, [sp, #24]
 8006fd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006fd4:	4809      	ldr	r0, [pc, #36]	; (8006ffc <siprintf+0x38>)
 8006fd6:	9107      	str	r1, [sp, #28]
 8006fd8:	9104      	str	r1, [sp, #16]
 8006fda:	4909      	ldr	r1, [pc, #36]	; (8007000 <siprintf+0x3c>)
 8006fdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fe0:	9105      	str	r1, [sp, #20]
 8006fe2:	6800      	ldr	r0, [r0, #0]
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	a902      	add	r1, sp, #8
 8006fe8:	f000 f868 	bl	80070bc <_svfiprintf_r>
 8006fec:	9b02      	ldr	r3, [sp, #8]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	b01c      	add	sp, #112	; 0x70
 8006ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ff8:	b003      	add	sp, #12
 8006ffa:	4770      	bx	lr
 8006ffc:	20000184 	.word	0x20000184
 8007000:	ffff0208 	.word	0xffff0208

08007004 <__malloc_lock>:
 8007004:	4770      	bx	lr

08007006 <__malloc_unlock>:
 8007006:	4770      	bx	lr

08007008 <__ssputs_r>:
 8007008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	688e      	ldr	r6, [r1, #8]
 800700e:	429e      	cmp	r6, r3
 8007010:	4682      	mov	sl, r0
 8007012:	460c      	mov	r4, r1
 8007014:	4690      	mov	r8, r2
 8007016:	4699      	mov	r9, r3
 8007018:	d837      	bhi.n	800708a <__ssputs_r+0x82>
 800701a:	898a      	ldrh	r2, [r1, #12]
 800701c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007020:	d031      	beq.n	8007086 <__ssputs_r+0x7e>
 8007022:	6825      	ldr	r5, [r4, #0]
 8007024:	6909      	ldr	r1, [r1, #16]
 8007026:	1a6f      	subs	r7, r5, r1
 8007028:	6965      	ldr	r5, [r4, #20]
 800702a:	2302      	movs	r3, #2
 800702c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007030:	fb95 f5f3 	sdiv	r5, r5, r3
 8007034:	f109 0301 	add.w	r3, r9, #1
 8007038:	443b      	add	r3, r7
 800703a:	429d      	cmp	r5, r3
 800703c:	bf38      	it	cc
 800703e:	461d      	movcc	r5, r3
 8007040:	0553      	lsls	r3, r2, #21
 8007042:	d530      	bpl.n	80070a6 <__ssputs_r+0x9e>
 8007044:	4629      	mov	r1, r5
 8007046:	f7ff ff53 	bl	8006ef0 <_malloc_r>
 800704a:	4606      	mov	r6, r0
 800704c:	b950      	cbnz	r0, 8007064 <__ssputs_r+0x5c>
 800704e:	230c      	movs	r3, #12
 8007050:	f8ca 3000 	str.w	r3, [sl]
 8007054:	89a3      	ldrh	r3, [r4, #12]
 8007056:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800705a:	81a3      	strh	r3, [r4, #12]
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007064:	463a      	mov	r2, r7
 8007066:	6921      	ldr	r1, [r4, #16]
 8007068:	f000 faa8 	bl	80075bc <memcpy>
 800706c:	89a3      	ldrh	r3, [r4, #12]
 800706e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007072:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007076:	81a3      	strh	r3, [r4, #12]
 8007078:	6126      	str	r6, [r4, #16]
 800707a:	6165      	str	r5, [r4, #20]
 800707c:	443e      	add	r6, r7
 800707e:	1bed      	subs	r5, r5, r7
 8007080:	6026      	str	r6, [r4, #0]
 8007082:	60a5      	str	r5, [r4, #8]
 8007084:	464e      	mov	r6, r9
 8007086:	454e      	cmp	r6, r9
 8007088:	d900      	bls.n	800708c <__ssputs_r+0x84>
 800708a:	464e      	mov	r6, r9
 800708c:	4632      	mov	r2, r6
 800708e:	4641      	mov	r1, r8
 8007090:	6820      	ldr	r0, [r4, #0]
 8007092:	f000 fa9e 	bl	80075d2 <memmove>
 8007096:	68a3      	ldr	r3, [r4, #8]
 8007098:	1b9b      	subs	r3, r3, r6
 800709a:	60a3      	str	r3, [r4, #8]
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	441e      	add	r6, r3
 80070a0:	6026      	str	r6, [r4, #0]
 80070a2:	2000      	movs	r0, #0
 80070a4:	e7dc      	b.n	8007060 <__ssputs_r+0x58>
 80070a6:	462a      	mov	r2, r5
 80070a8:	f000 faac 	bl	8007604 <_realloc_r>
 80070ac:	4606      	mov	r6, r0
 80070ae:	2800      	cmp	r0, #0
 80070b0:	d1e2      	bne.n	8007078 <__ssputs_r+0x70>
 80070b2:	6921      	ldr	r1, [r4, #16]
 80070b4:	4650      	mov	r0, sl
 80070b6:	f7ff fecd 	bl	8006e54 <_free_r>
 80070ba:	e7c8      	b.n	800704e <__ssputs_r+0x46>

080070bc <_svfiprintf_r>:
 80070bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c0:	461d      	mov	r5, r3
 80070c2:	898b      	ldrh	r3, [r1, #12]
 80070c4:	061f      	lsls	r7, r3, #24
 80070c6:	b09d      	sub	sp, #116	; 0x74
 80070c8:	4680      	mov	r8, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	4616      	mov	r6, r2
 80070ce:	d50f      	bpl.n	80070f0 <_svfiprintf_r+0x34>
 80070d0:	690b      	ldr	r3, [r1, #16]
 80070d2:	b96b      	cbnz	r3, 80070f0 <_svfiprintf_r+0x34>
 80070d4:	2140      	movs	r1, #64	; 0x40
 80070d6:	f7ff ff0b 	bl	8006ef0 <_malloc_r>
 80070da:	6020      	str	r0, [r4, #0]
 80070dc:	6120      	str	r0, [r4, #16]
 80070de:	b928      	cbnz	r0, 80070ec <_svfiprintf_r+0x30>
 80070e0:	230c      	movs	r3, #12
 80070e2:	f8c8 3000 	str.w	r3, [r8]
 80070e6:	f04f 30ff 	mov.w	r0, #4294967295
 80070ea:	e0c8      	b.n	800727e <_svfiprintf_r+0x1c2>
 80070ec:	2340      	movs	r3, #64	; 0x40
 80070ee:	6163      	str	r3, [r4, #20]
 80070f0:	2300      	movs	r3, #0
 80070f2:	9309      	str	r3, [sp, #36]	; 0x24
 80070f4:	2320      	movs	r3, #32
 80070f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80070fa:	2330      	movs	r3, #48	; 0x30
 80070fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007100:	9503      	str	r5, [sp, #12]
 8007102:	f04f 0b01 	mov.w	fp, #1
 8007106:	4637      	mov	r7, r6
 8007108:	463d      	mov	r5, r7
 800710a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800710e:	b10b      	cbz	r3, 8007114 <_svfiprintf_r+0x58>
 8007110:	2b25      	cmp	r3, #37	; 0x25
 8007112:	d13e      	bne.n	8007192 <_svfiprintf_r+0xd6>
 8007114:	ebb7 0a06 	subs.w	sl, r7, r6
 8007118:	d00b      	beq.n	8007132 <_svfiprintf_r+0x76>
 800711a:	4653      	mov	r3, sl
 800711c:	4632      	mov	r2, r6
 800711e:	4621      	mov	r1, r4
 8007120:	4640      	mov	r0, r8
 8007122:	f7ff ff71 	bl	8007008 <__ssputs_r>
 8007126:	3001      	adds	r0, #1
 8007128:	f000 80a4 	beq.w	8007274 <_svfiprintf_r+0x1b8>
 800712c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800712e:	4453      	add	r3, sl
 8007130:	9309      	str	r3, [sp, #36]	; 0x24
 8007132:	783b      	ldrb	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	f000 809d 	beq.w	8007274 <_svfiprintf_r+0x1b8>
 800713a:	2300      	movs	r3, #0
 800713c:	f04f 32ff 	mov.w	r2, #4294967295
 8007140:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007144:	9304      	str	r3, [sp, #16]
 8007146:	9307      	str	r3, [sp, #28]
 8007148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800714c:	931a      	str	r3, [sp, #104]	; 0x68
 800714e:	462f      	mov	r7, r5
 8007150:	2205      	movs	r2, #5
 8007152:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007156:	4850      	ldr	r0, [pc, #320]	; (8007298 <_svfiprintf_r+0x1dc>)
 8007158:	f7f9 f842 	bl	80001e0 <memchr>
 800715c:	9b04      	ldr	r3, [sp, #16]
 800715e:	b9d0      	cbnz	r0, 8007196 <_svfiprintf_r+0xda>
 8007160:	06d9      	lsls	r1, r3, #27
 8007162:	bf44      	itt	mi
 8007164:	2220      	movmi	r2, #32
 8007166:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800716a:	071a      	lsls	r2, r3, #28
 800716c:	bf44      	itt	mi
 800716e:	222b      	movmi	r2, #43	; 0x2b
 8007170:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007174:	782a      	ldrb	r2, [r5, #0]
 8007176:	2a2a      	cmp	r2, #42	; 0x2a
 8007178:	d015      	beq.n	80071a6 <_svfiprintf_r+0xea>
 800717a:	9a07      	ldr	r2, [sp, #28]
 800717c:	462f      	mov	r7, r5
 800717e:	2000      	movs	r0, #0
 8007180:	250a      	movs	r5, #10
 8007182:	4639      	mov	r1, r7
 8007184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007188:	3b30      	subs	r3, #48	; 0x30
 800718a:	2b09      	cmp	r3, #9
 800718c:	d94d      	bls.n	800722a <_svfiprintf_r+0x16e>
 800718e:	b1b8      	cbz	r0, 80071c0 <_svfiprintf_r+0x104>
 8007190:	e00f      	b.n	80071b2 <_svfiprintf_r+0xf6>
 8007192:	462f      	mov	r7, r5
 8007194:	e7b8      	b.n	8007108 <_svfiprintf_r+0x4c>
 8007196:	4a40      	ldr	r2, [pc, #256]	; (8007298 <_svfiprintf_r+0x1dc>)
 8007198:	1a80      	subs	r0, r0, r2
 800719a:	fa0b f000 	lsl.w	r0, fp, r0
 800719e:	4318      	orrs	r0, r3
 80071a0:	9004      	str	r0, [sp, #16]
 80071a2:	463d      	mov	r5, r7
 80071a4:	e7d3      	b.n	800714e <_svfiprintf_r+0x92>
 80071a6:	9a03      	ldr	r2, [sp, #12]
 80071a8:	1d11      	adds	r1, r2, #4
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	9103      	str	r1, [sp, #12]
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	db01      	blt.n	80071b6 <_svfiprintf_r+0xfa>
 80071b2:	9207      	str	r2, [sp, #28]
 80071b4:	e004      	b.n	80071c0 <_svfiprintf_r+0x104>
 80071b6:	4252      	negs	r2, r2
 80071b8:	f043 0302 	orr.w	r3, r3, #2
 80071bc:	9207      	str	r2, [sp, #28]
 80071be:	9304      	str	r3, [sp, #16]
 80071c0:	783b      	ldrb	r3, [r7, #0]
 80071c2:	2b2e      	cmp	r3, #46	; 0x2e
 80071c4:	d10c      	bne.n	80071e0 <_svfiprintf_r+0x124>
 80071c6:	787b      	ldrb	r3, [r7, #1]
 80071c8:	2b2a      	cmp	r3, #42	; 0x2a
 80071ca:	d133      	bne.n	8007234 <_svfiprintf_r+0x178>
 80071cc:	9b03      	ldr	r3, [sp, #12]
 80071ce:	1d1a      	adds	r2, r3, #4
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	9203      	str	r2, [sp, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	bfb8      	it	lt
 80071d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80071dc:	3702      	adds	r7, #2
 80071de:	9305      	str	r3, [sp, #20]
 80071e0:	4d2e      	ldr	r5, [pc, #184]	; (800729c <_svfiprintf_r+0x1e0>)
 80071e2:	7839      	ldrb	r1, [r7, #0]
 80071e4:	2203      	movs	r2, #3
 80071e6:	4628      	mov	r0, r5
 80071e8:	f7f8 fffa 	bl	80001e0 <memchr>
 80071ec:	b138      	cbz	r0, 80071fe <_svfiprintf_r+0x142>
 80071ee:	2340      	movs	r3, #64	; 0x40
 80071f0:	1b40      	subs	r0, r0, r5
 80071f2:	fa03 f000 	lsl.w	r0, r3, r0
 80071f6:	9b04      	ldr	r3, [sp, #16]
 80071f8:	4303      	orrs	r3, r0
 80071fa:	3701      	adds	r7, #1
 80071fc:	9304      	str	r3, [sp, #16]
 80071fe:	7839      	ldrb	r1, [r7, #0]
 8007200:	4827      	ldr	r0, [pc, #156]	; (80072a0 <_svfiprintf_r+0x1e4>)
 8007202:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007206:	2206      	movs	r2, #6
 8007208:	1c7e      	adds	r6, r7, #1
 800720a:	f7f8 ffe9 	bl	80001e0 <memchr>
 800720e:	2800      	cmp	r0, #0
 8007210:	d038      	beq.n	8007284 <_svfiprintf_r+0x1c8>
 8007212:	4b24      	ldr	r3, [pc, #144]	; (80072a4 <_svfiprintf_r+0x1e8>)
 8007214:	bb13      	cbnz	r3, 800725c <_svfiprintf_r+0x1a0>
 8007216:	9b03      	ldr	r3, [sp, #12]
 8007218:	3307      	adds	r3, #7
 800721a:	f023 0307 	bic.w	r3, r3, #7
 800721e:	3308      	adds	r3, #8
 8007220:	9303      	str	r3, [sp, #12]
 8007222:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007224:	444b      	add	r3, r9
 8007226:	9309      	str	r3, [sp, #36]	; 0x24
 8007228:	e76d      	b.n	8007106 <_svfiprintf_r+0x4a>
 800722a:	fb05 3202 	mla	r2, r5, r2, r3
 800722e:	2001      	movs	r0, #1
 8007230:	460f      	mov	r7, r1
 8007232:	e7a6      	b.n	8007182 <_svfiprintf_r+0xc6>
 8007234:	2300      	movs	r3, #0
 8007236:	3701      	adds	r7, #1
 8007238:	9305      	str	r3, [sp, #20]
 800723a:	4619      	mov	r1, r3
 800723c:	250a      	movs	r5, #10
 800723e:	4638      	mov	r0, r7
 8007240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007244:	3a30      	subs	r2, #48	; 0x30
 8007246:	2a09      	cmp	r2, #9
 8007248:	d903      	bls.n	8007252 <_svfiprintf_r+0x196>
 800724a:	2b00      	cmp	r3, #0
 800724c:	d0c8      	beq.n	80071e0 <_svfiprintf_r+0x124>
 800724e:	9105      	str	r1, [sp, #20]
 8007250:	e7c6      	b.n	80071e0 <_svfiprintf_r+0x124>
 8007252:	fb05 2101 	mla	r1, r5, r1, r2
 8007256:	2301      	movs	r3, #1
 8007258:	4607      	mov	r7, r0
 800725a:	e7f0      	b.n	800723e <_svfiprintf_r+0x182>
 800725c:	ab03      	add	r3, sp, #12
 800725e:	9300      	str	r3, [sp, #0]
 8007260:	4622      	mov	r2, r4
 8007262:	4b11      	ldr	r3, [pc, #68]	; (80072a8 <_svfiprintf_r+0x1ec>)
 8007264:	a904      	add	r1, sp, #16
 8007266:	4640      	mov	r0, r8
 8007268:	f3af 8000 	nop.w
 800726c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007270:	4681      	mov	r9, r0
 8007272:	d1d6      	bne.n	8007222 <_svfiprintf_r+0x166>
 8007274:	89a3      	ldrh	r3, [r4, #12]
 8007276:	065b      	lsls	r3, r3, #25
 8007278:	f53f af35 	bmi.w	80070e6 <_svfiprintf_r+0x2a>
 800727c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800727e:	b01d      	add	sp, #116	; 0x74
 8007280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007284:	ab03      	add	r3, sp, #12
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	4622      	mov	r2, r4
 800728a:	4b07      	ldr	r3, [pc, #28]	; (80072a8 <_svfiprintf_r+0x1ec>)
 800728c:	a904      	add	r1, sp, #16
 800728e:	4640      	mov	r0, r8
 8007290:	f000 f882 	bl	8007398 <_printf_i>
 8007294:	e7ea      	b.n	800726c <_svfiprintf_r+0x1b0>
 8007296:	bf00      	nop
 8007298:	080076ec 	.word	0x080076ec
 800729c:	080076f2 	.word	0x080076f2
 80072a0:	080076f6 	.word	0x080076f6
 80072a4:	00000000 	.word	0x00000000
 80072a8:	08007009 	.word	0x08007009

080072ac <_printf_common>:
 80072ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b0:	4691      	mov	r9, r2
 80072b2:	461f      	mov	r7, r3
 80072b4:	688a      	ldr	r2, [r1, #8]
 80072b6:	690b      	ldr	r3, [r1, #16]
 80072b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072bc:	4293      	cmp	r3, r2
 80072be:	bfb8      	it	lt
 80072c0:	4613      	movlt	r3, r2
 80072c2:	f8c9 3000 	str.w	r3, [r9]
 80072c6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072ca:	4606      	mov	r6, r0
 80072cc:	460c      	mov	r4, r1
 80072ce:	b112      	cbz	r2, 80072d6 <_printf_common+0x2a>
 80072d0:	3301      	adds	r3, #1
 80072d2:	f8c9 3000 	str.w	r3, [r9]
 80072d6:	6823      	ldr	r3, [r4, #0]
 80072d8:	0699      	lsls	r1, r3, #26
 80072da:	bf42      	ittt	mi
 80072dc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80072e0:	3302      	addmi	r3, #2
 80072e2:	f8c9 3000 	strmi.w	r3, [r9]
 80072e6:	6825      	ldr	r5, [r4, #0]
 80072e8:	f015 0506 	ands.w	r5, r5, #6
 80072ec:	d107      	bne.n	80072fe <_printf_common+0x52>
 80072ee:	f104 0a19 	add.w	sl, r4, #25
 80072f2:	68e3      	ldr	r3, [r4, #12]
 80072f4:	f8d9 2000 	ldr.w	r2, [r9]
 80072f8:	1a9b      	subs	r3, r3, r2
 80072fa:	42ab      	cmp	r3, r5
 80072fc:	dc28      	bgt.n	8007350 <_printf_common+0xa4>
 80072fe:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007302:	6822      	ldr	r2, [r4, #0]
 8007304:	3300      	adds	r3, #0
 8007306:	bf18      	it	ne
 8007308:	2301      	movne	r3, #1
 800730a:	0692      	lsls	r2, r2, #26
 800730c:	d42d      	bmi.n	800736a <_printf_common+0xbe>
 800730e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007312:	4639      	mov	r1, r7
 8007314:	4630      	mov	r0, r6
 8007316:	47c0      	blx	r8
 8007318:	3001      	adds	r0, #1
 800731a:	d020      	beq.n	800735e <_printf_common+0xb2>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	68e5      	ldr	r5, [r4, #12]
 8007320:	f8d9 2000 	ldr.w	r2, [r9]
 8007324:	f003 0306 	and.w	r3, r3, #6
 8007328:	2b04      	cmp	r3, #4
 800732a:	bf08      	it	eq
 800732c:	1aad      	subeq	r5, r5, r2
 800732e:	68a3      	ldr	r3, [r4, #8]
 8007330:	6922      	ldr	r2, [r4, #16]
 8007332:	bf0c      	ite	eq
 8007334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007338:	2500      	movne	r5, #0
 800733a:	4293      	cmp	r3, r2
 800733c:	bfc4      	itt	gt
 800733e:	1a9b      	subgt	r3, r3, r2
 8007340:	18ed      	addgt	r5, r5, r3
 8007342:	f04f 0900 	mov.w	r9, #0
 8007346:	341a      	adds	r4, #26
 8007348:	454d      	cmp	r5, r9
 800734a:	d11a      	bne.n	8007382 <_printf_common+0xd6>
 800734c:	2000      	movs	r0, #0
 800734e:	e008      	b.n	8007362 <_printf_common+0xb6>
 8007350:	2301      	movs	r3, #1
 8007352:	4652      	mov	r2, sl
 8007354:	4639      	mov	r1, r7
 8007356:	4630      	mov	r0, r6
 8007358:	47c0      	blx	r8
 800735a:	3001      	adds	r0, #1
 800735c:	d103      	bne.n	8007366 <_printf_common+0xba>
 800735e:	f04f 30ff 	mov.w	r0, #4294967295
 8007362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007366:	3501      	adds	r5, #1
 8007368:	e7c3      	b.n	80072f2 <_printf_common+0x46>
 800736a:	18e1      	adds	r1, r4, r3
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	2030      	movs	r0, #48	; 0x30
 8007370:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007374:	4422      	add	r2, r4
 8007376:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800737a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800737e:	3302      	adds	r3, #2
 8007380:	e7c5      	b.n	800730e <_printf_common+0x62>
 8007382:	2301      	movs	r3, #1
 8007384:	4622      	mov	r2, r4
 8007386:	4639      	mov	r1, r7
 8007388:	4630      	mov	r0, r6
 800738a:	47c0      	blx	r8
 800738c:	3001      	adds	r0, #1
 800738e:	d0e6      	beq.n	800735e <_printf_common+0xb2>
 8007390:	f109 0901 	add.w	r9, r9, #1
 8007394:	e7d8      	b.n	8007348 <_printf_common+0x9c>
	...

08007398 <_printf_i>:
 8007398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800739c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073a0:	460c      	mov	r4, r1
 80073a2:	7e09      	ldrb	r1, [r1, #24]
 80073a4:	b085      	sub	sp, #20
 80073a6:	296e      	cmp	r1, #110	; 0x6e
 80073a8:	4617      	mov	r7, r2
 80073aa:	4606      	mov	r6, r0
 80073ac:	4698      	mov	r8, r3
 80073ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073b0:	f000 80b3 	beq.w	800751a <_printf_i+0x182>
 80073b4:	d822      	bhi.n	80073fc <_printf_i+0x64>
 80073b6:	2963      	cmp	r1, #99	; 0x63
 80073b8:	d036      	beq.n	8007428 <_printf_i+0x90>
 80073ba:	d80a      	bhi.n	80073d2 <_printf_i+0x3a>
 80073bc:	2900      	cmp	r1, #0
 80073be:	f000 80b9 	beq.w	8007534 <_printf_i+0x19c>
 80073c2:	2958      	cmp	r1, #88	; 0x58
 80073c4:	f000 8083 	beq.w	80074ce <_printf_i+0x136>
 80073c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073cc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80073d0:	e032      	b.n	8007438 <_printf_i+0xa0>
 80073d2:	2964      	cmp	r1, #100	; 0x64
 80073d4:	d001      	beq.n	80073da <_printf_i+0x42>
 80073d6:	2969      	cmp	r1, #105	; 0x69
 80073d8:	d1f6      	bne.n	80073c8 <_printf_i+0x30>
 80073da:	6820      	ldr	r0, [r4, #0]
 80073dc:	6813      	ldr	r3, [r2, #0]
 80073de:	0605      	lsls	r5, r0, #24
 80073e0:	f103 0104 	add.w	r1, r3, #4
 80073e4:	d52a      	bpl.n	800743c <_printf_i+0xa4>
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	6011      	str	r1, [r2, #0]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	da03      	bge.n	80073f6 <_printf_i+0x5e>
 80073ee:	222d      	movs	r2, #45	; 0x2d
 80073f0:	425b      	negs	r3, r3
 80073f2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80073f6:	486f      	ldr	r0, [pc, #444]	; (80075b4 <_printf_i+0x21c>)
 80073f8:	220a      	movs	r2, #10
 80073fa:	e039      	b.n	8007470 <_printf_i+0xd8>
 80073fc:	2973      	cmp	r1, #115	; 0x73
 80073fe:	f000 809d 	beq.w	800753c <_printf_i+0x1a4>
 8007402:	d808      	bhi.n	8007416 <_printf_i+0x7e>
 8007404:	296f      	cmp	r1, #111	; 0x6f
 8007406:	d020      	beq.n	800744a <_printf_i+0xb2>
 8007408:	2970      	cmp	r1, #112	; 0x70
 800740a:	d1dd      	bne.n	80073c8 <_printf_i+0x30>
 800740c:	6823      	ldr	r3, [r4, #0]
 800740e:	f043 0320 	orr.w	r3, r3, #32
 8007412:	6023      	str	r3, [r4, #0]
 8007414:	e003      	b.n	800741e <_printf_i+0x86>
 8007416:	2975      	cmp	r1, #117	; 0x75
 8007418:	d017      	beq.n	800744a <_printf_i+0xb2>
 800741a:	2978      	cmp	r1, #120	; 0x78
 800741c:	d1d4      	bne.n	80073c8 <_printf_i+0x30>
 800741e:	2378      	movs	r3, #120	; 0x78
 8007420:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007424:	4864      	ldr	r0, [pc, #400]	; (80075b8 <_printf_i+0x220>)
 8007426:	e055      	b.n	80074d4 <_printf_i+0x13c>
 8007428:	6813      	ldr	r3, [r2, #0]
 800742a:	1d19      	adds	r1, r3, #4
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	6011      	str	r1, [r2, #0]
 8007430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007434:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007438:	2301      	movs	r3, #1
 800743a:	e08c      	b.n	8007556 <_printf_i+0x1be>
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6011      	str	r1, [r2, #0]
 8007440:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007444:	bf18      	it	ne
 8007446:	b21b      	sxthne	r3, r3
 8007448:	e7cf      	b.n	80073ea <_printf_i+0x52>
 800744a:	6813      	ldr	r3, [r2, #0]
 800744c:	6825      	ldr	r5, [r4, #0]
 800744e:	1d18      	adds	r0, r3, #4
 8007450:	6010      	str	r0, [r2, #0]
 8007452:	0628      	lsls	r0, r5, #24
 8007454:	d501      	bpl.n	800745a <_printf_i+0xc2>
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	e002      	b.n	8007460 <_printf_i+0xc8>
 800745a:	0668      	lsls	r0, r5, #25
 800745c:	d5fb      	bpl.n	8007456 <_printf_i+0xbe>
 800745e:	881b      	ldrh	r3, [r3, #0]
 8007460:	4854      	ldr	r0, [pc, #336]	; (80075b4 <_printf_i+0x21c>)
 8007462:	296f      	cmp	r1, #111	; 0x6f
 8007464:	bf14      	ite	ne
 8007466:	220a      	movne	r2, #10
 8007468:	2208      	moveq	r2, #8
 800746a:	2100      	movs	r1, #0
 800746c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007470:	6865      	ldr	r5, [r4, #4]
 8007472:	60a5      	str	r5, [r4, #8]
 8007474:	2d00      	cmp	r5, #0
 8007476:	f2c0 8095 	blt.w	80075a4 <_printf_i+0x20c>
 800747a:	6821      	ldr	r1, [r4, #0]
 800747c:	f021 0104 	bic.w	r1, r1, #4
 8007480:	6021      	str	r1, [r4, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d13d      	bne.n	8007502 <_printf_i+0x16a>
 8007486:	2d00      	cmp	r5, #0
 8007488:	f040 808e 	bne.w	80075a8 <_printf_i+0x210>
 800748c:	4665      	mov	r5, ip
 800748e:	2a08      	cmp	r2, #8
 8007490:	d10b      	bne.n	80074aa <_printf_i+0x112>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	07db      	lsls	r3, r3, #31
 8007496:	d508      	bpl.n	80074aa <_printf_i+0x112>
 8007498:	6923      	ldr	r3, [r4, #16]
 800749a:	6862      	ldr	r2, [r4, #4]
 800749c:	429a      	cmp	r2, r3
 800749e:	bfde      	ittt	le
 80074a0:	2330      	movle	r3, #48	; 0x30
 80074a2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074a6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074aa:	ebac 0305 	sub.w	r3, ip, r5
 80074ae:	6123      	str	r3, [r4, #16]
 80074b0:	f8cd 8000 	str.w	r8, [sp]
 80074b4:	463b      	mov	r3, r7
 80074b6:	aa03      	add	r2, sp, #12
 80074b8:	4621      	mov	r1, r4
 80074ba:	4630      	mov	r0, r6
 80074bc:	f7ff fef6 	bl	80072ac <_printf_common>
 80074c0:	3001      	adds	r0, #1
 80074c2:	d14d      	bne.n	8007560 <_printf_i+0x1c8>
 80074c4:	f04f 30ff 	mov.w	r0, #4294967295
 80074c8:	b005      	add	sp, #20
 80074ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80074ce:	4839      	ldr	r0, [pc, #228]	; (80075b4 <_printf_i+0x21c>)
 80074d0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80074d4:	6813      	ldr	r3, [r2, #0]
 80074d6:	6821      	ldr	r1, [r4, #0]
 80074d8:	1d1d      	adds	r5, r3, #4
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	6015      	str	r5, [r2, #0]
 80074de:	060a      	lsls	r2, r1, #24
 80074e0:	d50b      	bpl.n	80074fa <_printf_i+0x162>
 80074e2:	07ca      	lsls	r2, r1, #31
 80074e4:	bf44      	itt	mi
 80074e6:	f041 0120 	orrmi.w	r1, r1, #32
 80074ea:	6021      	strmi	r1, [r4, #0]
 80074ec:	b91b      	cbnz	r3, 80074f6 <_printf_i+0x15e>
 80074ee:	6822      	ldr	r2, [r4, #0]
 80074f0:	f022 0220 	bic.w	r2, r2, #32
 80074f4:	6022      	str	r2, [r4, #0]
 80074f6:	2210      	movs	r2, #16
 80074f8:	e7b7      	b.n	800746a <_printf_i+0xd2>
 80074fa:	064d      	lsls	r5, r1, #25
 80074fc:	bf48      	it	mi
 80074fe:	b29b      	uxthmi	r3, r3
 8007500:	e7ef      	b.n	80074e2 <_printf_i+0x14a>
 8007502:	4665      	mov	r5, ip
 8007504:	fbb3 f1f2 	udiv	r1, r3, r2
 8007508:	fb02 3311 	mls	r3, r2, r1, r3
 800750c:	5cc3      	ldrb	r3, [r0, r3]
 800750e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007512:	460b      	mov	r3, r1
 8007514:	2900      	cmp	r1, #0
 8007516:	d1f5      	bne.n	8007504 <_printf_i+0x16c>
 8007518:	e7b9      	b.n	800748e <_printf_i+0xf6>
 800751a:	6813      	ldr	r3, [r2, #0]
 800751c:	6825      	ldr	r5, [r4, #0]
 800751e:	6961      	ldr	r1, [r4, #20]
 8007520:	1d18      	adds	r0, r3, #4
 8007522:	6010      	str	r0, [r2, #0]
 8007524:	0628      	lsls	r0, r5, #24
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	d501      	bpl.n	800752e <_printf_i+0x196>
 800752a:	6019      	str	r1, [r3, #0]
 800752c:	e002      	b.n	8007534 <_printf_i+0x19c>
 800752e:	066a      	lsls	r2, r5, #25
 8007530:	d5fb      	bpl.n	800752a <_printf_i+0x192>
 8007532:	8019      	strh	r1, [r3, #0]
 8007534:	2300      	movs	r3, #0
 8007536:	6123      	str	r3, [r4, #16]
 8007538:	4665      	mov	r5, ip
 800753a:	e7b9      	b.n	80074b0 <_printf_i+0x118>
 800753c:	6813      	ldr	r3, [r2, #0]
 800753e:	1d19      	adds	r1, r3, #4
 8007540:	6011      	str	r1, [r2, #0]
 8007542:	681d      	ldr	r5, [r3, #0]
 8007544:	6862      	ldr	r2, [r4, #4]
 8007546:	2100      	movs	r1, #0
 8007548:	4628      	mov	r0, r5
 800754a:	f7f8 fe49 	bl	80001e0 <memchr>
 800754e:	b108      	cbz	r0, 8007554 <_printf_i+0x1bc>
 8007550:	1b40      	subs	r0, r0, r5
 8007552:	6060      	str	r0, [r4, #4]
 8007554:	6863      	ldr	r3, [r4, #4]
 8007556:	6123      	str	r3, [r4, #16]
 8007558:	2300      	movs	r3, #0
 800755a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800755e:	e7a7      	b.n	80074b0 <_printf_i+0x118>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	462a      	mov	r2, r5
 8007564:	4639      	mov	r1, r7
 8007566:	4630      	mov	r0, r6
 8007568:	47c0      	blx	r8
 800756a:	3001      	adds	r0, #1
 800756c:	d0aa      	beq.n	80074c4 <_printf_i+0x12c>
 800756e:	6823      	ldr	r3, [r4, #0]
 8007570:	079b      	lsls	r3, r3, #30
 8007572:	d413      	bmi.n	800759c <_printf_i+0x204>
 8007574:	68e0      	ldr	r0, [r4, #12]
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	4298      	cmp	r0, r3
 800757a:	bfb8      	it	lt
 800757c:	4618      	movlt	r0, r3
 800757e:	e7a3      	b.n	80074c8 <_printf_i+0x130>
 8007580:	2301      	movs	r3, #1
 8007582:	464a      	mov	r2, r9
 8007584:	4639      	mov	r1, r7
 8007586:	4630      	mov	r0, r6
 8007588:	47c0      	blx	r8
 800758a:	3001      	adds	r0, #1
 800758c:	d09a      	beq.n	80074c4 <_printf_i+0x12c>
 800758e:	3501      	adds	r5, #1
 8007590:	68e3      	ldr	r3, [r4, #12]
 8007592:	9a03      	ldr	r2, [sp, #12]
 8007594:	1a9b      	subs	r3, r3, r2
 8007596:	42ab      	cmp	r3, r5
 8007598:	dcf2      	bgt.n	8007580 <_printf_i+0x1e8>
 800759a:	e7eb      	b.n	8007574 <_printf_i+0x1dc>
 800759c:	2500      	movs	r5, #0
 800759e:	f104 0919 	add.w	r9, r4, #25
 80075a2:	e7f5      	b.n	8007590 <_printf_i+0x1f8>
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1ac      	bne.n	8007502 <_printf_i+0x16a>
 80075a8:	7803      	ldrb	r3, [r0, #0]
 80075aa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075ae:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075b2:	e76c      	b.n	800748e <_printf_i+0xf6>
 80075b4:	080076fd 	.word	0x080076fd
 80075b8:	0800770e 	.word	0x0800770e

080075bc <memcpy>:
 80075bc:	b510      	push	{r4, lr}
 80075be:	1e43      	subs	r3, r0, #1
 80075c0:	440a      	add	r2, r1
 80075c2:	4291      	cmp	r1, r2
 80075c4:	d100      	bne.n	80075c8 <memcpy+0xc>
 80075c6:	bd10      	pop	{r4, pc}
 80075c8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075d0:	e7f7      	b.n	80075c2 <memcpy+0x6>

080075d2 <memmove>:
 80075d2:	4288      	cmp	r0, r1
 80075d4:	b510      	push	{r4, lr}
 80075d6:	eb01 0302 	add.w	r3, r1, r2
 80075da:	d807      	bhi.n	80075ec <memmove+0x1a>
 80075dc:	1e42      	subs	r2, r0, #1
 80075de:	4299      	cmp	r1, r3
 80075e0:	d00a      	beq.n	80075f8 <memmove+0x26>
 80075e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e6:	f802 4f01 	strb.w	r4, [r2, #1]!
 80075ea:	e7f8      	b.n	80075de <memmove+0xc>
 80075ec:	4283      	cmp	r3, r0
 80075ee:	d9f5      	bls.n	80075dc <memmove+0xa>
 80075f0:	1881      	adds	r1, r0, r2
 80075f2:	1ad2      	subs	r2, r2, r3
 80075f4:	42d3      	cmn	r3, r2
 80075f6:	d100      	bne.n	80075fa <memmove+0x28>
 80075f8:	bd10      	pop	{r4, pc}
 80075fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80075fe:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007602:	e7f7      	b.n	80075f4 <memmove+0x22>

08007604 <_realloc_r>:
 8007604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007606:	4607      	mov	r7, r0
 8007608:	4614      	mov	r4, r2
 800760a:	460e      	mov	r6, r1
 800760c:	b921      	cbnz	r1, 8007618 <_realloc_r+0x14>
 800760e:	4611      	mov	r1, r2
 8007610:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007614:	f7ff bc6c 	b.w	8006ef0 <_malloc_r>
 8007618:	b922      	cbnz	r2, 8007624 <_realloc_r+0x20>
 800761a:	f7ff fc1b 	bl	8006e54 <_free_r>
 800761e:	4625      	mov	r5, r4
 8007620:	4628      	mov	r0, r5
 8007622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007624:	f000 f814 	bl	8007650 <_malloc_usable_size_r>
 8007628:	42a0      	cmp	r0, r4
 800762a:	d20f      	bcs.n	800764c <_realloc_r+0x48>
 800762c:	4621      	mov	r1, r4
 800762e:	4638      	mov	r0, r7
 8007630:	f7ff fc5e 	bl	8006ef0 <_malloc_r>
 8007634:	4605      	mov	r5, r0
 8007636:	2800      	cmp	r0, #0
 8007638:	d0f2      	beq.n	8007620 <_realloc_r+0x1c>
 800763a:	4631      	mov	r1, r6
 800763c:	4622      	mov	r2, r4
 800763e:	f7ff ffbd 	bl	80075bc <memcpy>
 8007642:	4631      	mov	r1, r6
 8007644:	4638      	mov	r0, r7
 8007646:	f7ff fc05 	bl	8006e54 <_free_r>
 800764a:	e7e9      	b.n	8007620 <_realloc_r+0x1c>
 800764c:	4635      	mov	r5, r6
 800764e:	e7e7      	b.n	8007620 <_realloc_r+0x1c>

08007650 <_malloc_usable_size_r>:
 8007650:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007654:	1f18      	subs	r0, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	bfbc      	itt	lt
 800765a:	580b      	ldrlt	r3, [r1, r0]
 800765c:	18c0      	addlt	r0, r0, r3
 800765e:	4770      	bx	lr

08007660 <_init>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	bf00      	nop
 8007664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007666:	bc08      	pop	{r3}
 8007668:	469e      	mov	lr, r3
 800766a:	4770      	bx	lr

0800766c <_fini>:
 800766c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800766e:	bf00      	nop
 8007670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007672:	bc08      	pop	{r3}
 8007674:	469e      	mov	lr, r3
 8007676:	4770      	bx	lr
