
Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b104  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800b2b8  0800b2b8  0001b2b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b4f8  0800b4f8  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b4f8  0800b4f8  0001b4f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b500  0800b500  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b500  0800b500  0001b500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b504  0800b504  0001b504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  0800b508  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb4  2000020c  0800b714  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021c0  0800b714  000221c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cde  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000482b  00000000  00000000  00040f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  00045748  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  00047038  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0c1  00000000  00000000  00048708  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000191e3  00000000  00000000  000727c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8759  00000000  00000000  0008b9ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174105  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c4c  00000000  00000000  00174180  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000020c 	.word	0x2000020c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b29c 	.word	0x0800b29c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000210 	.word	0x20000210
 80001ec:	0800b29c 	.word	0x0800b29c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_ADC1_Init+0x9c>)
 8000e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e6c:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <MX_ADC1_Init+0xa0>)
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e8c:	f001 f876 	bl	8001f7c <HAL_ADC_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 fcb9 	bl	800180c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000eac:	f001 f8aa 	bl	8002004 <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eb6:	f000 fca9 	bl	800180c <Error_Handler>
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000280 	.word	0x20000280
 8000ec8:	40012000 	.word	0x40012000
 8000ecc:	0f000001 	.word	0x0f000001

08000ed0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_ADC2_Init+0x9c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f10:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_ADC2_Init+0xa0>)
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f30:	f001 f824 	bl	8001f7c <HAL_ADC_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fc67 	bl	800180c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f50:	f001 f858 	bl	8002004 <HAL_ADC_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000f5a:	f000 fc57 	bl	800180c <Error_Handler>
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000238 	.word	0x20000238
 8000f6c:	40012100 	.word	0x40012100
 8000f70:	0f000001 	.word	0x0f000001

08000f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a2e      	ldr	r2, [pc, #184]	; (800104c <HAL_ADC_MspInit+0xd8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d128      	bne.n	8000fe8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a25      	ldr	r2, [pc, #148]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481c      	ldr	r0, [pc, #112]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000fe2:	f002 f8a5 	bl	8003130 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000fe6:	e02c      	b.n	8001042 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d127      	bne.n	8001042 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800102a:	2302      	movs	r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 800103e:	f002 f877 	bl	8003130 <HAL_GPIO_Init>
}
 8001042:	bf00      	nop
 8001044:	3730      	adds	r7, #48	; 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40012000 	.word	0x40012000
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40012100 	.word	0x40012100

0800105c <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_DAC_Init+0x64>)
 800106c:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <MX_DAC_Init+0x68>)
 800106e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001070:	4813      	ldr	r0, [pc, #76]	; (80010c0 <MX_DAC_Init+0x64>)
 8001072:	f001 fb06 	bl	8002682 <HAL_DAC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800107c:	f000 fbc6 	bl	800180c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001080:	2324      	movs	r3, #36	; 0x24
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <MX_DAC_Init+0x64>)
 8001090:	f001 fbe6 	bl	8002860 <HAL_DAC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800109a:	f000 fbb7 	bl	800180c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800109e:	232c      	movs	r3, #44	; 0x2c
 80010a0:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	2210      	movs	r2, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_DAC_Init+0x64>)
 80010aa:	f001 fbd9 	bl	8002860 <HAL_DAC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80010b4:	f000 fbaa 	bl	800180c <Error_Handler>
  }

}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000328 	.word	0x20000328
 80010c4:	40007400 	.word	0x40007400

080010c8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a48      	ldr	r2, [pc, #288]	; (8001208 <HAL_DAC_MspInit+0x140>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f040 808a 	bne.w	8001200 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_DAC_MspInit+0x144>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a45      	ldr	r2, [pc, #276]	; (800120c <HAL_DAC_MspInit+0x144>)
 80010f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_DAC_MspInit+0x144>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_DAC_MspInit+0x144>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a3e      	ldr	r2, [pc, #248]	; (800120c <HAL_DAC_MspInit+0x144>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_DAC_MspInit+0x144>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001124:	2330      	movs	r3, #48	; 0x30
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001128:	2303      	movs	r3, #3
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4836      	ldr	r0, [pc, #216]	; (8001210 <HAL_DAC_MspInit+0x148>)
 8001138:	f001 fffa 	bl	8003130 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 800113e:	4a36      	ldr	r2, [pc, #216]	; (8001218 <HAL_DAC_MspInit+0x150>)
 8001140:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001144:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001148:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001164:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001168:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001174:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001182:	4824      	ldr	r0, [pc, #144]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001184:	f001 fc44 	bl	8002a10 <HAL_DMA_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800118e:	f000 fb3d 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011a0:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_DAC_MspInit+0x158>)
 80011a2:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011a6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011aa:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011ae:	2240      	movs	r2, #64	; 0x40
 80011b0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d6:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011e6:	f001 fc13 	bl	8002a10 <HAL_DMA_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80011f0:	f000 fb0c 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40007400 	.word	0x40007400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000
 8001214:	200002c8 	.word	0x200002c8
 8001218:	40026088 	.word	0x40026088
 800121c:	2000033c 	.word	0x2000033c
 8001220:	400260a0 	.word	0x400260a0

08001224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_DMA_Init+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <MX_DMA_Init+0x88>)
 8001234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_DMA_Init+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_DMA_Init+0x88>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_DMA_Init+0x88>)
 8001250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_DMA_Init+0x88>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2010      	movs	r0, #16
 8001268:	f001 f9d5 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800126c:	2010      	movs	r0, #16
 800126e:	f001 f9ee 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2011      	movs	r0, #17
 8001278:	f001 f9cd 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800127c:	2011      	movs	r0, #17
 800127e:	f001 f9e6 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	203a      	movs	r0, #58	; 0x3a
 8001288:	f001 f9c5 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800128c:	203a      	movs	r0, #58	; 0x3a
 800128e:	f001 f9de 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2046      	movs	r0, #70	; 0x46
 8001298:	f001 f9bd 	bl	8002616 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800129c:	2046      	movs	r0, #70	; 0x46
 800129e:	f001 f9d6 	bl	800264e <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_GPIO_Init+0x68>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <MX_GPIO_Init+0x68>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_GPIO_Init+0x68>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_GPIO_Init+0x68>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <MX_GPIO_Init+0x68>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_GPIO_Init+0x68>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_GPIO_Init+0x68>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <MX_GPIO_Init+0x68>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_GPIO_Init+0x68>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_I2C1_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_I2C1_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_I2C1_Init+0x74>)
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <MX_I2C1_Init+0x7c>)
 800132a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_I2C1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_I2C1_Init+0x74>)
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_I2C1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_I2C1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_I2C1_Init+0x74>)
 800135a:	f002 f893 	bl	8003484 <HAL_I2C_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 fa52 	bl	800180c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <MX_I2C1_Init+0x74>)
 800136c:	f002 f9c2 	bl	80036f4 <HAL_I2CEx_ConfigAnalogFilter>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001376:	f000 fa49 	bl	800180c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_I2C1_Init+0x74>)
 800137e:	f002 f9f5 	bl	800376c <HAL_I2CEx_ConfigDigitalFilter>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001388:	f000 fa40 	bl	800180c <Error_Handler>
  }

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	2000039c 	.word	0x2000039c
 8001394:	40005400 	.word	0x40005400
 8001398:	000186a0 	.word	0x000186a0

0800139c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_I2C_MspInit+0x84>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12b      	bne.n	8001416 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_I2C_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_I2C_MspInit+0x88>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_I2C_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013da:	23c0      	movs	r3, #192	; 0xc0
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013de:	2312      	movs	r3, #18
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ea:	2304      	movs	r3, #4
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <HAL_I2C_MspInit+0x8c>)
 80013f6:	f001 fe9b 	bl	8003130 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_I2C_MspInit+0x88>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_I2C_MspInit+0x88>)
 8001404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_I2C_MspInit+0x88>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40005400 	.word	0x40005400
 8001424:	40023800 	.word	0x40023800
 8001428:	40020400 	.word	0x40020400
 800142c:	00000000 	.word	0x00000000

08001430 <get_sine_val>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 72000000;	// APB1 Timer Clocks
int Period = 1;				// Tim2 Period


void get_sine_val(void){
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	e06b      	b.n	8001514 <get_sine_val+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f827 	bl	8000494 <__aeabi_i2d>
 8001446:	a340      	add	r3, pc, #256	; (adr r3, 8001548 <get_sine_val+0x118>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f88c 	bl	8000568 <__aeabi_dmul>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b34      	ldr	r3, [pc, #208]	; (8001530 <get_sine_val+0x100>)
 800145e:	f7ff f9ad 	bl	80007bc <__aeabi_ddiv>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	ec44 3b17 	vmov	d7, r3, r4
 800146a:	eeb0 0a47 	vmov.f32	s0, s14
 800146e:	eef0 0a67 	vmov.f32	s1, s15
 8001472:	f008 ff01 	bl	800a278 <sin>
 8001476:	ec51 0b10 	vmov	r0, r1, d0
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <get_sine_val+0x104>)
 8001480:	f7fe febc 	bl	80001fc <__adddf3>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	4625      	mov	r5, r4
 800148a:	461c      	mov	r4, r3
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <get_sine_val+0x108>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0fda      	lsrs	r2, r3, #31
 8001492:	4413      	add	r3, r2
 8001494:	105b      	asrs	r3, r3, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fffc 	bl	8000494 <__aeabi_i2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4620      	mov	r0, r4
 80014a2:	4629      	mov	r1, r5
 80014a4:	f7ff f860 	bl	8000568 <__aeabi_dmul>
 80014a8:	4603      	mov	r3, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	4618      	mov	r0, r3
 80014ae:	4621      	mov	r1, r4
 80014b0:	f7ff fb1c 	bl	8000aec <__aeabi_d2uiz>
 80014b4:	4601      	mov	r1, r0
 80014b6:	4a21      	ldr	r2, [pc, #132]	; (800153c <get_sine_val+0x10c>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <get_sine_val+0x110>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffe6 	bl	8000494 <__aeabi_i2d>
 80014c8:	4605      	mov	r5, r0
 80014ca:	460e      	mov	r6, r1
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <get_sine_val+0x10c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ffcd 	bl	8000474 <__aeabi_ui2d>
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <get_sine_val+0x114>)
 80014dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4623      	mov	r3, r4
 80014e4:	f7ff f840 	bl	8000568 <__aeabi_dmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	461a      	mov	r2, r3
 80014ee:	4623      	mov	r3, r4
 80014f0:	4628      	mov	r0, r5
 80014f2:	4631      	mov	r1, r6
 80014f4:	f7fe fe82 	bl	80001fc <__adddf3>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	4618      	mov	r0, r3
 80014fe:	4621      	mov	r1, r4
 8001500:	f7ff faf4 	bl	8000aec <__aeabi_d2uiz>
 8001504:	4601      	mov	r1, r0
 8001506:	4a0d      	ldr	r2, [pc, #52]	; (800153c <get_sine_val+0x10c>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3301      	adds	r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2bc7      	cmp	r3, #199	; 0xc7
 8001518:	dd90      	ble.n	800143c <get_sine_val+0xc>
	}
	sine_val[Ns] = 0;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <get_sine_val+0x10c>)
 800151c:	2200      	movs	r2, #0
 800151e:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	40690000 	.word	0x40690000
 8001534:	3ff00000 	.word	0x3ff00000
 8001538:	20000000 	.word	0x20000000
 800153c:	200003f8 	.word	0x200003f8
 8001540:	20000010 	.word	0x20000010
 8001544:	20000008 	.word	0x20000008
 8001548:	4d12d84a 	.word	0x4d12d84a
 800154c:	400921fb 	.word	0x400921fb

08001550 <set_clock_TIM2>:



void set_clock_TIM2(void){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_1*(Period + 1) ) - 1;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <set_clock_TIM2+0x5c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <set_clock_TIM2+0x60>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	099b      	lsrs	r3, r3, #6
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <set_clock_TIM2+0x64>)
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	3201      	adds	r2, #1
 8001566:	4914      	ldr	r1, [pc, #80]	; (80015b8 <set_clock_TIM2+0x68>)
 8001568:	6809      	ldr	r1, [r1, #0]
 800156a:	fb01 f202 	mul.w	r2, r1, r2
 800156e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001572:	3b01      	subs	r3, #1
 8001574:	461a      	mov	r2, r3
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <set_clock_TIM2+0x6c>)
 8001578:	601a      	str	r2, [r3, #0]

	  htim2.Instance = TIM2;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <set_clock_TIM2+0x70>)
 800157c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001580:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <set_clock_TIM2+0x64>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <set_clock_TIM2+0x70>)
 800158a:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <set_clock_TIM2+0x6c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <set_clock_TIM2+0x70>)
 8001594:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001596:	480a      	ldr	r0, [pc, #40]	; (80015c0 <set_clock_TIM2+0x70>)
 8001598:	f003 ff0c 	bl	80053b4 <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <set_clock_TIM2+0x56>
	  {
	    Error_Handler();
 80015a2:	f000 f933 	bl	800180c <Error_Handler>
	  }
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000001c 	.word	0x2000001c
 80015b0:	51eb851f 	.word	0x51eb851f
 80015b4:	20000020 	.word	0x20000020
 80015b8:	20000014 	.word	0x20000014
 80015bc:	200003f4 	.word	0x200003f4
 80015c0:	20000760 	.word	0x20000760

080015c4 <set_clock_TIM4>:

void set_clock_TIM4(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_2*(Period + 1) ) - 1;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <set_clock_TIM4+0x58>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <set_clock_TIM4+0x5c>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	4a13      	ldr	r2, [pc, #76]	; (8001624 <set_clock_TIM4+0x60>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	3201      	adds	r2, #1
 80015da:	4913      	ldr	r1, [pc, #76]	; (8001628 <set_clock_TIM4+0x64>)
 80015dc:	6809      	ldr	r1, [r1, #0]
 80015de:	fb01 f202 	mul.w	r2, r1, r2
 80015e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80015e6:	3b01      	subs	r3, #1
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <set_clock_TIM4+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]

	  htim4.Instance = TIM4;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <set_clock_TIM4+0x6c>)
 80015f0:	4a10      	ldr	r2, [pc, #64]	; (8001634 <set_clock_TIM4+0x70>)
 80015f2:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period = Period; //+1
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <set_clock_TIM4+0x60>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <set_clock_TIM4+0x6c>)
 80015fc:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <set_clock_TIM4+0x68>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <set_clock_TIM4+0x6c>)
 8001606:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <set_clock_TIM4+0x6c>)
 800160a:	f003 fed3 	bl	80053b4 <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <set_clock_TIM4+0x54>
	  {
	    Error_Handler();
 8001614:	f000 f8fa 	bl	800180c <Error_Handler>
	  }
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000001c 	.word	0x2000001c
 8001620:	51eb851f 	.word	0x51eb851f
 8001624:	20000020 	.word	0x20000020
 8001628:	20000018 	.word	0x20000018
 800162c:	200003f4 	.word	0x200003f4
 8001630:	20000720 	.word	0x20000720
 8001634:	40000800 	.word	0x40000800

08001638 <HAL_UART_RxCpltCallback>:
/* Setting up UART communications*/
#define uartSize 1
uint8_t rx_buff[uartSize];
uint8_t tx_buff[] = {0b00000010};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

	// Do something

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 8001640:	2201      	movs	r2, #1
 8001642:	4904      	ldr	r1, [pc, #16]	; (8001654 <HAL_UART_RxCpltCallback+0x1c>)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <HAL_UART_RxCpltCallback+0x20>)
 8001646:	f004 fa2b 	bl	8005aa0 <HAL_UART_Receive_DMA>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200003f0 	.word	0x200003f0
 8001658:	20000860 	.word	0x20000860

0800165c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
	int i = 100;
 8001664:	2364      	movs	r3, #100	; 0x64
 8001666:	60fb      	str	r3, [r7, #12]
	while(i>0){
 8001668:	e002      	b.n	8001670 <HAL_UART_TxCpltCallback+0x14>
		i = i -1;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	3b01      	subs	r3, #1
 800166e:	60fb      	str	r3, [r7, #12]
	while(i>0){
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2b00      	cmp	r3, #0
 8001674:	dcf9      	bgt.n	800166a <HAL_UART_TxCpltCallback+0xe>
	}

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 8001676:	2201      	movs	r2, #1
 8001678:	4903      	ldr	r1, [pc, #12]	; (8001688 <HAL_UART_TxCpltCallback+0x2c>)
 800167a:	4804      	ldr	r0, [pc, #16]	; (800168c <HAL_UART_TxCpltCallback+0x30>)
 800167c:	f004 fa10 	bl	8005aa0 <HAL_UART_Receive_DMA>
}
 8001680:	bf00      	nop
 8001682:	3710      	adds	r7, #16
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200003f0 	.word	0x200003f0
 800168c:	20000860 	.word	0x20000860

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001696:	f000 fbdd 	bl	8001e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800169a:	f000 f84d 	bl	8001738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169e:	f7ff fe07 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a2:	f7ff fdbf 	bl	8001224 <MX_DMA_Init>
  MX_DAC_Init();
 80016a6:	f7ff fcd9 	bl	800105c <MX_DAC_Init>
  MX_TIM2_Init();
 80016aa:	f000 f995 	bl	80019d8 <MX_TIM2_Init>
  MX_TIM4_Init();
 80016ae:	f000 f9df 	bl	8001a70 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80016b2:	f008 f80b 	bl	80096cc <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80016b6:	f7ff fbb9 	bl	8000e2c <MX_ADC1_Init>
  MX_ADC2_Init();
 80016ba:	f7ff fc09 	bl	8000ed0 <MX_ADC2_Init>
  MX_I2C1_Init();
 80016be:	f7ff fe2d 	bl	800131c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016c2:	f000 fa57 	bl	8001b74 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016c6:	f000 fa7f 	bl	8001bc8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Sine function */
  set_clock_TIM2();						// Setting frequency of timer 2
 80016ca:	f7ff ff41 	bl	8001550 <set_clock_TIM2>
  set_clock_TIM4();						// Setting frequency of timer 4
 80016ce:	f7ff ff79 	bl	80015c4 <set_clock_TIM4>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 80016d2:	4812      	ldr	r0, [pc, #72]	; (800171c <main+0x8c>)
 80016d4:	f003 fe99 	bl	800540a <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);			// Start timer 4
 80016d8:	4811      	ldr	r0, [pc, #68]	; (8001720 <main+0x90>)
 80016da:	f003 fe96 	bl	800540a <HAL_TIM_Base_Start>
  get_sine_val();						// Call get sineval function
 80016de:	f7ff fea7 	bl	8001430 <get_sine_val>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	23c8      	movs	r3, #200	; 0xc8
 80016e8:	4a0e      	ldr	r2, [pc, #56]	; (8001724 <main+0x94>)
 80016ea:	2100      	movs	r1, #0
 80016ec:	480e      	ldr	r0, [pc, #56]	; (8001728 <main+0x98>)
 80016ee:	f000 ffeb 	bl	80026c8 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 80016f2:	2300      	movs	r3, #0
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	23c8      	movs	r3, #200	; 0xc8
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <main+0x94>)
 80016fa:	2110      	movs	r1, #16
 80016fc:	480a      	ldr	r0, [pc, #40]	; (8001728 <main+0x98>)
 80016fe:	f000 ffe3 	bl	80026c8 <HAL_DAC_Start_DMA>

  /* Setting up USB communications*/
  char txBuf[8];
  uint8_t count = 1;
 8001702:	2301      	movs	r3, #1
 8001704:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//
	  HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
 8001706:	2201      	movs	r2, #1
 8001708:	4908      	ldr	r1, [pc, #32]	; (800172c <main+0x9c>)
 800170a:	4809      	ldr	r0, [pc, #36]	; (8001730 <main+0xa0>)
 800170c:	f004 f9c8 	bl	8005aa0 <HAL_UART_Receive_DMA>
	  HAL_UART_Transmit_DMA(&huart1, tx_buff, uartSize);
 8001710:	2201      	movs	r2, #1
 8001712:	4908      	ldr	r1, [pc, #32]	; (8001734 <main+0xa4>)
 8001714:	4806      	ldr	r0, [pc, #24]	; (8001730 <main+0xa0>)
 8001716:	f004 f957 	bl	80059c8 <HAL_UART_Transmit_DMA>
	  HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
 800171a:	e7f4      	b.n	8001706 <main+0x76>
 800171c:	20000760 	.word	0x20000760
 8001720:	20000720 	.word	0x20000720
 8001724:	200003f8 	.word	0x200003f8
 8001728:	20000328 	.word	0x20000328
 800172c:	200003f0 	.word	0x200003f0
 8001730:	20000860 	.word	0x20000860
 8001734:	20000024 	.word	0x20000024

08001738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b094      	sub	sp, #80	; 0x50
 800173c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800173e:	f107 0320 	add.w	r3, r7, #32
 8001742:	2230      	movs	r2, #48	; 0x30
 8001744:	2100      	movs	r1, #0
 8001746:	4618      	mov	r0, r3
 8001748:	f008 fcd4 	bl	800a0f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800174c:	f107 030c 	add.w	r3, r7, #12
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800175c:	2300      	movs	r3, #0
 800175e:	60bb      	str	r3, [r7, #8]
 8001760:	4b28      	ldr	r3, [pc, #160]	; (8001804 <SystemClock_Config+0xcc>)
 8001762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001764:	4a27      	ldr	r2, [pc, #156]	; (8001804 <SystemClock_Config+0xcc>)
 8001766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800176a:	6413      	str	r3, [r2, #64]	; 0x40
 800176c:	4b25      	ldr	r3, [pc, #148]	; (8001804 <SystemClock_Config+0xcc>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001774:	60bb      	str	r3, [r7, #8]
 8001776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001778:	2300      	movs	r3, #0
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	4b22      	ldr	r3, [pc, #136]	; (8001808 <SystemClock_Config+0xd0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001784:	4a20      	ldr	r2, [pc, #128]	; (8001808 <SystemClock_Config+0xd0>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	6013      	str	r3, [r2, #0]
 800178c:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <SystemClock_Config+0xd0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001798:	2301      	movs	r3, #1
 800179a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800179c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a2:	2302      	movs	r3, #2
 80017a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017ac:	2304      	movs	r3, #4
 80017ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017b0:	2348      	movs	r3, #72	; 0x48
 80017b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017b8:	2303      	movs	r3, #3
 80017ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017bc:	f107 0320 	add.w	r3, r7, #32
 80017c0:	4618      	mov	r0, r3
 80017c2:	f003 f995 	bl	8004af0 <HAL_RCC_OscConfig>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017cc:	f000 f81e 	bl	800180c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d0:	230f      	movs	r3, #15
 80017d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017d4:	2302      	movs	r3, #2
 80017d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e6:	f107 030c 	add.w	r3, r7, #12
 80017ea:	2102      	movs	r1, #2
 80017ec:	4618      	mov	r0, r3
 80017ee:	f003 fbef 	bl	8004fd0 <HAL_RCC_ClockConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017f8:	f000 f808 	bl	800180c <Error_Handler>
  }
}
 80017fc:	bf00      	nop
 80017fe:	3750      	adds	r7, #80	; 0x50
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000

0800180c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
	...

0800181c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <HAL_MspInit+0x4c>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182a:	4a0f      	ldr	r2, [pc, #60]	; (8001868 <HAL_MspInit+0x4c>)
 800182c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001830:	6453      	str	r3, [r2, #68]	; 0x44
 8001832:	4b0d      	ldr	r3, [pc, #52]	; (8001868 <HAL_MspInit+0x4c>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_MspInit+0x4c>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	4a08      	ldr	r2, [pc, #32]	; (8001868 <HAL_MspInit+0x4c>)
 8001848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800184c:	6413      	str	r3, [r2, #64]	; 0x40
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <HAL_MspInit+0x4c>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40023800 	.word	0x40023800

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 fb1a 	bl	8001ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <DMA1_Stream5_IRQHandler+0x10>)
 80018ce:	f001 f9c7 	bl	8002c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200002c8 	.word	0x200002c8

080018dc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <DMA1_Stream6_IRQHandler+0x10>)
 80018e2:	f001 f9bd 	bl	8002c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000033c 	.word	0x2000033c

080018f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <USART1_IRQHandler+0x10>)
 80018f6:	f004 f953 	bl	8005ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20000860 	.word	0x20000860

08001904 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <USART2_IRQHandler+0x10>)
 800190a:	f004 f949 	bl	8005ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200008a0 	.word	0x200008a0

08001918 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800191c:	4802      	ldr	r0, [pc, #8]	; (8001928 <DMA2_Stream2_IRQHandler+0x10>)
 800191e:	f001 f99f 	bl	8002c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000800 	.word	0x20000800

0800192c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <OTG_FS_IRQHandler+0x10>)
 8001932:	f002 f8aa 	bl	8003a8a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20001db4 	.word	0x20001db4

08001940 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <DMA2_Stream7_IRQHandler+0x10>)
 8001946:	f001 f98b 	bl	8002c60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	200007a0 	.word	0x200007a0

08001954 <_sbrk>:
 8001954:	b580      	push	{r7, lr}
 8001956:	b084      	sub	sp, #16
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <_sbrk+0x50>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d102      	bne.n	800196a <_sbrk+0x16>
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <_sbrk+0x50>)
 8001966:	4a10      	ldr	r2, [pc, #64]	; (80019a8 <_sbrk+0x54>)
 8001968:	601a      	str	r2, [r3, #0]
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <_sbrk+0x50>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <_sbrk+0x50>)
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4413      	add	r3, r2
 8001978:	466a      	mov	r2, sp
 800197a:	4293      	cmp	r3, r2
 800197c:	d907      	bls.n	800198e <_sbrk+0x3a>
 800197e:	f008 fb7f 	bl	800a080 <__errno>
 8001982:	4602      	mov	r2, r0
 8001984:	230c      	movs	r3, #12
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	f04f 33ff 	mov.w	r3, #4294967295
 800198c:	e006      	b.n	800199c <_sbrk+0x48>
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <_sbrk+0x50>)
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4413      	add	r3, r2
 8001996:	4a03      	ldr	r2, [pc, #12]	; (80019a4 <_sbrk+0x50>)
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4618      	mov	r0, r3
 800199e:	3710      	adds	r7, #16
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	20000228 	.word	0x20000228
 80019a8:	200021c0 	.word	0x200021c0

080019ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <SystemInit+0x28>)
 80019b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019b6:	4a07      	ldr	r2, [pc, #28]	; (80019d4 <SystemInit+0x28>)
 80019b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <SystemInit+0x28>)
 80019c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019c6:	609a      	str	r2, [r3, #8]
#endif
}
 80019c8:	bf00      	nop
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	e000ed00 	.word	0xe000ed00

080019d8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_TIM2_Init+0x94>)
 80019f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_TIM2_Init+0x94>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a1a:	4814      	ldr	r0, [pc, #80]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a1c:	f003 fcca 	bl	80053b4 <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a26:	f7ff fef1 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	4619      	mov	r1, r3
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a38:	f003 fd0b 	bl	8005452 <HAL_TIM_ConfigClockSource>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001a42:	f7ff fee3 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a46:	2320      	movs	r3, #32
 8001a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a54:	f003 feee 	bl	8005834 <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a5e:	f7ff fed5 	bl	800180c <Error_Handler>
  }

}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000760 	.word	0x20000760

08001a70 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a76:	f107 0308 	add.w	r3, r7, #8
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a84:	463b      	mov	r3, r7
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001a8c:	4b1c      	ldr	r3, [pc, #112]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001a8e:	4a1d      	ldr	r2, [pc, #116]	; (8001b04 <MX_TIM4_Init+0x94>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001a92:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b19      	ldr	r3, [pc, #100]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8001a9e:	4b18      	ldr	r3, [pc, #96]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa4:	4b16      	ldr	r3, [pc, #88]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aaa:	4b15      	ldr	r3, [pc, #84]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001aac:	2280      	movs	r2, #128	; 0x80
 8001aae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ab0:	4813      	ldr	r0, [pc, #76]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001ab2:	f003 fc7f 	bl	80053b4 <HAL_TIM_Base_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001abc:	f7ff fea6 	bl	800180c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ac6:	f107 0308 	add.w	r3, r7, #8
 8001aca:	4619      	mov	r1, r3
 8001acc:	480c      	ldr	r0, [pc, #48]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001ace:	f003 fcc0 	bl	8005452 <HAL_TIM_ConfigClockSource>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001ad8:	f7ff fe98 	bl	800180c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001adc:	2320      	movs	r3, #32
 8001ade:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	; (8001b00 <MX_TIM4_Init+0x90>)
 8001aea:	f003 fea3 	bl	8005834 <HAL_TIMEx_MasterConfigSynchronization>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001af4:	f7ff fe8a 	bl	800180c <Error_Handler>
  }

}
 8001af8:	bf00      	nop
 8001afa:	3718      	adds	r7, #24
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	20000720 	.word	0x20000720
 8001b04:	40000800 	.word	0x40000800

08001b08 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d10e      	bne.n	8001b38 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <HAL_TIM_Base_MspInit+0x64>)
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <HAL_TIM_Base_MspInit+0x64>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6413      	str	r3, [r2, #64]	; 0x40
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_TIM_Base_MspInit+0x64>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b36:	e012      	b.n	8001b5e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0c      	ldr	r2, [pc, #48]	; (8001b70 <HAL_TIM_Base_MspInit+0x68>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d10d      	bne.n	8001b5e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60bb      	str	r3, [r7, #8]
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_TIM_Base_MspInit+0x64>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_TIM_Base_MspInit+0x64>)
 8001b4c:	f043 0304 	orr.w	r3, r3, #4
 8001b50:	6413      	str	r3, [r2, #64]	; 0x40
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_TIM_Base_MspInit+0x64>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	f003 0304 	and.w	r3, r3, #4
 8001b5a:	60bb      	str	r3, [r7, #8]
 8001b5c:	68bb      	ldr	r3, [r7, #8]
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40000800 	.word	0x40000800

08001b74 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001b78:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b7a:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <MX_USART1_UART_Init+0x50>)
 8001b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b7e:	4b10      	ldr	r3, [pc, #64]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b92:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b98:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001b9a:	220c      	movs	r2, #12
 8001b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba4:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001baa:	4805      	ldr	r0, [pc, #20]	; (8001bc0 <MX_USART1_UART_Init+0x4c>)
 8001bac:	f003 febe 	bl	800592c <HAL_UART_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bb6:	f7ff fe29 	bl	800180c <Error_Handler>
  }

}
 8001bba:	bf00      	nop
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000860 	.word	0x20000860
 8001bc4:	40011000 	.word	0x40011000

08001bc8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001bcc:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bce:	4a12      	ldr	r2, [pc, #72]	; (8001c18 <MX_USART2_UART_Init+0x50>)
 8001bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bda:	4b0e      	ldr	r3, [pc, #56]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001be0:	4b0c      	ldr	r3, [pc, #48]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be6:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bec:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bee:	220c      	movs	r2, #12
 8001bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bf2:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf8:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bfe:	4805      	ldr	r0, [pc, #20]	; (8001c14 <MX_USART2_UART_Init+0x4c>)
 8001c00:	f003 fe94 	bl	800592c <HAL_UART_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001c0a:	f7ff fdff 	bl	800180c <Error_Handler>
  }

}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	200008a0 	.word	0x200008a0
 8001c18:	40004400 	.word	0x40004400

08001c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b08c      	sub	sp, #48	; 0x30
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c24:	f107 031c 	add.w	r3, r7, #28
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	609a      	str	r2, [r3, #8]
 8001c30:	60da      	str	r2, [r3, #12]
 8001c32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a69      	ldr	r2, [pc, #420]	; (8001de0 <HAL_UART_MspInit+0x1c4>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f040 8092 	bne.w	8001d64 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c40:	2300      	movs	r3, #0
 8001c42:	61bb      	str	r3, [r7, #24]
 8001c44:	4b67      	ldr	r3, [pc, #412]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	4a66      	ldr	r2, [pc, #408]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001c4a:	f043 0310 	orr.w	r3, r3, #16
 8001c4e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c50:	4b64      	ldr	r3, [pc, #400]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	f003 0310 	and.w	r3, r3, #16
 8001c58:	61bb      	str	r3, [r7, #24]
 8001c5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	4b60      	ldr	r3, [pc, #384]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	4a5f      	ldr	r2, [pc, #380]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001c66:	f043 0301 	orr.w	r3, r3, #1
 8001c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6c:	4b5d      	ldr	r3, [pc, #372]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c78:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c82:	2300      	movs	r3, #0
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c86:	2303      	movs	r3, #3
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c8a:	2307      	movs	r3, #7
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c8e:	f107 031c 	add.w	r3, r7, #28
 8001c92:	4619      	mov	r1, r3
 8001c94:	4854      	ldr	r0, [pc, #336]	; (8001de8 <HAL_UART_MspInit+0x1cc>)
 8001c96:	f001 fa4b 	bl	8003130 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c9a:	4b54      	ldr	r3, [pc, #336]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001c9c:	4a54      	ldr	r2, [pc, #336]	; (8001df0 <HAL_UART_MspInit+0x1d4>)
 8001c9e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001ca0:	4b52      	ldr	r3, [pc, #328]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ca6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca8:	4b50      	ldr	r3, [pc, #320]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cae:	4b4f      	ldr	r3, [pc, #316]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cb4:	4b4d      	ldr	r3, [pc, #308]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cba:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cbc:	4b4b      	ldr	r3, [pc, #300]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cc2:	4b4a      	ldr	r3, [pc, #296]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001cc8:	4b48      	ldr	r3, [pc, #288]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cce:	4b47      	ldr	r3, [pc, #284]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001cd4:	4b45      	ldr	r3, [pc, #276]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cda:	4844      	ldr	r0, [pc, #272]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cdc:	f000 fe98 	bl	8002a10 <HAL_DMA_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001ce6:	f7ff fd91 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a3f      	ldr	r2, [pc, #252]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cee:	635a      	str	r2, [r3, #52]	; 0x34
 8001cf0:	4a3e      	ldr	r2, [pc, #248]	; (8001dec <HAL_UART_MspInit+0x1d0>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001cf6:	4b3f      	ldr	r3, [pc, #252]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001cf8:	4a3f      	ldr	r2, [pc, #252]	; (8001df8 <HAL_UART_MspInit+0x1dc>)
 8001cfa:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001cfc:	4b3d      	ldr	r3, [pc, #244]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001cfe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d02:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d04:	4b3b      	ldr	r3, [pc, #236]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d06:	2240      	movs	r2, #64	; 0x40
 8001d08:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d0a:	4b3a      	ldr	r3, [pc, #232]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d10:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d18:	4b36      	ldr	r3, [pc, #216]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d1e:	4b35      	ldr	r3, [pc, #212]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d24:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d2a:	4b32      	ldr	r3, [pc, #200]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d30:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d36:	482f      	ldr	r0, [pc, #188]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d38:	f000 fe6a 	bl	8002a10 <HAL_DMA_Init>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d001      	beq.n	8001d46 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001d42:	f7ff fd63 	bl	800180c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4c:	4a29      	ldr	r2, [pc, #164]	; (8001df4 <HAL_UART_MspInit+0x1d8>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2100      	movs	r1, #0
 8001d56:	2025      	movs	r0, #37	; 0x25
 8001d58:	f000 fc5d 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d5c:	2025      	movs	r0, #37	; 0x25
 8001d5e:	f000 fc76 	bl	800264e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d62:	e038      	b.n	8001dd6 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <HAL_UART_MspInit+0x1e0>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d133      	bne.n	8001dd6 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	613b      	str	r3, [r7, #16]
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	4a1b      	ldr	r2, [pc, #108]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001d78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d7c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	613b      	str	r3, [r7, #16]
 8001d88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	4b15      	ldr	r3, [pc, #84]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d92:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001d94:	f043 0301 	orr.w	r3, r3, #1
 8001d98:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9a:	4b12      	ldr	r3, [pc, #72]	; (8001de4 <HAL_UART_MspInit+0x1c8>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	f003 0301 	and.w	r3, r3, #1
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001da6:	230c      	movs	r3, #12
 8001da8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001daa:	2302      	movs	r3, #2
 8001dac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	2300      	movs	r3, #0
 8001db0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001db2:	2303      	movs	r3, #3
 8001db4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001db6:	2307      	movs	r3, #7
 8001db8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dba:	f107 031c 	add.w	r3, r7, #28
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	4809      	ldr	r0, [pc, #36]	; (8001de8 <HAL_UART_MspInit+0x1cc>)
 8001dc2:	f001 f9b5 	bl	8003130 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2026      	movs	r0, #38	; 0x26
 8001dcc:	f000 fc23 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dd0:	2026      	movs	r0, #38	; 0x26
 8001dd2:	f000 fc3c 	bl	800264e <HAL_NVIC_EnableIRQ>
}
 8001dd6:	bf00      	nop
 8001dd8:	3730      	adds	r7, #48	; 0x30
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	40011000 	.word	0x40011000
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40020000 	.word	0x40020000
 8001dec:	20000800 	.word	0x20000800
 8001df0:	40026440 	.word	0x40026440
 8001df4:	200007a0 	.word	0x200007a0
 8001df8:	400264b8 	.word	0x400264b8
 8001dfc:	40004400 	.word	0x40004400

08001e00 <Reset_Handler>:
 8001e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e38 <LoopFillZerobss+0x14>
 8001e04:	2100      	movs	r1, #0
 8001e06:	e003      	b.n	8001e10 <LoopCopyDataInit>

08001e08 <CopyDataInit>:
 8001e08:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <LoopFillZerobss+0x18>)
 8001e0a:	585b      	ldr	r3, [r3, r1]
 8001e0c:	5043      	str	r3, [r0, r1]
 8001e0e:	3104      	adds	r1, #4

08001e10 <LoopCopyDataInit>:
 8001e10:	480b      	ldr	r0, [pc, #44]	; (8001e40 <LoopFillZerobss+0x1c>)
 8001e12:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LoopFillZerobss+0x20>)
 8001e14:	1842      	adds	r2, r0, r1
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3f6      	bcc.n	8001e08 <CopyDataInit>
 8001e1a:	4a0b      	ldr	r2, [pc, #44]	; (8001e48 <LoopFillZerobss+0x24>)
 8001e1c:	e002      	b.n	8001e24 <LoopFillZerobss>

08001e1e <FillZerobss>:
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f842 3b04 	str.w	r3, [r2], #4

08001e24 <LoopFillZerobss>:
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <LoopFillZerobss+0x28>)
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d3f9      	bcc.n	8001e1e <FillZerobss>
 8001e2a:	f7ff fdbf 	bl	80019ac <SystemInit>
 8001e2e:	f008 f92d 	bl	800a08c <__libc_init_array>
 8001e32:	f7ff fc2d 	bl	8001690 <main>
 8001e36:	4770      	bx	lr
 8001e38:	20030000 	.word	0x20030000
 8001e3c:	0800b508 	.word	0x0800b508
 8001e40:	20000000 	.word	0x20000000
 8001e44:	2000020c 	.word	0x2000020c
 8001e48:	2000020c 	.word	0x2000020c
 8001e4c:	200021c0 	.word	0x200021c0

08001e50 <ADC_IRQHandler>:
 8001e50:	e7fe      	b.n	8001e50 <ADC_IRQHandler>
	...

08001e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e58:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <HAL_Init+0x40>)
 8001e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e64:	4b0b      	ldr	r3, [pc, #44]	; (8001e94 <HAL_Init+0x40>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_Init+0x40>)
 8001e6a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e70:	4b08      	ldr	r3, [pc, #32]	; (8001e94 <HAL_Init+0x40>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a07      	ldr	r2, [pc, #28]	; (8001e94 <HAL_Init+0x40>)
 8001e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e7c:	2003      	movs	r0, #3
 8001e7e:	f000 fbbf 	bl	8002600 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e82:	2000      	movs	r0, #0
 8001e84:	f000 f808 	bl	8001e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e88:	f7ff fcc8 	bl	800181c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40023c00 	.word	0x40023c00

08001e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea0:	4b12      	ldr	r3, [pc, #72]	; (8001eec <HAL_InitTick+0x54>)
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_InitTick+0x58>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f000 fbd7 	bl	800266a <HAL_SYSTICK_Config>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e00e      	b.n	8001ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2b0f      	cmp	r3, #15
 8001eca:	d80a      	bhi.n	8001ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ecc:	2200      	movs	r2, #0
 8001ece:	6879      	ldr	r1, [r7, #4]
 8001ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ed4:	f000 fb9f 	bl	8002616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed8:	4a06      	ldr	r2, [pc, #24]	; (8001ef4 <HAL_InitTick+0x5c>)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	e000      	b.n	8001ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3708      	adds	r7, #8
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	20000028 	.word	0x20000028
 8001ef0:	20000030 	.word	0x20000030
 8001ef4:	2000002c 	.word	0x2000002c

08001ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <HAL_IncTick+0x20>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	461a      	mov	r2, r3
 8001f02:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_IncTick+0x24>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4413      	add	r3, r2
 8001f08:	4a04      	ldr	r2, [pc, #16]	; (8001f1c <HAL_IncTick+0x24>)
 8001f0a:	6013      	str	r3, [r2, #0]
}
 8001f0c:	bf00      	nop
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	20000030 	.word	0x20000030
 8001f1c:	200008e0 	.word	0x200008e0

08001f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return uwTick;
 8001f24:	4b03      	ldr	r3, [pc, #12]	; (8001f34 <HAL_GetTick+0x14>)
 8001f26:	681b      	ldr	r3, [r3, #0]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	200008e0 	.word	0x200008e0

08001f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b084      	sub	sp, #16
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f40:	f7ff ffee 	bl	8001f20 <HAL_GetTick>
 8001f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f50:	d005      	beq.n	8001f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f52:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <HAL_Delay+0x40>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	461a      	mov	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f5e:	bf00      	nop
 8001f60:	f7ff ffde 	bl	8001f20 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d8f7      	bhi.n	8001f60 <HAL_Delay+0x28>
  {
  }
}
 8001f70:	bf00      	nop
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20000030 	.word	0x20000030

08001f7c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e033      	b.n	8001ffa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d109      	bne.n	8001fae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe ffea 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb2:	f003 0310 	and.w	r3, r3, #16
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d118      	bne.n	8001fec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fc2:	f023 0302 	bic.w	r3, r3, #2
 8001fc6:	f043 0202 	orr.w	r2, r3, #2
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f94a 	bl	8002268 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fde:	f023 0303 	bic.w	r3, r3, #3
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	641a      	str	r2, [r3, #64]	; 0x40
 8001fea:	e001      	b.n	8001ff0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fec:	2301      	movs	r3, #1
 8001fee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3710      	adds	r7, #16
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}
	...

08002004 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800200e:	2300      	movs	r3, #0
 8002010:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002018:	2b01      	cmp	r3, #1
 800201a:	d101      	bne.n	8002020 <HAL_ADC_ConfigChannel+0x1c>
 800201c:	2302      	movs	r3, #2
 800201e:	e113      	b.n	8002248 <HAL_ADC_ConfigChannel+0x244>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2201      	movs	r2, #1
 8002024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2b09      	cmp	r3, #9
 800202e:	d925      	bls.n	800207c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	461a      	mov	r2, r3
 800203e:	4613      	mov	r3, r2
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	4413      	add	r3, r2
 8002044:	3b1e      	subs	r3, #30
 8002046:	2207      	movs	r2, #7
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	43da      	mvns	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	400a      	ands	r2, r1
 8002054:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68d9      	ldr	r1, [r3, #12]
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	b29b      	uxth	r3, r3
 8002066:	4618      	mov	r0, r3
 8002068:	4603      	mov	r3, r0
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	4403      	add	r3, r0
 800206e:	3b1e      	subs	r3, #30
 8002070:	409a      	lsls	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	e022      	b.n	80020c2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6919      	ldr	r1, [r3, #16]
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	b29b      	uxth	r3, r3
 8002088:	461a      	mov	r2, r3
 800208a:	4613      	mov	r3, r2
 800208c:	005b      	lsls	r3, r3, #1
 800208e:	4413      	add	r3, r2
 8002090:	2207      	movs	r2, #7
 8002092:	fa02 f303 	lsl.w	r3, r2, r3
 8002096:	43da      	mvns	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	400a      	ands	r2, r1
 800209e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6919      	ldr	r1, [r3, #16]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	4618      	mov	r0, r3
 80020b2:	4603      	mov	r3, r0
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	4403      	add	r3, r0
 80020b8:	409a      	lsls	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	430a      	orrs	r2, r1
 80020c0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d824      	bhi.n	8002114 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b05      	subs	r3, #5
 80020dc:	221f      	movs	r2, #31
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	400a      	ands	r2, r1
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b05      	subs	r3, #5
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	635a      	str	r2, [r3, #52]	; 0x34
 8002112:	e04c      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d824      	bhi.n	8002166 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	3b23      	subs	r3, #35	; 0x23
 800212e:	221f      	movs	r2, #31
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43da      	mvns	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	400a      	ands	r2, r1
 800213c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	b29b      	uxth	r3, r3
 800214a:	4618      	mov	r0, r3
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685a      	ldr	r2, [r3, #4]
 8002150:	4613      	mov	r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	4413      	add	r3, r2
 8002156:	3b23      	subs	r3, #35	; 0x23
 8002158:	fa00 f203 	lsl.w	r2, r0, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	430a      	orrs	r2, r1
 8002162:	631a      	str	r2, [r3, #48]	; 0x30
 8002164:	e023      	b.n	80021ae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	3b41      	subs	r3, #65	; 0x41
 8002178:	221f      	movs	r2, #31
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43da      	mvns	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	400a      	ands	r2, r1
 8002186:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	4618      	mov	r0, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4413      	add	r3, r2
 80021a0:	3b41      	subs	r3, #65	; 0x41
 80021a2:	fa00 f203 	lsl.w	r2, r0, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ae:	4b29      	ldr	r3, [pc, #164]	; (8002254 <HAL_ADC_ConfigChannel+0x250>)
 80021b0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a28      	ldr	r2, [pc, #160]	; (8002258 <HAL_ADC_ConfigChannel+0x254>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d10f      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1d8>
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2b12      	cmp	r3, #18
 80021c2:	d10b      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a1d      	ldr	r2, [pc, #116]	; (8002258 <HAL_ADC_ConfigChannel+0x254>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d12b      	bne.n	800223e <HAL_ADC_ConfigChannel+0x23a>
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <HAL_ADC_ConfigChannel+0x258>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d003      	beq.n	80021f8 <HAL_ADC_ConfigChannel+0x1f4>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	2b11      	cmp	r3, #17
 80021f6:	d122      	bne.n	800223e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a11      	ldr	r2, [pc, #68]	; (800225c <HAL_ADC_ConfigChannel+0x258>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d111      	bne.n	800223e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800221a:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_ADC_ConfigChannel+0x25c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a11      	ldr	r2, [pc, #68]	; (8002264 <HAL_ADC_ConfigChannel+0x260>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	0c9a      	lsrs	r2, r3, #18
 8002226:	4613      	mov	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002230:	e002      	b.n	8002238 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	3b01      	subs	r3, #1
 8002236:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d1f9      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002246:	2300      	movs	r3, #0
}
 8002248:	4618      	mov	r0, r3
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	40012300 	.word	0x40012300
 8002258:	40012000 	.word	0x40012000
 800225c:	10000012 	.word	0x10000012
 8002260:	20000028 	.word	0x20000028
 8002264:	431bde83 	.word	0x431bde83

08002268 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002270:	4b79      	ldr	r3, [pc, #484]	; (8002458 <ADC_Init+0x1f0>)
 8002272:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685a      	ldr	r2, [r3, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	431a      	orrs	r2, r3
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800229c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	6859      	ldr	r1, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	691b      	ldr	r3, [r3, #16]
 80022a8:	021a      	lsls	r2, r3, #8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	430a      	orrs	r2, r1
 80022b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	689a      	ldr	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	430a      	orrs	r2, r1
 80022d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	689a      	ldr	r2, [r3, #8]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	6899      	ldr	r1, [r3, #8]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fa:	4a58      	ldr	r2, [pc, #352]	; (800245c <ADC_Init+0x1f4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d022      	beq.n	8002346 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800230e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6899      	ldr	r1, [r3, #8]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	430a      	orrs	r2, r1
 8002320:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002330:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6899      	ldr	r1, [r3, #8]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	609a      	str	r2, [r3, #8]
 8002344:	e00f      	b.n	8002366 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002364:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f022 0202 	bic.w	r2, r2, #2
 8002374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	7e1b      	ldrb	r3, [r3, #24]
 8002380:	005a      	lsls	r2, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d01b      	beq.n	80023cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	685a      	ldr	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6859      	ldr	r1, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023be:	3b01      	subs	r3, #1
 80023c0:	035a      	lsls	r2, r3, #13
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	430a      	orrs	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
 80023ca:	e007      	b.n	80023dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685a      	ldr	r2, [r3, #4]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69db      	ldr	r3, [r3, #28]
 80023f6:	3b01      	subs	r3, #1
 80023f8:	051a      	lsls	r2, r3, #20
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002410:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6899      	ldr	r1, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800241e:	025a      	lsls	r2, r3, #9
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	430a      	orrs	r2, r1
 8002426:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	689a      	ldr	r2, [r3, #8]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002436:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6899      	ldr	r1, [r3, #8]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	029a      	lsls	r2, r3, #10
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
}
 800244c:	bf00      	nop
 800244e:	3714      	adds	r7, #20
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	40012300 	.word	0x40012300
 800245c:	0f000001 	.word	0x0f000001

08002460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002460:	b480      	push	{r7}
 8002462:	b085      	sub	sp, #20
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002476:	68ba      	ldr	r2, [r7, #8]
 8002478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800247c:	4013      	ands	r3, r2
 800247e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800248c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002492:	4a04      	ldr	r2, [pc, #16]	; (80024a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	60d3      	str	r3, [r2, #12]
}
 8002498:	bf00      	nop
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a2:	4770      	bx	lr
 80024a4:	e000ed00 	.word	0xe000ed00

080024a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024ac:	4b04      	ldr	r3, [pc, #16]	; (80024c0 <__NVIC_GetPriorityGrouping+0x18>)
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	0a1b      	lsrs	r3, r3, #8
 80024b2:	f003 0307 	and.w	r3, r3, #7
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	db0b      	blt.n	80024ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024d6:	79fb      	ldrb	r3, [r7, #7]
 80024d8:	f003 021f 	and.w	r2, r3, #31
 80024dc:	4907      	ldr	r1, [pc, #28]	; (80024fc <__NVIC_EnableIRQ+0x38>)
 80024de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e2:	095b      	lsrs	r3, r3, #5
 80024e4:	2001      	movs	r0, #1
 80024e6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	e000e100 	.word	0xe000e100

08002500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	6039      	str	r1, [r7, #0]
 800250a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800250c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002510:	2b00      	cmp	r3, #0
 8002512:	db0a      	blt.n	800252a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	b2da      	uxtb	r2, r3
 8002518:	490c      	ldr	r1, [pc, #48]	; (800254c <__NVIC_SetPriority+0x4c>)
 800251a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251e:	0112      	lsls	r2, r2, #4
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	440b      	add	r3, r1
 8002524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002528:	e00a      	b.n	8002540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	b2da      	uxtb	r2, r3
 800252e:	4908      	ldr	r1, [pc, #32]	; (8002550 <__NVIC_SetPriority+0x50>)
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	3b04      	subs	r3, #4
 8002538:	0112      	lsls	r2, r2, #4
 800253a:	b2d2      	uxtb	r2, r2
 800253c:	440b      	add	r3, r1
 800253e:	761a      	strb	r2, [r3, #24]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr
 800254c:	e000e100 	.word	0xe000e100
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002554:	b480      	push	{r7}
 8002556:	b089      	sub	sp, #36	; 0x24
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	f1c3 0307 	rsb	r3, r3, #7
 800256e:	2b04      	cmp	r3, #4
 8002570:	bf28      	it	cs
 8002572:	2304      	movcs	r3, #4
 8002574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3304      	adds	r3, #4
 800257a:	2b06      	cmp	r3, #6
 800257c:	d902      	bls.n	8002584 <NVIC_EncodePriority+0x30>
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3b03      	subs	r3, #3
 8002582:	e000      	b.n	8002586 <NVIC_EncodePriority+0x32>
 8002584:	2300      	movs	r3, #0
 8002586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002588:	f04f 32ff 	mov.w	r2, #4294967295
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	fa02 f303 	lsl.w	r3, r2, r3
 8002592:	43da      	mvns	r2, r3
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	401a      	ands	r2, r3
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800259c:	f04f 31ff 	mov.w	r1, #4294967295
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	fa01 f303 	lsl.w	r3, r1, r3
 80025a6:	43d9      	mvns	r1, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	4313      	orrs	r3, r2
         );
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3724      	adds	r7, #36	; 0x24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
	...

080025bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025cc:	d301      	bcc.n	80025d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025ce:	2301      	movs	r3, #1
 80025d0:	e00f      	b.n	80025f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025d2:	4a0a      	ldr	r2, [pc, #40]	; (80025fc <SysTick_Config+0x40>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025da:	210f      	movs	r1, #15
 80025dc:	f04f 30ff 	mov.w	r0, #4294967295
 80025e0:	f7ff ff8e 	bl	8002500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <SysTick_Config+0x40>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ea:	4b04      	ldr	r3, [pc, #16]	; (80025fc <SysTick_Config+0x40>)
 80025ec:	2207      	movs	r2, #7
 80025ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025f0:	2300      	movs	r3, #0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop
 80025fc:	e000e010 	.word	0xe000e010

08002600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7ff ff29 	bl	8002460 <__NVIC_SetPriorityGrouping>
}
 800260e:	bf00      	nop
 8002610:	3708      	adds	r7, #8
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002616:	b580      	push	{r7, lr}
 8002618:	b086      	sub	sp, #24
 800261a:	af00      	add	r7, sp, #0
 800261c:	4603      	mov	r3, r0
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
 8002622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002624:	2300      	movs	r3, #0
 8002626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002628:	f7ff ff3e 	bl	80024a8 <__NVIC_GetPriorityGrouping>
 800262c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	6978      	ldr	r0, [r7, #20]
 8002634:	f7ff ff8e 	bl	8002554 <NVIC_EncodePriority>
 8002638:	4602      	mov	r2, r0
 800263a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800263e:	4611      	mov	r1, r2
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff ff5d 	bl	8002500 <__NVIC_SetPriority>
}
 8002646:	bf00      	nop
 8002648:	3718      	adds	r7, #24
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}

0800264e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b082      	sub	sp, #8
 8002652:	af00      	add	r7, sp, #0
 8002654:	4603      	mov	r3, r0
 8002656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff31 	bl	80024c4 <__NVIC_EnableIRQ>
}
 8002662:	bf00      	nop
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800266a:	b580      	push	{r7, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f7ff ffa2 	bl	80025bc <SysTick_Config>
 8002678:	4603      	mov	r3, r0
}
 800267a:	4618      	mov	r0, r3
 800267c:	3708      	adds	r7, #8
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}

08002682 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002682:	b580      	push	{r7, lr}
 8002684:	b082      	sub	sp, #8
 8002686:	af00      	add	r7, sp, #0
 8002688:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e014      	b.n	80026be <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	791b      	ldrb	r3, [r3, #4]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7fe fd0f 	bl	80010c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2202      	movs	r2, #2
 80026ae:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3708      	adds	r7, #8
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
	...

080026c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
 80026d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	795b      	ldrb	r3, [r3, #5]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_DAC_Start_DMA+0x1e>
 80026e2:	2302      	movs	r3, #2
 80026e4:	e08e      	b.n	8002804 <HAL_DAC_Start_DMA+0x13c>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2201      	movs	r2, #1
 80026ea:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2202      	movs	r2, #2
 80026f0:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80026f2:	68bb      	ldr	r3, [r7, #8]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d12a      	bne.n	800274e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4a43      	ldr	r2, [pc, #268]	; (800280c <HAL_DAC_Start_DMA+0x144>)
 80026fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a42      	ldr	r2, [pc, #264]	; (8002810 <HAL_DAC_Start_DMA+0x148>)
 8002706:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	4a41      	ldr	r2, [pc, #260]	; (8002814 <HAL_DAC_Start_DMA+0x14c>)
 800270e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800271e:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002720:	6a3b      	ldr	r3, [r7, #32]
 8002722:	2b04      	cmp	r3, #4
 8002724:	d009      	beq.n	800273a <HAL_DAC_Start_DMA+0x72>
 8002726:	2b08      	cmp	r3, #8
 8002728:	d00c      	beq.n	8002744 <HAL_DAC_Start_DMA+0x7c>
 800272a:	2b00      	cmp	r3, #0
 800272c:	d000      	beq.n	8002730 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800272e:	e039      	b.n	80027a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	3308      	adds	r3, #8
 8002736:	617b      	str	r3, [r7, #20]
        break;
 8002738:	e034      	b.n	80027a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	330c      	adds	r3, #12
 8002740:	617b      	str	r3, [r7, #20]
        break;
 8002742:	e02f      	b.n	80027a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3310      	adds	r3, #16
 800274a:	617b      	str	r3, [r7, #20]
        break;
 800274c:	e02a      	b.n	80027a4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	4a31      	ldr	r2, [pc, #196]	; (8002818 <HAL_DAC_Start_DMA+0x150>)
 8002754:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4a30      	ldr	r2, [pc, #192]	; (800281c <HAL_DAC_Start_DMA+0x154>)
 800275c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a2f      	ldr	r2, [pc, #188]	; (8002820 <HAL_DAC_Start_DMA+0x158>)
 8002764:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002774:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	2b04      	cmp	r3, #4
 800277a:	d009      	beq.n	8002790 <HAL_DAC_Start_DMA+0xc8>
 800277c:	2b08      	cmp	r3, #8
 800277e:	d00c      	beq.n	800279a <HAL_DAC_Start_DMA+0xd2>
 8002780:	2b00      	cmp	r3, #0
 8002782:	d000      	beq.n	8002786 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002784:	e00e      	b.n	80027a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3314      	adds	r3, #20
 800278c:	617b      	str	r3, [r7, #20]
        break;
 800278e:	e009      	b.n	80027a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	3318      	adds	r3, #24
 8002796:	617b      	str	r3, [r7, #20]
        break;
 8002798:	e004      	b.n	80027a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	331c      	adds	r3, #28
 80027a0:	617b      	str	r3, [r7, #20]
        break;
 80027a2:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d10f      	bne.n	80027ca <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6898      	ldr	r0, [r3, #8]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	f000 f9d2 	bl	8002b6c <HAL_DMA_Start_IT>
 80027c8:	e00e      	b.n	80027e8 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027d8:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	68d8      	ldr	r0, [r3, #12]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	697a      	ldr	r2, [r7, #20]
 80027e4:	f000 f9c2 	bl	8002b6c <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6819      	ldr	r1, [r3, #0]
 80027ee:	2201      	movs	r2, #1
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	409a      	lsls	r2, r3
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	430a      	orrs	r2, r1
 80027fa:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2200      	movs	r2, #0
 8002800:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002802:	2300      	movs	r3, #0
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	080028fb 	.word	0x080028fb
 8002810:	0800291d 	.word	0x0800291d
 8002814:	08002939 	.word	0x08002939
 8002818:	080029a3 	.word	0x080029a3
 800281c:	080029c5 	.word	0x080029c5
 8002820:	080029e1 	.word	0x080029e1

08002824 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002854:	bf00      	nop
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002860:	b480      	push	{r7}
 8002862:	b087      	sub	sp, #28
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800286c:	2300      	movs	r3, #0
 800286e:	617b      	str	r3, [r7, #20]
 8002870:	2300      	movs	r3, #0
 8002872:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	795b      	ldrb	r3, [r3, #5]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <HAL_DAC_ConfigChannel+0x20>
 800287c:	2302      	movs	r3, #2
 800287e:	e036      	b.n	80028ee <HAL_DAC_ConfigChannel+0x8e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2201      	movs	r2, #1
 8002884:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2202      	movs	r2, #2
 800288a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002894:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43db      	mvns	r3, r3
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	4013      	ands	r3, r2
 80028a4:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6819      	ldr	r1, [r3, #0]
 80028ce:	22c0      	movs	r2, #192	; 0xc0
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	400a      	ands	r2, r1
 80028de:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2201      	movs	r2, #1
 80028e4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	2200      	movs	r2, #0
 80028ea:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	371c      	adds	r7, #28
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002906:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002908:	68f8      	ldr	r0, [r7, #12]
 800290a:	f7ff ff8b 	bl	8002824 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	711a      	strb	r2, [r3, #4]
}
 8002914:	bf00      	nop
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002928:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f7ff ff84 	bl	8002838 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002930:	bf00      	nop
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002944:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	f043 0204 	orr.w	r2, r3, #4
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7ff ff7a 	bl	800284c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2201      	movs	r2, #1
 800295c:	711a      	strb	r2, [r3, #4]
}
 800295e:	bf00      	nop
 8002960:	3710      	adds	r7, #16
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002966:	b480      	push	{r7}
 8002968:	b083      	sub	sp, #12
 800296a:	af00      	add	r7, sp, #0
 800296c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr

0800297a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800297a:	b480      	push	{r7}
 800297c:	b083      	sub	sp, #12
 800297e:	af00      	add	r7, sp, #0
 8002980:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr

0800298e <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800298e:	b480      	push	{r7}
 8002990:	b083      	sub	sp, #12
 8002992:	af00      	add	r7, sp, #0
 8002994:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr

080029a2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ae:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f7ff ffd8 	bl	8002966 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	711a      	strb	r2, [r3, #4]
}
 80029bc:	bf00      	nop
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff ffd1 	bl	800297a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029d8:	bf00      	nop
 80029da:	3710      	adds	r7, #16
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ec:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	691b      	ldr	r3, [r3, #16]
 80029f2:	f043 0204 	orr.w	r2, r3, #4
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f7ff ffc7 	bl	800298e <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	711a      	strb	r2, [r3, #4]
}
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b086      	sub	sp, #24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a1c:	f7ff fa80 	bl	8001f20 <HAL_GetTick>
 8002a20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e099      	b.n	8002b60 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2200      	movs	r2, #0
 8002a30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0201 	bic.w	r2, r2, #1
 8002a4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a4c:	e00f      	b.n	8002a6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a4e:	f7ff fa67 	bl	8001f20 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b05      	cmp	r3, #5
 8002a5a:	d908      	bls.n	8002a6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2220      	movs	r2, #32
 8002a60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2203      	movs	r2, #3
 8002a66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e078      	b.n	8002b60 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1e8      	bne.n	8002a4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <HAL_DMA_Init+0x158>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685a      	ldr	r2, [r3, #4]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a1b      	ldr	r3, [r3, #32]
 8002ab8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac4:	2b04      	cmp	r3, #4
 8002ac6:	d107      	bne.n	8002ad8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	f023 0307 	bic.w	r3, r3, #7
 8002aee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002afe:	2b04      	cmp	r3, #4
 8002b00:	d117      	bne.n	8002b32 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d00e      	beq.n	8002b32 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 fa91 	bl	800303c <DMA_CheckFifoParam>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d008      	beq.n	8002b32 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2240      	movs	r2, #64	; 0x40
 8002b24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e016      	b.n	8002b60 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	697a      	ldr	r2, [r7, #20]
 8002b38:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 fa48 	bl	8002fd0 <DMA_CalcBaseAndBitshift>
 8002b40:	4603      	mov	r3, r0
 8002b42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b48:	223f      	movs	r2, #63	; 0x3f
 8002b4a:	409a      	lsls	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	f010803f 	.word	0xf010803f

08002b6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b82:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_DMA_Start_IT+0x26>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e040      	b.n	8002c14 <HAL_DMA_Start_IT+0xa8>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d12f      	bne.n	8002c06 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	68f8      	ldr	r0, [r7, #12]
 8002bbc:	f000 f9da 	bl	8002f74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	223f      	movs	r2, #63	; 0x3f
 8002bc6:	409a      	lsls	r2, r3
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f042 0216 	orr.w	r2, r2, #22
 8002bda:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d007      	beq.n	8002bf4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f042 0208 	orr.w	r2, r2, #8
 8002bf2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e005      	b.n	8002c12 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c0e:	2302      	movs	r3, #2
 8002c10:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3718      	adds	r7, #24
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d004      	beq.n	8002c3a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2280      	movs	r2, #128	; 0x80
 8002c34:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00c      	b.n	8002c54 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2205      	movs	r2, #5
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c6c:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <HAL_DMA_IRQHandler+0x258>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a92      	ldr	r2, [pc, #584]	; (8002ebc <HAL_DMA_IRQHandler+0x25c>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0a9b      	lsrs	r3, r3, #10
 8002c78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	2208      	movs	r2, #8
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	4013      	ands	r3, r2
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d01a      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d013      	beq.n	8002ccc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f022 0204 	bic.w	r2, r2, #4
 8002cb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb8:	2208      	movs	r2, #8
 8002cba:	409a      	lsls	r2, r3
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	409a      	lsls	r2, r3
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d012      	beq.n	8002d02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cee:	2201      	movs	r2, #1
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cfa:	f043 0202 	orr.w	r2, r3, #2
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d06:	2204      	movs	r2, #4
 8002d08:	409a      	lsls	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d012      	beq.n	8002d38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00b      	beq.n	8002d38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d24:	2204      	movs	r2, #4
 8002d26:	409a      	lsls	r2, r3
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d30:	f043 0204 	orr.w	r2, r3, #4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d3c:	2210      	movs	r2, #16
 8002d3e:	409a      	lsls	r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d043      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0308 	and.w	r3, r3, #8
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d03c      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d5a:	2210      	movs	r2, #16
 8002d5c:	409a      	lsls	r2, r3
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d018      	beq.n	8002da2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d108      	bne.n	8002d90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d024      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	4798      	blx	r3
 8002d8e:	e01f      	b.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d01b      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	4798      	blx	r3
 8002da0:	e016      	b.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d107      	bne.n	8002dc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 0208 	bic.w	r2, r2, #8
 8002dbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d003      	beq.n	8002dd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	409a      	lsls	r2, r3
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4013      	ands	r3, r2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 808e 	beq.w	8002efe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f000 8086 	beq.w	8002efe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df6:	2220      	movs	r2, #32
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b05      	cmp	r3, #5
 8002e08:	d136      	bne.n	8002e78 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0216 	bic.w	r2, r2, #22
 8002e18:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	695a      	ldr	r2, [r3, #20]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e28:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d103      	bne.n	8002e3a <HAL_DMA_IRQHandler+0x1da>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d007      	beq.n	8002e4a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f022 0208 	bic.w	r2, r2, #8
 8002e48:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	223f      	movs	r2, #63	; 0x3f
 8002e50:	409a      	lsls	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d07d      	beq.n	8002f6a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	4798      	blx	r3
        }
        return;
 8002e76:	e078      	b.n	8002f6a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01c      	beq.n	8002ec0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d108      	bne.n	8002ea6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d030      	beq.n	8002efe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	4798      	blx	r3
 8002ea4:	e02b      	b.n	8002efe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d027      	beq.n	8002efe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	4798      	blx	r3
 8002eb6:	e022      	b.n	8002efe <HAL_DMA_IRQHandler+0x29e>
 8002eb8:	20000028 	.word	0x20000028
 8002ebc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d10f      	bne.n	8002eee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0210 	bic.w	r2, r2, #16
 8002edc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d032      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d022      	beq.n	8002f58 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2205      	movs	r2, #5
 8002f16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 0201 	bic.w	r2, r2, #1
 8002f28:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3301      	adds	r3, #1
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	697a      	ldr	r2, [r7, #20]
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d307      	bcc.n	8002f46 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0301 	and.w	r3, r3, #1
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f2      	bne.n	8002f2a <HAL_DMA_IRQHandler+0x2ca>
 8002f44:	e000      	b.n	8002f48 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f46:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d005      	beq.n	8002f6c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	4798      	blx	r3
 8002f68:	e000      	b.n	8002f6c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f6a:	bf00      	nop
    }
  }
}
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop

08002f74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b085      	sub	sp, #20
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	683a      	ldr	r2, [r7, #0]
 8002f98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b40      	cmp	r3, #64	; 0x40
 8002fa0:	d108      	bne.n	8002fb4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002fb2:	e007      	b.n	8002fc4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	60da      	str	r2, [r3, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr

08002fd0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	3b10      	subs	r3, #16
 8002fe0:	4a14      	ldr	r2, [pc, #80]	; (8003034 <DMA_CalcBaseAndBitshift+0x64>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	091b      	lsrs	r3, r3, #4
 8002fe8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fea:	4a13      	ldr	r2, [pc, #76]	; (8003038 <DMA_CalcBaseAndBitshift+0x68>)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b03      	cmp	r3, #3
 8002ffc:	d909      	bls.n	8003012 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003006:	f023 0303 	bic.w	r3, r3, #3
 800300a:	1d1a      	adds	r2, r3, #4
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	659a      	str	r2, [r3, #88]	; 0x58
 8003010:	e007      	b.n	8003022 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800301a:	f023 0303 	bic.w	r3, r3, #3
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003026:	4618      	mov	r0, r3
 8003028:	3714      	adds	r7, #20
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	aaaaaaab 	.word	0xaaaaaaab
 8003038:	0800b318 	.word	0x0800b318

0800303c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800303c:	b480      	push	{r7}
 800303e:	b085      	sub	sp, #20
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	699b      	ldr	r3, [r3, #24]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d11f      	bne.n	8003096 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b03      	cmp	r3, #3
 800305a:	d855      	bhi.n	8003108 <DMA_CheckFifoParam+0xcc>
 800305c:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <DMA_CheckFifoParam+0x28>)
 800305e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003062:	bf00      	nop
 8003064:	08003075 	.word	0x08003075
 8003068:	08003087 	.word	0x08003087
 800306c:	08003075 	.word	0x08003075
 8003070:	08003109 	.word	0x08003109
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003078:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d045      	beq.n	800310c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003084:	e042      	b.n	800310c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800308a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800308e:	d13f      	bne.n	8003110 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003094:	e03c      	b.n	8003110 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309e:	d121      	bne.n	80030e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d836      	bhi.n	8003114 <DMA_CheckFifoParam+0xd8>
 80030a6:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <DMA_CheckFifoParam+0x70>)
 80030a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ac:	080030bd 	.word	0x080030bd
 80030b0:	080030c3 	.word	0x080030c3
 80030b4:	080030bd 	.word	0x080030bd
 80030b8:	080030d5 	.word	0x080030d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
      break;
 80030c0:	e02f      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d024      	beq.n	8003118 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d2:	e021      	b.n	8003118 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030dc:	d11e      	bne.n	800311c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030e2:	e01b      	b.n	800311c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030e4:	68bb      	ldr	r3, [r7, #8]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d902      	bls.n	80030f0 <DMA_CheckFifoParam+0xb4>
 80030ea:	2b03      	cmp	r3, #3
 80030ec:	d003      	beq.n	80030f6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030ee:	e018      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
      break;
 80030f4:	e015      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	73fb      	strb	r3, [r7, #15]
      break;
 8003106:	e00b      	b.n	8003120 <DMA_CheckFifoParam+0xe4>
      break;
 8003108:	bf00      	nop
 800310a:	e00a      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 800310c:	bf00      	nop
 800310e:	e008      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 8003110:	bf00      	nop
 8003112:	e006      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 8003114:	bf00      	nop
 8003116:	e004      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 8003118:	bf00      	nop
 800311a:	e002      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;   
 800311c:	bf00      	nop
 800311e:	e000      	b.n	8003122 <DMA_CheckFifoParam+0xe6>
      break;
 8003120:	bf00      	nop
    }
  } 
  
  return status; 
 8003122:	7bfb      	ldrb	r3, [r7, #15]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003130:	b480      	push	{r7}
 8003132:	b089      	sub	sp, #36	; 0x24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800313e:	2300      	movs	r3, #0
 8003140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003142:	2300      	movs	r3, #0
 8003144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003146:	2300      	movs	r3, #0
 8003148:	61fb      	str	r3, [r7, #28]
 800314a:	e177      	b.n	800343c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800314c:	2201      	movs	r2, #1
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	697a      	ldr	r2, [r7, #20]
 800315c:	4013      	ands	r3, r2
 800315e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	429a      	cmp	r2, r3
 8003166:	f040 8166 	bne.w	8003436 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d00b      	beq.n	800318a <HAL_GPIO_Init+0x5a>
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	2b02      	cmp	r3, #2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800317e:	2b11      	cmp	r3, #17
 8003180:	d003      	beq.n	800318a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b12      	cmp	r3, #18
 8003188:	d130      	bne.n	80031ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	2203      	movs	r2, #3
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	fa02 f303 	lsl.w	r3, r2, r3
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031c0:	2201      	movs	r2, #1
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	091b      	lsrs	r3, r3, #4
 80031d6:	f003 0201 	and.w	r2, r3, #1
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	fa02 f303 	lsl.w	r3, r2, r3
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	2203      	movs	r2, #3
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689a      	ldr	r2, [r3, #8]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	4313      	orrs	r3, r2
 8003214:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b02      	cmp	r3, #2
 8003222:	d003      	beq.n	800322c <HAL_GPIO_Init+0xfc>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b12      	cmp	r3, #18
 800322a:	d123      	bne.n	8003274 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800322c:	69fb      	ldr	r3, [r7, #28]
 800322e:	08da      	lsrs	r2, r3, #3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	3208      	adds	r2, #8
 8003234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003238:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	220f      	movs	r2, #15
 8003244:	fa02 f303 	lsl.w	r3, r2, r3
 8003248:	43db      	mvns	r3, r3
 800324a:	69ba      	ldr	r2, [r7, #24]
 800324c:	4013      	ands	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	691a      	ldr	r2, [r3, #16]
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	fa02 f303 	lsl.w	r3, r2, r3
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	08da      	lsrs	r2, r3, #3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3208      	adds	r2, #8
 800326e:	69b9      	ldr	r1, [r7, #24]
 8003270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	2203      	movs	r2, #3
 8003280:	fa02 f303 	lsl.w	r3, r2, r3
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0203 	and.w	r2, r3, #3
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	005b      	lsls	r3, r3, #1
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4313      	orrs	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	69ba      	ldr	r2, [r7, #24]
 80032a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80c0 	beq.w	8003436 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
 80032ba:	4b65      	ldr	r3, [pc, #404]	; (8003450 <HAL_GPIO_Init+0x320>)
 80032bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032be:	4a64      	ldr	r2, [pc, #400]	; (8003450 <HAL_GPIO_Init+0x320>)
 80032c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032c4:	6453      	str	r3, [r2, #68]	; 0x44
 80032c6:	4b62      	ldr	r3, [pc, #392]	; (8003450 <HAL_GPIO_Init+0x320>)
 80032c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032d2:	4a60      	ldr	r2, [pc, #384]	; (8003454 <HAL_GPIO_Init+0x324>)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	089b      	lsrs	r3, r3, #2
 80032d8:	3302      	adds	r3, #2
 80032da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f003 0303 	and.w	r3, r3, #3
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	220f      	movs	r2, #15
 80032ea:	fa02 f303 	lsl.w	r3, r2, r3
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a57      	ldr	r2, [pc, #348]	; (8003458 <HAL_GPIO_Init+0x328>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d037      	beq.n	800336e <HAL_GPIO_Init+0x23e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a56      	ldr	r2, [pc, #344]	; (800345c <HAL_GPIO_Init+0x32c>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d031      	beq.n	800336a <HAL_GPIO_Init+0x23a>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a55      	ldr	r2, [pc, #340]	; (8003460 <HAL_GPIO_Init+0x330>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d02b      	beq.n	8003366 <HAL_GPIO_Init+0x236>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a54      	ldr	r2, [pc, #336]	; (8003464 <HAL_GPIO_Init+0x334>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d025      	beq.n	8003362 <HAL_GPIO_Init+0x232>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a53      	ldr	r2, [pc, #332]	; (8003468 <HAL_GPIO_Init+0x338>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d01f      	beq.n	800335e <HAL_GPIO_Init+0x22e>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a52      	ldr	r2, [pc, #328]	; (800346c <HAL_GPIO_Init+0x33c>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d019      	beq.n	800335a <HAL_GPIO_Init+0x22a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a51      	ldr	r2, [pc, #324]	; (8003470 <HAL_GPIO_Init+0x340>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d013      	beq.n	8003356 <HAL_GPIO_Init+0x226>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a50      	ldr	r2, [pc, #320]	; (8003474 <HAL_GPIO_Init+0x344>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d00d      	beq.n	8003352 <HAL_GPIO_Init+0x222>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4f      	ldr	r2, [pc, #316]	; (8003478 <HAL_GPIO_Init+0x348>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d007      	beq.n	800334e <HAL_GPIO_Init+0x21e>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4a4e      	ldr	r2, [pc, #312]	; (800347c <HAL_GPIO_Init+0x34c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d101      	bne.n	800334a <HAL_GPIO_Init+0x21a>
 8003346:	2309      	movs	r3, #9
 8003348:	e012      	b.n	8003370 <HAL_GPIO_Init+0x240>
 800334a:	230a      	movs	r3, #10
 800334c:	e010      	b.n	8003370 <HAL_GPIO_Init+0x240>
 800334e:	2308      	movs	r3, #8
 8003350:	e00e      	b.n	8003370 <HAL_GPIO_Init+0x240>
 8003352:	2307      	movs	r3, #7
 8003354:	e00c      	b.n	8003370 <HAL_GPIO_Init+0x240>
 8003356:	2306      	movs	r3, #6
 8003358:	e00a      	b.n	8003370 <HAL_GPIO_Init+0x240>
 800335a:	2305      	movs	r3, #5
 800335c:	e008      	b.n	8003370 <HAL_GPIO_Init+0x240>
 800335e:	2304      	movs	r3, #4
 8003360:	e006      	b.n	8003370 <HAL_GPIO_Init+0x240>
 8003362:	2303      	movs	r3, #3
 8003364:	e004      	b.n	8003370 <HAL_GPIO_Init+0x240>
 8003366:	2302      	movs	r3, #2
 8003368:	e002      	b.n	8003370 <HAL_GPIO_Init+0x240>
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_GPIO_Init+0x240>
 800336e:	2300      	movs	r3, #0
 8003370:	69fa      	ldr	r2, [r7, #28]
 8003372:	f002 0203 	and.w	r2, r2, #3
 8003376:	0092      	lsls	r2, r2, #2
 8003378:	4093      	lsls	r3, r2
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003380:	4934      	ldr	r1, [pc, #208]	; (8003454 <HAL_GPIO_Init+0x324>)
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	089b      	lsrs	r3, r3, #2
 8003386:	3302      	adds	r3, #2
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800338e:	4b3c      	ldr	r3, [pc, #240]	; (8003480 <HAL_GPIO_Init+0x350>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	43db      	mvns	r3, r3
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	4013      	ands	r3, r2
 800339c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033b2:	4a33      	ldr	r2, [pc, #204]	; (8003480 <HAL_GPIO_Init+0x350>)
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033b8:	4b31      	ldr	r3, [pc, #196]	; (8003480 <HAL_GPIO_Init+0x350>)
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033dc:	4a28      	ldr	r2, [pc, #160]	; (8003480 <HAL_GPIO_Init+0x350>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033e2:	4b27      	ldr	r3, [pc, #156]	; (8003480 <HAL_GPIO_Init+0x350>)
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	43db      	mvns	r3, r3
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	4013      	ands	r3, r2
 80033f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	4313      	orrs	r3, r2
 8003404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003406:	4a1e      	ldr	r2, [pc, #120]	; (8003480 <HAL_GPIO_Init+0x350>)
 8003408:	69bb      	ldr	r3, [r7, #24]
 800340a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_GPIO_Init+0x350>)
 800340e:	68db      	ldr	r3, [r3, #12]
 8003410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	43db      	mvns	r3, r3
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	4013      	ands	r3, r2
 800341a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d003      	beq.n	8003430 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	4313      	orrs	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003430:	4a13      	ldr	r2, [pc, #76]	; (8003480 <HAL_GPIO_Init+0x350>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	3301      	adds	r3, #1
 800343a:	61fb      	str	r3, [r7, #28]
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	2b0f      	cmp	r3, #15
 8003440:	f67f ae84 	bls.w	800314c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003444:	bf00      	nop
 8003446:	3724      	adds	r7, #36	; 0x24
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr
 8003450:	40023800 	.word	0x40023800
 8003454:	40013800 	.word	0x40013800
 8003458:	40020000 	.word	0x40020000
 800345c:	40020400 	.word	0x40020400
 8003460:	40020800 	.word	0x40020800
 8003464:	40020c00 	.word	0x40020c00
 8003468:	40021000 	.word	0x40021000
 800346c:	40021400 	.word	0x40021400
 8003470:	40021800 	.word	0x40021800
 8003474:	40021c00 	.word	0x40021c00
 8003478:	40022000 	.word	0x40022000
 800347c:	40022400 	.word	0x40022400
 8003480:	40013c00 	.word	0x40013c00

08003484 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d101      	bne.n	8003496 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	e11f      	b.n	80036d6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d106      	bne.n	80034b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7fd ff76 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2224      	movs	r2, #36	; 0x24
 80034b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0201 	bic.w	r2, r2, #1
 80034c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e8:	f001 ff3c 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 80034ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4a7b      	ldr	r2, [pc, #492]	; (80036e0 <HAL_I2C_Init+0x25c>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	d807      	bhi.n	8003508 <HAL_I2C_Init+0x84>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	4a7a      	ldr	r2, [pc, #488]	; (80036e4 <HAL_I2C_Init+0x260>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	bf94      	ite	ls
 8003500:	2301      	movls	r3, #1
 8003502:	2300      	movhi	r3, #0
 8003504:	b2db      	uxtb	r3, r3
 8003506:	e006      	b.n	8003516 <HAL_I2C_Init+0x92>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	4a77      	ldr	r2, [pc, #476]	; (80036e8 <HAL_I2C_Init+0x264>)
 800350c:	4293      	cmp	r3, r2
 800350e:	bf94      	ite	ls
 8003510:	2301      	movls	r3, #1
 8003512:	2300      	movhi	r3, #0
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d001      	beq.n	800351e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e0db      	b.n	80036d6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	4a72      	ldr	r2, [pc, #456]	; (80036ec <HAL_I2C_Init+0x268>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	0c9b      	lsrs	r3, r3, #18
 8003528:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	4a64      	ldr	r2, [pc, #400]	; (80036e0 <HAL_I2C_Init+0x25c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d802      	bhi.n	8003558 <HAL_I2C_Init+0xd4>
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	3301      	adds	r3, #1
 8003556:	e009      	b.n	800356c <HAL_I2C_Init+0xe8>
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800355e:	fb02 f303 	mul.w	r3, r2, r3
 8003562:	4a63      	ldr	r2, [pc, #396]	; (80036f0 <HAL_I2C_Init+0x26c>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	099b      	lsrs	r3, r3, #6
 800356a:	3301      	adds	r3, #1
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6812      	ldr	r2, [r2, #0]
 8003570:	430b      	orrs	r3, r1
 8003572:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800357e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4956      	ldr	r1, [pc, #344]	; (80036e0 <HAL_I2C_Init+0x25c>)
 8003588:	428b      	cmp	r3, r1
 800358a:	d80d      	bhi.n	80035a8 <HAL_I2C_Init+0x124>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	1e59      	subs	r1, r3, #1
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	005b      	lsls	r3, r3, #1
 8003596:	fbb1 f3f3 	udiv	r3, r1, r3
 800359a:	3301      	adds	r3, #1
 800359c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035a0:	2b04      	cmp	r3, #4
 80035a2:	bf38      	it	cc
 80035a4:	2304      	movcc	r3, #4
 80035a6:	e04f      	b.n	8003648 <HAL_I2C_Init+0x1c4>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d111      	bne.n	80035d4 <HAL_I2C_Init+0x150>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	1e58      	subs	r0, r3, #1
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	460b      	mov	r3, r1
 80035ba:	005b      	lsls	r3, r3, #1
 80035bc:	440b      	add	r3, r1
 80035be:	fbb0 f3f3 	udiv	r3, r0, r3
 80035c2:	3301      	adds	r3, #1
 80035c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf0c      	ite	eq
 80035cc:	2301      	moveq	r3, #1
 80035ce:	2300      	movne	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e012      	b.n	80035fa <HAL_I2C_Init+0x176>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	1e58      	subs	r0, r3, #1
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6859      	ldr	r1, [r3, #4]
 80035dc:	460b      	mov	r3, r1
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	440b      	add	r3, r1
 80035e2:	0099      	lsls	r1, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ea:	3301      	adds	r3, #1
 80035ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bf0c      	ite	eq
 80035f4:	2301      	moveq	r3, #1
 80035f6:	2300      	movne	r3, #0
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Init+0x17e>
 80035fe:	2301      	movs	r3, #1
 8003600:	e022      	b.n	8003648 <HAL_I2C_Init+0x1c4>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d10e      	bne.n	8003628 <HAL_I2C_Init+0x1a4>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	1e58      	subs	r0, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6859      	ldr	r1, [r3, #4]
 8003612:	460b      	mov	r3, r1
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	440b      	add	r3, r1
 8003618:	fbb0 f3f3 	udiv	r3, r0, r3
 800361c:	3301      	adds	r3, #1
 800361e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003626:	e00f      	b.n	8003648 <HAL_I2C_Init+0x1c4>
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	1e58      	subs	r0, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6859      	ldr	r1, [r3, #4]
 8003630:	460b      	mov	r3, r1
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	440b      	add	r3, r1
 8003636:	0099      	lsls	r1, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	fbb0 f3f3 	udiv	r3, r0, r3
 800363e:	3301      	adds	r3, #1
 8003640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003644:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	6809      	ldr	r1, [r1, #0]
 800364c:	4313      	orrs	r3, r2
 800364e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69da      	ldr	r2, [r3, #28]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6a1b      	ldr	r3, [r3, #32]
 8003662:	431a      	orrs	r2, r3
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003676:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6911      	ldr	r1, [r2, #16]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68d2      	ldr	r2, [r2, #12]
 8003682:	4311      	orrs	r1, r2
 8003684:	687a      	ldr	r2, [r7, #4]
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	430b      	orrs	r3, r1
 800368a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695a      	ldr	r2, [r3, #20]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	699b      	ldr	r3, [r3, #24]
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	430a      	orrs	r2, r1
 80036a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f042 0201 	orr.w	r2, r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	000186a0 	.word	0x000186a0
 80036e4:	001e847f 	.word	0x001e847f
 80036e8:	003d08ff 	.word	0x003d08ff
 80036ec:	431bde83 	.word	0x431bde83
 80036f0:	10624dd3 	.word	0x10624dd3

080036f4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003704:	b2db      	uxtb	r3, r3
 8003706:	2b20      	cmp	r3, #32
 8003708:	d129      	bne.n	800375e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2224      	movs	r2, #36	; 0x24
 800370e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f022 0201 	bic.w	r2, r2, #1
 8003720:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0210 	bic.w	r2, r2, #16
 8003730:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	683a      	ldr	r2, [r7, #0]
 800373e:	430a      	orrs	r2, r1
 8003740:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f042 0201 	orr.w	r2, r2, #1
 8003750:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	e000      	b.n	8003760 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800375e:	2302      	movs	r3, #2
  }
}
 8003760:	4618      	mov	r0, r3
 8003762:	370c      	adds	r7, #12
 8003764:	46bd      	mov	sp, r7
 8003766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376a:	4770      	bx	lr

0800376c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b20      	cmp	r3, #32
 8003784:	d12a      	bne.n	80037dc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2224      	movs	r2, #36	; 0x24
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80037a6:	89fb      	ldrh	r3, [r7, #14]
 80037a8:	f023 030f 	bic.w	r3, r3, #15
 80037ac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	89fb      	ldrh	r3, [r7, #14]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	89fa      	ldrh	r2, [r7, #14]
 80037be:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 0201 	orr.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80037dc:	2302      	movs	r3, #2
  }
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr

080037ea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037ec:	b08f      	sub	sp, #60	; 0x3c
 80037ee:	af0a      	add	r7, sp, #40	; 0x28
 80037f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d101      	bne.n	80037fc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e10f      	b.n	8003a1c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d106      	bne.n	800381c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f006 f936 	bl	8009a88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2203      	movs	r2, #3
 8003820:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	2b00      	cmp	r3, #0
 800382e:	d102      	bne.n	8003836 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f003 f959 	bl	8006af2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	603b      	str	r3, [r7, #0]
 8003846:	687e      	ldr	r6, [r7, #4]
 8003848:	466d      	mov	r5, sp
 800384a:	f106 0410 	add.w	r4, r6, #16
 800384e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003856:	e894 0003 	ldmia.w	r4, {r0, r1}
 800385a:	e885 0003 	stmia.w	r5, {r0, r1}
 800385e:	1d33      	adds	r3, r6, #4
 8003860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003862:	6838      	ldr	r0, [r7, #0]
 8003864:	f003 f830 	bl	80068c8 <USB_CoreInit>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d005      	beq.n	800387a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2202      	movs	r2, #2
 8003872:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e0d0      	b.n	8003a1c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f003 f947 	bl	8006b14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	e04a      	b.n	8003922 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800388c:	7bfa      	ldrb	r2, [r7, #15]
 800388e:	6879      	ldr	r1, [r7, #4]
 8003890:	4613      	mov	r3, r2
 8003892:	00db      	lsls	r3, r3, #3
 8003894:	1a9b      	subs	r3, r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	333d      	adds	r3, #61	; 0x3d
 800389c:	2201      	movs	r2, #1
 800389e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80038a0:	7bfa      	ldrb	r2, [r7, #15]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	333c      	adds	r3, #60	; 0x3c
 80038b0:	7bfa      	ldrb	r2, [r7, #15]
 80038b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038b4:	7bfa      	ldrb	r2, [r7, #15]
 80038b6:	7bfb      	ldrb	r3, [r7, #15]
 80038b8:	b298      	uxth	r0, r3
 80038ba:	6879      	ldr	r1, [r7, #4]
 80038bc:	4613      	mov	r3, r2
 80038be:	00db      	lsls	r3, r3, #3
 80038c0:	1a9b      	subs	r3, r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	3342      	adds	r3, #66	; 0x42
 80038c8:	4602      	mov	r2, r0
 80038ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038cc:	7bfa      	ldrb	r2, [r7, #15]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	00db      	lsls	r3, r3, #3
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	333f      	adds	r3, #63	; 0x3f
 80038dc:	2200      	movs	r2, #0
 80038de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038e0:	7bfa      	ldrb	r2, [r7, #15]
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	3344      	adds	r3, #68	; 0x44
 80038f0:	2200      	movs	r2, #0
 80038f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038f4:	7bfa      	ldrb	r2, [r7, #15]
 80038f6:	6879      	ldr	r1, [r7, #4]
 80038f8:	4613      	mov	r3, r2
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	440b      	add	r3, r1
 8003902:	3348      	adds	r3, #72	; 0x48
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003908:	7bfa      	ldrb	r2, [r7, #15]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	3350      	adds	r3, #80	; 0x50
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800391c:	7bfb      	ldrb	r3, [r7, #15]
 800391e:	3301      	adds	r3, #1
 8003920:	73fb      	strb	r3, [r7, #15]
 8003922:	7bfa      	ldrb	r2, [r7, #15]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	429a      	cmp	r2, r3
 800392a:	d3af      	bcc.n	800388c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800392c:	2300      	movs	r3, #0
 800392e:	73fb      	strb	r3, [r7, #15]
 8003930:	e044      	b.n	80039bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003932:	7bfa      	ldrb	r2, [r7, #15]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	00db      	lsls	r3, r3, #3
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003944:	2200      	movs	r2, #0
 8003946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003948:	7bfa      	ldrb	r2, [r7, #15]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	00db      	lsls	r3, r3, #3
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800395a:	7bfa      	ldrb	r2, [r7, #15]
 800395c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	00db      	lsls	r3, r3, #3
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003974:	7bfa      	ldrb	r2, [r7, #15]
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	4613      	mov	r3, r2
 800397a:	00db      	lsls	r3, r3, #3
 800397c:	1a9b      	subs	r3, r3, r2
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003986:	2200      	movs	r2, #0
 8003988:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800398a:	7bfa      	ldrb	r2, [r7, #15]
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	4613      	mov	r3, r2
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	1a9b      	subs	r3, r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	440b      	add	r3, r1
 8003998:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039b6:	7bfb      	ldrb	r3, [r7, #15]
 80039b8:	3301      	adds	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
 80039bc:	7bfa      	ldrb	r2, [r7, #15]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d3b5      	bcc.n	8003932 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	603b      	str	r3, [r7, #0]
 80039cc:	687e      	ldr	r6, [r7, #4]
 80039ce:	466d      	mov	r5, sp
 80039d0:	f106 0410 	add.w	r4, r6, #16
 80039d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80039e4:	1d33      	adds	r3, r6, #4
 80039e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e8:	6838      	ldr	r0, [r7, #0]
 80039ea:	f003 f8bd 	bl	8006b68 <USB_DevInit>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d005      	beq.n	8003a00 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e00d      	b.n	8003a1c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f004 f905 	bl	8007c24 <USB_DevDisconnect>

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3714      	adds	r7, #20
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a24 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d101      	bne.n	8003a40 <HAL_PCD_Start+0x1c>
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	e020      	b.n	8003a82 <HAL_PCD_Start+0x5e>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d109      	bne.n	8003a64 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a54:	2b01      	cmp	r3, #1
 8003a56:	d005      	beq.n	8003a64 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f003 f831 	bl	8006ad0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4618      	mov	r0, r3
 8003a74:	f004 f8b5 	bl	8007be2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3710      	adds	r7, #16
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a8a:	b590      	push	{r4, r7, lr}
 8003a8c:	b08d      	sub	sp, #52	; 0x34
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f004 f973 	bl	8007d8c <USB_GetMode>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	f040 839d 	bne.w	80041e8 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f004 f8d7 	bl	8007c66 <USB_ReadInterrupts>
 8003ab8:	4603      	mov	r3, r0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8393 	beq.w	80041e6 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f004 f8ce 	bl	8007c66 <USB_ReadInterrupts>
 8003aca:	4603      	mov	r3, r0
 8003acc:	f003 0302 	and.w	r3, r3, #2
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d107      	bne.n	8003ae4 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f002 0202 	and.w	r2, r2, #2
 8003ae2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f004 f8bc 	bl	8007c66 <USB_ReadInterrupts>
 8003aee:	4603      	mov	r3, r0
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d161      	bne.n	8003bbc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f022 0210 	bic.w	r2, r2, #16
 8003b06:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003b08:	6a3b      	ldr	r3, [r7, #32]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	f003 020f 	and.w	r2, r3, #15
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	4413      	add	r3, r2
 8003b24:	3304      	adds	r3, #4
 8003b26:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	0c5b      	lsrs	r3, r3, #17
 8003b2c:	f003 030f 	and.w	r3, r3, #15
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d124      	bne.n	8003b7e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d035      	beq.n	8003bac <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	461a      	mov	r2, r3
 8003b52:	6a38      	ldr	r0, [r7, #32]
 8003b54:	f003 ff22 	bl	800799c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	091b      	lsrs	r3, r3, #4
 8003b60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b64:	441a      	add	r2, r3
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	699a      	ldr	r2, [r3, #24]
 8003b6e:	69bb      	ldr	r3, [r7, #24]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b76:	441a      	add	r2, r3
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	619a      	str	r2, [r3, #24]
 8003b7c:	e016      	b.n	8003bac <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	0c5b      	lsrs	r3, r3, #17
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	2b06      	cmp	r3, #6
 8003b88:	d110      	bne.n	8003bac <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b90:	2208      	movs	r2, #8
 8003b92:	4619      	mov	r1, r3
 8003b94:	6a38      	ldr	r0, [r7, #32]
 8003b96:	f003 ff01 	bl	800799c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	699a      	ldr	r2, [r3, #24]
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	091b      	lsrs	r3, r3, #4
 8003ba2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ba6:	441a      	add	r2, r3
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699a      	ldr	r2, [r3, #24]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0210 	orr.w	r2, r2, #16
 8003bba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 f850 	bl	8007c66 <USB_ReadInterrupts>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bcc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bd0:	d16e      	bne.n	8003cb0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f004 f856 	bl	8007c8c <USB_ReadDevAllOutEpInterrupt>
 8003be0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003be2:	e062      	b.n	8003caa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be6:	f003 0301 	and.w	r3, r3, #1
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d057      	beq.n	8003c9e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	4611      	mov	r1, r2
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f004 f87b 	bl	8007cf4 <USB_ReadDevOutEPInterrupt>
 8003bfe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	2301      	movs	r3, #1
 8003c1a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 fdb0 	bl	8004784 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2308      	movs	r3, #8
 8003c3e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 feaa 	bl	800499c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2310      	movs	r3, #16
 8003c62:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	f003 0320 	and.w	r3, r3, #32
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d008      	beq.n	8003c80 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	015a      	lsls	r2, r3, #5
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	4413      	add	r3, r2
 8003c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	2320      	movs	r3, #32
 8003c7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d009      	beq.n	8003c9e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	461a      	mov	r2, r3
 8003c98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c9c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca6:	085b      	lsrs	r3, r3, #1
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d199      	bne.n	8003be4 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f003 ffd6 	bl	8007c66 <USB_ReadInterrupts>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cc0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cc4:	f040 80c0 	bne.w	8003e48 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f003 fff7 	bl	8007cc0 <USB_ReadDevAllInEpInterrupt>
 8003cd2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003cd8:	e0b2      	b.n	8003e40 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	f000 80a7 	beq.w	8003e34 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f004 f81d 	bl	8007d30 <USB_ReadDevInEPInterrupt>
 8003cf6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d057      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	2201      	movs	r2, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	69f9      	ldr	r1, [r7, #28]
 8003d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d22:	4013      	ands	r3, r2
 8003d24:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d32:	461a      	mov	r2, r3
 8003d34:	2301      	movs	r3, #1
 8003d36:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d132      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	3348      	adds	r3, #72	; 0x48
 8003d50:	6819      	ldr	r1, [r3, #0]
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d56:	4613      	mov	r3, r2
 8003d58:	00db      	lsls	r3, r3, #3
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4403      	add	r3, r0
 8003d60:	3344      	adds	r3, #68	; 0x44
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4419      	add	r1, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	00db      	lsls	r3, r3, #3
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4403      	add	r3, r0
 8003d74:	3348      	adds	r3, #72	; 0x48
 8003d76:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d113      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x31c>
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d82:	4613      	mov	r3, r2
 8003d84:	00db      	lsls	r3, r3, #3
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	3350      	adds	r3, #80	; 0x50
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d108      	bne.n	8003da6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d9e:	461a      	mov	r2, r3
 8003da0:	2101      	movs	r1, #1
 8003da2:	f004 f825 	bl	8007df0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	4619      	mov	r1, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f005 feec 	bl	8009b8a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f003 0308 	and.w	r3, r3, #8
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d008      	beq.n	8003dce <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	015a      	lsls	r2, r3, #5
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2308      	movs	r3, #8
 8003dcc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f003 0310 	and.w	r3, r3, #16
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d008      	beq.n	8003dea <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dda:	015a      	lsls	r2, r3, #5
 8003ddc:	69fb      	ldr	r3, [r7, #28]
 8003dde:	4413      	add	r3, r2
 8003de0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de4:	461a      	mov	r2, r3
 8003de6:	2310      	movs	r3, #16
 8003de8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e00:	461a      	mov	r2, r3
 8003e02:	2340      	movs	r3, #64	; 0x40
 8003e04:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d008      	beq.n	8003e22 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	461a      	mov	r2, r3
 8003e1e:	2302      	movs	r3, #2
 8003e20:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d003      	beq.n	8003e34 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 fc1b 	bl	800466a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	3301      	adds	r3, #1
 8003e38:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3c:	085b      	lsrs	r3, r3, #1
 8003e3e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	f47f af49 	bne.w	8003cda <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f003 ff0a 	bl	8007c66 <USB_ReadInterrupts>
 8003e52:	4603      	mov	r3, r0
 8003e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e5c:	d122      	bne.n	8003ea4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	69fa      	ldr	r2, [r7, #28]
 8003e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e6c:	f023 0301 	bic.w	r3, r3, #1
 8003e70:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d108      	bne.n	8003e8e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e84:	2100      	movs	r1, #0
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fe26 	bl	8004ad8 <HAL_PCDEx_LPM_Callback>
 8003e8c:	e002      	b.n	8003e94 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f005 fef2 	bl	8009c78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003ea2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f003 fedc 	bl	8007c66 <USB_ReadInterrupts>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb8:	d112      	bne.n	8003ee0 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d102      	bne.n	8003ed0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f005 feae 	bl	8009c2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	695a      	ldr	r2, [r3, #20]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ede:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f003 febe 	bl	8007c66 <USB_ReadInterrupts>
 8003eea:	4603      	mov	r3, r0
 8003eec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ef0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ef4:	f040 80c7 	bne.w	8004086 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f06:	f023 0301 	bic.w	r3, r3, #1
 8003f0a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2110      	movs	r1, #16
 8003f12:	4618      	mov	r0, r3
 8003f14:	f002 ff8c 	bl	8006e30 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f18:	2300      	movs	r3, #0
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1c:	e056      	b.n	8003fcc <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f30:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	69fb      	ldr	r3, [r7, #28]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f42:	0151      	lsls	r1, r2, #5
 8003f44:	69fa      	ldr	r2, [r7, #28]
 8003f46:	440a      	add	r2, r1
 8003f48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f50:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f54:	015a      	lsls	r2, r3, #5
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	4413      	add	r3, r2
 8003f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f62:	0151      	lsls	r1, r2, #5
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	440a      	add	r2, r1
 8003f68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f70:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	69fb      	ldr	r3, [r7, #28]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	461a      	mov	r2, r3
 8003f80:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f84:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	015a      	lsls	r2, r3, #5
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fa0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fa4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	69fa      	ldr	r2, [r7, #28]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fc4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc8:	3301      	adds	r3, #1
 8003fca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d3a3      	bcc.n	8003f1e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fe4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fe8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d016      	beq.n	8004020 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ffc:	69fa      	ldr	r2, [r7, #28]
 8003ffe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004002:	f043 030b 	orr.w	r3, r3, #11
 8004006:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	69fa      	ldr	r2, [r7, #28]
 8004014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004018:	f043 030b 	orr.w	r3, r3, #11
 800401c:	6453      	str	r3, [r2, #68]	; 0x44
 800401e:	e015      	b.n	800404c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	695b      	ldr	r3, [r3, #20]
 8004028:	69fa      	ldr	r2, [r7, #28]
 800402a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800402e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004032:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004036:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800403e:	691b      	ldr	r3, [r3, #16]
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004046:	f043 030b 	orr.w	r3, r3, #11
 800404a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69fa      	ldr	r2, [r7, #28]
 8004056:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800405a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800405e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6818      	ldr	r0, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	691b      	ldr	r3, [r3, #16]
 8004068:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004070:	461a      	mov	r2, r3
 8004072:	f003 febd 	bl	8007df0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	695a      	ldr	r2, [r3, #20]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004084:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4618      	mov	r0, r3
 800408c:	f003 fdeb 	bl	8007c66 <USB_ReadInterrupts>
 8004090:	4603      	mov	r3, r0
 8004092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409a:	d124      	bne.n	80040e6 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4618      	mov	r0, r3
 80040a2:	f003 fe81 	bl	8007da8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f002 ff21 	bl	8006ef2 <USB_GetDevSpeed>
 80040b0:	4603      	mov	r3, r0
 80040b2:	461a      	mov	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681c      	ldr	r4, [r3, #0]
 80040bc:	f001 f946 	bl	800534c <HAL_RCC_GetHCLKFreq>
 80040c0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	461a      	mov	r2, r3
 80040ca:	4620      	mov	r0, r4
 80040cc:	f002 fc5e 	bl	800698c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f005 fd82 	bl	8009bda <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	695a      	ldr	r2, [r3, #20]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4618      	mov	r0, r3
 80040ec:	f003 fdbb 	bl	8007c66 <USB_ReadInterrupts>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d10a      	bne.n	8004110 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f005 fd5f 	bl	8009bbe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695a      	ldr	r2, [r3, #20]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f002 0208 	and.w	r2, r2, #8
 800410e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4618      	mov	r0, r3
 8004116:	f003 fda6 	bl	8007c66 <USB_ReadInterrupts>
 800411a:	4603      	mov	r3, r0
 800411c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004120:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004124:	d10f      	bne.n	8004146 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004126:	2300      	movs	r3, #0
 8004128:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	b2db      	uxtb	r3, r3
 800412e:	4619      	mov	r1, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f005 fdc1 	bl	8009cb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695a      	ldr	r2, [r3, #20]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004144:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f003 fd8b 	bl	8007c66 <USB_ReadInterrupts>
 8004150:	4603      	mov	r3, r0
 8004152:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004156:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800415a:	d10f      	bne.n	800417c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	b2db      	uxtb	r3, r3
 8004164:	4619      	mov	r1, r3
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f005 fd94 	bl	8009c94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695a      	ldr	r2, [r3, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800417a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f003 fd70 	bl	8007c66 <USB_ReadInterrupts>
 8004186:	4603      	mov	r3, r0
 8004188:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004190:	d10a      	bne.n	80041a8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f005 fda2 	bl	8009cdc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f003 fd5a 	bl	8007c66 <USB_ReadInterrupts>
 80041b2:	4603      	mov	r3, r0
 80041b4:	f003 0304 	and.w	r3, r3, #4
 80041b8:	2b04      	cmp	r3, #4
 80041ba:	d115      	bne.n	80041e8 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041c4:	69bb      	ldr	r3, [r7, #24]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041ce:	6878      	ldr	r0, [r7, #4]
 80041d0:	f005 fd92 	bl	8009cf8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6859      	ldr	r1, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	605a      	str	r2, [r3, #4]
 80041e4:	e000      	b.n	80041e8 <HAL_PCD_IRQHandler+0x75e>
      return;
 80041e6:	bf00      	nop
    }
  }
}
 80041e8:	3734      	adds	r7, #52	; 0x34
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd90      	pop	{r4, r7, pc}

080041ee <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b082      	sub	sp, #8
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
 80041f6:	460b      	mov	r3, r1
 80041f8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004200:	2b01      	cmp	r3, #1
 8004202:	d101      	bne.n	8004208 <HAL_PCD_SetAddress+0x1a>
 8004204:	2302      	movs	r3, #2
 8004206:	e013      	b.n	8004230 <HAL_PCD_SetAddress+0x42>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	78fa      	ldrb	r2, [r7, #3]
 8004214:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	4611      	mov	r1, r2
 8004220:	4618      	mov	r0, r3
 8004222:	f003 fcb8 	bl	8007b96 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3708      	adds	r7, #8
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	4608      	mov	r0, r1
 8004242:	4611      	mov	r1, r2
 8004244:	461a      	mov	r2, r3
 8004246:	4603      	mov	r3, r0
 8004248:	70fb      	strb	r3, [r7, #3]
 800424a:	460b      	mov	r3, r1
 800424c:	803b      	strh	r3, [r7, #0]
 800424e:	4613      	mov	r3, r2
 8004250:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004252:	2300      	movs	r3, #0
 8004254:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800425a:	2b00      	cmp	r3, #0
 800425c:	da0f      	bge.n	800427e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	4613      	mov	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	1a9b      	subs	r3, r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	3338      	adds	r3, #56	; 0x38
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	3304      	adds	r3, #4
 8004274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	705a      	strb	r2, [r3, #1]
 800427c:	e00f      	b.n	800429e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800427e:	78fb      	ldrb	r3, [r7, #3]
 8004280:	f003 020f 	and.w	r2, r3, #15
 8004284:	4613      	mov	r3, r2
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	1a9b      	subs	r3, r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	3304      	adds	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042aa:	883a      	ldrh	r2, [r7, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	78ba      	ldrb	r2, [r7, #2]
 80042b4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	785b      	ldrb	r3, [r3, #1]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d004      	beq.n	80042c8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042c8:	78bb      	ldrb	r3, [r7, #2]
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d102      	bne.n	80042d4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_PCD_EP_Open+0xaa>
 80042de:	2302      	movs	r3, #2
 80042e0:	e00e      	b.n	8004300 <HAL_PCD_EP_Open+0xc8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68f9      	ldr	r1, [r7, #12]
 80042f0:	4618      	mov	r0, r3
 80042f2:	f002 fe23 	bl	8006f3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80042fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	460b      	mov	r3, r1
 8004312:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004314:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004318:	2b00      	cmp	r3, #0
 800431a:	da0f      	bge.n	800433c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	f003 020f 	and.w	r2, r3, #15
 8004322:	4613      	mov	r3, r2
 8004324:	00db      	lsls	r3, r3, #3
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	3338      	adds	r3, #56	; 0x38
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	4413      	add	r3, r2
 8004330:	3304      	adds	r3, #4
 8004332:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2201      	movs	r2, #1
 8004338:	705a      	strb	r2, [r3, #1]
 800433a:	e00f      	b.n	800435c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	4413      	add	r3, r2
 8004352:	3304      	adds	r3, #4
 8004354:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800435c:	78fb      	ldrb	r3, [r7, #3]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <HAL_PCD_EP_Close+0x6e>
 8004372:	2302      	movs	r3, #2
 8004374:	e00e      	b.n	8004394 <HAL_PCD_EP_Close+0x8c>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	68f9      	ldr	r1, [r7, #12]
 8004384:	4618      	mov	r0, r3
 8004386:	f002 fe61 	bl	800704c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2200      	movs	r2, #0
 800438e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	60f8      	str	r0, [r7, #12]
 80043a4:	607a      	str	r2, [r7, #4]
 80043a6:	603b      	str	r3, [r7, #0]
 80043a8:	460b      	mov	r3, r1
 80043aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043ac:	7afb      	ldrb	r3, [r7, #11]
 80043ae:	f003 020f 	and.w	r2, r3, #15
 80043b2:	4613      	mov	r3, r2
 80043b4:	00db      	lsls	r3, r3, #3
 80043b6:	1a9b      	subs	r3, r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4413      	add	r3, r2
 80043c2:	3304      	adds	r3, #4
 80043c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	683a      	ldr	r2, [r7, #0]
 80043d0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	2200      	movs	r2, #0
 80043d6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	2200      	movs	r2, #0
 80043dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043de:	7afb      	ldrb	r3, [r7, #11]
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	b2da      	uxtb	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d102      	bne.n	80043f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f8:	7afb      	ldrb	r3, [r7, #11]
 80043fa:	f003 030f 	and.w	r3, r3, #15
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d109      	bne.n	8004416 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6818      	ldr	r0, [r3, #0]
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	691b      	ldr	r3, [r3, #16]
 800440a:	b2db      	uxtb	r3, r3
 800440c:	461a      	mov	r2, r3
 800440e:	6979      	ldr	r1, [r7, #20]
 8004410:	f003 f93c 	bl	800768c <USB_EP0StartXfer>
 8004414:	e008      	b.n	8004428 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	461a      	mov	r2, r3
 8004422:	6979      	ldr	r1, [r7, #20]
 8004424:	f002 feee 	bl	8007204 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}

08004432 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	460b      	mov	r3, r1
 800443c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800443e:	78fb      	ldrb	r3, [r7, #3]
 8004440:	f003 020f 	and.w	r2, r3, #15
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	4613      	mov	r3, r2
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	1a9b      	subs	r3, r3, r2
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004454:	681b      	ldr	r3, [r3, #0]
}
 8004456:	4618      	mov	r0, r3
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr

08004462 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b086      	sub	sp, #24
 8004466:	af00      	add	r7, sp, #0
 8004468:	60f8      	str	r0, [r7, #12]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
 800446e:	460b      	mov	r3, r1
 8004470:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004472:	7afb      	ldrb	r3, [r7, #11]
 8004474:	f003 020f 	and.w	r2, r3, #15
 8004478:	4613      	mov	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	1a9b      	subs	r3, r3, r2
 800447e:	009b      	lsls	r3, r3, #2
 8004480:	3338      	adds	r3, #56	; 0x38
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	3304      	adds	r3, #4
 8004488:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2201      	movs	r2, #1
 80044a0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044a2:	7afb      	ldrb	r3, [r7, #11]
 80044a4:	f003 030f 	and.w	r3, r3, #15
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d102      	bne.n	80044bc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044bc:	7afb      	ldrb	r3, [r7, #11]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d109      	bne.n	80044da <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	461a      	mov	r2, r3
 80044d2:	6979      	ldr	r1, [r7, #20]
 80044d4:	f003 f8da 	bl	800768c <USB_EP0StartXfer>
 80044d8:	e008      	b.n	80044ec <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6818      	ldr	r0, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	691b      	ldr	r3, [r3, #16]
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	461a      	mov	r2, r3
 80044e6:	6979      	ldr	r1, [r7, #20]
 80044e8:	f002 fe8c 	bl	8007204 <USB_EPStartXfer>
  }

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3718      	adds	r7, #24
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004502:	78fb      	ldrb	r3, [r7, #3]
 8004504:	f003 020f 	and.w	r2, r3, #15
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	429a      	cmp	r2, r3
 800450e:	d901      	bls.n	8004514 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e050      	b.n	80045b6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004514:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004518:	2b00      	cmp	r3, #0
 800451a:	da0f      	bge.n	800453c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800451c:	78fb      	ldrb	r3, [r7, #3]
 800451e:	f003 020f 	and.w	r2, r3, #15
 8004522:	4613      	mov	r3, r2
 8004524:	00db      	lsls	r3, r3, #3
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	3338      	adds	r3, #56	; 0x38
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	4413      	add	r3, r2
 8004530:	3304      	adds	r3, #4
 8004532:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2201      	movs	r2, #1
 8004538:	705a      	strb	r2, [r3, #1]
 800453a:	e00d      	b.n	8004558 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	4413      	add	r3, r2
 800454e:	3304      	adds	r3, #4
 8004550:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	f003 030f 	and.w	r3, r3, #15
 8004564:	b2da      	uxtb	r2, r3
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_PCD_EP_SetStall+0x82>
 8004574:	2302      	movs	r3, #2
 8004576:	e01e      	b.n	80045b6 <HAL_PCD_EP_SetStall+0xc0>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68f9      	ldr	r1, [r7, #12]
 8004586:	4618      	mov	r0, r3
 8004588:	f003 fa31 	bl	80079ee <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800458c:	78fb      	ldrb	r3, [r7, #3]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	2b00      	cmp	r3, #0
 8004594:	d10a      	bne.n	80045ac <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6818      	ldr	r0, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	b2d9      	uxtb	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045a6:	461a      	mov	r2, r3
 80045a8:	f003 fc22 	bl	8007df0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2200      	movs	r2, #0
 80045b0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045b4:	2300      	movs	r3, #0
}
 80045b6:	4618      	mov	r0, r3
 80045b8:	3710      	adds	r7, #16
 80045ba:	46bd      	mov	sp, r7
 80045bc:	bd80      	pop	{r7, pc}

080045be <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045be:	b580      	push	{r7, lr}
 80045c0:	b084      	sub	sp, #16
 80045c2:	af00      	add	r7, sp, #0
 80045c4:	6078      	str	r0, [r7, #4]
 80045c6:	460b      	mov	r3, r1
 80045c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045ca:	78fb      	ldrb	r3, [r7, #3]
 80045cc:	f003 020f 	and.w	r2, r3, #15
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	429a      	cmp	r2, r3
 80045d6:	d901      	bls.n	80045dc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e042      	b.n	8004662 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	da0f      	bge.n	8004604 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045e4:	78fb      	ldrb	r3, [r7, #3]
 80045e6:	f003 020f 	and.w	r2, r3, #15
 80045ea:	4613      	mov	r3, r2
 80045ec:	00db      	lsls	r3, r3, #3
 80045ee:	1a9b      	subs	r3, r3, r2
 80045f0:	009b      	lsls	r3, r3, #2
 80045f2:	3338      	adds	r3, #56	; 0x38
 80045f4:	687a      	ldr	r2, [r7, #4]
 80045f6:	4413      	add	r3, r2
 80045f8:	3304      	adds	r3, #4
 80045fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2201      	movs	r2, #1
 8004600:	705a      	strb	r2, [r3, #1]
 8004602:	e00f      	b.n	8004624 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004604:	78fb      	ldrb	r3, [r7, #3]
 8004606:	f003 020f 	and.w	r2, r3, #15
 800460a:	4613      	mov	r3, r2
 800460c:	00db      	lsls	r3, r3, #3
 800460e:	1a9b      	subs	r3, r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	4413      	add	r3, r2
 800461a:	3304      	adds	r3, #4
 800461c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	f003 030f 	and.w	r3, r3, #15
 8004630:	b2da      	uxtb	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800463c:	2b01      	cmp	r3, #1
 800463e:	d101      	bne.n	8004644 <HAL_PCD_EP_ClrStall+0x86>
 8004640:	2302      	movs	r3, #2
 8004642:	e00e      	b.n	8004662 <HAL_PCD_EP_ClrStall+0xa4>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	68f9      	ldr	r1, [r7, #12]
 8004652:	4618      	mov	r0, r3
 8004654:	f003 fa39 	bl	8007aca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004660:	2300      	movs	r3, #0
}
 8004662:	4618      	mov	r0, r3
 8004664:	3710      	adds	r7, #16
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}

0800466a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800466a:	b580      	push	{r7, lr}
 800466c:	b08a      	sub	sp, #40	; 0x28
 800466e:	af02      	add	r7, sp, #8
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	1a9b      	subs	r3, r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	3338      	adds	r3, #56	; 0x38
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	4413      	add	r3, r2
 800468e:	3304      	adds	r3, #4
 8004690:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	699a      	ldr	r2, [r3, #24]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	429a      	cmp	r2, r3
 800469c:	d901      	bls.n	80046a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e06c      	b.n	800477c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	695a      	ldr	r2, [r3, #20]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	699b      	ldr	r3, [r3, #24]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	69fa      	ldr	r2, [r7, #28]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d902      	bls.n	80046be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	3303      	adds	r3, #3
 80046c2:	089b      	lsrs	r3, r3, #2
 80046c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046c6:	e02b      	b.n	8004720 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	699b      	ldr	r3, [r3, #24]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d902      	bls.n	80046e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	3303      	adds	r3, #3
 80046e8:	089b      	lsrs	r3, r3, #2
 80046ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	68d9      	ldr	r1, [r3, #12]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	b2da      	uxtb	r2, r3
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	4603      	mov	r3, r0
 8004702:	6978      	ldr	r0, [r7, #20]
 8004704:	f003 f915 	bl	8007932 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	68da      	ldr	r2, [r3, #12]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	441a      	add	r2, r3
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	699a      	ldr	r2, [r3, #24]
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	441a      	add	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	b29b      	uxth	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	429a      	cmp	r2, r3
 8004734:	d809      	bhi.n	800474a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	699a      	ldr	r2, [r3, #24]
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800473e:	429a      	cmp	r2, r3
 8004740:	d203      	bcs.n	800474a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d1be      	bne.n	80046c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	429a      	cmp	r2, r3
 8004754:	d811      	bhi.n	800477a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	f003 030f 	and.w	r3, r3, #15
 800475c:	2201      	movs	r2, #1
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	43db      	mvns	r3, r3
 8004770:	6939      	ldr	r1, [r7, #16]
 8004772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004776:	4013      	ands	r3, r2
 8004778:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b086      	sub	sp, #24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	333c      	adds	r3, #60	; 0x3c
 800479c:	3304      	adds	r3, #4
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	015a      	lsls	r2, r3, #5
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	4413      	add	r3, r2
 80047aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ae:	689b      	ldr	r3, [r3, #8]
 80047b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b01      	cmp	r3, #1
 80047b8:	f040 80a0 	bne.w	80048fc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	f003 0308 	and.w	r3, r3, #8
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d015      	beq.n	80047f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a72      	ldr	r2, [pc, #456]	; (8004994 <PCD_EP_OutXfrComplete_int+0x210>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	f240 80dd 	bls.w	800498a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 80d7 	beq.w	800498a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e8:	461a      	mov	r2, r3
 80047ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ee:	6093      	str	r3, [r2, #8]
 80047f0:	e0cb      	b.n	800498a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f003 0320 	and.w	r3, r3, #32
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	2320      	movs	r3, #32
 800480c:	6093      	str	r3, [r2, #8]
 800480e:	e0bc      	b.n	800498a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004816:	2b00      	cmp	r3, #0
 8004818:	f040 80b7 	bne.w	800498a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4a5d      	ldr	r2, [pc, #372]	; (8004994 <PCD_EP_OutXfrComplete_int+0x210>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d90f      	bls.n	8004844 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	461a      	mov	r2, r3
 800483c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004840:	6093      	str	r3, [r2, #8]
 8004842:	e0a2      	b.n	800498a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004844:	6879      	ldr	r1, [r7, #4]
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	4613      	mov	r3, r2
 800484a:	00db      	lsls	r3, r3, #3
 800484c:	1a9b      	subs	r3, r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	440b      	add	r3, r1
 8004852:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004856:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	0159      	lsls	r1, r3, #5
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	440b      	add	r3, r1
 8004860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800486a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	4613      	mov	r3, r2
 8004872:	00db      	lsls	r3, r3, #3
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	4403      	add	r3, r0
 800487a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800487e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004880:	6879      	ldr	r1, [r7, #4]
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	4613      	mov	r3, r2
 8004886:	00db      	lsls	r3, r3, #3
 8004888:	1a9b      	subs	r3, r3, r2
 800488a:	009b      	lsls	r3, r3, #2
 800488c:	440b      	add	r3, r1
 800488e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004892:	6819      	ldr	r1, [r3, #0]
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	4613      	mov	r3, r2
 800489a:	00db      	lsls	r3, r3, #3
 800489c:	1a9b      	subs	r3, r3, r2
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	4403      	add	r3, r0
 80048a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4419      	add	r1, r3
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	683a      	ldr	r2, [r7, #0]
 80048ae:	4613      	mov	r3, r2
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4403      	add	r3, r0
 80048b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048bc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d114      	bne.n	80048ee <PCD_EP_OutXfrComplete_int+0x16a>
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	00db      	lsls	r3, r3, #3
 80048cc:	1a9b      	subs	r3, r3, r2
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	440b      	add	r3, r1
 80048d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d108      	bne.n	80048ee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048e6:	461a      	mov	r2, r3
 80048e8:	2101      	movs	r1, #1
 80048ea:	f003 fa81 	bl	8007df0 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	4619      	mov	r1, r3
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f005 f92d 	bl	8009b54 <HAL_PCD_DataOutStageCallback>
 80048fa:	e046      	b.n	800498a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a26      	ldr	r2, [pc, #152]	; (8004998 <PCD_EP_OutXfrComplete_int+0x214>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d124      	bne.n	800494e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	461a      	mov	r2, r3
 800491c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004920:	6093      	str	r3, [r2, #8]
 8004922:	e032      	b.n	800498a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d008      	beq.n	8004940 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	693b      	ldr	r3, [r7, #16]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800493a:	461a      	mov	r2, r3
 800493c:	2320      	movs	r3, #32
 800493e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f005 f904 	bl	8009b54 <HAL_PCD_DataOutStageCallback>
 800494c:	e01d      	b.n	800498a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d114      	bne.n	800497e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004954:	6879      	ldr	r1, [r7, #4]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	4613      	mov	r3, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	440b      	add	r3, r1
 8004962:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d108      	bne.n	800497e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6818      	ldr	r0, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004976:	461a      	mov	r2, r3
 8004978:	2100      	movs	r1, #0
 800497a:	f003 fa39 	bl	8007df0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	b2db      	uxtb	r3, r3
 8004982:	4619      	mov	r1, r3
 8004984:	6878      	ldr	r0, [r7, #4]
 8004986:	f005 f8e5 	bl	8009b54 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3718      	adds	r7, #24
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}
 8004994:	4f54300a 	.word	0x4f54300a
 8004998:	4f54310a 	.word	0x4f54310a

0800499c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	333c      	adds	r3, #60	; 0x3c
 80049b4:	3304      	adds	r3, #4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <PCD_EP_OutSetupPacket_int+0x88>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d90e      	bls.n	80049f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d009      	beq.n	80049f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e8:	461a      	mov	r2, r3
 80049ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f005 f89d 	bl	8009b30 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	4a0a      	ldr	r2, [pc, #40]	; (8004a24 <PCD_EP_OutSetupPacket_int+0x88>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d90c      	bls.n	8004a18 <PCD_EP_OutSetupPacket_int+0x7c>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d108      	bne.n	8004a18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6818      	ldr	r0, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a10:	461a      	mov	r2, r3
 8004a12:	2101      	movs	r1, #1
 8004a14:	f003 f9ec 	bl	8007df0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3718      	adds	r7, #24
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	4f54300a 	.word	0x4f54300a

08004a28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	460b      	mov	r3, r1
 8004a32:	70fb      	strb	r3, [r7, #3]
 8004a34:	4613      	mov	r3, r2
 8004a36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d107      	bne.n	8004a56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a46:	883b      	ldrh	r3, [r7, #0]
 8004a48:	0419      	lsls	r1, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	430a      	orrs	r2, r1
 8004a52:	629a      	str	r2, [r3, #40]	; 0x28
 8004a54:	e028      	b.n	8004aa8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	0c1b      	lsrs	r3, r3, #16
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4413      	add	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a64:	2300      	movs	r3, #0
 8004a66:	73fb      	strb	r3, [r7, #15]
 8004a68:	e00d      	b.n	8004a86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681a      	ldr	r2, [r3, #0]
 8004a6e:	7bfb      	ldrb	r3, [r7, #15]
 8004a70:	3340      	adds	r3, #64	; 0x40
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a80:	7bfb      	ldrb	r3, [r7, #15]
 8004a82:	3301      	adds	r3, #1
 8004a84:	73fb      	strb	r3, [r7, #15]
 8004a86:	7bfa      	ldrb	r2, [r7, #15]
 8004a88:	78fb      	ldrb	r3, [r7, #3]
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	429a      	cmp	r2, r3
 8004a8e:	d3ec      	bcc.n	8004a6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a90:	883b      	ldrh	r3, [r7, #0]
 8004a92:	0418      	lsls	r0, r3, #16
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6819      	ldr	r1, [r3, #0]
 8004a98:	78fb      	ldrb	r3, [r7, #3]
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	68ba      	ldr	r2, [r7, #8]
 8004a9e:	4302      	orrs	r2, r0
 8004aa0:	3340      	adds	r3, #64	; 0x40
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	460b      	mov	r3, r1
 8004ac0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	887a      	ldrh	r2, [r7, #2]
 8004ac8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b086      	sub	sp, #24
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e25b      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d075      	beq.n	8004bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b0e:	4ba3      	ldr	r3, [pc, #652]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	f003 030c 	and.w	r3, r3, #12
 8004b16:	2b04      	cmp	r3, #4
 8004b18:	d00c      	beq.n	8004b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1a:	4ba0      	ldr	r3, [pc, #640]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b22:	2b08      	cmp	r3, #8
 8004b24:	d112      	bne.n	8004b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b26:	4b9d      	ldr	r3, [pc, #628]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b32:	d10b      	bne.n	8004b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b34:	4b99      	ldr	r3, [pc, #612]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d05b      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x108>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d157      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e236      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b54:	d106      	bne.n	8004b64 <HAL_RCC_OscConfig+0x74>
 8004b56:	4b91      	ldr	r3, [pc, #580]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	4a90      	ldr	r2, [pc, #576]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b60:	6013      	str	r3, [r2, #0]
 8004b62:	e01d      	b.n	8004ba0 <HAL_RCC_OscConfig+0xb0>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b6c:	d10c      	bne.n	8004b88 <HAL_RCC_OscConfig+0x98>
 8004b6e:	4b8b      	ldr	r3, [pc, #556]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a8a      	ldr	r2, [pc, #552]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b78:	6013      	str	r3, [r2, #0]
 8004b7a:	4b88      	ldr	r3, [pc, #544]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a87      	ldr	r2, [pc, #540]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b84:	6013      	str	r3, [r2, #0]
 8004b86:	e00b      	b.n	8004ba0 <HAL_RCC_OscConfig+0xb0>
 8004b88:	4b84      	ldr	r3, [pc, #528]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a83      	ldr	r2, [pc, #524]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b92:	6013      	str	r3, [r2, #0]
 8004b94:	4b81      	ldr	r3, [pc, #516]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	4a80      	ldr	r2, [pc, #512]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d013      	beq.n	8004bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba8:	f7fd f9ba 	bl	8001f20 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fd f9b6 	bl	8001f20 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e1fb      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	4b76      	ldr	r3, [pc, #472]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d0f0      	beq.n	8004bb0 <HAL_RCC_OscConfig+0xc0>
 8004bce:	e014      	b.n	8004bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bd0:	f7fd f9a6 	bl	8001f20 <HAL_GetTick>
 8004bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bd6:	e008      	b.n	8004bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd8:	f7fd f9a2 	bl	8001f20 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b64      	cmp	r3, #100	; 0x64
 8004be4:	d901      	bls.n	8004bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e1e7      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bea:	4b6c      	ldr	r3, [pc, #432]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1f0      	bne.n	8004bd8 <HAL_RCC_OscConfig+0xe8>
 8004bf6:	e000      	b.n	8004bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d063      	beq.n	8004cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c06:	4b65      	ldr	r3, [pc, #404]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d00b      	beq.n	8004c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c12:	4b62      	ldr	r3, [pc, #392]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d11c      	bne.n	8004c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c1e:	4b5f      	ldr	r3, [pc, #380]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d116      	bne.n	8004c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2a:	4b5c      	ldr	r3, [pc, #368]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d005      	beq.n	8004c42 <HAL_RCC_OscConfig+0x152>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d001      	beq.n	8004c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e1bb      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c42:	4b56      	ldr	r3, [pc, #344]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	00db      	lsls	r3, r3, #3
 8004c50:	4952      	ldr	r1, [pc, #328]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c56:	e03a      	b.n	8004cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d020      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c60:	4b4f      	ldr	r3, [pc, #316]	; (8004da0 <HAL_RCC_OscConfig+0x2b0>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fd f95b 	bl	8001f20 <HAL_GetTick>
 8004c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c6e:	f7fd f957 	bl	8001f20 <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b02      	cmp	r3, #2
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e19c      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c80:	4b46      	ldr	r3, [pc, #280]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c8c:	4b43      	ldr	r3, [pc, #268]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4940      	ldr	r1, [pc, #256]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	600b      	str	r3, [r1, #0]
 8004ca0:	e015      	b.n	8004cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ca2:	4b3f      	ldr	r3, [pc, #252]	; (8004da0 <HAL_RCC_OscConfig+0x2b0>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca8:	f7fd f93a 	bl	8001f20 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cb0:	f7fd f936 	bl	8001f20 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e17b      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc2:	4b36      	ldr	r3, [pc, #216]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1f0      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d030      	beq.n	8004d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d016      	beq.n	8004d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ce2:	4b30      	ldr	r3, [pc, #192]	; (8004da4 <HAL_RCC_OscConfig+0x2b4>)
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce8:	f7fd f91a 	bl	8001f20 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cf0:	f7fd f916 	bl	8001f20 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e15b      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d02:	4b26      	ldr	r3, [pc, #152]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x200>
 8004d0e:	e015      	b.n	8004d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d10:	4b24      	ldr	r3, [pc, #144]	; (8004da4 <HAL_RCC_OscConfig+0x2b4>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d16:	f7fd f903 	bl	8001f20 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d1e:	f7fd f8ff 	bl	8001f20 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e144      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	4b1a      	ldr	r3, [pc, #104]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d34:	f003 0302 	and.w	r3, r3, #2
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1f0      	bne.n	8004d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0304 	and.w	r3, r3, #4
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80a0 	beq.w	8004e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d4e:	4b13      	ldr	r3, [pc, #76]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	4b0f      	ldr	r3, [pc, #60]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d62:	4a0e      	ldr	r2, [pc, #56]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d68:	6413      	str	r3, [r2, #64]	; 0x40
 8004d6a:	4b0c      	ldr	r3, [pc, #48]	; (8004d9c <HAL_RCC_OscConfig+0x2ac>)
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d72:	60bb      	str	r3, [r7, #8]
 8004d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d76:	2301      	movs	r3, #1
 8004d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d7a:	4b0b      	ldr	r3, [pc, #44]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d121      	bne.n	8004dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d86:	4b08      	ldr	r3, [pc, #32]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a07      	ldr	r2, [pc, #28]	; (8004da8 <HAL_RCC_OscConfig+0x2b8>)
 8004d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d92:	f7fd f8c5 	bl	8001f20 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d98:	e011      	b.n	8004dbe <HAL_RCC_OscConfig+0x2ce>
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800
 8004da0:	42470000 	.word	0x42470000
 8004da4:	42470e80 	.word	0x42470e80
 8004da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dac:	f7fd f8b8 	bl	8001f20 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e0fd      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dbe:	4b81      	ldr	r3, [pc, #516]	; (8004fc4 <HAL_RCC_OscConfig+0x4d4>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f0      	beq.n	8004dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d106      	bne.n	8004de0 <HAL_RCC_OscConfig+0x2f0>
 8004dd2:	4b7d      	ldr	r3, [pc, #500]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd6:	4a7c      	ldr	r2, [pc, #496]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dde:	e01c      	b.n	8004e1a <HAL_RCC_OscConfig+0x32a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	2b05      	cmp	r3, #5
 8004de6:	d10c      	bne.n	8004e02 <HAL_RCC_OscConfig+0x312>
 8004de8:	4b77      	ldr	r3, [pc, #476]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dec:	4a76      	ldr	r2, [pc, #472]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dee:	f043 0304 	orr.w	r3, r3, #4
 8004df2:	6713      	str	r3, [r2, #112]	; 0x70
 8004df4:	4b74      	ldr	r3, [pc, #464]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df8:	4a73      	ldr	r2, [pc, #460]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004dfa:	f043 0301 	orr.w	r3, r3, #1
 8004dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004e00:	e00b      	b.n	8004e1a <HAL_RCC_OscConfig+0x32a>
 8004e02:	4b71      	ldr	r3, [pc, #452]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a70      	ldr	r2, [pc, #448]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e08:	f023 0301 	bic.w	r3, r3, #1
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0e:	4b6e      	ldr	r3, [pc, #440]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e12:	4a6d      	ldr	r2, [pc, #436]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e14:	f023 0304 	bic.w	r3, r3, #4
 8004e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d015      	beq.n	8004e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e22:	f7fd f87d 	bl	8001f20 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e28:	e00a      	b.n	8004e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e2a:	f7fd f879 	bl	8001f20 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d901      	bls.n	8004e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	e0bc      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e40:	4b61      	ldr	r3, [pc, #388]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	f003 0302 	and.w	r3, r3, #2
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d0ee      	beq.n	8004e2a <HAL_RCC_OscConfig+0x33a>
 8004e4c:	e014      	b.n	8004e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e4e:	f7fd f867 	bl	8001f20 <HAL_GetTick>
 8004e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e54:	e00a      	b.n	8004e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e56:	f7fd f863 	bl	8001f20 <HAL_GetTick>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	1ad3      	subs	r3, r2, r3
 8004e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0a6      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e6c:	4b56      	ldr	r3, [pc, #344]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1ee      	bne.n	8004e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e78:	7dfb      	ldrb	r3, [r7, #23]
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d105      	bne.n	8004e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7e:	4b52      	ldr	r3, [pc, #328]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4a51      	ldr	r2, [pc, #324]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8092 	beq.w	8004fb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e94:	4b4c      	ldr	r3, [pc, #304]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 030c 	and.w	r3, r3, #12
 8004e9c:	2b08      	cmp	r3, #8
 8004e9e:	d05c      	beq.n	8004f5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	699b      	ldr	r3, [r3, #24]
 8004ea4:	2b02      	cmp	r3, #2
 8004ea6:	d141      	bne.n	8004f2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea8:	4b48      	ldr	r3, [pc, #288]	; (8004fcc <HAL_RCC_OscConfig+0x4dc>)
 8004eaa:	2200      	movs	r2, #0
 8004eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eae:	f7fd f837 	bl	8001f20 <HAL_GetTick>
 8004eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb4:	e008      	b.n	8004ec8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eb6:	f7fd f833 	bl	8001f20 <HAL_GetTick>
 8004eba:	4602      	mov	r2, r0
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	1ad3      	subs	r3, r2, r3
 8004ec0:	2b02      	cmp	r3, #2
 8004ec2:	d901      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ec4:	2303      	movs	r3, #3
 8004ec6:	e078      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec8:	4b3f      	ldr	r3, [pc, #252]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1f0      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	69da      	ldr	r2, [r3, #28]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee2:	019b      	lsls	r3, r3, #6
 8004ee4:	431a      	orrs	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eea:	085b      	lsrs	r3, r3, #1
 8004eec:	3b01      	subs	r3, #1
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	431a      	orrs	r2, r3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	061b      	lsls	r3, r3, #24
 8004ef8:	4933      	ldr	r1, [pc, #204]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004efe:	4b33      	ldr	r3, [pc, #204]	; (8004fcc <HAL_RCC_OscConfig+0x4dc>)
 8004f00:	2201      	movs	r2, #1
 8004f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f04:	f7fd f80c 	bl	8001f20 <HAL_GetTick>
 8004f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0a:	e008      	b.n	8004f1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f0c:	f7fd f808 	bl	8001f20 <HAL_GetTick>
 8004f10:	4602      	mov	r2, r0
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d901      	bls.n	8004f1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f1a:	2303      	movs	r3, #3
 8004f1c:	e04d      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d0f0      	beq.n	8004f0c <HAL_RCC_OscConfig+0x41c>
 8004f2a:	e045      	b.n	8004fb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <HAL_RCC_OscConfig+0x4dc>)
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f32:	f7fc fff5 	bl	8001f20 <HAL_GetTick>
 8004f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f38:	e008      	b.n	8004f4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f3a:	f7fc fff1 	bl	8001f20 <HAL_GetTick>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	1ad3      	subs	r3, r2, r3
 8004f44:	2b02      	cmp	r3, #2
 8004f46:	d901      	bls.n	8004f4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f48:	2303      	movs	r3, #3
 8004f4a:	e036      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4c:	4b1e      	ldr	r3, [pc, #120]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d1f0      	bne.n	8004f3a <HAL_RCC_OscConfig+0x44a>
 8004f58:	e02e      	b.n	8004fb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	699b      	ldr	r3, [r3, #24]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d101      	bne.n	8004f66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f62:	2301      	movs	r3, #1
 8004f64:	e029      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f66:	4b18      	ldr	r3, [pc, #96]	; (8004fc8 <HAL_RCC_OscConfig+0x4d8>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	69db      	ldr	r3, [r3, #28]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d11c      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d115      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f8e:	4013      	ands	r3, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d10d      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d106      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d001      	beq.n	8004fb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3718      	adds	r7, #24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	42470060 	.word	0x42470060

08004fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d101      	bne.n	8004fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e0cc      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fe4:	4b68      	ldr	r3, [pc, #416]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 030f 	and.w	r3, r3, #15
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d90c      	bls.n	800500c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ff2:	4b65      	ldr	r3, [pc, #404]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ffa:	4b63      	ldr	r3, [pc, #396]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 030f 	and.w	r3, r3, #15
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	429a      	cmp	r2, r3
 8005006:	d001      	beq.n	800500c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e0b8      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f003 0302 	and.w	r3, r3, #2
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0304 	and.w	r3, r3, #4
 8005020:	2b00      	cmp	r3, #0
 8005022:	d005      	beq.n	8005030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005024:	4b59      	ldr	r3, [pc, #356]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	4a58      	ldr	r2, [pc, #352]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800502e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0308 	and.w	r3, r3, #8
 8005038:	2b00      	cmp	r3, #0
 800503a:	d005      	beq.n	8005048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800503c:	4b53      	ldr	r3, [pc, #332]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	4a52      	ldr	r2, [pc, #328]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005048:	4b50      	ldr	r3, [pc, #320]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	494d      	ldr	r1, [pc, #308]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005056:	4313      	orrs	r3, r2
 8005058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d044      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d107      	bne.n	800507e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800506e:	4b47      	ldr	r3, [pc, #284]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d119      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e07f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d003      	beq.n	800508e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800508a:	2b03      	cmp	r3, #3
 800508c:	d107      	bne.n	800509e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508e:	4b3f      	ldr	r3, [pc, #252]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d109      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e06f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800509e:	4b3b      	ldr	r3, [pc, #236]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0302 	and.w	r3, r3, #2
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e067      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ae:	4b37      	ldr	r3, [pc, #220]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f023 0203 	bic.w	r2, r3, #3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4934      	ldr	r1, [pc, #208]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050c0:	f7fc ff2e 	bl	8001f20 <HAL_GetTick>
 80050c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050c6:	e00a      	b.n	80050de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c8:	f7fc ff2a 	bl	8001f20 <HAL_GetTick>
 80050cc:	4602      	mov	r2, r0
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	1ad3      	subs	r3, r2, r3
 80050d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d6:	4293      	cmp	r3, r2
 80050d8:	d901      	bls.n	80050de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e04f      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050de:	4b2b      	ldr	r3, [pc, #172]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 020c 	and.w	r2, r3, #12
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	429a      	cmp	r2, r3
 80050ee:	d1eb      	bne.n	80050c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050f0:	4b25      	ldr	r3, [pc, #148]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d20c      	bcs.n	8005118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050fe:	4b22      	ldr	r3, [pc, #136]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	683a      	ldr	r2, [r7, #0]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005106:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_RCC_ClockConfig+0x1b8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 030f 	and.w	r3, r3, #15
 800510e:	683a      	ldr	r2, [r7, #0]
 8005110:	429a      	cmp	r2, r3
 8005112:	d001      	beq.n	8005118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005114:	2301      	movs	r3, #1
 8005116:	e032      	b.n	800517e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 0304 	and.w	r3, r3, #4
 8005120:	2b00      	cmp	r3, #0
 8005122:	d008      	beq.n	8005136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005124:	4b19      	ldr	r3, [pc, #100]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	4916      	ldr	r1, [pc, #88]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0308 	and.w	r3, r3, #8
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005142:	4b12      	ldr	r3, [pc, #72]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	691b      	ldr	r3, [r3, #16]
 800514e:	00db      	lsls	r3, r3, #3
 8005150:	490e      	ldr	r1, [pc, #56]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 8005152:	4313      	orrs	r3, r2
 8005154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005156:	f000 f821 	bl	800519c <HAL_RCC_GetSysClockFreq>
 800515a:	4601      	mov	r1, r0
 800515c:	4b0b      	ldr	r3, [pc, #44]	; (800518c <HAL_RCC_ClockConfig+0x1bc>)
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	091b      	lsrs	r3, r3, #4
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	4a0a      	ldr	r2, [pc, #40]	; (8005190 <HAL_RCC_ClockConfig+0x1c0>)
 8005168:	5cd3      	ldrb	r3, [r2, r3]
 800516a:	fa21 f303 	lsr.w	r3, r1, r3
 800516e:	4a09      	ldr	r2, [pc, #36]	; (8005194 <HAL_RCC_ClockConfig+0x1c4>)
 8005170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005172:	4b09      	ldr	r3, [pc, #36]	; (8005198 <HAL_RCC_ClockConfig+0x1c8>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4618      	mov	r0, r3
 8005178:	f7fc fe8e 	bl	8001e98 <HAL_InitTick>

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	40023c00 	.word	0x40023c00
 800518c:	40023800 	.word	0x40023800
 8005190:	0800b300 	.word	0x0800b300
 8005194:	20000028 	.word	0x20000028
 8005198:	2000002c 	.word	0x2000002c

0800519c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800519c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051a2:	2300      	movs	r3, #0
 80051a4:	607b      	str	r3, [r7, #4]
 80051a6:	2300      	movs	r3, #0
 80051a8:	60fb      	str	r3, [r7, #12]
 80051aa:	2300      	movs	r3, #0
 80051ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051ae:	2300      	movs	r3, #0
 80051b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051b2:	4b63      	ldr	r3, [pc, #396]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	d007      	beq.n	80051ce <HAL_RCC_GetSysClockFreq+0x32>
 80051be:	2b08      	cmp	r3, #8
 80051c0:	d008      	beq.n	80051d4 <HAL_RCC_GetSysClockFreq+0x38>
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	f040 80b4 	bne.w	8005330 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c8:	4b5e      	ldr	r3, [pc, #376]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051ca:	60bb      	str	r3, [r7, #8]
       break;
 80051cc:	e0b3      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051ce:	4b5e      	ldr	r3, [pc, #376]	; (8005348 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80051d0:	60bb      	str	r3, [r7, #8]
      break;
 80051d2:	e0b0      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d4:	4b5a      	ldr	r3, [pc, #360]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051de:	4b58      	ldr	r3, [pc, #352]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d04a      	beq.n	8005280 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ea:	4b55      	ldr	r3, [pc, #340]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	099b      	lsrs	r3, r3, #6
 80051f0:	f04f 0400 	mov.w	r4, #0
 80051f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051f8:	f04f 0200 	mov.w	r2, #0
 80051fc:	ea03 0501 	and.w	r5, r3, r1
 8005200:	ea04 0602 	and.w	r6, r4, r2
 8005204:	4629      	mov	r1, r5
 8005206:	4632      	mov	r2, r6
 8005208:	f04f 0300 	mov.w	r3, #0
 800520c:	f04f 0400 	mov.w	r4, #0
 8005210:	0154      	lsls	r4, r2, #5
 8005212:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005216:	014b      	lsls	r3, r1, #5
 8005218:	4619      	mov	r1, r3
 800521a:	4622      	mov	r2, r4
 800521c:	1b49      	subs	r1, r1, r5
 800521e:	eb62 0206 	sbc.w	r2, r2, r6
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	f04f 0400 	mov.w	r4, #0
 800522a:	0194      	lsls	r4, r2, #6
 800522c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005230:	018b      	lsls	r3, r1, #6
 8005232:	1a5b      	subs	r3, r3, r1
 8005234:	eb64 0402 	sbc.w	r4, r4, r2
 8005238:	f04f 0100 	mov.w	r1, #0
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	00e2      	lsls	r2, r4, #3
 8005242:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005246:	00d9      	lsls	r1, r3, #3
 8005248:	460b      	mov	r3, r1
 800524a:	4614      	mov	r4, r2
 800524c:	195b      	adds	r3, r3, r5
 800524e:	eb44 0406 	adc.w	r4, r4, r6
 8005252:	f04f 0100 	mov.w	r1, #0
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	0262      	lsls	r2, r4, #9
 800525c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005260:	0259      	lsls	r1, r3, #9
 8005262:	460b      	mov	r3, r1
 8005264:	4614      	mov	r4, r2
 8005266:	4618      	mov	r0, r3
 8005268:	4621      	mov	r1, r4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f04f 0400 	mov.w	r4, #0
 8005270:	461a      	mov	r2, r3
 8005272:	4623      	mov	r3, r4
 8005274:	f7fb fc5a 	bl	8000b2c <__aeabi_uldivmod>
 8005278:	4603      	mov	r3, r0
 800527a:	460c      	mov	r4, r1
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	e049      	b.n	8005314 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005280:	4b2f      	ldr	r3, [pc, #188]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	099b      	lsrs	r3, r3, #6
 8005286:	f04f 0400 	mov.w	r4, #0
 800528a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800528e:	f04f 0200 	mov.w	r2, #0
 8005292:	ea03 0501 	and.w	r5, r3, r1
 8005296:	ea04 0602 	and.w	r6, r4, r2
 800529a:	4629      	mov	r1, r5
 800529c:	4632      	mov	r2, r6
 800529e:	f04f 0300 	mov.w	r3, #0
 80052a2:	f04f 0400 	mov.w	r4, #0
 80052a6:	0154      	lsls	r4, r2, #5
 80052a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052ac:	014b      	lsls	r3, r1, #5
 80052ae:	4619      	mov	r1, r3
 80052b0:	4622      	mov	r2, r4
 80052b2:	1b49      	subs	r1, r1, r5
 80052b4:	eb62 0206 	sbc.w	r2, r2, r6
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	f04f 0400 	mov.w	r4, #0
 80052c0:	0194      	lsls	r4, r2, #6
 80052c2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052c6:	018b      	lsls	r3, r1, #6
 80052c8:	1a5b      	subs	r3, r3, r1
 80052ca:	eb64 0402 	sbc.w	r4, r4, r2
 80052ce:	f04f 0100 	mov.w	r1, #0
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	00e2      	lsls	r2, r4, #3
 80052d8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052dc:	00d9      	lsls	r1, r3, #3
 80052de:	460b      	mov	r3, r1
 80052e0:	4614      	mov	r4, r2
 80052e2:	195b      	adds	r3, r3, r5
 80052e4:	eb44 0406 	adc.w	r4, r4, r6
 80052e8:	f04f 0100 	mov.w	r1, #0
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	02a2      	lsls	r2, r4, #10
 80052f2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052f6:	0299      	lsls	r1, r3, #10
 80052f8:	460b      	mov	r3, r1
 80052fa:	4614      	mov	r4, r2
 80052fc:	4618      	mov	r0, r3
 80052fe:	4621      	mov	r1, r4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f04f 0400 	mov.w	r4, #0
 8005306:	461a      	mov	r2, r3
 8005308:	4623      	mov	r3, r4
 800530a:	f7fb fc0f 	bl	8000b2c <__aeabi_uldivmod>
 800530e:	4603      	mov	r3, r0
 8005310:	460c      	mov	r4, r1
 8005312:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005314:	4b0a      	ldr	r3, [pc, #40]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	0c1b      	lsrs	r3, r3, #16
 800531a:	f003 0303 	and.w	r3, r3, #3
 800531e:	3301      	adds	r3, #1
 8005320:	005b      	lsls	r3, r3, #1
 8005322:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	fbb2 f3f3 	udiv	r3, r2, r3
 800532c:	60bb      	str	r3, [r7, #8]
      break;
 800532e:	e002      	b.n	8005336 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005330:	4b04      	ldr	r3, [pc, #16]	; (8005344 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005332:	60bb      	str	r3, [r7, #8]
      break;
 8005334:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005336:	68bb      	ldr	r3, [r7, #8]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005340:	40023800 	.word	0x40023800
 8005344:	00f42400 	.word	0x00f42400
 8005348:	007a1200 	.word	0x007a1200

0800534c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_RCC_GetHCLKFreq+0x14>)
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20000028 	.word	0x20000028

08005364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005368:	f7ff fff0 	bl	800534c <HAL_RCC_GetHCLKFreq>
 800536c:	4601      	mov	r1, r0
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0a9b      	lsrs	r3, r3, #10
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4a03      	ldr	r2, [pc, #12]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800537a:	5cd3      	ldrb	r3, [r2, r3]
 800537c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40023800 	.word	0x40023800
 8005388:	0800b310 	.word	0x0800b310

0800538c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005390:	f7ff ffdc 	bl	800534c <HAL_RCC_GetHCLKFreq>
 8005394:	4601      	mov	r1, r0
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0b5b      	lsrs	r3, r3, #13
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4a03      	ldr	r2, [pc, #12]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a2:	5cd3      	ldrb	r3, [r2, r3]
 80053a4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40023800 	.word	0x40023800
 80053b0:	0800b310 	.word	0x0800b310

080053b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e01d      	b.n	8005402 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc fb94 	bl	8001b08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 f8e4 	bl	80055c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2202      	movs	r2, #2
 8005416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b06      	cmp	r3, #6
 800542a:	d007      	beq.n	800543c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3714      	adds	r7, #20
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b084      	sub	sp, #16
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
 800545a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005462:	2b01      	cmp	r3, #1
 8005464:	d101      	bne.n	800546a <HAL_TIM_ConfigClockSource+0x18>
 8005466:	2302      	movs	r3, #2
 8005468:	e0a6      	b.n	80055b8 <HAL_TIM_ConfigClockSource+0x166>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2201      	movs	r2, #1
 800546e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005488:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005490:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2b40      	cmp	r3, #64	; 0x40
 80054a0:	d067      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x120>
 80054a2:	2b40      	cmp	r3, #64	; 0x40
 80054a4:	d80b      	bhi.n	80054be <HAL_TIM_ConfigClockSource+0x6c>
 80054a6:	2b10      	cmp	r3, #16
 80054a8:	d073      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x140>
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d802      	bhi.n	80054b4 <HAL_TIM_ConfigClockSource+0x62>
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d06f      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80054b2:	e078      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054b4:	2b20      	cmp	r3, #32
 80054b6:	d06c      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x140>
 80054b8:	2b30      	cmp	r3, #48	; 0x30
 80054ba:	d06a      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054bc:	e073      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054be:	2b70      	cmp	r3, #112	; 0x70
 80054c0:	d00d      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x8c>
 80054c2:	2b70      	cmp	r3, #112	; 0x70
 80054c4:	d804      	bhi.n	80054d0 <HAL_TIM_ConfigClockSource+0x7e>
 80054c6:	2b50      	cmp	r3, #80	; 0x50
 80054c8:	d033      	beq.n	8005532 <HAL_TIM_ConfigClockSource+0xe0>
 80054ca:	2b60      	cmp	r3, #96	; 0x60
 80054cc:	d041      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80054ce:	e06a      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d4:	d066      	beq.n	80055a4 <HAL_TIM_ConfigClockSource+0x152>
 80054d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054da:	d017      	beq.n	800550c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80054dc:	e063      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6899      	ldr	r1, [r3, #8]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f000 f981 	bl	80057f4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005500:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	609a      	str	r2, [r3, #8]
      break;
 800550a:	e04c      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6818      	ldr	r0, [r3, #0]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	6899      	ldr	r1, [r3, #8]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f000 f96a 	bl	80057f4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689a      	ldr	r2, [r3, #8]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800552e:	609a      	str	r2, [r3, #8]
      break;
 8005530:	e039      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6818      	ldr	r0, [r3, #0]
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	6859      	ldr	r1, [r3, #4]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	461a      	mov	r2, r3
 8005540:	f000 f8de 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2150      	movs	r1, #80	; 0x50
 800554a:	4618      	mov	r0, r3
 800554c:	f000 f937 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 8005550:	e029      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	461a      	mov	r2, r3
 8005560:	f000 f8fd 	bl	800575e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2160      	movs	r1, #96	; 0x60
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f927 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 8005570:	e019      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	461a      	mov	r2, r3
 8005580:	f000 f8be 	bl	8005700 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2140      	movs	r1, #64	; 0x40
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f917 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 8005590:	e009      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4619      	mov	r1, r3
 800559c:	4610      	mov	r0, r2
 800559e:	f000 f90e 	bl	80057be <TIM_ITRx_SetConfig>
      break;
 80055a2:	e000      	b.n	80055a6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80055a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3710      	adds	r7, #16
 80055bc:	46bd      	mov	sp, r7
 80055be:	bd80      	pop	{r7, pc}

080055c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
 80055c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a40      	ldr	r2, [pc, #256]	; (80056d4 <TIM_Base_SetConfig+0x114>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d013      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055de:	d00f      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3d      	ldr	r2, [pc, #244]	; (80056d8 <TIM_Base_SetConfig+0x118>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00b      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3c      	ldr	r2, [pc, #240]	; (80056dc <TIM_Base_SetConfig+0x11c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d007      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3b      	ldr	r2, [pc, #236]	; (80056e0 <TIM_Base_SetConfig+0x120>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d003      	beq.n	8005600 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a3a      	ldr	r2, [pc, #232]	; (80056e4 <TIM_Base_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d108      	bne.n	8005612 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005606:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2f      	ldr	r2, [pc, #188]	; (80056d4 <TIM_Base_SetConfig+0x114>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d02b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005620:	d027      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2c      	ldr	r2, [pc, #176]	; (80056d8 <TIM_Base_SetConfig+0x118>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d023      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2b      	ldr	r2, [pc, #172]	; (80056dc <TIM_Base_SetConfig+0x11c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01f      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2a      	ldr	r2, [pc, #168]	; (80056e0 <TIM_Base_SetConfig+0x120>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <TIM_Base_SetConfig+0x124>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d017      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a28      	ldr	r2, [pc, #160]	; (80056e8 <TIM_Base_SetConfig+0x128>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a27      	ldr	r2, [pc, #156]	; (80056ec <TIM_Base_SetConfig+0x12c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00f      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <TIM_Base_SetConfig+0x130>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00b      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <TIM_Base_SetConfig+0x134>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d007      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a24      	ldr	r2, [pc, #144]	; (80056f8 <TIM_Base_SetConfig+0x138>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d003      	beq.n	8005672 <TIM_Base_SetConfig+0xb2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a23      	ldr	r2, [pc, #140]	; (80056fc <TIM_Base_SetConfig+0x13c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d108      	bne.n	8005684 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	68fa      	ldr	r2, [r7, #12]
 8005680:	4313      	orrs	r3, r2
 8005682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	695b      	ldr	r3, [r3, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a0a      	ldr	r2, [pc, #40]	; (80056d4 <TIM_Base_SetConfig+0x114>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d003      	beq.n	80056b8 <TIM_Base_SetConfig+0xf8>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a0c      	ldr	r2, [pc, #48]	; (80056e4 <TIM_Base_SetConfig+0x124>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d103      	bne.n	80056c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	691a      	ldr	r2, [r3, #16]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2201      	movs	r2, #1
 80056c4:	615a      	str	r2, [r3, #20]
}
 80056c6:	bf00      	nop
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40010000 	.word	0x40010000
 80056d8:	40000400 	.word	0x40000400
 80056dc:	40000800 	.word	0x40000800
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40010400 	.word	0x40010400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800
 80056f4:	40001800 	.word	0x40001800
 80056f8:	40001c00 	.word	0x40001c00
 80056fc:	40002000 	.word	0x40002000

08005700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	60f8      	str	r0, [r7, #12]
 8005708:	60b9      	str	r1, [r7, #8]
 800570a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	6a1b      	ldr	r3, [r3, #32]
 8005710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6a1b      	ldr	r3, [r3, #32]
 8005716:	f023 0201 	bic.w	r2, r3, #1
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	699b      	ldr	r3, [r3, #24]
 8005722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800572a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	011b      	lsls	r3, r3, #4
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	4313      	orrs	r3, r2
 8005734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	f023 030a 	bic.w	r3, r3, #10
 800573c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	4313      	orrs	r3, r2
 8005744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	693a      	ldr	r2, [r7, #16]
 800574a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	697a      	ldr	r2, [r7, #20]
 8005750:	621a      	str	r2, [r3, #32]
}
 8005752:	bf00      	nop
 8005754:	371c      	adds	r7, #28
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575e:	b480      	push	{r7}
 8005760:	b087      	sub	sp, #28
 8005762:	af00      	add	r7, sp, #0
 8005764:	60f8      	str	r0, [r7, #12]
 8005766:	60b9      	str	r1, [r7, #8]
 8005768:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0210 	bic.w	r2, r3, #16
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	699b      	ldr	r3, [r3, #24]
 800577a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6a1b      	ldr	r3, [r3, #32]
 8005780:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005788:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	031b      	lsls	r3, r3, #12
 800578e:	697a      	ldr	r2, [r7, #20]
 8005790:	4313      	orrs	r3, r2
 8005792:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800579a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	011b      	lsls	r3, r3, #4
 80057a0:	693a      	ldr	r2, [r7, #16]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	621a      	str	r2, [r3, #32]
}
 80057b2:	bf00      	nop
 80057b4:	371c      	adds	r7, #28
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr

080057be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057be:	b480      	push	{r7}
 80057c0:	b085      	sub	sp, #20
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057d6:	683a      	ldr	r2, [r7, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4313      	orrs	r3, r2
 80057dc:	f043 0307 	orr.w	r3, r3, #7
 80057e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	609a      	str	r2, [r3, #8]
}
 80057e8:	bf00      	nop
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	60f8      	str	r0, [r7, #12]
 80057fc:	60b9      	str	r1, [r7, #8]
 80057fe:	607a      	str	r2, [r7, #4]
 8005800:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800580e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	021a      	lsls	r2, r3, #8
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	431a      	orrs	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	4313      	orrs	r3, r2
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	4313      	orrs	r3, r2
 8005820:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	609a      	str	r2, [r3, #8]
}
 8005828:	bf00      	nop
 800582a:	371c      	adds	r7, #28
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005834:	b480      	push	{r7}
 8005836:	b085      	sub	sp, #20
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005844:	2b01      	cmp	r3, #1
 8005846:	d101      	bne.n	800584c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005848:	2302      	movs	r3, #2
 800584a:	e05a      	b.n	8005902 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	689b      	ldr	r3, [r3, #8]
 800586a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005872:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4313      	orrs	r3, r2
 800587c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a21      	ldr	r2, [pc, #132]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d022      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005898:	d01d      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a1d      	ldr	r2, [pc, #116]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d018      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	4a1b      	ldr	r2, [pc, #108]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d013      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a1a      	ldr	r2, [pc, #104]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00e      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	4a18      	ldr	r2, [pc, #96]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058be:	4293      	cmp	r3, r2
 80058c0:	d009      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	4a17      	ldr	r2, [pc, #92]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d004      	beq.n	80058d6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a15      	ldr	r2, [pc, #84]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d10c      	bne.n	80058f0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005900:	2300      	movs	r3, #0
}
 8005902:	4618      	mov	r0, r3
 8005904:	3714      	adds	r7, #20
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	40010000 	.word	0x40010000
 8005914:	40000400 	.word	0x40000400
 8005918:	40000800 	.word	0x40000800
 800591c:	40000c00 	.word	0x40000c00
 8005920:	40010400 	.word	0x40010400
 8005924:	40014000 	.word	0x40014000
 8005928:	40001800 	.word	0x40001800

0800592c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e03f      	b.n	80059be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d106      	bne.n	8005958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005952:	6878      	ldr	r0, [r7, #4]
 8005954:	f7fc f962 	bl	8001c1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2224      	movs	r2, #36	; 0x24
 800595c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800596e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fc2d 	bl	80061d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005994:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	68da      	ldr	r2, [r3, #12]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3708      	adds	r7, #8
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
	...

080059c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	60f8      	str	r0, [r7, #12]
 80059d0:	60b9      	str	r1, [r7, #8]
 80059d2:	4613      	mov	r3, r2
 80059d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b20      	cmp	r3, #32
 80059e0:	d153      	bne.n	8005a8a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <HAL_UART_Transmit_DMA+0x26>
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e04c      	b.n	8005a8c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d101      	bne.n	8005a00 <HAL_UART_Transmit_DMA+0x38>
 80059fc:	2302      	movs	r3, #2
 80059fe:	e045      	b.n	8005a8c <HAL_UART_Transmit_DMA+0xc4>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2201      	movs	r2, #1
 8005a04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005a08:	68ba      	ldr	r2, [r7, #8]
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	88fa      	ldrh	r2, [r7, #6]
 8005a12:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	88fa      	ldrh	r2, [r7, #6]
 8005a18:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2221      	movs	r2, #33	; 0x21
 8005a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <HAL_UART_Transmit_DMA+0xcc>)
 8005a2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	4a18      	ldr	r2, [pc, #96]	; (8005a98 <HAL_UART_Transmit_DMA+0xd0>)
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	4a17      	ldr	r2, [pc, #92]	; (8005a9c <HAL_UART_Transmit_DMA+0xd4>)
 8005a3e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a44:	2200      	movs	r2, #0
 8005a46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005a48:	f107 0308 	add.w	r3, r7, #8
 8005a4c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	6819      	ldr	r1, [r3, #0]
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3304      	adds	r3, #4
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	88fb      	ldrh	r3, [r7, #6]
 8005a60:	f7fd f884 	bl	8002b6c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a6c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2200      	movs	r2, #0
 8005a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a84:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005a86:	2300      	movs	r3, #0
 8005a88:	e000      	b.n	8005a8c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005a8a:	2302      	movs	r3, #2
  }
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3718      	adds	r7, #24
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	08005ddd 	.word	0x08005ddd
 8005a98:	08005e2f 	.word	0x08005e2f
 8005a9c:	08005ecf 	.word	0x08005ecf

08005aa0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b20      	cmp	r3, #32
 8005ab8:	d166      	bne.n	8005b88 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <HAL_UART_Receive_DMA+0x26>
 8005ac0:	88fb      	ldrh	r3, [r7, #6]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d101      	bne.n	8005aca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e05f      	b.n	8005b8a <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d101      	bne.n	8005ad8 <HAL_UART_Receive_DMA+0x38>
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e058      	b.n	8005b8a <HAL_UART_Receive_DMA+0xea>
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	88fa      	ldrh	r2, [r7, #6]
 8005aea:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2200      	movs	r2, #0
 8005af0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2222      	movs	r2, #34	; 0x22
 8005af6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	4a25      	ldr	r2, [pc, #148]	; (8005b94 <HAL_UART_Receive_DMA+0xf4>)
 8005b00:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	4a24      	ldr	r2, [pc, #144]	; (8005b98 <HAL_UART_Receive_DMA+0xf8>)
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0e:	4a23      	ldr	r2, [pc, #140]	; (8005b9c <HAL_UART_Receive_DMA+0xfc>)
 8005b10:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	2200      	movs	r2, #0
 8005b18:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005b1a:	f107 0308 	add.w	r3, r7, #8
 8005b1e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3304      	adds	r3, #4
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681a      	ldr	r2, [r3, #0]
 8005b30:	88fb      	ldrh	r3, [r7, #6]
 8005b32:	f7fd f81b 	bl	8002b6c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005b36:	2300      	movs	r3, #0
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	613b      	str	r3, [r7, #16]
 8005b4a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b62:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695a      	ldr	r2, [r3, #20]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f042 0201 	orr.w	r2, r2, #1
 8005b72:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695a      	ldr	r2, [r3, #20]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b82:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	e000      	b.n	8005b8a <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005b88:	2302      	movs	r3, #2
  }
}
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	3718      	adds	r7, #24
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	08005e4b 	.word	0x08005e4b
 8005b98:	08005eb3 	.word	0x08005eb3
 8005b9c:	08005ecf 	.word	0x08005ecf

08005ba0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bc8:	69fb      	ldr	r3, [r7, #28]
 8005bca:	f003 030f 	and.w	r3, r3, #15
 8005bce:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d10d      	bne.n	8005bf2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d008      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x52>
 8005be0:	69bb      	ldr	r3, [r7, #24]
 8005be2:	f003 0320 	and.w	r3, r3, #32
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d003      	beq.n	8005bf2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fa6f 	bl	80060ce <UART_Receive_IT>
      return;
 8005bf0:	e0d1      	b.n	8005d96 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	f000 80b0 	beq.w	8005d5a <HAL_UART_IRQHandler+0x1ba>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f003 0301 	and.w	r3, r3, #1
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d105      	bne.n	8005c10 <HAL_UART_IRQHandler+0x70>
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	f000 80a5 	beq.w	8005d5a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c10:	69fb      	ldr	r3, [r7, #28]
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00a      	beq.n	8005c30 <HAL_UART_IRQHandler+0x90>
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d005      	beq.n	8005c30 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c28:	f043 0201 	orr.w	r2, r3, #1
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	f003 0304 	and.w	r3, r3, #4
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d00a      	beq.n	8005c50 <HAL_UART_IRQHandler+0xb0>
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d005      	beq.n	8005c50 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c48:	f043 0202 	orr.w	r2, r3, #2
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	f003 0302 	and.w	r3, r3, #2
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00a      	beq.n	8005c70 <HAL_UART_IRQHandler+0xd0>
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d005      	beq.n	8005c70 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c68:	f043 0204 	orr.w	r2, r3, #4
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	f003 0308 	and.w	r3, r3, #8
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d00f      	beq.n	8005c9a <HAL_UART_IRQHandler+0xfa>
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	f003 0320 	and.w	r3, r3, #32
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d104      	bne.n	8005c8e <HAL_UART_IRQHandler+0xee>
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d005      	beq.n	8005c9a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c92:	f043 0208 	orr.w	r2, r3, #8
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d078      	beq.n	8005d94 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	f003 0320 	and.w	r3, r3, #32
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d007      	beq.n	8005cbc <HAL_UART_IRQHandler+0x11c>
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fa09 	bl	80060ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cc6:	2b40      	cmp	r3, #64	; 0x40
 8005cc8:	bf0c      	ite	eq
 8005cca:	2301      	moveq	r3, #1
 8005ccc:	2300      	movne	r3, #0
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd6:	f003 0308 	and.w	r3, r3, #8
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d102      	bne.n	8005ce4 <HAL_UART_IRQHandler+0x144>
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d031      	beq.n	8005d48 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 f952 	bl	8005f8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	695b      	ldr	r3, [r3, #20]
 8005cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf4:	2b40      	cmp	r3, #64	; 0x40
 8005cf6:	d123      	bne.n	8005d40 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d06:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d013      	beq.n	8005d38 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <HAL_UART_IRQHandler+0x1fc>)
 8005d16:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fc ff7d 	bl	8002c1c <HAL_DMA_Abort_IT>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d016      	beq.n	8005d56 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d2e:	687a      	ldr	r2, [r7, #4]
 8005d30:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d32:	4610      	mov	r0, r2
 8005d34:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d36:	e00e      	b.n	8005d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f845 	bl	8005dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3e:	e00a      	b.n	8005d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f841 	bl	8005dc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d46:	e006      	b.n	8005d56 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 f83d 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d54:	e01e      	b.n	8005d94 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d56:	bf00      	nop
    return;
 8005d58:	e01c      	b.n	8005d94 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d008      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1d6>
 8005d64:	69bb      	ldr	r3, [r7, #24]
 8005d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 f93f 	bl	8005ff2 <UART_Transmit_IT>
    return;
 8005d74:	e00f      	b.n	8005d96 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d76:	69fb      	ldr	r3, [r7, #28]
 8005d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00a      	beq.n	8005d96 <HAL_UART_IRQHandler+0x1f6>
 8005d80:	69bb      	ldr	r3, [r7, #24]
 8005d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d005      	beq.n	8005d96 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 f987 	bl	800609e <UART_EndTransmit_IT>
    return;
 8005d90:	bf00      	nop
 8005d92:	e000      	b.n	8005d96 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d94:	bf00      	nop
  }
}
 8005d96:	3720      	adds	r7, #32
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	08005fcb 	.word	0x08005fcb

08005da0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005da8:	bf00      	nop
 8005daa:	370c      	adds	r7, #12
 8005dac:	46bd      	mov	sp, r7
 8005dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db2:	4770      	bx	lr

08005db4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005dbc:	bf00      	nop
 8005dbe:	370c      	adds	r7, #12
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc6:	4770      	bx	lr

08005dc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b083      	sub	sp, #12
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dd0:	bf00      	nop
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b084      	sub	sp, #16
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d113      	bne.n	8005e20 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	695a      	ldr	r2, [r3, #20]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e0c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e1c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e1e:	e002      	b.n	8005e26 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005e20:	68f8      	ldr	r0, [r7, #12]
 8005e22:	f7fb fc1b 	bl	800165c <HAL_UART_TxCpltCallback>
}
 8005e26:	bf00      	nop
 8005e28:	3710      	adds	r7, #16
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b084      	sub	sp, #16
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e3c:	68f8      	ldr	r0, [r7, #12]
 8005e3e:	f7ff ffaf 	bl	8005da0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e42:	bf00      	nop
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e56:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d11e      	bne.n	8005ea4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	68da      	ldr	r2, [r3, #12]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e7a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f022 0201 	bic.w	r2, r2, #1
 8005e8a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	695a      	ldr	r2, [r3, #20]
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005ea4:	68f8      	ldr	r0, [r7, #12]
 8005ea6:	f7fb fbc7 	bl	8001638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005eaa:	bf00      	nop
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005ec0:	68f8      	ldr	r0, [r7, #12]
 8005ec2:	f7ff ff77 	bl	8005db4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ec6:	bf00      	nop
 8005ec8:	3710      	adds	r7, #16
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eea:	2b80      	cmp	r3, #128	; 0x80
 8005eec:	bf0c      	ite	eq
 8005eee:	2301      	moveq	r3, #1
 8005ef0:	2300      	movne	r3, #0
 8005ef2:	b2db      	uxtb	r3, r3
 8005ef4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b21      	cmp	r3, #33	; 0x21
 8005f00:	d108      	bne.n	8005f14 <UART_DMAError+0x46>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f0e:	68b8      	ldr	r0, [r7, #8]
 8005f10:	f000 f827 	bl	8005f62 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	2b40      	cmp	r3, #64	; 0x40
 8005f20:	bf0c      	ite	eq
 8005f22:	2301      	moveq	r3, #1
 8005f24:	2300      	movne	r3, #0
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b22      	cmp	r3, #34	; 0x22
 8005f34:	d108      	bne.n	8005f48 <UART_DMAError+0x7a>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d005      	beq.n	8005f48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f42:	68b8      	ldr	r0, [r7, #8]
 8005f44:	f000 f823 	bl	8005f8e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4c:	f043 0210 	orr.w	r2, r3, #16
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f54:	68b8      	ldr	r0, [r7, #8]
 8005f56:	f7ff ff37 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f5a:	bf00      	nop
 8005f5c:	3710      	adds	r7, #16
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b083      	sub	sp, #12
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	68da      	ldr	r2, [r3, #12]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005f78:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005f82:	bf00      	nop
 8005f84:	370c      	adds	r7, #12
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68da      	ldr	r2, [r3, #12]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fa4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	695a      	ldr	r2, [r3, #20]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f022 0201 	bic.w	r2, r2, #1
 8005fb4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr

08005fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff feef 	bl	8005dc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fea:	bf00      	nop
 8005fec:	3710      	adds	r7, #16
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	bd80      	pop	{r7, pc}

08005ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006000:	b2db      	uxtb	r3, r3
 8006002:	2b21      	cmp	r3, #33	; 0x21
 8006004:	d144      	bne.n	8006090 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800600e:	d11a      	bne.n	8006046 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	461a      	mov	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006024:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d105      	bne.n	800603a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	1c9a      	adds	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	621a      	str	r2, [r3, #32]
 8006038:	e00e      	b.n	8006058 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	621a      	str	r2, [r3, #32]
 8006044:	e008      	b.n	8006058 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a1b      	ldr	r3, [r3, #32]
 800604a:	1c59      	adds	r1, r3, #1
 800604c:	687a      	ldr	r2, [r7, #4]
 800604e:	6211      	str	r1, [r2, #32]
 8006050:	781a      	ldrb	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29b      	uxth	r3, r3
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4619      	mov	r1, r3
 8006066:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006068:	2b00      	cmp	r3, #0
 800606a:	d10f      	bne.n	800608c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800607a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	68da      	ldr	r2, [r3, #12]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800608a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	e000      	b.n	8006092 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006090:	2302      	movs	r3, #2
  }
}
 8006092:	4618      	mov	r0, r3
 8006094:	3714      	adds	r7, #20
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800609e:	b580      	push	{r7, lr}
 80060a0:	b082      	sub	sp, #8
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2220      	movs	r2, #32
 80060ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7fb facc 	bl	800165c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060c4:	2300      	movs	r3, #0
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b084      	sub	sp, #16
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	2b22      	cmp	r3, #34	; 0x22
 80060e0:	d171      	bne.n	80061c6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ea:	d123      	bne.n	8006134 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060f0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d10e      	bne.n	8006118 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	b29b      	uxth	r3, r3
 8006102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006110:	1c9a      	adds	r2, r3, #2
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	629a      	str	r2, [r3, #40]	; 0x28
 8006116:	e029      	b.n	800616c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	b29b      	uxth	r3, r3
 8006120:	b2db      	uxtb	r3, r3
 8006122:	b29a      	uxth	r2, r3
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	1c5a      	adds	r2, r3, #1
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
 8006132:	e01b      	b.n	800616c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d10a      	bne.n	8006152 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6858      	ldr	r0, [r3, #4]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	1c59      	adds	r1, r3, #1
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	6291      	str	r1, [r2, #40]	; 0x28
 800614c:	b2c2      	uxtb	r2, r0
 800614e:	701a      	strb	r2, [r3, #0]
 8006150:	e00c      	b.n	800616c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	b2da      	uxtb	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615e:	1c58      	adds	r0, r3, #1
 8006160:	6879      	ldr	r1, [r7, #4]
 8006162:	6288      	str	r0, [r1, #40]	; 0x28
 8006164:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006170:	b29b      	uxth	r3, r3
 8006172:	3b01      	subs	r3, #1
 8006174:	b29b      	uxth	r3, r3
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	4619      	mov	r1, r3
 800617a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800617c:	2b00      	cmp	r3, #0
 800617e:	d120      	bne.n	80061c2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68da      	ldr	r2, [r3, #12]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0220 	bic.w	r2, r2, #32
 800618e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800619e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	695a      	ldr	r2, [r3, #20]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2220      	movs	r2, #32
 80061b4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	f7fb fa3d 	bl	8001638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80061be:	2300      	movs	r3, #0
 80061c0:	e002      	b.n	80061c8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	e000      	b.n	80061c8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80061c6:	2302      	movs	r3, #2
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	b085      	sub	sp, #20
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	691b      	ldr	r3, [r3, #16]
 80061e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	430a      	orrs	r2, r1
 80061ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	689a      	ldr	r2, [r3, #8]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	691b      	ldr	r3, [r3, #16]
 80061f8:	431a      	orrs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	695b      	ldr	r3, [r3, #20]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	69db      	ldr	r3, [r3, #28]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68db      	ldr	r3, [r3, #12]
 800620e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006212:	f023 030c 	bic.w	r3, r3, #12
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	6812      	ldr	r2, [r2, #0]
 800621a:	68f9      	ldr	r1, [r7, #12]
 800621c:	430b      	orrs	r3, r1
 800621e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	695b      	ldr	r3, [r3, #20]
 8006226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	699a      	ldr	r2, [r3, #24]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	430a      	orrs	r2, r1
 8006234:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800623e:	f040 818b 	bne.w	8006558 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4ac1      	ldr	r2, [pc, #772]	; (800654c <UART_SetConfig+0x37c>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d005      	beq.n	8006258 <UART_SetConfig+0x88>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4abf      	ldr	r2, [pc, #764]	; (8006550 <UART_SetConfig+0x380>)
 8006252:	4293      	cmp	r3, r2
 8006254:	f040 80bd 	bne.w	80063d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006258:	f7ff f898 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 800625c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	461d      	mov	r5, r3
 8006262:	f04f 0600 	mov.w	r6, #0
 8006266:	46a8      	mov	r8, r5
 8006268:	46b1      	mov	r9, r6
 800626a:	eb18 0308 	adds.w	r3, r8, r8
 800626e:	eb49 0409 	adc.w	r4, r9, r9
 8006272:	4698      	mov	r8, r3
 8006274:	46a1      	mov	r9, r4
 8006276:	eb18 0805 	adds.w	r8, r8, r5
 800627a:	eb49 0906 	adc.w	r9, r9, r6
 800627e:	f04f 0100 	mov.w	r1, #0
 8006282:	f04f 0200 	mov.w	r2, #0
 8006286:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800628a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800628e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006292:	4688      	mov	r8, r1
 8006294:	4691      	mov	r9, r2
 8006296:	eb18 0005 	adds.w	r0, r8, r5
 800629a:	eb49 0106 	adc.w	r1, r9, r6
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	461d      	mov	r5, r3
 80062a4:	f04f 0600 	mov.w	r6, #0
 80062a8:	196b      	adds	r3, r5, r5
 80062aa:	eb46 0406 	adc.w	r4, r6, r6
 80062ae:	461a      	mov	r2, r3
 80062b0:	4623      	mov	r3, r4
 80062b2:	f7fa fc3b 	bl	8000b2c <__aeabi_uldivmod>
 80062b6:	4603      	mov	r3, r0
 80062b8:	460c      	mov	r4, r1
 80062ba:	461a      	mov	r2, r3
 80062bc:	4ba5      	ldr	r3, [pc, #660]	; (8006554 <UART_SetConfig+0x384>)
 80062be:	fba3 2302 	umull	r2, r3, r3, r2
 80062c2:	095b      	lsrs	r3, r3, #5
 80062c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	461d      	mov	r5, r3
 80062cc:	f04f 0600 	mov.w	r6, #0
 80062d0:	46a9      	mov	r9, r5
 80062d2:	46b2      	mov	sl, r6
 80062d4:	eb19 0309 	adds.w	r3, r9, r9
 80062d8:	eb4a 040a 	adc.w	r4, sl, sl
 80062dc:	4699      	mov	r9, r3
 80062de:	46a2      	mov	sl, r4
 80062e0:	eb19 0905 	adds.w	r9, r9, r5
 80062e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80062e8:	f04f 0100 	mov.w	r1, #0
 80062ec:	f04f 0200 	mov.w	r2, #0
 80062f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062fc:	4689      	mov	r9, r1
 80062fe:	4692      	mov	sl, r2
 8006300:	eb19 0005 	adds.w	r0, r9, r5
 8006304:	eb4a 0106 	adc.w	r1, sl, r6
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	461d      	mov	r5, r3
 800630e:	f04f 0600 	mov.w	r6, #0
 8006312:	196b      	adds	r3, r5, r5
 8006314:	eb46 0406 	adc.w	r4, r6, r6
 8006318:	461a      	mov	r2, r3
 800631a:	4623      	mov	r3, r4
 800631c:	f7fa fc06 	bl	8000b2c <__aeabi_uldivmod>
 8006320:	4603      	mov	r3, r0
 8006322:	460c      	mov	r4, r1
 8006324:	461a      	mov	r2, r3
 8006326:	4b8b      	ldr	r3, [pc, #556]	; (8006554 <UART_SetConfig+0x384>)
 8006328:	fba3 1302 	umull	r1, r3, r3, r2
 800632c:	095b      	lsrs	r3, r3, #5
 800632e:	2164      	movs	r1, #100	; 0x64
 8006330:	fb01 f303 	mul.w	r3, r1, r3
 8006334:	1ad3      	subs	r3, r2, r3
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	3332      	adds	r3, #50	; 0x32
 800633a:	4a86      	ldr	r2, [pc, #536]	; (8006554 <UART_SetConfig+0x384>)
 800633c:	fba2 2303 	umull	r2, r3, r2, r3
 8006340:	095b      	lsrs	r3, r3, #5
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006348:	4498      	add	r8, r3
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	461d      	mov	r5, r3
 800634e:	f04f 0600 	mov.w	r6, #0
 8006352:	46a9      	mov	r9, r5
 8006354:	46b2      	mov	sl, r6
 8006356:	eb19 0309 	adds.w	r3, r9, r9
 800635a:	eb4a 040a 	adc.w	r4, sl, sl
 800635e:	4699      	mov	r9, r3
 8006360:	46a2      	mov	sl, r4
 8006362:	eb19 0905 	adds.w	r9, r9, r5
 8006366:	eb4a 0a06 	adc.w	sl, sl, r6
 800636a:	f04f 0100 	mov.w	r1, #0
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800637a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800637e:	4689      	mov	r9, r1
 8006380:	4692      	mov	sl, r2
 8006382:	eb19 0005 	adds.w	r0, r9, r5
 8006386:	eb4a 0106 	adc.w	r1, sl, r6
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	461d      	mov	r5, r3
 8006390:	f04f 0600 	mov.w	r6, #0
 8006394:	196b      	adds	r3, r5, r5
 8006396:	eb46 0406 	adc.w	r4, r6, r6
 800639a:	461a      	mov	r2, r3
 800639c:	4623      	mov	r3, r4
 800639e:	f7fa fbc5 	bl	8000b2c <__aeabi_uldivmod>
 80063a2:	4603      	mov	r3, r0
 80063a4:	460c      	mov	r4, r1
 80063a6:	461a      	mov	r2, r3
 80063a8:	4b6a      	ldr	r3, [pc, #424]	; (8006554 <UART_SetConfig+0x384>)
 80063aa:	fba3 1302 	umull	r1, r3, r3, r2
 80063ae:	095b      	lsrs	r3, r3, #5
 80063b0:	2164      	movs	r1, #100	; 0x64
 80063b2:	fb01 f303 	mul.w	r3, r1, r3
 80063b6:	1ad3      	subs	r3, r2, r3
 80063b8:	00db      	lsls	r3, r3, #3
 80063ba:	3332      	adds	r3, #50	; 0x32
 80063bc:	4a65      	ldr	r2, [pc, #404]	; (8006554 <UART_SetConfig+0x384>)
 80063be:	fba2 2303 	umull	r2, r3, r2, r3
 80063c2:	095b      	lsrs	r3, r3, #5
 80063c4:	f003 0207 	and.w	r2, r3, #7
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4442      	add	r2, r8
 80063ce:	609a      	str	r2, [r3, #8]
 80063d0:	e26f      	b.n	80068b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063d2:	f7fe ffc7 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 80063d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	461d      	mov	r5, r3
 80063dc:	f04f 0600 	mov.w	r6, #0
 80063e0:	46a8      	mov	r8, r5
 80063e2:	46b1      	mov	r9, r6
 80063e4:	eb18 0308 	adds.w	r3, r8, r8
 80063e8:	eb49 0409 	adc.w	r4, r9, r9
 80063ec:	4698      	mov	r8, r3
 80063ee:	46a1      	mov	r9, r4
 80063f0:	eb18 0805 	adds.w	r8, r8, r5
 80063f4:	eb49 0906 	adc.w	r9, r9, r6
 80063f8:	f04f 0100 	mov.w	r1, #0
 80063fc:	f04f 0200 	mov.w	r2, #0
 8006400:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006404:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006408:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800640c:	4688      	mov	r8, r1
 800640e:	4691      	mov	r9, r2
 8006410:	eb18 0005 	adds.w	r0, r8, r5
 8006414:	eb49 0106 	adc.w	r1, r9, r6
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	461d      	mov	r5, r3
 800641e:	f04f 0600 	mov.w	r6, #0
 8006422:	196b      	adds	r3, r5, r5
 8006424:	eb46 0406 	adc.w	r4, r6, r6
 8006428:	461a      	mov	r2, r3
 800642a:	4623      	mov	r3, r4
 800642c:	f7fa fb7e 	bl	8000b2c <__aeabi_uldivmod>
 8006430:	4603      	mov	r3, r0
 8006432:	460c      	mov	r4, r1
 8006434:	461a      	mov	r2, r3
 8006436:	4b47      	ldr	r3, [pc, #284]	; (8006554 <UART_SetConfig+0x384>)
 8006438:	fba3 2302 	umull	r2, r3, r3, r2
 800643c:	095b      	lsrs	r3, r3, #5
 800643e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	461d      	mov	r5, r3
 8006446:	f04f 0600 	mov.w	r6, #0
 800644a:	46a9      	mov	r9, r5
 800644c:	46b2      	mov	sl, r6
 800644e:	eb19 0309 	adds.w	r3, r9, r9
 8006452:	eb4a 040a 	adc.w	r4, sl, sl
 8006456:	4699      	mov	r9, r3
 8006458:	46a2      	mov	sl, r4
 800645a:	eb19 0905 	adds.w	r9, r9, r5
 800645e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006462:	f04f 0100 	mov.w	r1, #0
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800646e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006476:	4689      	mov	r9, r1
 8006478:	4692      	mov	sl, r2
 800647a:	eb19 0005 	adds.w	r0, r9, r5
 800647e:	eb4a 0106 	adc.w	r1, sl, r6
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	461d      	mov	r5, r3
 8006488:	f04f 0600 	mov.w	r6, #0
 800648c:	196b      	adds	r3, r5, r5
 800648e:	eb46 0406 	adc.w	r4, r6, r6
 8006492:	461a      	mov	r2, r3
 8006494:	4623      	mov	r3, r4
 8006496:	f7fa fb49 	bl	8000b2c <__aeabi_uldivmod>
 800649a:	4603      	mov	r3, r0
 800649c:	460c      	mov	r4, r1
 800649e:	461a      	mov	r2, r3
 80064a0:	4b2c      	ldr	r3, [pc, #176]	; (8006554 <UART_SetConfig+0x384>)
 80064a2:	fba3 1302 	umull	r1, r3, r3, r2
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	2164      	movs	r1, #100	; 0x64
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	3332      	adds	r3, #50	; 0x32
 80064b4:	4a27      	ldr	r2, [pc, #156]	; (8006554 <UART_SetConfig+0x384>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	005b      	lsls	r3, r3, #1
 80064be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064c2:	4498      	add	r8, r3
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	461d      	mov	r5, r3
 80064c8:	f04f 0600 	mov.w	r6, #0
 80064cc:	46a9      	mov	r9, r5
 80064ce:	46b2      	mov	sl, r6
 80064d0:	eb19 0309 	adds.w	r3, r9, r9
 80064d4:	eb4a 040a 	adc.w	r4, sl, sl
 80064d8:	4699      	mov	r9, r3
 80064da:	46a2      	mov	sl, r4
 80064dc:	eb19 0905 	adds.w	r9, r9, r5
 80064e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064f8:	4689      	mov	r9, r1
 80064fa:	4692      	mov	sl, r2
 80064fc:	eb19 0005 	adds.w	r0, r9, r5
 8006500:	eb4a 0106 	adc.w	r1, sl, r6
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	461d      	mov	r5, r3
 800650a:	f04f 0600 	mov.w	r6, #0
 800650e:	196b      	adds	r3, r5, r5
 8006510:	eb46 0406 	adc.w	r4, r6, r6
 8006514:	461a      	mov	r2, r3
 8006516:	4623      	mov	r3, r4
 8006518:	f7fa fb08 	bl	8000b2c <__aeabi_uldivmod>
 800651c:	4603      	mov	r3, r0
 800651e:	460c      	mov	r4, r1
 8006520:	461a      	mov	r2, r3
 8006522:	4b0c      	ldr	r3, [pc, #48]	; (8006554 <UART_SetConfig+0x384>)
 8006524:	fba3 1302 	umull	r1, r3, r3, r2
 8006528:	095b      	lsrs	r3, r3, #5
 800652a:	2164      	movs	r1, #100	; 0x64
 800652c:	fb01 f303 	mul.w	r3, r1, r3
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	3332      	adds	r3, #50	; 0x32
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <UART_SetConfig+0x384>)
 8006538:	fba2 2303 	umull	r2, r3, r2, r3
 800653c:	095b      	lsrs	r3, r3, #5
 800653e:	f003 0207 	and.w	r2, r3, #7
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4442      	add	r2, r8
 8006548:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800654a:	e1b2      	b.n	80068b2 <UART_SetConfig+0x6e2>
 800654c:	40011000 	.word	0x40011000
 8006550:	40011400 	.word	0x40011400
 8006554:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4ad7      	ldr	r2, [pc, #860]	; (80068bc <UART_SetConfig+0x6ec>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d005      	beq.n	800656e <UART_SetConfig+0x39e>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4ad6      	ldr	r2, [pc, #856]	; (80068c0 <UART_SetConfig+0x6f0>)
 8006568:	4293      	cmp	r3, r2
 800656a:	f040 80d1 	bne.w	8006710 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800656e:	f7fe ff0d 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 8006572:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	469a      	mov	sl, r3
 8006578:	f04f 0b00 	mov.w	fp, #0
 800657c:	46d0      	mov	r8, sl
 800657e:	46d9      	mov	r9, fp
 8006580:	eb18 0308 	adds.w	r3, r8, r8
 8006584:	eb49 0409 	adc.w	r4, r9, r9
 8006588:	4698      	mov	r8, r3
 800658a:	46a1      	mov	r9, r4
 800658c:	eb18 080a 	adds.w	r8, r8, sl
 8006590:	eb49 090b 	adc.w	r9, r9, fp
 8006594:	f04f 0100 	mov.w	r1, #0
 8006598:	f04f 0200 	mov.w	r2, #0
 800659c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065a8:	4688      	mov	r8, r1
 80065aa:	4691      	mov	r9, r2
 80065ac:	eb1a 0508 	adds.w	r5, sl, r8
 80065b0:	eb4b 0609 	adc.w	r6, fp, r9
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	4619      	mov	r1, r3
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	f04f 0300 	mov.w	r3, #0
 80065c2:	f04f 0400 	mov.w	r4, #0
 80065c6:	0094      	lsls	r4, r2, #2
 80065c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065cc:	008b      	lsls	r3, r1, #2
 80065ce:	461a      	mov	r2, r3
 80065d0:	4623      	mov	r3, r4
 80065d2:	4628      	mov	r0, r5
 80065d4:	4631      	mov	r1, r6
 80065d6:	f7fa faa9 	bl	8000b2c <__aeabi_uldivmod>
 80065da:	4603      	mov	r3, r0
 80065dc:	460c      	mov	r4, r1
 80065de:	461a      	mov	r2, r3
 80065e0:	4bb8      	ldr	r3, [pc, #736]	; (80068c4 <UART_SetConfig+0x6f4>)
 80065e2:	fba3 2302 	umull	r2, r3, r3, r2
 80065e6:	095b      	lsrs	r3, r3, #5
 80065e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	469b      	mov	fp, r3
 80065f0:	f04f 0c00 	mov.w	ip, #0
 80065f4:	46d9      	mov	r9, fp
 80065f6:	46e2      	mov	sl, ip
 80065f8:	eb19 0309 	adds.w	r3, r9, r9
 80065fc:	eb4a 040a 	adc.w	r4, sl, sl
 8006600:	4699      	mov	r9, r3
 8006602:	46a2      	mov	sl, r4
 8006604:	eb19 090b 	adds.w	r9, r9, fp
 8006608:	eb4a 0a0c 	adc.w	sl, sl, ip
 800660c:	f04f 0100 	mov.w	r1, #0
 8006610:	f04f 0200 	mov.w	r2, #0
 8006614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800661c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006620:	4689      	mov	r9, r1
 8006622:	4692      	mov	sl, r2
 8006624:	eb1b 0509 	adds.w	r5, fp, r9
 8006628:	eb4c 060a 	adc.w	r6, ip, sl
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	4619      	mov	r1, r3
 8006632:	f04f 0200 	mov.w	r2, #0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	f04f 0400 	mov.w	r4, #0
 800663e:	0094      	lsls	r4, r2, #2
 8006640:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006644:	008b      	lsls	r3, r1, #2
 8006646:	461a      	mov	r2, r3
 8006648:	4623      	mov	r3, r4
 800664a:	4628      	mov	r0, r5
 800664c:	4631      	mov	r1, r6
 800664e:	f7fa fa6d 	bl	8000b2c <__aeabi_uldivmod>
 8006652:	4603      	mov	r3, r0
 8006654:	460c      	mov	r4, r1
 8006656:	461a      	mov	r2, r3
 8006658:	4b9a      	ldr	r3, [pc, #616]	; (80068c4 <UART_SetConfig+0x6f4>)
 800665a:	fba3 1302 	umull	r1, r3, r3, r2
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	2164      	movs	r1, #100	; 0x64
 8006662:	fb01 f303 	mul.w	r3, r1, r3
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	011b      	lsls	r3, r3, #4
 800666a:	3332      	adds	r3, #50	; 0x32
 800666c:	4a95      	ldr	r2, [pc, #596]	; (80068c4 <UART_SetConfig+0x6f4>)
 800666e:	fba2 2303 	umull	r2, r3, r2, r3
 8006672:	095b      	lsrs	r3, r3, #5
 8006674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006678:	4498      	add	r8, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	469b      	mov	fp, r3
 800667e:	f04f 0c00 	mov.w	ip, #0
 8006682:	46d9      	mov	r9, fp
 8006684:	46e2      	mov	sl, ip
 8006686:	eb19 0309 	adds.w	r3, r9, r9
 800668a:	eb4a 040a 	adc.w	r4, sl, sl
 800668e:	4699      	mov	r9, r3
 8006690:	46a2      	mov	sl, r4
 8006692:	eb19 090b 	adds.w	r9, r9, fp
 8006696:	eb4a 0a0c 	adc.w	sl, sl, ip
 800669a:	f04f 0100 	mov.w	r1, #0
 800669e:	f04f 0200 	mov.w	r2, #0
 80066a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066ae:	4689      	mov	r9, r1
 80066b0:	4692      	mov	sl, r2
 80066b2:	eb1b 0509 	adds.w	r5, fp, r9
 80066b6:	eb4c 060a 	adc.w	r6, ip, sl
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	4619      	mov	r1, r3
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	f04f 0400 	mov.w	r4, #0
 80066cc:	0094      	lsls	r4, r2, #2
 80066ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066d2:	008b      	lsls	r3, r1, #2
 80066d4:	461a      	mov	r2, r3
 80066d6:	4623      	mov	r3, r4
 80066d8:	4628      	mov	r0, r5
 80066da:	4631      	mov	r1, r6
 80066dc:	f7fa fa26 	bl	8000b2c <__aeabi_uldivmod>
 80066e0:	4603      	mov	r3, r0
 80066e2:	460c      	mov	r4, r1
 80066e4:	461a      	mov	r2, r3
 80066e6:	4b77      	ldr	r3, [pc, #476]	; (80068c4 <UART_SetConfig+0x6f4>)
 80066e8:	fba3 1302 	umull	r1, r3, r3, r2
 80066ec:	095b      	lsrs	r3, r3, #5
 80066ee:	2164      	movs	r1, #100	; 0x64
 80066f0:	fb01 f303 	mul.w	r3, r1, r3
 80066f4:	1ad3      	subs	r3, r2, r3
 80066f6:	011b      	lsls	r3, r3, #4
 80066f8:	3332      	adds	r3, #50	; 0x32
 80066fa:	4a72      	ldr	r2, [pc, #456]	; (80068c4 <UART_SetConfig+0x6f4>)
 80066fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	f003 020f 	and.w	r2, r3, #15
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4442      	add	r2, r8
 800670c:	609a      	str	r2, [r3, #8]
 800670e:	e0d0      	b.n	80068b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006710:	f7fe fe28 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 8006714:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006716:	68bb      	ldr	r3, [r7, #8]
 8006718:	469a      	mov	sl, r3
 800671a:	f04f 0b00 	mov.w	fp, #0
 800671e:	46d0      	mov	r8, sl
 8006720:	46d9      	mov	r9, fp
 8006722:	eb18 0308 	adds.w	r3, r8, r8
 8006726:	eb49 0409 	adc.w	r4, r9, r9
 800672a:	4698      	mov	r8, r3
 800672c:	46a1      	mov	r9, r4
 800672e:	eb18 080a 	adds.w	r8, r8, sl
 8006732:	eb49 090b 	adc.w	r9, r9, fp
 8006736:	f04f 0100 	mov.w	r1, #0
 800673a:	f04f 0200 	mov.w	r2, #0
 800673e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006742:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006746:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800674a:	4688      	mov	r8, r1
 800674c:	4691      	mov	r9, r2
 800674e:	eb1a 0508 	adds.w	r5, sl, r8
 8006752:	eb4b 0609 	adc.w	r6, fp, r9
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4619      	mov	r1, r3
 800675c:	f04f 0200 	mov.w	r2, #0
 8006760:	f04f 0300 	mov.w	r3, #0
 8006764:	f04f 0400 	mov.w	r4, #0
 8006768:	0094      	lsls	r4, r2, #2
 800676a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800676e:	008b      	lsls	r3, r1, #2
 8006770:	461a      	mov	r2, r3
 8006772:	4623      	mov	r3, r4
 8006774:	4628      	mov	r0, r5
 8006776:	4631      	mov	r1, r6
 8006778:	f7fa f9d8 	bl	8000b2c <__aeabi_uldivmod>
 800677c:	4603      	mov	r3, r0
 800677e:	460c      	mov	r4, r1
 8006780:	461a      	mov	r2, r3
 8006782:	4b50      	ldr	r3, [pc, #320]	; (80068c4 <UART_SetConfig+0x6f4>)
 8006784:	fba3 2302 	umull	r2, r3, r3, r2
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	469b      	mov	fp, r3
 8006792:	f04f 0c00 	mov.w	ip, #0
 8006796:	46d9      	mov	r9, fp
 8006798:	46e2      	mov	sl, ip
 800679a:	eb19 0309 	adds.w	r3, r9, r9
 800679e:	eb4a 040a 	adc.w	r4, sl, sl
 80067a2:	4699      	mov	r9, r3
 80067a4:	46a2      	mov	sl, r4
 80067a6:	eb19 090b 	adds.w	r9, r9, fp
 80067aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067ae:	f04f 0100 	mov.w	r1, #0
 80067b2:	f04f 0200 	mov.w	r2, #0
 80067b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067c2:	4689      	mov	r9, r1
 80067c4:	4692      	mov	sl, r2
 80067c6:	eb1b 0509 	adds.w	r5, fp, r9
 80067ca:	eb4c 060a 	adc.w	r6, ip, sl
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	4619      	mov	r1, r3
 80067d4:	f04f 0200 	mov.w	r2, #0
 80067d8:	f04f 0300 	mov.w	r3, #0
 80067dc:	f04f 0400 	mov.w	r4, #0
 80067e0:	0094      	lsls	r4, r2, #2
 80067e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067e6:	008b      	lsls	r3, r1, #2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4623      	mov	r3, r4
 80067ec:	4628      	mov	r0, r5
 80067ee:	4631      	mov	r1, r6
 80067f0:	f7fa f99c 	bl	8000b2c <__aeabi_uldivmod>
 80067f4:	4603      	mov	r3, r0
 80067f6:	460c      	mov	r4, r1
 80067f8:	461a      	mov	r2, r3
 80067fa:	4b32      	ldr	r3, [pc, #200]	; (80068c4 <UART_SetConfig+0x6f4>)
 80067fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006800:	095b      	lsrs	r3, r3, #5
 8006802:	2164      	movs	r1, #100	; 0x64
 8006804:	fb01 f303 	mul.w	r3, r1, r3
 8006808:	1ad3      	subs	r3, r2, r3
 800680a:	011b      	lsls	r3, r3, #4
 800680c:	3332      	adds	r3, #50	; 0x32
 800680e:	4a2d      	ldr	r2, [pc, #180]	; (80068c4 <UART_SetConfig+0x6f4>)
 8006810:	fba2 2303 	umull	r2, r3, r2, r3
 8006814:	095b      	lsrs	r3, r3, #5
 8006816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800681a:	4498      	add	r8, r3
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	469b      	mov	fp, r3
 8006820:	f04f 0c00 	mov.w	ip, #0
 8006824:	46d9      	mov	r9, fp
 8006826:	46e2      	mov	sl, ip
 8006828:	eb19 0309 	adds.w	r3, r9, r9
 800682c:	eb4a 040a 	adc.w	r4, sl, sl
 8006830:	4699      	mov	r9, r3
 8006832:	46a2      	mov	sl, r4
 8006834:	eb19 090b 	adds.w	r9, r9, fp
 8006838:	eb4a 0a0c 	adc.w	sl, sl, ip
 800683c:	f04f 0100 	mov.w	r1, #0
 8006840:	f04f 0200 	mov.w	r2, #0
 8006844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006848:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800684c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006850:	4689      	mov	r9, r1
 8006852:	4692      	mov	sl, r2
 8006854:	eb1b 0509 	adds.w	r5, fp, r9
 8006858:	eb4c 060a 	adc.w	r6, ip, sl
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	4619      	mov	r1, r3
 8006862:	f04f 0200 	mov.w	r2, #0
 8006866:	f04f 0300 	mov.w	r3, #0
 800686a:	f04f 0400 	mov.w	r4, #0
 800686e:	0094      	lsls	r4, r2, #2
 8006870:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006874:	008b      	lsls	r3, r1, #2
 8006876:	461a      	mov	r2, r3
 8006878:	4623      	mov	r3, r4
 800687a:	4628      	mov	r0, r5
 800687c:	4631      	mov	r1, r6
 800687e:	f7fa f955 	bl	8000b2c <__aeabi_uldivmod>
 8006882:	4603      	mov	r3, r0
 8006884:	460c      	mov	r4, r1
 8006886:	461a      	mov	r2, r3
 8006888:	4b0e      	ldr	r3, [pc, #56]	; (80068c4 <UART_SetConfig+0x6f4>)
 800688a:	fba3 1302 	umull	r1, r3, r3, r2
 800688e:	095b      	lsrs	r3, r3, #5
 8006890:	2164      	movs	r1, #100	; 0x64
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	1ad3      	subs	r3, r2, r3
 8006898:	011b      	lsls	r3, r3, #4
 800689a:	3332      	adds	r3, #50	; 0x32
 800689c:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <UART_SetConfig+0x6f4>)
 800689e:	fba2 2303 	umull	r2, r3, r2, r3
 80068a2:	095b      	lsrs	r3, r3, #5
 80068a4:	f003 020f 	and.w	r2, r3, #15
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4442      	add	r2, r8
 80068ae:	609a      	str	r2, [r3, #8]
}
 80068b0:	e7ff      	b.n	80068b2 <UART_SetConfig+0x6e2>
 80068b2:	bf00      	nop
 80068b4:	3714      	adds	r7, #20
 80068b6:	46bd      	mov	sp, r7
 80068b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068bc:	40011000 	.word	0x40011000
 80068c0:	40011400 	.word	0x40011400
 80068c4:	51eb851f 	.word	0x51eb851f

080068c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068c8:	b084      	sub	sp, #16
 80068ca:	b580      	push	{r7, lr}
 80068cc:	b084      	sub	sp, #16
 80068ce:	af00      	add	r7, sp, #0
 80068d0:	6078      	str	r0, [r7, #4]
 80068d2:	f107 001c 	add.w	r0, r7, #28
 80068d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d122      	bne.n	8006926 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f8:	687a      	ldr	r2, [r7, #4]
 80068fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690a:	2b01      	cmp	r3, #1
 800690c:	d105      	bne.n	800691a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fac6 	bl	8007eac <USB_CoreReset>
 8006920:	4603      	mov	r3, r0
 8006922:	73fb      	strb	r3, [r7, #15]
 8006924:	e01a      	b.n	800695c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	68db      	ldr	r3, [r3, #12]
 800692a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f001 faba 	bl	8007eac <USB_CoreReset>
 8006938:	4603      	mov	r3, r0
 800693a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800693c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006946:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	639a      	str	r2, [r3, #56]	; 0x38
 800694e:	e005      	b.n	800695c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	2b01      	cmp	r3, #1
 8006960:	d10b      	bne.n	800697a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f043 0206 	orr.w	r2, r3, #6
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f043 0220 	orr.w	r2, r3, #32
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006986:	b004      	add	sp, #16
 8006988:	4770      	bx	lr
	...

0800698c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800698c:	b480      	push	{r7}
 800698e:	b087      	sub	sp, #28
 8006990:	af00      	add	r7, sp, #0
 8006992:	60f8      	str	r0, [r7, #12]
 8006994:	60b9      	str	r1, [r7, #8]
 8006996:	4613      	mov	r3, r2
 8006998:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800699a:	79fb      	ldrb	r3, [r7, #7]
 800699c:	2b02      	cmp	r3, #2
 800699e:	d165      	bne.n	8006a6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a41      	ldr	r2, [pc, #260]	; (8006aa8 <USB_SetTurnaroundTime+0x11c>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d906      	bls.n	80069b6 <USB_SetTurnaroundTime+0x2a>
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	4a40      	ldr	r2, [pc, #256]	; (8006aac <USB_SetTurnaroundTime+0x120>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d802      	bhi.n	80069b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069b0:	230f      	movs	r3, #15
 80069b2:	617b      	str	r3, [r7, #20]
 80069b4:	e062      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a3c      	ldr	r2, [pc, #240]	; (8006aac <USB_SetTurnaroundTime+0x120>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d906      	bls.n	80069cc <USB_SetTurnaroundTime+0x40>
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	4a3b      	ldr	r2, [pc, #236]	; (8006ab0 <USB_SetTurnaroundTime+0x124>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d802      	bhi.n	80069cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069c6:	230e      	movs	r3, #14
 80069c8:	617b      	str	r3, [r7, #20]
 80069ca:	e057      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a38      	ldr	r2, [pc, #224]	; (8006ab0 <USB_SetTurnaroundTime+0x124>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d906      	bls.n	80069e2 <USB_SetTurnaroundTime+0x56>
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4a37      	ldr	r2, [pc, #220]	; (8006ab4 <USB_SetTurnaroundTime+0x128>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d802      	bhi.n	80069e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069dc:	230d      	movs	r3, #13
 80069de:	617b      	str	r3, [r7, #20]
 80069e0:	e04c      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4a33      	ldr	r2, [pc, #204]	; (8006ab4 <USB_SetTurnaroundTime+0x128>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d906      	bls.n	80069f8 <USB_SetTurnaroundTime+0x6c>
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	4a32      	ldr	r2, [pc, #200]	; (8006ab8 <USB_SetTurnaroundTime+0x12c>)
 80069ee:	4293      	cmp	r3, r2
 80069f0:	d802      	bhi.n	80069f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069f2:	230c      	movs	r3, #12
 80069f4:	617b      	str	r3, [r7, #20]
 80069f6:	e041      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4a2f      	ldr	r2, [pc, #188]	; (8006ab8 <USB_SetTurnaroundTime+0x12c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d906      	bls.n	8006a0e <USB_SetTurnaroundTime+0x82>
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	4a2e      	ldr	r2, [pc, #184]	; (8006abc <USB_SetTurnaroundTime+0x130>)
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d802      	bhi.n	8006a0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a08:	230b      	movs	r3, #11
 8006a0a:	617b      	str	r3, [r7, #20]
 8006a0c:	e036      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a2a      	ldr	r2, [pc, #168]	; (8006abc <USB_SetTurnaroundTime+0x130>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d906      	bls.n	8006a24 <USB_SetTurnaroundTime+0x98>
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	4a29      	ldr	r2, [pc, #164]	; (8006ac0 <USB_SetTurnaroundTime+0x134>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d802      	bhi.n	8006a24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a1e:	230a      	movs	r3, #10
 8006a20:	617b      	str	r3, [r7, #20]
 8006a22:	e02b      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a26      	ldr	r2, [pc, #152]	; (8006ac0 <USB_SetTurnaroundTime+0x134>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d906      	bls.n	8006a3a <USB_SetTurnaroundTime+0xae>
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	4a25      	ldr	r2, [pc, #148]	; (8006ac4 <USB_SetTurnaroundTime+0x138>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d802      	bhi.n	8006a3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a34:	2309      	movs	r3, #9
 8006a36:	617b      	str	r3, [r7, #20]
 8006a38:	e020      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4a21      	ldr	r2, [pc, #132]	; (8006ac4 <USB_SetTurnaroundTime+0x138>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d906      	bls.n	8006a50 <USB_SetTurnaroundTime+0xc4>
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	4a20      	ldr	r2, [pc, #128]	; (8006ac8 <USB_SetTurnaroundTime+0x13c>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d802      	bhi.n	8006a50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a4a:	2308      	movs	r3, #8
 8006a4c:	617b      	str	r3, [r7, #20]
 8006a4e:	e015      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a1d      	ldr	r2, [pc, #116]	; (8006ac8 <USB_SetTurnaroundTime+0x13c>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d906      	bls.n	8006a66 <USB_SetTurnaroundTime+0xda>
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4a1c      	ldr	r2, [pc, #112]	; (8006acc <USB_SetTurnaroundTime+0x140>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d802      	bhi.n	8006a66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a60:	2307      	movs	r3, #7
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	e00a      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a66:	2306      	movs	r3, #6
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	e007      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a6c:	79fb      	ldrb	r3, [r7, #7]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d102      	bne.n	8006a78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a72:	2309      	movs	r3, #9
 8006a74:	617b      	str	r3, [r7, #20]
 8006a76:	e001      	b.n	8006a7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a78:	2309      	movs	r3, #9
 8006a7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	68db      	ldr	r3, [r3, #12]
 8006a80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	697b      	ldr	r3, [r7, #20]
 8006a8e:	029b      	lsls	r3, r3, #10
 8006a90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a94:	431a      	orrs	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a9a:	2300      	movs	r3, #0
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	371c      	adds	r7, #28
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr
 8006aa8:	00d8acbf 	.word	0x00d8acbf
 8006aac:	00e4e1bf 	.word	0x00e4e1bf
 8006ab0:	00f423ff 	.word	0x00f423ff
 8006ab4:	0106737f 	.word	0x0106737f
 8006ab8:	011a499f 	.word	0x011a499f
 8006abc:	01312cff 	.word	0x01312cff
 8006ac0:	014ca43f 	.word	0x014ca43f
 8006ac4:	016e35ff 	.word	0x016e35ff
 8006ac8:	01a6ab1f 	.word	0x01a6ab1f
 8006acc:	01e847ff 	.word	0x01e847ff

08006ad0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f043 0201 	orr.w	r2, r3, #1
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f023 0201 	bic.w	r2, r3, #1
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr

08006b14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b2c:	78fb      	ldrb	r3, [r7, #3]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d106      	bne.n	8006b40 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	60da      	str	r2, [r3, #12]
 8006b3e:	e00b      	b.n	8006b58 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b40:	78fb      	ldrb	r3, [r7, #3]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d106      	bne.n	8006b54 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	60da      	str	r2, [r3, #12]
 8006b52:	e001      	b.n	8006b58 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e003      	b.n	8006b60 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006b58:	2032      	movs	r0, #50	; 0x32
 8006b5a:	f7fb f9ed 	bl	8001f38 <HAL_Delay>

  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b68:	b084      	sub	sp, #16
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b086      	sub	sp, #24
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b82:	2300      	movs	r3, #0
 8006b84:	613b      	str	r3, [r7, #16]
 8006b86:	e009      	b.n	8006b9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	3340      	adds	r3, #64	; 0x40
 8006b8e:	009b      	lsls	r3, r3, #2
 8006b90:	4413      	add	r3, r2
 8006b92:	2200      	movs	r2, #0
 8006b94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	2b0e      	cmp	r3, #14
 8006ba0:	d9f2      	bls.n	8006b88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ba2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d11c      	bne.n	8006be2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bb6:	f043 0302 	orr.w	r3, r3, #2
 8006bba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bcc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	639a      	str	r2, [r3, #56]	; 0x38
 8006be0:	e00b      	b.n	8006bfa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c00:	461a      	mov	r2, r3
 8006c02:	2300      	movs	r3, #0
 8006c04:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	4619      	mov	r1, r3
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c14:	461a      	mov	r2, r3
 8006c16:	680b      	ldr	r3, [r1, #0]
 8006c18:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10c      	bne.n	8006c3a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d104      	bne.n	8006c30 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c26:	2100      	movs	r1, #0
 8006c28:	6878      	ldr	r0, [r7, #4]
 8006c2a:	f000 f949 	bl	8006ec0 <USB_SetDevSpeed>
 8006c2e:	e008      	b.n	8006c42 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c30:	2101      	movs	r1, #1
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f944 	bl	8006ec0 <USB_SetDevSpeed>
 8006c38:	e003      	b.n	8006c42 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c3a:	2103      	movs	r1, #3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f93f 	bl	8006ec0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c42:	2110      	movs	r1, #16
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f8f3 	bl	8006e30 <USB_FlushTxFifo>
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d001      	beq.n	8006c54 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f911 	bl	8006e7c <USB_FlushRxFifo>
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d001      	beq.n	8006c64 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c76:	461a      	mov	r2, r3
 8006c78:	2300      	movs	r3, #0
 8006c7a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	461a      	mov	r2, r3
 8006c84:	2300      	movs	r3, #0
 8006c86:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c88:	2300      	movs	r3, #0
 8006c8a:	613b      	str	r3, [r7, #16]
 8006c8c:	e043      	b.n	8006d16 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	015a      	lsls	r2, r3, #5
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ca0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ca4:	d118      	bne.n	8006cd8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d10a      	bne.n	8006cc2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb8:	461a      	mov	r2, r3
 8006cba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cbe:	6013      	str	r3, [r2, #0]
 8006cc0:	e013      	b.n	8006cea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	015a      	lsls	r2, r3, #5
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006cd4:	6013      	str	r3, [r2, #0]
 8006cd6:	e008      	b.n	8006cea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ce4:	461a      	mov	r2, r3
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cf6:	461a      	mov	r2, r3
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	015a      	lsls	r2, r3, #5
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	4413      	add	r3, r2
 8006d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d08:	461a      	mov	r2, r3
 8006d0a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d0e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	3301      	adds	r3, #1
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d3b7      	bcc.n	8006c8e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d1e:	2300      	movs	r3, #0
 8006d20:	613b      	str	r3, [r7, #16]
 8006d22:	e043      	b.n	8006dac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	015a      	lsls	r2, r3, #5
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d3a:	d118      	bne.n	8006d6e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d4e:	461a      	mov	r2, r3
 8006d50:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d54:	6013      	str	r3, [r2, #0]
 8006d56:	e013      	b.n	8006d80 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	015a      	lsls	r2, r3, #5
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4413      	add	r3, r2
 8006d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d64:	461a      	mov	r2, r3
 8006d66:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d6a:	6013      	str	r3, [r2, #0]
 8006d6c:	e008      	b.n	8006d80 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	015a      	lsls	r2, r3, #5
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	4413      	add	r3, r2
 8006d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	015a      	lsls	r2, r3, #5
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4413      	add	r3, r2
 8006d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	015a      	lsls	r2, r3, #5
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	4413      	add	r3, r2
 8006d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9e:	461a      	mov	r2, r3
 8006da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006da4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	3301      	adds	r3, #1
 8006daa:	613b      	str	r3, [r7, #16]
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3b7      	bcc.n	8006d24 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dba:	691b      	ldr	r3, [r3, #16]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dc6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dd4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d105      	bne.n	8006de8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	699b      	ldr	r3, [r3, #24]
 8006de0:	f043 0210 	orr.w	r2, r3, #16
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	699a      	ldr	r2, [r3, #24]
 8006dec:	4b0f      	ldr	r3, [pc, #60]	; (8006e2c <USB_DevInit+0x2c4>)
 8006dee:	4313      	orrs	r3, r2
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006df4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	f043 0208 	orr.w	r2, r3, #8
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	d107      	bne.n	8006e1c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	699b      	ldr	r3, [r3, #24]
 8006e10:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e14:	f043 0304 	orr.w	r3, r3, #4
 8006e18:	687a      	ldr	r2, [r7, #4]
 8006e1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e28:	b004      	add	sp, #16
 8006e2a:	4770      	bx	lr
 8006e2c:	803c3800 	.word	0x803c3800

08006e30 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e30:	b480      	push	{r7}
 8006e32:	b085      	sub	sp, #20
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	019b      	lsls	r3, r3, #6
 8006e42:	f043 0220 	orr.w	r2, r3, #32
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	4a09      	ldr	r2, [pc, #36]	; (8006e78 <USB_FlushTxFifo+0x48>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d901      	bls.n	8006e5c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006e58:	2303      	movs	r3, #3
 8006e5a:	e006      	b.n	8006e6a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	691b      	ldr	r3, [r3, #16]
 8006e60:	f003 0320 	and.w	r3, r3, #32
 8006e64:	2b20      	cmp	r3, #32
 8006e66:	d0f0      	beq.n	8006e4a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006e68:	2300      	movs	r3, #0
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr
 8006e76:	bf00      	nop
 8006e78:	00030d40 	.word	0x00030d40

08006e7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b085      	sub	sp, #20
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006e84:	2300      	movs	r3, #0
 8006e86:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2210      	movs	r2, #16
 8006e8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4a09      	ldr	r2, [pc, #36]	; (8006ebc <USB_FlushRxFifo+0x40>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d901      	bls.n	8006ea0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006e9c:	2303      	movs	r3, #3
 8006e9e:	e006      	b.n	8006eae <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	f003 0310 	and.w	r3, r3, #16
 8006ea8:	2b10      	cmp	r3, #16
 8006eaa:	d0f0      	beq.n	8006e8e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	00030d40 	.word	0x00030d40

08006ec0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed6:	681a      	ldr	r2, [r3, #0]
 8006ed8:	78fb      	ldrb	r3, [r7, #3]
 8006eda:	68f9      	ldr	r1, [r7, #12]
 8006edc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ee0:	4313      	orrs	r3, r2
 8006ee2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0306 	and.w	r3, r3, #6
 8006f0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d102      	bne.n	8006f18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]
 8006f16:	e00a      	b.n	8006f2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d002      	beq.n	8006f24 <USB_GetDevSpeed+0x32>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b06      	cmp	r3, #6
 8006f22:	d102      	bne.n	8006f2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f24:	2302      	movs	r3, #2
 8006f26:	75fb      	strb	r3, [r7, #23]
 8006f28:	e001      	b.n	8006f2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f2a:	230f      	movs	r3, #15
 8006f2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	371c      	adds	r7, #28
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	785b      	ldrb	r3, [r3, #1]
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d13a      	bne.n	8006fce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f5e:	69da      	ldr	r2, [r3, #28]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	f003 030f 	and.w	r3, r3, #15
 8006f68:	2101      	movs	r1, #1
 8006f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8006f6e:	b29b      	uxth	r3, r3
 8006f70:	68f9      	ldr	r1, [r7, #12]
 8006f72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f76:	4313      	orrs	r3, r2
 8006f78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d155      	bne.n	800703c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	015a      	lsls	r2, r3, #5
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f9c:	681a      	ldr	r2, [r3, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	78db      	ldrb	r3, [r3, #3]
 8006faa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	059b      	lsls	r3, r3, #22
 8006fb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	0151      	lsls	r1, r2, #5
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	440a      	add	r2, r1
 8006fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	e036      	b.n	800703c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fd4:	69da      	ldr	r2, [r3, #28]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	781b      	ldrb	r3, [r3, #0]
 8006fda:	f003 030f 	and.w	r3, r3, #15
 8006fde:	2101      	movs	r1, #1
 8006fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8006fe4:	041b      	lsls	r3, r3, #16
 8006fe6:	68f9      	ldr	r1, [r7, #12]
 8006fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fec:	4313      	orrs	r3, r2
 8006fee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	015a      	lsls	r2, r3, #5
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d11a      	bne.n	800703c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	689b      	ldr	r3, [r3, #8]
 8007018:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	78db      	ldrb	r3, [r3, #3]
 8007020:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007022:	430b      	orrs	r3, r1
 8007024:	4313      	orrs	r3, r2
 8007026:	68ba      	ldr	r2, [r7, #8]
 8007028:	0151      	lsls	r1, r2, #5
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	440a      	add	r2, r1
 800702e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007032:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007036:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800703a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3714      	adds	r7, #20
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
	...

0800704c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800704c:	b480      	push	{r7}
 800704e:	b085      	sub	sp, #20
 8007050:	af00      	add	r7, sp, #0
 8007052:	6078      	str	r0, [r7, #4]
 8007054:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	785b      	ldrb	r3, [r3, #1]
 8007064:	2b01      	cmp	r3, #1
 8007066:	d161      	bne.n	800712c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800707a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800707e:	d11f      	bne.n	80070c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	015a      	lsls	r2, r3, #5
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	4413      	add	r3, r2
 8007088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	0151      	lsls	r1, r2, #5
 8007092:	68fa      	ldr	r2, [r7, #12]
 8007094:	440a      	add	r2, r1
 8007096:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800709a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800709e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	015a      	lsls	r2, r3, #5
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	f003 030f 	and.w	r3, r3, #15
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f303 	lsl.w	r3, r1, r3
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	43db      	mvns	r3, r3
 80070da:	68f9      	ldr	r1, [r7, #12]
 80070dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070e0:	4013      	ands	r3, r2
 80070e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	69da      	ldr	r2, [r3, #28]
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	f003 030f 	and.w	r3, r3, #15
 80070f4:	2101      	movs	r1, #1
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	43db      	mvns	r3, r3
 80070fe:	68f9      	ldr	r1, [r7, #12]
 8007100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007104:	4013      	ands	r3, r2
 8007106:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	015a      	lsls	r2, r3, #5
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	4413      	add	r3, r2
 8007110:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007114:	681a      	ldr	r2, [r3, #0]
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	0159      	lsls	r1, r3, #5
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	440b      	add	r3, r1
 800711e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007122:	4619      	mov	r1, r3
 8007124:	4b35      	ldr	r3, [pc, #212]	; (80071fc <USB_DeactivateEndpoint+0x1b0>)
 8007126:	4013      	ands	r3, r2
 8007128:	600b      	str	r3, [r1, #0]
 800712a:	e060      	b.n	80071ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800713e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007142:	d11f      	bne.n	8007184 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	015a      	lsls	r2, r3, #5
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68ba      	ldr	r2, [r7, #8]
 8007154:	0151      	lsls	r1, r2, #5
 8007156:	68fa      	ldr	r2, [r7, #12]
 8007158:	440a      	add	r2, r1
 800715a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800715e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007162:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	4413      	add	r3, r2
 800716c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68ba      	ldr	r2, [r7, #8]
 8007174:	0151      	lsls	r1, r2, #5
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	440a      	add	r2, r1
 800717a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800717e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007182:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	f003 030f 	and.w	r3, r3, #15
 8007194:	2101      	movs	r1, #1
 8007196:	fa01 f303 	lsl.w	r3, r1, r3
 800719a:	041b      	lsls	r3, r3, #16
 800719c:	43db      	mvns	r3, r3
 800719e:	68f9      	ldr	r1, [r7, #12]
 80071a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071a4:	4013      	ands	r3, r2
 80071a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ae:	69da      	ldr	r2, [r3, #28]
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f003 030f 	and.w	r3, r3, #15
 80071b8:	2101      	movs	r1, #1
 80071ba:	fa01 f303 	lsl.w	r3, r1, r3
 80071be:	041b      	lsls	r3, r3, #16
 80071c0:	43db      	mvns	r3, r3
 80071c2:	68f9      	ldr	r1, [r7, #12]
 80071c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c8:	4013      	ands	r3, r2
 80071ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	015a      	lsls	r2, r3, #5
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	4413      	add	r3, r2
 80071d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	0159      	lsls	r1, r3, #5
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	440b      	add	r3, r1
 80071e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e6:	4619      	mov	r1, r3
 80071e8:	4b05      	ldr	r3, [pc, #20]	; (8007200 <USB_DeactivateEndpoint+0x1b4>)
 80071ea:	4013      	ands	r3, r2
 80071ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071ee:	2300      	movs	r3, #0
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3714      	adds	r7, #20
 80071f4:	46bd      	mov	sp, r7
 80071f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fa:	4770      	bx	lr
 80071fc:	ec337800 	.word	0xec337800
 8007200:	eff37800 	.word	0xeff37800

08007204 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af02      	add	r7, sp, #8
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	4613      	mov	r3, r2
 8007210:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	785b      	ldrb	r3, [r3, #1]
 8007220:	2b01      	cmp	r3, #1
 8007222:	f040 815c 	bne.w	80074de <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	695b      	ldr	r3, [r3, #20]
 800722a:	2b00      	cmp	r3, #0
 800722c:	d132      	bne.n	8007294 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800722e:	69bb      	ldr	r3, [r7, #24]
 8007230:	015a      	lsls	r2, r3, #5
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	4413      	add	r3, r2
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	69ba      	ldr	r2, [r7, #24]
 800723e:	0151      	lsls	r1, r2, #5
 8007240:	69fa      	ldr	r2, [r7, #28]
 8007242:	440a      	add	r2, r1
 8007244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007248:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800724c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007250:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	69fb      	ldr	r3, [r7, #28]
 8007258:	4413      	add	r3, r2
 800725a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800725e:	691b      	ldr	r3, [r3, #16]
 8007260:	69ba      	ldr	r2, [r7, #24]
 8007262:	0151      	lsls	r1, r2, #5
 8007264:	69fa      	ldr	r2, [r7, #28]
 8007266:	440a      	add	r2, r1
 8007268:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800726c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007270:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007272:	69bb      	ldr	r3, [r7, #24]
 8007274:	015a      	lsls	r2, r3, #5
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	4413      	add	r3, r2
 800727a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800727e:	691b      	ldr	r3, [r3, #16]
 8007280:	69ba      	ldr	r2, [r7, #24]
 8007282:	0151      	lsls	r1, r2, #5
 8007284:	69fa      	ldr	r2, [r7, #28]
 8007286:	440a      	add	r2, r1
 8007288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800728c:	0cdb      	lsrs	r3, r3, #19
 800728e:	04db      	lsls	r3, r3, #19
 8007290:	6113      	str	r3, [r2, #16]
 8007292:	e074      	b.n	800737e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007294:	69bb      	ldr	r3, [r7, #24]
 8007296:	015a      	lsls	r2, r3, #5
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	4413      	add	r3, r2
 800729c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	0151      	lsls	r1, r2, #5
 80072a6:	69fa      	ldr	r2, [r7, #28]
 80072a8:	440a      	add	r2, r1
 80072aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ae:	0cdb      	lsrs	r3, r3, #19
 80072b0:	04db      	lsls	r3, r3, #19
 80072b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072b4:	69bb      	ldr	r3, [r7, #24]
 80072b6:	015a      	lsls	r2, r3, #5
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	4413      	add	r3, r2
 80072bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072c0:	691b      	ldr	r3, [r3, #16]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	0151      	lsls	r1, r2, #5
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	440a      	add	r2, r1
 80072ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e4:	691a      	ldr	r2, [r3, #16]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6959      	ldr	r1, [r3, #20]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	440b      	add	r3, r1
 80072f0:	1e59      	subs	r1, r3, #1
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80072fa:	04d9      	lsls	r1, r3, #19
 80072fc:	4b9d      	ldr	r3, [pc, #628]	; (8007574 <USB_EPStartXfer+0x370>)
 80072fe:	400b      	ands	r3, r1
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	0148      	lsls	r0, r1, #5
 8007304:	69f9      	ldr	r1, [r7, #28]
 8007306:	4401      	add	r1, r0
 8007308:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800730c:	4313      	orrs	r3, r2
 800730e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007310:	69bb      	ldr	r3, [r7, #24]
 8007312:	015a      	lsls	r2, r3, #5
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	4413      	add	r3, r2
 8007318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800731c:	691a      	ldr	r2, [r3, #16]
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007326:	69b9      	ldr	r1, [r7, #24]
 8007328:	0148      	lsls	r0, r1, #5
 800732a:	69f9      	ldr	r1, [r7, #28]
 800732c:	4401      	add	r1, r0
 800732e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007332:	4313      	orrs	r3, r2
 8007334:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	78db      	ldrb	r3, [r3, #3]
 800733a:	2b01      	cmp	r3, #1
 800733c:	d11f      	bne.n	800737e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800733e:	69bb      	ldr	r3, [r7, #24]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	69fb      	ldr	r3, [r7, #28]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	0151      	lsls	r1, r2, #5
 8007350:	69fa      	ldr	r2, [r7, #28]
 8007352:	440a      	add	r2, r1
 8007354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007358:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800735c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800735e:	69bb      	ldr	r3, [r7, #24]
 8007360:	015a      	lsls	r2, r3, #5
 8007362:	69fb      	ldr	r3, [r7, #28]
 8007364:	4413      	add	r3, r2
 8007366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	69ba      	ldr	r2, [r7, #24]
 800736e:	0151      	lsls	r1, r2, #5
 8007370:	69fa      	ldr	r2, [r7, #28]
 8007372:	440a      	add	r2, r1
 8007374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007378:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800737c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800737e:	79fb      	ldrb	r3, [r7, #7]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d14b      	bne.n	800741c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d009      	beq.n	80073a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007398:	461a      	mov	r2, r3
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	691b      	ldr	r3, [r3, #16]
 800739e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	78db      	ldrb	r3, [r3, #3]
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d128      	bne.n	80073fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073ae:	689b      	ldr	r3, [r3, #8]
 80073b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d110      	bne.n	80073da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	69ba      	ldr	r2, [r7, #24]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	69fa      	ldr	r2, [r7, #28]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	e00f      	b.n	80073fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073da:	69bb      	ldr	r3, [r7, #24]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	69ba      	ldr	r2, [r7, #24]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	69fa      	ldr	r2, [r7, #28]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	015a      	lsls	r2, r3, #5
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	4413      	add	r3, r2
 8007402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	0151      	lsls	r1, r2, #5
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	440a      	add	r2, r1
 8007410:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007414:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	e12f      	b.n	800767c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800741c:	69bb      	ldr	r3, [r7, #24]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	69fb      	ldr	r3, [r7, #28]
 8007422:	4413      	add	r3, r2
 8007424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	69ba      	ldr	r2, [r7, #24]
 800742c:	0151      	lsls	r1, r2, #5
 800742e:	69fa      	ldr	r2, [r7, #28]
 8007430:	440a      	add	r2, r1
 8007432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007436:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800743a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	78db      	ldrb	r3, [r3, #3]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d015      	beq.n	8007470 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	2b00      	cmp	r3, #0
 800744a:	f000 8117 	beq.w	800767c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007454:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	f003 030f 	and.w	r3, r3, #15
 800745e:	2101      	movs	r1, #1
 8007460:	fa01 f303 	lsl.w	r3, r1, r3
 8007464:	69f9      	ldr	r1, [r7, #28]
 8007466:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800746a:	4313      	orrs	r3, r2
 800746c:	634b      	str	r3, [r1, #52]	; 0x34
 800746e:	e105      	b.n	800767c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007470:	69fb      	ldr	r3, [r7, #28]
 8007472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800747c:	2b00      	cmp	r3, #0
 800747e:	d110      	bne.n	80074a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007480:	69bb      	ldr	r3, [r7, #24]
 8007482:	015a      	lsls	r2, r3, #5
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	4413      	add	r3, r2
 8007488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	0151      	lsls	r1, r2, #5
 8007492:	69fa      	ldr	r2, [r7, #28]
 8007494:	440a      	add	r2, r1
 8007496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800749a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	e00f      	b.n	80074c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	015a      	lsls	r2, r3, #5
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	4413      	add	r3, r2
 80074aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	0151      	lsls	r1, r2, #5
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	440a      	add	r2, r1
 80074b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	68d9      	ldr	r1, [r3, #12]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	781a      	ldrb	r2, [r3, #0]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	695b      	ldr	r3, [r3, #20]
 80074ce:	b298      	uxth	r0, r3
 80074d0:	79fb      	ldrb	r3, [r7, #7]
 80074d2:	9300      	str	r3, [sp, #0]
 80074d4:	4603      	mov	r3, r0
 80074d6:	68f8      	ldr	r0, [r7, #12]
 80074d8:	f000 fa2b 	bl	8007932 <USB_WritePacket>
 80074dc:	e0ce      	b.n	800767c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074de:	69bb      	ldr	r3, [r7, #24]
 80074e0:	015a      	lsls	r2, r3, #5
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	4413      	add	r3, r2
 80074e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	0151      	lsls	r1, r2, #5
 80074f0:	69fa      	ldr	r2, [r7, #28]
 80074f2:	440a      	add	r2, r1
 80074f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f8:	0cdb      	lsrs	r3, r3, #19
 80074fa:	04db      	lsls	r3, r3, #19
 80074fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	4413      	add	r3, r2
 8007506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	69ba      	ldr	r2, [r7, #24]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	69fa      	ldr	r2, [r7, #28]
 8007512:	440a      	add	r2, r1
 8007514:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007518:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800751c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007520:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	695b      	ldr	r3, [r3, #20]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d126      	bne.n	8007578 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	015a      	lsls	r2, r3, #5
 800752e:	69fb      	ldr	r3, [r7, #28]
 8007530:	4413      	add	r3, r2
 8007532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007536:	691a      	ldr	r2, [r3, #16]
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007540:	69b9      	ldr	r1, [r7, #24]
 8007542:	0148      	lsls	r0, r1, #5
 8007544:	69f9      	ldr	r1, [r7, #28]
 8007546:	4401      	add	r1, r0
 8007548:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800754c:	4313      	orrs	r3, r2
 800754e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	015a      	lsls	r2, r3, #5
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	4413      	add	r3, r2
 8007558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	69ba      	ldr	r2, [r7, #24]
 8007560:	0151      	lsls	r1, r2, #5
 8007562:	69fa      	ldr	r2, [r7, #28]
 8007564:	440a      	add	r2, r1
 8007566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800756a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800756e:	6113      	str	r3, [r2, #16]
 8007570:	e036      	b.n	80075e0 <USB_EPStartXfer+0x3dc>
 8007572:	bf00      	nop
 8007574:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	695a      	ldr	r2, [r3, #20]
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	4413      	add	r3, r2
 8007582:	1e5a      	subs	r2, r3, #1
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	fbb2 f3f3 	udiv	r3, r2, r3
 800758c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	69fb      	ldr	r3, [r7, #28]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	8afb      	ldrh	r3, [r7, #22]
 800759e:	04d9      	lsls	r1, r3, #19
 80075a0:	4b39      	ldr	r3, [pc, #228]	; (8007688 <USB_EPStartXfer+0x484>)
 80075a2:	400b      	ands	r3, r1
 80075a4:	69b9      	ldr	r1, [r7, #24]
 80075a6:	0148      	lsls	r0, r1, #5
 80075a8:	69f9      	ldr	r1, [r7, #28]
 80075aa:	4401      	add	r1, r0
 80075ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075b0:	4313      	orrs	r3, r2
 80075b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80075b4:	69bb      	ldr	r3, [r7, #24]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	69fb      	ldr	r3, [r7, #28]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	689b      	ldr	r3, [r3, #8]
 80075c6:	8af9      	ldrh	r1, [r7, #22]
 80075c8:	fb01 f303 	mul.w	r3, r1, r3
 80075cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075d0:	69b9      	ldr	r1, [r7, #24]
 80075d2:	0148      	lsls	r0, r1, #5
 80075d4:	69f9      	ldr	r1, [r7, #28]
 80075d6:	4401      	add	r1, r0
 80075d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075dc:	4313      	orrs	r3, r2
 80075de:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075e0:	79fb      	ldrb	r3, [r7, #7]
 80075e2:	2b01      	cmp	r3, #1
 80075e4:	d10d      	bne.n	8007602 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d009      	beq.n	8007602 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	68d9      	ldr	r1, [r3, #12]
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	015a      	lsls	r2, r3, #5
 80075f6:	69fb      	ldr	r3, [r7, #28]
 80075f8:	4413      	add	r3, r2
 80075fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075fe:	460a      	mov	r2, r1
 8007600:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	78db      	ldrb	r3, [r3, #3]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d128      	bne.n	800765c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007616:	2b00      	cmp	r3, #0
 8007618:	d110      	bne.n	800763c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800761a:	69bb      	ldr	r3, [r7, #24]
 800761c:	015a      	lsls	r2, r3, #5
 800761e:	69fb      	ldr	r3, [r7, #28]
 8007620:	4413      	add	r3, r2
 8007622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	0151      	lsls	r1, r2, #5
 800762c:	69fa      	ldr	r2, [r7, #28]
 800762e:	440a      	add	r2, r1
 8007630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007634:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007638:	6013      	str	r3, [r2, #0]
 800763a:	e00f      	b.n	800765c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800763c:	69bb      	ldr	r3, [r7, #24]
 800763e:	015a      	lsls	r2, r3, #5
 8007640:	69fb      	ldr	r3, [r7, #28]
 8007642:	4413      	add	r3, r2
 8007644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	69ba      	ldr	r2, [r7, #24]
 800764c:	0151      	lsls	r1, r2, #5
 800764e:	69fa      	ldr	r2, [r7, #28]
 8007650:	440a      	add	r2, r1
 8007652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800765c:	69bb      	ldr	r3, [r7, #24]
 800765e:	015a      	lsls	r2, r3, #5
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	4413      	add	r3, r2
 8007664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	69ba      	ldr	r2, [r7, #24]
 800766c:	0151      	lsls	r1, r2, #5
 800766e:	69fa      	ldr	r2, [r7, #28]
 8007670:	440a      	add	r2, r1
 8007672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007676:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800767a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800767c:	2300      	movs	r3, #0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3720      	adds	r7, #32
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	1ff80000 	.word	0x1ff80000

0800768c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	4613      	mov	r3, r2
 8007698:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b01      	cmp	r3, #1
 80076aa:	f040 80cd 	bne.w	8007848 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d132      	bne.n	800771c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	015a      	lsls	r2, r3, #5
 80076ba:	697b      	ldr	r3, [r7, #20]
 80076bc:	4413      	add	r3, r2
 80076be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076c2:	691b      	ldr	r3, [r3, #16]
 80076c4:	693a      	ldr	r2, [r7, #16]
 80076c6:	0151      	lsls	r1, r2, #5
 80076c8:	697a      	ldr	r2, [r7, #20]
 80076ca:	440a      	add	r2, r1
 80076cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076d0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076d4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	015a      	lsls	r2, r3, #5
 80076de:	697b      	ldr	r3, [r7, #20]
 80076e0:	4413      	add	r3, r2
 80076e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	693a      	ldr	r2, [r7, #16]
 80076ea:	0151      	lsls	r1, r2, #5
 80076ec:	697a      	ldr	r2, [r7, #20]
 80076ee:	440a      	add	r2, r1
 80076f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	015a      	lsls	r2, r3, #5
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	4413      	add	r3, r2
 8007702:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007706:	691b      	ldr	r3, [r3, #16]
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	0151      	lsls	r1, r2, #5
 800770c:	697a      	ldr	r2, [r7, #20]
 800770e:	440a      	add	r2, r1
 8007710:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007714:	0cdb      	lsrs	r3, r3, #19
 8007716:	04db      	lsls	r3, r3, #19
 8007718:	6113      	str	r3, [r2, #16]
 800771a:	e04e      	b.n	80077ba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	693a      	ldr	r2, [r7, #16]
 800772c:	0151      	lsls	r1, r2, #5
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	440a      	add	r2, r1
 8007732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007736:	0cdb      	lsrs	r3, r3, #19
 8007738:	04db      	lsls	r3, r3, #19
 800773a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800773c:	693b      	ldr	r3, [r7, #16]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	697b      	ldr	r3, [r7, #20]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	0151      	lsls	r1, r2, #5
 800774e:	697a      	ldr	r2, [r7, #20]
 8007750:	440a      	add	r2, r1
 8007752:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007756:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800775a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800775e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	695a      	ldr	r2, [r3, #20]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	689b      	ldr	r3, [r3, #8]
 8007768:	429a      	cmp	r2, r3
 800776a:	d903      	bls.n	8007774 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	689a      	ldr	r2, [r3, #8]
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	697b      	ldr	r3, [r7, #20]
 800777a:	4413      	add	r3, r2
 800777c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	693a      	ldr	r2, [r7, #16]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	697a      	ldr	r2, [r7, #20]
 8007788:	440a      	add	r2, r1
 800778a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800778e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007792:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	015a      	lsls	r2, r3, #5
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	4413      	add	r3, r2
 800779c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a0:	691a      	ldr	r2, [r3, #16]
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	695b      	ldr	r3, [r3, #20]
 80077a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077aa:	6939      	ldr	r1, [r7, #16]
 80077ac:	0148      	lsls	r0, r1, #5
 80077ae:	6979      	ldr	r1, [r7, #20]
 80077b0:	4401      	add	r1, r0
 80077b2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077b6:	4313      	orrs	r3, r2
 80077b8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077ba:	79fb      	ldrb	r3, [r7, #7]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d11e      	bne.n	80077fe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	691b      	ldr	r3, [r3, #16]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077c8:	693b      	ldr	r3, [r7, #16]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077d4:	461a      	mov	r2, r3
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	693a      	ldr	r2, [r7, #16]
 80077ec:	0151      	lsls	r1, r2, #5
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	440a      	add	r2, r1
 80077f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077fa:	6013      	str	r3, [r2, #0]
 80077fc:	e092      	b.n	8007924 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	4413      	add	r3, r2
 8007806:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	693a      	ldr	r2, [r7, #16]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	697a      	ldr	r2, [r7, #20]
 8007812:	440a      	add	r2, r1
 8007814:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007818:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800781c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	695b      	ldr	r3, [r3, #20]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d07e      	beq.n	8007924 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007826:	697b      	ldr	r3, [r7, #20]
 8007828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800782c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800782e:	68bb      	ldr	r3, [r7, #8]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	f003 030f 	and.w	r3, r3, #15
 8007836:	2101      	movs	r1, #1
 8007838:	fa01 f303 	lsl.w	r3, r1, r3
 800783c:	6979      	ldr	r1, [r7, #20]
 800783e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007842:	4313      	orrs	r3, r2
 8007844:	634b      	str	r3, [r1, #52]	; 0x34
 8007846:	e06d      	b.n	8007924 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	015a      	lsls	r2, r3, #5
 800784c:	697b      	ldr	r3, [r7, #20]
 800784e:	4413      	add	r3, r2
 8007850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007854:	691b      	ldr	r3, [r3, #16]
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	0151      	lsls	r1, r2, #5
 800785a:	697a      	ldr	r2, [r7, #20]
 800785c:	440a      	add	r2, r1
 800785e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007862:	0cdb      	lsrs	r3, r3, #19
 8007864:	04db      	lsls	r3, r3, #19
 8007866:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	015a      	lsls	r2, r3, #5
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	4413      	add	r3, r2
 8007870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007874:	691b      	ldr	r3, [r3, #16]
 8007876:	693a      	ldr	r2, [r7, #16]
 8007878:	0151      	lsls	r1, r2, #5
 800787a:	697a      	ldr	r2, [r7, #20]
 800787c:	440a      	add	r2, r1
 800787e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007882:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007886:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800788a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	695b      	ldr	r3, [r3, #20]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d003      	beq.n	800789c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	689a      	ldr	r2, [r3, #8]
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800789c:	693b      	ldr	r3, [r7, #16]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a8:	691b      	ldr	r3, [r3, #16]
 80078aa:	693a      	ldr	r2, [r7, #16]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	697a      	ldr	r2, [r7, #20]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d2:	6939      	ldr	r1, [r7, #16]
 80078d4:	0148      	lsls	r0, r1, #5
 80078d6:	6979      	ldr	r1, [r7, #20]
 80078d8:	4401      	add	r1, r0
 80078da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078de:	4313      	orrs	r3, r2
 80078e0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	2b01      	cmp	r3, #1
 80078e6:	d10d      	bne.n	8007904 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	68db      	ldr	r3, [r3, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	68d9      	ldr	r1, [r3, #12]
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	015a      	lsls	r2, r3, #5
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	4413      	add	r3, r2
 80078fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007900:	460a      	mov	r2, r1
 8007902:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	0151      	lsls	r1, r2, #5
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	440a      	add	r2, r1
 800791a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800791e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007922:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007924:	2300      	movs	r3, #0
}
 8007926:	4618      	mov	r0, r3
 8007928:	371c      	adds	r7, #28
 800792a:	46bd      	mov	sp, r7
 800792c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007930:	4770      	bx	lr

08007932 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007932:	b480      	push	{r7}
 8007934:	b089      	sub	sp, #36	; 0x24
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	4611      	mov	r1, r2
 800793e:	461a      	mov	r2, r3
 8007940:	460b      	mov	r3, r1
 8007942:	71fb      	strb	r3, [r7, #7]
 8007944:	4613      	mov	r3, r2
 8007946:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007950:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007954:	2b00      	cmp	r3, #0
 8007956:	d11a      	bne.n	800798e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007958:	88bb      	ldrh	r3, [r7, #4]
 800795a:	3303      	adds	r3, #3
 800795c:	089b      	lsrs	r3, r3, #2
 800795e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007960:	2300      	movs	r3, #0
 8007962:	61bb      	str	r3, [r7, #24]
 8007964:	e00f      	b.n	8007986 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007966:	79fb      	ldrb	r3, [r7, #7]
 8007968:	031a      	lsls	r2, r3, #12
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	4413      	add	r3, r2
 800796e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007972:	461a      	mov	r2, r3
 8007974:	69fb      	ldr	r3, [r7, #28]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	6013      	str	r3, [r2, #0]
      pSrc++;
 800797a:	69fb      	ldr	r3, [r7, #28]
 800797c:	3304      	adds	r3, #4
 800797e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007980:	69bb      	ldr	r3, [r7, #24]
 8007982:	3301      	adds	r3, #1
 8007984:	61bb      	str	r3, [r7, #24]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	429a      	cmp	r2, r3
 800798c:	d3eb      	bcc.n	8007966 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3724      	adds	r7, #36	; 0x24
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800799c:	b480      	push	{r7}
 800799e:	b089      	sub	sp, #36	; 0x24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80079b2:	88fb      	ldrh	r3, [r7, #6]
 80079b4:	3303      	adds	r3, #3
 80079b6:	089b      	lsrs	r3, r3, #2
 80079b8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80079ba:	2300      	movs	r3, #0
 80079bc:	61bb      	str	r3, [r7, #24]
 80079be:	e00b      	b.n	80079d8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079c6:	681a      	ldr	r2, [r3, #0]
 80079c8:	69fb      	ldr	r3, [r7, #28]
 80079ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	3304      	adds	r3, #4
 80079d0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	3301      	adds	r3, #1
 80079d6:	61bb      	str	r3, [r7, #24]
 80079d8:	69ba      	ldr	r2, [r7, #24]
 80079da:	693b      	ldr	r3, [r7, #16]
 80079dc:	429a      	cmp	r2, r3
 80079de:	d3ef      	bcc.n	80079c0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80079e0:	69fb      	ldr	r3, [r7, #28]
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3724      	adds	r7, #36	; 0x24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ec:	4770      	bx	lr

080079ee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079ee:	b480      	push	{r7}
 80079f0:	b085      	sub	sp, #20
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
 80079f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	781b      	ldrb	r3, [r3, #0]
 8007a00:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	785b      	ldrb	r3, [r3, #1]
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d12c      	bne.n	8007a64 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	015a      	lsls	r2, r3, #5
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	4413      	add	r3, r2
 8007a12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	db12      	blt.n	8007a42 <USB_EPSetStall+0x54>
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00f      	beq.n	8007a42 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	015a      	lsls	r2, r3, #5
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	4413      	add	r3, r2
 8007a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	68ba      	ldr	r2, [r7, #8]
 8007a32:	0151      	lsls	r1, r2, #5
 8007a34:	68fa      	ldr	r2, [r7, #12]
 8007a36:	440a      	add	r2, r1
 8007a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a3c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a40:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	015a      	lsls	r2, r3, #5
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	4413      	add	r3, r2
 8007a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	68ba      	ldr	r2, [r7, #8]
 8007a52:	0151      	lsls	r1, r2, #5
 8007a54:	68fa      	ldr	r2, [r7, #12]
 8007a56:	440a      	add	r2, r1
 8007a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	e02b      	b.n	8007abc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	015a      	lsls	r2, r3, #5
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4413      	add	r3, r2
 8007a6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	db12      	blt.n	8007a9c <USB_EPSetStall+0xae>
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00f      	beq.n	8007a9c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	0151      	lsls	r1, r2, #5
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	440a      	add	r2, r1
 8007a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a96:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a9a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	015a      	lsls	r2, r3, #5
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4413      	add	r3, r2
 8007aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	68ba      	ldr	r2, [r7, #8]
 8007aac:	0151      	lsls	r1, r2, #5
 8007aae:	68fa      	ldr	r2, [r7, #12]
 8007ab0:	440a      	add	r2, r1
 8007ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007aba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3714      	adds	r7, #20
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac8:	4770      	bx	lr

08007aca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007aca:	b480      	push	{r7}
 8007acc:	b085      	sub	sp, #20
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	785b      	ldrb	r3, [r3, #1]
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d128      	bne.n	8007b38 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	68fa      	ldr	r2, [r7, #12]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	78db      	ldrb	r3, [r3, #3]
 8007b0a:	2b03      	cmp	r3, #3
 8007b0c:	d003      	beq.n	8007b16 <USB_EPClearStall+0x4c>
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	78db      	ldrb	r3, [r3, #3]
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d138      	bne.n	8007b88 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68ba      	ldr	r2, [r7, #8]
 8007b26:	0151      	lsls	r1, r2, #5
 8007b28:	68fa      	ldr	r2, [r7, #12]
 8007b2a:	440a      	add	r2, r1
 8007b2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b34:	6013      	str	r3, [r2, #0]
 8007b36:	e027      	b.n	8007b88 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	015a      	lsls	r2, r3, #5
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	4413      	add	r3, r2
 8007b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	68ba      	ldr	r2, [r7, #8]
 8007b48:	0151      	lsls	r1, r2, #5
 8007b4a:	68fa      	ldr	r2, [r7, #12]
 8007b4c:	440a      	add	r2, r1
 8007b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	2b03      	cmp	r3, #3
 8007b5e:	d003      	beq.n	8007b68 <USB_EPClearStall+0x9e>
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	78db      	ldrb	r3, [r3, #3]
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d10f      	bne.n	8007b88 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	015a      	lsls	r2, r3, #5
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	4413      	add	r3, r2
 8007b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68ba      	ldr	r2, [r7, #8]
 8007b78:	0151      	lsls	r1, r2, #5
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	440a      	add	r2, r1
 8007b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b86:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b88:	2300      	movs	r3, #0
}
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	3714      	adds	r7, #20
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b94:	4770      	bx	lr

08007b96 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b96:	b480      	push	{r7}
 8007b98:	b085      	sub	sp, #20
 8007b9a:	af00      	add	r7, sp, #0
 8007b9c:	6078      	str	r0, [r7, #4]
 8007b9e:	460b      	mov	r3, r1
 8007ba0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bb4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bb8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	011b      	lsls	r3, r3, #4
 8007bc6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007bca:	68f9      	ldr	r1, [r7, #12]
 8007bcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bd0:	4313      	orrs	r3, r2
 8007bd2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007be2:	b480      	push	{r7}
 8007be4:	b085      	sub	sp, #20
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bfc:	f023 0303 	bic.w	r3, r3, #3
 8007c00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c10:	f023 0302 	bic.w	r3, r3, #2
 8007c14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c16:	2300      	movs	r3, #0
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	3714      	adds	r7, #20
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c22:	4770      	bx	lr

08007c24 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c24:	b480      	push	{r7}
 8007c26:	b085      	sub	sp, #20
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c3e:	f023 0303 	bic.w	r3, r3, #3
 8007c42:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c4a:	685b      	ldr	r3, [r3, #4]
 8007c4c:	68fa      	ldr	r2, [r7, #12]
 8007c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c52:	f043 0302 	orr.w	r3, r3, #2
 8007c56:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3714      	adds	r7, #20
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c64:	4770      	bx	lr

08007c66 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c66:	b480      	push	{r7}
 8007c68:	b085      	sub	sp, #20
 8007c6a:	af00      	add	r7, sp, #0
 8007c6c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	695b      	ldr	r3, [r3, #20]
 8007c72:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	68fa      	ldr	r2, [r7, #12]
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca8:	69db      	ldr	r3, [r3, #28]
 8007caa:	68ba      	ldr	r2, [r7, #8]
 8007cac:	4013      	ands	r3, r2
 8007cae:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	0c1b      	lsrs	r3, r3, #16
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b085      	sub	sp, #20
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cdc:	69db      	ldr	r3, [r3, #28]
 8007cde:	68ba      	ldr	r2, [r7, #8]
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	b29b      	uxth	r3, r3
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3714      	adds	r7, #20
 8007cec:	46bd      	mov	sp, r7
 8007cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf2:	4770      	bx	lr

08007cf4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cf4:	b480      	push	{r7}
 8007cf6:	b085      	sub	sp, #20
 8007cf8:	af00      	add	r7, sp, #0
 8007cfa:	6078      	str	r0, [r7, #4]
 8007cfc:	460b      	mov	r3, r1
 8007cfe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007d04:	78fb      	ldrb	r3, [r7, #3]
 8007d06:	015a      	lsls	r2, r3, #5
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4413      	add	r3, r2
 8007d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d1a:	695b      	ldr	r3, [r3, #20]
 8007d1c:	68ba      	ldr	r2, [r7, #8]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d22:	68bb      	ldr	r3, [r7, #8]
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3714      	adds	r7, #20
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2e:	4770      	bx	lr

08007d30 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d30:	b480      	push	{r7}
 8007d32:	b087      	sub	sp, #28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	460b      	mov	r3, r1
 8007d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d52:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d54:	78fb      	ldrb	r3, [r7, #3]
 8007d56:	f003 030f 	and.w	r3, r3, #15
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8007d60:	01db      	lsls	r3, r3, #7
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	693a      	ldr	r2, [r7, #16]
 8007d66:	4313      	orrs	r3, r2
 8007d68:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	015a      	lsls	r2, r3, #5
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	4413      	add	r3, r2
 8007d72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	4013      	ands	r3, r2
 8007d7c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	371c      	adds	r7, #28
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	695b      	ldr	r3, [r3, #20]
 8007d98:	f003 0301 	and.w	r3, r3, #1
}
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b085      	sub	sp, #20
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dc2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007dc6:	f023 0307 	bic.w	r3, r3, #7
 8007dca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	68fa      	ldr	r2, [r7, #12]
 8007dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dde:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007de0:	2300      	movs	r3, #0
}
 8007de2:	4618      	mov	r0, r3
 8007de4:	3714      	adds	r7, #20
 8007de6:	46bd      	mov	sp, r7
 8007de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dec:	4770      	bx	lr
	...

08007df0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b087      	sub	sp, #28
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	60f8      	str	r0, [r7, #12]
 8007df8:	460b      	mov	r3, r1
 8007dfa:	607a      	str	r2, [r7, #4]
 8007dfc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	333c      	adds	r3, #60	; 0x3c
 8007e06:	3304      	adds	r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	4a26      	ldr	r2, [pc, #152]	; (8007ea8 <USB_EP0_OutStart+0xb8>)
 8007e10:	4293      	cmp	r3, r2
 8007e12:	d90a      	bls.n	8007e2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e24:	d101      	bne.n	8007e2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e037      	b.n	8007e9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e30:	461a      	mov	r2, r3
 8007e32:	2300      	movs	r3, #0
 8007e34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e4a:	697b      	ldr	r3, [r7, #20]
 8007e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e50:	691b      	ldr	r3, [r3, #16]
 8007e52:	697a      	ldr	r2, [r7, #20]
 8007e54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e58:	f043 0318 	orr.w	r3, r3, #24
 8007e5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e64:	691b      	ldr	r3, [r3, #16]
 8007e66:	697a      	ldr	r2, [r7, #20]
 8007e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e72:	7afb      	ldrb	r3, [r7, #11]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	d10f      	bne.n	8007e98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7e:	461a      	mov	r2, r3
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	4f54300a 	.word	0x4f54300a

08007eac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b085      	sub	sp, #20
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	3301      	adds	r3, #1
 8007ebc:	60fb      	str	r3, [r7, #12]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	4a13      	ldr	r2, [pc, #76]	; (8007f10 <USB_CoreReset+0x64>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d901      	bls.n	8007eca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ec6:	2303      	movs	r3, #3
 8007ec8:	e01b      	b.n	8007f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	daf2      	bge.n	8007eb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	f043 0201 	orr.w	r2, r3, #1
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	60fb      	str	r3, [r7, #12]
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	4a09      	ldr	r2, [pc, #36]	; (8007f10 <USB_CoreReset+0x64>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d901      	bls.n	8007ef4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ef0:	2303      	movs	r3, #3
 8007ef2:	e006      	b.n	8007f02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	691b      	ldr	r3, [r3, #16]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d0f0      	beq.n	8007ee2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3714      	adds	r7, #20
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	00030d40 	.word	0x00030d40

08007f14 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b084      	sub	sp, #16
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	460b      	mov	r3, r1
 8007f1e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f20:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f24:	f002 f8d6 	bl	800a0d4 <malloc>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d105      	bne.n	8007f3e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2200      	movs	r2, #0
 8007f36:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e066      	b.n	800800c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68fa      	ldr	r2, [r7, #12]
 8007f42:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	7c1b      	ldrb	r3, [r3, #16]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d119      	bne.n	8007f82 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f52:	2202      	movs	r2, #2
 8007f54:	2181      	movs	r1, #129	; 0x81
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f001 ff43 	bl	8009de2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f62:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f66:	2202      	movs	r2, #2
 8007f68:	2101      	movs	r1, #1
 8007f6a:	6878      	ldr	r0, [r7, #4]
 8007f6c:	f001 ff39 	bl	8009de2 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2210      	movs	r2, #16
 8007f7c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007f80:	e016      	b.n	8007fb0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	2202      	movs	r2, #2
 8007f86:	2181      	movs	r1, #129	; 0x81
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f001 ff2a 	bl	8009de2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2201      	movs	r2, #1
 8007f92:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f94:	2340      	movs	r3, #64	; 0x40
 8007f96:	2202      	movs	r2, #2
 8007f98:	2101      	movs	r1, #1
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f001 ff21 	bl	8009de2 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2210      	movs	r2, #16
 8007fac:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	2203      	movs	r2, #3
 8007fb4:	2182      	movs	r1, #130	; 0x82
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f001 ff13 	bl	8009de2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	7c1b      	ldrb	r3, [r3, #16]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d109      	bne.n	8007ffa <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ff0:	2101      	movs	r1, #1
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f001 ffe4 	bl	8009fc0 <USBD_LL_PrepareReceive>
 8007ff8:	e007      	b.n	800800a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008000:	2340      	movs	r3, #64	; 0x40
 8008002:	2101      	movs	r1, #1
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f001 ffdb 	bl	8009fc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800800a:	2300      	movs	r3, #0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3710      	adds	r7, #16
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b084      	sub	sp, #16
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008020:	2300      	movs	r3, #0
 8008022:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008024:	2181      	movs	r1, #129	; 0x81
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 ff01 	bl	8009e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008032:	2101      	movs	r1, #1
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f001 fefa 	bl	8009e2e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008042:	2182      	movs	r1, #130	; 0x82
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f001 fef2 	bl	8009e2e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2200      	movs	r2, #0
 8008056:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00e      	beq.n	8008082 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800806a:	685b      	ldr	r3, [r3, #4]
 800806c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008074:	4618      	mov	r0, r3
 8008076:	f002 f835 	bl	800a0e4 <free>
    pdev->pClassData = NULL;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	2200      	movs	r2, #0
 800807e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8008082:	7bfb      	ldrb	r3, [r7, #15]
}
 8008084:	4618      	mov	r0, r3
 8008086:	3710      	adds	r7, #16
 8008088:	46bd      	mov	sp, r7
 800808a:	bd80      	pop	{r7, pc}

0800808c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b086      	sub	sp, #24
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
 8008094:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800809c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80080a2:	2300      	movs	r3, #0
 80080a4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d03a      	beq.n	800812c <USBD_CDC_Setup+0xa0>
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	f040 8097 	bne.w	80081ea <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	88db      	ldrh	r3, [r3, #6]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d029      	beq.n	8008118 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	781b      	ldrb	r3, [r3, #0]
 80080c8:	b25b      	sxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da11      	bge.n	80080f2 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080d4:	689b      	ldr	r3, [r3, #8]
 80080d6:	683a      	ldr	r2, [r7, #0]
 80080d8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80080da:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080dc:	683a      	ldr	r2, [r7, #0]
 80080de:	88d2      	ldrh	r2, [r2, #6]
 80080e0:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80080e2:	6939      	ldr	r1, [r7, #16]
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	88db      	ldrh	r3, [r3, #6]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f001 fa6d 	bl	80095ca <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80080f0:	e082      	b.n	80081f8 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80080f2:	683b      	ldr	r3, [r7, #0]
 80080f4:	785a      	ldrb	r2, [r3, #1]
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	88db      	ldrh	r3, [r3, #6]
 8008100:	b2da      	uxtb	r2, r3
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008108:	6939      	ldr	r1, [r7, #16]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	88db      	ldrh	r3, [r3, #6]
 800810e:	461a      	mov	r2, r3
 8008110:	6878      	ldr	r0, [r7, #4]
 8008112:	f001 fa86 	bl	8009622 <USBD_CtlPrepareRx>
    break;
 8008116:	e06f      	b.n	80081f8 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	7850      	ldrb	r0, [r2, #1]
 8008124:	2200      	movs	r2, #0
 8008126:	6839      	ldr	r1, [r7, #0]
 8008128:	4798      	blx	r3
    break;
 800812a:	e065      	b.n	80081f8 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	785b      	ldrb	r3, [r3, #1]
 8008130:	2b0b      	cmp	r3, #11
 8008132:	d84f      	bhi.n	80081d4 <USBD_CDC_Setup+0x148>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <USBD_CDC_Setup+0xb0>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	0800816d 	.word	0x0800816d
 8008140:	080081e3 	.word	0x080081e3
 8008144:	080081d5 	.word	0x080081d5
 8008148:	080081d5 	.word	0x080081d5
 800814c:	080081d5 	.word	0x080081d5
 8008150:	080081d5 	.word	0x080081d5
 8008154:	080081d5 	.word	0x080081d5
 8008158:	080081d5 	.word	0x080081d5
 800815c:	080081d5 	.word	0x080081d5
 8008160:	080081d5 	.word	0x080081d5
 8008164:	08008195 	.word	0x08008195
 8008168:	080081bd 	.word	0x080081bd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008172:	2b03      	cmp	r3, #3
 8008174:	d107      	bne.n	8008186 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008176:	f107 030c 	add.w	r3, r7, #12
 800817a:	2202      	movs	r2, #2
 800817c:	4619      	mov	r1, r3
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f001 fa23 	bl	80095ca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8008184:	e030      	b.n	80081e8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f001 f9ad 	bl	80094e8 <USBD_CtlError>
        ret = USBD_FAIL;
 800818e:	2303      	movs	r3, #3
 8008190:	75fb      	strb	r3, [r7, #23]
      break;
 8008192:	e029      	b.n	80081e8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800819a:	2b03      	cmp	r3, #3
 800819c:	d107      	bne.n	80081ae <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800819e:	f107 030f 	add.w	r3, r7, #15
 80081a2:	2201      	movs	r2, #1
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f001 fa0f 	bl	80095ca <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80081ac:	e01c      	b.n	80081e8 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f001 f999 	bl	80094e8 <USBD_CtlError>
        ret = USBD_FAIL;
 80081b6:	2303      	movs	r3, #3
 80081b8:	75fb      	strb	r3, [r7, #23]
      break;
 80081ba:	e015      	b.n	80081e8 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081c2:	2b03      	cmp	r3, #3
 80081c4:	d00f      	beq.n	80081e6 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f001 f98d 	bl	80094e8 <USBD_CtlError>
        ret = USBD_FAIL;
 80081ce:	2303      	movs	r3, #3
 80081d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80081d2:	e008      	b.n	80081e6 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80081d4:	6839      	ldr	r1, [r7, #0]
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f001 f986 	bl	80094e8 <USBD_CtlError>
      ret = USBD_FAIL;
 80081dc:	2303      	movs	r3, #3
 80081de:	75fb      	strb	r3, [r7, #23]
      break;
 80081e0:	e002      	b.n	80081e8 <USBD_CDC_Setup+0x15c>
      break;
 80081e2:	bf00      	nop
 80081e4:	e008      	b.n	80081f8 <USBD_CDC_Setup+0x16c>
      break;
 80081e6:	bf00      	nop
    }
    break;
 80081e8:	e006      	b.n	80081f8 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80081ea:	6839      	ldr	r1, [r7, #0]
 80081ec:	6878      	ldr	r0, [r7, #4]
 80081ee:	f001 f97b 	bl	80094e8 <USBD_CtlError>
    ret = USBD_FAIL;
 80081f2:	2303      	movs	r3, #3
 80081f4:	75fb      	strb	r3, [r7, #23]
    break;
 80081f6:	bf00      	nop
  }

  return (uint8_t)ret;
 80081f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop

08008204 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008216:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800821e:	2b00      	cmp	r3, #0
 8008220:	d101      	bne.n	8008226 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008222:	2303      	movs	r3, #3
 8008224:	e049      	b.n	80082ba <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800822c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800822e:	78fa      	ldrb	r2, [r7, #3]
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	3318      	adds	r3, #24
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d029      	beq.n	8008298 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008244:	78fa      	ldrb	r2, [r7, #3]
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	4613      	mov	r3, r2
 800824a:	009b      	lsls	r3, r3, #2
 800824c:	4413      	add	r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	3318      	adds	r3, #24
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	78f9      	ldrb	r1, [r7, #3]
 8008258:	68f8      	ldr	r0, [r7, #12]
 800825a:	460b      	mov	r3, r1
 800825c:	00db      	lsls	r3, r3, #3
 800825e:	1a5b      	subs	r3, r3, r1
 8008260:	009b      	lsls	r3, r3, #2
 8008262:	4403      	add	r3, r0
 8008264:	3344      	adds	r3, #68	; 0x44
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	fbb2 f1f3 	udiv	r1, r2, r3
 800826c:	fb03 f301 	mul.w	r3, r3, r1
 8008270:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008272:	2b00      	cmp	r3, #0
 8008274:	d110      	bne.n	8008298 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008276:	78fa      	ldrb	r2, [r7, #3]
 8008278:	6879      	ldr	r1, [r7, #4]
 800827a:	4613      	mov	r3, r2
 800827c:	009b      	lsls	r3, r3, #2
 800827e:	4413      	add	r3, r2
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	440b      	add	r3, r1
 8008284:	3318      	adds	r3, #24
 8008286:	2200      	movs	r2, #0
 8008288:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800828a:	78f9      	ldrb	r1, [r7, #3]
 800828c:	2300      	movs	r3, #0
 800828e:	2200      	movs	r2, #0
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f001 fe74 	bl	8009f7e <USBD_LL_Transmit>
 8008296:	e00f      	b.n	80082b8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008298:	68bb      	ldr	r3, [r7, #8]
 800829a:	2200      	movs	r2, #0
 800829c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082a6:	691b      	ldr	r3, [r3, #16]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80082ae:	68ba      	ldr	r2, [r7, #8]
 80082b0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80082b8:	2300      	movs	r3, #0
}
 80082ba:	4618      	mov	r0, r3
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}

080082c2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b084      	sub	sp, #16
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	460b      	mov	r3, r1
 80082cc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082e0:	2303      	movs	r3, #3
 80082e2:	e015      	b.n	8008310 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f001 fe8a 	bl	800a002 <USBD_LL_GetRxDataSize>
 80082ee:	4602      	mov	r2, r0
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082fc:	68db      	ldr	r3, [r3, #12]
 80082fe:	68fa      	ldr	r2, [r7, #12]
 8008300:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008304:	68fa      	ldr	r2, [r7, #12]
 8008306:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800830a:	4611      	mov	r1, r2
 800830c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008326:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800832e:	2b00      	cmp	r3, #0
 8008330:	d015      	beq.n	800835e <USBD_CDC_EP0_RxReady+0x46>
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008338:	2bff      	cmp	r3, #255	; 0xff
 800833a:	d010      	beq.n	800835e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800834a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800834c:	68fa      	ldr	r2, [r7, #12]
 800834e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008352:	b292      	uxth	r2, r2
 8008354:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	22ff      	movs	r2, #255	; 0xff
 800835a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3710      	adds	r7, #16
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008368:	b480      	push	{r7}
 800836a:	b083      	sub	sp, #12
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	2243      	movs	r2, #67	; 0x43
 8008374:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008376:	4b03      	ldr	r3, [pc, #12]	; (8008384 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008378:	4618      	mov	r0, r3
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr
 8008384:	200000bc 	.word	0x200000bc

08008388 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2243      	movs	r2, #67	; 0x43
 8008394:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008396:	4b03      	ldr	r3, [pc, #12]	; (80083a4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008398:	4618      	mov	r0, r3
 800839a:	370c      	adds	r7, #12
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	20000078 	.word	0x20000078

080083a8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2243      	movs	r2, #67	; 0x43
 80083b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80083b6:	4b03      	ldr	r3, [pc, #12]	; (80083c4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083b8:	4618      	mov	r0, r3
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr
 80083c4:	20000100 	.word	0x20000100

080083c8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b083      	sub	sp, #12
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	220a      	movs	r2, #10
 80083d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083d6:	4b03      	ldr	r3, [pc, #12]	; (80083e4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083d8:	4618      	mov	r0, r3
 80083da:	370c      	adds	r7, #12
 80083dc:	46bd      	mov	sp, r7
 80083de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e2:	4770      	bx	lr
 80083e4:	20000034 	.word	0x20000034

080083e8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083e8:	b480      	push	{r7}
 80083ea:	b083      	sub	sp, #12
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083f8:	2303      	movs	r3, #3
 80083fa:	e004      	b.n	8008406 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	683a      	ldr	r2, [r7, #0]
 8008400:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008404:	2300      	movs	r3, #0
}
 8008406:	4618      	mov	r0, r3
 8008408:	370c      	adds	r7, #12
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr

08008412 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008412:	b480      	push	{r7}
 8008414:	b087      	sub	sp, #28
 8008416:	af00      	add	r7, sp, #0
 8008418:	60f8      	str	r0, [r7, #12]
 800841a:	60b9      	str	r1, [r7, #8]
 800841c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008424:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	68ba      	ldr	r2, [r7, #8]
 800842a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	371c      	adds	r7, #28
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	4770      	bx	lr

08008444 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008444:	b480      	push	{r7}
 8008446:	b085      	sub	sp, #20
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008454:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800845e:	2300      	movs	r3, #0
}
 8008460:	4618      	mov	r0, r3
 8008462:	3714      	adds	r7, #20
 8008464:	46bd      	mov	sp, r7
 8008466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846a:	4770      	bx	lr

0800846c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b084      	sub	sp, #16
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800847a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008482:	2b00      	cmp	r3, #0
 8008484:	d101      	bne.n	800848a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008486:	2303      	movs	r3, #3
 8008488:	e016      	b.n	80084b8 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	7c1b      	ldrb	r3, [r3, #16]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d109      	bne.n	80084a6 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008498:	f44f 7300 	mov.w	r3, #512	; 0x200
 800849c:	2101      	movs	r1, #1
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f001 fd8e 	bl	8009fc0 <USBD_LL_PrepareReceive>
 80084a4:	e007      	b.n	80084b6 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084ac:	2340      	movs	r3, #64	; 0x40
 80084ae:	2101      	movs	r1, #1
 80084b0:	6878      	ldr	r0, [r7, #4]
 80084b2:	f001 fd85 	bl	8009fc0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084b6:	2300      	movs	r3, #0
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	60f8      	str	r0, [r7, #12]
 80084c8:	60b9      	str	r1, [r7, #8]
 80084ca:	4613      	mov	r3, r2
 80084cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d101      	bne.n	80084d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084d4:	2303      	movs	r3, #3
 80084d6:	e025      	b.n	8008524 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d003      	beq.n	80084ea <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2200      	movs	r2, #0
 80084e6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d003      	beq.n	80084fc <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2200      	movs	r2, #0
 80084f8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d003      	beq.n	800850a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	68ba      	ldr	r2, [r7, #8]
 8008506:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2201      	movs	r2, #1
 800850e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	79fa      	ldrb	r2, [r7, #7]
 8008516:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008518:	68f8      	ldr	r0, [r7, #12]
 800851a:	f001 fbfb 	bl	8009d14 <USBD_LL_Init>
 800851e:	4603      	mov	r3, r0
 8008520:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008522:	7dfb      	ldrb	r3, [r7, #23]
}
 8008524:	4618      	mov	r0, r3
 8008526:	3718      	adds	r7, #24
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}

0800852c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b084      	sub	sp, #16
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008536:	2300      	movs	r3, #0
 8008538:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d101      	bne.n	8008544 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008540:	2303      	movs	r3, #3
 8008542:	e010      	b.n	8008566 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	683a      	ldr	r2, [r7, #0]
 8008548:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008554:	f107 020e 	add.w	r2, r7, #14
 8008558:	4610      	mov	r0, r2
 800855a:	4798      	blx	r3
 800855c:	4602      	mov	r2, r0
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b082      	sub	sp, #8
 8008572:	af00      	add	r7, sp, #0
 8008574:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f001 fc18 	bl	8009dac <USBD_LL_Start>
 800857c:	4603      	mov	r3, r0
}
 800857e:	4618      	mov	r0, r3
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}

08008586 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008586:	b480      	push	{r7}
 8008588:	b083      	sub	sp, #12
 800858a:	af00      	add	r7, sp, #0
 800858c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800858e:	2300      	movs	r3, #0
}
 8008590:	4618      	mov	r0, r3
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr

0800859c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800859c:	b580      	push	{r7, lr}
 800859e:	b084      	sub	sp, #16
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	460b      	mov	r3, r1
 80085a6:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085a8:	2303      	movs	r3, #3
 80085aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d009      	beq.n	80085ca <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	78fa      	ldrb	r2, [r7, #3]
 80085c0:	4611      	mov	r1, r2
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	4798      	blx	r3
 80085c6:	4603      	mov	r3, r0
 80085c8:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3710      	adds	r7, #16
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}

080085d4 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
 80085dc:	460b      	mov	r3, r1
 80085de:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	78fa      	ldrb	r2, [r7, #3]
 80085f4:	4611      	mov	r1, r2
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	4798      	blx	r3
  }

  return USBD_OK;
 80085fa:	2300      	movs	r3, #0
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3708      	adds	r7, #8
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}

08008604 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b084      	sub	sp, #16
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008614:	6839      	ldr	r1, [r7, #0]
 8008616:	4618      	mov	r0, r3
 8008618:	f000 ff2c 	bl	8009474 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800862a:	461a      	mov	r2, r3
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008638:	f003 031f 	and.w	r3, r3, #31
 800863c:	2b01      	cmp	r3, #1
 800863e:	d00e      	beq.n	800865e <USBD_LL_SetupStage+0x5a>
 8008640:	2b01      	cmp	r3, #1
 8008642:	d302      	bcc.n	800864a <USBD_LL_SetupStage+0x46>
 8008644:	2b02      	cmp	r3, #2
 8008646:	d014      	beq.n	8008672 <USBD_LL_SetupStage+0x6e>
 8008648:	e01d      	b.n	8008686 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008650:	4619      	mov	r1, r3
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 fa18 	bl	8008a88 <USBD_StdDevReq>
 8008658:	4603      	mov	r3, r0
 800865a:	73fb      	strb	r3, [r7, #15]
      break;
 800865c:	e020      	b.n	80086a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008664:	4619      	mov	r1, r3
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fa7c 	bl	8008b64 <USBD_StdItfReq>
 800866c:	4603      	mov	r3, r0
 800866e:	73fb      	strb	r3, [r7, #15]
      break;
 8008670:	e016      	b.n	80086a0 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f000 fab8 	bl	8008bf0 <USBD_StdEPReq>
 8008680:	4603      	mov	r3, r0
 8008682:	73fb      	strb	r3, [r7, #15]
      break;
 8008684:	e00c      	b.n	80086a0 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800868c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008690:	b2db      	uxtb	r3, r3
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fbe9 	bl	8009e6c <USBD_LL_StallEP>
 800869a:	4603      	mov	r3, r0
 800869c:	73fb      	strb	r3, [r7, #15]
      break;
 800869e:	bf00      	nop
  }

  return ret;
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a2:	4618      	mov	r0, r3
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}

080086aa <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086aa:	b580      	push	{r7, lr}
 80086ac:	b086      	sub	sp, #24
 80086ae:	af00      	add	r7, sp, #0
 80086b0:	60f8      	str	r0, [r7, #12]
 80086b2:	460b      	mov	r3, r1
 80086b4:	607a      	str	r2, [r7, #4]
 80086b6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086b8:	7afb      	ldrb	r3, [r7, #11]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d137      	bne.n	800872e <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086c4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086cc:	2b03      	cmp	r3, #3
 80086ce:	d14a      	bne.n	8008766 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	689a      	ldr	r2, [r3, #8]
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	68db      	ldr	r3, [r3, #12]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d913      	bls.n	8008704 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	1ad2      	subs	r2, r2, r3
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	68da      	ldr	r2, [r3, #12]
 80086ee:	693b      	ldr	r3, [r7, #16]
 80086f0:	689b      	ldr	r3, [r3, #8]
 80086f2:	4293      	cmp	r3, r2
 80086f4:	bf28      	it	cs
 80086f6:	4613      	movcs	r3, r2
 80086f8:	461a      	mov	r2, r3
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	f000 ffad 	bl	800965c <USBD_CtlContinueRx>
 8008702:	e030      	b.n	8008766 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008716:	2b03      	cmp	r3, #3
 8008718:	d105      	bne.n	8008726 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008726:	68f8      	ldr	r0, [r7, #12]
 8008728:	f000 ffa9 	bl	800967e <USBD_CtlSendStatus>
 800872c:	e01b      	b.n	8008766 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008734:	699b      	ldr	r3, [r3, #24]
 8008736:	2b00      	cmp	r3, #0
 8008738:	d013      	beq.n	8008762 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008740:	2b03      	cmp	r3, #3
 8008742:	d10e      	bne.n	8008762 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800874a:	699b      	ldr	r3, [r3, #24]
 800874c:	7afa      	ldrb	r2, [r7, #11]
 800874e:	4611      	mov	r1, r2
 8008750:	68f8      	ldr	r0, [r7, #12]
 8008752:	4798      	blx	r3
 8008754:	4603      	mov	r3, r0
 8008756:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008758:	7dfb      	ldrb	r3, [r7, #23]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800875e:	7dfb      	ldrb	r3, [r7, #23]
 8008760:	e002      	b.n	8008768 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008762:	2303      	movs	r3, #3
 8008764:	e000      	b.n	8008768 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008766:	2300      	movs	r3, #0
}
 8008768:	4618      	mov	r0, r3
 800876a:	3718      	adds	r7, #24
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	460b      	mov	r3, r1
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800877e:	7afb      	ldrb	r3, [r7, #11]
 8008780:	2b00      	cmp	r3, #0
 8008782:	d16a      	bne.n	800885a <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	3314      	adds	r3, #20
 8008788:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008790:	2b02      	cmp	r3, #2
 8008792:	d155      	bne.n	8008840 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	429a      	cmp	r2, r3
 800879e:	d914      	bls.n	80087ca <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	689a      	ldr	r2, [r3, #8]
 80087a4:	693b      	ldr	r3, [r7, #16]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	1ad2      	subs	r2, r2, r3
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	461a      	mov	r2, r3
 80087b4:	6879      	ldr	r1, [r7, #4]
 80087b6:	68f8      	ldr	r0, [r7, #12]
 80087b8:	f000 ff22 	bl	8009600 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087bc:	2300      	movs	r3, #0
 80087be:	2200      	movs	r2, #0
 80087c0:	2100      	movs	r1, #0
 80087c2:	68f8      	ldr	r0, [r7, #12]
 80087c4:	f001 fbfc 	bl	8009fc0 <USBD_LL_PrepareReceive>
 80087c8:	e03a      	b.n	8008840 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087ca:	693b      	ldr	r3, [r7, #16]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d11c      	bne.n	8008810 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	685a      	ldr	r2, [r3, #4]
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80087de:	429a      	cmp	r2, r3
 80087e0:	d316      	bcc.n	8008810 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	685a      	ldr	r2, [r3, #4]
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d20f      	bcs.n	8008810 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087f0:	2200      	movs	r2, #0
 80087f2:	2100      	movs	r1, #0
 80087f4:	68f8      	ldr	r0, [r7, #12]
 80087f6:	f000 ff03 	bl	8009600 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	2200      	movs	r2, #0
 80087fe:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008802:	2300      	movs	r3, #0
 8008804:	2200      	movs	r2, #0
 8008806:	2100      	movs	r1, #0
 8008808:	68f8      	ldr	r0, [r7, #12]
 800880a:	f001 fbd9 	bl	8009fc0 <USBD_LL_PrepareReceive>
 800880e:	e017      	b.n	8008840 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d00a      	beq.n	8008832 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008822:	2b03      	cmp	r3, #3
 8008824:	d105      	bne.n	8008832 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	68f8      	ldr	r0, [r7, #12]
 8008830:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008832:	2180      	movs	r1, #128	; 0x80
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f001 fb19 	bl	8009e6c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f000 ff32 	bl	80096a4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008846:	2b01      	cmp	r3, #1
 8008848:	d123      	bne.n	8008892 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800884a:	68f8      	ldr	r0, [r7, #12]
 800884c:	f7ff fe9b 	bl	8008586 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	2200      	movs	r2, #0
 8008854:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008858:	e01b      	b.n	8008892 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008860:	695b      	ldr	r3, [r3, #20]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d013      	beq.n	800888e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800886c:	2b03      	cmp	r3, #3
 800886e:	d10e      	bne.n	800888e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	7afa      	ldrb	r2, [r7, #11]
 800887a:	4611      	mov	r1, r2
 800887c:	68f8      	ldr	r0, [r7, #12]
 800887e:	4798      	blx	r3
 8008880:	4603      	mov	r3, r0
 8008882:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008884:	7dfb      	ldrb	r3, [r7, #23]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800888a:	7dfb      	ldrb	r3, [r7, #23]
 800888c:	e002      	b.n	8008894 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800888e:	2303      	movs	r3, #3
 8008890:	e000      	b.n	8008894 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008892:	2300      	movs	r3, #0
}
 8008894:	4618      	mov	r0, r3
 8008896:	3718      	adds	r7, #24
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2201      	movs	r2, #1
 80088a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d009      	beq.n	80088e0 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088d2:	685b      	ldr	r3, [r3, #4]
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	6852      	ldr	r2, [r2, #4]
 80088d8:	b2d2      	uxtb	r2, r2
 80088da:	4611      	mov	r1, r2
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088e0:	2340      	movs	r3, #64	; 0x40
 80088e2:	2200      	movs	r2, #0
 80088e4:	2100      	movs	r1, #0
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f001 fa7b 	bl	8009de2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2240      	movs	r2, #64	; 0x40
 80088f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088fc:	2340      	movs	r3, #64	; 0x40
 80088fe:	2200      	movs	r2, #0
 8008900:	2180      	movs	r1, #128	; 0x80
 8008902:	6878      	ldr	r0, [r7, #4]
 8008904:	f001 fa6d 	bl	8009de2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	2201      	movs	r2, #1
 800890c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2240      	movs	r2, #64	; 0x40
 8008912:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3708      	adds	r7, #8
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800891e:	b480      	push	{r7}
 8008920:	b083      	sub	sp, #12
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
 8008926:	460b      	mov	r3, r1
 8008928:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	78fa      	ldrb	r2, [r7, #3]
 800892e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008930:	2300      	movs	r3, #0
}
 8008932:	4618      	mov	r0, r3
 8008934:	370c      	adds	r7, #12
 8008936:	46bd      	mov	sp, r7
 8008938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893c:	4770      	bx	lr

0800893e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800893e:	b480      	push	{r7}
 8008940:	b083      	sub	sp, #12
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2204      	movs	r2, #4
 8008956:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008976:	2b04      	cmp	r3, #4
 8008978:	d105      	bne.n	8008986 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008986:	2300      	movs	r3, #0
}
 8008988:	4618      	mov	r0, r3
 800898a:	370c      	adds	r7, #12
 800898c:	46bd      	mov	sp, r7
 800898e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008992:	4770      	bx	lr

08008994 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d10b      	bne.n	80089be <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d005      	beq.n	80089be <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b8:	69db      	ldr	r3, [r3, #28]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3708      	adds	r7, #8
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd80      	pop	{r7, pc}

080089c8 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr

080089e2 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089e2:	b480      	push	{r7}
 80089e4:	b083      	sub	sp, #12
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	460b      	mov	r3, r1
 80089ec:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	370c      	adds	r7, #12
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr

080089fc <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b083      	sub	sp, #12
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr

08008a12 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b082      	sub	sp, #8
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2201      	movs	r2, #1
 8008a1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d009      	beq.n	8008a40 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	687a      	ldr	r2, [r7, #4]
 8008a36:	6852      	ldr	r2, [r2, #4]
 8008a38:	b2d2      	uxtb	r2, r2
 8008a3a:	4611      	mov	r1, r2
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	4798      	blx	r3
  }

  return USBD_OK;
 8008a40:	2300      	movs	r3, #0
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b087      	sub	sp, #28
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	781b      	ldrb	r3, [r3, #0]
 8008a5a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	3301      	adds	r3, #1
 8008a60:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	781b      	ldrb	r3, [r3, #0]
 8008a66:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a68:	8a3b      	ldrh	r3, [r7, #16]
 8008a6a:	021b      	lsls	r3, r3, #8
 8008a6c:	b21a      	sxth	r2, r3
 8008a6e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a72:	4313      	orrs	r3, r2
 8008a74:	b21b      	sxth	r3, r3
 8008a76:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a78:	89fb      	ldrh	r3, [r7, #14]
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
	...

08008a88 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	781b      	ldrb	r3, [r3, #0]
 8008a9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a9e:	2b20      	cmp	r3, #32
 8008aa0:	d004      	beq.n	8008aac <USBD_StdDevReq+0x24>
 8008aa2:	2b40      	cmp	r3, #64	; 0x40
 8008aa4:	d002      	beq.n	8008aac <USBD_StdDevReq+0x24>
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d00a      	beq.n	8008ac0 <USBD_StdDevReq+0x38>
 8008aaa:	e050      	b.n	8008b4e <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	6839      	ldr	r1, [r7, #0]
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
 8008aba:	4603      	mov	r3, r0
 8008abc:	73fb      	strb	r3, [r7, #15]
    break;
 8008abe:	e04b      	b.n	8008b58 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	785b      	ldrb	r3, [r3, #1]
 8008ac4:	2b09      	cmp	r3, #9
 8008ac6:	d83c      	bhi.n	8008b42 <USBD_StdDevReq+0xba>
 8008ac8:	a201      	add	r2, pc, #4	; (adr r2, 8008ad0 <USBD_StdDevReq+0x48>)
 8008aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ace:	bf00      	nop
 8008ad0:	08008b25 	.word	0x08008b25
 8008ad4:	08008b39 	.word	0x08008b39
 8008ad8:	08008b43 	.word	0x08008b43
 8008adc:	08008b2f 	.word	0x08008b2f
 8008ae0:	08008b43 	.word	0x08008b43
 8008ae4:	08008b03 	.word	0x08008b03
 8008ae8:	08008af9 	.word	0x08008af9
 8008aec:	08008b43 	.word	0x08008b43
 8008af0:	08008b1b 	.word	0x08008b1b
 8008af4:	08008b0d 	.word	0x08008b0d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 f9ce 	bl	8008e9c <USBD_GetDescriptor>
      break;
 8008b00:	e024      	b.n	8008b4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008b02:	6839      	ldr	r1, [r7, #0]
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb33 	bl	8009170 <USBD_SetAddress>
      break;
 8008b0a:	e01f      	b.n	8008b4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008b0c:	6839      	ldr	r1, [r7, #0]
 8008b0e:	6878      	ldr	r0, [r7, #4]
 8008b10:	f000 fb70 	bl	80091f4 <USBD_SetConfig>
 8008b14:	4603      	mov	r3, r0
 8008b16:	73fb      	strb	r3, [r7, #15]
      break;
 8008b18:	e018      	b.n	8008b4c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008b1a:	6839      	ldr	r1, [r7, #0]
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fc0d 	bl	800933c <USBD_GetConfig>
      break;
 8008b22:	e013      	b.n	8008b4c <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008b24:	6839      	ldr	r1, [r7, #0]
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fc3c 	bl	80093a4 <USBD_GetStatus>
      break;
 8008b2c:	e00e      	b.n	8008b4c <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008b2e:	6839      	ldr	r1, [r7, #0]
 8008b30:	6878      	ldr	r0, [r7, #4]
 8008b32:	f000 fc6a 	bl	800940a <USBD_SetFeature>
      break;
 8008b36:	e009      	b.n	8008b4c <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008b38:	6839      	ldr	r1, [r7, #0]
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fc79 	bl	8009432 <USBD_ClrFeature>
      break;
 8008b40:	e004      	b.n	8008b4c <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008b42:	6839      	ldr	r1, [r7, #0]
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 fccf 	bl	80094e8 <USBD_CtlError>
      break;
 8008b4a:	bf00      	nop
    }
    break;
 8008b4c:	e004      	b.n	8008b58 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008b4e:	6839      	ldr	r1, [r7, #0]
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fcc9 	bl	80094e8 <USBD_CtlError>
    break;
 8008b56:	bf00      	nop
  }

  return ret;
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3710      	adds	r7, #16
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop

08008b64 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b084      	sub	sp, #16
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
 8008b6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b7a:	2b20      	cmp	r3, #32
 8008b7c:	d003      	beq.n	8008b86 <USBD_StdItfReq+0x22>
 8008b7e:	2b40      	cmp	r3, #64	; 0x40
 8008b80:	d001      	beq.n	8008b86 <USBD_StdItfReq+0x22>
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d12a      	bne.n	8008bdc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b8c:	3b01      	subs	r3, #1
 8008b8e:	2b02      	cmp	r3, #2
 8008b90:	d81d      	bhi.n	8008bce <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	889b      	ldrh	r3, [r3, #4]
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d813      	bhi.n	8008bc4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	6839      	ldr	r1, [r7, #0]
 8008ba6:	6878      	ldr	r0, [r7, #4]
 8008ba8:	4798      	blx	r3
 8008baa:	4603      	mov	r3, r0
 8008bac:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	88db      	ldrh	r3, [r3, #6]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d110      	bne.n	8008bd8 <USBD_StdItfReq+0x74>
 8008bb6:	7bfb      	ldrb	r3, [r7, #15]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d10d      	bne.n	8008bd8 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f000 fd5e 	bl	800967e <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008bc2:	e009      	b.n	8008bd8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	6878      	ldr	r0, [r7, #4]
 8008bc8:	f000 fc8e 	bl	80094e8 <USBD_CtlError>
      break;
 8008bcc:	e004      	b.n	8008bd8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 fc89 	bl	80094e8 <USBD_CtlError>
      break;
 8008bd6:	e000      	b.n	8008bda <USBD_StdItfReq+0x76>
      break;
 8008bd8:	bf00      	nop
    }
    break;
 8008bda:	e004      	b.n	8008be6 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008bdc:	6839      	ldr	r1, [r7, #0]
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fc82 	bl	80094e8 <USBD_CtlError>
    break;
 8008be4:	bf00      	nop
  }

  return ret;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	889b      	ldrh	r3, [r3, #4]
 8008c02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c04:	683b      	ldr	r3, [r7, #0]
 8008c06:	781b      	ldrb	r3, [r3, #0]
 8008c08:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c0c:	2b20      	cmp	r3, #32
 8008c0e:	d004      	beq.n	8008c1a <USBD_StdEPReq+0x2a>
 8008c10:	2b40      	cmp	r3, #64	; 0x40
 8008c12:	d002      	beq.n	8008c1a <USBD_StdEPReq+0x2a>
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d00a      	beq.n	8008c2e <USBD_StdEPReq+0x3e>
 8008c18:	e135      	b.n	8008e86 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	6839      	ldr	r1, [r7, #0]
 8008c24:	6878      	ldr	r0, [r7, #4]
 8008c26:	4798      	blx	r3
 8008c28:	4603      	mov	r3, r0
 8008c2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008c2c:	e130      	b.n	8008e90 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	785b      	ldrb	r3, [r3, #1]
 8008c32:	2b01      	cmp	r3, #1
 8008c34:	d03e      	beq.n	8008cb4 <USBD_StdEPReq+0xc4>
 8008c36:	2b03      	cmp	r3, #3
 8008c38:	d002      	beq.n	8008c40 <USBD_StdEPReq+0x50>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d077      	beq.n	8008d2e <USBD_StdEPReq+0x13e>
 8008c3e:	e11c      	b.n	8008e7a <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c46:	2b02      	cmp	r3, #2
 8008c48:	d002      	beq.n	8008c50 <USBD_StdEPReq+0x60>
 8008c4a:	2b03      	cmp	r3, #3
 8008c4c:	d015      	beq.n	8008c7a <USBD_StdEPReq+0x8a>
 8008c4e:	e02b      	b.n	8008ca8 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c50:	7bbb      	ldrb	r3, [r7, #14]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00c      	beq.n	8008c70 <USBD_StdEPReq+0x80>
 8008c56:	7bbb      	ldrb	r3, [r7, #14]
 8008c58:	2b80      	cmp	r3, #128	; 0x80
 8008c5a:	d009      	beq.n	8008c70 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c5c:	7bbb      	ldrb	r3, [r7, #14]
 8008c5e:	4619      	mov	r1, r3
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 f903 	bl	8009e6c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c66:	2180      	movs	r1, #128	; 0x80
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f001 f8ff 	bl	8009e6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008c6e:	e020      	b.n	8008cb2 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008c70:	6839      	ldr	r1, [r7, #0]
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fc38 	bl	80094e8 <USBD_CtlError>
        break;
 8008c78:	e01b      	b.n	8008cb2 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	885b      	ldrh	r3, [r3, #2]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d10e      	bne.n	8008ca0 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c82:	7bbb      	ldrb	r3, [r7, #14]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d00b      	beq.n	8008ca0 <USBD_StdEPReq+0xb0>
 8008c88:	7bbb      	ldrb	r3, [r7, #14]
 8008c8a:	2b80      	cmp	r3, #128	; 0x80
 8008c8c:	d008      	beq.n	8008ca0 <USBD_StdEPReq+0xb0>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	88db      	ldrh	r3, [r3, #6]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d104      	bne.n	8008ca0 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c96:	7bbb      	ldrb	r3, [r7, #14]
 8008c98:	4619      	mov	r1, r3
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f8e6 	bl	8009e6c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f000 fcec 	bl	800967e <USBD_CtlSendStatus>

        break;
 8008ca6:	e004      	b.n	8008cb2 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008ca8:	6839      	ldr	r1, [r7, #0]
 8008caa:	6878      	ldr	r0, [r7, #4]
 8008cac:	f000 fc1c 	bl	80094e8 <USBD_CtlError>
        break;
 8008cb0:	bf00      	nop
      }
      break;
 8008cb2:	e0e7      	b.n	8008e84 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cba:	2b02      	cmp	r3, #2
 8008cbc:	d002      	beq.n	8008cc4 <USBD_StdEPReq+0xd4>
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d015      	beq.n	8008cee <USBD_StdEPReq+0xfe>
 8008cc2:	e02d      	b.n	8008d20 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cc4:	7bbb      	ldrb	r3, [r7, #14]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d00c      	beq.n	8008ce4 <USBD_StdEPReq+0xf4>
 8008cca:	7bbb      	ldrb	r3, [r7, #14]
 8008ccc:	2b80      	cmp	r3, #128	; 0x80
 8008cce:	d009      	beq.n	8008ce4 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 f8c9 	bl	8009e6c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cda:	2180      	movs	r1, #128	; 0x80
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f001 f8c5 	bl	8009e6c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008ce2:	e023      	b.n	8008d2c <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008ce4:	6839      	ldr	r1, [r7, #0]
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fbfe 	bl	80094e8 <USBD_CtlError>
        break;
 8008cec:	e01e      	b.n	8008d2c <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	885b      	ldrh	r3, [r3, #2]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d119      	bne.n	8008d2a <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008cf6:	7bbb      	ldrb	r3, [r7, #14]
 8008cf8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d004      	beq.n	8008d0a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008d00:	7bbb      	ldrb	r3, [r7, #14]
 8008d02:	4619      	mov	r1, r3
 8008d04:	6878      	ldr	r0, [r7, #4]
 8008d06:	f001 f8d0 	bl	8009eaa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fcb7 	bl	800967e <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d16:	689b      	ldr	r3, [r3, #8]
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	4798      	blx	r3
        }
        break;
 8008d1e:	e004      	b.n	8008d2a <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008d20:	6839      	ldr	r1, [r7, #0]
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fbe0 	bl	80094e8 <USBD_CtlError>
        break;
 8008d28:	e000      	b.n	8008d2c <USBD_StdEPReq+0x13c>
        break;
 8008d2a:	bf00      	nop
      }
      break;
 8008d2c:	e0aa      	b.n	8008e84 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d34:	2b02      	cmp	r3, #2
 8008d36:	d002      	beq.n	8008d3e <USBD_StdEPReq+0x14e>
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d032      	beq.n	8008da2 <USBD_StdEPReq+0x1b2>
 8008d3c:	e097      	b.n	8008e6e <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d3e:	7bbb      	ldrb	r3, [r7, #14]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d007      	beq.n	8008d54 <USBD_StdEPReq+0x164>
 8008d44:	7bbb      	ldrb	r3, [r7, #14]
 8008d46:	2b80      	cmp	r3, #128	; 0x80
 8008d48:	d004      	beq.n	8008d54 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008d4a:	6839      	ldr	r1, [r7, #0]
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f000 fbcb 	bl	80094e8 <USBD_CtlError>
          break;
 8008d52:	e091      	b.n	8008e78 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d54:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	da0b      	bge.n	8008d74 <USBD_StdEPReq+0x184>
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d62:	4613      	mov	r3, r2
 8008d64:	009b      	lsls	r3, r3, #2
 8008d66:	4413      	add	r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	3310      	adds	r3, #16
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	4413      	add	r3, r2
 8008d70:	3304      	adds	r3, #4
 8008d72:	e00b      	b.n	8008d8c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008d74:	7bbb      	ldrb	r3, [r7, #14]
 8008d76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d7a:	4613      	mov	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	4413      	add	r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	4413      	add	r3, r2
 8008d8a:	3304      	adds	r3, #4
 8008d8c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2200      	movs	r2, #0
 8008d92:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	2202      	movs	r2, #2
 8008d98:	4619      	mov	r1, r3
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 fc15 	bl	80095ca <USBD_CtlSendData>
        break;
 8008da0:	e06a      	b.n	8008e78 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008da2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	da11      	bge.n	8008dce <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008daa:	7bbb      	ldrb	r3, [r7, #14]
 8008dac:	f003 020f 	and.w	r2, r3, #15
 8008db0:	6879      	ldr	r1, [r7, #4]
 8008db2:	4613      	mov	r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	009b      	lsls	r3, r3, #2
 8008dba:	440b      	add	r3, r1
 8008dbc:	3324      	adds	r3, #36	; 0x24
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d117      	bne.n	8008df4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008dc4:	6839      	ldr	r1, [r7, #0]
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 fb8e 	bl	80094e8 <USBD_CtlError>
            break;
 8008dcc:	e054      	b.n	8008e78 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dce:	7bbb      	ldrb	r3, [r7, #14]
 8008dd0:	f003 020f 	and.w	r2, r3, #15
 8008dd4:	6879      	ldr	r1, [r7, #4]
 8008dd6:	4613      	mov	r3, r2
 8008dd8:	009b      	lsls	r3, r3, #2
 8008dda:	4413      	add	r3, r2
 8008ddc:	009b      	lsls	r3, r3, #2
 8008dde:	440b      	add	r3, r1
 8008de0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008de4:	881b      	ldrh	r3, [r3, #0]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d104      	bne.n	8008df4 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008dea:	6839      	ldr	r1, [r7, #0]
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f000 fb7b 	bl	80094e8 <USBD_CtlError>
            break;
 8008df2:	e041      	b.n	8008e78 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008df4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	da0b      	bge.n	8008e14 <USBD_StdEPReq+0x224>
 8008dfc:	7bbb      	ldrb	r3, [r7, #14]
 8008dfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008e02:	4613      	mov	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4413      	add	r3, r2
 8008e08:	009b      	lsls	r3, r3, #2
 8008e0a:	3310      	adds	r3, #16
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	4413      	add	r3, r2
 8008e10:	3304      	adds	r3, #4
 8008e12:	e00b      	b.n	8008e2c <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008e14:	7bbb      	ldrb	r3, [r7, #14]
 8008e16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	009b      	lsls	r3, r3, #2
 8008e1e:	4413      	add	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	4413      	add	r3, r2
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e2e:	7bbb      	ldrb	r3, [r7, #14]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <USBD_StdEPReq+0x24a>
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	2b80      	cmp	r3, #128	; 0x80
 8008e38:	d103      	bne.n	8008e42 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	e00e      	b.n	8008e60 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e42:	7bbb      	ldrb	r3, [r7, #14]
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f001 f84e 	bl	8009ee8 <USBD_LL_IsStallEP>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2201      	movs	r2, #1
 8008e56:	601a      	str	r2, [r3, #0]
 8008e58:	e002      	b.n	8008e60 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	2202      	movs	r2, #2
 8008e64:	4619      	mov	r1, r3
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 fbaf 	bl	80095ca <USBD_CtlSendData>
          break;
 8008e6c:	e004      	b.n	8008e78 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008e6e:	6839      	ldr	r1, [r7, #0]
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f000 fb39 	bl	80094e8 <USBD_CtlError>
        break;
 8008e76:	bf00      	nop
      }
      break;
 8008e78:	e004      	b.n	8008e84 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fb33 	bl	80094e8 <USBD_CtlError>
      break;
 8008e82:	bf00      	nop
    }
    break;
 8008e84:	e004      	b.n	8008e90 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fb2d 	bl	80094e8 <USBD_CtlError>
    break;
 8008e8e:	bf00      	nop
  }

  return ret;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
	...

08008e9c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	885b      	ldrh	r3, [r3, #2]
 8008eb6:	0a1b      	lsrs	r3, r3, #8
 8008eb8:	b29b      	uxth	r3, r3
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	2b06      	cmp	r3, #6
 8008ebe:	f200 8128 	bhi.w	8009112 <USBD_GetDescriptor+0x276>
 8008ec2:	a201      	add	r2, pc, #4	; (adr r2, 8008ec8 <USBD_GetDescriptor+0x2c>)
 8008ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec8:	08008ee5 	.word	0x08008ee5
 8008ecc:	08008efd 	.word	0x08008efd
 8008ed0:	08008f3d 	.word	0x08008f3d
 8008ed4:	08009113 	.word	0x08009113
 8008ed8:	08009113 	.word	0x08009113
 8008edc:	080090b3 	.word	0x080090b3
 8008ee0:	080090df 	.word	0x080090df
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	687a      	ldr	r2, [r7, #4]
 8008eee:	7c12      	ldrb	r2, [r2, #16]
 8008ef0:	f107 0108 	add.w	r1, r7, #8
 8008ef4:	4610      	mov	r0, r2
 8008ef6:	4798      	blx	r3
 8008ef8:	60f8      	str	r0, [r7, #12]
    break;
 8008efa:	e112      	b.n	8009122 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	7c1b      	ldrb	r3, [r3, #16]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d10d      	bne.n	8008f20 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f0c:	f107 0208 	add.w	r2, r7, #8
 8008f10:	4610      	mov	r0, r2
 8008f12:	4798      	blx	r3
 8008f14:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	2202      	movs	r2, #2
 8008f1c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008f1e:	e100      	b.n	8009122 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f28:	f107 0208 	add.w	r2, r7, #8
 8008f2c:	4610      	mov	r0, r2
 8008f2e:	4798      	blx	r3
 8008f30:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3301      	adds	r3, #1
 8008f36:	2202      	movs	r2, #2
 8008f38:	701a      	strb	r2, [r3, #0]
    break;
 8008f3a:	e0f2      	b.n	8009122 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	885b      	ldrh	r3, [r3, #2]
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b05      	cmp	r3, #5
 8008f44:	f200 80ac 	bhi.w	80090a0 <USBD_GetDescriptor+0x204>
 8008f48:	a201      	add	r2, pc, #4	; (adr r2, 8008f50 <USBD_GetDescriptor+0xb4>)
 8008f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4e:	bf00      	nop
 8008f50:	08008f69 	.word	0x08008f69
 8008f54:	08008f9d 	.word	0x08008f9d
 8008f58:	08008fd1 	.word	0x08008fd1
 8008f5c:	08009005 	.word	0x08009005
 8008f60:	08009039 	.word	0x08009039
 8008f64:	0800906d 	.word	0x0800906d
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d00b      	beq.n	8008f8c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f7a:	685b      	ldr	r3, [r3, #4]
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	7c12      	ldrb	r2, [r2, #16]
 8008f80:	f107 0108 	add.w	r1, r7, #8
 8008f84:	4610      	mov	r0, r2
 8008f86:	4798      	blx	r3
 8008f88:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f8a:	e091      	b.n	80090b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f8c:	6839      	ldr	r1, [r7, #0]
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f000 faaa 	bl	80094e8 <USBD_CtlError>
        err++;
 8008f94:	7afb      	ldrb	r3, [r7, #11]
 8008f96:	3301      	adds	r3, #1
 8008f98:	72fb      	strb	r3, [r7, #11]
      break;
 8008f9a:	e089      	b.n	80090b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d00b      	beq.n	8008fc0 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	7c12      	ldrb	r2, [r2, #16]
 8008fb4:	f107 0108 	add.w	r1, r7, #8
 8008fb8:	4610      	mov	r0, r2
 8008fba:	4798      	blx	r3
 8008fbc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fbe:	e077      	b.n	80090b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008fc0:	6839      	ldr	r1, [r7, #0]
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f000 fa90 	bl	80094e8 <USBD_CtlError>
        err++;
 8008fc8:	7afb      	ldrb	r3, [r7, #11]
 8008fca:	3301      	adds	r3, #1
 8008fcc:	72fb      	strb	r3, [r7, #11]
      break;
 8008fce:	e06f      	b.n	80090b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fd6:	68db      	ldr	r3, [r3, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00b      	beq.n	8008ff4 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fe2:	68db      	ldr	r3, [r3, #12]
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	7c12      	ldrb	r2, [r2, #16]
 8008fe8:	f107 0108 	add.w	r1, r7, #8
 8008fec:	4610      	mov	r0, r2
 8008fee:	4798      	blx	r3
 8008ff0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ff2:	e05d      	b.n	80090b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ff4:	6839      	ldr	r1, [r7, #0]
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fa76 	bl	80094e8 <USBD_CtlError>
        err++;
 8008ffc:	7afb      	ldrb	r3, [r7, #11]
 8008ffe:	3301      	adds	r3, #1
 8009000:	72fb      	strb	r3, [r7, #11]
      break;
 8009002:	e055      	b.n	80090b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900a:	691b      	ldr	r3, [r3, #16]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d00b      	beq.n	8009028 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009016:	691b      	ldr	r3, [r3, #16]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	7c12      	ldrb	r2, [r2, #16]
 800901c:	f107 0108 	add.w	r1, r7, #8
 8009020:	4610      	mov	r0, r2
 8009022:	4798      	blx	r3
 8009024:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009026:	e043      	b.n	80090b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fa5c 	bl	80094e8 <USBD_CtlError>
        err++;
 8009030:	7afb      	ldrb	r3, [r7, #11]
 8009032:	3301      	adds	r3, #1
 8009034:	72fb      	strb	r3, [r7, #11]
      break;
 8009036:	e03b      	b.n	80090b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800903e:	695b      	ldr	r3, [r3, #20]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d00b      	beq.n	800905c <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800904a:	695b      	ldr	r3, [r3, #20]
 800904c:	687a      	ldr	r2, [r7, #4]
 800904e:	7c12      	ldrb	r2, [r2, #16]
 8009050:	f107 0108 	add.w	r1, r7, #8
 8009054:	4610      	mov	r0, r2
 8009056:	4798      	blx	r3
 8009058:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800905a:	e029      	b.n	80090b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800905c:	6839      	ldr	r1, [r7, #0]
 800905e:	6878      	ldr	r0, [r7, #4]
 8009060:	f000 fa42 	bl	80094e8 <USBD_CtlError>
        err++;
 8009064:	7afb      	ldrb	r3, [r7, #11]
 8009066:	3301      	adds	r3, #1
 8009068:	72fb      	strb	r3, [r7, #11]
      break;
 800906a:	e021      	b.n	80090b0 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009072:	699b      	ldr	r3, [r3, #24]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d00b      	beq.n	8009090 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800907e:	699b      	ldr	r3, [r3, #24]
 8009080:	687a      	ldr	r2, [r7, #4]
 8009082:	7c12      	ldrb	r2, [r2, #16]
 8009084:	f107 0108 	add.w	r1, r7, #8
 8009088:	4610      	mov	r0, r2
 800908a:	4798      	blx	r3
 800908c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800908e:	e00f      	b.n	80090b0 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009090:	6839      	ldr	r1, [r7, #0]
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 fa28 	bl	80094e8 <USBD_CtlError>
        err++;
 8009098:	7afb      	ldrb	r3, [r7, #11]
 800909a:	3301      	adds	r3, #1
 800909c:	72fb      	strb	r3, [r7, #11]
      break;
 800909e:	e007      	b.n	80090b0 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80090a0:	6839      	ldr	r1, [r7, #0]
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa20 	bl	80094e8 <USBD_CtlError>
      err++;
 80090a8:	7afb      	ldrb	r3, [r7, #11]
 80090aa:	3301      	adds	r3, #1
 80090ac:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80090ae:	bf00      	nop
    }
    break;
 80090b0:	e037      	b.n	8009122 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7c1b      	ldrb	r3, [r3, #16]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d109      	bne.n	80090ce <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c2:	f107 0208 	add.w	r2, r7, #8
 80090c6:	4610      	mov	r0, r2
 80090c8:	4798      	blx	r3
 80090ca:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80090cc:	e029      	b.n	8009122 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fa09 	bl	80094e8 <USBD_CtlError>
      err++;
 80090d6:	7afb      	ldrb	r3, [r7, #11]
 80090d8:	3301      	adds	r3, #1
 80090da:	72fb      	strb	r3, [r7, #11]
    break;
 80090dc:	e021      	b.n	8009122 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	7c1b      	ldrb	r3, [r3, #16]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d10d      	bne.n	8009102 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090ee:	f107 0208 	add.w	r2, r7, #8
 80090f2:	4610      	mov	r0, r2
 80090f4:	4798      	blx	r3
 80090f6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	3301      	adds	r3, #1
 80090fc:	2207      	movs	r2, #7
 80090fe:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009100:	e00f      	b.n	8009122 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f000 f9ef 	bl	80094e8 <USBD_CtlError>
      err++;
 800910a:	7afb      	ldrb	r3, [r7, #11]
 800910c:	3301      	adds	r3, #1
 800910e:	72fb      	strb	r3, [r7, #11]
    break;
 8009110:	e007      	b.n	8009122 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8009112:	6839      	ldr	r1, [r7, #0]
 8009114:	6878      	ldr	r0, [r7, #4]
 8009116:	f000 f9e7 	bl	80094e8 <USBD_CtlError>
    err++;
 800911a:	7afb      	ldrb	r3, [r7, #11]
 800911c:	3301      	adds	r3, #1
 800911e:	72fb      	strb	r3, [r7, #11]
    break;
 8009120:	bf00      	nop
  }

  if (err != 0U)
 8009122:	7afb      	ldrb	r3, [r7, #11]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d11e      	bne.n	8009166 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	88db      	ldrh	r3, [r3, #6]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d016      	beq.n	800915e <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009130:	893b      	ldrh	r3, [r7, #8]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d00e      	beq.n	8009154 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	88da      	ldrh	r2, [r3, #6]
 800913a:	893b      	ldrh	r3, [r7, #8]
 800913c:	4293      	cmp	r3, r2
 800913e:	bf28      	it	cs
 8009140:	4613      	movcs	r3, r2
 8009142:	b29b      	uxth	r3, r3
 8009144:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8009146:	893b      	ldrh	r3, [r7, #8]
 8009148:	461a      	mov	r2, r3
 800914a:	68f9      	ldr	r1, [r7, #12]
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f000 fa3c 	bl	80095ca <USBD_CtlSendData>
 8009152:	e009      	b.n	8009168 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8009154:	6839      	ldr	r1, [r7, #0]
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 f9c6 	bl	80094e8 <USBD_CtlError>
 800915c:	e004      	b.n	8009168 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f000 fa8d 	bl	800967e <USBD_CtlSendStatus>
 8009164:	e000      	b.n	8009168 <USBD_GetDescriptor+0x2cc>
    return;
 8009166:	bf00      	nop
    }
  }
}
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
 800916e:	bf00      	nop

08009170 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b084      	sub	sp, #16
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	889b      	ldrh	r3, [r3, #4]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d130      	bne.n	80091e4 <USBD_SetAddress+0x74>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	88db      	ldrh	r3, [r3, #6]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d12c      	bne.n	80091e4 <USBD_SetAddress+0x74>
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	885b      	ldrh	r3, [r3, #2]
 800918e:	2b7f      	cmp	r3, #127	; 0x7f
 8009190:	d828      	bhi.n	80091e4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	885b      	ldrh	r3, [r3, #2]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800919c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a4:	2b03      	cmp	r3, #3
 80091a6:	d104      	bne.n	80091b2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80091a8:	6839      	ldr	r1, [r7, #0]
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f99c 	bl	80094e8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091b0:	e01c      	b.n	80091ec <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	7bfa      	ldrb	r2, [r7, #15]
 80091b6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	4619      	mov	r1, r3
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 febe 	bl	8009f40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091c4:	6878      	ldr	r0, [r7, #4]
 80091c6:	f000 fa5a 	bl	800967e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d004      	beq.n	80091da <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2202      	movs	r2, #2
 80091d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d8:	e008      	b.n	80091ec <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2201      	movs	r2, #1
 80091de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091e2:	e003      	b.n	80091ec <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091e4:	6839      	ldr	r1, [r7, #0]
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 f97e 	bl	80094e8 <USBD_CtlError>
  }
}
 80091ec:	bf00      	nop
 80091ee:	3710      	adds	r7, #16
 80091f0:	46bd      	mov	sp, r7
 80091f2:	bd80      	pop	{r7, pc}

080091f4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b084      	sub	sp, #16
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091fe:	2300      	movs	r3, #0
 8009200:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	885b      	ldrh	r3, [r3, #2]
 8009206:	b2da      	uxtb	r2, r3
 8009208:	4b4b      	ldr	r3, [pc, #300]	; (8009338 <USBD_SetConfig+0x144>)
 800920a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800920c:	4b4a      	ldr	r3, [pc, #296]	; (8009338 <USBD_SetConfig+0x144>)
 800920e:	781b      	ldrb	r3, [r3, #0]
 8009210:	2b01      	cmp	r3, #1
 8009212:	d905      	bls.n	8009220 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009214:	6839      	ldr	r1, [r7, #0]
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	f000 f966 	bl	80094e8 <USBD_CtlError>
    return USBD_FAIL;
 800921c:	2303      	movs	r3, #3
 800921e:	e087      	b.n	8009330 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009226:	2b02      	cmp	r3, #2
 8009228:	d002      	beq.n	8009230 <USBD_SetConfig+0x3c>
 800922a:	2b03      	cmp	r3, #3
 800922c:	d025      	beq.n	800927a <USBD_SetConfig+0x86>
 800922e:	e071      	b.n	8009314 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009230:	4b41      	ldr	r3, [pc, #260]	; (8009338 <USBD_SetConfig+0x144>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d01c      	beq.n	8009272 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009238:	4b3f      	ldr	r3, [pc, #252]	; (8009338 <USBD_SetConfig+0x144>)
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	461a      	mov	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009242:	4b3d      	ldr	r3, [pc, #244]	; (8009338 <USBD_SetConfig+0x144>)
 8009244:	781b      	ldrb	r3, [r3, #0]
 8009246:	4619      	mov	r1, r3
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f7ff f9a7 	bl	800859c <USBD_SetClassConfig>
 800924e:	4603      	mov	r3, r0
 8009250:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8009252:	7bfb      	ldrb	r3, [r7, #15]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d004      	beq.n	8009262 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009258:	6839      	ldr	r1, [r7, #0]
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f944 	bl	80094e8 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009260:	e065      	b.n	800932e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f000 fa0b 	bl	800967e <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2203      	movs	r2, #3
 800926c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009270:	e05d      	b.n	800932e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009272:	6878      	ldr	r0, [r7, #4]
 8009274:	f000 fa03 	bl	800967e <USBD_CtlSendStatus>
    break;
 8009278:	e059      	b.n	800932e <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800927a:	4b2f      	ldr	r3, [pc, #188]	; (8009338 <USBD_SetConfig+0x144>)
 800927c:	781b      	ldrb	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d112      	bne.n	80092a8 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2202      	movs	r2, #2
 8009286:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800928a:	4b2b      	ldr	r3, [pc, #172]	; (8009338 <USBD_SetConfig+0x144>)
 800928c:	781b      	ldrb	r3, [r3, #0]
 800928e:	461a      	mov	r2, r3
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009294:	4b28      	ldr	r3, [pc, #160]	; (8009338 <USBD_SetConfig+0x144>)
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	4619      	mov	r1, r3
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f7ff f99a 	bl	80085d4 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 f9ec 	bl	800967e <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80092a6:	e042      	b.n	800932e <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80092a8:	4b23      	ldr	r3, [pc, #140]	; (8009338 <USBD_SetConfig+0x144>)
 80092aa:	781b      	ldrb	r3, [r3, #0]
 80092ac:	461a      	mov	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d02a      	beq.n	800930c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	685b      	ldr	r3, [r3, #4]
 80092ba:	b2db      	uxtb	r3, r3
 80092bc:	4619      	mov	r1, r3
 80092be:	6878      	ldr	r0, [r7, #4]
 80092c0:	f7ff f988 	bl	80085d4 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80092c4:	4b1c      	ldr	r3, [pc, #112]	; (8009338 <USBD_SetConfig+0x144>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	461a      	mov	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80092ce:	4b1a      	ldr	r3, [pc, #104]	; (8009338 <USBD_SetConfig+0x144>)
 80092d0:	781b      	ldrb	r3, [r3, #0]
 80092d2:	4619      	mov	r1, r3
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff f961 	bl	800859c <USBD_SetClassConfig>
 80092da:	4603      	mov	r3, r0
 80092dc:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80092de:	7bfb      	ldrb	r3, [r7, #15]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d00f      	beq.n	8009304 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80092e4:	6839      	ldr	r1, [r7, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f000 f8fe 	bl	80094e8 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff f96d 	bl	80085d4 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2202      	movs	r2, #2
 80092fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009302:	e014      	b.n	800932e <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f9ba 	bl	800967e <USBD_CtlSendStatus>
    break;
 800930a:	e010      	b.n	800932e <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f9b6 	bl	800967e <USBD_CtlSendStatus>
    break;
 8009312:	e00c      	b.n	800932e <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 f8e6 	bl	80094e8 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800931c:	4b06      	ldr	r3, [pc, #24]	; (8009338 <USBD_SetConfig+0x144>)
 800931e:	781b      	ldrb	r3, [r3, #0]
 8009320:	4619      	mov	r1, r3
 8009322:	6878      	ldr	r0, [r7, #4]
 8009324:	f7ff f956 	bl	80085d4 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009328:	2303      	movs	r3, #3
 800932a:	73fb      	strb	r3, [r7, #15]
    break;
 800932c:	bf00      	nop
  }

  return ret;
 800932e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009330:	4618      	mov	r0, r3
 8009332:	3710      	adds	r7, #16
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}
 8009338:	2000022c 	.word	0x2000022c

0800933c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
 8009344:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	88db      	ldrh	r3, [r3, #6]
 800934a:	2b01      	cmp	r3, #1
 800934c:	d004      	beq.n	8009358 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800934e:	6839      	ldr	r1, [r7, #0]
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f8c9 	bl	80094e8 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8009356:	e021      	b.n	800939c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800935e:	2b01      	cmp	r3, #1
 8009360:	db17      	blt.n	8009392 <USBD_GetConfig+0x56>
 8009362:	2b02      	cmp	r3, #2
 8009364:	dd02      	ble.n	800936c <USBD_GetConfig+0x30>
 8009366:	2b03      	cmp	r3, #3
 8009368:	d00b      	beq.n	8009382 <USBD_GetConfig+0x46>
 800936a:	e012      	b.n	8009392 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	3308      	adds	r3, #8
 8009376:	2201      	movs	r2, #1
 8009378:	4619      	mov	r1, r3
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 f925 	bl	80095ca <USBD_CtlSendData>
      break;
 8009380:	e00c      	b.n	800939c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3304      	adds	r3, #4
 8009386:	2201      	movs	r2, #1
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f91d 	bl	80095ca <USBD_CtlSendData>
      break;
 8009390:	e004      	b.n	800939c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009392:	6839      	ldr	r1, [r7, #0]
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f000 f8a7 	bl	80094e8 <USBD_CtlError>
      break;
 800939a:	bf00      	nop
}
 800939c:	bf00      	nop
 800939e:	3708      	adds	r7, #8
 80093a0:	46bd      	mov	sp, r7
 80093a2:	bd80      	pop	{r7, pc}

080093a4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093a4:	b580      	push	{r7, lr}
 80093a6:	b082      	sub	sp, #8
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
 80093ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093b4:	3b01      	subs	r3, #1
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d81e      	bhi.n	80093f8 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80093ba:	683b      	ldr	r3, [r7, #0]
 80093bc:	88db      	ldrh	r3, [r3, #6]
 80093be:	2b02      	cmp	r3, #2
 80093c0:	d004      	beq.n	80093cc <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 f88f 	bl	80094e8 <USBD_CtlError>
      break;
 80093ca:	e01a      	b.n	8009402 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2201      	movs	r2, #1
 80093d0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f043 0202 	orr.w	r2, r3, #2
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	330c      	adds	r3, #12
 80093ec:	2202      	movs	r2, #2
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f8ea 	bl	80095ca <USBD_CtlSendData>
    break;
 80093f6:	e004      	b.n	8009402 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f000 f874 	bl	80094e8 <USBD_CtlError>
    break;
 8009400:	bf00      	nop
  }
}
 8009402:	bf00      	nop
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b082      	sub	sp, #8
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
 8009412:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	885b      	ldrh	r3, [r3, #2]
 8009418:	2b01      	cmp	r3, #1
 800941a:	d106      	bne.n	800942a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	2201      	movs	r2, #1
 8009420:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f000 f92a 	bl	800967e <USBD_CtlSendStatus>
  }
}
 800942a:	bf00      	nop
 800942c:	3708      	adds	r7, #8
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}

08009432 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009432:	b580      	push	{r7, lr}
 8009434:	b082      	sub	sp, #8
 8009436:	af00      	add	r7, sp, #0
 8009438:	6078      	str	r0, [r7, #4]
 800943a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009442:	3b01      	subs	r3, #1
 8009444:	2b02      	cmp	r3, #2
 8009446:	d80b      	bhi.n	8009460 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	885b      	ldrh	r3, [r3, #2]
 800944c:	2b01      	cmp	r3, #1
 800944e:	d10c      	bne.n	800946a <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009458:	6878      	ldr	r0, [r7, #4]
 800945a:	f000 f910 	bl	800967e <USBD_CtlSendStatus>
      }
      break;
 800945e:	e004      	b.n	800946a <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009460:	6839      	ldr	r1, [r7, #0]
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 f840 	bl	80094e8 <USBD_CtlError>
      break;
 8009468:	e000      	b.n	800946c <USBD_ClrFeature+0x3a>
      break;
 800946a:	bf00      	nop
  }
}
 800946c:	bf00      	nop
 800946e:	3708      	adds	r7, #8
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009474:	b580      	push	{r7, lr}
 8009476:	b084      	sub	sp, #16
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
 800947c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	781a      	ldrb	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	3301      	adds	r3, #1
 800948e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	781a      	ldrb	r2, [r3, #0]
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	3301      	adds	r3, #1
 800949c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	f7ff fad3 	bl	8008a4a <SWAPBYTE>
 80094a4:	4603      	mov	r3, r0
 80094a6:	461a      	mov	r2, r3
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	3301      	adds	r3, #1
 80094b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	3301      	adds	r3, #1
 80094b6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094b8:	68f8      	ldr	r0, [r7, #12]
 80094ba:	f7ff fac6 	bl	8008a4a <SWAPBYTE>
 80094be:	4603      	mov	r3, r0
 80094c0:	461a      	mov	r2, r3
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3301      	adds	r3, #1
 80094ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	3301      	adds	r3, #1
 80094d0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094d2:	68f8      	ldr	r0, [r7, #12]
 80094d4:	f7ff fab9 	bl	8008a4a <SWAPBYTE>
 80094d8:	4603      	mov	r3, r0
 80094da:	461a      	mov	r2, r3
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	80da      	strh	r2, [r3, #6]
}
 80094e0:	bf00      	nop
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
 80094f0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f2:	2180      	movs	r1, #128	; 0x80
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fcb9 	bl	8009e6c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094fa:	2100      	movs	r1, #0
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fcb5 	bl	8009e6c <USBD_LL_StallEP>
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b086      	sub	sp, #24
 800950e:	af00      	add	r7, sp, #0
 8009510:	60f8      	str	r0, [r7, #12]
 8009512:	60b9      	str	r1, [r7, #8]
 8009514:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009516:	2300      	movs	r3, #0
 8009518:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	d036      	beq.n	800958e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009524:	6938      	ldr	r0, [r7, #16]
 8009526:	f000 f836 	bl	8009596 <USBD_GetLen>
 800952a:	4603      	mov	r3, r0
 800952c:	3301      	adds	r3, #1
 800952e:	b29b      	uxth	r3, r3
 8009530:	005b      	lsls	r3, r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009538:	7dfb      	ldrb	r3, [r7, #23]
 800953a:	68ba      	ldr	r2, [r7, #8]
 800953c:	4413      	add	r3, r2
 800953e:	687a      	ldr	r2, [r7, #4]
 8009540:	7812      	ldrb	r2, [r2, #0]
 8009542:	701a      	strb	r2, [r3, #0]
  idx++;
 8009544:	7dfb      	ldrb	r3, [r7, #23]
 8009546:	3301      	adds	r3, #1
 8009548:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800954a:	7dfb      	ldrb	r3, [r7, #23]
 800954c:	68ba      	ldr	r2, [r7, #8]
 800954e:	4413      	add	r3, r2
 8009550:	2203      	movs	r2, #3
 8009552:	701a      	strb	r2, [r3, #0]
  idx++;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	3301      	adds	r3, #1
 8009558:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800955a:	e013      	b.n	8009584 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800955c:	7dfb      	ldrb	r3, [r7, #23]
 800955e:	68ba      	ldr	r2, [r7, #8]
 8009560:	4413      	add	r3, r2
 8009562:	693a      	ldr	r2, [r7, #16]
 8009564:	7812      	ldrb	r2, [r2, #0]
 8009566:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009568:	693b      	ldr	r3, [r7, #16]
 800956a:	3301      	adds	r3, #1
 800956c:	613b      	str	r3, [r7, #16]
    idx++;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
 8009570:	3301      	adds	r3, #1
 8009572:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009574:	7dfb      	ldrb	r3, [r7, #23]
 8009576:	68ba      	ldr	r2, [r7, #8]
 8009578:	4413      	add	r3, r2
 800957a:	2200      	movs	r2, #0
 800957c:	701a      	strb	r2, [r3, #0]
    idx++;
 800957e:	7dfb      	ldrb	r3, [r7, #23]
 8009580:	3301      	adds	r3, #1
 8009582:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009584:	693b      	ldr	r3, [r7, #16]
 8009586:	781b      	ldrb	r3, [r3, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d1e7      	bne.n	800955c <USBD_GetString+0x52>
 800958c:	e000      	b.n	8009590 <USBD_GetString+0x86>
    return;
 800958e:	bf00      	nop
  }
}
 8009590:	3718      	adds	r7, #24
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}

08009596 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009596:	b480      	push	{r7}
 8009598:	b085      	sub	sp, #20
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800959e:	2300      	movs	r3, #0
 80095a0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80095a6:	e005      	b.n	80095b4 <USBD_GetLen+0x1e>
  {
    len++;
 80095a8:	7bfb      	ldrb	r3, [r7, #15]
 80095aa:	3301      	adds	r3, #1
 80095ac:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	3301      	adds	r3, #1
 80095b2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f5      	bne.n	80095a8 <USBD_GetLen+0x12>
  }

  return len;
 80095bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr

080095ca <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b084      	sub	sp, #16
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	60f8      	str	r0, [r7, #12]
 80095d2:	60b9      	str	r1, [r7, #8]
 80095d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2202      	movs	r2, #2
 80095da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	687a      	ldr	r2, [r7, #4]
 80095e8:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	2100      	movs	r1, #0
 80095f0:	68f8      	ldr	r0, [r7, #12]
 80095f2:	f000 fcc4 	bl	8009f7e <USBD_LL_Transmit>

  return USBD_OK;
 80095f6:	2300      	movs	r3, #0
}
 80095f8:	4618      	mov	r0, r3
 80095fa:	3710      	adds	r7, #16
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}

08009600 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b084      	sub	sp, #16
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68ba      	ldr	r2, [r7, #8]
 8009610:	2100      	movs	r1, #0
 8009612:	68f8      	ldr	r0, [r7, #12]
 8009614:	f000 fcb3 	bl	8009f7e <USBD_LL_Transmit>

  return USBD_OK;
 8009618:	2300      	movs	r3, #0
}
 800961a:	4618      	mov	r0, r3
 800961c:	3710      	adds	r7, #16
 800961e:	46bd      	mov	sp, r7
 8009620:	bd80      	pop	{r7, pc}

08009622 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009622:	b580      	push	{r7, lr}
 8009624:	b084      	sub	sp, #16
 8009626:	af00      	add	r7, sp, #0
 8009628:	60f8      	str	r0, [r7, #12]
 800962a:	60b9      	str	r1, [r7, #8]
 800962c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2203      	movs	r2, #3
 8009632:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	687a      	ldr	r2, [r7, #4]
 8009642:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	68ba      	ldr	r2, [r7, #8]
 800964a:	2100      	movs	r1, #0
 800964c:	68f8      	ldr	r0, [r7, #12]
 800964e:	f000 fcb7 	bl	8009fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3710      	adds	r7, #16
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800965c:	b580      	push	{r7, lr}
 800965e:	b084      	sub	sp, #16
 8009660:	af00      	add	r7, sp, #0
 8009662:	60f8      	str	r0, [r7, #12]
 8009664:	60b9      	str	r1, [r7, #8]
 8009666:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	68ba      	ldr	r2, [r7, #8]
 800966c:	2100      	movs	r1, #0
 800966e:	68f8      	ldr	r0, [r7, #12]
 8009670:	f000 fca6 	bl	8009fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}

0800967e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800967e:	b580      	push	{r7, lr}
 8009680:	b082      	sub	sp, #8
 8009682:	af00      	add	r7, sp, #0
 8009684:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	2204      	movs	r2, #4
 800968a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800968e:	2300      	movs	r3, #0
 8009690:	2200      	movs	r2, #0
 8009692:	2100      	movs	r1, #0
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f000 fc72 	bl	8009f7e <USBD_LL_Transmit>

  return USBD_OK;
 800969a:	2300      	movs	r3, #0
}
 800969c:	4618      	mov	r0, r3
 800969e:	3708      	adds	r7, #8
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b082      	sub	sp, #8
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2205      	movs	r2, #5
 80096b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096b4:	2300      	movs	r3, #0
 80096b6:	2200      	movs	r2, #0
 80096b8:	2100      	movs	r1, #0
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fc80 	bl	8009fc0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096c0:	2300      	movs	r3, #0
}
 80096c2:	4618      	mov	r0, r3
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}
	...

080096cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096cc:	b580      	push	{r7, lr}
 80096ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096d0:	2200      	movs	r2, #0
 80096d2:	4912      	ldr	r1, [pc, #72]	; (800971c <MX_USB_DEVICE_Init+0x50>)
 80096d4:	4812      	ldr	r0, [pc, #72]	; (8009720 <MX_USB_DEVICE_Init+0x54>)
 80096d6:	f7fe fef3 	bl	80084c0 <USBD_Init>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d001      	beq.n	80096e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096e0:	f7f8 f894 	bl	800180c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096e4:	490f      	ldr	r1, [pc, #60]	; (8009724 <MX_USB_DEVICE_Init+0x58>)
 80096e6:	480e      	ldr	r0, [pc, #56]	; (8009720 <MX_USB_DEVICE_Init+0x54>)
 80096e8:	f7fe ff20 	bl	800852c <USBD_RegisterClass>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096f2:	f7f8 f88b 	bl	800180c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096f6:	490c      	ldr	r1, [pc, #48]	; (8009728 <MX_USB_DEVICE_Init+0x5c>)
 80096f8:	4809      	ldr	r0, [pc, #36]	; (8009720 <MX_USB_DEVICE_Init+0x54>)
 80096fa:	f7fe fe75 	bl	80083e8 <USBD_CDC_RegisterInterface>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d001      	beq.n	8009708 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009704:	f7f8 f882 	bl	800180c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009708:	4805      	ldr	r0, [pc, #20]	; (8009720 <MX_USB_DEVICE_Init+0x54>)
 800970a:	f7fe ff30 	bl	800856e <USBD_Start>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d001      	beq.n	8009718 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009714:	f7f8 f87a 	bl	800180c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009718:	bf00      	nop
 800971a:	bd80      	pop	{r7, pc}
 800971c:	20000158 	.word	0x20000158
 8009720:	200008e4 	.word	0x200008e4
 8009724:	20000040 	.word	0x20000040
 8009728:	20000144 	.word	0x20000144

0800972c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009730:	2200      	movs	r2, #0
 8009732:	4905      	ldr	r1, [pc, #20]	; (8009748 <CDC_Init_FS+0x1c>)
 8009734:	4805      	ldr	r0, [pc, #20]	; (800974c <CDC_Init_FS+0x20>)
 8009736:	f7fe fe6c 	bl	8008412 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800973a:	4905      	ldr	r1, [pc, #20]	; (8009750 <CDC_Init_FS+0x24>)
 800973c:	4803      	ldr	r0, [pc, #12]	; (800974c <CDC_Init_FS+0x20>)
 800973e:	f7fe fe81 	bl	8008444 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009742:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009744:	4618      	mov	r0, r3
 8009746:	bd80      	pop	{r7, pc}
 8009748:	200013b4 	.word	0x200013b4
 800974c:	200008e4 	.word	0x200008e4
 8009750:	20000bb4 	.word	0x20000bb4

08009754 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009754:	b480      	push	{r7}
 8009756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009758:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800975a:	4618      	mov	r0, r3
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009764:	b480      	push	{r7}
 8009766:	b083      	sub	sp, #12
 8009768:	af00      	add	r7, sp, #0
 800976a:	4603      	mov	r3, r0
 800976c:	6039      	str	r1, [r7, #0]
 800976e:	71fb      	strb	r3, [r7, #7]
 8009770:	4613      	mov	r3, r2
 8009772:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009774:	79fb      	ldrb	r3, [r7, #7]
 8009776:	2b23      	cmp	r3, #35	; 0x23
 8009778:	d84a      	bhi.n	8009810 <CDC_Control_FS+0xac>
 800977a:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <CDC_Control_FS+0x1c>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	08009811 	.word	0x08009811
 8009784:	08009811 	.word	0x08009811
 8009788:	08009811 	.word	0x08009811
 800978c:	08009811 	.word	0x08009811
 8009790:	08009811 	.word	0x08009811
 8009794:	08009811 	.word	0x08009811
 8009798:	08009811 	.word	0x08009811
 800979c:	08009811 	.word	0x08009811
 80097a0:	08009811 	.word	0x08009811
 80097a4:	08009811 	.word	0x08009811
 80097a8:	08009811 	.word	0x08009811
 80097ac:	08009811 	.word	0x08009811
 80097b0:	08009811 	.word	0x08009811
 80097b4:	08009811 	.word	0x08009811
 80097b8:	08009811 	.word	0x08009811
 80097bc:	08009811 	.word	0x08009811
 80097c0:	08009811 	.word	0x08009811
 80097c4:	08009811 	.word	0x08009811
 80097c8:	08009811 	.word	0x08009811
 80097cc:	08009811 	.word	0x08009811
 80097d0:	08009811 	.word	0x08009811
 80097d4:	08009811 	.word	0x08009811
 80097d8:	08009811 	.word	0x08009811
 80097dc:	08009811 	.word	0x08009811
 80097e0:	08009811 	.word	0x08009811
 80097e4:	08009811 	.word	0x08009811
 80097e8:	08009811 	.word	0x08009811
 80097ec:	08009811 	.word	0x08009811
 80097f0:	08009811 	.word	0x08009811
 80097f4:	08009811 	.word	0x08009811
 80097f8:	08009811 	.word	0x08009811
 80097fc:	08009811 	.word	0x08009811
 8009800:	08009811 	.word	0x08009811
 8009804:	08009811 	.word	0x08009811
 8009808:	08009811 	.word	0x08009811
 800980c:	08009811 	.word	0x08009811
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009810:	bf00      	nop
  }

  return (USBD_OK);
 8009812:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009814:	4618      	mov	r0, r3
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800982a:	6879      	ldr	r1, [r7, #4]
 800982c:	4805      	ldr	r0, [pc, #20]	; (8009844 <CDC_Receive_FS+0x24>)
 800982e:	f7fe fe09 	bl	8008444 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009832:	4804      	ldr	r0, [pc, #16]	; (8009844 <CDC_Receive_FS+0x24>)
 8009834:	f7fe fe1a 	bl	800846c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009838:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800983a:	4618      	mov	r0, r3
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	200008e4 	.word	0x200008e4

08009848 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	4613      	mov	r3, r2
 8009854:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800985a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800985e:	4618      	mov	r0, r3
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr
	...

0800986c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800986c:	b480      	push	{r7}
 800986e:	b083      	sub	sp, #12
 8009870:	af00      	add	r7, sp, #0
 8009872:	4603      	mov	r3, r0
 8009874:	6039      	str	r1, [r7, #0]
 8009876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	2212      	movs	r2, #18
 800987c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800987e:	4b03      	ldr	r3, [pc, #12]	; (800988c <USBD_FS_DeviceDescriptor+0x20>)
}
 8009880:	4618      	mov	r0, r3
 8009882:	370c      	adds	r7, #12
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	20000174 	.word	0x20000174

08009890 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009890:	b480      	push	{r7}
 8009892:	b083      	sub	sp, #12
 8009894:	af00      	add	r7, sp, #0
 8009896:	4603      	mov	r3, r0
 8009898:	6039      	str	r1, [r7, #0]
 800989a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2204      	movs	r2, #4
 80098a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80098a2:	4b03      	ldr	r3, [pc, #12]	; (80098b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	370c      	adds	r7, #12
 80098a8:	46bd      	mov	sp, r7
 80098aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ae:	4770      	bx	lr
 80098b0:	20000188 	.word	0x20000188

080098b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b082      	sub	sp, #8
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	4603      	mov	r3, r0
 80098bc:	6039      	str	r1, [r7, #0]
 80098be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098c0:	79fb      	ldrb	r3, [r7, #7]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d105      	bne.n	80098d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098c6:	683a      	ldr	r2, [r7, #0]
 80098c8:	4907      	ldr	r1, [pc, #28]	; (80098e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80098ca:	4808      	ldr	r0, [pc, #32]	; (80098ec <USBD_FS_ProductStrDescriptor+0x38>)
 80098cc:	f7ff fe1d 	bl	800950a <USBD_GetString>
 80098d0:	e004      	b.n	80098dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098d2:	683a      	ldr	r2, [r7, #0]
 80098d4:	4904      	ldr	r1, [pc, #16]	; (80098e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80098d6:	4805      	ldr	r0, [pc, #20]	; (80098ec <USBD_FS_ProductStrDescriptor+0x38>)
 80098d8:	f7ff fe17 	bl	800950a <USBD_GetString>
  }
  return USBD_StrDesc;
 80098dc:	4b02      	ldr	r3, [pc, #8]	; (80098e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}
 80098e6:	bf00      	nop
 80098e8:	20001bb4 	.word	0x20001bb4
 80098ec:	0800b2b8 	.word	0x0800b2b8

080098f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	4603      	mov	r3, r0
 80098f8:	6039      	str	r1, [r7, #0]
 80098fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098fc:	683a      	ldr	r2, [r7, #0]
 80098fe:	4904      	ldr	r1, [pc, #16]	; (8009910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009900:	4804      	ldr	r0, [pc, #16]	; (8009914 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009902:	f7ff fe02 	bl	800950a <USBD_GetString>
  return USBD_StrDesc;
 8009906:	4b02      	ldr	r3, [pc, #8]	; (8009910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009908:	4618      	mov	r0, r3
 800990a:	3708      	adds	r7, #8
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}
 8009910:	20001bb4 	.word	0x20001bb4
 8009914:	0800b2d0 	.word	0x0800b2d0

08009918 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b082      	sub	sp, #8
 800991c:	af00      	add	r7, sp, #0
 800991e:	4603      	mov	r3, r0
 8009920:	6039      	str	r1, [r7, #0]
 8009922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	221a      	movs	r2, #26
 8009928:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800992a:	f000 f843 	bl	80099b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800992e:	4b02      	ldr	r3, [pc, #8]	; (8009938 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009930:	4618      	mov	r0, r3
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	2000018c 	.word	0x2000018c

0800993c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800993c:	b580      	push	{r7, lr}
 800993e:	b082      	sub	sp, #8
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	6039      	str	r1, [r7, #0]
 8009946:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009948:	79fb      	ldrb	r3, [r7, #7]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d105      	bne.n	800995a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	4907      	ldr	r1, [pc, #28]	; (8009970 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009952:	4808      	ldr	r0, [pc, #32]	; (8009974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009954:	f7ff fdd9 	bl	800950a <USBD_GetString>
 8009958:	e004      	b.n	8009964 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800995a:	683a      	ldr	r2, [r7, #0]
 800995c:	4904      	ldr	r1, [pc, #16]	; (8009970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800995e:	4805      	ldr	r0, [pc, #20]	; (8009974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009960:	f7ff fdd3 	bl	800950a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009964:	4b02      	ldr	r3, [pc, #8]	; (8009970 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009966:	4618      	mov	r0, r3
 8009968:	3708      	adds	r7, #8
 800996a:	46bd      	mov	sp, r7
 800996c:	bd80      	pop	{r7, pc}
 800996e:	bf00      	nop
 8009970:	20001bb4 	.word	0x20001bb4
 8009974:	0800b2e4 	.word	0x0800b2e4

08009978 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	4603      	mov	r3, r0
 8009980:	6039      	str	r1, [r7, #0]
 8009982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009984:	79fb      	ldrb	r3, [r7, #7]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d105      	bne.n	8009996 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800998a:	683a      	ldr	r2, [r7, #0]
 800998c:	4907      	ldr	r1, [pc, #28]	; (80099ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800998e:	4808      	ldr	r0, [pc, #32]	; (80099b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009990:	f7ff fdbb 	bl	800950a <USBD_GetString>
 8009994:	e004      	b.n	80099a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	4904      	ldr	r1, [pc, #16]	; (80099ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800999a:	4805      	ldr	r0, [pc, #20]	; (80099b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800999c:	f7ff fdb5 	bl	800950a <USBD_GetString>
  }
  return USBD_StrDesc;
 80099a0:	4b02      	ldr	r3, [pc, #8]	; (80099ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80099a2:	4618      	mov	r0, r3
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}
 80099aa:	bf00      	nop
 80099ac:	20001bb4 	.word	0x20001bb4
 80099b0:	0800b2f0 	.word	0x0800b2f0

080099b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b084      	sub	sp, #16
 80099b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099ba:	4b0f      	ldr	r3, [pc, #60]	; (80099f8 <Get_SerialNum+0x44>)
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099c0:	4b0e      	ldr	r3, [pc, #56]	; (80099fc <Get_SerialNum+0x48>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099c6:	4b0e      	ldr	r3, [pc, #56]	; (8009a00 <Get_SerialNum+0x4c>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	4413      	add	r3, r2
 80099d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d009      	beq.n	80099ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099da:	2208      	movs	r2, #8
 80099dc:	4909      	ldr	r1, [pc, #36]	; (8009a04 <Get_SerialNum+0x50>)
 80099de:	68f8      	ldr	r0, [r7, #12]
 80099e0:	f000 f814 	bl	8009a0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099e4:	2204      	movs	r2, #4
 80099e6:	4908      	ldr	r1, [pc, #32]	; (8009a08 <Get_SerialNum+0x54>)
 80099e8:	68b8      	ldr	r0, [r7, #8]
 80099ea:	f000 f80f 	bl	8009a0c <IntToUnicode>
  }
}
 80099ee:	bf00      	nop
 80099f0:	3710      	adds	r7, #16
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	1fff7a10 	.word	0x1fff7a10
 80099fc:	1fff7a14 	.word	0x1fff7a14
 8009a00:	1fff7a18 	.word	0x1fff7a18
 8009a04:	2000018e 	.word	0x2000018e
 8009a08:	2000019e 	.word	0x2000019e

08009a0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a0c:	b480      	push	{r7}
 8009a0e:	b087      	sub	sp, #28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	4613      	mov	r3, r2
 8009a18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a1e:	2300      	movs	r3, #0
 8009a20:	75fb      	strb	r3, [r7, #23]
 8009a22:	e027      	b.n	8009a74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	0f1b      	lsrs	r3, r3, #28
 8009a28:	2b09      	cmp	r3, #9
 8009a2a:	d80b      	bhi.n	8009a44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	0f1b      	lsrs	r3, r3, #28
 8009a30:	b2da      	uxtb	r2, r3
 8009a32:	7dfb      	ldrb	r3, [r7, #23]
 8009a34:	005b      	lsls	r3, r3, #1
 8009a36:	4619      	mov	r1, r3
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	440b      	add	r3, r1
 8009a3c:	3230      	adds	r2, #48	; 0x30
 8009a3e:	b2d2      	uxtb	r2, r2
 8009a40:	701a      	strb	r2, [r3, #0]
 8009a42:	e00a      	b.n	8009a5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	0f1b      	lsrs	r3, r3, #28
 8009a48:	b2da      	uxtb	r2, r3
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
 8009a4c:	005b      	lsls	r3, r3, #1
 8009a4e:	4619      	mov	r1, r3
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	440b      	add	r3, r1
 8009a54:	3237      	adds	r2, #55	; 0x37
 8009a56:	b2d2      	uxtb	r2, r2
 8009a58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	011b      	lsls	r3, r3, #4
 8009a5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a60:	7dfb      	ldrb	r3, [r7, #23]
 8009a62:	005b      	lsls	r3, r3, #1
 8009a64:	3301      	adds	r3, #1
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	4413      	add	r3, r2
 8009a6a:	2200      	movs	r2, #0
 8009a6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a6e:	7dfb      	ldrb	r3, [r7, #23]
 8009a70:	3301      	adds	r3, #1
 8009a72:	75fb      	strb	r3, [r7, #23]
 8009a74:	7dfa      	ldrb	r2, [r7, #23]
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d3d3      	bcc.n	8009a24 <IntToUnicode+0x18>
  }
}
 8009a7c:	bf00      	nop
 8009a7e:	371c      	adds	r7, #28
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	b08a      	sub	sp, #40	; 0x28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a90:	f107 0314 	add.w	r3, r7, #20
 8009a94:	2200      	movs	r2, #0
 8009a96:	601a      	str	r2, [r3, #0]
 8009a98:	605a      	str	r2, [r3, #4]
 8009a9a:	609a      	str	r2, [r3, #8]
 8009a9c:	60da      	str	r2, [r3, #12]
 8009a9e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aa8:	d13a      	bne.n	8009b20 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009aaa:	2300      	movs	r3, #0
 8009aac:	613b      	str	r3, [r7, #16]
 8009aae:	4b1e      	ldr	r3, [pc, #120]	; (8009b28 <HAL_PCD_MspInit+0xa0>)
 8009ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab2:	4a1d      	ldr	r2, [pc, #116]	; (8009b28 <HAL_PCD_MspInit+0xa0>)
 8009ab4:	f043 0301 	orr.w	r3, r3, #1
 8009ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8009aba:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <HAL_PCD_MspInit+0xa0>)
 8009abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	613b      	str	r3, [r7, #16]
 8009ac4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009ac6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009aca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009acc:	2302      	movs	r3, #2
 8009ace:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ad8:	230a      	movs	r3, #10
 8009ada:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009adc:	f107 0314 	add.w	r3, r7, #20
 8009ae0:	4619      	mov	r1, r3
 8009ae2:	4812      	ldr	r0, [pc, #72]	; (8009b2c <HAL_PCD_MspInit+0xa4>)
 8009ae4:	f7f9 fb24 	bl	8003130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ae8:	4b0f      	ldr	r3, [pc, #60]	; (8009b28 <HAL_PCD_MspInit+0xa0>)
 8009aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aec:	4a0e      	ldr	r2, [pc, #56]	; (8009b28 <HAL_PCD_MspInit+0xa0>)
 8009aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009af2:	6353      	str	r3, [r2, #52]	; 0x34
 8009af4:	2300      	movs	r3, #0
 8009af6:	60fb      	str	r3, [r7, #12]
 8009af8:	4b0b      	ldr	r3, [pc, #44]	; (8009b28 <HAL_PCD_MspInit+0xa0>)
 8009afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009afc:	4a0a      	ldr	r2, [pc, #40]	; (8009b28 <HAL_PCD_MspInit+0xa0>)
 8009afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009b02:	6453      	str	r3, [r2, #68]	; 0x44
 8009b04:	4b08      	ldr	r3, [pc, #32]	; (8009b28 <HAL_PCD_MspInit+0xa0>)
 8009b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b0c:	60fb      	str	r3, [r7, #12]
 8009b0e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b10:	2200      	movs	r2, #0
 8009b12:	2100      	movs	r1, #0
 8009b14:	2043      	movs	r0, #67	; 0x43
 8009b16:	f7f8 fd7e 	bl	8002616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b1a:	2043      	movs	r0, #67	; 0x43
 8009b1c:	f7f8 fd97 	bl	800264e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b20:	bf00      	nop
 8009b22:	3728      	adds	r7, #40	; 0x28
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	40023800 	.word	0x40023800
 8009b2c:	40020000 	.word	0x40020000

08009b30 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b44:	4619      	mov	r1, r3
 8009b46:	4610      	mov	r0, r2
 8009b48:	f7fe fd5c 	bl	8008604 <USBD_LL_SetupStage>
}
 8009b4c:	bf00      	nop
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b082      	sub	sp, #8
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	00db      	lsls	r3, r3, #3
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	440b      	add	r3, r1
 8009b74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	78fb      	ldrb	r3, [r7, #3]
 8009b7c:	4619      	mov	r1, r3
 8009b7e:	f7fe fd94 	bl	80086aa <USBD_LL_DataOutStage>
}
 8009b82:	bf00      	nop
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b082      	sub	sp, #8
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
 8009b92:	460b      	mov	r3, r1
 8009b94:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b9c:	78fa      	ldrb	r2, [r7, #3]
 8009b9e:	6879      	ldr	r1, [r7, #4]
 8009ba0:	4613      	mov	r3, r2
 8009ba2:	00db      	lsls	r3, r3, #3
 8009ba4:	1a9b      	subs	r3, r3, r2
 8009ba6:	009b      	lsls	r3, r3, #2
 8009ba8:	440b      	add	r3, r1
 8009baa:	3348      	adds	r3, #72	; 0x48
 8009bac:	681a      	ldr	r2, [r3, #0]
 8009bae:	78fb      	ldrb	r3, [r7, #3]
 8009bb0:	4619      	mov	r1, r3
 8009bb2:	f7fe fddd 	bl	8008770 <USBD_LL_DataInStage>
}
 8009bb6:	bf00      	nop
 8009bb8:	3708      	adds	r7, #8
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	bd80      	pop	{r7, pc}

08009bbe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bbe:	b580      	push	{r7, lr}
 8009bc0:	b082      	sub	sp, #8
 8009bc2:	af00      	add	r7, sp, #0
 8009bc4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bcc:	4618      	mov	r0, r3
 8009bce:	f7fe fee1 	bl	8008994 <USBD_LL_SOF>
}
 8009bd2:	bf00      	nop
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}

08009bda <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bda:	b580      	push	{r7, lr}
 8009bdc:	b084      	sub	sp, #16
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009be2:	2301      	movs	r3, #1
 8009be4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68db      	ldr	r3, [r3, #12]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d102      	bne.n	8009bf4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009bee:	2300      	movs	r3, #0
 8009bf0:	73fb      	strb	r3, [r7, #15]
 8009bf2:	e008      	b.n	8009c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	68db      	ldr	r3, [r3, #12]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d102      	bne.n	8009c02 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	73fb      	strb	r3, [r7, #15]
 8009c00:	e001      	b.n	8009c06 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009c02:	f7f7 fe03 	bl	800180c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c0c:	7bfa      	ldrb	r2, [r7, #15]
 8009c0e:	4611      	mov	r1, r2
 8009c10:	4618      	mov	r0, r3
 8009c12:	f7fe fe84 	bl	800891e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	f7fe fe3d 	bl	800889c <USBD_LL_Reset>
}
 8009c22:	bf00      	nop
 8009c24:	3710      	adds	r7, #16
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b082      	sub	sp, #8
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7fe fe7f 	bl	800893e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	687a      	ldr	r2, [r7, #4]
 8009c4c:	6812      	ldr	r2, [r2, #0]
 8009c4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c52:	f043 0301 	orr.w	r3, r3, #1
 8009c56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	6a1b      	ldr	r3, [r3, #32]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d005      	beq.n	8009c6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c60:	4b04      	ldr	r3, [pc, #16]	; (8009c74 <HAL_PCD_SuspendCallback+0x48>)
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	4a03      	ldr	r2, [pc, #12]	; (8009c74 <HAL_PCD_SuspendCallback+0x48>)
 8009c66:	f043 0306 	orr.w	r3, r3, #6
 8009c6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	e000ed00 	.word	0xe000ed00

08009c78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c86:	4618      	mov	r0, r3
 8009c88:	f7fe fe6e 	bl	8008968 <USBD_LL_Resume>
}
 8009c8c:	bf00      	nop
 8009c8e:	3708      	adds	r7, #8
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bd80      	pop	{r7, pc}

08009c94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b082      	sub	sp, #8
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ca6:	78fa      	ldrb	r2, [r7, #3]
 8009ca8:	4611      	mov	r1, r2
 8009caa:	4618      	mov	r0, r3
 8009cac:	f7fe fe99 	bl	80089e2 <USBD_LL_IsoOUTIncomplete>
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b082      	sub	sp, #8
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	6078      	str	r0, [r7, #4]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cca:	78fa      	ldrb	r2, [r7, #3]
 8009ccc:	4611      	mov	r1, r2
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7fe fe7a 	bl	80089c8 <USBD_LL_IsoINIncomplete>
}
 8009cd4:	bf00      	nop
 8009cd6:	3708      	adds	r7, #8
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	bd80      	pop	{r7, pc}

08009cdc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cea:	4618      	mov	r0, r3
 8009cec:	f7fe fe86 	bl	80089fc <USBD_LL_DevConnected>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d06:	4618      	mov	r0, r3
 8009d08:	f7fe fe83 	bl	8008a12 <USBD_LL_DevDisconnected>
}
 8009d0c:	bf00      	nop
 8009d0e:	3708      	adds	r7, #8
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d13c      	bne.n	8009d9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d24:	4a20      	ldr	r2, [pc, #128]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a1e      	ldr	r2, [pc, #120]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d30:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d34:	4b1c      	ldr	r3, [pc, #112]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d3c:	4b1a      	ldr	r3, [pc, #104]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d3e:	2204      	movs	r2, #4
 8009d40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d42:	4b19      	ldr	r3, [pc, #100]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d44:	2202      	movs	r2, #2
 8009d46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d48:	4b17      	ldr	r3, [pc, #92]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d4e:	4b16      	ldr	r3, [pc, #88]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d50:	2202      	movs	r2, #2
 8009d52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d54:	4b14      	ldr	r3, [pc, #80]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d56:	2200      	movs	r2, #0
 8009d58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d5a:	4b13      	ldr	r3, [pc, #76]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d60:	4b11      	ldr	r3, [pc, #68]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d62:	2200      	movs	r2, #0
 8009d64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d66:	4b10      	ldr	r3, [pc, #64]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d6c:	4b0e      	ldr	r3, [pc, #56]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d6e:	2200      	movs	r2, #0
 8009d70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d72:	480d      	ldr	r0, [pc, #52]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d74:	f7f9 fd39 	bl	80037ea <HAL_PCD_Init>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d001      	beq.n	8009d82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009d7e:	f7f7 fd45 	bl	800180c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d82:	2180      	movs	r1, #128	; 0x80
 8009d84:	4808      	ldr	r0, [pc, #32]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d86:	f7fa fe96 	bl	8004ab6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d8a:	2240      	movs	r2, #64	; 0x40
 8009d8c:	2100      	movs	r1, #0
 8009d8e:	4806      	ldr	r0, [pc, #24]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d90:	f7fa fe4a 	bl	8004a28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d94:	2280      	movs	r2, #128	; 0x80
 8009d96:	2101      	movs	r1, #1
 8009d98:	4803      	ldr	r0, [pc, #12]	; (8009da8 <USBD_LL_Init+0x94>)
 8009d9a:	f7fa fe45 	bl	8004a28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3708      	adds	r7, #8
 8009da4:	46bd      	mov	sp, r7
 8009da6:	bd80      	pop	{r7, pc}
 8009da8:	20001db4 	.word	0x20001db4

08009dac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b084      	sub	sp, #16
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009db4:	2300      	movs	r3, #0
 8009db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db8:	2300      	movs	r3, #0
 8009dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7f9 fe2e 	bl	8003a24 <HAL_PCD_Start>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dcc:	7bfb      	ldrb	r3, [r7, #15]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f000 f92a 	bl	800a028 <USBD_Get_USB_Status>
 8009dd4:	4603      	mov	r3, r0
 8009dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b084      	sub	sp, #16
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	4608      	mov	r0, r1
 8009dec:	4611      	mov	r1, r2
 8009dee:	461a      	mov	r2, r3
 8009df0:	4603      	mov	r3, r0
 8009df2:	70fb      	strb	r3, [r7, #3]
 8009df4:	460b      	mov	r3, r1
 8009df6:	70bb      	strb	r3, [r7, #2]
 8009df8:	4613      	mov	r3, r2
 8009dfa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e00:	2300      	movs	r3, #0
 8009e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e0a:	78bb      	ldrb	r3, [r7, #2]
 8009e0c:	883a      	ldrh	r2, [r7, #0]
 8009e0e:	78f9      	ldrb	r1, [r7, #3]
 8009e10:	f7fa fa12 	bl	8004238 <HAL_PCD_EP_Open>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	f000 f904 	bl	800a028 <USBD_Get_USB_Status>
 8009e20:	4603      	mov	r3, r0
 8009e22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e24:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	3710      	adds	r7, #16
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd80      	pop	{r7, pc}

08009e2e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e2e:	b580      	push	{r7, lr}
 8009e30:	b084      	sub	sp, #16
 8009e32:	af00      	add	r7, sp, #0
 8009e34:	6078      	str	r0, [r7, #4]
 8009e36:	460b      	mov	r3, r1
 8009e38:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e48:	78fa      	ldrb	r2, [r7, #3]
 8009e4a:	4611      	mov	r1, r2
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f7fa fa5b 	bl	8004308 <HAL_PCD_EP_Close>
 8009e52:	4603      	mov	r3, r0
 8009e54:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f000 f8e5 	bl	800a028 <USBD_Get_USB_Status>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e64:	4618      	mov	r0, r3
 8009e66:	3710      	adds	r7, #16
 8009e68:	46bd      	mov	sp, r7
 8009e6a:	bd80      	pop	{r7, pc}

08009e6c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e78:	2300      	movs	r3, #0
 8009e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e7c:	2300      	movs	r3, #0
 8009e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e86:	78fa      	ldrb	r2, [r7, #3]
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f7fa fb33 	bl	80044f6 <HAL_PCD_EP_SetStall>
 8009e90:	4603      	mov	r3, r0
 8009e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e94:	7bfb      	ldrb	r3, [r7, #15]
 8009e96:	4618      	mov	r0, r3
 8009e98:	f000 f8c6 	bl	800a028 <USBD_Get_USB_Status>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3710      	adds	r7, #16
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}

08009eaa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b084      	sub	sp, #16
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
 8009eb2:	460b      	mov	r3, r1
 8009eb4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eba:	2300      	movs	r3, #0
 8009ebc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ec4:	78fa      	ldrb	r2, [r7, #3]
 8009ec6:	4611      	mov	r1, r2
 8009ec8:	4618      	mov	r0, r3
 8009eca:	f7fa fb78 	bl	80045be <HAL_PCD_EP_ClrStall>
 8009ece:	4603      	mov	r3, r0
 8009ed0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ed2:	7bfb      	ldrb	r3, [r7, #15]
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	f000 f8a7 	bl	800a028 <USBD_Get_USB_Status>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	3710      	adds	r7, #16
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	bd80      	pop	{r7, pc}

08009ee8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b085      	sub	sp, #20
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	460b      	mov	r3, r1
 8009ef2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009efa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009efc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da0b      	bge.n	8009f1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009f04:	78fb      	ldrb	r3, [r7, #3]
 8009f06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f0a:	68f9      	ldr	r1, [r7, #12]
 8009f0c:	4613      	mov	r3, r2
 8009f0e:	00db      	lsls	r3, r3, #3
 8009f10:	1a9b      	subs	r3, r3, r2
 8009f12:	009b      	lsls	r3, r3, #2
 8009f14:	440b      	add	r3, r1
 8009f16:	333e      	adds	r3, #62	; 0x3e
 8009f18:	781b      	ldrb	r3, [r3, #0]
 8009f1a:	e00b      	b.n	8009f34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f1c:	78fb      	ldrb	r3, [r7, #3]
 8009f1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f22:	68f9      	ldr	r1, [r7, #12]
 8009f24:	4613      	mov	r3, r2
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	1a9b      	subs	r3, r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	440b      	add	r3, r1
 8009f2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f32:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f5a:	78fa      	ldrb	r2, [r7, #3]
 8009f5c:	4611      	mov	r1, r2
 8009f5e:	4618      	mov	r0, r3
 8009f60:	f7fa f945 	bl	80041ee <HAL_PCD_SetAddress>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f000 f85c 	bl	800a028 <USBD_Get_USB_Status>
 8009f70:	4603      	mov	r3, r0
 8009f72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f74:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	3710      	adds	r7, #16
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	bd80      	pop	{r7, pc}

08009f7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b086      	sub	sp, #24
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	60f8      	str	r0, [r7, #12]
 8009f86:	607a      	str	r2, [r7, #4]
 8009f88:	603b      	str	r3, [r7, #0]
 8009f8a:	460b      	mov	r3, r1
 8009f8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f92:	2300      	movs	r3, #0
 8009f94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f9c:	7af9      	ldrb	r1, [r7, #11]
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	f7fa fa5e 	bl	8004462 <HAL_PCD_EP_Transmit>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009faa:	7dfb      	ldrb	r3, [r7, #23]
 8009fac:	4618      	mov	r0, r3
 8009fae:	f000 f83b 	bl	800a028 <USBD_Get_USB_Status>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3718      	adds	r7, #24
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}

08009fc0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b086      	sub	sp, #24
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	60f8      	str	r0, [r7, #12]
 8009fc8:	607a      	str	r2, [r7, #4]
 8009fca:	603b      	str	r3, [r7, #0]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fde:	7af9      	ldrb	r1, [r7, #11]
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	f7fa f9da 	bl	800439c <HAL_PCD_EP_Receive>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	4618      	mov	r0, r3
 8009ff0:	f000 f81a 	bl	800a028 <USBD_Get_USB_Status>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ff8:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3718      	adds	r7, #24
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}

0800a002 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a002:	b580      	push	{r7, lr}
 800a004:	b082      	sub	sp, #8
 800a006:	af00      	add	r7, sp, #0
 800a008:	6078      	str	r0, [r7, #4]
 800a00a:	460b      	mov	r3, r1
 800a00c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a014:	78fa      	ldrb	r2, [r7, #3]
 800a016:	4611      	mov	r1, r2
 800a018:	4618      	mov	r0, r3
 800a01a:	f7fa fa0a 	bl	8004432 <HAL_PCD_EP_GetRxCount>
 800a01e:	4603      	mov	r3, r0
}
 800a020:	4618      	mov	r0, r3
 800a022:	3708      	adds	r7, #8
 800a024:	46bd      	mov	sp, r7
 800a026:	bd80      	pop	{r7, pc}

0800a028 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
 800a02e:	4603      	mov	r3, r0
 800a030:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a032:	2300      	movs	r3, #0
 800a034:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a036:	79fb      	ldrb	r3, [r7, #7]
 800a038:	2b03      	cmp	r3, #3
 800a03a:	d817      	bhi.n	800a06c <USBD_Get_USB_Status+0x44>
 800a03c:	a201      	add	r2, pc, #4	; (adr r2, 800a044 <USBD_Get_USB_Status+0x1c>)
 800a03e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a042:	bf00      	nop
 800a044:	0800a055 	.word	0x0800a055
 800a048:	0800a05b 	.word	0x0800a05b
 800a04c:	0800a061 	.word	0x0800a061
 800a050:	0800a067 	.word	0x0800a067
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73fb      	strb	r3, [r7, #15]
    break;
 800a058:	e00b      	b.n	800a072 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a05a:	2303      	movs	r3, #3
 800a05c:	73fb      	strb	r3, [r7, #15]
    break;
 800a05e:	e008      	b.n	800a072 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a060:	2301      	movs	r3, #1
 800a062:	73fb      	strb	r3, [r7, #15]
    break;
 800a064:	e005      	b.n	800a072 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a066:	2303      	movs	r3, #3
 800a068:	73fb      	strb	r3, [r7, #15]
    break;
 800a06a:	e002      	b.n	800a072 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a06c:	2303      	movs	r3, #3
 800a06e:	73fb      	strb	r3, [r7, #15]
    break;
 800a070:	bf00      	nop
  }
  return usb_status;
 800a072:	7bfb      	ldrb	r3, [r7, #15]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <__errno>:
 800a080:	4b01      	ldr	r3, [pc, #4]	; (800a088 <__errno+0x8>)
 800a082:	6818      	ldr	r0, [r3, #0]
 800a084:	4770      	bx	lr
 800a086:	bf00      	nop
 800a088:	200001a8 	.word	0x200001a8

0800a08c <__libc_init_array>:
 800a08c:	b570      	push	{r4, r5, r6, lr}
 800a08e:	4e0d      	ldr	r6, [pc, #52]	; (800a0c4 <__libc_init_array+0x38>)
 800a090:	4c0d      	ldr	r4, [pc, #52]	; (800a0c8 <__libc_init_array+0x3c>)
 800a092:	1ba4      	subs	r4, r4, r6
 800a094:	10a4      	asrs	r4, r4, #2
 800a096:	2500      	movs	r5, #0
 800a098:	42a5      	cmp	r5, r4
 800a09a:	d109      	bne.n	800a0b0 <__libc_init_array+0x24>
 800a09c:	4e0b      	ldr	r6, [pc, #44]	; (800a0cc <__libc_init_array+0x40>)
 800a09e:	4c0c      	ldr	r4, [pc, #48]	; (800a0d0 <__libc_init_array+0x44>)
 800a0a0:	f001 f8fc 	bl	800b29c <_init>
 800a0a4:	1ba4      	subs	r4, r4, r6
 800a0a6:	10a4      	asrs	r4, r4, #2
 800a0a8:	2500      	movs	r5, #0
 800a0aa:	42a5      	cmp	r5, r4
 800a0ac:	d105      	bne.n	800a0ba <__libc_init_array+0x2e>
 800a0ae:	bd70      	pop	{r4, r5, r6, pc}
 800a0b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0b4:	4798      	blx	r3
 800a0b6:	3501      	adds	r5, #1
 800a0b8:	e7ee      	b.n	800a098 <__libc_init_array+0xc>
 800a0ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0be:	4798      	blx	r3
 800a0c0:	3501      	adds	r5, #1
 800a0c2:	e7f2      	b.n	800a0aa <__libc_init_array+0x1e>
 800a0c4:	0800b500 	.word	0x0800b500
 800a0c8:	0800b500 	.word	0x0800b500
 800a0cc:	0800b500 	.word	0x0800b500
 800a0d0:	0800b504 	.word	0x0800b504

0800a0d4 <malloc>:
 800a0d4:	4b02      	ldr	r3, [pc, #8]	; (800a0e0 <malloc+0xc>)
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	f000 b861 	b.w	800a1a0 <_malloc_r>
 800a0de:	bf00      	nop
 800a0e0:	200001a8 	.word	0x200001a8

0800a0e4 <free>:
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <free+0xc>)
 800a0e6:	4601      	mov	r1, r0
 800a0e8:	6818      	ldr	r0, [r3, #0]
 800a0ea:	f000 b80b 	b.w	800a104 <_free_r>
 800a0ee:	bf00      	nop
 800a0f0:	200001a8 	.word	0x200001a8

0800a0f4 <memset>:
 800a0f4:	4402      	add	r2, r0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d100      	bne.n	800a0fe <memset+0xa>
 800a0fc:	4770      	bx	lr
 800a0fe:	f803 1b01 	strb.w	r1, [r3], #1
 800a102:	e7f9      	b.n	800a0f8 <memset+0x4>

0800a104 <_free_r>:
 800a104:	b538      	push	{r3, r4, r5, lr}
 800a106:	4605      	mov	r5, r0
 800a108:	2900      	cmp	r1, #0
 800a10a:	d045      	beq.n	800a198 <_free_r+0x94>
 800a10c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a110:	1f0c      	subs	r4, r1, #4
 800a112:	2b00      	cmp	r3, #0
 800a114:	bfb8      	it	lt
 800a116:	18e4      	addlt	r4, r4, r3
 800a118:	f000 f8ac 	bl	800a274 <__malloc_lock>
 800a11c:	4a1f      	ldr	r2, [pc, #124]	; (800a19c <_free_r+0x98>)
 800a11e:	6813      	ldr	r3, [r2, #0]
 800a120:	4610      	mov	r0, r2
 800a122:	b933      	cbnz	r3, 800a132 <_free_r+0x2e>
 800a124:	6063      	str	r3, [r4, #4]
 800a126:	6014      	str	r4, [r2, #0]
 800a128:	4628      	mov	r0, r5
 800a12a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a12e:	f000 b8a2 	b.w	800a276 <__malloc_unlock>
 800a132:	42a3      	cmp	r3, r4
 800a134:	d90c      	bls.n	800a150 <_free_r+0x4c>
 800a136:	6821      	ldr	r1, [r4, #0]
 800a138:	1862      	adds	r2, r4, r1
 800a13a:	4293      	cmp	r3, r2
 800a13c:	bf04      	itt	eq
 800a13e:	681a      	ldreq	r2, [r3, #0]
 800a140:	685b      	ldreq	r3, [r3, #4]
 800a142:	6063      	str	r3, [r4, #4]
 800a144:	bf04      	itt	eq
 800a146:	1852      	addeq	r2, r2, r1
 800a148:	6022      	streq	r2, [r4, #0]
 800a14a:	6004      	str	r4, [r0, #0]
 800a14c:	e7ec      	b.n	800a128 <_free_r+0x24>
 800a14e:	4613      	mov	r3, r2
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	b10a      	cbz	r2, 800a158 <_free_r+0x54>
 800a154:	42a2      	cmp	r2, r4
 800a156:	d9fa      	bls.n	800a14e <_free_r+0x4a>
 800a158:	6819      	ldr	r1, [r3, #0]
 800a15a:	1858      	adds	r0, r3, r1
 800a15c:	42a0      	cmp	r0, r4
 800a15e:	d10b      	bne.n	800a178 <_free_r+0x74>
 800a160:	6820      	ldr	r0, [r4, #0]
 800a162:	4401      	add	r1, r0
 800a164:	1858      	adds	r0, r3, r1
 800a166:	4282      	cmp	r2, r0
 800a168:	6019      	str	r1, [r3, #0]
 800a16a:	d1dd      	bne.n	800a128 <_free_r+0x24>
 800a16c:	6810      	ldr	r0, [r2, #0]
 800a16e:	6852      	ldr	r2, [r2, #4]
 800a170:	605a      	str	r2, [r3, #4]
 800a172:	4401      	add	r1, r0
 800a174:	6019      	str	r1, [r3, #0]
 800a176:	e7d7      	b.n	800a128 <_free_r+0x24>
 800a178:	d902      	bls.n	800a180 <_free_r+0x7c>
 800a17a:	230c      	movs	r3, #12
 800a17c:	602b      	str	r3, [r5, #0]
 800a17e:	e7d3      	b.n	800a128 <_free_r+0x24>
 800a180:	6820      	ldr	r0, [r4, #0]
 800a182:	1821      	adds	r1, r4, r0
 800a184:	428a      	cmp	r2, r1
 800a186:	bf04      	itt	eq
 800a188:	6811      	ldreq	r1, [r2, #0]
 800a18a:	6852      	ldreq	r2, [r2, #4]
 800a18c:	6062      	str	r2, [r4, #4]
 800a18e:	bf04      	itt	eq
 800a190:	1809      	addeq	r1, r1, r0
 800a192:	6021      	streq	r1, [r4, #0]
 800a194:	605c      	str	r4, [r3, #4]
 800a196:	e7c7      	b.n	800a128 <_free_r+0x24>
 800a198:	bd38      	pop	{r3, r4, r5, pc}
 800a19a:	bf00      	nop
 800a19c:	20000230 	.word	0x20000230

0800a1a0 <_malloc_r>:
 800a1a0:	b570      	push	{r4, r5, r6, lr}
 800a1a2:	1ccd      	adds	r5, r1, #3
 800a1a4:	f025 0503 	bic.w	r5, r5, #3
 800a1a8:	3508      	adds	r5, #8
 800a1aa:	2d0c      	cmp	r5, #12
 800a1ac:	bf38      	it	cc
 800a1ae:	250c      	movcc	r5, #12
 800a1b0:	2d00      	cmp	r5, #0
 800a1b2:	4606      	mov	r6, r0
 800a1b4:	db01      	blt.n	800a1ba <_malloc_r+0x1a>
 800a1b6:	42a9      	cmp	r1, r5
 800a1b8:	d903      	bls.n	800a1c2 <_malloc_r+0x22>
 800a1ba:	230c      	movs	r3, #12
 800a1bc:	6033      	str	r3, [r6, #0]
 800a1be:	2000      	movs	r0, #0
 800a1c0:	bd70      	pop	{r4, r5, r6, pc}
 800a1c2:	f000 f857 	bl	800a274 <__malloc_lock>
 800a1c6:	4a21      	ldr	r2, [pc, #132]	; (800a24c <_malloc_r+0xac>)
 800a1c8:	6814      	ldr	r4, [r2, #0]
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	b991      	cbnz	r1, 800a1f4 <_malloc_r+0x54>
 800a1ce:	4c20      	ldr	r4, [pc, #128]	; (800a250 <_malloc_r+0xb0>)
 800a1d0:	6823      	ldr	r3, [r4, #0]
 800a1d2:	b91b      	cbnz	r3, 800a1dc <_malloc_r+0x3c>
 800a1d4:	4630      	mov	r0, r6
 800a1d6:	f000 f83d 	bl	800a254 <_sbrk_r>
 800a1da:	6020      	str	r0, [r4, #0]
 800a1dc:	4629      	mov	r1, r5
 800a1de:	4630      	mov	r0, r6
 800a1e0:	f000 f838 	bl	800a254 <_sbrk_r>
 800a1e4:	1c43      	adds	r3, r0, #1
 800a1e6:	d124      	bne.n	800a232 <_malloc_r+0x92>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	6033      	str	r3, [r6, #0]
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f000 f842 	bl	800a276 <__malloc_unlock>
 800a1f2:	e7e4      	b.n	800a1be <_malloc_r+0x1e>
 800a1f4:	680b      	ldr	r3, [r1, #0]
 800a1f6:	1b5b      	subs	r3, r3, r5
 800a1f8:	d418      	bmi.n	800a22c <_malloc_r+0x8c>
 800a1fa:	2b0b      	cmp	r3, #11
 800a1fc:	d90f      	bls.n	800a21e <_malloc_r+0x7e>
 800a1fe:	600b      	str	r3, [r1, #0]
 800a200:	50cd      	str	r5, [r1, r3]
 800a202:	18cc      	adds	r4, r1, r3
 800a204:	4630      	mov	r0, r6
 800a206:	f000 f836 	bl	800a276 <__malloc_unlock>
 800a20a:	f104 000b 	add.w	r0, r4, #11
 800a20e:	1d23      	adds	r3, r4, #4
 800a210:	f020 0007 	bic.w	r0, r0, #7
 800a214:	1ac3      	subs	r3, r0, r3
 800a216:	d0d3      	beq.n	800a1c0 <_malloc_r+0x20>
 800a218:	425a      	negs	r2, r3
 800a21a:	50e2      	str	r2, [r4, r3]
 800a21c:	e7d0      	b.n	800a1c0 <_malloc_r+0x20>
 800a21e:	428c      	cmp	r4, r1
 800a220:	684b      	ldr	r3, [r1, #4]
 800a222:	bf16      	itet	ne
 800a224:	6063      	strne	r3, [r4, #4]
 800a226:	6013      	streq	r3, [r2, #0]
 800a228:	460c      	movne	r4, r1
 800a22a:	e7eb      	b.n	800a204 <_malloc_r+0x64>
 800a22c:	460c      	mov	r4, r1
 800a22e:	6849      	ldr	r1, [r1, #4]
 800a230:	e7cc      	b.n	800a1cc <_malloc_r+0x2c>
 800a232:	1cc4      	adds	r4, r0, #3
 800a234:	f024 0403 	bic.w	r4, r4, #3
 800a238:	42a0      	cmp	r0, r4
 800a23a:	d005      	beq.n	800a248 <_malloc_r+0xa8>
 800a23c:	1a21      	subs	r1, r4, r0
 800a23e:	4630      	mov	r0, r6
 800a240:	f000 f808 	bl	800a254 <_sbrk_r>
 800a244:	3001      	adds	r0, #1
 800a246:	d0cf      	beq.n	800a1e8 <_malloc_r+0x48>
 800a248:	6025      	str	r5, [r4, #0]
 800a24a:	e7db      	b.n	800a204 <_malloc_r+0x64>
 800a24c:	20000230 	.word	0x20000230
 800a250:	20000234 	.word	0x20000234

0800a254 <_sbrk_r>:
 800a254:	b538      	push	{r3, r4, r5, lr}
 800a256:	4c06      	ldr	r4, [pc, #24]	; (800a270 <_sbrk_r+0x1c>)
 800a258:	2300      	movs	r3, #0
 800a25a:	4605      	mov	r5, r0
 800a25c:	4608      	mov	r0, r1
 800a25e:	6023      	str	r3, [r4, #0]
 800a260:	f7f7 fb78 	bl	8001954 <_sbrk>
 800a264:	1c43      	adds	r3, r0, #1
 800a266:	d102      	bne.n	800a26e <_sbrk_r+0x1a>
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	b103      	cbz	r3, 800a26e <_sbrk_r+0x1a>
 800a26c:	602b      	str	r3, [r5, #0]
 800a26e:	bd38      	pop	{r3, r4, r5, pc}
 800a270:	200021bc 	.word	0x200021bc

0800a274 <__malloc_lock>:
 800a274:	4770      	bx	lr

0800a276 <__malloc_unlock>:
 800a276:	4770      	bx	lr

0800a278 <sin>:
 800a278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a27a:	ec51 0b10 	vmov	r0, r1, d0
 800a27e:	4a20      	ldr	r2, [pc, #128]	; (800a300 <sin+0x88>)
 800a280:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a284:	4293      	cmp	r3, r2
 800a286:	dc07      	bgt.n	800a298 <sin+0x20>
 800a288:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800a2f8 <sin+0x80>
 800a28c:	2000      	movs	r0, #0
 800a28e:	f000 fe37 	bl	800af00 <__kernel_sin>
 800a292:	ec51 0b10 	vmov	r0, r1, d0
 800a296:	e007      	b.n	800a2a8 <sin+0x30>
 800a298:	4a1a      	ldr	r2, [pc, #104]	; (800a304 <sin+0x8c>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	dd09      	ble.n	800a2b2 <sin+0x3a>
 800a29e:	ee10 2a10 	vmov	r2, s0
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	f7f5 ffa8 	bl	80001f8 <__aeabi_dsub>
 800a2a8:	ec41 0b10 	vmov	d0, r0, r1
 800a2ac:	b005      	add	sp, #20
 800a2ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2b2:	4668      	mov	r0, sp
 800a2b4:	f000 f828 	bl	800a308 <__ieee754_rem_pio2>
 800a2b8:	f000 0003 	and.w	r0, r0, #3
 800a2bc:	2801      	cmp	r0, #1
 800a2be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2c2:	ed9d 0b00 	vldr	d0, [sp]
 800a2c6:	d004      	beq.n	800a2d2 <sin+0x5a>
 800a2c8:	2802      	cmp	r0, #2
 800a2ca:	d005      	beq.n	800a2d8 <sin+0x60>
 800a2cc:	b970      	cbnz	r0, 800a2ec <sin+0x74>
 800a2ce:	2001      	movs	r0, #1
 800a2d0:	e7dd      	b.n	800a28e <sin+0x16>
 800a2d2:	f000 fa0d 	bl	800a6f0 <__kernel_cos>
 800a2d6:	e7dc      	b.n	800a292 <sin+0x1a>
 800a2d8:	2001      	movs	r0, #1
 800a2da:	f000 fe11 	bl	800af00 <__kernel_sin>
 800a2de:	ec53 2b10 	vmov	r2, r3, d0
 800a2e2:	ee10 0a10 	vmov	r0, s0
 800a2e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a2ea:	e7dd      	b.n	800a2a8 <sin+0x30>
 800a2ec:	f000 fa00 	bl	800a6f0 <__kernel_cos>
 800a2f0:	e7f5      	b.n	800a2de <sin+0x66>
 800a2f2:	bf00      	nop
 800a2f4:	f3af 8000 	nop.w
	...
 800a300:	3fe921fb 	.word	0x3fe921fb
 800a304:	7fefffff 	.word	0x7fefffff

0800a308 <__ieee754_rem_pio2>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	ec57 6b10 	vmov	r6, r7, d0
 800a310:	4bc3      	ldr	r3, [pc, #780]	; (800a620 <__ieee754_rem_pio2+0x318>)
 800a312:	b08d      	sub	sp, #52	; 0x34
 800a314:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a318:	4598      	cmp	r8, r3
 800a31a:	4604      	mov	r4, r0
 800a31c:	9704      	str	r7, [sp, #16]
 800a31e:	dc07      	bgt.n	800a330 <__ieee754_rem_pio2+0x28>
 800a320:	2200      	movs	r2, #0
 800a322:	2300      	movs	r3, #0
 800a324:	ed84 0b00 	vstr	d0, [r4]
 800a328:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a32c:	2500      	movs	r5, #0
 800a32e:	e027      	b.n	800a380 <__ieee754_rem_pio2+0x78>
 800a330:	4bbc      	ldr	r3, [pc, #752]	; (800a624 <__ieee754_rem_pio2+0x31c>)
 800a332:	4598      	cmp	r8, r3
 800a334:	dc75      	bgt.n	800a422 <__ieee754_rem_pio2+0x11a>
 800a336:	9b04      	ldr	r3, [sp, #16]
 800a338:	4dbb      	ldr	r5, [pc, #748]	; (800a628 <__ieee754_rem_pio2+0x320>)
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	ee10 0a10 	vmov	r0, s0
 800a340:	a3a9      	add	r3, pc, #676	; (adr r3, 800a5e8 <__ieee754_rem_pio2+0x2e0>)
 800a342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a346:	4639      	mov	r1, r7
 800a348:	dd36      	ble.n	800a3b8 <__ieee754_rem_pio2+0xb0>
 800a34a:	f7f5 ff55 	bl	80001f8 <__aeabi_dsub>
 800a34e:	45a8      	cmp	r8, r5
 800a350:	4606      	mov	r6, r0
 800a352:	460f      	mov	r7, r1
 800a354:	d018      	beq.n	800a388 <__ieee754_rem_pio2+0x80>
 800a356:	a3a6      	add	r3, pc, #664	; (adr r3, 800a5f0 <__ieee754_rem_pio2+0x2e8>)
 800a358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a35c:	f7f5 ff4c 	bl	80001f8 <__aeabi_dsub>
 800a360:	4602      	mov	r2, r0
 800a362:	460b      	mov	r3, r1
 800a364:	e9c4 2300 	strd	r2, r3, [r4]
 800a368:	4630      	mov	r0, r6
 800a36a:	4639      	mov	r1, r7
 800a36c:	f7f5 ff44 	bl	80001f8 <__aeabi_dsub>
 800a370:	a39f      	add	r3, pc, #636	; (adr r3, 800a5f0 <__ieee754_rem_pio2+0x2e8>)
 800a372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a376:	f7f5 ff3f 	bl	80001f8 <__aeabi_dsub>
 800a37a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a37e:	2501      	movs	r5, #1
 800a380:	4628      	mov	r0, r5
 800a382:	b00d      	add	sp, #52	; 0x34
 800a384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a388:	a39b      	add	r3, pc, #620	; (adr r3, 800a5f8 <__ieee754_rem_pio2+0x2f0>)
 800a38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a38e:	f7f5 ff33 	bl	80001f8 <__aeabi_dsub>
 800a392:	a39b      	add	r3, pc, #620	; (adr r3, 800a600 <__ieee754_rem_pio2+0x2f8>)
 800a394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a398:	4606      	mov	r6, r0
 800a39a:	460f      	mov	r7, r1
 800a39c:	f7f5 ff2c 	bl	80001f8 <__aeabi_dsub>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	460b      	mov	r3, r1
 800a3a4:	e9c4 2300 	strd	r2, r3, [r4]
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	4639      	mov	r1, r7
 800a3ac:	f7f5 ff24 	bl	80001f8 <__aeabi_dsub>
 800a3b0:	a393      	add	r3, pc, #588	; (adr r3, 800a600 <__ieee754_rem_pio2+0x2f8>)
 800a3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3b6:	e7de      	b.n	800a376 <__ieee754_rem_pio2+0x6e>
 800a3b8:	f7f5 ff20 	bl	80001fc <__adddf3>
 800a3bc:	45a8      	cmp	r8, r5
 800a3be:	4606      	mov	r6, r0
 800a3c0:	460f      	mov	r7, r1
 800a3c2:	d016      	beq.n	800a3f2 <__ieee754_rem_pio2+0xea>
 800a3c4:	a38a      	add	r3, pc, #552	; (adr r3, 800a5f0 <__ieee754_rem_pio2+0x2e8>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	f7f5 ff17 	bl	80001fc <__adddf3>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	460b      	mov	r3, r1
 800a3d2:	e9c4 2300 	strd	r2, r3, [r4]
 800a3d6:	4630      	mov	r0, r6
 800a3d8:	4639      	mov	r1, r7
 800a3da:	f7f5 ff0d 	bl	80001f8 <__aeabi_dsub>
 800a3de:	a384      	add	r3, pc, #528	; (adr r3, 800a5f0 <__ieee754_rem_pio2+0x2e8>)
 800a3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e4:	f7f5 ff0a 	bl	80001fc <__adddf3>
 800a3e8:	f04f 35ff 	mov.w	r5, #4294967295
 800a3ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a3f0:	e7c6      	b.n	800a380 <__ieee754_rem_pio2+0x78>
 800a3f2:	a381      	add	r3, pc, #516	; (adr r3, 800a5f8 <__ieee754_rem_pio2+0x2f0>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	f7f5 ff00 	bl	80001fc <__adddf3>
 800a3fc:	a380      	add	r3, pc, #512	; (adr r3, 800a600 <__ieee754_rem_pio2+0x2f8>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	4606      	mov	r6, r0
 800a404:	460f      	mov	r7, r1
 800a406:	f7f5 fef9 	bl	80001fc <__adddf3>
 800a40a:	4602      	mov	r2, r0
 800a40c:	460b      	mov	r3, r1
 800a40e:	e9c4 2300 	strd	r2, r3, [r4]
 800a412:	4630      	mov	r0, r6
 800a414:	4639      	mov	r1, r7
 800a416:	f7f5 feef 	bl	80001f8 <__aeabi_dsub>
 800a41a:	a379      	add	r3, pc, #484	; (adr r3, 800a600 <__ieee754_rem_pio2+0x2f8>)
 800a41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a420:	e7e0      	b.n	800a3e4 <__ieee754_rem_pio2+0xdc>
 800a422:	4b82      	ldr	r3, [pc, #520]	; (800a62c <__ieee754_rem_pio2+0x324>)
 800a424:	4598      	cmp	r8, r3
 800a426:	f300 80d0 	bgt.w	800a5ca <__ieee754_rem_pio2+0x2c2>
 800a42a:	f000 fe23 	bl	800b074 <fabs>
 800a42e:	ec57 6b10 	vmov	r6, r7, d0
 800a432:	ee10 0a10 	vmov	r0, s0
 800a436:	a374      	add	r3, pc, #464	; (adr r3, 800a608 <__ieee754_rem_pio2+0x300>)
 800a438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43c:	4639      	mov	r1, r7
 800a43e:	f7f6 f893 	bl	8000568 <__aeabi_dmul>
 800a442:	2200      	movs	r2, #0
 800a444:	4b7a      	ldr	r3, [pc, #488]	; (800a630 <__ieee754_rem_pio2+0x328>)
 800a446:	f7f5 fed9 	bl	80001fc <__adddf3>
 800a44a:	f7f6 fb27 	bl	8000a9c <__aeabi_d2iz>
 800a44e:	4605      	mov	r5, r0
 800a450:	f7f6 f820 	bl	8000494 <__aeabi_i2d>
 800a454:	a364      	add	r3, pc, #400	; (adr r3, 800a5e8 <__ieee754_rem_pio2+0x2e0>)
 800a456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a45a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a45e:	f7f6 f883 	bl	8000568 <__aeabi_dmul>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4630      	mov	r0, r6
 800a468:	4639      	mov	r1, r7
 800a46a:	f7f5 fec5 	bl	80001f8 <__aeabi_dsub>
 800a46e:	a360      	add	r3, pc, #384	; (adr r3, 800a5f0 <__ieee754_rem_pio2+0x2e8>)
 800a470:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a474:	4682      	mov	sl, r0
 800a476:	468b      	mov	fp, r1
 800a478:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a47c:	f7f6 f874 	bl	8000568 <__aeabi_dmul>
 800a480:	2d1f      	cmp	r5, #31
 800a482:	4606      	mov	r6, r0
 800a484:	460f      	mov	r7, r1
 800a486:	dc0c      	bgt.n	800a4a2 <__ieee754_rem_pio2+0x19a>
 800a488:	1e6a      	subs	r2, r5, #1
 800a48a:	4b6a      	ldr	r3, [pc, #424]	; (800a634 <__ieee754_rem_pio2+0x32c>)
 800a48c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a490:	4543      	cmp	r3, r8
 800a492:	d006      	beq.n	800a4a2 <__ieee754_rem_pio2+0x19a>
 800a494:	4632      	mov	r2, r6
 800a496:	463b      	mov	r3, r7
 800a498:	4650      	mov	r0, sl
 800a49a:	4659      	mov	r1, fp
 800a49c:	f7f5 feac 	bl	80001f8 <__aeabi_dsub>
 800a4a0:	e00e      	b.n	800a4c0 <__ieee754_rem_pio2+0x1b8>
 800a4a2:	4632      	mov	r2, r6
 800a4a4:	463b      	mov	r3, r7
 800a4a6:	4650      	mov	r0, sl
 800a4a8:	4659      	mov	r1, fp
 800a4aa:	f7f5 fea5 	bl	80001f8 <__aeabi_dsub>
 800a4ae:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a4b2:	9305      	str	r3, [sp, #20]
 800a4b4:	9a05      	ldr	r2, [sp, #20]
 800a4b6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	2b10      	cmp	r3, #16
 800a4be:	dc02      	bgt.n	800a4c6 <__ieee754_rem_pio2+0x1be>
 800a4c0:	e9c4 0100 	strd	r0, r1, [r4]
 800a4c4:	e039      	b.n	800a53a <__ieee754_rem_pio2+0x232>
 800a4c6:	a34c      	add	r3, pc, #304	; (adr r3, 800a5f8 <__ieee754_rem_pio2+0x2f0>)
 800a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4d0:	f7f6 f84a 	bl	8000568 <__aeabi_dmul>
 800a4d4:	4606      	mov	r6, r0
 800a4d6:	460f      	mov	r7, r1
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	4650      	mov	r0, sl
 800a4de:	4659      	mov	r1, fp
 800a4e0:	f7f5 fe8a 	bl	80001f8 <__aeabi_dsub>
 800a4e4:	4602      	mov	r2, r0
 800a4e6:	460b      	mov	r3, r1
 800a4e8:	4680      	mov	r8, r0
 800a4ea:	4689      	mov	r9, r1
 800a4ec:	4650      	mov	r0, sl
 800a4ee:	4659      	mov	r1, fp
 800a4f0:	f7f5 fe82 	bl	80001f8 <__aeabi_dsub>
 800a4f4:	4632      	mov	r2, r6
 800a4f6:	463b      	mov	r3, r7
 800a4f8:	f7f5 fe7e 	bl	80001f8 <__aeabi_dsub>
 800a4fc:	a340      	add	r3, pc, #256	; (adr r3, 800a600 <__ieee754_rem_pio2+0x2f8>)
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	4606      	mov	r6, r0
 800a504:	460f      	mov	r7, r1
 800a506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a50a:	f7f6 f82d 	bl	8000568 <__aeabi_dmul>
 800a50e:	4632      	mov	r2, r6
 800a510:	463b      	mov	r3, r7
 800a512:	f7f5 fe71 	bl	80001f8 <__aeabi_dsub>
 800a516:	4602      	mov	r2, r0
 800a518:	460b      	mov	r3, r1
 800a51a:	4606      	mov	r6, r0
 800a51c:	460f      	mov	r7, r1
 800a51e:	4640      	mov	r0, r8
 800a520:	4649      	mov	r1, r9
 800a522:	f7f5 fe69 	bl	80001f8 <__aeabi_dsub>
 800a526:	9a05      	ldr	r2, [sp, #20]
 800a528:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a52c:	1ad3      	subs	r3, r2, r3
 800a52e:	2b31      	cmp	r3, #49	; 0x31
 800a530:	dc20      	bgt.n	800a574 <__ieee754_rem_pio2+0x26c>
 800a532:	e9c4 0100 	strd	r0, r1, [r4]
 800a536:	46c2      	mov	sl, r8
 800a538:	46cb      	mov	fp, r9
 800a53a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a53e:	4650      	mov	r0, sl
 800a540:	4642      	mov	r2, r8
 800a542:	464b      	mov	r3, r9
 800a544:	4659      	mov	r1, fp
 800a546:	f7f5 fe57 	bl	80001f8 <__aeabi_dsub>
 800a54a:	463b      	mov	r3, r7
 800a54c:	4632      	mov	r2, r6
 800a54e:	f7f5 fe53 	bl	80001f8 <__aeabi_dsub>
 800a552:	9b04      	ldr	r3, [sp, #16]
 800a554:	2b00      	cmp	r3, #0
 800a556:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a55a:	f6bf af11 	bge.w	800a380 <__ieee754_rem_pio2+0x78>
 800a55e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a562:	6063      	str	r3, [r4, #4]
 800a564:	f8c4 8000 	str.w	r8, [r4]
 800a568:	60a0      	str	r0, [r4, #8]
 800a56a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a56e:	60e3      	str	r3, [r4, #12]
 800a570:	426d      	negs	r5, r5
 800a572:	e705      	b.n	800a380 <__ieee754_rem_pio2+0x78>
 800a574:	a326      	add	r3, pc, #152	; (adr r3, 800a610 <__ieee754_rem_pio2+0x308>)
 800a576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a57a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a57e:	f7f5 fff3 	bl	8000568 <__aeabi_dmul>
 800a582:	4606      	mov	r6, r0
 800a584:	460f      	mov	r7, r1
 800a586:	4602      	mov	r2, r0
 800a588:	460b      	mov	r3, r1
 800a58a:	4640      	mov	r0, r8
 800a58c:	4649      	mov	r1, r9
 800a58e:	f7f5 fe33 	bl	80001f8 <__aeabi_dsub>
 800a592:	4602      	mov	r2, r0
 800a594:	460b      	mov	r3, r1
 800a596:	4682      	mov	sl, r0
 800a598:	468b      	mov	fp, r1
 800a59a:	4640      	mov	r0, r8
 800a59c:	4649      	mov	r1, r9
 800a59e:	f7f5 fe2b 	bl	80001f8 <__aeabi_dsub>
 800a5a2:	4632      	mov	r2, r6
 800a5a4:	463b      	mov	r3, r7
 800a5a6:	f7f5 fe27 	bl	80001f8 <__aeabi_dsub>
 800a5aa:	a31b      	add	r3, pc, #108	; (adr r3, 800a618 <__ieee754_rem_pio2+0x310>)
 800a5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5b0:	4606      	mov	r6, r0
 800a5b2:	460f      	mov	r7, r1
 800a5b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b8:	f7f5 ffd6 	bl	8000568 <__aeabi_dmul>
 800a5bc:	4632      	mov	r2, r6
 800a5be:	463b      	mov	r3, r7
 800a5c0:	f7f5 fe1a 	bl	80001f8 <__aeabi_dsub>
 800a5c4:	4606      	mov	r6, r0
 800a5c6:	460f      	mov	r7, r1
 800a5c8:	e764      	b.n	800a494 <__ieee754_rem_pio2+0x18c>
 800a5ca:	4b1b      	ldr	r3, [pc, #108]	; (800a638 <__ieee754_rem_pio2+0x330>)
 800a5cc:	4598      	cmp	r8, r3
 800a5ce:	dd35      	ble.n	800a63c <__ieee754_rem_pio2+0x334>
 800a5d0:	ee10 2a10 	vmov	r2, s0
 800a5d4:	463b      	mov	r3, r7
 800a5d6:	4630      	mov	r0, r6
 800a5d8:	4639      	mov	r1, r7
 800a5da:	f7f5 fe0d 	bl	80001f8 <__aeabi_dsub>
 800a5de:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5e2:	e9c4 0100 	strd	r0, r1, [r4]
 800a5e6:	e6a1      	b.n	800a32c <__ieee754_rem_pio2+0x24>
 800a5e8:	54400000 	.word	0x54400000
 800a5ec:	3ff921fb 	.word	0x3ff921fb
 800a5f0:	1a626331 	.word	0x1a626331
 800a5f4:	3dd0b461 	.word	0x3dd0b461
 800a5f8:	1a600000 	.word	0x1a600000
 800a5fc:	3dd0b461 	.word	0x3dd0b461
 800a600:	2e037073 	.word	0x2e037073
 800a604:	3ba3198a 	.word	0x3ba3198a
 800a608:	6dc9c883 	.word	0x6dc9c883
 800a60c:	3fe45f30 	.word	0x3fe45f30
 800a610:	2e000000 	.word	0x2e000000
 800a614:	3ba3198a 	.word	0x3ba3198a
 800a618:	252049c1 	.word	0x252049c1
 800a61c:	397b839a 	.word	0x397b839a
 800a620:	3fe921fb 	.word	0x3fe921fb
 800a624:	4002d97b 	.word	0x4002d97b
 800a628:	3ff921fb 	.word	0x3ff921fb
 800a62c:	413921fb 	.word	0x413921fb
 800a630:	3fe00000 	.word	0x3fe00000
 800a634:	0800b320 	.word	0x0800b320
 800a638:	7fefffff 	.word	0x7fefffff
 800a63c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a640:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a644:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a648:	4630      	mov	r0, r6
 800a64a:	460f      	mov	r7, r1
 800a64c:	f7f6 fa26 	bl	8000a9c <__aeabi_d2iz>
 800a650:	f7f5 ff20 	bl	8000494 <__aeabi_i2d>
 800a654:	4602      	mov	r2, r0
 800a656:	460b      	mov	r3, r1
 800a658:	4630      	mov	r0, r6
 800a65a:	4639      	mov	r1, r7
 800a65c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a660:	f7f5 fdca 	bl	80001f8 <__aeabi_dsub>
 800a664:	2200      	movs	r2, #0
 800a666:	4b1f      	ldr	r3, [pc, #124]	; (800a6e4 <__ieee754_rem_pio2+0x3dc>)
 800a668:	f7f5 ff7e 	bl	8000568 <__aeabi_dmul>
 800a66c:	460f      	mov	r7, r1
 800a66e:	4606      	mov	r6, r0
 800a670:	f7f6 fa14 	bl	8000a9c <__aeabi_d2iz>
 800a674:	f7f5 ff0e 	bl	8000494 <__aeabi_i2d>
 800a678:	4602      	mov	r2, r0
 800a67a:	460b      	mov	r3, r1
 800a67c:	4630      	mov	r0, r6
 800a67e:	4639      	mov	r1, r7
 800a680:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a684:	f7f5 fdb8 	bl	80001f8 <__aeabi_dsub>
 800a688:	2200      	movs	r2, #0
 800a68a:	4b16      	ldr	r3, [pc, #88]	; (800a6e4 <__ieee754_rem_pio2+0x3dc>)
 800a68c:	f7f5 ff6c 	bl	8000568 <__aeabi_dmul>
 800a690:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a694:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a698:	f04f 0803 	mov.w	r8, #3
 800a69c:	2600      	movs	r6, #0
 800a69e:	2700      	movs	r7, #0
 800a6a0:	4632      	mov	r2, r6
 800a6a2:	463b      	mov	r3, r7
 800a6a4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a6a8:	f108 3aff 	add.w	sl, r8, #4294967295
 800a6ac:	f7f6 f9c4 	bl	8000a38 <__aeabi_dcmpeq>
 800a6b0:	b9b0      	cbnz	r0, 800a6e0 <__ieee754_rem_pio2+0x3d8>
 800a6b2:	4b0d      	ldr	r3, [pc, #52]	; (800a6e8 <__ieee754_rem_pio2+0x3e0>)
 800a6b4:	9301      	str	r3, [sp, #4]
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	4643      	mov	r3, r8
 800a6be:	4621      	mov	r1, r4
 800a6c0:	a806      	add	r0, sp, #24
 800a6c2:	f000 f8dd 	bl	800a880 <__kernel_rem_pio2>
 800a6c6:	9b04      	ldr	r3, [sp, #16]
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	4605      	mov	r5, r0
 800a6cc:	f6bf ae58 	bge.w	800a380 <__ieee754_rem_pio2+0x78>
 800a6d0:	6863      	ldr	r3, [r4, #4]
 800a6d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6d6:	6063      	str	r3, [r4, #4]
 800a6d8:	68e3      	ldr	r3, [r4, #12]
 800a6da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6de:	e746      	b.n	800a56e <__ieee754_rem_pio2+0x266>
 800a6e0:	46d0      	mov	r8, sl
 800a6e2:	e7dd      	b.n	800a6a0 <__ieee754_rem_pio2+0x398>
 800a6e4:	41700000 	.word	0x41700000
 800a6e8:	0800b3a0 	.word	0x0800b3a0
 800a6ec:	00000000 	.word	0x00000000

0800a6f0 <__kernel_cos>:
 800a6f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6f4:	ec59 8b10 	vmov	r8, r9, d0
 800a6f8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a6fc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a700:	ed2d 8b02 	vpush	{d8}
 800a704:	eeb0 8a41 	vmov.f32	s16, s2
 800a708:	eef0 8a61 	vmov.f32	s17, s3
 800a70c:	da07      	bge.n	800a71e <__kernel_cos+0x2e>
 800a70e:	ee10 0a10 	vmov	r0, s0
 800a712:	4649      	mov	r1, r9
 800a714:	f7f6 f9c2 	bl	8000a9c <__aeabi_d2iz>
 800a718:	2800      	cmp	r0, #0
 800a71a:	f000 8089 	beq.w	800a830 <__kernel_cos+0x140>
 800a71e:	4642      	mov	r2, r8
 800a720:	464b      	mov	r3, r9
 800a722:	4640      	mov	r0, r8
 800a724:	4649      	mov	r1, r9
 800a726:	f7f5 ff1f 	bl	8000568 <__aeabi_dmul>
 800a72a:	2200      	movs	r2, #0
 800a72c:	4b4e      	ldr	r3, [pc, #312]	; (800a868 <__kernel_cos+0x178>)
 800a72e:	4604      	mov	r4, r0
 800a730:	460d      	mov	r5, r1
 800a732:	f7f5 ff19 	bl	8000568 <__aeabi_dmul>
 800a736:	a340      	add	r3, pc, #256	; (adr r3, 800a838 <__kernel_cos+0x148>)
 800a738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73c:	4682      	mov	sl, r0
 800a73e:	468b      	mov	fp, r1
 800a740:	4620      	mov	r0, r4
 800a742:	4629      	mov	r1, r5
 800a744:	f7f5 ff10 	bl	8000568 <__aeabi_dmul>
 800a748:	a33d      	add	r3, pc, #244	; (adr r3, 800a840 <__kernel_cos+0x150>)
 800a74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a74e:	f7f5 fd55 	bl	80001fc <__adddf3>
 800a752:	4622      	mov	r2, r4
 800a754:	462b      	mov	r3, r5
 800a756:	f7f5 ff07 	bl	8000568 <__aeabi_dmul>
 800a75a:	a33b      	add	r3, pc, #236	; (adr r3, 800a848 <__kernel_cos+0x158>)
 800a75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a760:	f7f5 fd4a 	bl	80001f8 <__aeabi_dsub>
 800a764:	4622      	mov	r2, r4
 800a766:	462b      	mov	r3, r5
 800a768:	f7f5 fefe 	bl	8000568 <__aeabi_dmul>
 800a76c:	a338      	add	r3, pc, #224	; (adr r3, 800a850 <__kernel_cos+0x160>)
 800a76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a772:	f7f5 fd43 	bl	80001fc <__adddf3>
 800a776:	4622      	mov	r2, r4
 800a778:	462b      	mov	r3, r5
 800a77a:	f7f5 fef5 	bl	8000568 <__aeabi_dmul>
 800a77e:	a336      	add	r3, pc, #216	; (adr r3, 800a858 <__kernel_cos+0x168>)
 800a780:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a784:	f7f5 fd38 	bl	80001f8 <__aeabi_dsub>
 800a788:	4622      	mov	r2, r4
 800a78a:	462b      	mov	r3, r5
 800a78c:	f7f5 feec 	bl	8000568 <__aeabi_dmul>
 800a790:	a333      	add	r3, pc, #204	; (adr r3, 800a860 <__kernel_cos+0x170>)
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f7f5 fd31 	bl	80001fc <__adddf3>
 800a79a:	4622      	mov	r2, r4
 800a79c:	462b      	mov	r3, r5
 800a79e:	f7f5 fee3 	bl	8000568 <__aeabi_dmul>
 800a7a2:	4622      	mov	r2, r4
 800a7a4:	462b      	mov	r3, r5
 800a7a6:	f7f5 fedf 	bl	8000568 <__aeabi_dmul>
 800a7aa:	ec53 2b18 	vmov	r2, r3, d8
 800a7ae:	4604      	mov	r4, r0
 800a7b0:	460d      	mov	r5, r1
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	4649      	mov	r1, r9
 800a7b6:	f7f5 fed7 	bl	8000568 <__aeabi_dmul>
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	4602      	mov	r2, r0
 800a7be:	4629      	mov	r1, r5
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f7f5 fd19 	bl	80001f8 <__aeabi_dsub>
 800a7c6:	4b29      	ldr	r3, [pc, #164]	; (800a86c <__kernel_cos+0x17c>)
 800a7c8:	429e      	cmp	r6, r3
 800a7ca:	4680      	mov	r8, r0
 800a7cc:	4689      	mov	r9, r1
 800a7ce:	dc11      	bgt.n	800a7f4 <__kernel_cos+0x104>
 800a7d0:	4602      	mov	r2, r0
 800a7d2:	460b      	mov	r3, r1
 800a7d4:	4650      	mov	r0, sl
 800a7d6:	4659      	mov	r1, fp
 800a7d8:	f7f5 fd0e 	bl	80001f8 <__aeabi_dsub>
 800a7dc:	460b      	mov	r3, r1
 800a7de:	4924      	ldr	r1, [pc, #144]	; (800a870 <__kernel_cos+0x180>)
 800a7e0:	4602      	mov	r2, r0
 800a7e2:	2000      	movs	r0, #0
 800a7e4:	f7f5 fd08 	bl	80001f8 <__aeabi_dsub>
 800a7e8:	ecbd 8b02 	vpop	{d8}
 800a7ec:	ec41 0b10 	vmov	d0, r0, r1
 800a7f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7f4:	4b1f      	ldr	r3, [pc, #124]	; (800a874 <__kernel_cos+0x184>)
 800a7f6:	491e      	ldr	r1, [pc, #120]	; (800a870 <__kernel_cos+0x180>)
 800a7f8:	429e      	cmp	r6, r3
 800a7fa:	bfcc      	ite	gt
 800a7fc:	4d1e      	ldrgt	r5, [pc, #120]	; (800a878 <__kernel_cos+0x188>)
 800a7fe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a802:	2400      	movs	r4, #0
 800a804:	4622      	mov	r2, r4
 800a806:	462b      	mov	r3, r5
 800a808:	2000      	movs	r0, #0
 800a80a:	f7f5 fcf5 	bl	80001f8 <__aeabi_dsub>
 800a80e:	4622      	mov	r2, r4
 800a810:	4606      	mov	r6, r0
 800a812:	460f      	mov	r7, r1
 800a814:	462b      	mov	r3, r5
 800a816:	4650      	mov	r0, sl
 800a818:	4659      	mov	r1, fp
 800a81a:	f7f5 fced 	bl	80001f8 <__aeabi_dsub>
 800a81e:	4642      	mov	r2, r8
 800a820:	464b      	mov	r3, r9
 800a822:	f7f5 fce9 	bl	80001f8 <__aeabi_dsub>
 800a826:	4602      	mov	r2, r0
 800a828:	460b      	mov	r3, r1
 800a82a:	4630      	mov	r0, r6
 800a82c:	4639      	mov	r1, r7
 800a82e:	e7d9      	b.n	800a7e4 <__kernel_cos+0xf4>
 800a830:	2000      	movs	r0, #0
 800a832:	490f      	ldr	r1, [pc, #60]	; (800a870 <__kernel_cos+0x180>)
 800a834:	e7d8      	b.n	800a7e8 <__kernel_cos+0xf8>
 800a836:	bf00      	nop
 800a838:	be8838d4 	.word	0xbe8838d4
 800a83c:	bda8fae9 	.word	0xbda8fae9
 800a840:	bdb4b1c4 	.word	0xbdb4b1c4
 800a844:	3e21ee9e 	.word	0x3e21ee9e
 800a848:	809c52ad 	.word	0x809c52ad
 800a84c:	3e927e4f 	.word	0x3e927e4f
 800a850:	19cb1590 	.word	0x19cb1590
 800a854:	3efa01a0 	.word	0x3efa01a0
 800a858:	16c15177 	.word	0x16c15177
 800a85c:	3f56c16c 	.word	0x3f56c16c
 800a860:	5555554c 	.word	0x5555554c
 800a864:	3fa55555 	.word	0x3fa55555
 800a868:	3fe00000 	.word	0x3fe00000
 800a86c:	3fd33332 	.word	0x3fd33332
 800a870:	3ff00000 	.word	0x3ff00000
 800a874:	3fe90000 	.word	0x3fe90000
 800a878:	3fd20000 	.word	0x3fd20000
 800a87c:	00000000 	.word	0x00000000

0800a880 <__kernel_rem_pio2>:
 800a880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a884:	ed2d 8b02 	vpush	{d8}
 800a888:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a88c:	1ed4      	subs	r4, r2, #3
 800a88e:	9308      	str	r3, [sp, #32]
 800a890:	9101      	str	r1, [sp, #4]
 800a892:	4bc5      	ldr	r3, [pc, #788]	; (800aba8 <__kernel_rem_pio2+0x328>)
 800a894:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a896:	9009      	str	r0, [sp, #36]	; 0x24
 800a898:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	9b08      	ldr	r3, [sp, #32]
 800a8a0:	3b01      	subs	r3, #1
 800a8a2:	9307      	str	r3, [sp, #28]
 800a8a4:	2318      	movs	r3, #24
 800a8a6:	fb94 f4f3 	sdiv	r4, r4, r3
 800a8aa:	f06f 0317 	mvn.w	r3, #23
 800a8ae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a8b2:	fb04 3303 	mla	r3, r4, r3, r3
 800a8b6:	eb03 0a02 	add.w	sl, r3, r2
 800a8ba:	9b04      	ldr	r3, [sp, #16]
 800a8bc:	9a07      	ldr	r2, [sp, #28]
 800a8be:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ab98 <__kernel_rem_pio2+0x318>
 800a8c2:	eb03 0802 	add.w	r8, r3, r2
 800a8c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a8c8:	1aa7      	subs	r7, r4, r2
 800a8ca:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a8ce:	ae22      	add	r6, sp, #136	; 0x88
 800a8d0:	2500      	movs	r5, #0
 800a8d2:	4545      	cmp	r5, r8
 800a8d4:	dd13      	ble.n	800a8fe <__kernel_rem_pio2+0x7e>
 800a8d6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800ab98 <__kernel_rem_pio2+0x318>
 800a8da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a8de:	2600      	movs	r6, #0
 800a8e0:	9b04      	ldr	r3, [sp, #16]
 800a8e2:	429e      	cmp	r6, r3
 800a8e4:	dc32      	bgt.n	800a94c <__kernel_rem_pio2+0xcc>
 800a8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e8:	9302      	str	r3, [sp, #8]
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	199d      	adds	r5, r3, r6
 800a8ee:	ab22      	add	r3, sp, #136	; 0x88
 800a8f0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a8f4:	9306      	str	r3, [sp, #24]
 800a8f6:	ec59 8b18 	vmov	r8, r9, d8
 800a8fa:	2700      	movs	r7, #0
 800a8fc:	e01f      	b.n	800a93e <__kernel_rem_pio2+0xbe>
 800a8fe:	42ef      	cmn	r7, r5
 800a900:	d407      	bmi.n	800a912 <__kernel_rem_pio2+0x92>
 800a902:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a906:	f7f5 fdc5 	bl	8000494 <__aeabi_i2d>
 800a90a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a90e:	3501      	adds	r5, #1
 800a910:	e7df      	b.n	800a8d2 <__kernel_rem_pio2+0x52>
 800a912:	ec51 0b18 	vmov	r0, r1, d8
 800a916:	e7f8      	b.n	800a90a <__kernel_rem_pio2+0x8a>
 800a918:	9906      	ldr	r1, [sp, #24]
 800a91a:	9d02      	ldr	r5, [sp, #8]
 800a91c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a920:	9106      	str	r1, [sp, #24]
 800a922:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a926:	9502      	str	r5, [sp, #8]
 800a928:	f7f5 fe1e 	bl	8000568 <__aeabi_dmul>
 800a92c:	4602      	mov	r2, r0
 800a92e:	460b      	mov	r3, r1
 800a930:	4640      	mov	r0, r8
 800a932:	4649      	mov	r1, r9
 800a934:	f7f5 fc62 	bl	80001fc <__adddf3>
 800a938:	3701      	adds	r7, #1
 800a93a:	4680      	mov	r8, r0
 800a93c:	4689      	mov	r9, r1
 800a93e:	9b07      	ldr	r3, [sp, #28]
 800a940:	429f      	cmp	r7, r3
 800a942:	dde9      	ble.n	800a918 <__kernel_rem_pio2+0x98>
 800a944:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a948:	3601      	adds	r6, #1
 800a94a:	e7c9      	b.n	800a8e0 <__kernel_rem_pio2+0x60>
 800a94c:	9b04      	ldr	r3, [sp, #16]
 800a94e:	aa0e      	add	r2, sp, #56	; 0x38
 800a950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a954:	930c      	str	r3, [sp, #48]	; 0x30
 800a956:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a958:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a95c:	9c04      	ldr	r4, [sp, #16]
 800a95e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a960:	ab9a      	add	r3, sp, #616	; 0x268
 800a962:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a966:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a96a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a96e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a972:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a976:	ab9a      	add	r3, sp, #616	; 0x268
 800a978:	445b      	add	r3, fp
 800a97a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a97e:	2500      	movs	r5, #0
 800a980:	1b63      	subs	r3, r4, r5
 800a982:	2b00      	cmp	r3, #0
 800a984:	dc78      	bgt.n	800aa78 <__kernel_rem_pio2+0x1f8>
 800a986:	4650      	mov	r0, sl
 800a988:	ec49 8b10 	vmov	d0, r8, r9
 800a98c:	f000 fc00 	bl	800b190 <scalbn>
 800a990:	ec57 6b10 	vmov	r6, r7, d0
 800a994:	2200      	movs	r2, #0
 800a996:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a99a:	ee10 0a10 	vmov	r0, s0
 800a99e:	4639      	mov	r1, r7
 800a9a0:	f7f5 fde2 	bl	8000568 <__aeabi_dmul>
 800a9a4:	ec41 0b10 	vmov	d0, r0, r1
 800a9a8:	f000 fb6e 	bl	800b088 <floor>
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	ec51 0b10 	vmov	r0, r1, d0
 800a9b2:	4b7e      	ldr	r3, [pc, #504]	; (800abac <__kernel_rem_pio2+0x32c>)
 800a9b4:	f7f5 fdd8 	bl	8000568 <__aeabi_dmul>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	460b      	mov	r3, r1
 800a9bc:	4630      	mov	r0, r6
 800a9be:	4639      	mov	r1, r7
 800a9c0:	f7f5 fc1a 	bl	80001f8 <__aeabi_dsub>
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	f7f6 f868 	bl	8000a9c <__aeabi_d2iz>
 800a9cc:	9006      	str	r0, [sp, #24]
 800a9ce:	f7f5 fd61 	bl	8000494 <__aeabi_i2d>
 800a9d2:	4602      	mov	r2, r0
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	4630      	mov	r0, r6
 800a9d8:	4639      	mov	r1, r7
 800a9da:	f7f5 fc0d 	bl	80001f8 <__aeabi_dsub>
 800a9de:	f1ba 0f00 	cmp.w	sl, #0
 800a9e2:	4606      	mov	r6, r0
 800a9e4:	460f      	mov	r7, r1
 800a9e6:	dd6c      	ble.n	800aac2 <__kernel_rem_pio2+0x242>
 800a9e8:	1e62      	subs	r2, r4, #1
 800a9ea:	ab0e      	add	r3, sp, #56	; 0x38
 800a9ec:	f1ca 0118 	rsb	r1, sl, #24
 800a9f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a9f4:	9d06      	ldr	r5, [sp, #24]
 800a9f6:	fa40 f301 	asr.w	r3, r0, r1
 800a9fa:	441d      	add	r5, r3
 800a9fc:	408b      	lsls	r3, r1
 800a9fe:	1ac0      	subs	r0, r0, r3
 800aa00:	ab0e      	add	r3, sp, #56	; 0x38
 800aa02:	9506      	str	r5, [sp, #24]
 800aa04:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800aa08:	f1ca 0317 	rsb	r3, sl, #23
 800aa0c:	fa40 f303 	asr.w	r3, r0, r3
 800aa10:	9302      	str	r3, [sp, #8]
 800aa12:	9b02      	ldr	r3, [sp, #8]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	dd62      	ble.n	800aade <__kernel_rem_pio2+0x25e>
 800aa18:	9b06      	ldr	r3, [sp, #24]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	3301      	adds	r3, #1
 800aa1e:	9306      	str	r3, [sp, #24]
 800aa20:	4615      	mov	r5, r2
 800aa22:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800aa26:	4294      	cmp	r4, r2
 800aa28:	f300 8095 	bgt.w	800ab56 <__kernel_rem_pio2+0x2d6>
 800aa2c:	f1ba 0f00 	cmp.w	sl, #0
 800aa30:	dd07      	ble.n	800aa42 <__kernel_rem_pio2+0x1c2>
 800aa32:	f1ba 0f01 	cmp.w	sl, #1
 800aa36:	f000 80a2 	beq.w	800ab7e <__kernel_rem_pio2+0x2fe>
 800aa3a:	f1ba 0f02 	cmp.w	sl, #2
 800aa3e:	f000 80c1 	beq.w	800abc4 <__kernel_rem_pio2+0x344>
 800aa42:	9b02      	ldr	r3, [sp, #8]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	d14a      	bne.n	800aade <__kernel_rem_pio2+0x25e>
 800aa48:	4632      	mov	r2, r6
 800aa4a:	463b      	mov	r3, r7
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	4958      	ldr	r1, [pc, #352]	; (800abb0 <__kernel_rem_pio2+0x330>)
 800aa50:	f7f5 fbd2 	bl	80001f8 <__aeabi_dsub>
 800aa54:	4606      	mov	r6, r0
 800aa56:	460f      	mov	r7, r1
 800aa58:	2d00      	cmp	r5, #0
 800aa5a:	d040      	beq.n	800aade <__kernel_rem_pio2+0x25e>
 800aa5c:	4650      	mov	r0, sl
 800aa5e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800aba0 <__kernel_rem_pio2+0x320>
 800aa62:	f000 fb95 	bl	800b190 <scalbn>
 800aa66:	4630      	mov	r0, r6
 800aa68:	4639      	mov	r1, r7
 800aa6a:	ec53 2b10 	vmov	r2, r3, d0
 800aa6e:	f7f5 fbc3 	bl	80001f8 <__aeabi_dsub>
 800aa72:	4606      	mov	r6, r0
 800aa74:	460f      	mov	r7, r1
 800aa76:	e032      	b.n	800aade <__kernel_rem_pio2+0x25e>
 800aa78:	2200      	movs	r2, #0
 800aa7a:	4b4e      	ldr	r3, [pc, #312]	; (800abb4 <__kernel_rem_pio2+0x334>)
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	4649      	mov	r1, r9
 800aa80:	f7f5 fd72 	bl	8000568 <__aeabi_dmul>
 800aa84:	f7f6 f80a 	bl	8000a9c <__aeabi_d2iz>
 800aa88:	f7f5 fd04 	bl	8000494 <__aeabi_i2d>
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	4b4a      	ldr	r3, [pc, #296]	; (800abb8 <__kernel_rem_pio2+0x338>)
 800aa90:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa94:	f7f5 fd68 	bl	8000568 <__aeabi_dmul>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	460b      	mov	r3, r1
 800aa9c:	4640      	mov	r0, r8
 800aa9e:	4649      	mov	r1, r9
 800aaa0:	f7f5 fbaa 	bl	80001f8 <__aeabi_dsub>
 800aaa4:	f7f5 fffa 	bl	8000a9c <__aeabi_d2iz>
 800aaa8:	ab0e      	add	r3, sp, #56	; 0x38
 800aaaa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800aaae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800aab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aab6:	f7f5 fba1 	bl	80001fc <__adddf3>
 800aaba:	3501      	adds	r5, #1
 800aabc:	4680      	mov	r8, r0
 800aabe:	4689      	mov	r9, r1
 800aac0:	e75e      	b.n	800a980 <__kernel_rem_pio2+0x100>
 800aac2:	d105      	bne.n	800aad0 <__kernel_rem_pio2+0x250>
 800aac4:	1e63      	subs	r3, r4, #1
 800aac6:	aa0e      	add	r2, sp, #56	; 0x38
 800aac8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aacc:	15c3      	asrs	r3, r0, #23
 800aace:	e79f      	b.n	800aa10 <__kernel_rem_pio2+0x190>
 800aad0:	2200      	movs	r2, #0
 800aad2:	4b3a      	ldr	r3, [pc, #232]	; (800abbc <__kernel_rem_pio2+0x33c>)
 800aad4:	f7f5 ffce 	bl	8000a74 <__aeabi_dcmpge>
 800aad8:	2800      	cmp	r0, #0
 800aada:	d139      	bne.n	800ab50 <__kernel_rem_pio2+0x2d0>
 800aadc:	9002      	str	r0, [sp, #8]
 800aade:	2200      	movs	r2, #0
 800aae0:	2300      	movs	r3, #0
 800aae2:	4630      	mov	r0, r6
 800aae4:	4639      	mov	r1, r7
 800aae6:	f7f5 ffa7 	bl	8000a38 <__aeabi_dcmpeq>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	f000 80c7 	beq.w	800ac7e <__kernel_rem_pio2+0x3fe>
 800aaf0:	1e65      	subs	r5, r4, #1
 800aaf2:	462b      	mov	r3, r5
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	9904      	ldr	r1, [sp, #16]
 800aaf8:	428b      	cmp	r3, r1
 800aafa:	da6a      	bge.n	800abd2 <__kernel_rem_pio2+0x352>
 800aafc:	2a00      	cmp	r2, #0
 800aafe:	f000 8088 	beq.w	800ac12 <__kernel_rem_pio2+0x392>
 800ab02:	ab0e      	add	r3, sp, #56	; 0x38
 800ab04:	f1aa 0a18 	sub.w	sl, sl, #24
 800ab08:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	f000 80b4 	beq.w	800ac7a <__kernel_rem_pio2+0x3fa>
 800ab12:	4650      	mov	r0, sl
 800ab14:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800aba0 <__kernel_rem_pio2+0x320>
 800ab18:	f000 fb3a 	bl	800b190 <scalbn>
 800ab1c:	00ec      	lsls	r4, r5, #3
 800ab1e:	ab72      	add	r3, sp, #456	; 0x1c8
 800ab20:	191e      	adds	r6, r3, r4
 800ab22:	ec59 8b10 	vmov	r8, r9, d0
 800ab26:	f106 0a08 	add.w	sl, r6, #8
 800ab2a:	462f      	mov	r7, r5
 800ab2c:	2f00      	cmp	r7, #0
 800ab2e:	f280 80df 	bge.w	800acf0 <__kernel_rem_pio2+0x470>
 800ab32:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800ab98 <__kernel_rem_pio2+0x318>
 800ab36:	f04f 0a00 	mov.w	sl, #0
 800ab3a:	eba5 030a 	sub.w	r3, r5, sl
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	f2c0 810a 	blt.w	800ad58 <__kernel_rem_pio2+0x4d8>
 800ab44:	f8df b078 	ldr.w	fp, [pc, #120]	; 800abc0 <__kernel_rem_pio2+0x340>
 800ab48:	ec59 8b18 	vmov	r8, r9, d8
 800ab4c:	2700      	movs	r7, #0
 800ab4e:	e0f5      	b.n	800ad3c <__kernel_rem_pio2+0x4bc>
 800ab50:	2302      	movs	r3, #2
 800ab52:	9302      	str	r3, [sp, #8]
 800ab54:	e760      	b.n	800aa18 <__kernel_rem_pio2+0x198>
 800ab56:	ab0e      	add	r3, sp, #56	; 0x38
 800ab58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab5c:	b94d      	cbnz	r5, 800ab72 <__kernel_rem_pio2+0x2f2>
 800ab5e:	b12b      	cbz	r3, 800ab6c <__kernel_rem_pio2+0x2ec>
 800ab60:	a80e      	add	r0, sp, #56	; 0x38
 800ab62:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ab66:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ab6a:	2301      	movs	r3, #1
 800ab6c:	3201      	adds	r2, #1
 800ab6e:	461d      	mov	r5, r3
 800ab70:	e759      	b.n	800aa26 <__kernel_rem_pio2+0x1a6>
 800ab72:	a80e      	add	r0, sp, #56	; 0x38
 800ab74:	1acb      	subs	r3, r1, r3
 800ab76:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ab7a:	462b      	mov	r3, r5
 800ab7c:	e7f6      	b.n	800ab6c <__kernel_rem_pio2+0x2ec>
 800ab7e:	1e62      	subs	r2, r4, #1
 800ab80:	ab0e      	add	r3, sp, #56	; 0x38
 800ab82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab86:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab8a:	a90e      	add	r1, sp, #56	; 0x38
 800ab8c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ab90:	e757      	b.n	800aa42 <__kernel_rem_pio2+0x1c2>
 800ab92:	bf00      	nop
 800ab94:	f3af 8000 	nop.w
	...
 800aba4:	3ff00000 	.word	0x3ff00000
 800aba8:	0800b4e8 	.word	0x0800b4e8
 800abac:	40200000 	.word	0x40200000
 800abb0:	3ff00000 	.word	0x3ff00000
 800abb4:	3e700000 	.word	0x3e700000
 800abb8:	41700000 	.word	0x41700000
 800abbc:	3fe00000 	.word	0x3fe00000
 800abc0:	0800b4a8 	.word	0x0800b4a8
 800abc4:	1e62      	subs	r2, r4, #1
 800abc6:	ab0e      	add	r3, sp, #56	; 0x38
 800abc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abcc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800abd0:	e7db      	b.n	800ab8a <__kernel_rem_pio2+0x30a>
 800abd2:	a90e      	add	r1, sp, #56	; 0x38
 800abd4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800abd8:	3b01      	subs	r3, #1
 800abda:	430a      	orrs	r2, r1
 800abdc:	e78b      	b.n	800aaf6 <__kernel_rem_pio2+0x276>
 800abde:	3301      	adds	r3, #1
 800abe0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800abe4:	2900      	cmp	r1, #0
 800abe6:	d0fa      	beq.n	800abde <__kernel_rem_pio2+0x35e>
 800abe8:	9a08      	ldr	r2, [sp, #32]
 800abea:	4422      	add	r2, r4
 800abec:	00d2      	lsls	r2, r2, #3
 800abee:	a922      	add	r1, sp, #136	; 0x88
 800abf0:	18e3      	adds	r3, r4, r3
 800abf2:	9206      	str	r2, [sp, #24]
 800abf4:	440a      	add	r2, r1
 800abf6:	9302      	str	r3, [sp, #8]
 800abf8:	f10b 0108 	add.w	r1, fp, #8
 800abfc:	f102 0308 	add.w	r3, r2, #8
 800ac00:	1c66      	adds	r6, r4, #1
 800ac02:	910a      	str	r1, [sp, #40]	; 0x28
 800ac04:	2500      	movs	r5, #0
 800ac06:	930d      	str	r3, [sp, #52]	; 0x34
 800ac08:	9b02      	ldr	r3, [sp, #8]
 800ac0a:	42b3      	cmp	r3, r6
 800ac0c:	da04      	bge.n	800ac18 <__kernel_rem_pio2+0x398>
 800ac0e:	461c      	mov	r4, r3
 800ac10:	e6a6      	b.n	800a960 <__kernel_rem_pio2+0xe0>
 800ac12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac14:	2301      	movs	r3, #1
 800ac16:	e7e3      	b.n	800abe0 <__kernel_rem_pio2+0x360>
 800ac18:	9b06      	ldr	r3, [sp, #24]
 800ac1a:	18ef      	adds	r7, r5, r3
 800ac1c:	ab22      	add	r3, sp, #136	; 0x88
 800ac1e:	441f      	add	r7, r3
 800ac20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac22:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ac26:	f7f5 fc35 	bl	8000494 <__aeabi_i2d>
 800ac2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac2c:	461c      	mov	r4, r3
 800ac2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac30:	e9c7 0100 	strd	r0, r1, [r7]
 800ac34:	eb03 0b05 	add.w	fp, r3, r5
 800ac38:	2700      	movs	r7, #0
 800ac3a:	f04f 0800 	mov.w	r8, #0
 800ac3e:	f04f 0900 	mov.w	r9, #0
 800ac42:	9b07      	ldr	r3, [sp, #28]
 800ac44:	429f      	cmp	r7, r3
 800ac46:	dd08      	ble.n	800ac5a <__kernel_rem_pio2+0x3da>
 800ac48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac4a:	aa72      	add	r2, sp, #456	; 0x1c8
 800ac4c:	18eb      	adds	r3, r5, r3
 800ac4e:	4413      	add	r3, r2
 800ac50:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800ac54:	3601      	adds	r6, #1
 800ac56:	3508      	adds	r5, #8
 800ac58:	e7d6      	b.n	800ac08 <__kernel_rem_pio2+0x388>
 800ac5a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ac5e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ac62:	f7f5 fc81 	bl	8000568 <__aeabi_dmul>
 800ac66:	4602      	mov	r2, r0
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4640      	mov	r0, r8
 800ac6c:	4649      	mov	r1, r9
 800ac6e:	f7f5 fac5 	bl	80001fc <__adddf3>
 800ac72:	3701      	adds	r7, #1
 800ac74:	4680      	mov	r8, r0
 800ac76:	4689      	mov	r9, r1
 800ac78:	e7e3      	b.n	800ac42 <__kernel_rem_pio2+0x3c2>
 800ac7a:	3d01      	subs	r5, #1
 800ac7c:	e741      	b.n	800ab02 <__kernel_rem_pio2+0x282>
 800ac7e:	f1ca 0000 	rsb	r0, sl, #0
 800ac82:	ec47 6b10 	vmov	d0, r6, r7
 800ac86:	f000 fa83 	bl	800b190 <scalbn>
 800ac8a:	ec57 6b10 	vmov	r6, r7, d0
 800ac8e:	2200      	movs	r2, #0
 800ac90:	4b99      	ldr	r3, [pc, #612]	; (800aef8 <__kernel_rem_pio2+0x678>)
 800ac92:	ee10 0a10 	vmov	r0, s0
 800ac96:	4639      	mov	r1, r7
 800ac98:	f7f5 feec 	bl	8000a74 <__aeabi_dcmpge>
 800ac9c:	b1f8      	cbz	r0, 800acde <__kernel_rem_pio2+0x45e>
 800ac9e:	2200      	movs	r2, #0
 800aca0:	4b96      	ldr	r3, [pc, #600]	; (800aefc <__kernel_rem_pio2+0x67c>)
 800aca2:	4630      	mov	r0, r6
 800aca4:	4639      	mov	r1, r7
 800aca6:	f7f5 fc5f 	bl	8000568 <__aeabi_dmul>
 800acaa:	f7f5 fef7 	bl	8000a9c <__aeabi_d2iz>
 800acae:	4680      	mov	r8, r0
 800acb0:	f7f5 fbf0 	bl	8000494 <__aeabi_i2d>
 800acb4:	2200      	movs	r2, #0
 800acb6:	4b90      	ldr	r3, [pc, #576]	; (800aef8 <__kernel_rem_pio2+0x678>)
 800acb8:	f7f5 fc56 	bl	8000568 <__aeabi_dmul>
 800acbc:	460b      	mov	r3, r1
 800acbe:	4602      	mov	r2, r0
 800acc0:	4639      	mov	r1, r7
 800acc2:	4630      	mov	r0, r6
 800acc4:	f7f5 fa98 	bl	80001f8 <__aeabi_dsub>
 800acc8:	f7f5 fee8 	bl	8000a9c <__aeabi_d2iz>
 800accc:	1c65      	adds	r5, r4, #1
 800acce:	ab0e      	add	r3, sp, #56	; 0x38
 800acd0:	f10a 0a18 	add.w	sl, sl, #24
 800acd4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800acd8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800acdc:	e719      	b.n	800ab12 <__kernel_rem_pio2+0x292>
 800acde:	4630      	mov	r0, r6
 800ace0:	4639      	mov	r1, r7
 800ace2:	f7f5 fedb 	bl	8000a9c <__aeabi_d2iz>
 800ace6:	ab0e      	add	r3, sp, #56	; 0x38
 800ace8:	4625      	mov	r5, r4
 800acea:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800acee:	e710      	b.n	800ab12 <__kernel_rem_pio2+0x292>
 800acf0:	ab0e      	add	r3, sp, #56	; 0x38
 800acf2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800acf6:	f7f5 fbcd 	bl	8000494 <__aeabi_i2d>
 800acfa:	4642      	mov	r2, r8
 800acfc:	464b      	mov	r3, r9
 800acfe:	f7f5 fc33 	bl	8000568 <__aeabi_dmul>
 800ad02:	2200      	movs	r2, #0
 800ad04:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ad08:	4b7c      	ldr	r3, [pc, #496]	; (800aefc <__kernel_rem_pio2+0x67c>)
 800ad0a:	4640      	mov	r0, r8
 800ad0c:	4649      	mov	r1, r9
 800ad0e:	f7f5 fc2b 	bl	8000568 <__aeabi_dmul>
 800ad12:	3f01      	subs	r7, #1
 800ad14:	4680      	mov	r8, r0
 800ad16:	4689      	mov	r9, r1
 800ad18:	e708      	b.n	800ab2c <__kernel_rem_pio2+0x2ac>
 800ad1a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ad1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad22:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ad26:	f7f5 fc1f 	bl	8000568 <__aeabi_dmul>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	460b      	mov	r3, r1
 800ad2e:	4640      	mov	r0, r8
 800ad30:	4649      	mov	r1, r9
 800ad32:	f7f5 fa63 	bl	80001fc <__adddf3>
 800ad36:	3701      	adds	r7, #1
 800ad38:	4680      	mov	r8, r0
 800ad3a:	4689      	mov	r9, r1
 800ad3c:	9b04      	ldr	r3, [sp, #16]
 800ad3e:	429f      	cmp	r7, r3
 800ad40:	dc01      	bgt.n	800ad46 <__kernel_rem_pio2+0x4c6>
 800ad42:	45ba      	cmp	sl, r7
 800ad44:	dae9      	bge.n	800ad1a <__kernel_rem_pio2+0x49a>
 800ad46:	ab4a      	add	r3, sp, #296	; 0x128
 800ad48:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad4c:	e9c3 8900 	strd	r8, r9, [r3]
 800ad50:	f10a 0a01 	add.w	sl, sl, #1
 800ad54:	3e08      	subs	r6, #8
 800ad56:	e6f0      	b.n	800ab3a <__kernel_rem_pio2+0x2ba>
 800ad58:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ad5a:	2b03      	cmp	r3, #3
 800ad5c:	d85b      	bhi.n	800ae16 <__kernel_rem_pio2+0x596>
 800ad5e:	e8df f003 	tbb	[pc, r3]
 800ad62:	264a      	.short	0x264a
 800ad64:	0226      	.short	0x0226
 800ad66:	ab9a      	add	r3, sp, #616	; 0x268
 800ad68:	441c      	add	r4, r3
 800ad6a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ad6e:	46a2      	mov	sl, r4
 800ad70:	46ab      	mov	fp, r5
 800ad72:	f1bb 0f00 	cmp.w	fp, #0
 800ad76:	dc6c      	bgt.n	800ae52 <__kernel_rem_pio2+0x5d2>
 800ad78:	46a2      	mov	sl, r4
 800ad7a:	46ab      	mov	fp, r5
 800ad7c:	f1bb 0f01 	cmp.w	fp, #1
 800ad80:	f300 8086 	bgt.w	800ae90 <__kernel_rem_pio2+0x610>
 800ad84:	2000      	movs	r0, #0
 800ad86:	2100      	movs	r1, #0
 800ad88:	2d01      	cmp	r5, #1
 800ad8a:	f300 80a0 	bgt.w	800aece <__kernel_rem_pio2+0x64e>
 800ad8e:	9b02      	ldr	r3, [sp, #8]
 800ad90:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ad94:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	f040 809e 	bne.w	800aeda <__kernel_rem_pio2+0x65a>
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	e9c3 7800 	strd	r7, r8, [r3]
 800ada4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ada8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800adac:	e033      	b.n	800ae16 <__kernel_rem_pio2+0x596>
 800adae:	3408      	adds	r4, #8
 800adb0:	ab4a      	add	r3, sp, #296	; 0x128
 800adb2:	441c      	add	r4, r3
 800adb4:	462e      	mov	r6, r5
 800adb6:	2000      	movs	r0, #0
 800adb8:	2100      	movs	r1, #0
 800adba:	2e00      	cmp	r6, #0
 800adbc:	da3a      	bge.n	800ae34 <__kernel_rem_pio2+0x5b4>
 800adbe:	9b02      	ldr	r3, [sp, #8]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d03d      	beq.n	800ae40 <__kernel_rem_pio2+0x5c0>
 800adc4:	4602      	mov	r2, r0
 800adc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adca:	9c01      	ldr	r4, [sp, #4]
 800adcc:	e9c4 2300 	strd	r2, r3, [r4]
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800add8:	f7f5 fa0e 	bl	80001f8 <__aeabi_dsub>
 800addc:	ae4c      	add	r6, sp, #304	; 0x130
 800adde:	2401      	movs	r4, #1
 800ade0:	42a5      	cmp	r5, r4
 800ade2:	da30      	bge.n	800ae46 <__kernel_rem_pio2+0x5c6>
 800ade4:	9b02      	ldr	r3, [sp, #8]
 800ade6:	b113      	cbz	r3, 800adee <__kernel_rem_pio2+0x56e>
 800ade8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adec:	4619      	mov	r1, r3
 800adee:	9b01      	ldr	r3, [sp, #4]
 800adf0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800adf4:	e00f      	b.n	800ae16 <__kernel_rem_pio2+0x596>
 800adf6:	ab9a      	add	r3, sp, #616	; 0x268
 800adf8:	441c      	add	r4, r3
 800adfa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800adfe:	2000      	movs	r0, #0
 800ae00:	2100      	movs	r1, #0
 800ae02:	2d00      	cmp	r5, #0
 800ae04:	da10      	bge.n	800ae28 <__kernel_rem_pio2+0x5a8>
 800ae06:	9b02      	ldr	r3, [sp, #8]
 800ae08:	b113      	cbz	r3, 800ae10 <__kernel_rem_pio2+0x590>
 800ae0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae0e:	4619      	mov	r1, r3
 800ae10:	9b01      	ldr	r3, [sp, #4]
 800ae12:	e9c3 0100 	strd	r0, r1, [r3]
 800ae16:	9b06      	ldr	r3, [sp, #24]
 800ae18:	f003 0007 	and.w	r0, r3, #7
 800ae1c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ae20:	ecbd 8b02 	vpop	{d8}
 800ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae28:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae2c:	f7f5 f9e6 	bl	80001fc <__adddf3>
 800ae30:	3d01      	subs	r5, #1
 800ae32:	e7e6      	b.n	800ae02 <__kernel_rem_pio2+0x582>
 800ae34:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae38:	f7f5 f9e0 	bl	80001fc <__adddf3>
 800ae3c:	3e01      	subs	r6, #1
 800ae3e:	e7bc      	b.n	800adba <__kernel_rem_pio2+0x53a>
 800ae40:	4602      	mov	r2, r0
 800ae42:	460b      	mov	r3, r1
 800ae44:	e7c1      	b.n	800adca <__kernel_rem_pio2+0x54a>
 800ae46:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ae4a:	f7f5 f9d7 	bl	80001fc <__adddf3>
 800ae4e:	3401      	adds	r4, #1
 800ae50:	e7c6      	b.n	800ade0 <__kernel_rem_pio2+0x560>
 800ae52:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800ae56:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ae5a:	4640      	mov	r0, r8
 800ae5c:	ec53 2b17 	vmov	r2, r3, d7
 800ae60:	4649      	mov	r1, r9
 800ae62:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae66:	f7f5 f9c9 	bl	80001fc <__adddf3>
 800ae6a:	4602      	mov	r2, r0
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	4606      	mov	r6, r0
 800ae70:	460f      	mov	r7, r1
 800ae72:	4640      	mov	r0, r8
 800ae74:	4649      	mov	r1, r9
 800ae76:	f7f5 f9bf 	bl	80001f8 <__aeabi_dsub>
 800ae7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae7e:	f7f5 f9bd 	bl	80001fc <__adddf3>
 800ae82:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae86:	e9ca 0100 	strd	r0, r1, [sl]
 800ae8a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800ae8e:	e770      	b.n	800ad72 <__kernel_rem_pio2+0x4f2>
 800ae90:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800ae94:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ae98:	4630      	mov	r0, r6
 800ae9a:	ec53 2b17 	vmov	r2, r3, d7
 800ae9e:	4639      	mov	r1, r7
 800aea0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800aea4:	f7f5 f9aa 	bl	80001fc <__adddf3>
 800aea8:	4602      	mov	r2, r0
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4680      	mov	r8, r0
 800aeae:	4689      	mov	r9, r1
 800aeb0:	4630      	mov	r0, r6
 800aeb2:	4639      	mov	r1, r7
 800aeb4:	f7f5 f9a0 	bl	80001f8 <__aeabi_dsub>
 800aeb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aebc:	f7f5 f99e 	bl	80001fc <__adddf3>
 800aec0:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aec4:	e9ca 0100 	strd	r0, r1, [sl]
 800aec8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800aecc:	e756      	b.n	800ad7c <__kernel_rem_pio2+0x4fc>
 800aece:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aed2:	f7f5 f993 	bl	80001fc <__adddf3>
 800aed6:	3d01      	subs	r5, #1
 800aed8:	e756      	b.n	800ad88 <__kernel_rem_pio2+0x508>
 800aeda:	9b01      	ldr	r3, [sp, #4]
 800aedc:	9a01      	ldr	r2, [sp, #4]
 800aede:	601f      	str	r7, [r3, #0]
 800aee0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800aee4:	605c      	str	r4, [r3, #4]
 800aee6:	609d      	str	r5, [r3, #8]
 800aee8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aeec:	60d3      	str	r3, [r2, #12]
 800aeee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aef2:	6110      	str	r0, [r2, #16]
 800aef4:	6153      	str	r3, [r2, #20]
 800aef6:	e78e      	b.n	800ae16 <__kernel_rem_pio2+0x596>
 800aef8:	41700000 	.word	0x41700000
 800aefc:	3e700000 	.word	0x3e700000

0800af00 <__kernel_sin>:
 800af00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af04:	ec55 4b10 	vmov	r4, r5, d0
 800af08:	b085      	sub	sp, #20
 800af0a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af0e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800af12:	ed8d 1b00 	vstr	d1, [sp]
 800af16:	9002      	str	r0, [sp, #8]
 800af18:	da06      	bge.n	800af28 <__kernel_sin+0x28>
 800af1a:	ee10 0a10 	vmov	r0, s0
 800af1e:	4629      	mov	r1, r5
 800af20:	f7f5 fdbc 	bl	8000a9c <__aeabi_d2iz>
 800af24:	2800      	cmp	r0, #0
 800af26:	d051      	beq.n	800afcc <__kernel_sin+0xcc>
 800af28:	4622      	mov	r2, r4
 800af2a:	462b      	mov	r3, r5
 800af2c:	4620      	mov	r0, r4
 800af2e:	4629      	mov	r1, r5
 800af30:	f7f5 fb1a 	bl	8000568 <__aeabi_dmul>
 800af34:	4682      	mov	sl, r0
 800af36:	468b      	mov	fp, r1
 800af38:	4602      	mov	r2, r0
 800af3a:	460b      	mov	r3, r1
 800af3c:	4620      	mov	r0, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	f7f5 fb12 	bl	8000568 <__aeabi_dmul>
 800af44:	a341      	add	r3, pc, #260	; (adr r3, 800b04c <__kernel_sin+0x14c>)
 800af46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af4a:	4680      	mov	r8, r0
 800af4c:	4689      	mov	r9, r1
 800af4e:	4650      	mov	r0, sl
 800af50:	4659      	mov	r1, fp
 800af52:	f7f5 fb09 	bl	8000568 <__aeabi_dmul>
 800af56:	a33f      	add	r3, pc, #252	; (adr r3, 800b054 <__kernel_sin+0x154>)
 800af58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af5c:	f7f5 f94c 	bl	80001f8 <__aeabi_dsub>
 800af60:	4652      	mov	r2, sl
 800af62:	465b      	mov	r3, fp
 800af64:	f7f5 fb00 	bl	8000568 <__aeabi_dmul>
 800af68:	a33c      	add	r3, pc, #240	; (adr r3, 800b05c <__kernel_sin+0x15c>)
 800af6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af6e:	f7f5 f945 	bl	80001fc <__adddf3>
 800af72:	4652      	mov	r2, sl
 800af74:	465b      	mov	r3, fp
 800af76:	f7f5 faf7 	bl	8000568 <__aeabi_dmul>
 800af7a:	a33a      	add	r3, pc, #232	; (adr r3, 800b064 <__kernel_sin+0x164>)
 800af7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af80:	f7f5 f93a 	bl	80001f8 <__aeabi_dsub>
 800af84:	4652      	mov	r2, sl
 800af86:	465b      	mov	r3, fp
 800af88:	f7f5 faee 	bl	8000568 <__aeabi_dmul>
 800af8c:	a337      	add	r3, pc, #220	; (adr r3, 800b06c <__kernel_sin+0x16c>)
 800af8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af92:	f7f5 f933 	bl	80001fc <__adddf3>
 800af96:	9b02      	ldr	r3, [sp, #8]
 800af98:	4606      	mov	r6, r0
 800af9a:	460f      	mov	r7, r1
 800af9c:	b9db      	cbnz	r3, 800afd6 <__kernel_sin+0xd6>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4650      	mov	r0, sl
 800afa4:	4659      	mov	r1, fp
 800afa6:	f7f5 fadf 	bl	8000568 <__aeabi_dmul>
 800afaa:	a325      	add	r3, pc, #148	; (adr r3, 800b040 <__kernel_sin+0x140>)
 800afac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb0:	f7f5 f922 	bl	80001f8 <__aeabi_dsub>
 800afb4:	4642      	mov	r2, r8
 800afb6:	464b      	mov	r3, r9
 800afb8:	f7f5 fad6 	bl	8000568 <__aeabi_dmul>
 800afbc:	4602      	mov	r2, r0
 800afbe:	460b      	mov	r3, r1
 800afc0:	4620      	mov	r0, r4
 800afc2:	4629      	mov	r1, r5
 800afc4:	f7f5 f91a 	bl	80001fc <__adddf3>
 800afc8:	4604      	mov	r4, r0
 800afca:	460d      	mov	r5, r1
 800afcc:	ec45 4b10 	vmov	d0, r4, r5
 800afd0:	b005      	add	sp, #20
 800afd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd6:	2200      	movs	r2, #0
 800afd8:	4b1b      	ldr	r3, [pc, #108]	; (800b048 <__kernel_sin+0x148>)
 800afda:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afde:	f7f5 fac3 	bl	8000568 <__aeabi_dmul>
 800afe2:	4632      	mov	r2, r6
 800afe4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe8:	463b      	mov	r3, r7
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 fabb 	bl	8000568 <__aeabi_dmul>
 800aff2:	4602      	mov	r2, r0
 800aff4:	460b      	mov	r3, r1
 800aff6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800affa:	f7f5 f8fd 	bl	80001f8 <__aeabi_dsub>
 800affe:	4652      	mov	r2, sl
 800b000:	465b      	mov	r3, fp
 800b002:	f7f5 fab1 	bl	8000568 <__aeabi_dmul>
 800b006:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b00a:	f7f5 f8f5 	bl	80001f8 <__aeabi_dsub>
 800b00e:	a30c      	add	r3, pc, #48	; (adr r3, 800b040 <__kernel_sin+0x140>)
 800b010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b014:	4606      	mov	r6, r0
 800b016:	460f      	mov	r7, r1
 800b018:	4640      	mov	r0, r8
 800b01a:	4649      	mov	r1, r9
 800b01c:	f7f5 faa4 	bl	8000568 <__aeabi_dmul>
 800b020:	4602      	mov	r2, r0
 800b022:	460b      	mov	r3, r1
 800b024:	4630      	mov	r0, r6
 800b026:	4639      	mov	r1, r7
 800b028:	f7f5 f8e8 	bl	80001fc <__adddf3>
 800b02c:	4602      	mov	r2, r0
 800b02e:	460b      	mov	r3, r1
 800b030:	4620      	mov	r0, r4
 800b032:	4629      	mov	r1, r5
 800b034:	f7f5 f8e0 	bl	80001f8 <__aeabi_dsub>
 800b038:	e7c6      	b.n	800afc8 <__kernel_sin+0xc8>
 800b03a:	bf00      	nop
 800b03c:	f3af 8000 	nop.w
 800b040:	55555549 	.word	0x55555549
 800b044:	3fc55555 	.word	0x3fc55555
 800b048:	3fe00000 	.word	0x3fe00000
 800b04c:	5acfd57c 	.word	0x5acfd57c
 800b050:	3de5d93a 	.word	0x3de5d93a
 800b054:	8a2b9ceb 	.word	0x8a2b9ceb
 800b058:	3e5ae5e6 	.word	0x3e5ae5e6
 800b05c:	57b1fe7d 	.word	0x57b1fe7d
 800b060:	3ec71de3 	.word	0x3ec71de3
 800b064:	19c161d5 	.word	0x19c161d5
 800b068:	3f2a01a0 	.word	0x3f2a01a0
 800b06c:	1110f8a6 	.word	0x1110f8a6
 800b070:	3f811111 	.word	0x3f811111

0800b074 <fabs>:
 800b074:	ec51 0b10 	vmov	r0, r1, d0
 800b078:	ee10 2a10 	vmov	r2, s0
 800b07c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b080:	ec43 2b10 	vmov	d0, r2, r3
 800b084:	4770      	bx	lr
	...

0800b088 <floor>:
 800b088:	ec51 0b10 	vmov	r0, r1, d0
 800b08c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b090:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b094:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b098:	2e13      	cmp	r6, #19
 800b09a:	460c      	mov	r4, r1
 800b09c:	ee10 5a10 	vmov	r5, s0
 800b0a0:	4680      	mov	r8, r0
 800b0a2:	dc34      	bgt.n	800b10e <floor+0x86>
 800b0a4:	2e00      	cmp	r6, #0
 800b0a6:	da16      	bge.n	800b0d6 <floor+0x4e>
 800b0a8:	a335      	add	r3, pc, #212	; (adr r3, 800b180 <floor+0xf8>)
 800b0aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0ae:	f7f5 f8a5 	bl	80001fc <__adddf3>
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	2300      	movs	r3, #0
 800b0b6:	f7f5 fce7 	bl	8000a88 <__aeabi_dcmpgt>
 800b0ba:	b148      	cbz	r0, 800b0d0 <floor+0x48>
 800b0bc:	2c00      	cmp	r4, #0
 800b0be:	da59      	bge.n	800b174 <floor+0xec>
 800b0c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b0c4:	4a30      	ldr	r2, [pc, #192]	; (800b188 <floor+0x100>)
 800b0c6:	432b      	orrs	r3, r5
 800b0c8:	2500      	movs	r5, #0
 800b0ca:	42ab      	cmp	r3, r5
 800b0cc:	bf18      	it	ne
 800b0ce:	4614      	movne	r4, r2
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	e025      	b.n	800b122 <floor+0x9a>
 800b0d6:	4f2d      	ldr	r7, [pc, #180]	; (800b18c <floor+0x104>)
 800b0d8:	4137      	asrs	r7, r6
 800b0da:	ea01 0307 	and.w	r3, r1, r7
 800b0de:	4303      	orrs	r3, r0
 800b0e0:	d01f      	beq.n	800b122 <floor+0x9a>
 800b0e2:	a327      	add	r3, pc, #156	; (adr r3, 800b180 <floor+0xf8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 f888 	bl	80001fc <__adddf3>
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	f7f5 fcca 	bl	8000a88 <__aeabi_dcmpgt>
 800b0f4:	2800      	cmp	r0, #0
 800b0f6:	d0eb      	beq.n	800b0d0 <floor+0x48>
 800b0f8:	2c00      	cmp	r4, #0
 800b0fa:	bfbe      	ittt	lt
 800b0fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b100:	fa43 f606 	asrlt.w	r6, r3, r6
 800b104:	19a4      	addlt	r4, r4, r6
 800b106:	ea24 0407 	bic.w	r4, r4, r7
 800b10a:	2500      	movs	r5, #0
 800b10c:	e7e0      	b.n	800b0d0 <floor+0x48>
 800b10e:	2e33      	cmp	r6, #51	; 0x33
 800b110:	dd0b      	ble.n	800b12a <floor+0xa2>
 800b112:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b116:	d104      	bne.n	800b122 <floor+0x9a>
 800b118:	ee10 2a10 	vmov	r2, s0
 800b11c:	460b      	mov	r3, r1
 800b11e:	f7f5 f86d 	bl	80001fc <__adddf3>
 800b122:	ec41 0b10 	vmov	d0, r0, r1
 800b126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b12a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b12e:	f04f 33ff 	mov.w	r3, #4294967295
 800b132:	fa23 f707 	lsr.w	r7, r3, r7
 800b136:	4207      	tst	r7, r0
 800b138:	d0f3      	beq.n	800b122 <floor+0x9a>
 800b13a:	a311      	add	r3, pc, #68	; (adr r3, 800b180 <floor+0xf8>)
 800b13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b140:	f7f5 f85c 	bl	80001fc <__adddf3>
 800b144:	2200      	movs	r2, #0
 800b146:	2300      	movs	r3, #0
 800b148:	f7f5 fc9e 	bl	8000a88 <__aeabi_dcmpgt>
 800b14c:	2800      	cmp	r0, #0
 800b14e:	d0bf      	beq.n	800b0d0 <floor+0x48>
 800b150:	2c00      	cmp	r4, #0
 800b152:	da02      	bge.n	800b15a <floor+0xd2>
 800b154:	2e14      	cmp	r6, #20
 800b156:	d103      	bne.n	800b160 <floor+0xd8>
 800b158:	3401      	adds	r4, #1
 800b15a:	ea25 0507 	bic.w	r5, r5, r7
 800b15e:	e7b7      	b.n	800b0d0 <floor+0x48>
 800b160:	2301      	movs	r3, #1
 800b162:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b166:	fa03 f606 	lsl.w	r6, r3, r6
 800b16a:	4435      	add	r5, r6
 800b16c:	4545      	cmp	r5, r8
 800b16e:	bf38      	it	cc
 800b170:	18e4      	addcc	r4, r4, r3
 800b172:	e7f2      	b.n	800b15a <floor+0xd2>
 800b174:	2500      	movs	r5, #0
 800b176:	462c      	mov	r4, r5
 800b178:	e7aa      	b.n	800b0d0 <floor+0x48>
 800b17a:	bf00      	nop
 800b17c:	f3af 8000 	nop.w
 800b180:	8800759c 	.word	0x8800759c
 800b184:	7e37e43c 	.word	0x7e37e43c
 800b188:	bff00000 	.word	0xbff00000
 800b18c:	000fffff 	.word	0x000fffff

0800b190 <scalbn>:
 800b190:	b570      	push	{r4, r5, r6, lr}
 800b192:	ec55 4b10 	vmov	r4, r5, d0
 800b196:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b19a:	4606      	mov	r6, r0
 800b19c:	462b      	mov	r3, r5
 800b19e:	b9aa      	cbnz	r2, 800b1cc <scalbn+0x3c>
 800b1a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b1a4:	4323      	orrs	r3, r4
 800b1a6:	d03b      	beq.n	800b220 <scalbn+0x90>
 800b1a8:	4b31      	ldr	r3, [pc, #196]	; (800b270 <scalbn+0xe0>)
 800b1aa:	4629      	mov	r1, r5
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	ee10 0a10 	vmov	r0, s0
 800b1b2:	f7f5 f9d9 	bl	8000568 <__aeabi_dmul>
 800b1b6:	4b2f      	ldr	r3, [pc, #188]	; (800b274 <scalbn+0xe4>)
 800b1b8:	429e      	cmp	r6, r3
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	460d      	mov	r5, r1
 800b1be:	da12      	bge.n	800b1e6 <scalbn+0x56>
 800b1c0:	a327      	add	r3, pc, #156	; (adr r3, 800b260 <scalbn+0xd0>)
 800b1c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1c6:	f7f5 f9cf 	bl	8000568 <__aeabi_dmul>
 800b1ca:	e009      	b.n	800b1e0 <scalbn+0x50>
 800b1cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b1d0:	428a      	cmp	r2, r1
 800b1d2:	d10c      	bne.n	800b1ee <scalbn+0x5e>
 800b1d4:	ee10 2a10 	vmov	r2, s0
 800b1d8:	4620      	mov	r0, r4
 800b1da:	4629      	mov	r1, r5
 800b1dc:	f7f5 f80e 	bl	80001fc <__adddf3>
 800b1e0:	4604      	mov	r4, r0
 800b1e2:	460d      	mov	r5, r1
 800b1e4:	e01c      	b.n	800b220 <scalbn+0x90>
 800b1e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b1ea:	460b      	mov	r3, r1
 800b1ec:	3a36      	subs	r2, #54	; 0x36
 800b1ee:	4432      	add	r2, r6
 800b1f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b1f4:	428a      	cmp	r2, r1
 800b1f6:	dd0b      	ble.n	800b210 <scalbn+0x80>
 800b1f8:	ec45 4b11 	vmov	d1, r4, r5
 800b1fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b268 <scalbn+0xd8>
 800b200:	f000 f83c 	bl	800b27c <copysign>
 800b204:	a318      	add	r3, pc, #96	; (adr r3, 800b268 <scalbn+0xd8>)
 800b206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b20a:	ec51 0b10 	vmov	r0, r1, d0
 800b20e:	e7da      	b.n	800b1c6 <scalbn+0x36>
 800b210:	2a00      	cmp	r2, #0
 800b212:	dd08      	ble.n	800b226 <scalbn+0x96>
 800b214:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b218:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b21c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b220:	ec45 4b10 	vmov	d0, r4, r5
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b22a:	da0d      	bge.n	800b248 <scalbn+0xb8>
 800b22c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b230:	429e      	cmp	r6, r3
 800b232:	ec45 4b11 	vmov	d1, r4, r5
 800b236:	dce1      	bgt.n	800b1fc <scalbn+0x6c>
 800b238:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b260 <scalbn+0xd0>
 800b23c:	f000 f81e 	bl	800b27c <copysign>
 800b240:	a307      	add	r3, pc, #28	; (adr r3, 800b260 <scalbn+0xd0>)
 800b242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b246:	e7e0      	b.n	800b20a <scalbn+0x7a>
 800b248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b24c:	3236      	adds	r2, #54	; 0x36
 800b24e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b252:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b256:	4620      	mov	r0, r4
 800b258:	4629      	mov	r1, r5
 800b25a:	2200      	movs	r2, #0
 800b25c:	4b06      	ldr	r3, [pc, #24]	; (800b278 <scalbn+0xe8>)
 800b25e:	e7b2      	b.n	800b1c6 <scalbn+0x36>
 800b260:	c2f8f359 	.word	0xc2f8f359
 800b264:	01a56e1f 	.word	0x01a56e1f
 800b268:	8800759c 	.word	0x8800759c
 800b26c:	7e37e43c 	.word	0x7e37e43c
 800b270:	43500000 	.word	0x43500000
 800b274:	ffff3cb0 	.word	0xffff3cb0
 800b278:	3c900000 	.word	0x3c900000

0800b27c <copysign>:
 800b27c:	ec51 0b10 	vmov	r0, r1, d0
 800b280:	ee11 0a90 	vmov	r0, s3
 800b284:	ee10 2a10 	vmov	r2, s0
 800b288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b28c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b290:	ea41 0300 	orr.w	r3, r1, r0
 800b294:	ec43 2b10 	vmov	d0, r2, r3
 800b298:	4770      	bx	lr
	...

0800b29c <_init>:
 800b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b29e:	bf00      	nop
 800b2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2a2:	bc08      	pop	{r3}
 800b2a4:	469e      	mov	lr, r3
 800b2a6:	4770      	bx	lr

0800b2a8 <_fini>:
 800b2a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2aa:	bf00      	nop
 800b2ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2ae:	bc08      	pop	{r3}
 800b2b0:	469e      	mov	lr, r3
 800b2b2:	4770      	bx	lr
