
Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b944  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800baf8  0800baf8  0001baf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd78  0800bd78  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800bd78  0800bd78  0001bd78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd80  0800bd80  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd80  0800bd80  0001bd80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bd84  0800bd84  0001bd84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800bd88  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb8  20000214  0800bf9c  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021cc  0800bf9c  000221cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cbd  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004829  00000000  00000000  00040f01  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  00045730  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  00047020  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0c1  00000000  00000000  000486f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000191e0  00000000  00000000  000727b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8759  00000000  00000000  0008b991  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001740ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e54  00000000  00000000  00174168  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000214 	.word	0x20000214
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800badc 	.word	0x0800badc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000218 	.word	0x20000218
 80001ec:	0800badc 	.word	0x0800badc

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b972 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	4688      	mov	r8, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14b      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	d967      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0720 	rsb	r7, r2, #32
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c32:	4095      	lsls	r5, r2
 8000c34:	ea47 0803 	orr.w	r8, r7, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c44:	fa1f fc85 	uxth.w	ip, r5
 8000c48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c50:	fb07 f10c 	mul.w	r1, r7, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5e:	f080 811b 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8118 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c68:	3f02      	subs	r7, #2
 8000c6a:	442b      	add	r3, r5
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c94:	3802      	subs	r0, #2
 8000c96:	442c      	add	r4, r5
 8000c98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cac:	4639      	mov	r1, r7
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xbe>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80eb 	beq.w	8000e92 <__udivmoddi4+0x286>
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f783 	clz	r7, r3
 8000cce:	2f00      	cmp	r7, #0
 8000cd0:	d147      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd0>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80fa 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000cea:	e9c6 4800 	strd	r4, r8, [r6]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa0>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xe8>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 808f 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfe:	1b49      	subs	r1, r1, r5
 8000d00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d04:	fa1f f885 	uxth.w	r8, r5
 8000d08:	2701      	movs	r7, #1
 8000d0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb08 f10c 	mul.w	r1, r8, ip
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d20:	18eb      	adds	r3, r5, r3
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1a59      	subs	r1, r3, r1
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x14c>
 8000d48:	192c      	adds	r4, r5, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x14a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80b6 	bhi.w	8000ec2 <__udivmoddi4+0x2b6>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e79f      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d62:	f1c7 0c20 	rsb	ip, r7, #32
 8000d66:	40bb      	lsls	r3, r7
 8000d68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d70:	fa01 f407 	lsl.w	r4, r1, r7
 8000d74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d80:	4325      	orrs	r5, r4
 8000d82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d86:	0c2c      	lsrs	r4, r5, #16
 8000d88:	fb08 3319 	mls	r3, r8, r9, r3
 8000d8c:	fa1f fa8e 	uxth.w	sl, lr
 8000d90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d94:	fb09 f40a 	mul.w	r4, r9, sl
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1e 0303 	adds.w	r3, lr, r3
 8000da8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dac:	f080 8087 	bcs.w	8000ebe <__udivmoddi4+0x2b2>
 8000db0:	429c      	cmp	r4, r3
 8000db2:	f240 8084 	bls.w	8000ebe <__udivmoddi4+0x2b2>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4473      	add	r3, lr
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	b2ad      	uxth	r5, r5
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd0:	45a2      	cmp	sl, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	d26b      	bcs.n	8000eb6 <__udivmoddi4+0x2aa>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d969      	bls.n	8000eb6 <__udivmoddi4+0x2aa>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4474      	add	r4, lr
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	fba0 8902 	umull	r8, r9, r0, r2
 8000dee:	eba4 040a 	sub.w	r4, r4, sl
 8000df2:	454c      	cmp	r4, r9
 8000df4:	46c2      	mov	sl, r8
 8000df6:	464b      	mov	r3, r9
 8000df8:	d354      	bcc.n	8000ea4 <__udivmoddi4+0x298>
 8000dfa:	d051      	beq.n	8000ea0 <__udivmoddi4+0x294>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d069      	beq.n	8000ed4 <__udivmoddi4+0x2c8>
 8000e00:	ebb1 050a 	subs.w	r5, r1, sl
 8000e04:	eb64 0403 	sbc.w	r4, r4, r3
 8000e08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	40fc      	lsrs	r4, r7
 8000e10:	ea4c 0505 	orr.w	r5, ip, r5
 8000e14:	e9c6 5400 	strd	r5, r4, [r6]
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e747      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f703 	lsr.w	r7, r0, r3
 8000e24:	4095      	lsls	r5, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e32:	4338      	orrs	r0, r7
 8000e34:	0c01      	lsrs	r1, r0, #16
 8000e36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3a:	fa1f f885 	uxth.w	r8, r5
 8000e3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb07 f308 	mul.w	r3, r7, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x256>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e58:	d22f      	bcs.n	8000eba <__udivmoddi4+0x2ae>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d92d      	bls.n	8000eba <__udivmoddi4+0x2ae>
 8000e5e:	3f02      	subs	r7, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1acb      	subs	r3, r1, r3
 8000e64:	b281      	uxth	r1, r0
 8000e66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb00 f308 	mul.w	r3, r0, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x27e>
 8000e7a:	1869      	adds	r1, r5, r1
 8000e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e80:	d217      	bcs.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d915      	bls.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4429      	add	r1, r5
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e90:	e73b      	b.n	8000d0a <__udivmoddi4+0xfe>
 8000e92:	4637      	mov	r7, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e709      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e98:	4607      	mov	r7, r0
 8000e9a:	e6e7      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000ea0:	4541      	cmp	r1, r8
 8000ea2:	d2ab      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eac:	3801      	subs	r0, #1
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e7a4      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb2:	4660      	mov	r0, ip
 8000eb4:	e7e9      	b.n	8000e8a <__udivmoddi4+0x27e>
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	e795      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000eba:	4667      	mov	r7, ip
 8000ebc:	e7d1      	b.n	8000e62 <__udivmoddi4+0x256>
 8000ebe:	4681      	mov	r9, r0
 8000ec0:	e77c      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	442c      	add	r4, r5
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0x14c>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	442b      	add	r3, r5
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	e708      	b.n	8000ce6 <__udivmoddi4+0xda>
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0xa0>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <MX_ADC1_Init+0x9c>)
 8000ef2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <MX_ADC1_Init+0xa0>)
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f3c:	f001 f89a 	bl	8002074 <HAL_ADC_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f46:	f000 fcdd 	bl	8001904 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f5c:	f001 f8ce 	bl	80020fc <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f66:	f000 fccd 	bl	8001904 <Error_Handler>
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000288 	.word	0x20000288
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	0f000001 	.word	0x0f000001

08000f80 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_ADC2_Init+0x98>)
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <MX_ADC2_Init+0x9c>)
 8000f96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_ADC2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <MX_ADC2_Init+0xa0>)
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fe0:	f001 f848 	bl	8002074 <HAL_ADC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 fc8b 	bl	8001904 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_ADC2_Init+0x98>)
 8001000:	f001 f87c 	bl	80020fc <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800100a:	f000 fc7b 	bl	8001904 <Error_Handler>
  }

}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000240 	.word	0x20000240
 800101c:	40012100 	.word	0x40012100
 8001020:	0f000001 	.word	0x0f000001

08001024 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2e      	ldr	r2, [pc, #184]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d128      	bne.n	8001098 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <HAL_ADC_MspInit+0xe0>)
 8001092:	f002 f8c9 	bl	8003228 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001096:	e02c      	b.n	80010f2 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_ADC_MspInit+0xe4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d127      	bne.n	80010f2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010da:	2302      	movs	r3, #2
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_ADC_MspInit+0xe0>)
 80010ee:	f002 f89b 	bl	8003228 <HAL_GPIO_Init>
}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012000 	.word	0x40012000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40012100 	.word	0x40012100

0800110c <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_DAC_Init+0x64>)
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <MX_DAC_Init+0x68>)
 800111e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_DAC_Init+0x64>)
 8001122:	f001 fb2a 	bl	800277a <HAL_DAC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800112c:	f000 fbea 	bl	8001904 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001130:	2324      	movs	r3, #36	; 0x24
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	480c      	ldr	r0, [pc, #48]	; (8001170 <MX_DAC_Init+0x64>)
 8001140:	f001 fc0a 	bl	8002958 <HAL_DAC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800114a:	f000 fbdb 	bl	8001904 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800114e:	232c      	movs	r3, #44	; 0x2c
 8001150:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2210      	movs	r2, #16
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_DAC_Init+0x64>)
 800115a:	f001 fbfd 	bl	8002958 <HAL_DAC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8001164:	f000 fbce 	bl	8001904 <Error_Handler>
  }

}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000330 	.word	0x20000330
 8001174:	40007400 	.word	0x40007400

08001178 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_DAC_MspInit+0x140>)
 8001196:	4293      	cmp	r3, r2
 8001198:	f040 808a 	bne.w	80012b0 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011d4:	2330      	movs	r3, #48	; 0x30
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4836      	ldr	r0, [pc, #216]	; (80012c0 <HAL_DAC_MspInit+0x148>)
 80011e8:	f002 f81e 	bl	8003228 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 80011ee:	4a36      	ldr	r2, [pc, #216]	; (80012c8 <HAL_DAC_MspInit+0x150>)
 80011f0:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 80011f4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011f8:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 80011fc:	2240      	movs	r2, #64	; 0x40
 80011fe:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001214:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001218:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001224:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001232:	4824      	ldr	r0, [pc, #144]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001234:	f001 fc68 	bl	8002b08 <HAL_DMA_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800123e:	f000 fb61 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001250:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <HAL_DAC_MspInit+0x158>)
 8001252:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001256:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800125a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_DAC_MspInit+0x154>)
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_DAC_MspInit+0x154>)
 800126a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001276:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_DAC_MspInit+0x154>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001286:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_DAC_MspInit+0x154>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001296:	f001 fc37 	bl	8002b08 <HAL_DMA_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80012a0:	f000 fb30 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_DAC_MspInit+0x154>)
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_DAC_MspInit+0x154>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40007400 	.word	0x40007400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	200002d0 	.word	0x200002d0
 80012c8:	40026088 	.word	0x40026088
 80012cc:	20000344 	.word	0x20000344
 80012d0:	400260a0 	.word	0x400260a0

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_DMA_Init+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <MX_DMA_Init+0x88>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_DMA_Init+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_DMA_Init+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <MX_DMA_Init+0x88>)
 8001300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_DMA_Init+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2010      	movs	r0, #16
 8001318:	f001 f9f9 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800131c:	2010      	movs	r0, #16
 800131e:	f001 fa12 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2011      	movs	r0, #17
 8001328:	f001 f9f1 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800132c:	2011      	movs	r0, #17
 800132e:	f001 fa0a 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	203a      	movs	r0, #58	; 0x3a
 8001338:	f001 f9e9 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800133c:	203a      	movs	r0, #58	; 0x3a
 800133e:	f001 fa02 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2046      	movs	r0, #70	; 0x46
 8001348:	f001 f9e1 	bl	800270e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800134c:	2046      	movs	r0, #70	; 0x46
 800134e:	f001 f9fa 	bl	8002746 <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_GPIO_Init+0x68>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <MX_GPIO_Init+0x68>)
 8001370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_GPIO_Init+0x68>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_GPIO_Init+0x68>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <MX_GPIO_Init+0x68>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <MX_GPIO_Init+0x68>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_GPIO_Init+0x68>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <MX_GPIO_Init+0x68>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_GPIO_Init+0x68>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_I2C1_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_I2C1_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_I2C1_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <MX_I2C1_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_I2C1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_I2C1_Init+0x74>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_I2C1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_I2C1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_I2C1_Init+0x74>)
 800140a:	f002 f8b7 	bl	800357c <HAL_I2C_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 fa76 	bl	8001904 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001418:	2100      	movs	r1, #0
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <MX_I2C1_Init+0x74>)
 800141c:	f002 f9e6 	bl	80037ec <HAL_I2CEx_ConfigAnalogFilter>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001426:	f000 fa6d 	bl	8001904 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_I2C1_Init+0x74>)
 800142e:	f002 fa19 	bl	8003864 <HAL_I2CEx_ConfigDigitalFilter>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001438:	f000 fa64 	bl	8001904 <Error_Handler>
  }

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003a4 	.word	0x200003a4
 8001444:	40005400 	.word	0x40005400
 8001448:	000186a0 	.word	0x000186a0

0800144c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_I2C_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148e:	2312      	movs	r3, #18
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001492:	2301      	movs	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149a:	2304      	movs	r3, #4
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <HAL_I2C_MspInit+0x8c>)
 80014a6:	f001 febf 	bl	8003228 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400
 80014dc:	00000000 	.word	0x00000000

080014e0 <get_sine_val>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 72000000;	// APB1 Timer Clocks
int Period = 1;				// Tim2 Period


void get_sine_val(void){
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	e06b      	b.n	80015c4 <get_sine_val+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f827 	bl	8000544 <__aeabi_i2d>
 80014f6:	a340      	add	r3, pc, #256	; (adr r3, 80015f8 <get_sine_val+0x118>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f88c 	bl	8000618 <__aeabi_dmul>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	4618      	mov	r0, r3
 8001506:	4621      	mov	r1, r4
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <get_sine_val+0x100>)
 800150e:	f7ff f9ad 	bl	800086c <__aeabi_ddiv>
 8001512:	4603      	mov	r3, r0
 8001514:	460c      	mov	r4, r1
 8001516:	ec44 3b17 	vmov	d7, r3, r4
 800151a:	eeb0 0a47 	vmov.f32	s0, s14
 800151e:	eef0 0a67 	vmov.f32	s1, s15
 8001522:	f009 fac9 	bl	800aab8 <sin>
 8001526:	ec51 0b10 	vmov	r0, r1, d0
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <get_sine_val+0x104>)
 8001530:	f7fe febc 	bl	80002ac <__adddf3>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	4625      	mov	r5, r4
 800153a:	461c      	mov	r4, r3
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <get_sine_val+0x108>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0fda      	lsrs	r2, r3, #31
 8001542:	4413      	add	r3, r2
 8001544:	105b      	asrs	r3, r3, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fffc 	bl	8000544 <__aeabi_i2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff f860 	bl	8000618 <__aeabi_dmul>
 8001558:	4603      	mov	r3, r0
 800155a:	460c      	mov	r4, r1
 800155c:	4618      	mov	r0, r3
 800155e:	4621      	mov	r1, r4
 8001560:	f7ff fb1c 	bl	8000b9c <__aeabi_d2uiz>
 8001564:	4601      	mov	r1, r0
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <get_sine_val+0x10c>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <get_sine_val+0x110>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe6 	bl	8000544 <__aeabi_i2d>
 8001578:	4605      	mov	r5, r0
 800157a:	460e      	mov	r6, r1
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <get_sine_val+0x10c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffcd 	bl	8000524 <__aeabi_ui2d>
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <get_sine_val+0x114>)
 800158c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001590:	461a      	mov	r2, r3
 8001592:	4623      	mov	r3, r4
 8001594:	f7ff f840 	bl	8000618 <__aeabi_dmul>
 8001598:	4603      	mov	r3, r0
 800159a:	460c      	mov	r4, r1
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	4628      	mov	r0, r5
 80015a2:	4631      	mov	r1, r6
 80015a4:	f7fe fe82 	bl	80002ac <__adddf3>
 80015a8:	4603      	mov	r3, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	4618      	mov	r0, r3
 80015ae:	4621      	mov	r1, r4
 80015b0:	f7ff faf4 	bl	8000b9c <__aeabi_d2uiz>
 80015b4:	4601      	mov	r1, r0
 80015b6:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <get_sine_val+0x10c>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3301      	adds	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2bc7      	cmp	r3, #199	; 0xc7
 80015c8:	dd90      	ble.n	80014ec <get_sine_val+0xc>
	}
	sine_val[Ns] = 0;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <get_sine_val+0x10c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	40690000 	.word	0x40690000
 80015e4:	3ff00000 	.word	0x3ff00000
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000404 	.word	0x20000404
 80015f0:	20000010 	.word	0x20000010
 80015f4:	20000008 	.word	0x20000008
 80015f8:	4d12d84a 	.word	0x4d12d84a
 80015fc:	400921fb 	.word	0x400921fb

08001600 <set_clock_TIM2>:



void set_clock_TIM2(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_1*(Period + 1) ) - 1;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <set_clock_TIM2+0x5c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a15      	ldr	r2, [pc, #84]	; (8001660 <set_clock_TIM2+0x60>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	099b      	lsrs	r3, r3, #6
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <set_clock_TIM2+0x64>)
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	3201      	adds	r2, #1
 8001616:	4914      	ldr	r1, [pc, #80]	; (8001668 <set_clock_TIM2+0x68>)
 8001618:	6809      	ldr	r1, [r1, #0]
 800161a:	fb01 f202 	mul.w	r2, r1, r2
 800161e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001622:	3b01      	subs	r3, #1
 8001624:	461a      	mov	r2, r3
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <set_clock_TIM2+0x6c>)
 8001628:	601a      	str	r2, [r3, #0]

	  htim2.Instance = TIM2;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <set_clock_TIM2+0x70>)
 800162c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001630:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <set_clock_TIM2+0x64>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <set_clock_TIM2+0x70>)
 800163a:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <set_clock_TIM2+0x6c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <set_clock_TIM2+0x70>)
 8001644:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001646:	480a      	ldr	r0, [pc, #40]	; (8001670 <set_clock_TIM2+0x70>)
 8001648:	f003 ff30 	bl	80054ac <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <set_clock_TIM2+0x56>
	  {
	    Error_Handler();
 8001652:	f000 f957 	bl	8001904 <Error_Handler>
	  }
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000001c 	.word	0x2000001c
 8001660:	51eb851f 	.word	0x51eb851f
 8001664:	20000020 	.word	0x20000020
 8001668:	20000014 	.word	0x20000014
 800166c:	20000400 	.word	0x20000400
 8001670:	2000076c 	.word	0x2000076c

08001674 <set_clock_TIM4>:

void set_clock_TIM4(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_2*(Period + 1) ) - 1;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <set_clock_TIM4+0x58>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <set_clock_TIM4+0x5c>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <set_clock_TIM4+0x60>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	3201      	adds	r2, #1
 800168a:	4913      	ldr	r1, [pc, #76]	; (80016d8 <set_clock_TIM4+0x64>)
 800168c:	6809      	ldr	r1, [r1, #0]
 800168e:	fb01 f202 	mul.w	r2, r1, r2
 8001692:	fbb3 f3f2 	udiv	r3, r3, r2
 8001696:	3b01      	subs	r3, #1
 8001698:	461a      	mov	r2, r3
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <set_clock_TIM4+0x68>)
 800169c:	601a      	str	r2, [r3, #0]

	  htim4.Instance = TIM4;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <set_clock_TIM4+0x6c>)
 80016a0:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <set_clock_TIM4+0x70>)
 80016a2:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period = Period; //+1
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <set_clock_TIM4+0x60>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <set_clock_TIM4+0x6c>)
 80016ac:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <set_clock_TIM4+0x68>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <set_clock_TIM4+0x6c>)
 80016b6:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <set_clock_TIM4+0x6c>)
 80016ba:	f003 fef7 	bl	80054ac <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <set_clock_TIM4+0x54>
	  {
	    Error_Handler();
 80016c4:	f000 f91e 	bl	8001904 <Error_Handler>
	  }
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000001c 	.word	0x2000001c
 80016d0:	51eb851f 	.word	0x51eb851f
 80016d4:	20000020 	.word	0x20000020
 80016d8:	20000018 	.word	0x20000018
 80016dc:	20000400 	.word	0x20000400
 80016e0:	2000072c 	.word	0x2000072c
 80016e4:	40000800 	.word	0x40000800

080016e8 <HAL_UART_RxCpltCallback>:
/* Setting up UART communications*/
#define uartSize 8
uint8_t rx_buff[uartSize];
uint8_t tx_buff[] = {0,1,2,3,4,5,6,7};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

	// Do something

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 80016f0:	2208      	movs	r2, #8
 80016f2:	4904      	ldr	r1, [pc, #16]	; (8001704 <HAL_UART_RxCpltCallback+0x1c>)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <HAL_UART_RxCpltCallback+0x20>)
 80016f6:	f004 fa4f 	bl	8005b98 <HAL_UART_Receive_DMA>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200003f8 	.word	0x200003f8
 8001708:	2000086c 	.word	0x2000086c

0800170c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	int i = 100;
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	60fb      	str	r3, [r7, #12]
	while(i>0){
 8001718:	e002      	b.n	8001720 <HAL_UART_TxCpltCallback+0x14>
		i = i -1;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3b01      	subs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
	while(i>0){
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	dcf9      	bgt.n	800171a <HAL_UART_TxCpltCallback+0xe>
	}

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 8001726:	2208      	movs	r2, #8
 8001728:	4903      	ldr	r1, [pc, #12]	; (8001738 <HAL_UART_TxCpltCallback+0x2c>)
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <HAL_UART_TxCpltCallback+0x30>)
 800172c:	f004 fa34 	bl	8005b98 <HAL_UART_Receive_DMA>
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200003f8 	.word	0x200003f8
 800173c:	2000086c 	.word	0x2000086c

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001746:	f000 fc01 	bl	8001f4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800174a:	f000 f871 	bl	8001830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174e:	f7ff fe07 	bl	8001360 <MX_GPIO_Init>
  MX_DMA_Init();
 8001752:	f7ff fdbf 	bl	80012d4 <MX_DMA_Init>
  MX_DAC_Init();
 8001756:	f7ff fcd9 	bl	800110c <MX_DAC_Init>
  MX_TIM2_Init();
 800175a:	f000 f9b9 	bl	8001ad0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800175e:	f000 fa03 	bl	8001b68 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8001762:	f008 f85f 	bl	8009824 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001766:	f7ff fbb9 	bl	8000edc <MX_ADC1_Init>
  MX_ADC2_Init();
 800176a:	f7ff fc09 	bl	8000f80 <MX_ADC2_Init>
  MX_I2C1_Init();
 800176e:	f7ff fe2d 	bl	80013cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001772:	f000 fa7b 	bl	8001c6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001776:	f000 faa3 	bl	8001cc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Sine function */
  set_clock_TIM2();						// Setting frequency of timer 2
 800177a:	f7ff ff41 	bl	8001600 <set_clock_TIM2>
  set_clock_TIM4();						// Setting frequency of timer 4
 800177e:	f7ff ff79 	bl	8001674 <set_clock_TIM4>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 8001782:	4821      	ldr	r0, [pc, #132]	; (8001808 <main+0xc8>)
 8001784:	f003 febd 	bl	8005502 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);			// Start timer 4
 8001788:	4820      	ldr	r0, [pc, #128]	; (800180c <main+0xcc>)
 800178a:	f003 feba 	bl	8005502 <HAL_TIM_Base_Start>
  get_sine_val();						// Call get sineval function
 800178e:	f7ff fea7 	bl	80014e0 <get_sine_val>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	23c8      	movs	r3, #200	; 0xc8
 8001798:	4a1d      	ldr	r2, [pc, #116]	; (8001810 <main+0xd0>)
 800179a:	2100      	movs	r1, #0
 800179c:	481d      	ldr	r0, [pc, #116]	; (8001814 <main+0xd4>)
 800179e:	f001 f80f 	bl	80027c0 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 80017a2:	2300      	movs	r3, #0
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	23c8      	movs	r3, #200	; 0xc8
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <main+0xd0>)
 80017aa:	2110      	movs	r1, #16
 80017ac:	4819      	ldr	r0, [pc, #100]	; (8001814 <main+0xd4>)
 80017ae:	f001 f807 	bl	80027c0 <HAL_DAC_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
 80017b2:	2208      	movs	r2, #8
 80017b4:	4918      	ldr	r1, [pc, #96]	; (8001818 <main+0xd8>)
 80017b6:	4819      	ldr	r0, [pc, #100]	; (800181c <main+0xdc>)
 80017b8:	f004 f9ee 	bl	8005b98 <HAL_UART_Receive_DMA>
	HAL_Delay(100);
 80017bc:	2064      	movs	r0, #100	; 0x64
 80017be:	f000 fc37 	bl	8002030 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart1, tx_buff, uartSize);
 80017c2:	2208      	movs	r2, #8
 80017c4:	4916      	ldr	r1, [pc, #88]	; (8001820 <main+0xe0>)
 80017c6:	4815      	ldr	r0, [pc, #84]	; (800181c <main+0xdc>)
 80017c8:	f004 f97a 	bl	8005ac0 <HAL_UART_Transmit_DMA>

	sprintf(txBuf, "%u\r\n", count);
 80017cc:	4b15      	ldr	r3, [pc, #84]	; (8001824 <main+0xe4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	461a      	mov	r2, r3
 80017d2:	4915      	ldr	r1, [pc, #84]	; (8001828 <main+0xe8>)
 80017d4:	4815      	ldr	r0, [pc, #84]	; (800182c <main+0xec>)
 80017d6:	f008 fe1f 	bl	800a418 <siprintf>
	count++;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <main+0xe4>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	4b10      	ldr	r3, [pc, #64]	; (8001824 <main+0xe4>)
 80017e4:	701a      	strb	r2, [r3, #0]

	if (count>100){
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <main+0xe4>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d902      	bls.n	80017f4 <main+0xb4>
		count = 1;
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <main+0xe4>)
 80017f0:	2201      	movs	r2, #1
 80017f2:	701a      	strb	r2, [r3, #0]
	}

	CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 80017f4:	480d      	ldr	r0, [pc, #52]	; (800182c <main+0xec>)
 80017f6:	f7fe fcfb 	bl	80001f0 <strlen>
 80017fa:	4603      	mov	r3, r0
 80017fc:	b29b      	uxth	r3, r3
 80017fe:	4619      	mov	r1, r3
 8001800:	480a      	ldr	r0, [pc, #40]	; (800182c <main+0xec>)
 8001802:	f008 f8cd 	bl	80099a0 <CDC_Transmit_FS>
	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
 8001806:	e7d4      	b.n	80017b2 <main+0x72>
 8001808:	2000076c 	.word	0x2000076c
 800180c:	2000072c 	.word	0x2000072c
 8001810:	20000404 	.word	0x20000404
 8001814:	20000330 	.word	0x20000330
 8001818:	200003f8 	.word	0x200003f8
 800181c:	2000086c 	.word	0x2000086c
 8001820:	20000024 	.word	0x20000024
 8001824:	2000002c 	.word	0x2000002c
 8001828:	0800baf8 	.word	0x0800baf8
 800182c:	20000724 	.word	0x20000724

08001830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	; 0x50
 8001834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2230      	movs	r2, #48	; 0x30
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f008 fd2a 	bl	800a298 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	4b28      	ldr	r3, [pc, #160]	; (80018fc <SystemClock_Config+0xcc>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a27      	ldr	r2, [pc, #156]	; (80018fc <SystemClock_Config+0xcc>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b25      	ldr	r3, [pc, #148]	; (80018fc <SystemClock_Config+0xcc>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	4b22      	ldr	r3, [pc, #136]	; (8001900 <SystemClock_Config+0xd0>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800187c:	4a20      	ldr	r2, [pc, #128]	; (8001900 <SystemClock_Config+0xd0>)
 800187e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001882:	6013      	str	r3, [r2, #0]
 8001884:	4b1e      	ldr	r3, [pc, #120]	; (8001900 <SystemClock_Config+0xd0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188c:	607b      	str	r3, [r7, #4]
 800188e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001890:	2301      	movs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800189a:	2302      	movs	r3, #2
 800189c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800189e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018a4:	2304      	movs	r3, #4
 80018a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018a8:	2348      	movs	r3, #72	; 0x48
 80018aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ac:	2302      	movs	r3, #2
 80018ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018b0:	2303      	movs	r3, #3
 80018b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018b4:	f107 0320 	add.w	r3, r7, #32
 80018b8:	4618      	mov	r0, r3
 80018ba:	f003 f995 	bl	8004be8 <HAL_RCC_OscConfig>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80018c4:	f000 f81e 	bl	8001904 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018c8:	230f      	movs	r3, #15
 80018ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018cc:	2302      	movs	r3, #2
 80018ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018de:	f107 030c 	add.w	r3, r7, #12
 80018e2:	2102      	movs	r1, #2
 80018e4:	4618      	mov	r0, r3
 80018e6:	f003 fbef 	bl	80050c8 <HAL_RCC_ClockConfig>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018f0:	f000 f808 	bl	8001904 <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	3750      	adds	r7, #80	; 0x50
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40023800 	.word	0x40023800
 8001900:	40007000 	.word	0x40007000

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
	...

08001914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b10      	ldr	r3, [pc, #64]	; (8001960 <HAL_MspInit+0x4c>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a0f      	ldr	r2, [pc, #60]	; (8001960 <HAL_MspInit+0x4c>)
 8001924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b0d      	ldr	r3, [pc, #52]	; (8001960 <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b09      	ldr	r3, [pc, #36]	; (8001960 <HAL_MspInit+0x4c>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	4a08      	ldr	r2, [pc, #32]	; (8001960 <HAL_MspInit+0x4c>)
 8001940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001944:	6413      	str	r3, [r2, #64]	; 0x40
 8001946:	4b06      	ldr	r3, [pc, #24]	; (8001960 <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001952:	bf00      	nop
 8001954:	370c      	adds	r7, #12
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	40023800 	.word	0x40023800

08001964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001976:	e7fe      	b.n	8001976 <HardFault_Handler+0x4>

08001978 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800197c:	e7fe      	b.n	800197c <MemManage_Handler+0x4>

0800197e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <BusFault_Handler+0x4>

08001984 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <UsageFault_Handler+0x4>

0800198a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001998:	b480      	push	{r7}
 800199a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr

080019a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b8:	f000 fb1a 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}

080019c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <DMA1_Stream5_IRQHandler+0x10>)
 80019c6:	f001 f9c7 	bl	8002d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200002d0 	.word	0x200002d0

080019d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <DMA1_Stream6_IRQHandler+0x10>)
 80019da:	f001 f9bd 	bl	8002d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000344 	.word	0x20000344

080019e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <USART1_IRQHandler+0x10>)
 80019ee:	f004 f953 	bl	8005c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000086c 	.word	0x2000086c

080019fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <USART2_IRQHandler+0x10>)
 8001a02:	f004 f949 	bl	8005c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200008ac 	.word	0x200008ac

08001a10 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <DMA2_Stream2_IRQHandler+0x10>)
 8001a16:	f001 f99f 	bl	8002d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2000080c 	.word	0x2000080c

08001a24 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <OTG_FS_IRQHandler+0x10>)
 8001a2a:	f002 f8aa 	bl	8003b82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	20001dc0 	.word	0x20001dc0

08001a38 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <DMA2_Stream7_IRQHandler+0x10>)
 8001a3e:	f001 f98b 	bl	8002d58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001a42:	bf00      	nop
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200007ac 	.word	0x200007ac

08001a4c <_sbrk>:
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <_sbrk+0x50>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d102      	bne.n	8001a62 <_sbrk+0x16>
 8001a5c:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <_sbrk+0x50>)
 8001a5e:	4a10      	ldr	r2, [pc, #64]	; (8001aa0 <_sbrk+0x54>)
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	4b0e      	ldr	r3, [pc, #56]	; (8001a9c <_sbrk+0x50>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	4b0c      	ldr	r3, [pc, #48]	; (8001a9c <_sbrk+0x50>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4413      	add	r3, r2
 8001a70:	466a      	mov	r2, sp
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d907      	bls.n	8001a86 <_sbrk+0x3a>
 8001a76:	f008 fbd5 	bl	800a224 <__errno>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	230c      	movs	r3, #12
 8001a7e:	6013      	str	r3, [r2, #0]
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
 8001a84:	e006      	b.n	8001a94 <_sbrk+0x48>
 8001a86:	4b05      	ldr	r3, [pc, #20]	; (8001a9c <_sbrk+0x50>)
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <_sbrk+0x50>)
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	20000230 	.word	0x20000230
 8001aa0:	200021d0 	.word	0x200021d0

08001aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b08      	ldr	r3, [pc, #32]	; (8001acc <SystemInit+0x28>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	4a07      	ldr	r2, [pc, #28]	; (8001acc <SystemInit+0x28>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <SystemInit+0x28>)
 8001aba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001abe:	609a      	str	r2, [r3, #8]
#endif
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001aee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001b00:	4b18      	ldr	r3, [pc, #96]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b0c:	4b15      	ldr	r3, [pc, #84]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b0e:	2280      	movs	r2, #128	; 0x80
 8001b10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b12:	4814      	ldr	r0, [pc, #80]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b14:	f003 fcca 	bl	80054ac <HAL_TIM_Base_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001b1e:	f7ff fef1 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480d      	ldr	r0, [pc, #52]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b30:	f003 fd0b 	bl	800554a <HAL_TIM_ConfigClockSource>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001b3a:	f7ff fee3 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b3e:	2320      	movs	r3, #32
 8001b40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b46:	463b      	mov	r3, r7
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4806      	ldr	r0, [pc, #24]	; (8001b64 <MX_TIM2_Init+0x94>)
 8001b4c:	f003 feee 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b56:	f7ff fed5 	bl	8001904 <Error_Handler>
  }

}
 8001b5a:	bf00      	nop
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	2000076c 	.word	0x2000076c

08001b68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001b86:	4a1d      	ldr	r2, [pc, #116]	; (8001bfc <MX_TIM4_Init+0x94>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b19      	ldr	r3, [pc, #100]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8001b96:	4b18      	ldr	r3, [pc, #96]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ba8:	4813      	ldr	r0, [pc, #76]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001baa:	f003 fc7f 	bl	80054ac <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001bb4:	f7ff fea6 	bl	8001904 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001bc6:	f003 fcc0 	bl	800554a <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001bd0:	f7ff fe98 	bl	8001904 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bd4:	2320      	movs	r3, #32
 8001bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <MX_TIM4_Init+0x90>)
 8001be2:	f003 fea3 	bl	800592c <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001bec:	f7ff fe8a 	bl	8001904 <Error_Handler>
  }

}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	2000072c 	.word	0x2000072c
 8001bfc:	40000800 	.word	0x40000800

08001c00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b085      	sub	sp, #20
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c10:	d10e      	bne.n	8001c30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_TIM_Base_MspInit+0x64>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <HAL_TIM_Base_MspInit+0x64>)
 8001c1c:	f043 0301 	orr.w	r3, r3, #1
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b10      	ldr	r3, [pc, #64]	; (8001c64 <HAL_TIM_Base_MspInit+0x64>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	60fb      	str	r3, [r7, #12]
 8001c2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c2e:	e012      	b.n	8001c56 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a0c      	ldr	r2, [pc, #48]	; (8001c68 <HAL_TIM_Base_MspInit+0x68>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d10d      	bne.n	8001c56 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60bb      	str	r3, [r7, #8]
 8001c3e:	4b09      	ldr	r3, [pc, #36]	; (8001c64 <HAL_TIM_Base_MspInit+0x64>)
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	4a08      	ldr	r2, [pc, #32]	; (8001c64 <HAL_TIM_Base_MspInit+0x64>)
 8001c44:	f043 0304 	orr.w	r3, r3, #4
 8001c48:	6413      	str	r3, [r2, #64]	; 0x40
 8001c4a:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <HAL_TIM_Base_MspInit+0x64>)
 8001c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4e:	f003 0304 	and.w	r3, r3, #4
 8001c52:	60bb      	str	r3, [r7, #8]
 8001c54:	68bb      	ldr	r3, [r7, #8]
}
 8001c56:	bf00      	nop
 8001c58:	3714      	adds	r7, #20
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c60:	4770      	bx	lr
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40000800 	.word	0x40000800

08001c6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <MX_USART1_UART_Init+0x50>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c78:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001c7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c86:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c8a:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c8c:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c94:	220c      	movs	r2, #12
 8001c96:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c98:	4b07      	ldr	r3, [pc, #28]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9e:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <MX_USART1_UART_Init+0x4c>)
 8001ca6:	f003 febd 	bl	8005a24 <HAL_UART_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001cb0:	f7ff fe28 	bl	8001904 <Error_Handler>
  }

}
 8001cb4:	bf00      	nop
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	2000086c 	.word	0x2000086c
 8001cbc:	40011000 	.word	0x40011000

08001cc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001cc4:	4b11      	ldr	r3, [pc, #68]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cc6:	4a12      	ldr	r2, [pc, #72]	; (8001d10 <MX_USART2_UART_Init+0x50>)
 8001cc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cca:	4b10      	ldr	r3, [pc, #64]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001ccc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cd8:	4b0c      	ldr	r3, [pc, #48]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cde:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ce4:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001ce6:	220c      	movs	r2, #12
 8001ce8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cea:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf0:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cf6:	4805      	ldr	r0, [pc, #20]	; (8001d0c <MX_USART2_UART_Init+0x4c>)
 8001cf8:	f003 fe94 	bl	8005a24 <HAL_UART_Init>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d02:	f7ff fdff 	bl	8001904 <Error_Handler>
  }

}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	200008ac 	.word	0x200008ac
 8001d10:	40004400 	.word	0x40004400

08001d14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b08c      	sub	sp, #48	; 0x30
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d1c:	f107 031c 	add.w	r3, r7, #28
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
 8001d28:	60da      	str	r2, [r3, #12]
 8001d2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a69      	ldr	r2, [pc, #420]	; (8001ed8 <HAL_UART_MspInit+0x1c4>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	f040 8092 	bne.w	8001e5c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d38:	2300      	movs	r3, #0
 8001d3a:	61bb      	str	r3, [r7, #24]
 8001d3c:	4b67      	ldr	r3, [pc, #412]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001d3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d40:	4a66      	ldr	r2, [pc, #408]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001d42:	f043 0310 	orr.w	r3, r3, #16
 8001d46:	6453      	str	r3, [r2, #68]	; 0x44
 8001d48:	4b64      	ldr	r3, [pc, #400]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	61bb      	str	r3, [r7, #24]
 8001d52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d54:	2300      	movs	r3, #0
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	4b60      	ldr	r3, [pc, #384]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5c:	4a5f      	ldr	r2, [pc, #380]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001d5e:	f043 0301 	orr.w	r3, r3, #1
 8001d62:	6313      	str	r3, [r2, #48]	; 0x30
 8001d64:	4b5d      	ldr	r3, [pc, #372]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	617b      	str	r3, [r7, #20]
 8001d6e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d76:	2302      	movs	r3, #2
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d82:	2307      	movs	r3, #7
 8001d84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d86:	f107 031c 	add.w	r3, r7, #28
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4854      	ldr	r0, [pc, #336]	; (8001ee0 <HAL_UART_MspInit+0x1cc>)
 8001d8e:	f001 fa4b 	bl	8003228 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d92:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001d94:	4a54      	ldr	r2, [pc, #336]	; (8001ee8 <HAL_UART_MspInit+0x1d4>)
 8001d96:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d98:	4b52      	ldr	r3, [pc, #328]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001d9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001da0:	4b50      	ldr	r3, [pc, #320]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001da6:	4b4f      	ldr	r3, [pc, #316]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001dac:	4b4d      	ldr	r3, [pc, #308]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001dae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001db2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001db4:	4b4b      	ldr	r3, [pc, #300]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dba:	4b4a      	ldr	r3, [pc, #296]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001dc0:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001dc6:	4b47      	ldr	r3, [pc, #284]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001dd2:	4844      	ldr	r0, [pc, #272]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001dd4:	f000 fe98 	bl	8002b08 <HAL_DMA_Init>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001dde:	f7ff fd91 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a3f      	ldr	r2, [pc, #252]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34
 8001de8:	4a3e      	ldr	r2, [pc, #248]	; (8001ee4 <HAL_UART_MspInit+0x1d0>)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001dee:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001df0:	4a3f      	ldr	r2, [pc, #252]	; (8001ef0 <HAL_UART_MspInit+0x1dc>)
 8001df2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001df4:	4b3d      	ldr	r3, [pc, #244]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001df6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dfa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dfc:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001dfe:	2240      	movs	r2, #64	; 0x40
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e02:	4b3a      	ldr	r3, [pc, #232]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e08:	4b38      	ldr	r3, [pc, #224]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e10:	4b36      	ldr	r3, [pc, #216]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e16:	4b35      	ldr	r3, [pc, #212]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001e1c:	4b33      	ldr	r3, [pc, #204]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e22:	4b32      	ldr	r3, [pc, #200]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e2e:	482f      	ldr	r0, [pc, #188]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e30:	f000 fe6a 	bl	8002b08 <HAL_DMA_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001e3a:	f7ff fd63 	bl	8001904 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e42:	631a      	str	r2, [r3, #48]	; 0x30
 8001e44:	4a29      	ldr	r2, [pc, #164]	; (8001eec <HAL_UART_MspInit+0x1d8>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2025      	movs	r0, #37	; 0x25
 8001e50:	f000 fc5d 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e54:	2025      	movs	r0, #37	; 0x25
 8001e56:	f000 fc76 	bl	8002746 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e5a:	e038      	b.n	8001ece <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a24      	ldr	r2, [pc, #144]	; (8001ef4 <HAL_UART_MspInit+0x1e0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d133      	bne.n	8001ece <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	613b      	str	r3, [r7, #16]
 8001e6a:	4b1c      	ldr	r3, [pc, #112]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6e:	4a1b      	ldr	r2, [pc, #108]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e74:	6413      	str	r3, [r2, #64]	; 0x40
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	4b15      	ldr	r3, [pc, #84]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	6313      	str	r3, [r2, #48]	; 0x30
 8001e92:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_UART_MspInit+0x1c8>)
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	60fb      	str	r3, [r7, #12]
 8001e9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e9e:	230c      	movs	r3, #12
 8001ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001eae:	2307      	movs	r3, #7
 8001eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001eb2:	f107 031c 	add.w	r3, r7, #28
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	4809      	ldr	r0, [pc, #36]	; (8001ee0 <HAL_UART_MspInit+0x1cc>)
 8001eba:	f001 f9b5 	bl	8003228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	2100      	movs	r1, #0
 8001ec2:	2026      	movs	r0, #38	; 0x26
 8001ec4:	f000 fc23 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ec8:	2026      	movs	r0, #38	; 0x26
 8001eca:	f000 fc3c 	bl	8002746 <HAL_NVIC_EnableIRQ>
}
 8001ece:	bf00      	nop
 8001ed0:	3730      	adds	r7, #48	; 0x30
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40011000 	.word	0x40011000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000
 8001ee4:	2000080c 	.word	0x2000080c
 8001ee8:	40026440 	.word	0x40026440
 8001eec:	200007ac 	.word	0x200007ac
 8001ef0:	400264b8 	.word	0x400264b8
 8001ef4:	40004400 	.word	0x40004400

08001ef8 <Reset_Handler>:
 8001ef8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f30 <LoopFillZerobss+0x14>
 8001efc:	2100      	movs	r1, #0
 8001efe:	e003      	b.n	8001f08 <LoopCopyDataInit>

08001f00 <CopyDataInit>:
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <LoopFillZerobss+0x18>)
 8001f02:	585b      	ldr	r3, [r3, r1]
 8001f04:	5043      	str	r3, [r0, r1]
 8001f06:	3104      	adds	r1, #4

08001f08 <LoopCopyDataInit>:
 8001f08:	480b      	ldr	r0, [pc, #44]	; (8001f38 <LoopFillZerobss+0x1c>)
 8001f0a:	4b0c      	ldr	r3, [pc, #48]	; (8001f3c <LoopFillZerobss+0x20>)
 8001f0c:	1842      	adds	r2, r0, r1
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d3f6      	bcc.n	8001f00 <CopyDataInit>
 8001f12:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <LoopFillZerobss+0x24>)
 8001f14:	e002      	b.n	8001f1c <LoopFillZerobss>

08001f16 <FillZerobss>:
 8001f16:	2300      	movs	r3, #0
 8001f18:	f842 3b04 	str.w	r3, [r2], #4

08001f1c <LoopFillZerobss>:
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <LoopFillZerobss+0x28>)
 8001f1e:	429a      	cmp	r2, r3
 8001f20:	d3f9      	bcc.n	8001f16 <FillZerobss>
 8001f22:	f7ff fdbf 	bl	8001aa4 <SystemInit>
 8001f26:	f008 f983 	bl	800a230 <__libc_init_array>
 8001f2a:	f7ff fc09 	bl	8001740 <main>
 8001f2e:	4770      	bx	lr
 8001f30:	20030000 	.word	0x20030000
 8001f34:	0800bd88 	.word	0x0800bd88
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	20000214 	.word	0x20000214
 8001f40:	20000214 	.word	0x20000214
 8001f44:	200021cc 	.word	0x200021cc

08001f48 <ADC_IRQHandler>:
 8001f48:	e7fe      	b.n	8001f48 <ADC_IRQHandler>
	...

08001f4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f50:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_Init+0x40>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a0d      	ldr	r2, [pc, #52]	; (8001f8c <HAL_Init+0x40>)
 8001f56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_Init+0x40>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a0a      	ldr	r2, [pc, #40]	; (8001f8c <HAL_Init+0x40>)
 8001f62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f68:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <HAL_Init+0x40>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a07      	ldr	r2, [pc, #28]	; (8001f8c <HAL_Init+0x40>)
 8001f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f74:	2003      	movs	r0, #3
 8001f76:	f000 fbbf 	bl	80026f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f000 f808 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f80:	f7ff fcc8 	bl	8001914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	40023c00 	.word	0x40023c00

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fbd7 	bl	8002762 <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f000 fb9f 	bl	800270e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000030 	.word	0x20000030
 8001fe8:	20000038 	.word	0x20000038
 8001fec:	20000034 	.word	0x20000034

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000038 	.word	0x20000038
 8002014:	200008ec 	.word	0x200008ec

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	200008ec 	.word	0x200008ec

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_Delay+0x40>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	20000038 	.word	0x20000038

08002074 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e033      	b.n	80020f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	2b00      	cmp	r3, #0
 8002090:	d109      	bne.n	80020a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f7fe ffc6 	bl	8001024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f003 0310 	and.w	r3, r3, #16
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d118      	bne.n	80020e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020ba:	f023 0302 	bic.w	r3, r3, #2
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 f94a 	bl	8002360 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
 80020e2:	e001      	b.n	80020e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
	...

080020fc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_ADC_ConfigChannel+0x1c>
 8002114:	2302      	movs	r3, #2
 8002116:	e113      	b.n	8002340 <HAL_ADC_ConfigChannel+0x244>
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b09      	cmp	r3, #9
 8002126:	d925      	bls.n	8002174 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	68d9      	ldr	r1, [r3, #12]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	b29b      	uxth	r3, r3
 8002134:	461a      	mov	r2, r3
 8002136:	4613      	mov	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	4413      	add	r3, r2
 800213c:	3b1e      	subs	r3, #30
 800213e:	2207      	movs	r2, #7
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	43da      	mvns	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	400a      	ands	r2, r1
 800214c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	68d9      	ldr	r1, [r3, #12]
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689a      	ldr	r2, [r3, #8]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4618      	mov	r0, r3
 8002160:	4603      	mov	r3, r0
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	4403      	add	r3, r0
 8002166:	3b1e      	subs	r3, #30
 8002168:	409a      	lsls	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	430a      	orrs	r2, r1
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	e022      	b.n	80021ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	6919      	ldr	r1, [r3, #16]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	4613      	mov	r3, r2
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4413      	add	r3, r2
 8002188:	2207      	movs	r2, #7
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	43da      	mvns	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	400a      	ands	r2, r1
 8002196:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	6919      	ldr	r1, [r3, #16]
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	689a      	ldr	r2, [r3, #8]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	4618      	mov	r0, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	4403      	add	r3, r0
 80021b0:	409a      	lsls	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d824      	bhi.n	800220c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685a      	ldr	r2, [r3, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	4413      	add	r3, r2
 80021d2:	3b05      	subs	r3, #5
 80021d4:	221f      	movs	r2, #31
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43da      	mvns	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	400a      	ands	r2, r1
 80021e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	b29b      	uxth	r3, r3
 80021f0:	4618      	mov	r0, r3
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b05      	subs	r3, #5
 80021fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	635a      	str	r2, [r3, #52]	; 0x34
 800220a:	e04c      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b0c      	cmp	r3, #12
 8002212:	d824      	bhi.n	800225e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	3b23      	subs	r3, #35	; 0x23
 8002226:	221f      	movs	r2, #31
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	43da      	mvns	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	400a      	ands	r2, r1
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	b29b      	uxth	r3, r3
 8002242:	4618      	mov	r0, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685a      	ldr	r2, [r3, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	3b23      	subs	r3, #35	; 0x23
 8002250:	fa00 f203 	lsl.w	r2, r0, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
 800225c:	e023      	b.n	80022a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685a      	ldr	r2, [r3, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	3b41      	subs	r3, #65	; 0x41
 8002270:	221f      	movs	r2, #31
 8002272:	fa02 f303 	lsl.w	r3, r2, r3
 8002276:	43da      	mvns	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	400a      	ands	r2, r1
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	b29b      	uxth	r3, r3
 800228c:	4618      	mov	r0, r3
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685a      	ldr	r2, [r3, #4]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	3b41      	subs	r3, #65	; 0x41
 800229a:	fa00 f203 	lsl.w	r2, r0, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022a6:	4b29      	ldr	r3, [pc, #164]	; (800234c <HAL_ADC_ConfigChannel+0x250>)
 80022a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a28      	ldr	r2, [pc, #160]	; (8002350 <HAL_ADC_ConfigChannel+0x254>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d10f      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1d8>
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2b12      	cmp	r3, #18
 80022ba:	d10b      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a1d      	ldr	r2, [pc, #116]	; (8002350 <HAL_ADC_ConfigChannel+0x254>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d12b      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x23a>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a1c      	ldr	r2, [pc, #112]	; (8002354 <HAL_ADC_ConfigChannel+0x258>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d003      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x1f4>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b11      	cmp	r3, #17
 80022ee:	d122      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a11      	ldr	r2, [pc, #68]	; (8002354 <HAL_ADC_ConfigChannel+0x258>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d111      	bne.n	8002336 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002312:	4b11      	ldr	r3, [pc, #68]	; (8002358 <HAL_ADC_ConfigChannel+0x25c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a11      	ldr	r2, [pc, #68]	; (800235c <HAL_ADC_ConfigChannel+0x260>)
 8002318:	fba2 2303 	umull	r2, r3, r2, r3
 800231c:	0c9a      	lsrs	r2, r3, #18
 800231e:	4613      	mov	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	4413      	add	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002328:	e002      	b.n	8002330 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	3b01      	subs	r3, #1
 800232e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1f9      	bne.n	800232a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr
 800234c:	40012300 	.word	0x40012300
 8002350:	40012000 	.word	0x40012000
 8002354:	10000012 	.word	0x10000012
 8002358:	20000030 	.word	0x20000030
 800235c:	431bde83 	.word	0x431bde83

08002360 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002368:	4b79      	ldr	r3, [pc, #484]	; (8002550 <ADC_Init+0x1f0>)
 800236a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	685a      	ldr	r2, [r3, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	431a      	orrs	r2, r3
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	685a      	ldr	r2, [r3, #4]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002394:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6859      	ldr	r1, [r3, #4]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	021a      	lsls	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	685a      	ldr	r2, [r3, #4]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80023b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6859      	ldr	r1, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689a      	ldr	r2, [r3, #8]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6899      	ldr	r1, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023f2:	4a58      	ldr	r2, [pc, #352]	; (8002554 <ADC_Init+0x1f4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d022      	beq.n	800243e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002406:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689a      	ldr	r2, [r3, #8]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002428:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	6899      	ldr	r1, [r3, #8]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]
 800243c:	e00f      	b.n	800245e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689a      	ldr	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800244c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800245c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689a      	ldr	r2, [r3, #8]
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f022 0202 	bic.w	r2, r2, #2
 800246c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	6899      	ldr	r1, [r3, #8]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	7e1b      	ldrb	r3, [r3, #24]
 8002478:	005a      	lsls	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d01b      	beq.n	80024c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800249a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80024aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6859      	ldr	r1, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b6:	3b01      	subs	r3, #1
 80024b8:	035a      	lsls	r2, r3, #13
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	430a      	orrs	r2, r1
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	e007      	b.n	80024d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	685a      	ldr	r2, [r3, #4]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	051a      	lsls	r2, r3, #20
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	430a      	orrs	r2, r1
 80024f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002508:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002516:	025a      	lsls	r2, r3, #9
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800252e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6899      	ldr	r1, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	029a      	lsls	r2, r3, #10
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	430a      	orrs	r2, r1
 8002542:	609a      	str	r2, [r3, #8]
}
 8002544:	bf00      	nop
 8002546:	3714      	adds	r7, #20
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40012300 	.word	0x40012300
 8002554:	0f000001 	.word	0x0f000001

08002558 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002568:	4b0c      	ldr	r3, [pc, #48]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002574:	4013      	ands	r3, r2
 8002576:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002580:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002588:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800258a:	4a04      	ldr	r2, [pc, #16]	; (800259c <__NVIC_SetPriorityGrouping+0x44>)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	60d3      	str	r3, [r2, #12]
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr
 800259c:	e000ed00 	.word	0xe000ed00

080025a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025a4:	4b04      	ldr	r3, [pc, #16]	; (80025b8 <__NVIC_GetPriorityGrouping+0x18>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	0a1b      	lsrs	r3, r3, #8
 80025aa:	f003 0307 	and.w	r3, r3, #7
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	db0b      	blt.n	80025e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	f003 021f 	and.w	r2, r3, #31
 80025d4:	4907      	ldr	r1, [pc, #28]	; (80025f4 <__NVIC_EnableIRQ+0x38>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	2001      	movs	r0, #1
 80025de:	fa00 f202 	lsl.w	r2, r0, r2
 80025e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	e000e100 	.word	0xe000e100

080025f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	4603      	mov	r3, r0
 8002600:	6039      	str	r1, [r7, #0]
 8002602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002608:	2b00      	cmp	r3, #0
 800260a:	db0a      	blt.n	8002622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	b2da      	uxtb	r2, r3
 8002610:	490c      	ldr	r1, [pc, #48]	; (8002644 <__NVIC_SetPriority+0x4c>)
 8002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002616:	0112      	lsls	r2, r2, #4
 8002618:	b2d2      	uxtb	r2, r2
 800261a:	440b      	add	r3, r1
 800261c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002620:	e00a      	b.n	8002638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	b2da      	uxtb	r2, r3
 8002626:	4908      	ldr	r1, [pc, #32]	; (8002648 <__NVIC_SetPriority+0x50>)
 8002628:	79fb      	ldrb	r3, [r7, #7]
 800262a:	f003 030f 	and.w	r3, r3, #15
 800262e:	3b04      	subs	r3, #4
 8002630:	0112      	lsls	r2, r2, #4
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	440b      	add	r3, r1
 8002636:	761a      	strb	r2, [r3, #24]
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr
 8002644:	e000e100 	.word	0xe000e100
 8002648:	e000ed00 	.word	0xe000ed00

0800264c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800264c:	b480      	push	{r7}
 800264e:	b089      	sub	sp, #36	; 0x24
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	f1c3 0307 	rsb	r3, r3, #7
 8002666:	2b04      	cmp	r3, #4
 8002668:	bf28      	it	cs
 800266a:	2304      	movcs	r3, #4
 800266c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	3304      	adds	r3, #4
 8002672:	2b06      	cmp	r3, #6
 8002674:	d902      	bls.n	800267c <NVIC_EncodePriority+0x30>
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3b03      	subs	r3, #3
 800267a:	e000      	b.n	800267e <NVIC_EncodePriority+0x32>
 800267c:	2300      	movs	r3, #0
 800267e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002680:	f04f 32ff 	mov.w	r2, #4294967295
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	43da      	mvns	r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	401a      	ands	r2, r3
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002694:	f04f 31ff 	mov.w	r1, #4294967295
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	fa01 f303 	lsl.w	r3, r1, r3
 800269e:	43d9      	mvns	r1, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026a4:	4313      	orrs	r3, r2
         );
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
	...

080026b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026c4:	d301      	bcc.n	80026ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2301      	movs	r3, #1
 80026c8:	e00f      	b.n	80026ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <SysTick_Config+0x40>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026d2:	210f      	movs	r1, #15
 80026d4:	f04f 30ff 	mov.w	r0, #4294967295
 80026d8:	f7ff ff8e 	bl	80025f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026dc:	4b05      	ldr	r3, [pc, #20]	; (80026f4 <SysTick_Config+0x40>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <SysTick_Config+0x40>)
 80026e4:	2207      	movs	r2, #7
 80026e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	e000e010 	.word	0xe000e010

080026f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff29 	bl	8002558 <__NVIC_SetPriorityGrouping>
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800270e:	b580      	push	{r7, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
 800271a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002720:	f7ff ff3e 	bl	80025a0 <__NVIC_GetPriorityGrouping>
 8002724:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68b9      	ldr	r1, [r7, #8]
 800272a:	6978      	ldr	r0, [r7, #20]
 800272c:	f7ff ff8e 	bl	800264c <NVIC_EncodePriority>
 8002730:	4602      	mov	r2, r0
 8002732:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002736:	4611      	mov	r1, r2
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff ff5d 	bl	80025f8 <__NVIC_SetPriority>
}
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b082      	sub	sp, #8
 800274a:	af00      	add	r7, sp, #0
 800274c:	4603      	mov	r3, r0
 800274e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff ff31 	bl	80025bc <__NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}

08002762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002762:	b580      	push	{r7, lr}
 8002764:	b082      	sub	sp, #8
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f7ff ffa2 	bl	80026b4 <SysTick_Config>
 8002770:	4603      	mov	r3, r0
}
 8002772:	4618      	mov	r0, r3
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e014      	b.n	80027b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	791b      	ldrb	r3, [r3, #4]
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d105      	bne.n	80027a2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f7fe fceb 	bl	8001178 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2202      	movs	r2, #2
 80027a6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80027b4:	2300      	movs	r3, #0
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
	...

080027c0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	607a      	str	r2, [r7, #4]
 80027cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80027ce:	2300      	movs	r3, #0
 80027d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	795b      	ldrb	r3, [r3, #5]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d101      	bne.n	80027de <HAL_DAC_Start_DMA+0x1e>
 80027da:	2302      	movs	r3, #2
 80027dc:	e08e      	b.n	80028fc <HAL_DAC_Start_DMA+0x13c>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2201      	movs	r2, #1
 80027e2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2202      	movs	r2, #2
 80027e8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d12a      	bne.n	8002846 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	4a43      	ldr	r2, [pc, #268]	; (8002904 <HAL_DAC_Start_DMA+0x144>)
 80027f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	4a42      	ldr	r2, [pc, #264]	; (8002908 <HAL_DAC_Start_DMA+0x148>)
 80027fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a41      	ldr	r2, [pc, #260]	; (800290c <HAL_DAC_Start_DMA+0x14c>)
 8002806:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002816:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	2b04      	cmp	r3, #4
 800281c:	d009      	beq.n	8002832 <HAL_DAC_Start_DMA+0x72>
 800281e:	2b08      	cmp	r3, #8
 8002820:	d00c      	beq.n	800283c <HAL_DAC_Start_DMA+0x7c>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d000      	beq.n	8002828 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002826:	e039      	b.n	800289c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3308      	adds	r3, #8
 800282e:	617b      	str	r3, [r7, #20]
        break;
 8002830:	e034      	b.n	800289c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	617b      	str	r3, [r7, #20]
        break;
 800283a:	e02f      	b.n	800289c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	3310      	adds	r3, #16
 8002842:	617b      	str	r3, [r7, #20]
        break;
 8002844:	e02a      	b.n	800289c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	4a31      	ldr	r2, [pc, #196]	; (8002910 <HAL_DAC_Start_DMA+0x150>)
 800284c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4a30      	ldr	r2, [pc, #192]	; (8002914 <HAL_DAC_Start_DMA+0x154>)
 8002854:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <HAL_DAC_Start_DMA+0x158>)
 800285c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800286c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800286e:	6a3b      	ldr	r3, [r7, #32]
 8002870:	2b04      	cmp	r3, #4
 8002872:	d009      	beq.n	8002888 <HAL_DAC_Start_DMA+0xc8>
 8002874:	2b08      	cmp	r3, #8
 8002876:	d00c      	beq.n	8002892 <HAL_DAC_Start_DMA+0xd2>
 8002878:	2b00      	cmp	r3, #0
 800287a:	d000      	beq.n	800287e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800287c:	e00e      	b.n	800289c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	3314      	adds	r3, #20
 8002884:	617b      	str	r3, [r7, #20]
        break;
 8002886:	e009      	b.n	800289c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3318      	adds	r3, #24
 800288e:	617b      	str	r3, [r7, #20]
        break;
 8002890:	e004      	b.n	800289c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	331c      	adds	r3, #28
 8002898:	617b      	str	r3, [r7, #20]
        break;
 800289a:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80028b0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6898      	ldr	r0, [r3, #8]
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	f000 f9d2 	bl	8002c64 <HAL_DMA_Start_IT>
 80028c0:	e00e      	b.n	80028e0 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80028d0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	68d8      	ldr	r0, [r3, #12]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	f000 f9c2 	bl	8002c64 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6819      	ldr	r1, [r3, #0]
 80028e6:	2201      	movs	r2, #1
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	409a      	lsls	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	430a      	orrs	r2, r1
 80028f2:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	080029f3 	.word	0x080029f3
 8002908:	08002a15 	.word	0x08002a15
 800290c:	08002a31 	.word	0x08002a31
 8002910:	08002a9b 	.word	0x08002a9b
 8002914:	08002abd 	.word	0x08002abd
 8002918:	08002ad9 	.word	0x08002ad9

0800291c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800294c:	bf00      	nop
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr

08002958 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002958:	b480      	push	{r7}
 800295a:	b087      	sub	sp, #28
 800295c:	af00      	add	r7, sp, #0
 800295e:	60f8      	str	r0, [r7, #12]
 8002960:	60b9      	str	r1, [r7, #8]
 8002962:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	795b      	ldrb	r3, [r3, #5]
 8002970:	2b01      	cmp	r3, #1
 8002972:	d101      	bne.n	8002978 <HAL_DAC_ConfigChannel+0x20>
 8002974:	2302      	movs	r3, #2
 8002976:	e036      	b.n	80029e6 <HAL_DAC_ConfigChannel+0x8e>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2201      	movs	r2, #1
 800297c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2202      	movs	r2, #2
 8002982:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800298c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	43db      	mvns	r3, r3
 8002998:	697a      	ldr	r2, [r7, #20]
 800299a:	4013      	ands	r3, r2
 800299c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	681a      	ldr	r2, [r3, #0]
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	fa02 f303 	lsl.w	r3, r2, r3
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	697a      	ldr	r2, [r7, #20]
 80029be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6819      	ldr	r1, [r3, #0]
 80029c6:	22c0      	movs	r2, #192	; 0xc0
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	fa02 f303 	lsl.w	r3, r2, r3
 80029ce:	43da      	mvns	r2, r3
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	400a      	ands	r2, r1
 80029d6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2201      	movs	r2, #1
 80029dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2200      	movs	r2, #0
 80029e2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b084      	sub	sp, #16
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fe:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f7ff ff8b 	bl	800291c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	711a      	strb	r2, [r3, #4]
}
 8002a0c:	bf00      	nop
 8002a0e:	3710      	adds	r7, #16
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a20:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002a22:	68f8      	ldr	r0, [r7, #12]
 8002a24:	f7ff ff84 	bl	8002930 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a28:	bf00      	nop
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a3c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f043 0204 	orr.w	r2, r3, #4
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002a4a:	68f8      	ldr	r0, [r7, #12]
 8002a4c:	f7ff ff7a 	bl	8002944 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	711a      	strb	r2, [r3, #4]
}
 8002a56:	bf00      	nop
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}

08002a5e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	b083      	sub	sp, #12
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b083      	sub	sp, #12
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a7a:	bf00      	nop
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b083      	sub	sp, #12
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b084      	sub	sp, #16
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f7ff ffd8 	bl	8002a5e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	711a      	strb	r2, [r3, #4]
}
 8002ab4:	bf00      	nop
 8002ab6:	3710      	adds	r7, #16
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff ffd1 	bl	8002a72 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	f043 0204 	orr.w	r2, r3, #4
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002af2:	68f8      	ldr	r0, [r7, #12]
 8002af4:	f7ff ffc7 	bl	8002a86 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	711a      	strb	r2, [r3, #4]
}
 8002afe:	bf00      	nop
 8002b00:	3710      	adds	r7, #16
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
	...

08002b08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b086      	sub	sp, #24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b14:	f7ff fa80 	bl	8002018 <HAL_GetTick>
 8002b18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d101      	bne.n	8002b24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e099      	b.n	8002c58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0201 	bic.w	r2, r2, #1
 8002b42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b44:	e00f      	b.n	8002b66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b46:	f7ff fa67 	bl	8002018 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b05      	cmp	r3, #5
 8002b52:	d908      	bls.n	8002b66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2220      	movs	r2, #32
 8002b58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2203      	movs	r2, #3
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e078      	b.n	8002c58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1e8      	bne.n	8002b46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b7c:	697a      	ldr	r2, [r7, #20]
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_DMA_Init+0x158>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	691b      	ldr	r3, [r3, #16]
 8002b98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	699b      	ldr	r3, [r3, #24]
 8002ba4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002baa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a1b      	ldr	r3, [r3, #32]
 8002bb0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002bb2:	697a      	ldr	r2, [r7, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbc:	2b04      	cmp	r3, #4
 8002bbe:	d107      	bne.n	8002bd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f023 0307 	bic.w	r3, r3, #7
 8002be6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d117      	bne.n	8002c2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	697a      	ldr	r2, [r7, #20]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f000 fa91 	bl	8003134 <DMA_CheckFifoParam>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2240      	movs	r2, #64	; 0x40
 8002c1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c26:	2301      	movs	r3, #1
 8002c28:	e016      	b.n	8002c58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 fa48 	bl	80030c8 <DMA_CalcBaseAndBitshift>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c40:	223f      	movs	r2, #63	; 0x3f
 8002c42:	409a      	lsls	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	3718      	adds	r7, #24
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	f010803f 	.word	0xf010803f

08002c64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
 8002c70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d101      	bne.n	8002c8a <HAL_DMA_Start_IT+0x26>
 8002c86:	2302      	movs	r3, #2
 8002c88:	e040      	b.n	8002d0c <HAL_DMA_Start_IT+0xa8>
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d12f      	bne.n	8002cfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f000 f9da 	bl	800306c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbc:	223f      	movs	r2, #63	; 0x3f
 8002cbe:	409a      	lsls	r2, r3
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f042 0216 	orr.w	r2, r2, #22
 8002cd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0208 	orr.w	r2, r2, #8
 8002cea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f042 0201 	orr.w	r2, r2, #1
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e005      	b.n	8002d0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d06:	2302      	movs	r3, #2
 8002d08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3718      	adds	r7, #24
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d004      	beq.n	8002d32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e00c      	b.n	8002d4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2205      	movs	r2, #5
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d64:	4b92      	ldr	r3, [pc, #584]	; (8002fb0 <HAL_DMA_IRQHandler+0x258>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a92      	ldr	r2, [pc, #584]	; (8002fb4 <HAL_DMA_IRQHandler+0x25c>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	0a9b      	lsrs	r3, r3, #10
 8002d70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	2208      	movs	r2, #8
 8002d84:	409a      	lsls	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d01a      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d013      	beq.n	8002dc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0204 	bic.w	r2, r2, #4
 8002daa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db0:	2208      	movs	r2, #8
 8002db2:	409a      	lsls	r2, r3
 8002db4:	693b      	ldr	r3, [r7, #16]
 8002db6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dbc:	f043 0201 	orr.w	r2, r3, #1
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2201      	movs	r2, #1
 8002dca:	409a      	lsls	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	4013      	ands	r3, r2
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d012      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	695b      	ldr	r3, [r3, #20]
 8002dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d00b      	beq.n	8002dfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de6:	2201      	movs	r2, #1
 8002de8:	409a      	lsls	r2, r3
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002df2:	f043 0202 	orr.w	r2, r3, #2
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfe:	2204      	movs	r2, #4
 8002e00:	409a      	lsls	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d012      	beq.n	8002e30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0302 	and.w	r3, r3, #2
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00b      	beq.n	8002e30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	2204      	movs	r2, #4
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e28:	f043 0204 	orr.w	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	2210      	movs	r2, #16
 8002e36:	409a      	lsls	r2, r3
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d043      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d03c      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e52:	2210      	movs	r2, #16
 8002e54:	409a      	lsls	r2, r3
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d018      	beq.n	8002e9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d108      	bne.n	8002e88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d024      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	4798      	blx	r3
 8002e86:	e01f      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	4798      	blx	r3
 8002e98:	e016      	b.n	8002ec8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d107      	bne.n	8002eb8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 0208 	bic.w	r2, r2, #8
 8002eb6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ecc:	2220      	movs	r2, #32
 8002ece:	409a      	lsls	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 808e 	beq.w	8002ff6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8086 	beq.w	8002ff6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	2220      	movs	r2, #32
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b05      	cmp	r3, #5
 8002f00:	d136      	bne.n	8002f70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0216 	bic.w	r2, r2, #22
 8002f10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	695a      	ldr	r2, [r3, #20]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d103      	bne.n	8002f32 <HAL_DMA_IRQHandler+0x1da>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d007      	beq.n	8002f42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681a      	ldr	r2, [r3, #0]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0208 	bic.w	r2, r2, #8
 8002f40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f46:	223f      	movs	r2, #63	; 0x3f
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d07d      	beq.n	8003062 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	4798      	blx	r3
        }
        return;
 8002f6e:	e078      	b.n	8003062 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01c      	beq.n	8002fb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d108      	bne.n	8002f9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d030      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	4798      	blx	r3
 8002f9c:	e02b      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d027      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	4798      	blx	r3
 8002fae:	e022      	b.n	8002ff6 <HAL_DMA_IRQHandler+0x29e>
 8002fb0:	20000030 	.word	0x20000030
 8002fb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10f      	bne.n	8002fe6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0210 	bic.w	r2, r2, #16
 8002fd4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d032      	beq.n	8003064 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	2b00      	cmp	r3, #0
 8003008:	d022      	beq.n	8003050 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2205      	movs	r2, #5
 800300e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f022 0201 	bic.w	r2, r2, #1
 8003020:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	3301      	adds	r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	429a      	cmp	r2, r3
 800302c:	d307      	bcc.n	800303e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f2      	bne.n	8003022 <HAL_DMA_IRQHandler+0x2ca>
 800303c:	e000      	b.n	8003040 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800303e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d005      	beq.n	8003064 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	4798      	blx	r3
 8003060:	e000      	b.n	8003064 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003062:	bf00      	nop
    }
  }
}
 8003064:	3718      	adds	r7, #24
 8003066:	46bd      	mov	sp, r7
 8003068:	bd80      	pop	{r7, pc}
 800306a:	bf00      	nop

0800306c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
 8003078:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003088:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	683a      	ldr	r2, [r7, #0]
 8003090:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	2b40      	cmp	r3, #64	; 0x40
 8003098:	d108      	bne.n	80030ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68ba      	ldr	r2, [r7, #8]
 80030a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030aa:	e007      	b.n	80030bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68ba      	ldr	r2, [r7, #8]
 80030b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	60da      	str	r2, [r3, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b085      	sub	sp, #20
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	3b10      	subs	r3, #16
 80030d8:	4a14      	ldr	r2, [pc, #80]	; (800312c <DMA_CalcBaseAndBitshift+0x64>)
 80030da:	fba2 2303 	umull	r2, r3, r2, r3
 80030de:	091b      	lsrs	r3, r3, #4
 80030e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030e2:	4a13      	ldr	r2, [pc, #76]	; (8003130 <DMA_CalcBaseAndBitshift+0x68>)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4413      	add	r3, r2
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	461a      	mov	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d909      	bls.n	800310a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	1d1a      	adds	r2, r3, #4
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	659a      	str	r2, [r3, #88]	; 0x58
 8003108:	e007      	b.n	800311a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	aaaaaaab 	.word	0xaaaaaaab
 8003130:	0800bb60 	.word	0x0800bb60

08003134 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d11f      	bne.n	800318e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b03      	cmp	r3, #3
 8003152:	d855      	bhi.n	8003200 <DMA_CheckFifoParam+0xcc>
 8003154:	a201      	add	r2, pc, #4	; (adr r2, 800315c <DMA_CheckFifoParam+0x28>)
 8003156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315a:	bf00      	nop
 800315c:	0800316d 	.word	0x0800316d
 8003160:	0800317f 	.word	0x0800317f
 8003164:	0800316d 	.word	0x0800316d
 8003168:	08003201 	.word	0x08003201
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003170:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003174:	2b00      	cmp	r3, #0
 8003176:	d045      	beq.n	8003204 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800317c:	e042      	b.n	8003204 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003186:	d13f      	bne.n	8003208 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800318c:	e03c      	b.n	8003208 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003196:	d121      	bne.n	80031dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b03      	cmp	r3, #3
 800319c:	d836      	bhi.n	800320c <DMA_CheckFifoParam+0xd8>
 800319e:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <DMA_CheckFifoParam+0x70>)
 80031a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031bb 	.word	0x080031bb
 80031ac:	080031b5 	.word	0x080031b5
 80031b0:	080031cd 	.word	0x080031cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	73fb      	strb	r3, [r7, #15]
      break;
 80031b8:	e02f      	b.n	800321a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d024      	beq.n	8003210 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031ca:	e021      	b.n	8003210 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031d4:	d11e      	bne.n	8003214 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031da:	e01b      	b.n	8003214 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d902      	bls.n	80031e8 <DMA_CheckFifoParam+0xb4>
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d003      	beq.n	80031ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031e6:	e018      	b.n	800321a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	73fb      	strb	r3, [r7, #15]
      break;
 80031ec:	e015      	b.n	800321a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00e      	beq.n	8003218 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	73fb      	strb	r3, [r7, #15]
      break;
 80031fe:	e00b      	b.n	8003218 <DMA_CheckFifoParam+0xe4>
      break;
 8003200:	bf00      	nop
 8003202:	e00a      	b.n	800321a <DMA_CheckFifoParam+0xe6>
      break;
 8003204:	bf00      	nop
 8003206:	e008      	b.n	800321a <DMA_CheckFifoParam+0xe6>
      break;
 8003208:	bf00      	nop
 800320a:	e006      	b.n	800321a <DMA_CheckFifoParam+0xe6>
      break;
 800320c:	bf00      	nop
 800320e:	e004      	b.n	800321a <DMA_CheckFifoParam+0xe6>
      break;
 8003210:	bf00      	nop
 8003212:	e002      	b.n	800321a <DMA_CheckFifoParam+0xe6>
      break;   
 8003214:	bf00      	nop
 8003216:	e000      	b.n	800321a <DMA_CheckFifoParam+0xe6>
      break;
 8003218:	bf00      	nop
    }
  } 
  
  return status; 
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003232:	2300      	movs	r3, #0
 8003234:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800323a:	2300      	movs	r3, #0
 800323c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
 8003242:	e177      	b.n	8003534 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003244:	2201      	movs	r2, #1
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4013      	ands	r3, r2
 8003256:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	429a      	cmp	r2, r3
 800325e:	f040 8166 	bne.w	800352e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d00b      	beq.n	8003282 <HAL_GPIO_Init+0x5a>
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d007      	beq.n	8003282 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003276:	2b11      	cmp	r3, #17
 8003278:	d003      	beq.n	8003282 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b12      	cmp	r3, #18
 8003280:	d130      	bne.n	80032e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	2203      	movs	r2, #3
 800328e:	fa02 f303 	lsl.w	r3, r2, r3
 8003292:	43db      	mvns	r3, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4013      	ands	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	69ba      	ldr	r2, [r7, #24]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032b8:	2201      	movs	r2, #1
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	091b      	lsrs	r3, r3, #4
 80032ce:	f003 0201 	and.w	r2, r3, #1
 80032d2:	69fb      	ldr	r3, [r7, #28]
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	69ba      	ldr	r2, [r7, #24]
 80032e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	2203      	movs	r2, #3
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43db      	mvns	r3, r3
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4013      	ands	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	689a      	ldr	r2, [r3, #8]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0xfc>
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	2b12      	cmp	r3, #18
 8003322:	d123      	bne.n	800336c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003324:	69fb      	ldr	r3, [r7, #28]
 8003326:	08da      	lsrs	r2, r3, #3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	3208      	adds	r2, #8
 800332c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003330:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	f003 0307 	and.w	r3, r3, #7
 8003338:	009b      	lsls	r3, r3, #2
 800333a:	220f      	movs	r2, #15
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	691a      	ldr	r2, [r3, #16]
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	08da      	lsrs	r2, r3, #3
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	3208      	adds	r2, #8
 8003366:	69b9      	ldr	r1, [r7, #24]
 8003368:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	2203      	movs	r2, #3
 8003378:	fa02 f303 	lsl.w	r3, r2, r3
 800337c:	43db      	mvns	r3, r3
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	4013      	ands	r3, r2
 8003382:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 0203 	and.w	r2, r3, #3
 800338c:	69fb      	ldr	r3, [r7, #28]
 800338e:	005b      	lsls	r3, r3, #1
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4313      	orrs	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f000 80c0 	beq.w	800352e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <HAL_GPIO_Init+0x320>)
 80033b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033b6:	4a64      	ldr	r2, [pc, #400]	; (8003548 <HAL_GPIO_Init+0x320>)
 80033b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033bc:	6453      	str	r3, [r2, #68]	; 0x44
 80033be:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_GPIO_Init+0x320>)
 80033c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033c6:	60fb      	str	r3, [r7, #12]
 80033c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80033ca:	4a60      	ldr	r2, [pc, #384]	; (800354c <HAL_GPIO_Init+0x324>)
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	089b      	lsrs	r3, r3, #2
 80033d0:	3302      	adds	r3, #2
 80033d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	f003 0303 	and.w	r3, r3, #3
 80033de:	009b      	lsls	r3, r3, #2
 80033e0:	220f      	movs	r2, #15
 80033e2:	fa02 f303 	lsl.w	r3, r2, r3
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	4a57      	ldr	r2, [pc, #348]	; (8003550 <HAL_GPIO_Init+0x328>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d037      	beq.n	8003466 <HAL_GPIO_Init+0x23e>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a56      	ldr	r2, [pc, #344]	; (8003554 <HAL_GPIO_Init+0x32c>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d031      	beq.n	8003462 <HAL_GPIO_Init+0x23a>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a55      	ldr	r2, [pc, #340]	; (8003558 <HAL_GPIO_Init+0x330>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d02b      	beq.n	800345e <HAL_GPIO_Init+0x236>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a54      	ldr	r2, [pc, #336]	; (800355c <HAL_GPIO_Init+0x334>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d025      	beq.n	800345a <HAL_GPIO_Init+0x232>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a53      	ldr	r2, [pc, #332]	; (8003560 <HAL_GPIO_Init+0x338>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01f      	beq.n	8003456 <HAL_GPIO_Init+0x22e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a52      	ldr	r2, [pc, #328]	; (8003564 <HAL_GPIO_Init+0x33c>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d019      	beq.n	8003452 <HAL_GPIO_Init+0x22a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a51      	ldr	r2, [pc, #324]	; (8003568 <HAL_GPIO_Init+0x340>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <HAL_GPIO_Init+0x226>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a50      	ldr	r2, [pc, #320]	; (800356c <HAL_GPIO_Init+0x344>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00d      	beq.n	800344a <HAL_GPIO_Init+0x222>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a4f      	ldr	r2, [pc, #316]	; (8003570 <HAL_GPIO_Init+0x348>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <HAL_GPIO_Init+0x21e>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a4e      	ldr	r2, [pc, #312]	; (8003574 <HAL_GPIO_Init+0x34c>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d101      	bne.n	8003442 <HAL_GPIO_Init+0x21a>
 800343e:	2309      	movs	r3, #9
 8003440:	e012      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003442:	230a      	movs	r3, #10
 8003444:	e010      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003446:	2308      	movs	r3, #8
 8003448:	e00e      	b.n	8003468 <HAL_GPIO_Init+0x240>
 800344a:	2307      	movs	r3, #7
 800344c:	e00c      	b.n	8003468 <HAL_GPIO_Init+0x240>
 800344e:	2306      	movs	r3, #6
 8003450:	e00a      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003452:	2305      	movs	r3, #5
 8003454:	e008      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003456:	2304      	movs	r3, #4
 8003458:	e006      	b.n	8003468 <HAL_GPIO_Init+0x240>
 800345a:	2303      	movs	r3, #3
 800345c:	e004      	b.n	8003468 <HAL_GPIO_Init+0x240>
 800345e:	2302      	movs	r3, #2
 8003460:	e002      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_GPIO_Init+0x240>
 8003466:	2300      	movs	r3, #0
 8003468:	69fa      	ldr	r2, [r7, #28]
 800346a:	f002 0203 	and.w	r2, r2, #3
 800346e:	0092      	lsls	r2, r2, #2
 8003470:	4093      	lsls	r3, r2
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	4313      	orrs	r3, r2
 8003476:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003478:	4934      	ldr	r1, [pc, #208]	; (800354c <HAL_GPIO_Init+0x324>)
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	089b      	lsrs	r3, r3, #2
 800347e:	3302      	adds	r3, #2
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003486:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <HAL_GPIO_Init+0x350>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034aa:	4a33      	ldr	r2, [pc, #204]	; (8003578 <HAL_GPIO_Init+0x350>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80034b0:	4b31      	ldr	r3, [pc, #196]	; (8003578 <HAL_GPIO_Init+0x350>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034d4:	4a28      	ldr	r2, [pc, #160]	; (8003578 <HAL_GPIO_Init+0x350>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034da:	4b27      	ldr	r3, [pc, #156]	; (8003578 <HAL_GPIO_Init+0x350>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034fe:	4a1e      	ldr	r2, [pc, #120]	; (8003578 <HAL_GPIO_Init+0x350>)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003504:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <HAL_GPIO_Init+0x350>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	43db      	mvns	r3, r3
 800350e:	69ba      	ldr	r2, [r7, #24]
 8003510:	4013      	ands	r3, r2
 8003512:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351c:	2b00      	cmp	r3, #0
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	4313      	orrs	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003528:	4a13      	ldr	r2, [pc, #76]	; (8003578 <HAL_GPIO_Init+0x350>)
 800352a:	69bb      	ldr	r3, [r7, #24]
 800352c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3301      	adds	r3, #1
 8003532:	61fb      	str	r3, [r7, #28]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	f67f ae84 	bls.w	8003244 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800353c:	bf00      	nop
 800353e:	3724      	adds	r7, #36	; 0x24
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40023800 	.word	0x40023800
 800354c:	40013800 	.word	0x40013800
 8003550:	40020000 	.word	0x40020000
 8003554:	40020400 	.word	0x40020400
 8003558:	40020800 	.word	0x40020800
 800355c:	40020c00 	.word	0x40020c00
 8003560:	40021000 	.word	0x40021000
 8003564:	40021400 	.word	0x40021400
 8003568:	40021800 	.word	0x40021800
 800356c:	40021c00 	.word	0x40021c00
 8003570:	40022000 	.word	0x40022000
 8003574:	40022400 	.word	0x40022400
 8003578:	40013c00 	.word	0x40013c00

0800357c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d101      	bne.n	800358e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e11f      	b.n	80037ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d106      	bne.n	80035a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7fd ff52 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2224      	movs	r2, #36	; 0x24
 80035ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f022 0201 	bic.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80035ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80035de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80035e0:	f001 ff3c 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 80035e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	4a7b      	ldr	r2, [pc, #492]	; (80037d8 <HAL_I2C_Init+0x25c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d807      	bhi.n	8003600 <HAL_I2C_Init+0x84>
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4a7a      	ldr	r2, [pc, #488]	; (80037dc <HAL_I2C_Init+0x260>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	bf94      	ite	ls
 80035f8:	2301      	movls	r3, #1
 80035fa:	2300      	movhi	r3, #0
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	e006      	b.n	800360e <HAL_I2C_Init+0x92>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4a77      	ldr	r2, [pc, #476]	; (80037e0 <HAL_I2C_Init+0x264>)
 8003604:	4293      	cmp	r3, r2
 8003606:	bf94      	ite	ls
 8003608:	2301      	movls	r3, #1
 800360a:	2300      	movhi	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e0db      	b.n	80037ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	4a72      	ldr	r2, [pc, #456]	; (80037e4 <HAL_I2C_Init+0x268>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	0c9b      	lsrs	r3, r3, #18
 8003620:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	430a      	orrs	r2, r1
 8003634:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	4a64      	ldr	r2, [pc, #400]	; (80037d8 <HAL_I2C_Init+0x25c>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d802      	bhi.n	8003650 <HAL_I2C_Init+0xd4>
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	3301      	adds	r3, #1
 800364e:	e009      	b.n	8003664 <HAL_I2C_Init+0xe8>
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003656:	fb02 f303 	mul.w	r3, r2, r3
 800365a:	4a63      	ldr	r2, [pc, #396]	; (80037e8 <HAL_I2C_Init+0x26c>)
 800365c:	fba2 2303 	umull	r2, r3, r2, r3
 8003660:	099b      	lsrs	r3, r3, #6
 8003662:	3301      	adds	r3, #1
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6812      	ldr	r2, [r2, #0]
 8003668:	430b      	orrs	r3, r1
 800366a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003676:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	4956      	ldr	r1, [pc, #344]	; (80037d8 <HAL_I2C_Init+0x25c>)
 8003680:	428b      	cmp	r3, r1
 8003682:	d80d      	bhi.n	80036a0 <HAL_I2C_Init+0x124>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	1e59      	subs	r1, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003692:	3301      	adds	r3, #1
 8003694:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003698:	2b04      	cmp	r3, #4
 800369a:	bf38      	it	cc
 800369c:	2304      	movcc	r3, #4
 800369e:	e04f      	b.n	8003740 <HAL_I2C_Init+0x1c4>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d111      	bne.n	80036cc <HAL_I2C_Init+0x150>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	1e58      	subs	r0, r3, #1
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	460b      	mov	r3, r1
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	440b      	add	r3, r1
 80036b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ba:	3301      	adds	r3, #1
 80036bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	bf0c      	ite	eq
 80036c4:	2301      	moveq	r3, #1
 80036c6:	2300      	movne	r3, #0
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	e012      	b.n	80036f2 <HAL_I2C_Init+0x176>
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	1e58      	subs	r0, r3, #1
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	460b      	mov	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	0099      	lsls	r1, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	fbb0 f3f3 	udiv	r3, r0, r3
 80036e2:	3301      	adds	r3, #1
 80036e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	bf0c      	ite	eq
 80036ec:	2301      	moveq	r3, #1
 80036ee:	2300      	movne	r3, #0
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <HAL_I2C_Init+0x17e>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e022      	b.n	8003740 <HAL_I2C_Init+0x1c4>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10e      	bne.n	8003720 <HAL_I2C_Init+0x1a4>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1e58      	subs	r0, r3, #1
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6859      	ldr	r1, [r3, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	005b      	lsls	r3, r3, #1
 800370e:	440b      	add	r3, r1
 8003710:	fbb0 f3f3 	udiv	r3, r0, r3
 8003714:	3301      	adds	r3, #1
 8003716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800371e:	e00f      	b.n	8003740 <HAL_I2C_Init+0x1c4>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	1e58      	subs	r0, r3, #1
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	460b      	mov	r3, r1
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	0099      	lsls	r1, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	fbb0 f3f3 	udiv	r3, r0, r3
 8003736:	3301      	adds	r3, #1
 8003738:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800373c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003740:	6879      	ldr	r1, [r7, #4]
 8003742:	6809      	ldr	r1, [r1, #0]
 8003744:	4313      	orrs	r3, r2
 8003746:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	69da      	ldr	r2, [r3, #28]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	431a      	orrs	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800376e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003772:	687a      	ldr	r2, [r7, #4]
 8003774:	6911      	ldr	r1, [r2, #16]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68d2      	ldr	r2, [r2, #12]
 800377a:	4311      	orrs	r1, r2
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	6812      	ldr	r2, [r2, #0]
 8003780:	430b      	orrs	r3, r1
 8003782:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	695a      	ldr	r2, [r3, #20]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	431a      	orrs	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	430a      	orrs	r2, r1
 800379e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2220      	movs	r2, #32
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	000186a0 	.word	0x000186a0
 80037dc:	001e847f 	.word	0x001e847f
 80037e0:	003d08ff 	.word	0x003d08ff
 80037e4:	431bde83 	.word	0x431bde83
 80037e8:	10624dd3 	.word	0x10624dd3

080037ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b20      	cmp	r3, #32
 8003800:	d129      	bne.n	8003856 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2224      	movs	r2, #36	; 0x24
 8003806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0201 	bic.w	r2, r2, #1
 8003818:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0210 	bic.w	r2, r2, #16
 8003828:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	430a      	orrs	r2, r1
 8003838:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f042 0201 	orr.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003856:	2302      	movs	r3, #2
  }
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800386e:	2300      	movs	r3, #0
 8003870:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003878:	b2db      	uxtb	r3, r3
 800387a:	2b20      	cmp	r3, #32
 800387c:	d12a      	bne.n	80038d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2224      	movs	r2, #36	; 0x24
 8003882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0201 	bic.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800389e:	89fb      	ldrh	r3, [r7, #14]
 80038a0:	f023 030f 	bic.w	r3, r3, #15
 80038a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	89fb      	ldrh	r3, [r7, #14]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	89fa      	ldrh	r2, [r7, #14]
 80038b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f042 0201 	orr.w	r2, r2, #1
 80038c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80038d0:	2300      	movs	r3, #0
 80038d2:	e000      	b.n	80038d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80038d4:	2302      	movs	r3, #2
  }
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3714      	adds	r7, #20
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr

080038e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80038e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038e4:	b08f      	sub	sp, #60	; 0x3c
 80038e6:	af0a      	add	r7, sp, #40	; 0x28
 80038e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e10f      	b.n	8003b14 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f006 f98c 	bl	8009c2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2203      	movs	r2, #3
 8003918:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4618      	mov	r0, r3
 8003934:	f003 f959 	bl	8006bea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	687e      	ldr	r6, [r7, #4]
 8003940:	466d      	mov	r5, sp
 8003942:	f106 0410 	add.w	r4, r6, #16
 8003946:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003948:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800394c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800394e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003952:	e885 0003 	stmia.w	r5, {r0, r1}
 8003956:	1d33      	adds	r3, r6, #4
 8003958:	cb0e      	ldmia	r3, {r1, r2, r3}
 800395a:	6838      	ldr	r0, [r7, #0]
 800395c:	f003 f830 	bl	80069c0 <USB_CoreInit>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d005      	beq.n	8003972 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2202      	movs	r2, #2
 800396a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0d0      	b.n	8003b14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	2100      	movs	r1, #0
 8003978:	4618      	mov	r0, r3
 800397a:	f003 f947 	bl	8006c0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800397e:	2300      	movs	r3, #0
 8003980:	73fb      	strb	r3, [r7, #15]
 8003982:	e04a      	b.n	8003a1a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003984:	7bfa      	ldrb	r2, [r7, #15]
 8003986:	6879      	ldr	r1, [r7, #4]
 8003988:	4613      	mov	r3, r2
 800398a:	00db      	lsls	r3, r3, #3
 800398c:	1a9b      	subs	r3, r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	333d      	adds	r3, #61	; 0x3d
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	333c      	adds	r3, #60	; 0x3c
 80039a8:	7bfa      	ldrb	r2, [r7, #15]
 80039aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80039ac:	7bfa      	ldrb	r2, [r7, #15]
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	b298      	uxth	r0, r3
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	00db      	lsls	r3, r3, #3
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	3342      	adds	r3, #66	; 0x42
 80039c0:	4602      	mov	r2, r0
 80039c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80039c4:	7bfa      	ldrb	r2, [r7, #15]
 80039c6:	6879      	ldr	r1, [r7, #4]
 80039c8:	4613      	mov	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	1a9b      	subs	r3, r3, r2
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	333f      	adds	r3, #63	; 0x3f
 80039d4:	2200      	movs	r2, #0
 80039d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80039d8:	7bfa      	ldrb	r2, [r7, #15]
 80039da:	6879      	ldr	r1, [r7, #4]
 80039dc:	4613      	mov	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	1a9b      	subs	r3, r3, r2
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	440b      	add	r3, r1
 80039e6:	3344      	adds	r3, #68	; 0x44
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039ec:	7bfa      	ldrb	r2, [r7, #15]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	3348      	adds	r3, #72	; 0x48
 80039fc:	2200      	movs	r2, #0
 80039fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003a00:	7bfa      	ldrb	r2, [r7, #15]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	00db      	lsls	r3, r3, #3
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	3350      	adds	r3, #80	; 0x50
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
 8003a16:	3301      	adds	r3, #1
 8003a18:	73fb      	strb	r3, [r7, #15]
 8003a1a:	7bfa      	ldrb	r2, [r7, #15]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d3af      	bcc.n	8003984 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a24:	2300      	movs	r3, #0
 8003a26:	73fb      	strb	r3, [r7, #15]
 8003a28:	e044      	b.n	8003ab4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003a2a:	7bfa      	ldrb	r2, [r7, #15]
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	00db      	lsls	r3, r3, #3
 8003a32:	1a9b      	subs	r3, r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	440b      	add	r3, r1
 8003a38:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003a40:	7bfa      	ldrb	r2, [r7, #15]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a52:	7bfa      	ldrb	r2, [r7, #15]
 8003a54:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a56:	7bfa      	ldrb	r2, [r7, #15]
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	00db      	lsls	r3, r3, #3
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a6c:	7bfa      	ldrb	r2, [r7, #15]
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	4613      	mov	r3, r2
 8003a72:	00db      	lsls	r3, r3, #3
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	440b      	add	r3, r1
 8003a7a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a7e:	2200      	movs	r2, #0
 8003a80:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a82:	7bfa      	ldrb	r2, [r7, #15]
 8003a84:	6879      	ldr	r1, [r7, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a98:	7bfa      	ldrb	r2, [r7, #15]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003aaa:	2200      	movs	r2, #0
 8003aac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aae:	7bfb      	ldrb	r3, [r7, #15]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	7bfa      	ldrb	r2, [r7, #15]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d3b5      	bcc.n	8003a2a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	603b      	str	r3, [r7, #0]
 8003ac4:	687e      	ldr	r6, [r7, #4]
 8003ac6:	466d      	mov	r5, sp
 8003ac8:	f106 0410 	add.w	r4, r6, #16
 8003acc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ace:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ad4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ad8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003adc:	1d33      	adds	r3, r6, #4
 8003ade:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	f003 f8bd 	bl	8006c60 <USB_DevInit>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e00d      	b.n	8003b14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	f004 f905 	bl	8007d1c <USB_DevDisconnect>

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003b1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_PCD_Start+0x1c>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e020      	b.n	8003b7a <HAL_PCD_Start+0x5e>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d109      	bne.n	8003b5c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d005      	beq.n	8003b5c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4618      	mov	r0, r3
 8003b62:	f003 f831 	bl	8006bc8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f004 f8b5 	bl	8007cda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003b82:	b590      	push	{r4, r7, lr}
 8003b84:	b08d      	sub	sp, #52	; 0x34
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 f973 	bl	8007e84 <USB_GetMode>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f040 839d 	bne.w	80042e0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f004 f8d7 	bl	8007d5e <USB_ReadInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	f000 8393 	beq.w	80042de <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f004 f8ce 	bl	8007d5e <USB_ReadInterrupts>
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d107      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f002 0202 	and.w	r2, r2, #2
 8003bda:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f004 f8bc 	bl	8007d5e <USB_ReadInterrupts>
 8003be6:	4603      	mov	r3, r0
 8003be8:	f003 0310 	and.w	r3, r3, #16
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d161      	bne.n	8003cb4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	699a      	ldr	r2, [r3, #24]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f022 0210 	bic.w	r2, r2, #16
 8003bfe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003c00:	6a3b      	ldr	r3, [r7, #32]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	f003 020f 	and.w	r2, r3, #15
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	0c5b      	lsrs	r3, r3, #17
 8003c24:	f003 030f 	and.w	r3, r3, #15
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d124      	bne.n	8003c76 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003c32:	4013      	ands	r3, r2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d035      	beq.n	8003ca4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	091b      	lsrs	r3, r3, #4
 8003c40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003c42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	461a      	mov	r2, r3
 8003c4a:	6a38      	ldr	r0, [r7, #32]
 8003c4c:	f003 ff22 	bl	8007a94 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	68da      	ldr	r2, [r3, #12]
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c5c:	441a      	add	r2, r3
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	699a      	ldr	r2, [r3, #24]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c6e:	441a      	add	r2, r3
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	619a      	str	r2, [r3, #24]
 8003c74:	e016      	b.n	8003ca4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	0c5b      	lsrs	r3, r3, #17
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	2b06      	cmp	r3, #6
 8003c80:	d110      	bne.n	8003ca4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003c88:	2208      	movs	r2, #8
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6a38      	ldr	r0, [r7, #32]
 8003c8e:	f003 ff01 	bl	8007a94 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	699a      	ldr	r2, [r3, #24]
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	091b      	lsrs	r3, r3, #4
 8003c9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c9e:	441a      	add	r2, r3
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0210 	orr.w	r2, r2, #16
 8003cb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4618      	mov	r0, r3
 8003cba:	f004 f850 	bl	8007d5e <USB_ReadInterrupts>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003cc8:	d16e      	bne.n	8003da8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f004 f856 	bl	8007d84 <USB_ReadDevAllOutEpInterrupt>
 8003cd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003cda:	e062      	b.n	8003da2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d057      	beq.n	8003d96 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	b2d2      	uxtb	r2, r2
 8003cee:	4611      	mov	r1, r2
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f004 f87b 	bl	8007dec <USB_ReadDevOutEPInterrupt>
 8003cf6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f003 0301 	and.w	r3, r3, #1
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d00c      	beq.n	8003d1c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d04:	015a      	lsls	r2, r3, #5
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	4413      	add	r3, r2
 8003d0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d0e:	461a      	mov	r2, r3
 8003d10:	2301      	movs	r3, #1
 8003d12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fdb0 	bl	800487c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00c      	beq.n	8003d40 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d28:	015a      	lsls	r2, r3, #5
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d32:	461a      	mov	r2, r3
 8003d34:	2308      	movs	r3, #8
 8003d36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003d38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 feaa 	bl	8004a94 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4c:	015a      	lsls	r2, r3, #5
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	4413      	add	r3, r2
 8003d52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d56:	461a      	mov	r2, r3
 8003d58:	2310      	movs	r3, #16
 8003d5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d008      	beq.n	8003d78 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	015a      	lsls	r2, r3, #5
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d72:	461a      	mov	r2, r3
 8003d74:	2320      	movs	r3, #32
 8003d76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d009      	beq.n	8003d96 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	461a      	mov	r2, r3
 8003d90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	3301      	adds	r3, #1
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	085b      	lsrs	r3, r3, #1
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d199      	bne.n	8003cdc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4618      	mov	r0, r3
 8003dae:	f003 ffd6 	bl	8007d5e <USB_ReadInterrupts>
 8003db2:	4603      	mov	r3, r0
 8003db4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dbc:	f040 80c0 	bne.w	8003f40 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f003 fff7 	bl	8007db8 <USB_ReadDevAllInEpInterrupt>
 8003dca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003dd0:	e0b2      	b.n	8003f38 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd4:	f003 0301 	and.w	r3, r3, #1
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80a7 	beq.w	8003f2c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f004 f81d 	bl	8007e28 <USB_ReadDevInEPInterrupt>
 8003dee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d057      	beq.n	8003eaa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dfc:	f003 030f 	and.w	r3, r3, #15
 8003e00:	2201      	movs	r2, #1
 8003e02:	fa02 f303 	lsl.w	r3, r2, r3
 8003e06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	69f9      	ldr	r1, [r7, #28]
 8003e16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d132      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	3348      	adds	r3, #72	; 0x48
 8003e48:	6819      	ldr	r1, [r3, #0]
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e4e:	4613      	mov	r3, r2
 8003e50:	00db      	lsls	r3, r3, #3
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4403      	add	r3, r0
 8003e58:	3344      	adds	r3, #68	; 0x44
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4419      	add	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	4613      	mov	r3, r2
 8003e64:	00db      	lsls	r3, r3, #3
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4403      	add	r3, r0
 8003e6c:	3348      	adds	r3, #72	; 0x48
 8003e6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d113      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x31c>
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	3350      	adds	r3, #80	; 0x50
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d108      	bne.n	8003e9e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e96:	461a      	mov	r2, r3
 8003e98:	2101      	movs	r1, #1
 8003e9a:	f004 f825 	bl	8007ee8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f005 ff42 	bl	8009d2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	f003 0308 	and.w	r3, r3, #8
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d008      	beq.n	8003ec6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb6:	015a      	lsls	r2, r3, #5
 8003eb8:	69fb      	ldr	r3, [r7, #28]
 8003eba:	4413      	add	r3, r2
 8003ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	2308      	movs	r3, #8
 8003ec4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f003 0310 	and.w	r3, r3, #16
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d008      	beq.n	8003ee2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed2:	015a      	lsls	r2, r3, #5
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	4413      	add	r3, r2
 8003ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003edc:	461a      	mov	r2, r3
 8003ede:	2310      	movs	r3, #16
 8003ee0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d008      	beq.n	8003efe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	015a      	lsls	r2, r3, #5
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	4413      	add	r3, r2
 8003ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef8:	461a      	mov	r2, r3
 8003efa:	2340      	movs	r3, #64	; 0x40
 8003efc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f003 0302 	and.w	r3, r3, #2
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	461a      	mov	r2, r3
 8003f16:	2302      	movs	r3, #2
 8003f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d003      	beq.n	8003f2c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fc1b 	bl	8004762 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f2e:	3301      	adds	r3, #1
 8003f30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f34:	085b      	lsrs	r3, r3, #1
 8003f36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	f47f af49 	bne.w	8003dd2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f003 ff0a 	bl	8007d5e <USB_ReadInterrupts>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f54:	d122      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f64:	f023 0301 	bic.w	r3, r3, #1
 8003f68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d108      	bne.n	8003f86 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003f7c:	2100      	movs	r1, #0
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fe26 	bl	8004bd0 <HAL_PCDEx_LPM_Callback>
 8003f84:	e002      	b.n	8003f8c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f005 ff48 	bl	8009e1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fedc 	bl	8007d5e <USB_ReadInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb0:	d112      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003fb2:	69fb      	ldr	r3, [r7, #28]
 8003fb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0301 	and.w	r3, r3, #1
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d102      	bne.n	8003fc8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f005 ff04 	bl	8009dd0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	695a      	ldr	r2, [r3, #20]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003fd6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f003 febe 	bl	8007d5e <USB_ReadInterrupts>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fec:	f040 80c7 	bne.w	800417e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2110      	movs	r1, #16
 800400a:	4618      	mov	r0, r3
 800400c:	f002 ff8c 	bl	8006f28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004010:	2300      	movs	r3, #0
 8004012:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004014:	e056      	b.n	80040c4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004022:	461a      	mov	r2, r3
 8004024:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004028:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800402a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800402c:	015a      	lsls	r2, r3, #5
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	4413      	add	r3, r2
 8004032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800403a:	0151      	lsls	r1, r2, #5
 800403c:	69fa      	ldr	r2, [r7, #28]
 800403e:	440a      	add	r2, r1
 8004040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004044:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004048:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800405a:	0151      	lsls	r1, r2, #5
 800405c:	69fa      	ldr	r2, [r7, #28]
 800405e:	440a      	add	r2, r1
 8004060:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004064:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004068:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800406a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004076:	461a      	mov	r2, r3
 8004078:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800407c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800408e:	0151      	lsls	r1, r2, #5
 8004090:	69fa      	ldr	r2, [r7, #28]
 8004092:	440a      	add	r2, r1
 8004094:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004098:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800409c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800409e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ae:	0151      	lsls	r1, r2, #5
 80040b0:	69fa      	ldr	r2, [r7, #28]
 80040b2:	440a      	add	r2, r1
 80040b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c0:	3301      	adds	r3, #1
 80040c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d3a3      	bcc.n	8004016 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80040ce:	69fb      	ldr	r3, [r7, #28]
 80040d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d4:	69db      	ldr	r3, [r3, #28]
 80040d6:	69fa      	ldr	r2, [r7, #28]
 80040d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040dc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80040e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d016      	beq.n	8004118 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040fa:	f043 030b 	orr.w	r3, r3, #11
 80040fe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004102:	69fb      	ldr	r3, [r7, #28]
 8004104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	69fa      	ldr	r2, [r7, #28]
 800410c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004110:	f043 030b 	orr.w	r3, r3, #11
 8004114:	6453      	str	r3, [r2, #68]	; 0x44
 8004116:	e015      	b.n	8004144 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	69fa      	ldr	r2, [r7, #28]
 8004122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004126:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800412a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800412e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	69fa      	ldr	r2, [r7, #28]
 800413a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800413e:	f043 030b 	orr.w	r3, r3, #11
 8004142:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69fa      	ldr	r2, [r7, #28]
 800414e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004152:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004156:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004168:	461a      	mov	r2, r3
 800416a:	f003 febd 	bl	8007ee8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	695a      	ldr	r2, [r3, #20]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800417c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f003 fdeb 	bl	8007d5e <USB_ReadInterrupts>
 8004188:	4603      	mov	r3, r0
 800418a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800418e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004192:	d124      	bne.n	80041de <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4618      	mov	r0, r3
 800419a:	f003 fe81 	bl	8007ea0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f002 ff21 	bl	8006fea <USB_GetDevSpeed>
 80041a8:	4603      	mov	r3, r0
 80041aa:	461a      	mov	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681c      	ldr	r4, [r3, #0]
 80041b4:	f001 f946 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 80041b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80041be:	b2db      	uxtb	r3, r3
 80041c0:	461a      	mov	r2, r3
 80041c2:	4620      	mov	r0, r4
 80041c4:	f002 fc5e 	bl	8006a84 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f005 fdd8 	bl	8009d7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	695a      	ldr	r2, [r3, #20]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80041dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4618      	mov	r0, r3
 80041e4:	f003 fdbb 	bl	8007d5e <USB_ReadInterrupts>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b08      	cmp	r3, #8
 80041f0:	d10a      	bne.n	8004208 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	f005 fdb5 	bl	8009d62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695a      	ldr	r2, [r3, #20]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f002 0208 	and.w	r2, r2, #8
 8004206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4618      	mov	r0, r3
 800420e:	f003 fda6 	bl	8007d5e <USB_ReadInterrupts>
 8004212:	4603      	mov	r3, r0
 8004214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004218:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800421c:	d10f      	bne.n	800423e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	b2db      	uxtb	r3, r3
 8004226:	4619      	mov	r1, r3
 8004228:	6878      	ldr	r0, [r7, #4]
 800422a:	f005 fe17 	bl	8009e5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800423c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4618      	mov	r0, r3
 8004244:	f003 fd8b 	bl	8007d5e <USB_ReadInterrupts>
 8004248:	4603      	mov	r3, r0
 800424a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800424e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004252:	d10f      	bne.n	8004274 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425a:	b2db      	uxtb	r3, r3
 800425c:	4619      	mov	r1, r3
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f005 fdea 	bl	8009e38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004272:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f003 fd70 	bl	8007d5e <USB_ReadInterrupts>
 800427e:	4603      	mov	r3, r0
 8004280:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004284:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004288:	d10a      	bne.n	80042a0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f005 fdf8 	bl	8009e80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	695a      	ldr	r2, [r3, #20]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800429e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f003 fd5a 	bl	8007d5e <USB_ReadInterrupts>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f003 0304 	and.w	r3, r3, #4
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d115      	bne.n	80042e0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d002      	beq.n	80042cc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	f005 fde8 	bl	8009e9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6859      	ldr	r1, [r3, #4]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	69ba      	ldr	r2, [r7, #24]
 80042d8:	430a      	orrs	r2, r1
 80042da:	605a      	str	r2, [r3, #4]
 80042dc:	e000      	b.n	80042e0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80042de:	bf00      	nop
    }
  }
}
 80042e0:	3734      	adds	r7, #52	; 0x34
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd90      	pop	{r4, r7, pc}

080042e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80042e6:	b580      	push	{r7, lr}
 80042e8:	b082      	sub	sp, #8
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d101      	bne.n	8004300 <HAL_PCD_SetAddress+0x1a>
 80042fc:	2302      	movs	r3, #2
 80042fe:	e013      	b.n	8004328 <HAL_PCD_SetAddress+0x42>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	78fa      	ldrb	r2, [r7, #3]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f003 fcb8 	bl	8007c8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3708      	adds	r7, #8
 800432c:	46bd      	mov	sp, r7
 800432e:	bd80      	pop	{r7, pc}

08004330 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b084      	sub	sp, #16
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	4608      	mov	r0, r1
 800433a:	4611      	mov	r1, r2
 800433c:	461a      	mov	r2, r3
 800433e:	4603      	mov	r3, r0
 8004340:	70fb      	strb	r3, [r7, #3]
 8004342:	460b      	mov	r3, r1
 8004344:	803b      	strh	r3, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800434a:	2300      	movs	r3, #0
 800434c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800434e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004352:	2b00      	cmp	r3, #0
 8004354:	da0f      	bge.n	8004376 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	f003 020f 	and.w	r2, r3, #15
 800435c:	4613      	mov	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	1a9b      	subs	r3, r3, r2
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	3338      	adds	r3, #56	; 0x38
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	4413      	add	r3, r2
 800436a:	3304      	adds	r3, #4
 800436c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	705a      	strb	r2, [r3, #1]
 8004374:	e00f      	b.n	8004396 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004376:	78fb      	ldrb	r3, [r7, #3]
 8004378:	f003 020f 	and.w	r2, r3, #15
 800437c:	4613      	mov	r3, r2
 800437e:	00db      	lsls	r3, r3, #3
 8004380:	1a9b      	subs	r3, r3, r2
 8004382:	009b      	lsls	r3, r3, #2
 8004384:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	4413      	add	r3, r2
 800438c:	3304      	adds	r3, #4
 800438e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	b2da      	uxtb	r2, r3
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80043a2:	883a      	ldrh	r2, [r7, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	78ba      	ldrb	r2, [r7, #2]
 80043ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	785b      	ldrb	r3, [r3, #1]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d004      	beq.n	80043c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80043c0:	78bb      	ldrb	r3, [r7, #2]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d102      	bne.n	80043cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2200      	movs	r2, #0
 80043ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	d101      	bne.n	80043da <HAL_PCD_EP_Open+0xaa>
 80043d6:	2302      	movs	r3, #2
 80043d8:	e00e      	b.n	80043f8 <HAL_PCD_EP_Open+0xc8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68f9      	ldr	r1, [r7, #12]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f002 fe23 	bl	8007034 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80043f6:	7afb      	ldrb	r3, [r7, #11]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b084      	sub	sp, #16
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800440c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004410:	2b00      	cmp	r3, #0
 8004412:	da0f      	bge.n	8004434 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004414:	78fb      	ldrb	r3, [r7, #3]
 8004416:	f003 020f 	and.w	r2, r3, #15
 800441a:	4613      	mov	r3, r2
 800441c:	00db      	lsls	r3, r3, #3
 800441e:	1a9b      	subs	r3, r3, r2
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	3338      	adds	r3, #56	; 0x38
 8004424:	687a      	ldr	r2, [r7, #4]
 8004426:	4413      	add	r3, r2
 8004428:	3304      	adds	r3, #4
 800442a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2201      	movs	r2, #1
 8004430:	705a      	strb	r2, [r3, #1]
 8004432:	e00f      	b.n	8004454 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004434:	78fb      	ldrb	r3, [r7, #3]
 8004436:	f003 020f 	and.w	r2, r3, #15
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	4413      	add	r3, r2
 800444a:	3304      	adds	r3, #4
 800444c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004454:	78fb      	ldrb	r3, [r7, #3]
 8004456:	f003 030f 	and.w	r3, r3, #15
 800445a:	b2da      	uxtb	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004466:	2b01      	cmp	r3, #1
 8004468:	d101      	bne.n	800446e <HAL_PCD_EP_Close+0x6e>
 800446a:	2302      	movs	r3, #2
 800446c:	e00e      	b.n	800448c <HAL_PCD_EP_Close+0x8c>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68f9      	ldr	r1, [r7, #12]
 800447c:	4618      	mov	r0, r3
 800447e:	f002 fe61 	bl	8007144 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	607a      	str	r2, [r7, #4]
 800449e:	603b      	str	r3, [r7, #0]
 80044a0:	460b      	mov	r3, r1
 80044a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80044a4:	7afb      	ldrb	r3, [r7, #11]
 80044a6:	f003 020f 	and.w	r2, r3, #15
 80044aa:	4613      	mov	r3, r2
 80044ac:	00db      	lsls	r3, r3, #3
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4413      	add	r3, r2
 80044ba:	3304      	adds	r3, #4
 80044bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	683a      	ldr	r2, [r7, #0]
 80044c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	2200      	movs	r2, #0
 80044ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	2200      	movs	r2, #0
 80044d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044d6:	7afb      	ldrb	r3, [r7, #11]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d102      	bne.n	80044f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044f0:	7afb      	ldrb	r3, [r7, #11]
 80044f2:	f003 030f 	and.w	r3, r3, #15
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d109      	bne.n	800450e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6818      	ldr	r0, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	461a      	mov	r2, r3
 8004506:	6979      	ldr	r1, [r7, #20]
 8004508:	f003 f93c 	bl	8007784 <USB_EP0StartXfer>
 800450c:	e008      	b.n	8004520 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	b2db      	uxtb	r3, r3
 8004518:	461a      	mov	r2, r3
 800451a:	6979      	ldr	r1, [r7, #20]
 800451c:	f002 feee 	bl	80072fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004520:	2300      	movs	r3, #0
}
 8004522:	4618      	mov	r0, r3
 8004524:	3718      	adds	r7, #24
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800452a:	b480      	push	{r7}
 800452c:	b083      	sub	sp, #12
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	460b      	mov	r3, r1
 8004534:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004536:	78fb      	ldrb	r3, [r7, #3]
 8004538:	f003 020f 	and.w	r2, r3, #15
 800453c:	6879      	ldr	r1, [r7, #4]
 800453e:	4613      	mov	r3, r2
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	1a9b      	subs	r3, r3, r2
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	440b      	add	r3, r1
 8004548:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800454c:	681b      	ldr	r3, [r3, #0]
}
 800454e:	4618      	mov	r0, r3
 8004550:	370c      	adds	r7, #12
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b086      	sub	sp, #24
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	607a      	str	r2, [r7, #4]
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	460b      	mov	r3, r1
 8004568:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800456a:	7afb      	ldrb	r3, [r7, #11]
 800456c:	f003 020f 	and.w	r2, r3, #15
 8004570:	4613      	mov	r3, r2
 8004572:	00db      	lsls	r3, r3, #3
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	3338      	adds	r3, #56	; 0x38
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	4413      	add	r3, r2
 800457e:	3304      	adds	r3, #4
 8004580:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	2201      	movs	r2, #1
 8004598:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800459a:	7afb      	ldrb	r3, [r7, #11]
 800459c:	f003 030f 	and.w	r3, r3, #15
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d102      	bne.n	80045b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045b4:	7afb      	ldrb	r3, [r7, #11]
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d109      	bne.n	80045d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	461a      	mov	r2, r3
 80045ca:	6979      	ldr	r1, [r7, #20]
 80045cc:	f003 f8da 	bl	8007784 <USB_EP0StartXfer>
 80045d0:	e008      	b.n	80045e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	461a      	mov	r2, r3
 80045de:	6979      	ldr	r1, [r7, #20]
 80045e0:	f002 fe8c 	bl	80072fc <USB_EPStartXfer>
  }

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3718      	adds	r7, #24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}

080045ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
 80045f6:	460b      	mov	r3, r1
 80045f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	f003 020f 	and.w	r2, r3, #15
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	429a      	cmp	r2, r3
 8004606:	d901      	bls.n	800460c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004608:	2301      	movs	r3, #1
 800460a:	e050      	b.n	80046ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800460c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004610:	2b00      	cmp	r3, #0
 8004612:	da0f      	bge.n	8004634 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	f003 020f 	and.w	r2, r3, #15
 800461a:	4613      	mov	r3, r2
 800461c:	00db      	lsls	r3, r3, #3
 800461e:	1a9b      	subs	r3, r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	3338      	adds	r3, #56	; 0x38
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	4413      	add	r3, r2
 8004628:	3304      	adds	r3, #4
 800462a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2201      	movs	r2, #1
 8004630:	705a      	strb	r2, [r3, #1]
 8004632:	e00d      	b.n	8004650 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	4613      	mov	r3, r2
 8004638:	00db      	lsls	r3, r3, #3
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	4413      	add	r3, r2
 8004646:	3304      	adds	r3, #4
 8004648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2201      	movs	r2, #1
 8004654:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004656:	78fb      	ldrb	r3, [r7, #3]
 8004658:	f003 030f 	and.w	r3, r3, #15
 800465c:	b2da      	uxtb	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004668:	2b01      	cmp	r3, #1
 800466a:	d101      	bne.n	8004670 <HAL_PCD_EP_SetStall+0x82>
 800466c:	2302      	movs	r3, #2
 800466e:	e01e      	b.n	80046ae <HAL_PCD_EP_SetStall+0xc0>
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	68f9      	ldr	r1, [r7, #12]
 800467e:	4618      	mov	r0, r3
 8004680:	f003 fa31 	bl	8007ae6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	f003 030f 	and.w	r3, r3, #15
 800468a:	2b00      	cmp	r3, #0
 800468c:	d10a      	bne.n	80046a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6818      	ldr	r0, [r3, #0]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	b2d9      	uxtb	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800469e:	461a      	mov	r2, r3
 80046a0:	f003 fc22 	bl	8007ee8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3710      	adds	r7, #16
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}

080046b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b084      	sub	sp, #16
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
 80046be:	460b      	mov	r3, r1
 80046c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80046c2:	78fb      	ldrb	r3, [r7, #3]
 80046c4:	f003 020f 	and.w	r2, r3, #15
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d901      	bls.n	80046d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e042      	b.n	800475a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80046d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	da0f      	bge.n	80046fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	f003 020f 	and.w	r2, r3, #15
 80046e2:	4613      	mov	r3, r2
 80046e4:	00db      	lsls	r3, r3, #3
 80046e6:	1a9b      	subs	r3, r3, r2
 80046e8:	009b      	lsls	r3, r3, #2
 80046ea:	3338      	adds	r3, #56	; 0x38
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	4413      	add	r3, r2
 80046f0:	3304      	adds	r3, #4
 80046f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2201      	movs	r2, #1
 80046f8:	705a      	strb	r2, [r3, #1]
 80046fa:	e00f      	b.n	800471c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046fc:	78fb      	ldrb	r3, [r7, #3]
 80046fe:	f003 020f 	and.w	r2, r3, #15
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	1a9b      	subs	r3, r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800470e:	687a      	ldr	r2, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	3304      	adds	r3, #4
 8004714:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004722:	78fb      	ldrb	r3, [r7, #3]
 8004724:	f003 030f 	and.w	r3, r3, #15
 8004728:	b2da      	uxtb	r2, r3
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <HAL_PCD_EP_ClrStall+0x86>
 8004738:	2302      	movs	r3, #2
 800473a:	e00e      	b.n	800475a <HAL_PCD_EP_ClrStall+0xa4>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68f9      	ldr	r1, [r7, #12]
 800474a:	4618      	mov	r0, r3
 800474c:	f003 fa39 	bl	8007bc2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004758:	2300      	movs	r3, #0
}
 800475a:	4618      	mov	r0, r3
 800475c:	3710      	adds	r7, #16
 800475e:	46bd      	mov	sp, r7
 8004760:	bd80      	pop	{r7, pc}

08004762 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004762:	b580      	push	{r7, lr}
 8004764:	b08a      	sub	sp, #40	; 0x28
 8004766:	af02      	add	r7, sp, #8
 8004768:	6078      	str	r0, [r7, #4]
 800476a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	3338      	adds	r3, #56	; 0x38
 8004782:	687a      	ldr	r2, [r7, #4]
 8004784:	4413      	add	r3, r2
 8004786:	3304      	adds	r3, #4
 8004788:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	699a      	ldr	r2, [r3, #24]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	429a      	cmp	r2, r3
 8004794:	d901      	bls.n	800479a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	e06c      	b.n	8004874 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	695a      	ldr	r2, [r3, #20]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d902      	bls.n	80047b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	3303      	adds	r3, #3
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047be:	e02b      	b.n	8004818 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d902      	bls.n	80047dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80047dc:	69fb      	ldr	r3, [r7, #28]
 80047de:	3303      	adds	r3, #3
 80047e0:	089b      	lsrs	r3, r3, #2
 80047e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	68d9      	ldr	r1, [r3, #12]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	b2da      	uxtb	r2, r3
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	9300      	str	r3, [sp, #0]
 80047f8:	4603      	mov	r3, r0
 80047fa:	6978      	ldr	r0, [r7, #20]
 80047fc:	f003 f915 	bl	8007a2a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	441a      	add	r2, r3
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	699a      	ldr	r2, [r3, #24]
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	441a      	add	r2, r3
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	015a      	lsls	r2, r3, #5
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	4413      	add	r3, r2
 8004820:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	b29b      	uxth	r3, r3
 8004828:	69ba      	ldr	r2, [r7, #24]
 800482a:	429a      	cmp	r2, r3
 800482c:	d809      	bhi.n	8004842 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	699a      	ldr	r2, [r3, #24]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004836:	429a      	cmp	r2, r3
 8004838:	d203      	bcs.n	8004842 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d1be      	bne.n	80047c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	695a      	ldr	r2, [r3, #20]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	429a      	cmp	r2, r3
 800484c:	d811      	bhi.n	8004872 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	f003 030f 	and.w	r3, r3, #15
 8004854:	2201      	movs	r2, #1
 8004856:	fa02 f303 	lsl.w	r3, r2, r3
 800485a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004862:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	43db      	mvns	r3, r3
 8004868:	6939      	ldr	r1, [r7, #16]
 800486a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800486e:	4013      	ands	r3, r2
 8004870:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	3720      	adds	r7, #32
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b086      	sub	sp, #24
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	333c      	adds	r3, #60	; 0x3c
 8004894:	3304      	adds	r3, #4
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	015a      	lsls	r2, r3, #5
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4413      	add	r3, r2
 80048a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a6:	689b      	ldr	r3, [r3, #8]
 80048a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	f040 80a0 	bne.w	80049f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d015      	beq.n	80048ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4a72      	ldr	r2, [pc, #456]	; (8004a8c <PCD_EP_OutXfrComplete_int+0x210>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	f240 80dd 	bls.w	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	f000 80d7 	beq.w	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e0:	461a      	mov	r2, r3
 80048e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048e6:	6093      	str	r3, [r2, #8]
 80048e8:	e0cb      	b.n	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d009      	beq.n	8004908 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	015a      	lsls	r2, r3, #5
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	4413      	add	r3, r2
 80048fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004900:	461a      	mov	r2, r3
 8004902:	2320      	movs	r3, #32
 8004904:	6093      	str	r3, [r2, #8]
 8004906:	e0bc      	b.n	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800490e:	2b00      	cmp	r3, #0
 8004910:	f040 80b7 	bne.w	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4a5d      	ldr	r2, [pc, #372]	; (8004a8c <PCD_EP_OutXfrComplete_int+0x210>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d90f      	bls.n	800493c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00a      	beq.n	800493c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	461a      	mov	r2, r3
 8004934:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004938:	6093      	str	r3, [r2, #8]
 800493a:	e0a2      	b.n	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800493c:	6879      	ldr	r1, [r7, #4]
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	1a9b      	subs	r3, r3, r2
 8004946:	009b      	lsls	r3, r3, #2
 8004948:	440b      	add	r3, r1
 800494a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800494e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	0159      	lsls	r1, r3, #5
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	440b      	add	r3, r1
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004962:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	683a      	ldr	r2, [r7, #0]
 8004968:	4613      	mov	r3, r2
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	1a9b      	subs	r3, r3, r2
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4403      	add	r3, r0
 8004972:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004976:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	1a9b      	subs	r3, r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	440b      	add	r3, r1
 8004986:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800498a:	6819      	ldr	r1, [r3, #0]
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	4613      	mov	r3, r2
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4403      	add	r3, r0
 800499a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4419      	add	r1, r3
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	4613      	mov	r3, r2
 80049a8:	00db      	lsls	r3, r3, #3
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	4403      	add	r3, r0
 80049b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80049b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d114      	bne.n	80049e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	4613      	mov	r3, r2
 80049c2:	00db      	lsls	r3, r3, #3
 80049c4:	1a9b      	subs	r3, r3, r2
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	440b      	add	r3, r1
 80049ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80049de:	461a      	mov	r2, r3
 80049e0:	2101      	movs	r1, #1
 80049e2:	f003 fa81 	bl	8007ee8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	4619      	mov	r1, r3
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f005 f983 	bl	8009cf8 <HAL_PCD_DataOutStageCallback>
 80049f2:	e046      	b.n	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	4a26      	ldr	r2, [pc, #152]	; (8004a90 <PCD_EP_OutXfrComplete_int+0x214>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d124      	bne.n	8004a46 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d00a      	beq.n	8004a1c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	015a      	lsls	r2, r3, #5
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a12:	461a      	mov	r2, r3
 8004a14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a18:	6093      	str	r3, [r2, #8]
 8004a1a:	e032      	b.n	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	f003 0320 	and.w	r3, r3, #32
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d008      	beq.n	8004a38 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	015a      	lsls	r2, r3, #5
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a32:	461a      	mov	r2, r3
 8004a34:	2320      	movs	r3, #32
 8004a36:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f005 f95a 	bl	8009cf8 <HAL_PCD_DataOutStageCallback>
 8004a44:	e01d      	b.n	8004a82 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d114      	bne.n	8004a76 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	1a9b      	subs	r3, r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	440b      	add	r3, r1
 8004a5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d108      	bne.n	8004a76 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6818      	ldr	r0, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2100      	movs	r1, #0
 8004a72:	f003 fa39 	bl	8007ee8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	b2db      	uxtb	r3, r3
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	f005 f93b 	bl	8009cf8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3718      	adds	r7, #24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	4f54300a 	.word	0x4f54300a
 8004a90:	4f54310a 	.word	0x4f54310a

08004a94 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b086      	sub	sp, #24
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	333c      	adds	r3, #60	; 0x3c
 8004aac:	3304      	adds	r3, #4
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	4a15      	ldr	r2, [pc, #84]	; (8004b1c <PCD_EP_OutSetupPacket_int+0x88>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d90e      	bls.n	8004ae8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d009      	beq.n	8004ae8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	015a      	lsls	r2, r3, #5
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	4413      	add	r3, r2
 8004adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae0:	461a      	mov	r2, r3
 8004ae2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ae6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f005 f8f3 	bl	8009cd4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	4a0a      	ldr	r2, [pc, #40]	; (8004b1c <PCD_EP_OutSetupPacket_int+0x88>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d90c      	bls.n	8004b10 <PCD_EP_OutSetupPacket_int+0x7c>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d108      	bne.n	8004b10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6818      	ldr	r0, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	f003 f9ec 	bl	8007ee8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3718      	adds	r7, #24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	4f54300a 	.word	0x4f54300a

08004b20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b085      	sub	sp, #20
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	460b      	mov	r3, r1
 8004b2a:	70fb      	strb	r3, [r7, #3]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004b38:	78fb      	ldrb	r3, [r7, #3]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d107      	bne.n	8004b4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004b3e:	883b      	ldrh	r3, [r7, #0]
 8004b40:	0419      	lsls	r1, r3, #16
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004b4c:	e028      	b.n	8004ba0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	0c1b      	lsrs	r3, r3, #16
 8004b56:	68ba      	ldr	r2, [r7, #8]
 8004b58:	4413      	add	r3, r2
 8004b5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	73fb      	strb	r3, [r7, #15]
 8004b60:	e00d      	b.n	8004b7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681a      	ldr	r2, [r3, #0]
 8004b66:	7bfb      	ldrb	r3, [r7, #15]
 8004b68:	3340      	adds	r3, #64	; 0x40
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	0c1b      	lsrs	r3, r3, #16
 8004b72:	68ba      	ldr	r2, [r7, #8]
 8004b74:	4413      	add	r3, r2
 8004b76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
 8004b7e:	7bfa      	ldrb	r2, [r7, #15]
 8004b80:	78fb      	ldrb	r3, [r7, #3]
 8004b82:	3b01      	subs	r3, #1
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d3ec      	bcc.n	8004b62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004b88:	883b      	ldrh	r3, [r7, #0]
 8004b8a:	0418      	lsls	r0, r3, #16
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	78fb      	ldrb	r3, [r7, #3]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	4302      	orrs	r2, r0
 8004b98:	3340      	adds	r3, #64	; 0x40
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	440b      	add	r3, r1
 8004b9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr

08004bae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	b083      	sub	sp, #12
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	887a      	ldrh	r2, [r7, #2]
 8004bc0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004bdc:	bf00      	nop
 8004bde:	370c      	adds	r7, #12
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr

08004be8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b086      	sub	sp, #24
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d101      	bne.n	8004bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	e25b      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0301 	and.w	r3, r3, #1
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d075      	beq.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c06:	4ba3      	ldr	r3, [pc, #652]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	f003 030c 	and.w	r3, r3, #12
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d00c      	beq.n	8004c2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c12:	4ba0      	ldr	r3, [pc, #640]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c14:	689b      	ldr	r3, [r3, #8]
 8004c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d112      	bne.n	8004c44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c1e:	4b9d      	ldr	r3, [pc, #628]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	685b      	ldr	r3, [r3, #4]
 8004c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c2a:	d10b      	bne.n	8004c44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	4b99      	ldr	r3, [pc, #612]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d05b      	beq.n	8004cf0 <HAL_RCC_OscConfig+0x108>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d157      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	e236      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c4c:	d106      	bne.n	8004c5c <HAL_RCC_OscConfig+0x74>
 8004c4e:	4b91      	ldr	r3, [pc, #580]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a90      	ldr	r2, [pc, #576]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c58:	6013      	str	r3, [r2, #0]
 8004c5a:	e01d      	b.n	8004c98 <HAL_RCC_OscConfig+0xb0>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c64:	d10c      	bne.n	8004c80 <HAL_RCC_OscConfig+0x98>
 8004c66:	4b8b      	ldr	r3, [pc, #556]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a8a      	ldr	r2, [pc, #552]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c70:	6013      	str	r3, [r2, #0]
 8004c72:	4b88      	ldr	r3, [pc, #544]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a87      	ldr	r2, [pc, #540]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c7c:	6013      	str	r3, [r2, #0]
 8004c7e:	e00b      	b.n	8004c98 <HAL_RCC_OscConfig+0xb0>
 8004c80:	4b84      	ldr	r3, [pc, #528]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a83      	ldr	r2, [pc, #524]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	4b81      	ldr	r3, [pc, #516]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a80      	ldr	r2, [pc, #512]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d013      	beq.n	8004cc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ca0:	f7fd f9ba 	bl	8002018 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca8:	f7fd f9b6 	bl	8002018 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b64      	cmp	r3, #100	; 0x64
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e1fb      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cba:	4b76      	ldr	r3, [pc, #472]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d0f0      	beq.n	8004ca8 <HAL_RCC_OscConfig+0xc0>
 8004cc6:	e014      	b.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cc8:	f7fd f9a6 	bl	8002018 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004cd0:	f7fd f9a2 	bl	8002018 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b64      	cmp	r3, #100	; 0x64
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e1e7      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ce2:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0xe8>
 8004cee:	e000      	b.n	8004cf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d063      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cfe:	4b65      	ldr	r3, [pc, #404]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	f003 030c 	and.w	r3, r3, #12
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d0a:	4b62      	ldr	r3, [pc, #392]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004d12:	2b08      	cmp	r3, #8
 8004d14:	d11c      	bne.n	8004d50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d16:	4b5f      	ldr	r3, [pc, #380]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d116      	bne.n	8004d50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	4b5c      	ldr	r3, [pc, #368]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d005      	beq.n	8004d3a <HAL_RCC_OscConfig+0x152>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d001      	beq.n	8004d3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	e1bb      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3a:	4b56      	ldr	r3, [pc, #344]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	691b      	ldr	r3, [r3, #16]
 8004d46:	00db      	lsls	r3, r3, #3
 8004d48:	4952      	ldr	r1, [pc, #328]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d4e:	e03a      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	68db      	ldr	r3, [r3, #12]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d020      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d58:	4b4f      	ldr	r3, [pc, #316]	; (8004e98 <HAL_RCC_OscConfig+0x2b0>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d5e:	f7fd f95b 	bl	8002018 <HAL_GetTick>
 8004d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d64:	e008      	b.n	8004d78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d66:	f7fd f957 	bl	8002018 <HAL_GetTick>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d901      	bls.n	8004d78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d74:	2303      	movs	r3, #3
 8004d76:	e19c      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d78:	4b46      	ldr	r3, [pc, #280]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0f0      	beq.n	8004d66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d84:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	00db      	lsls	r3, r3, #3
 8004d92:	4940      	ldr	r1, [pc, #256]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	600b      	str	r3, [r1, #0]
 8004d98:	e015      	b.n	8004dc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d9a:	4b3f      	ldr	r3, [pc, #252]	; (8004e98 <HAL_RCC_OscConfig+0x2b0>)
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fd f93a 	bl	8002018 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004da8:	f7fd f936 	bl	8002018 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e17b      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004dba:	4b36      	ldr	r3, [pc, #216]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0302 	and.w	r3, r3, #2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0308 	and.w	r3, r3, #8
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d030      	beq.n	8004e34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d016      	beq.n	8004e08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dda:	4b30      	ldr	r3, [pc, #192]	; (8004e9c <HAL_RCC_OscConfig+0x2b4>)
 8004ddc:	2201      	movs	r2, #1
 8004dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004de0:	f7fd f91a 	bl	8002018 <HAL_GetTick>
 8004de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004de6:	e008      	b.n	8004dfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004de8:	f7fd f916 	bl	8002018 <HAL_GetTick>
 8004dec:	4602      	mov	r2, r0
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	1ad3      	subs	r3, r2, r3
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d901      	bls.n	8004dfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004df6:	2303      	movs	r3, #3
 8004df8:	e15b      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dfa:	4b26      	ldr	r3, [pc, #152]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dfe:	f003 0302 	and.w	r3, r3, #2
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d0f0      	beq.n	8004de8 <HAL_RCC_OscConfig+0x200>
 8004e06:	e015      	b.n	8004e34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e08:	4b24      	ldr	r3, [pc, #144]	; (8004e9c <HAL_RCC_OscConfig+0x2b4>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e0e:	f7fd f903 	bl	8002018 <HAL_GetTick>
 8004e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e14:	e008      	b.n	8004e28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e16:	f7fd f8ff 	bl	8002018 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	d901      	bls.n	8004e28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e24:	2303      	movs	r3, #3
 8004e26:	e144      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e28:	4b1a      	ldr	r3, [pc, #104]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d1f0      	bne.n	8004e16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 80a0 	beq.w	8004f82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e42:	2300      	movs	r3, #0
 8004e44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e46:	4b13      	ldr	r3, [pc, #76]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10f      	bne.n	8004e72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e52:	2300      	movs	r3, #0
 8004e54:	60bb      	str	r3, [r7, #8]
 8004e56:	4b0f      	ldr	r3, [pc, #60]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	4a0e      	ldr	r2, [pc, #56]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e60:	6413      	str	r3, [r2, #64]	; 0x40
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6a:	60bb      	str	r3, [r7, #8]
 8004e6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e72:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_OscConfig+0x2b8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d121      	bne.n	8004ec2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e7e:	4b08      	ldr	r3, [pc, #32]	; (8004ea0 <HAL_RCC_OscConfig+0x2b8>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a07      	ldr	r2, [pc, #28]	; (8004ea0 <HAL_RCC_OscConfig+0x2b8>)
 8004e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e8a:	f7fd f8c5 	bl	8002018 <HAL_GetTick>
 8004e8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e90:	e011      	b.n	8004eb6 <HAL_RCC_OscConfig+0x2ce>
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
 8004e98:	42470000 	.word	0x42470000
 8004e9c:	42470e80 	.word	0x42470e80
 8004ea0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ea4:	f7fd f8b8 	bl	8002018 <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e0fd      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eb6:	4b81      	ldr	r3, [pc, #516]	; (80050bc <HAL_RCC_OscConfig+0x4d4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d106      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x2f0>
 8004eca:	4b7d      	ldr	r3, [pc, #500]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ece:	4a7c      	ldr	r2, [pc, #496]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed6:	e01c      	b.n	8004f12 <HAL_RCC_OscConfig+0x32a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	2b05      	cmp	r3, #5
 8004ede:	d10c      	bne.n	8004efa <HAL_RCC_OscConfig+0x312>
 8004ee0:	4b77      	ldr	r3, [pc, #476]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee4:	4a76      	ldr	r2, [pc, #472]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ee6:	f043 0304 	orr.w	r3, r3, #4
 8004eea:	6713      	str	r3, [r2, #112]	; 0x70
 8004eec:	4b74      	ldr	r3, [pc, #464]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ef0:	4a73      	ldr	r2, [pc, #460]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ef2:	f043 0301 	orr.w	r3, r3, #1
 8004ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ef8:	e00b      	b.n	8004f12 <HAL_RCC_OscConfig+0x32a>
 8004efa:	4b71      	ldr	r3, [pc, #452]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004efe:	4a70      	ldr	r2, [pc, #448]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f00:	f023 0301 	bic.w	r3, r3, #1
 8004f04:	6713      	str	r3, [r2, #112]	; 0x70
 8004f06:	4b6e      	ldr	r3, [pc, #440]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	4a6d      	ldr	r2, [pc, #436]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f0c:	f023 0304 	bic.w	r3, r3, #4
 8004f10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d015      	beq.n	8004f46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f1a:	f7fd f87d 	bl	8002018 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f20:	e00a      	b.n	8004f38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f22:	f7fd f879 	bl	8002018 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d901      	bls.n	8004f38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004f34:	2303      	movs	r3, #3
 8004f36:	e0bc      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f38:	4b61      	ldr	r3, [pc, #388]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3c:	f003 0302 	and.w	r3, r3, #2
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d0ee      	beq.n	8004f22 <HAL_RCC_OscConfig+0x33a>
 8004f44:	e014      	b.n	8004f70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f46:	f7fd f867 	bl	8002018 <HAL_GetTick>
 8004f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f4c:	e00a      	b.n	8004f64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f4e:	f7fd f863 	bl	8002018 <HAL_GetTick>
 8004f52:	4602      	mov	r2, r0
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	1ad3      	subs	r3, r2, r3
 8004f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d901      	bls.n	8004f64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e0a6      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f64:	4b56      	ldr	r3, [pc, #344]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d1ee      	bne.n	8004f4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f70:	7dfb      	ldrb	r3, [r7, #23]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d105      	bne.n	8004f82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f76:	4b52      	ldr	r3, [pc, #328]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7a:	4a51      	ldr	r2, [pc, #324]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	699b      	ldr	r3, [r3, #24]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	f000 8092 	beq.w	80050b0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f8c:	4b4c      	ldr	r3, [pc, #304]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f003 030c 	and.w	r3, r3, #12
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d05c      	beq.n	8005052 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	2b02      	cmp	r3, #2
 8004f9e:	d141      	bne.n	8005024 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fa0:	4b48      	ldr	r3, [pc, #288]	; (80050c4 <HAL_RCC_OscConfig+0x4dc>)
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fa6:	f7fd f837 	bl	8002018 <HAL_GetTick>
 8004faa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fac:	e008      	b.n	8004fc0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fae:	f7fd f833 	bl	8002018 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b02      	cmp	r3, #2
 8004fba:	d901      	bls.n	8004fc0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e078      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fc0:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d1f0      	bne.n	8004fae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	431a      	orrs	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	019b      	lsls	r3, r3, #6
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe2:	085b      	lsrs	r3, r3, #1
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	041b      	lsls	r3, r3, #16
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fee:	061b      	lsls	r3, r3, #24
 8004ff0:	4933      	ldr	r1, [pc, #204]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ff6:	4b33      	ldr	r3, [pc, #204]	; (80050c4 <HAL_RCC_OscConfig+0x4dc>)
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ffc:	f7fd f80c 	bl	8002018 <HAL_GetTick>
 8005000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005002:	e008      	b.n	8005016 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005004:	f7fd f808 	bl	8002018 <HAL_GetTick>
 8005008:	4602      	mov	r2, r0
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	2b02      	cmp	r3, #2
 8005010:	d901      	bls.n	8005016 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005012:	2303      	movs	r3, #3
 8005014:	e04d      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005016:	4b2a      	ldr	r3, [pc, #168]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d0f0      	beq.n	8005004 <HAL_RCC_OscConfig+0x41c>
 8005022:	e045      	b.n	80050b0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005024:	4b27      	ldr	r3, [pc, #156]	; (80050c4 <HAL_RCC_OscConfig+0x4dc>)
 8005026:	2200      	movs	r2, #0
 8005028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800502a:	f7fc fff5 	bl	8002018 <HAL_GetTick>
 800502e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005030:	e008      	b.n	8005044 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005032:	f7fc fff1 	bl	8002018 <HAL_GetTick>
 8005036:	4602      	mov	r2, r0
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	1ad3      	subs	r3, r2, r3
 800503c:	2b02      	cmp	r3, #2
 800503e:	d901      	bls.n	8005044 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e036      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005044:	4b1e      	ldr	r3, [pc, #120]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800504c:	2b00      	cmp	r3, #0
 800504e:	d1f0      	bne.n	8005032 <HAL_RCC_OscConfig+0x44a>
 8005050:	e02e      	b.n	80050b0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d101      	bne.n	800505e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e029      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800505e:	4b18      	ldr	r3, [pc, #96]	; (80050c0 <HAL_RCC_OscConfig+0x4d8>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	429a      	cmp	r2, r3
 8005070:	d11c      	bne.n	80050ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800507c:	429a      	cmp	r2, r3
 800507e:	d115      	bne.n	80050ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005086:	4013      	ands	r3, r2
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800508c:	4293      	cmp	r3, r2
 800508e:	d10d      	bne.n	80050ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800509a:	429a      	cmp	r2, r3
 800509c:	d106      	bne.n	80050ac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e000      	b.n	80050b2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40007000 	.word	0x40007000
 80050c0:	40023800 	.word	0x40023800
 80050c4:	42470060 	.word	0x42470060

080050c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d101      	bne.n	80050dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e0cc      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050dc:	4b68      	ldr	r3, [pc, #416]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 030f 	and.w	r3, r3, #15
 80050e4:	683a      	ldr	r2, [r7, #0]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d90c      	bls.n	8005104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	4b65      	ldr	r3, [pc, #404]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80050ec:	683a      	ldr	r2, [r7, #0]
 80050ee:	b2d2      	uxtb	r2, r2
 80050f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050f2:	4b63      	ldr	r3, [pc, #396]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	429a      	cmp	r2, r3
 80050fe:	d001      	beq.n	8005104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e0b8      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d020      	beq.n	8005152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d005      	beq.n	8005128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800511c:	4b59      	ldr	r3, [pc, #356]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	4a58      	ldr	r2, [pc, #352]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0308 	and.w	r3, r3, #8
 8005130:	2b00      	cmp	r3, #0
 8005132:	d005      	beq.n	8005140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005134:	4b53      	ldr	r3, [pc, #332]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	4a52      	ldr	r2, [pc, #328]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800513a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800513e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005140:	4b50      	ldr	r3, [pc, #320]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	494d      	ldr	r1, [pc, #308]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f003 0301 	and.w	r3, r3, #1
 800515a:	2b00      	cmp	r3, #0
 800515c:	d044      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d107      	bne.n	8005176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005166:	4b47      	ldr	r3, [pc, #284]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d119      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e07f      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	2b02      	cmp	r3, #2
 800517c:	d003      	beq.n	8005186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005182:	2b03      	cmp	r3, #3
 8005184:	d107      	bne.n	8005196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005186:	4b3f      	ldr	r3, [pc, #252]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e06f      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005196:	4b3b      	ldr	r3, [pc, #236]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0302 	and.w	r3, r3, #2
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e067      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80051a6:	4b37      	ldr	r3, [pc, #220]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	f023 0203 	bic.w	r2, r3, #3
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	4934      	ldr	r1, [pc, #208]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80051b8:	f7fc ff2e 	bl	8002018 <HAL_GetTick>
 80051bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051be:	e00a      	b.n	80051d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051c0:	f7fc ff2a 	bl	8002018 <HAL_GetTick>
 80051c4:	4602      	mov	r2, r0
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	1ad3      	subs	r3, r2, r3
 80051ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d901      	bls.n	80051d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051d2:	2303      	movs	r3, #3
 80051d4:	e04f      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051d6:	4b2b      	ldr	r3, [pc, #172]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 020c 	and.w	r2, r3, #12
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d1eb      	bne.n	80051c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051e8:	4b25      	ldr	r3, [pc, #148]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 030f 	and.w	r3, r3, #15
 80051f0:	683a      	ldr	r2, [r7, #0]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d20c      	bcs.n	8005210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051f6:	4b22      	ldr	r3, [pc, #136]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	b2d2      	uxtb	r2, r2
 80051fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fe:	4b20      	ldr	r3, [pc, #128]	; (8005280 <HAL_RCC_ClockConfig+0x1b8>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 030f 	and.w	r3, r3, #15
 8005206:	683a      	ldr	r2, [r7, #0]
 8005208:	429a      	cmp	r2, r3
 800520a:	d001      	beq.n	8005210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e032      	b.n	8005276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 0304 	and.w	r3, r3, #4
 8005218:	2b00      	cmp	r3, #0
 800521a:	d008      	beq.n	800522e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800521c:	4b19      	ldr	r3, [pc, #100]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4916      	ldr	r1, [pc, #88]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800522a:	4313      	orrs	r3, r2
 800522c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d009      	beq.n	800524e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800523a:	4b12      	ldr	r3, [pc, #72]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	00db      	lsls	r3, r3, #3
 8005248:	490e      	ldr	r1, [pc, #56]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 800524a:	4313      	orrs	r3, r2
 800524c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800524e:	f000 f821 	bl	8005294 <HAL_RCC_GetSysClockFreq>
 8005252:	4601      	mov	r1, r0
 8005254:	4b0b      	ldr	r3, [pc, #44]	; (8005284 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	091b      	lsrs	r3, r3, #4
 800525a:	f003 030f 	and.w	r3, r3, #15
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <HAL_RCC_ClockConfig+0x1c0>)
 8005260:	5cd3      	ldrb	r3, [r2, r3]
 8005262:	fa21 f303 	lsr.w	r3, r1, r3
 8005266:	4a09      	ldr	r2, [pc, #36]	; (800528c <HAL_RCC_ClockConfig+0x1c4>)
 8005268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800526a:	4b09      	ldr	r3, [pc, #36]	; (8005290 <HAL_RCC_ClockConfig+0x1c8>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4618      	mov	r0, r3
 8005270:	f7fc fe8e 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3710      	adds	r7, #16
 800527a:	46bd      	mov	sp, r7
 800527c:	bd80      	pop	{r7, pc}
 800527e:	bf00      	nop
 8005280:	40023c00 	.word	0x40023c00
 8005284:	40023800 	.word	0x40023800
 8005288:	0800bb48 	.word	0x0800bb48
 800528c:	20000030 	.word	0x20000030
 8005290:	20000034 	.word	0x20000034

08005294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800529a:	2300      	movs	r3, #0
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	2300      	movs	r3, #0
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	2300      	movs	r3, #0
 80052a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80052a6:	2300      	movs	r3, #0
 80052a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052aa:	4b63      	ldr	r3, [pc, #396]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f003 030c 	and.w	r3, r3, #12
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d007      	beq.n	80052c6 <HAL_RCC_GetSysClockFreq+0x32>
 80052b6:	2b08      	cmp	r3, #8
 80052b8:	d008      	beq.n	80052cc <HAL_RCC_GetSysClockFreq+0x38>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	f040 80b4 	bne.w	8005428 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052c0:	4b5e      	ldr	r3, [pc, #376]	; (800543c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80052c2:	60bb      	str	r3, [r7, #8]
       break;
 80052c4:	e0b3      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052c6:	4b5e      	ldr	r3, [pc, #376]	; (8005440 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80052c8:	60bb      	str	r3, [r7, #8]
      break;
 80052ca:	e0b0      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052cc:	4b5a      	ldr	r3, [pc, #360]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052d6:	4b58      	ldr	r3, [pc, #352]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d04a      	beq.n	8005378 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052e2:	4b55      	ldr	r3, [pc, #340]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	099b      	lsrs	r3, r3, #6
 80052e8:	f04f 0400 	mov.w	r4, #0
 80052ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	ea03 0501 	and.w	r5, r3, r1
 80052f8:	ea04 0602 	and.w	r6, r4, r2
 80052fc:	4629      	mov	r1, r5
 80052fe:	4632      	mov	r2, r6
 8005300:	f04f 0300 	mov.w	r3, #0
 8005304:	f04f 0400 	mov.w	r4, #0
 8005308:	0154      	lsls	r4, r2, #5
 800530a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800530e:	014b      	lsls	r3, r1, #5
 8005310:	4619      	mov	r1, r3
 8005312:	4622      	mov	r2, r4
 8005314:	1b49      	subs	r1, r1, r5
 8005316:	eb62 0206 	sbc.w	r2, r2, r6
 800531a:	f04f 0300 	mov.w	r3, #0
 800531e:	f04f 0400 	mov.w	r4, #0
 8005322:	0194      	lsls	r4, r2, #6
 8005324:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005328:	018b      	lsls	r3, r1, #6
 800532a:	1a5b      	subs	r3, r3, r1
 800532c:	eb64 0402 	sbc.w	r4, r4, r2
 8005330:	f04f 0100 	mov.w	r1, #0
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	00e2      	lsls	r2, r4, #3
 800533a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800533e:	00d9      	lsls	r1, r3, #3
 8005340:	460b      	mov	r3, r1
 8005342:	4614      	mov	r4, r2
 8005344:	195b      	adds	r3, r3, r5
 8005346:	eb44 0406 	adc.w	r4, r4, r6
 800534a:	f04f 0100 	mov.w	r1, #0
 800534e:	f04f 0200 	mov.w	r2, #0
 8005352:	0262      	lsls	r2, r4, #9
 8005354:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005358:	0259      	lsls	r1, r3, #9
 800535a:	460b      	mov	r3, r1
 800535c:	4614      	mov	r4, r2
 800535e:	4618      	mov	r0, r3
 8005360:	4621      	mov	r1, r4
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f04f 0400 	mov.w	r4, #0
 8005368:	461a      	mov	r2, r3
 800536a:	4623      	mov	r3, r4
 800536c:	f7fb fc36 	bl	8000bdc <__aeabi_uldivmod>
 8005370:	4603      	mov	r3, r0
 8005372:	460c      	mov	r4, r1
 8005374:	60fb      	str	r3, [r7, #12]
 8005376:	e049      	b.n	800540c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005378:	4b2f      	ldr	r3, [pc, #188]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	099b      	lsrs	r3, r3, #6
 800537e:	f04f 0400 	mov.w	r4, #0
 8005382:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005386:	f04f 0200 	mov.w	r2, #0
 800538a:	ea03 0501 	and.w	r5, r3, r1
 800538e:	ea04 0602 	and.w	r6, r4, r2
 8005392:	4629      	mov	r1, r5
 8005394:	4632      	mov	r2, r6
 8005396:	f04f 0300 	mov.w	r3, #0
 800539a:	f04f 0400 	mov.w	r4, #0
 800539e:	0154      	lsls	r4, r2, #5
 80053a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80053a4:	014b      	lsls	r3, r1, #5
 80053a6:	4619      	mov	r1, r3
 80053a8:	4622      	mov	r2, r4
 80053aa:	1b49      	subs	r1, r1, r5
 80053ac:	eb62 0206 	sbc.w	r2, r2, r6
 80053b0:	f04f 0300 	mov.w	r3, #0
 80053b4:	f04f 0400 	mov.w	r4, #0
 80053b8:	0194      	lsls	r4, r2, #6
 80053ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80053be:	018b      	lsls	r3, r1, #6
 80053c0:	1a5b      	subs	r3, r3, r1
 80053c2:	eb64 0402 	sbc.w	r4, r4, r2
 80053c6:	f04f 0100 	mov.w	r1, #0
 80053ca:	f04f 0200 	mov.w	r2, #0
 80053ce:	00e2      	lsls	r2, r4, #3
 80053d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80053d4:	00d9      	lsls	r1, r3, #3
 80053d6:	460b      	mov	r3, r1
 80053d8:	4614      	mov	r4, r2
 80053da:	195b      	adds	r3, r3, r5
 80053dc:	eb44 0406 	adc.w	r4, r4, r6
 80053e0:	f04f 0100 	mov.w	r1, #0
 80053e4:	f04f 0200 	mov.w	r2, #0
 80053e8:	02a2      	lsls	r2, r4, #10
 80053ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80053ee:	0299      	lsls	r1, r3, #10
 80053f0:	460b      	mov	r3, r1
 80053f2:	4614      	mov	r4, r2
 80053f4:	4618      	mov	r0, r3
 80053f6:	4621      	mov	r1, r4
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f04f 0400 	mov.w	r4, #0
 80053fe:	461a      	mov	r2, r3
 8005400:	4623      	mov	r3, r4
 8005402:	f7fb fbeb 	bl	8000bdc <__aeabi_uldivmod>
 8005406:	4603      	mov	r3, r0
 8005408:	460c      	mov	r4, r1
 800540a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800540c:	4b0a      	ldr	r3, [pc, #40]	; (8005438 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	0c1b      	lsrs	r3, r3, #16
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	3301      	adds	r3, #1
 8005418:	005b      	lsls	r3, r3, #1
 800541a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	fbb2 f3f3 	udiv	r3, r2, r3
 8005424:	60bb      	str	r3, [r7, #8]
      break;
 8005426:	e002      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005428:	4b04      	ldr	r3, [pc, #16]	; (800543c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800542a:	60bb      	str	r3, [r7, #8]
      break;
 800542c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800542e:	68bb      	ldr	r3, [r7, #8]
}
 8005430:	4618      	mov	r0, r3
 8005432:	3714      	adds	r7, #20
 8005434:	46bd      	mov	sp, r7
 8005436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005438:	40023800 	.word	0x40023800
 800543c:	00f42400 	.word	0x00f42400
 8005440:	007a1200 	.word	0x007a1200

08005444 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005448:	4b03      	ldr	r3, [pc, #12]	; (8005458 <HAL_RCC_GetHCLKFreq+0x14>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr
 8005456:	bf00      	nop
 8005458:	20000030 	.word	0x20000030

0800545c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005460:	f7ff fff0 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8005464:	4601      	mov	r1, r0
 8005466:	4b05      	ldr	r3, [pc, #20]	; (800547c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	0a9b      	lsrs	r3, r3, #10
 800546c:	f003 0307 	and.w	r3, r3, #7
 8005470:	4a03      	ldr	r2, [pc, #12]	; (8005480 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005472:	5cd3      	ldrb	r3, [r2, r3]
 8005474:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005478:	4618      	mov	r0, r3
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40023800 	.word	0x40023800
 8005480:	0800bb58 	.word	0x0800bb58

08005484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005488:	f7ff ffdc 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 800548c:	4601      	mov	r1, r0
 800548e:	4b05      	ldr	r3, [pc, #20]	; (80054a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0b5b      	lsrs	r3, r3, #13
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4a03      	ldr	r2, [pc, #12]	; (80054a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800549a:	5cd3      	ldrb	r3, [r2, r3]
 800549c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	bd80      	pop	{r7, pc}
 80054a4:	40023800 	.word	0x40023800
 80054a8:	0800bb58 	.word	0x0800bb58

080054ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b082      	sub	sp, #8
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e01d      	b.n	80054fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fc fb94 	bl	8001c00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f000 f8e4 	bl	80056b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}

08005502 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2202      	movs	r2, #2
 800550e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f003 0307 	and.w	r3, r3, #7
 800551c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2b06      	cmp	r3, #6
 8005522:	d007      	beq.n	8005534 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f042 0201 	orr.w	r2, r2, #1
 8005532:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800553c:	2300      	movs	r3, #0
}
 800553e:	4618      	mov	r0, r3
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr

0800554a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b084      	sub	sp, #16
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
 8005552:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800555a:	2b01      	cmp	r3, #1
 800555c:	d101      	bne.n	8005562 <HAL_TIM_ConfigClockSource+0x18>
 800555e:	2302      	movs	r3, #2
 8005560:	e0a6      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x166>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2202      	movs	r2, #2
 800556e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005580:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005588:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d067      	beq.n	800566a <HAL_TIM_ConfigClockSource+0x120>
 800559a:	2b40      	cmp	r3, #64	; 0x40
 800559c:	d80b      	bhi.n	80055b6 <HAL_TIM_ConfigClockSource+0x6c>
 800559e:	2b10      	cmp	r3, #16
 80055a0:	d073      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x140>
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d802      	bhi.n	80055ac <HAL_TIM_ConfigClockSource+0x62>
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d06f      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80055aa:	e078      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055ac:	2b20      	cmp	r3, #32
 80055ae:	d06c      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x140>
 80055b0:	2b30      	cmp	r3, #48	; 0x30
 80055b2:	d06a      	beq.n	800568a <HAL_TIM_ConfigClockSource+0x140>
      break;
 80055b4:	e073      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055b6:	2b70      	cmp	r3, #112	; 0x70
 80055b8:	d00d      	beq.n	80055d6 <HAL_TIM_ConfigClockSource+0x8c>
 80055ba:	2b70      	cmp	r3, #112	; 0x70
 80055bc:	d804      	bhi.n	80055c8 <HAL_TIM_ConfigClockSource+0x7e>
 80055be:	2b50      	cmp	r3, #80	; 0x50
 80055c0:	d033      	beq.n	800562a <HAL_TIM_ConfigClockSource+0xe0>
 80055c2:	2b60      	cmp	r3, #96	; 0x60
 80055c4:	d041      	beq.n	800564a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80055c6:	e06a      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80055c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055cc:	d066      	beq.n	800569c <HAL_TIM_ConfigClockSource+0x152>
 80055ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055d2:	d017      	beq.n	8005604 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80055d4:	e063      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	6899      	ldr	r1, [r3, #8]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	f000 f981 	bl	80058ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80055f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	609a      	str	r2, [r3, #8]
      break;
 8005602:	e04c      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	6899      	ldr	r1, [r3, #8]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	685a      	ldr	r2, [r3, #4]
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	f000 f96a 	bl	80058ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689a      	ldr	r2, [r3, #8]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005626:	609a      	str	r2, [r3, #8]
      break;
 8005628:	e039      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6859      	ldr	r1, [r3, #4]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	461a      	mov	r2, r3
 8005638:	f000 f8de 	bl	80057f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2150      	movs	r1, #80	; 0x50
 8005642:	4618      	mov	r0, r3
 8005644:	f000 f937 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005648:	e029      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6818      	ldr	r0, [r3, #0]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	6859      	ldr	r1, [r3, #4]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	68db      	ldr	r3, [r3, #12]
 8005656:	461a      	mov	r2, r3
 8005658:	f000 f8fd 	bl	8005856 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	2160      	movs	r1, #96	; 0x60
 8005662:	4618      	mov	r0, r3
 8005664:	f000 f927 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005668:	e019      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6818      	ldr	r0, [r3, #0]
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	6859      	ldr	r1, [r3, #4]
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	461a      	mov	r2, r3
 8005678:	f000 f8be 	bl	80057f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2140      	movs	r1, #64	; 0x40
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f917 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 8005688:	e009      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681a      	ldr	r2, [r3, #0]
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4619      	mov	r1, r3
 8005694:	4610      	mov	r0, r2
 8005696:	f000 f90e 	bl	80058b6 <TIM_ITRx_SetConfig>
      break;
 800569a:	e000      	b.n	800569e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800569c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2201      	movs	r2, #1
 80056a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3710      	adds	r7, #16
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b085      	sub	sp, #20
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a40      	ldr	r2, [pc, #256]	; (80057cc <TIM_Base_SetConfig+0x114>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d013      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d6:	d00f      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a3d      	ldr	r2, [pc, #244]	; (80057d0 <TIM_Base_SetConfig+0x118>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d00b      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a3c      	ldr	r2, [pc, #240]	; (80057d4 <TIM_Base_SetConfig+0x11c>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a3b      	ldr	r2, [pc, #236]	; (80057d8 <TIM_Base_SetConfig+0x120>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_Base_SetConfig+0x40>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a3a      	ldr	r2, [pc, #232]	; (80057dc <TIM_Base_SetConfig+0x124>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d108      	bne.n	800570a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a2f      	ldr	r2, [pc, #188]	; (80057cc <TIM_Base_SetConfig+0x114>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d02b      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005718:	d027      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <TIM_Base_SetConfig+0x118>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d023      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a2b      	ldr	r2, [pc, #172]	; (80057d4 <TIM_Base_SetConfig+0x11c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01f      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a2a      	ldr	r2, [pc, #168]	; (80057d8 <TIM_Base_SetConfig+0x120>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01b      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a29      	ldr	r2, [pc, #164]	; (80057dc <TIM_Base_SetConfig+0x124>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d017      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a28      	ldr	r2, [pc, #160]	; (80057e0 <TIM_Base_SetConfig+0x128>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d013      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4a27      	ldr	r2, [pc, #156]	; (80057e4 <TIM_Base_SetConfig+0x12c>)
 8005746:	4293      	cmp	r3, r2
 8005748:	d00f      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	4a26      	ldr	r2, [pc, #152]	; (80057e8 <TIM_Base_SetConfig+0x130>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d00b      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	4a25      	ldr	r2, [pc, #148]	; (80057ec <TIM_Base_SetConfig+0x134>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d007      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a24      	ldr	r2, [pc, #144]	; (80057f0 <TIM_Base_SetConfig+0x138>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d003      	beq.n	800576a <TIM_Base_SetConfig+0xb2>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	4a23      	ldr	r2, [pc, #140]	; (80057f4 <TIM_Base_SetConfig+0x13c>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d108      	bne.n	800577c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005770:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4313      	orrs	r3, r2
 800577a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	4313      	orrs	r3, r2
 8005788:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	689a      	ldr	r2, [r3, #8]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a0a      	ldr	r2, [pc, #40]	; (80057cc <TIM_Base_SetConfig+0x114>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d003      	beq.n	80057b0 <TIM_Base_SetConfig+0xf8>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a0c      	ldr	r2, [pc, #48]	; (80057dc <TIM_Base_SetConfig+0x124>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d103      	bne.n	80057b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	691a      	ldr	r2, [r3, #16]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	615a      	str	r2, [r3, #20]
}
 80057be:	bf00      	nop
 80057c0:	3714      	adds	r7, #20
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
 80057ca:	bf00      	nop
 80057cc:	40010000 	.word	0x40010000
 80057d0:	40000400 	.word	0x40000400
 80057d4:	40000800 	.word	0x40000800
 80057d8:	40000c00 	.word	0x40000c00
 80057dc:	40010400 	.word	0x40010400
 80057e0:	40014000 	.word	0x40014000
 80057e4:	40014400 	.word	0x40014400
 80057e8:	40014800 	.word	0x40014800
 80057ec:	40001800 	.word	0x40001800
 80057f0:	40001c00 	.word	0x40001c00
 80057f4:	40002000 	.word	0x40002000

080057f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	60f8      	str	r0, [r7, #12]
 8005800:	60b9      	str	r1, [r7, #8]
 8005802:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a1b      	ldr	r3, [r3, #32]
 800580e:	f023 0201 	bic.w	r2, r3, #1
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	699b      	ldr	r3, [r3, #24]
 800581a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005822:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	011b      	lsls	r3, r3, #4
 8005828:	693a      	ldr	r2, [r7, #16]
 800582a:	4313      	orrs	r3, r2
 800582c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 030a 	bic.w	r3, r3, #10
 8005834:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	693a      	ldr	r2, [r7, #16]
 8005842:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	697a      	ldr	r2, [r7, #20]
 8005848:	621a      	str	r2, [r3, #32]
}
 800584a:	bf00      	nop
 800584c:	371c      	adds	r7, #28
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005856:	b480      	push	{r7}
 8005858:	b087      	sub	sp, #28
 800585a:	af00      	add	r7, sp, #0
 800585c:	60f8      	str	r0, [r7, #12]
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f023 0210 	bic.w	r2, r3, #16
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005880:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	031b      	lsls	r3, r3, #12
 8005886:	697a      	ldr	r2, [r7, #20]
 8005888:	4313      	orrs	r3, r2
 800588a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005892:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	621a      	str	r2, [r3, #32]
}
 80058aa:	bf00      	nop
 80058ac:	371c      	adds	r7, #28
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr

080058b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80058b6:	b480      	push	{r7}
 80058b8:	b085      	sub	sp, #20
 80058ba:	af00      	add	r7, sp, #0
 80058bc:	6078      	str	r0, [r7, #4]
 80058be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80058ce:	683a      	ldr	r2, [r7, #0]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f043 0307 	orr.w	r3, r3, #7
 80058d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	609a      	str	r2, [r3, #8]
}
 80058e0:	bf00      	nop
 80058e2:	3714      	adds	r7, #20
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005906:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	021a      	lsls	r2, r3, #8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	431a      	orrs	r2, r3
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	4313      	orrs	r3, r2
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	4313      	orrs	r3, r2
 8005918:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	609a      	str	r2, [r3, #8]
}
 8005920:	bf00      	nop
 8005922:	371c      	adds	r7, #28
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005940:	2302      	movs	r3, #2
 8005942:	e05a      	b.n	80059fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2202      	movs	r2, #2
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	689b      	ldr	r3, [r3, #8]
 8005962:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a21      	ldr	r2, [pc, #132]	; (8005a08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d022      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d01d      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4a1d      	ldr	r2, [pc, #116]	; (8005a0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d018      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a1b      	ldr	r2, [pc, #108]	; (8005a10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d013      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a1a      	ldr	r2, [pc, #104]	; (8005a14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80059ac:	4293      	cmp	r3, r2
 80059ae:	d00e      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a18      	ldr	r2, [pc, #96]	; (8005a18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d009      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a17      	ldr	r2, [pc, #92]	; (8005a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d004      	beq.n	80059ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a15      	ldr	r2, [pc, #84]	; (8005a20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d10c      	bne.n	80059e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80059ce:	68bb      	ldr	r3, [r7, #8]
 80059d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	68ba      	ldr	r2, [r7, #8]
 80059dc:	4313      	orrs	r3, r2
 80059de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3714      	adds	r7, #20
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	40010000 	.word	0x40010000
 8005a0c:	40000400 	.word	0x40000400
 8005a10:	40000800 	.word	0x40000800
 8005a14:	40000c00 	.word	0x40000c00
 8005a18:	40010400 	.word	0x40010400
 8005a1c:	40014000 	.word	0x40014000
 8005a20:	40001800 	.word	0x40001800

08005a24 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d101      	bne.n	8005a36 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a32:	2301      	movs	r3, #1
 8005a34:	e03f      	b.n	8005ab6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a3c:	b2db      	uxtb	r3, r3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d106      	bne.n	8005a50 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f7fc f962 	bl	8001d14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2224      	movs	r2, #36	; 0x24
 8005a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a66:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fc2d 	bl	80062c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	691a      	ldr	r2, [r3, #16]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a7c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a8c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68da      	ldr	r2, [r3, #12]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a9c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
	...

08005ac0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b086      	sub	sp, #24
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	60f8      	str	r0, [r7, #12]
 8005ac8:	60b9      	str	r1, [r7, #8]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d153      	bne.n	8005b82 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d002      	beq.n	8005ae6 <HAL_UART_Transmit_DMA+0x26>
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d101      	bne.n	8005aea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	e04c      	b.n	8005b84 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_UART_Transmit_DMA+0x38>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e045      	b.n	8005b84 <HAL_UART_Transmit_DMA+0xc4>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005b00:	68ba      	ldr	r2, [r7, #8]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	88fa      	ldrh	r2, [r7, #6]
 8005b0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	88fa      	ldrh	r2, [r7, #6]
 8005b10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2200      	movs	r2, #0
 8005b16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2221      	movs	r2, #33	; 0x21
 8005b1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b24:	4a19      	ldr	r2, [pc, #100]	; (8005b8c <HAL_UART_Transmit_DMA+0xcc>)
 8005b26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	4a18      	ldr	r2, [pc, #96]	; (8005b90 <HAL_UART_Transmit_DMA+0xd0>)
 8005b2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <HAL_UART_Transmit_DMA+0xd4>)
 8005b36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005b40:	f107 0308 	add.w	r3, r7, #8
 8005b44:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	6819      	ldr	r1, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3304      	adds	r3, #4
 8005b54:	461a      	mov	r2, r3
 8005b56:	88fb      	ldrh	r3, [r7, #6]
 8005b58:	f7fd f884 	bl	8002c64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b64:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	695a      	ldr	r2, [r3, #20]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b7c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	e000      	b.n	8005b84 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005b82:	2302      	movs	r3, #2
  }
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	08005ed5 	.word	0x08005ed5
 8005b90:	08005f27 	.word	0x08005f27
 8005b94:	08005fc7 	.word	0x08005fc7

08005b98 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005bac:	b2db      	uxtb	r3, r3
 8005bae:	2b20      	cmp	r3, #32
 8005bb0:	d166      	bne.n	8005c80 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d002      	beq.n	8005bbe <HAL_UART_Receive_DMA+0x26>
 8005bb8:	88fb      	ldrh	r3, [r7, #6]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e05f      	b.n	8005c82 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d101      	bne.n	8005bd0 <HAL_UART_Receive_DMA+0x38>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	e058      	b.n	8005c82 <HAL_UART_Receive_DMA+0xea>
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005bd8:	68ba      	ldr	r2, [r7, #8]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	88fa      	ldrh	r2, [r7, #6]
 8005be2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	2200      	movs	r2, #0
 8005be8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2222      	movs	r2, #34	; 0x22
 8005bee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf6:	4a25      	ldr	r2, [pc, #148]	; (8005c8c <HAL_UART_Receive_DMA+0xf4>)
 8005bf8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bfe:	4a24      	ldr	r2, [pc, #144]	; (8005c90 <HAL_UART_Receive_DMA+0xf8>)
 8005c00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c06:	4a23      	ldr	r2, [pc, #140]	; (8005c94 <HAL_UART_Receive_DMA+0xfc>)
 8005c08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c0e:	2200      	movs	r2, #0
 8005c10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005c12:	f107 0308 	add.w	r3, r7, #8
 8005c16:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	3304      	adds	r3, #4
 8005c22:	4619      	mov	r1, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	88fb      	ldrh	r3, [r7, #6]
 8005c2a:	f7fd f81b 	bl	8002c64 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	613b      	str	r3, [r7, #16]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	613b      	str	r3, [r7, #16]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685b      	ldr	r3, [r3, #4]
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2200      	movs	r2, #0
 8005c48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68da      	ldr	r2, [r3, #12]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c5a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	695a      	ldr	r2, [r3, #20]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f042 0201 	orr.w	r2, r2, #1
 8005c6a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c7a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	e000      	b.n	8005c82 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005c80:	2302      	movs	r3, #2
  }
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
 8005c8a:	bf00      	nop
 8005c8c:	08005f43 	.word	0x08005f43
 8005c90:	08005fab 	.word	0x08005fab
 8005c94:	08005fc7 	.word	0x08005fc7

08005c98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68db      	ldr	r3, [r3, #12]
 8005cae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	695b      	ldr	r3, [r3, #20]
 8005cb6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f003 030f 	and.w	r3, r3, #15
 8005cc6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d10d      	bne.n	8005cea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f003 0320 	and.w	r3, r3, #32
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d008      	beq.n	8005cea <HAL_UART_IRQHandler+0x52>
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	f003 0320 	and.w	r3, r3, #32
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fa6f 	bl	80061c6 <UART_Receive_IT>
      return;
 8005ce8:	e0d1      	b.n	8005e8e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	f000 80b0 	beq.w	8005e52 <HAL_UART_IRQHandler+0x1ba>
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d105      	bne.n	8005d08 <HAL_UART_IRQHandler+0x70>
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	f000 80a5 	beq.w	8005e52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_UART_IRQHandler+0x90>
 8005d12:	69bb      	ldr	r3, [r7, #24]
 8005d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d005      	beq.n	8005d28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d20:	f043 0201 	orr.w	r2, r3, #1
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f003 0304 	and.w	r3, r3, #4
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d00a      	beq.n	8005d48 <HAL_UART_IRQHandler+0xb0>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d005      	beq.n	8005d48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d40:	f043 0202 	orr.w	r2, r3, #2
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	f003 0302 	and.w	r3, r3, #2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00a      	beq.n	8005d68 <HAL_UART_IRQHandler+0xd0>
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	f003 0301 	and.w	r3, r3, #1
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d60:	f043 0204 	orr.w	r2, r3, #4
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005d68:	69fb      	ldr	r3, [r7, #28]
 8005d6a:	f003 0308 	and.w	r3, r3, #8
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00f      	beq.n	8005d92 <HAL_UART_IRQHandler+0xfa>
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f003 0320 	and.w	r3, r3, #32
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <HAL_UART_IRQHandler+0xee>
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f003 0301 	and.w	r3, r3, #1
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d005      	beq.n	8005d92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8a:	f043 0208 	orr.w	r2, r3, #8
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d078      	beq.n	8005e8c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	f003 0320 	and.w	r3, r3, #32
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d007      	beq.n	8005db4 <HAL_UART_IRQHandler+0x11c>
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	f003 0320 	and.w	r3, r3, #32
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d002      	beq.n	8005db4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 fa09 	bl	80061c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	695b      	ldr	r3, [r3, #20]
 8005dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dbe:	2b40      	cmp	r3, #64	; 0x40
 8005dc0:	bf0c      	ite	eq
 8005dc2:	2301      	moveq	r3, #1
 8005dc4:	2300      	movne	r3, #0
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dce:	f003 0308 	and.w	r3, r3, #8
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d102      	bne.n	8005ddc <HAL_UART_IRQHandler+0x144>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d031      	beq.n	8005e40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 f952 	bl	8006086 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	695b      	ldr	r3, [r3, #20]
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b40      	cmp	r3, #64	; 0x40
 8005dee:	d123      	bne.n	8005e38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	695a      	ldr	r2, [r3, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dfe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d013      	beq.n	8005e30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e0c:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <HAL_UART_IRQHandler+0x1fc>)
 8005e0e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fc ff7d 	bl	8002d14 <HAL_DMA_Abort_IT>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d016      	beq.n	8005e4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005e2a:	4610      	mov	r0, r2
 8005e2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e2e:	e00e      	b.n	8005e4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f000 f845 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e36:	e00a      	b.n	8005e4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f841 	bl	8005ec0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e3e:	e006      	b.n	8005e4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f83d 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005e4c:	e01e      	b.n	8005e8c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4e:	bf00      	nop
    return;
 8005e50:	e01c      	b.n	8005e8c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d008      	beq.n	8005e6e <HAL_UART_IRQHandler+0x1d6>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d003      	beq.n	8005e6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 f93f 	bl	80060ea <UART_Transmit_IT>
    return;
 8005e6c:	e00f      	b.n	8005e8e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00a      	beq.n	8005e8e <HAL_UART_IRQHandler+0x1f6>
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d005      	beq.n	8005e8e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f000 f987 	bl	8006196 <UART_EndTransmit_IT>
    return;
 8005e88:	bf00      	nop
 8005e8a:	e000      	b.n	8005e8e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005e8c:	bf00      	nop
  }
}
 8005e8e:	3720      	adds	r7, #32
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}
 8005e94:	080060c3 	.word	0x080060c3

08005e98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005ed4:	b580      	push	{r7, lr}
 8005ed6:	b084      	sub	sp, #16
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d113      	bne.n	8005f18 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	695a      	ldr	r2, [r3, #20]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f04:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f14:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f16:	e002      	b.n	8005f1e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f7fb fbf7 	bl	800170c <HAL_UART_TxCpltCallback>
}
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005f34:	68f8      	ldr	r0, [r7, #12]
 8005f36:	f7ff ffaf 	bl	8005e98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f3a:	bf00      	nop
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d11e      	bne.n	8005f9c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f72:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0201 	bic.w	r2, r2, #1
 8005f82:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f92:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2220      	movs	r2, #32
 8005f98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005f9c:	68f8      	ldr	r0, [r7, #12]
 8005f9e:	f7fb fba3 	bl	80016e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fa2:	bf00      	nop
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}

08005faa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005fb8:	68f8      	ldr	r0, [r7, #12]
 8005fba:	f7ff ff77 	bl	8005eac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fbe:	bf00      	nop
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fc6:	b580      	push	{r7, lr}
 8005fc8:	b084      	sub	sp, #16
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fe2:	2b80      	cmp	r3, #128	; 0x80
 8005fe4:	bf0c      	ite	eq
 8005fe6:	2301      	moveq	r3, #1
 8005fe8:	2300      	movne	r3, #0
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ff4:	b2db      	uxtb	r3, r3
 8005ff6:	2b21      	cmp	r3, #33	; 0x21
 8005ff8:	d108      	bne.n	800600c <UART_DMAError+0x46>
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d005      	beq.n	800600c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	2200      	movs	r2, #0
 8006004:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f000 f827 	bl	800605a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695b      	ldr	r3, [r3, #20]
 8006012:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006016:	2b40      	cmp	r3, #64	; 0x40
 8006018:	bf0c      	ite	eq
 800601a:	2301      	moveq	r3, #1
 800601c:	2300      	movne	r3, #0
 800601e:	b2db      	uxtb	r3, r3
 8006020:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b22      	cmp	r3, #34	; 0x22
 800602c:	d108      	bne.n	8006040 <UART_DMAError+0x7a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2200      	movs	r2, #0
 8006038:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800603a:	68b8      	ldr	r0, [r7, #8]
 800603c:	f000 f823 	bl	8006086 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006044:	f043 0210 	orr.w	r2, r3, #16
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800604c:	68b8      	ldr	r0, [r7, #8]
 800604e:	f7ff ff37 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006052:	bf00      	nop
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68da      	ldr	r2, [r3, #12]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006070:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800607a:	bf00      	nop
 800607c:	370c      	adds	r7, #12
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006086:	b480      	push	{r7}
 8006088:	b083      	sub	sp, #12
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68da      	ldr	r2, [r3, #12]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800609c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695a      	ldr	r2, [r3, #20]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0201 	bic.w	r2, r2, #1
 80060ac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80060b6:	bf00      	nop
 80060b8:	370c      	adds	r7, #12
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr

080060c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f7ff feef 	bl	8005ec0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060e2:	bf00      	nop
 80060e4:	3710      	adds	r7, #16
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}

080060ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80060ea:	b480      	push	{r7}
 80060ec:	b085      	sub	sp, #20
 80060ee:	af00      	add	r7, sp, #0
 80060f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b21      	cmp	r3, #33	; 0x21
 80060fc:	d144      	bne.n	8006188 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006106:	d11a      	bne.n	800613e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6a1b      	ldr	r3, [r3, #32]
 800610c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	461a      	mov	r2, r3
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800611c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d105      	bne.n	8006132 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a1b      	ldr	r3, [r3, #32]
 800612a:	1c9a      	adds	r2, r3, #2
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	621a      	str	r2, [r3, #32]
 8006130:	e00e      	b.n	8006150 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	621a      	str	r2, [r3, #32]
 800613c:	e008      	b.n	8006150 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	1c59      	adds	r1, r3, #1
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	6211      	str	r1, [r2, #32]
 8006148:	781a      	ldrb	r2, [r3, #0]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29b      	uxth	r3, r3
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4619      	mov	r1, r3
 800615e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10f      	bne.n	8006184 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006172:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006182:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006184:	2300      	movs	r3, #0
 8006186:	e000      	b.n	800618a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006188:	2302      	movs	r3, #2
  }
}
 800618a:	4618      	mov	r0, r3
 800618c:	3714      	adds	r7, #20
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006196:	b580      	push	{r7, lr}
 8006198:	b082      	sub	sp, #8
 800619a:	af00      	add	r7, sp, #0
 800619c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	68da      	ldr	r2, [r3, #12]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2220      	movs	r2, #32
 80061b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fb faa8 	bl	800170c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3708      	adds	r7, #8
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80061c6:	b580      	push	{r7, lr}
 80061c8:	b084      	sub	sp, #16
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b22      	cmp	r3, #34	; 0x22
 80061d8:	d171      	bne.n	80062be <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d123      	bne.n	800622c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10e      	bne.n	8006210 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	b29b      	uxth	r3, r3
 80061fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006208:	1c9a      	adds	r2, r3, #2
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	629a      	str	r2, [r3, #40]	; 0x28
 800620e:	e029      	b.n	8006264 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	b29b      	uxth	r3, r3
 8006218:	b2db      	uxtb	r3, r3
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006224:	1c5a      	adds	r2, r3, #1
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	629a      	str	r2, [r3, #40]	; 0x28
 800622a:	e01b      	b.n	8006264 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10a      	bne.n	800624a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6858      	ldr	r0, [r3, #4]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	1c59      	adds	r1, r3, #1
 8006240:	687a      	ldr	r2, [r7, #4]
 8006242:	6291      	str	r1, [r2, #40]	; 0x28
 8006244:	b2c2      	uxtb	r2, r0
 8006246:	701a      	strb	r2, [r3, #0]
 8006248:	e00c      	b.n	8006264 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	b2da      	uxtb	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	1c58      	adds	r0, r3, #1
 8006258:	6879      	ldr	r1, [r7, #4]
 800625a:	6288      	str	r0, [r1, #40]	; 0x28
 800625c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006260:	b2d2      	uxtb	r2, r2
 8006262:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29b      	uxth	r3, r3
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	4619      	mov	r1, r3
 8006272:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006274:	2b00      	cmp	r3, #0
 8006276:	d120      	bne.n	80062ba <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 0220 	bic.w	r2, r2, #32
 8006286:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006296:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695a      	ldr	r2, [r3, #20]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0201 	bic.w	r2, r2, #1
 80062a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80062b0:	6878      	ldr	r0, [r7, #4]
 80062b2:	f7fb fa19 	bl	80016e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80062b6:	2300      	movs	r3, #0
 80062b8:	e002      	b.n	80062c0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80062ba:	2300      	movs	r3, #0
 80062bc:	e000      	b.n	80062c0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80062be:	2302      	movs	r3, #2
  }
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062cc:	b085      	sub	sp, #20
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	68da      	ldr	r2, [r3, #12]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	430a      	orrs	r2, r1
 80062e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	689a      	ldr	r2, [r3, #8]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	431a      	orrs	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	695b      	ldr	r3, [r3, #20]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	69db      	ldr	r3, [r3, #28]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68db      	ldr	r3, [r3, #12]
 8006306:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800630a:	f023 030c 	bic.w	r3, r3, #12
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6812      	ldr	r2, [r2, #0]
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	430b      	orrs	r3, r1
 8006316:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	695b      	ldr	r3, [r3, #20]
 800631e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	430a      	orrs	r2, r1
 800632c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006336:	f040 818b 	bne.w	8006650 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4ac1      	ldr	r2, [pc, #772]	; (8006644 <UART_SetConfig+0x37c>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d005      	beq.n	8006350 <UART_SetConfig+0x88>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4abf      	ldr	r2, [pc, #764]	; (8006648 <UART_SetConfig+0x380>)
 800634a:	4293      	cmp	r3, r2
 800634c:	f040 80bd 	bne.w	80064ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006350:	f7ff f898 	bl	8005484 <HAL_RCC_GetPCLK2Freq>
 8006354:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	461d      	mov	r5, r3
 800635a:	f04f 0600 	mov.w	r6, #0
 800635e:	46a8      	mov	r8, r5
 8006360:	46b1      	mov	r9, r6
 8006362:	eb18 0308 	adds.w	r3, r8, r8
 8006366:	eb49 0409 	adc.w	r4, r9, r9
 800636a:	4698      	mov	r8, r3
 800636c:	46a1      	mov	r9, r4
 800636e:	eb18 0805 	adds.w	r8, r8, r5
 8006372:	eb49 0906 	adc.w	r9, r9, r6
 8006376:	f04f 0100 	mov.w	r1, #0
 800637a:	f04f 0200 	mov.w	r2, #0
 800637e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006382:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006386:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800638a:	4688      	mov	r8, r1
 800638c:	4691      	mov	r9, r2
 800638e:	eb18 0005 	adds.w	r0, r8, r5
 8006392:	eb49 0106 	adc.w	r1, r9, r6
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	461d      	mov	r5, r3
 800639c:	f04f 0600 	mov.w	r6, #0
 80063a0:	196b      	adds	r3, r5, r5
 80063a2:	eb46 0406 	adc.w	r4, r6, r6
 80063a6:	461a      	mov	r2, r3
 80063a8:	4623      	mov	r3, r4
 80063aa:	f7fa fc17 	bl	8000bdc <__aeabi_uldivmod>
 80063ae:	4603      	mov	r3, r0
 80063b0:	460c      	mov	r4, r1
 80063b2:	461a      	mov	r2, r3
 80063b4:	4ba5      	ldr	r3, [pc, #660]	; (800664c <UART_SetConfig+0x384>)
 80063b6:	fba3 2302 	umull	r2, r3, r3, r2
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	461d      	mov	r5, r3
 80063c4:	f04f 0600 	mov.w	r6, #0
 80063c8:	46a9      	mov	r9, r5
 80063ca:	46b2      	mov	sl, r6
 80063cc:	eb19 0309 	adds.w	r3, r9, r9
 80063d0:	eb4a 040a 	adc.w	r4, sl, sl
 80063d4:	4699      	mov	r9, r3
 80063d6:	46a2      	mov	sl, r4
 80063d8:	eb19 0905 	adds.w	r9, r9, r5
 80063dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80063e0:	f04f 0100 	mov.w	r1, #0
 80063e4:	f04f 0200 	mov.w	r2, #0
 80063e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80063ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80063f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80063f4:	4689      	mov	r9, r1
 80063f6:	4692      	mov	sl, r2
 80063f8:	eb19 0005 	adds.w	r0, r9, r5
 80063fc:	eb4a 0106 	adc.w	r1, sl, r6
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	461d      	mov	r5, r3
 8006406:	f04f 0600 	mov.w	r6, #0
 800640a:	196b      	adds	r3, r5, r5
 800640c:	eb46 0406 	adc.w	r4, r6, r6
 8006410:	461a      	mov	r2, r3
 8006412:	4623      	mov	r3, r4
 8006414:	f7fa fbe2 	bl	8000bdc <__aeabi_uldivmod>
 8006418:	4603      	mov	r3, r0
 800641a:	460c      	mov	r4, r1
 800641c:	461a      	mov	r2, r3
 800641e:	4b8b      	ldr	r3, [pc, #556]	; (800664c <UART_SetConfig+0x384>)
 8006420:	fba3 1302 	umull	r1, r3, r3, r2
 8006424:	095b      	lsrs	r3, r3, #5
 8006426:	2164      	movs	r1, #100	; 0x64
 8006428:	fb01 f303 	mul.w	r3, r1, r3
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	00db      	lsls	r3, r3, #3
 8006430:	3332      	adds	r3, #50	; 0x32
 8006432:	4a86      	ldr	r2, [pc, #536]	; (800664c <UART_SetConfig+0x384>)
 8006434:	fba2 2303 	umull	r2, r3, r2, r3
 8006438:	095b      	lsrs	r3, r3, #5
 800643a:	005b      	lsls	r3, r3, #1
 800643c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006440:	4498      	add	r8, r3
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	461d      	mov	r5, r3
 8006446:	f04f 0600 	mov.w	r6, #0
 800644a:	46a9      	mov	r9, r5
 800644c:	46b2      	mov	sl, r6
 800644e:	eb19 0309 	adds.w	r3, r9, r9
 8006452:	eb4a 040a 	adc.w	r4, sl, sl
 8006456:	4699      	mov	r9, r3
 8006458:	46a2      	mov	sl, r4
 800645a:	eb19 0905 	adds.w	r9, r9, r5
 800645e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006462:	f04f 0100 	mov.w	r1, #0
 8006466:	f04f 0200 	mov.w	r2, #0
 800646a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800646e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006476:	4689      	mov	r9, r1
 8006478:	4692      	mov	sl, r2
 800647a:	eb19 0005 	adds.w	r0, r9, r5
 800647e:	eb4a 0106 	adc.w	r1, sl, r6
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	461d      	mov	r5, r3
 8006488:	f04f 0600 	mov.w	r6, #0
 800648c:	196b      	adds	r3, r5, r5
 800648e:	eb46 0406 	adc.w	r4, r6, r6
 8006492:	461a      	mov	r2, r3
 8006494:	4623      	mov	r3, r4
 8006496:	f7fa fba1 	bl	8000bdc <__aeabi_uldivmod>
 800649a:	4603      	mov	r3, r0
 800649c:	460c      	mov	r4, r1
 800649e:	461a      	mov	r2, r3
 80064a0:	4b6a      	ldr	r3, [pc, #424]	; (800664c <UART_SetConfig+0x384>)
 80064a2:	fba3 1302 	umull	r1, r3, r3, r2
 80064a6:	095b      	lsrs	r3, r3, #5
 80064a8:	2164      	movs	r1, #100	; 0x64
 80064aa:	fb01 f303 	mul.w	r3, r1, r3
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	00db      	lsls	r3, r3, #3
 80064b2:	3332      	adds	r3, #50	; 0x32
 80064b4:	4a65      	ldr	r2, [pc, #404]	; (800664c <UART_SetConfig+0x384>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	095b      	lsrs	r3, r3, #5
 80064bc:	f003 0207 	and.w	r2, r3, #7
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4442      	add	r2, r8
 80064c6:	609a      	str	r2, [r3, #8]
 80064c8:	e26f      	b.n	80069aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064ca:	f7fe ffc7 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 80064ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	461d      	mov	r5, r3
 80064d4:	f04f 0600 	mov.w	r6, #0
 80064d8:	46a8      	mov	r8, r5
 80064da:	46b1      	mov	r9, r6
 80064dc:	eb18 0308 	adds.w	r3, r8, r8
 80064e0:	eb49 0409 	adc.w	r4, r9, r9
 80064e4:	4698      	mov	r8, r3
 80064e6:	46a1      	mov	r9, r4
 80064e8:	eb18 0805 	adds.w	r8, r8, r5
 80064ec:	eb49 0906 	adc.w	r9, r9, r6
 80064f0:	f04f 0100 	mov.w	r1, #0
 80064f4:	f04f 0200 	mov.w	r2, #0
 80064f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80064fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006500:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006504:	4688      	mov	r8, r1
 8006506:	4691      	mov	r9, r2
 8006508:	eb18 0005 	adds.w	r0, r8, r5
 800650c:	eb49 0106 	adc.w	r1, r9, r6
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	461d      	mov	r5, r3
 8006516:	f04f 0600 	mov.w	r6, #0
 800651a:	196b      	adds	r3, r5, r5
 800651c:	eb46 0406 	adc.w	r4, r6, r6
 8006520:	461a      	mov	r2, r3
 8006522:	4623      	mov	r3, r4
 8006524:	f7fa fb5a 	bl	8000bdc <__aeabi_uldivmod>
 8006528:	4603      	mov	r3, r0
 800652a:	460c      	mov	r4, r1
 800652c:	461a      	mov	r2, r3
 800652e:	4b47      	ldr	r3, [pc, #284]	; (800664c <UART_SetConfig+0x384>)
 8006530:	fba3 2302 	umull	r2, r3, r3, r2
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	461d      	mov	r5, r3
 800653e:	f04f 0600 	mov.w	r6, #0
 8006542:	46a9      	mov	r9, r5
 8006544:	46b2      	mov	sl, r6
 8006546:	eb19 0309 	adds.w	r3, r9, r9
 800654a:	eb4a 040a 	adc.w	r4, sl, sl
 800654e:	4699      	mov	r9, r3
 8006550:	46a2      	mov	sl, r4
 8006552:	eb19 0905 	adds.w	r9, r9, r5
 8006556:	eb4a 0a06 	adc.w	sl, sl, r6
 800655a:	f04f 0100 	mov.w	r1, #0
 800655e:	f04f 0200 	mov.w	r2, #0
 8006562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800656a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800656e:	4689      	mov	r9, r1
 8006570:	4692      	mov	sl, r2
 8006572:	eb19 0005 	adds.w	r0, r9, r5
 8006576:	eb4a 0106 	adc.w	r1, sl, r6
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	461d      	mov	r5, r3
 8006580:	f04f 0600 	mov.w	r6, #0
 8006584:	196b      	adds	r3, r5, r5
 8006586:	eb46 0406 	adc.w	r4, r6, r6
 800658a:	461a      	mov	r2, r3
 800658c:	4623      	mov	r3, r4
 800658e:	f7fa fb25 	bl	8000bdc <__aeabi_uldivmod>
 8006592:	4603      	mov	r3, r0
 8006594:	460c      	mov	r4, r1
 8006596:	461a      	mov	r2, r3
 8006598:	4b2c      	ldr	r3, [pc, #176]	; (800664c <UART_SetConfig+0x384>)
 800659a:	fba3 1302 	umull	r1, r3, r3, r2
 800659e:	095b      	lsrs	r3, r3, #5
 80065a0:	2164      	movs	r1, #100	; 0x64
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	00db      	lsls	r3, r3, #3
 80065aa:	3332      	adds	r3, #50	; 0x32
 80065ac:	4a27      	ldr	r2, [pc, #156]	; (800664c <UART_SetConfig+0x384>)
 80065ae:	fba2 2303 	umull	r2, r3, r2, r3
 80065b2:	095b      	lsrs	r3, r3, #5
 80065b4:	005b      	lsls	r3, r3, #1
 80065b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065ba:	4498      	add	r8, r3
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	461d      	mov	r5, r3
 80065c0:	f04f 0600 	mov.w	r6, #0
 80065c4:	46a9      	mov	r9, r5
 80065c6:	46b2      	mov	sl, r6
 80065c8:	eb19 0309 	adds.w	r3, r9, r9
 80065cc:	eb4a 040a 	adc.w	r4, sl, sl
 80065d0:	4699      	mov	r9, r3
 80065d2:	46a2      	mov	sl, r4
 80065d4:	eb19 0905 	adds.w	r9, r9, r5
 80065d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80065dc:	f04f 0100 	mov.w	r1, #0
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065f0:	4689      	mov	r9, r1
 80065f2:	4692      	mov	sl, r2
 80065f4:	eb19 0005 	adds.w	r0, r9, r5
 80065f8:	eb4a 0106 	adc.w	r1, sl, r6
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	461d      	mov	r5, r3
 8006602:	f04f 0600 	mov.w	r6, #0
 8006606:	196b      	adds	r3, r5, r5
 8006608:	eb46 0406 	adc.w	r4, r6, r6
 800660c:	461a      	mov	r2, r3
 800660e:	4623      	mov	r3, r4
 8006610:	f7fa fae4 	bl	8000bdc <__aeabi_uldivmod>
 8006614:	4603      	mov	r3, r0
 8006616:	460c      	mov	r4, r1
 8006618:	461a      	mov	r2, r3
 800661a:	4b0c      	ldr	r3, [pc, #48]	; (800664c <UART_SetConfig+0x384>)
 800661c:	fba3 1302 	umull	r1, r3, r3, r2
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	2164      	movs	r1, #100	; 0x64
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	00db      	lsls	r3, r3, #3
 800662c:	3332      	adds	r3, #50	; 0x32
 800662e:	4a07      	ldr	r2, [pc, #28]	; (800664c <UART_SetConfig+0x384>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	f003 0207 	and.w	r2, r3, #7
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4442      	add	r2, r8
 8006640:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006642:	e1b2      	b.n	80069aa <UART_SetConfig+0x6e2>
 8006644:	40011000 	.word	0x40011000
 8006648:	40011400 	.word	0x40011400
 800664c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4ad7      	ldr	r2, [pc, #860]	; (80069b4 <UART_SetConfig+0x6ec>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d005      	beq.n	8006666 <UART_SetConfig+0x39e>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4ad6      	ldr	r2, [pc, #856]	; (80069b8 <UART_SetConfig+0x6f0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	f040 80d1 	bne.w	8006808 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006666:	f7fe ff0d 	bl	8005484 <HAL_RCC_GetPCLK2Freq>
 800666a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	469a      	mov	sl, r3
 8006670:	f04f 0b00 	mov.w	fp, #0
 8006674:	46d0      	mov	r8, sl
 8006676:	46d9      	mov	r9, fp
 8006678:	eb18 0308 	adds.w	r3, r8, r8
 800667c:	eb49 0409 	adc.w	r4, r9, r9
 8006680:	4698      	mov	r8, r3
 8006682:	46a1      	mov	r9, r4
 8006684:	eb18 080a 	adds.w	r8, r8, sl
 8006688:	eb49 090b 	adc.w	r9, r9, fp
 800668c:	f04f 0100 	mov.w	r1, #0
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006698:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800669c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80066a0:	4688      	mov	r8, r1
 80066a2:	4691      	mov	r9, r2
 80066a4:	eb1a 0508 	adds.w	r5, sl, r8
 80066a8:	eb4b 0609 	adc.w	r6, fp, r9
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	4619      	mov	r1, r3
 80066b2:	f04f 0200 	mov.w	r2, #0
 80066b6:	f04f 0300 	mov.w	r3, #0
 80066ba:	f04f 0400 	mov.w	r4, #0
 80066be:	0094      	lsls	r4, r2, #2
 80066c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066c4:	008b      	lsls	r3, r1, #2
 80066c6:	461a      	mov	r2, r3
 80066c8:	4623      	mov	r3, r4
 80066ca:	4628      	mov	r0, r5
 80066cc:	4631      	mov	r1, r6
 80066ce:	f7fa fa85 	bl	8000bdc <__aeabi_uldivmod>
 80066d2:	4603      	mov	r3, r0
 80066d4:	460c      	mov	r4, r1
 80066d6:	461a      	mov	r2, r3
 80066d8:	4bb8      	ldr	r3, [pc, #736]	; (80069bc <UART_SetConfig+0x6f4>)
 80066da:	fba3 2302 	umull	r2, r3, r3, r2
 80066de:	095b      	lsrs	r3, r3, #5
 80066e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	469b      	mov	fp, r3
 80066e8:	f04f 0c00 	mov.w	ip, #0
 80066ec:	46d9      	mov	r9, fp
 80066ee:	46e2      	mov	sl, ip
 80066f0:	eb19 0309 	adds.w	r3, r9, r9
 80066f4:	eb4a 040a 	adc.w	r4, sl, sl
 80066f8:	4699      	mov	r9, r3
 80066fa:	46a2      	mov	sl, r4
 80066fc:	eb19 090b 	adds.w	r9, r9, fp
 8006700:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006704:	f04f 0100 	mov.w	r1, #0
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006710:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006714:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006718:	4689      	mov	r9, r1
 800671a:	4692      	mov	sl, r2
 800671c:	eb1b 0509 	adds.w	r5, fp, r9
 8006720:	eb4c 060a 	adc.w	r6, ip, sl
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4619      	mov	r1, r3
 800672a:	f04f 0200 	mov.w	r2, #0
 800672e:	f04f 0300 	mov.w	r3, #0
 8006732:	f04f 0400 	mov.w	r4, #0
 8006736:	0094      	lsls	r4, r2, #2
 8006738:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800673c:	008b      	lsls	r3, r1, #2
 800673e:	461a      	mov	r2, r3
 8006740:	4623      	mov	r3, r4
 8006742:	4628      	mov	r0, r5
 8006744:	4631      	mov	r1, r6
 8006746:	f7fa fa49 	bl	8000bdc <__aeabi_uldivmod>
 800674a:	4603      	mov	r3, r0
 800674c:	460c      	mov	r4, r1
 800674e:	461a      	mov	r2, r3
 8006750:	4b9a      	ldr	r3, [pc, #616]	; (80069bc <UART_SetConfig+0x6f4>)
 8006752:	fba3 1302 	umull	r1, r3, r3, r2
 8006756:	095b      	lsrs	r3, r3, #5
 8006758:	2164      	movs	r1, #100	; 0x64
 800675a:	fb01 f303 	mul.w	r3, r1, r3
 800675e:	1ad3      	subs	r3, r2, r3
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	3332      	adds	r3, #50	; 0x32
 8006764:	4a95      	ldr	r2, [pc, #596]	; (80069bc <UART_SetConfig+0x6f4>)
 8006766:	fba2 2303 	umull	r2, r3, r2, r3
 800676a:	095b      	lsrs	r3, r3, #5
 800676c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006770:	4498      	add	r8, r3
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	469b      	mov	fp, r3
 8006776:	f04f 0c00 	mov.w	ip, #0
 800677a:	46d9      	mov	r9, fp
 800677c:	46e2      	mov	sl, ip
 800677e:	eb19 0309 	adds.w	r3, r9, r9
 8006782:	eb4a 040a 	adc.w	r4, sl, sl
 8006786:	4699      	mov	r9, r3
 8006788:	46a2      	mov	sl, r4
 800678a:	eb19 090b 	adds.w	r9, r9, fp
 800678e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006792:	f04f 0100 	mov.w	r1, #0
 8006796:	f04f 0200 	mov.w	r2, #0
 800679a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800679e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067a6:	4689      	mov	r9, r1
 80067a8:	4692      	mov	sl, r2
 80067aa:	eb1b 0509 	adds.w	r5, fp, r9
 80067ae:	eb4c 060a 	adc.w	r6, ip, sl
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	4619      	mov	r1, r3
 80067b8:	f04f 0200 	mov.w	r2, #0
 80067bc:	f04f 0300 	mov.w	r3, #0
 80067c0:	f04f 0400 	mov.w	r4, #0
 80067c4:	0094      	lsls	r4, r2, #2
 80067c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067ca:	008b      	lsls	r3, r1, #2
 80067cc:	461a      	mov	r2, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	4628      	mov	r0, r5
 80067d2:	4631      	mov	r1, r6
 80067d4:	f7fa fa02 	bl	8000bdc <__aeabi_uldivmod>
 80067d8:	4603      	mov	r3, r0
 80067da:	460c      	mov	r4, r1
 80067dc:	461a      	mov	r2, r3
 80067de:	4b77      	ldr	r3, [pc, #476]	; (80069bc <UART_SetConfig+0x6f4>)
 80067e0:	fba3 1302 	umull	r1, r3, r3, r2
 80067e4:	095b      	lsrs	r3, r3, #5
 80067e6:	2164      	movs	r1, #100	; 0x64
 80067e8:	fb01 f303 	mul.w	r3, r1, r3
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	011b      	lsls	r3, r3, #4
 80067f0:	3332      	adds	r3, #50	; 0x32
 80067f2:	4a72      	ldr	r2, [pc, #456]	; (80069bc <UART_SetConfig+0x6f4>)
 80067f4:	fba2 2303 	umull	r2, r3, r2, r3
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	f003 020f 	and.w	r2, r3, #15
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4442      	add	r2, r8
 8006804:	609a      	str	r2, [r3, #8]
 8006806:	e0d0      	b.n	80069aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006808:	f7fe fe28 	bl	800545c <HAL_RCC_GetPCLK1Freq>
 800680c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	469a      	mov	sl, r3
 8006812:	f04f 0b00 	mov.w	fp, #0
 8006816:	46d0      	mov	r8, sl
 8006818:	46d9      	mov	r9, fp
 800681a:	eb18 0308 	adds.w	r3, r8, r8
 800681e:	eb49 0409 	adc.w	r4, r9, r9
 8006822:	4698      	mov	r8, r3
 8006824:	46a1      	mov	r9, r4
 8006826:	eb18 080a 	adds.w	r8, r8, sl
 800682a:	eb49 090b 	adc.w	r9, r9, fp
 800682e:	f04f 0100 	mov.w	r1, #0
 8006832:	f04f 0200 	mov.w	r2, #0
 8006836:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800683a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800683e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006842:	4688      	mov	r8, r1
 8006844:	4691      	mov	r9, r2
 8006846:	eb1a 0508 	adds.w	r5, sl, r8
 800684a:	eb4b 0609 	adc.w	r6, fp, r9
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	4619      	mov	r1, r3
 8006854:	f04f 0200 	mov.w	r2, #0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	f04f 0400 	mov.w	r4, #0
 8006860:	0094      	lsls	r4, r2, #2
 8006862:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006866:	008b      	lsls	r3, r1, #2
 8006868:	461a      	mov	r2, r3
 800686a:	4623      	mov	r3, r4
 800686c:	4628      	mov	r0, r5
 800686e:	4631      	mov	r1, r6
 8006870:	f7fa f9b4 	bl	8000bdc <__aeabi_uldivmod>
 8006874:	4603      	mov	r3, r0
 8006876:	460c      	mov	r4, r1
 8006878:	461a      	mov	r2, r3
 800687a:	4b50      	ldr	r3, [pc, #320]	; (80069bc <UART_SetConfig+0x6f4>)
 800687c:	fba3 2302 	umull	r2, r3, r3, r2
 8006880:	095b      	lsrs	r3, r3, #5
 8006882:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	469b      	mov	fp, r3
 800688a:	f04f 0c00 	mov.w	ip, #0
 800688e:	46d9      	mov	r9, fp
 8006890:	46e2      	mov	sl, ip
 8006892:	eb19 0309 	adds.w	r3, r9, r9
 8006896:	eb4a 040a 	adc.w	r4, sl, sl
 800689a:	4699      	mov	r9, r3
 800689c:	46a2      	mov	sl, r4
 800689e:	eb19 090b 	adds.w	r9, r9, fp
 80068a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80068a6:	f04f 0100 	mov.w	r1, #0
 80068aa:	f04f 0200 	mov.w	r2, #0
 80068ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80068b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80068b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80068ba:	4689      	mov	r9, r1
 80068bc:	4692      	mov	sl, r2
 80068be:	eb1b 0509 	adds.w	r5, fp, r9
 80068c2:	eb4c 060a 	adc.w	r6, ip, sl
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	685b      	ldr	r3, [r3, #4]
 80068ca:	4619      	mov	r1, r3
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	f04f 0300 	mov.w	r3, #0
 80068d4:	f04f 0400 	mov.w	r4, #0
 80068d8:	0094      	lsls	r4, r2, #2
 80068da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80068de:	008b      	lsls	r3, r1, #2
 80068e0:	461a      	mov	r2, r3
 80068e2:	4623      	mov	r3, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	4631      	mov	r1, r6
 80068e8:	f7fa f978 	bl	8000bdc <__aeabi_uldivmod>
 80068ec:	4603      	mov	r3, r0
 80068ee:	460c      	mov	r4, r1
 80068f0:	461a      	mov	r2, r3
 80068f2:	4b32      	ldr	r3, [pc, #200]	; (80069bc <UART_SetConfig+0x6f4>)
 80068f4:	fba3 1302 	umull	r1, r3, r3, r2
 80068f8:	095b      	lsrs	r3, r3, #5
 80068fa:	2164      	movs	r1, #100	; 0x64
 80068fc:	fb01 f303 	mul.w	r3, r1, r3
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	011b      	lsls	r3, r3, #4
 8006904:	3332      	adds	r3, #50	; 0x32
 8006906:	4a2d      	ldr	r2, [pc, #180]	; (80069bc <UART_SetConfig+0x6f4>)
 8006908:	fba2 2303 	umull	r2, r3, r2, r3
 800690c:	095b      	lsrs	r3, r3, #5
 800690e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006912:	4498      	add	r8, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	469b      	mov	fp, r3
 8006918:	f04f 0c00 	mov.w	ip, #0
 800691c:	46d9      	mov	r9, fp
 800691e:	46e2      	mov	sl, ip
 8006920:	eb19 0309 	adds.w	r3, r9, r9
 8006924:	eb4a 040a 	adc.w	r4, sl, sl
 8006928:	4699      	mov	r9, r3
 800692a:	46a2      	mov	sl, r4
 800692c:	eb19 090b 	adds.w	r9, r9, fp
 8006930:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006934:	f04f 0100 	mov.w	r1, #0
 8006938:	f04f 0200 	mov.w	r2, #0
 800693c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006940:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006944:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006948:	4689      	mov	r9, r1
 800694a:	4692      	mov	sl, r2
 800694c:	eb1b 0509 	adds.w	r5, fp, r9
 8006950:	eb4c 060a 	adc.w	r6, ip, sl
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	4619      	mov	r1, r3
 800695a:	f04f 0200 	mov.w	r2, #0
 800695e:	f04f 0300 	mov.w	r3, #0
 8006962:	f04f 0400 	mov.w	r4, #0
 8006966:	0094      	lsls	r4, r2, #2
 8006968:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800696c:	008b      	lsls	r3, r1, #2
 800696e:	461a      	mov	r2, r3
 8006970:	4623      	mov	r3, r4
 8006972:	4628      	mov	r0, r5
 8006974:	4631      	mov	r1, r6
 8006976:	f7fa f931 	bl	8000bdc <__aeabi_uldivmod>
 800697a:	4603      	mov	r3, r0
 800697c:	460c      	mov	r4, r1
 800697e:	461a      	mov	r2, r3
 8006980:	4b0e      	ldr	r3, [pc, #56]	; (80069bc <UART_SetConfig+0x6f4>)
 8006982:	fba3 1302 	umull	r1, r3, r3, r2
 8006986:	095b      	lsrs	r3, r3, #5
 8006988:	2164      	movs	r1, #100	; 0x64
 800698a:	fb01 f303 	mul.w	r3, r1, r3
 800698e:	1ad3      	subs	r3, r2, r3
 8006990:	011b      	lsls	r3, r3, #4
 8006992:	3332      	adds	r3, #50	; 0x32
 8006994:	4a09      	ldr	r2, [pc, #36]	; (80069bc <UART_SetConfig+0x6f4>)
 8006996:	fba2 2303 	umull	r2, r3, r2, r3
 800699a:	095b      	lsrs	r3, r3, #5
 800699c:	f003 020f 	and.w	r2, r3, #15
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4442      	add	r2, r8
 80069a6:	609a      	str	r2, [r3, #8]
}
 80069a8:	e7ff      	b.n	80069aa <UART_SetConfig+0x6e2>
 80069aa:	bf00      	nop
 80069ac:	3714      	adds	r7, #20
 80069ae:	46bd      	mov	sp, r7
 80069b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069b4:	40011000 	.word	0x40011000
 80069b8:	40011400 	.word	0x40011400
 80069bc:	51eb851f 	.word	0x51eb851f

080069c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80069c0:	b084      	sub	sp, #16
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b084      	sub	sp, #16
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
 80069ca:	f107 001c 	add.w	r0, r7, #28
 80069ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80069d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d122      	bne.n	8006a1e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80069ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006a00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d105      	bne.n	8006a12 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fac6 	bl	8007fa4 <USB_CoreReset>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	73fb      	strb	r3, [r7, #15]
 8006a1c:	e01a      	b.n	8006a54 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	68db      	ldr	r3, [r3, #12]
 8006a22:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f001 faba 	bl	8007fa4 <USB_CoreReset>
 8006a30:	4603      	mov	r3, r0
 8006a32:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d106      	bne.n	8006a48 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	639a      	str	r2, [r3, #56]	; 0x38
 8006a46:	e005      	b.n	8006a54 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d10b      	bne.n	8006a72 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f043 0206 	orr.w	r2, r3, #6
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	f043 0220 	orr.w	r2, r3, #32
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006a7e:	b004      	add	sp, #16
 8006a80:	4770      	bx	lr
	...

08006a84 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b087      	sub	sp, #28
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d165      	bne.n	8006b64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	4a41      	ldr	r2, [pc, #260]	; (8006ba0 <USB_SetTurnaroundTime+0x11c>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d906      	bls.n	8006aae <USB_SetTurnaroundTime+0x2a>
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	4a40      	ldr	r2, [pc, #256]	; (8006ba4 <USB_SetTurnaroundTime+0x120>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d802      	bhi.n	8006aae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006aa8:	230f      	movs	r3, #15
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e062      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	4a3c      	ldr	r2, [pc, #240]	; (8006ba4 <USB_SetTurnaroundTime+0x120>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d906      	bls.n	8006ac4 <USB_SetTurnaroundTime+0x40>
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4a3b      	ldr	r2, [pc, #236]	; (8006ba8 <USB_SetTurnaroundTime+0x124>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d802      	bhi.n	8006ac4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006abe:	230e      	movs	r3, #14
 8006ac0:	617b      	str	r3, [r7, #20]
 8006ac2:	e057      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	4a38      	ldr	r2, [pc, #224]	; (8006ba8 <USB_SetTurnaroundTime+0x124>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d906      	bls.n	8006ada <USB_SetTurnaroundTime+0x56>
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	4a37      	ldr	r2, [pc, #220]	; (8006bac <USB_SetTurnaroundTime+0x128>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d802      	bhi.n	8006ada <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ad4:	230d      	movs	r3, #13
 8006ad6:	617b      	str	r3, [r7, #20]
 8006ad8:	e04c      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	4a33      	ldr	r2, [pc, #204]	; (8006bac <USB_SetTurnaroundTime+0x128>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d906      	bls.n	8006af0 <USB_SetTurnaroundTime+0x6c>
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	4a32      	ldr	r2, [pc, #200]	; (8006bb0 <USB_SetTurnaroundTime+0x12c>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d802      	bhi.n	8006af0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006aea:	230c      	movs	r3, #12
 8006aec:	617b      	str	r3, [r7, #20]
 8006aee:	e041      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	4a2f      	ldr	r2, [pc, #188]	; (8006bb0 <USB_SetTurnaroundTime+0x12c>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d906      	bls.n	8006b06 <USB_SetTurnaroundTime+0x82>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	4a2e      	ldr	r2, [pc, #184]	; (8006bb4 <USB_SetTurnaroundTime+0x130>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d802      	bhi.n	8006b06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006b00:	230b      	movs	r3, #11
 8006b02:	617b      	str	r3, [r7, #20]
 8006b04:	e036      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006b06:	68bb      	ldr	r3, [r7, #8]
 8006b08:	4a2a      	ldr	r2, [pc, #168]	; (8006bb4 <USB_SetTurnaroundTime+0x130>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d906      	bls.n	8006b1c <USB_SetTurnaroundTime+0x98>
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	4a29      	ldr	r2, [pc, #164]	; (8006bb8 <USB_SetTurnaroundTime+0x134>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d802      	bhi.n	8006b1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006b16:	230a      	movs	r3, #10
 8006b18:	617b      	str	r3, [r7, #20]
 8006b1a:	e02b      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	4a26      	ldr	r2, [pc, #152]	; (8006bb8 <USB_SetTurnaroundTime+0x134>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d906      	bls.n	8006b32 <USB_SetTurnaroundTime+0xae>
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	4a25      	ldr	r2, [pc, #148]	; (8006bbc <USB_SetTurnaroundTime+0x138>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d802      	bhi.n	8006b32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006b2c:	2309      	movs	r3, #9
 8006b2e:	617b      	str	r3, [r7, #20]
 8006b30:	e020      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	4a21      	ldr	r2, [pc, #132]	; (8006bbc <USB_SetTurnaroundTime+0x138>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d906      	bls.n	8006b48 <USB_SetTurnaroundTime+0xc4>
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	4a20      	ldr	r2, [pc, #128]	; (8006bc0 <USB_SetTurnaroundTime+0x13c>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d802      	bhi.n	8006b48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006b42:	2308      	movs	r3, #8
 8006b44:	617b      	str	r3, [r7, #20]
 8006b46:	e015      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	4a1d      	ldr	r2, [pc, #116]	; (8006bc0 <USB_SetTurnaroundTime+0x13c>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d906      	bls.n	8006b5e <USB_SetTurnaroundTime+0xda>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4a1c      	ldr	r2, [pc, #112]	; (8006bc4 <USB_SetTurnaroundTime+0x140>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d802      	bhi.n	8006b5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006b58:	2307      	movs	r3, #7
 8006b5a:	617b      	str	r3, [r7, #20]
 8006b5c:	e00a      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006b5e:	2306      	movs	r3, #6
 8006b60:	617b      	str	r3, [r7, #20]
 8006b62:	e007      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d102      	bne.n	8006b70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006b6a:	2309      	movs	r3, #9
 8006b6c:	617b      	str	r3, [r7, #20]
 8006b6e:	e001      	b.n	8006b74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006b70:	2309      	movs	r3, #9
 8006b72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	68da      	ldr	r2, [r3, #12]
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	029b      	lsls	r3, r3, #10
 8006b88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	371c      	adds	r7, #28
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	00d8acbf 	.word	0x00d8acbf
 8006ba4:	00e4e1bf 	.word	0x00e4e1bf
 8006ba8:	00f423ff 	.word	0x00f423ff
 8006bac:	0106737f 	.word	0x0106737f
 8006bb0:	011a499f 	.word	0x011a499f
 8006bb4:	01312cff 	.word	0x01312cff
 8006bb8:	014ca43f 	.word	0x014ca43f
 8006bbc:	016e35ff 	.word	0x016e35ff
 8006bc0:	01a6ab1f 	.word	0x01a6ab1f
 8006bc4:	01e847ff 	.word	0x01e847ff

08006bc8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	f043 0201 	orr.w	r2, r3, #1
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	370c      	adds	r7, #12
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr

08006bea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006bea:	b480      	push	{r7}
 8006bec:	b083      	sub	sp, #12
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	689b      	ldr	r3, [r3, #8]
 8006bf6:	f023 0201 	bic.w	r2, r3, #1
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	370c      	adds	r7, #12
 8006c04:	46bd      	mov	sp, r7
 8006c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0a:	4770      	bx	lr

08006c0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b082      	sub	sp, #8
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	460b      	mov	r3, r1
 8006c16:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c24:	78fb      	ldrb	r3, [r7, #3]
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d106      	bne.n	8006c38 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	60da      	str	r2, [r3, #12]
 8006c36:	e00b      	b.n	8006c50 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c38:	78fb      	ldrb	r3, [r7, #3]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	60da      	str	r2, [r3, #12]
 8006c4a:	e001      	b.n	8006c50 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e003      	b.n	8006c58 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006c50:	2032      	movs	r0, #50	; 0x32
 8006c52:	f7fb f9ed 	bl	8002030 <HAL_Delay>

  return HAL_OK;
 8006c56:	2300      	movs	r3, #0
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3708      	adds	r7, #8
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}

08006c60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c60:	b084      	sub	sp, #16
 8006c62:	b580      	push	{r7, lr}
 8006c64:	b086      	sub	sp, #24
 8006c66:	af00      	add	r7, sp, #0
 8006c68:	6078      	str	r0, [r7, #4]
 8006c6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c72:	2300      	movs	r3, #0
 8006c74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	613b      	str	r3, [r7, #16]
 8006c7e:	e009      	b.n	8006c94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	3340      	adds	r3, #64	; 0x40
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	3301      	adds	r3, #1
 8006c92:	613b      	str	r3, [r7, #16]
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	2b0e      	cmp	r3, #14
 8006c98:	d9f2      	bls.n	8006c80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d11c      	bne.n	8006cda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	68fa      	ldr	r2, [r7, #12]
 8006caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cae:	f043 0302 	orr.w	r3, r3, #2
 8006cb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006cd8:	e00b      	b.n	8006cf2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf8:	461a      	mov	r2, r3
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d04:	4619      	mov	r1, r3
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0c:	461a      	mov	r2, r3
 8006d0e:	680b      	ldr	r3, [r1, #0]
 8006d10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d10c      	bne.n	8006d32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d104      	bne.n	8006d28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006d1e:	2100      	movs	r1, #0
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f949 	bl	8006fb8 <USB_SetDevSpeed>
 8006d26:	e008      	b.n	8006d3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006d28:	2101      	movs	r1, #1
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 f944 	bl	8006fb8 <USB_SetDevSpeed>
 8006d30:	e003      	b.n	8006d3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006d32:	2103      	movs	r1, #3
 8006d34:	6878      	ldr	r0, [r7, #4]
 8006d36:	f000 f93f 	bl	8006fb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d3a:	2110      	movs	r1, #16
 8006d3c:	6878      	ldr	r0, [r7, #4]
 8006d3e:	f000 f8f3 	bl	8006f28 <USB_FlushTxFifo>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f911 	bl	8006f74 <USB_FlushRxFifo>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d62:	461a      	mov	r2, r3
 8006d64:	2300      	movs	r3, #0
 8006d66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d6e:	461a      	mov	r2, r3
 8006d70:	2300      	movs	r3, #0
 8006d72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d80:	2300      	movs	r3, #0
 8006d82:	613b      	str	r3, [r7, #16]
 8006d84:	e043      	b.n	8006e0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d9c:	d118      	bne.n	8006dd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d10a      	bne.n	8006dba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	015a      	lsls	r2, r3, #5
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006db0:	461a      	mov	r2, r3
 8006db2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006db6:	6013      	str	r3, [r2, #0]
 8006db8:	e013      	b.n	8006de2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	015a      	lsls	r2, r3, #5
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dcc:	6013      	str	r3, [r2, #0]
 8006dce:	e008      	b.n	8006de2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	015a      	lsls	r2, r3, #5
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ddc:	461a      	mov	r2, r3
 8006dde:	2300      	movs	r3, #0
 8006de0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	461a      	mov	r2, r3
 8006df0:	2300      	movs	r3, #0
 8006df2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e00:	461a      	mov	r2, r3
 8006e02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	613b      	str	r3, [r7, #16]
 8006e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e10:	693a      	ldr	r2, [r7, #16]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d3b7      	bcc.n	8006d86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e16:	2300      	movs	r3, #0
 8006e18:	613b      	str	r3, [r7, #16]
 8006e1a:	e043      	b.n	8006ea4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e32:	d118      	bne.n	8006e66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10a      	bne.n	8006e50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	015a      	lsls	r2, r3, #5
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	4413      	add	r3, r2
 8006e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e46:	461a      	mov	r2, r3
 8006e48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006e4c:	6013      	str	r3, [r2, #0]
 8006e4e:	e013      	b.n	8006e78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006e50:	693b      	ldr	r3, [r7, #16]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006e62:	6013      	str	r3, [r2, #0]
 8006e64:	e008      	b.n	8006e78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	015a      	lsls	r2, r3, #5
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e72:	461a      	mov	r2, r3
 8006e74:	2300      	movs	r3, #0
 8006e76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e84:	461a      	mov	r2, r3
 8006e86:	2300      	movs	r3, #0
 8006e88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e96:	461a      	mov	r2, r3
 8006e98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d3b7      	bcc.n	8006e1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eb2:	691b      	ldr	r3, [r3, #16]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ebe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ecc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d105      	bne.n	8006ee0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	699b      	ldr	r3, [r3, #24]
 8006ed8:	f043 0210 	orr.w	r2, r3, #16
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699a      	ldr	r2, [r3, #24]
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <USB_DevInit+0x2c4>)
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006eec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d005      	beq.n	8006efe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	f043 0208 	orr.w	r2, r3, #8
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d107      	bne.n	8006f14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	699b      	ldr	r3, [r3, #24]
 8006f08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f0c:	f043 0304 	orr.w	r3, r3, #4
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3718      	adds	r7, #24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f20:	b004      	add	sp, #16
 8006f22:	4770      	bx	lr
 8006f24:	803c3800 	.word	0x803c3800

08006f28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006f32:	2300      	movs	r3, #0
 8006f34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	019b      	lsls	r3, r3, #6
 8006f3a:	f043 0220 	orr.w	r2, r3, #32
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	3301      	adds	r3, #1
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	4a09      	ldr	r2, [pc, #36]	; (8006f70 <USB_FlushTxFifo+0x48>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d901      	bls.n	8006f54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e006      	b.n	8006f62 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b20      	cmp	r3, #32
 8006f5e:	d0f0      	beq.n	8006f42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	00030d40 	.word	0x00030d40

08006f74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2210      	movs	r2, #16
 8006f84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4a09      	ldr	r2, [pc, #36]	; (8006fb4 <USB_FlushRxFifo+0x40>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d901      	bls.n	8006f98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e006      	b.n	8006fa6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	691b      	ldr	r3, [r3, #16]
 8006f9c:	f003 0310 	and.w	r3, r3, #16
 8006fa0:	2b10      	cmp	r3, #16
 8006fa2:	d0f0      	beq.n	8006f86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	00030d40 	.word	0x00030d40

08006fb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	78fb      	ldrb	r3, [r7, #3]
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3714      	adds	r7, #20
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr

08006fea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b087      	sub	sp, #28
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ff6:	693b      	ldr	r3, [r7, #16]
 8006ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	f003 0306 	and.w	r3, r3, #6
 8007002:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d102      	bne.n	8007010 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800700a:	2300      	movs	r3, #0
 800700c:	75fb      	strb	r3, [r7, #23]
 800700e:	e00a      	b.n	8007026 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d002      	beq.n	800701c <USB_GetDevSpeed+0x32>
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2b06      	cmp	r3, #6
 800701a:	d102      	bne.n	8007022 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800701c:	2302      	movs	r3, #2
 800701e:	75fb      	strb	r3, [r7, #23]
 8007020:	e001      	b.n	8007026 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007022:	230f      	movs	r3, #15
 8007024:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007026:	7dfb      	ldrb	r3, [r7, #23]
}
 8007028:	4618      	mov	r0, r3
 800702a:	371c      	adds	r7, #28
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d13a      	bne.n	80070c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007056:	69da      	ldr	r2, [r3, #28]
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f003 030f 	and.w	r3, r3, #15
 8007060:	2101      	movs	r1, #1
 8007062:	fa01 f303 	lsl.w	r3, r1, r3
 8007066:	b29b      	uxth	r3, r3
 8007068:	68f9      	ldr	r1, [r7, #12]
 800706a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800706e:	4313      	orrs	r3, r2
 8007070:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007084:	2b00      	cmp	r3, #0
 8007086:	d155      	bne.n	8007134 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	78db      	ldrb	r3, [r3, #3]
 80070a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	059b      	lsls	r3, r3, #22
 80070aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80070ac:	4313      	orrs	r3, r2
 80070ae:	68ba      	ldr	r2, [r7, #8]
 80070b0:	0151      	lsls	r1, r2, #5
 80070b2:	68fa      	ldr	r2, [r7, #12]
 80070b4:	440a      	add	r2, r1
 80070b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	e036      	b.n	8007134 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070cc:	69da      	ldr	r2, [r3, #28]
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	f003 030f 	and.w	r3, r3, #15
 80070d6:	2101      	movs	r1, #1
 80070d8:	fa01 f303 	lsl.w	r3, r1, r3
 80070dc:	041b      	lsls	r3, r3, #16
 80070de:	68f9      	ldr	r1, [r7, #12]
 80070e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070e4:	4313      	orrs	r3, r2
 80070e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	015a      	lsls	r2, r3, #5
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	4413      	add	r3, r2
 80070f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d11a      	bne.n	8007134 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	015a      	lsls	r2, r3, #5
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	4413      	add	r3, r2
 8007106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800710a:	681a      	ldr	r2, [r3, #0]
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	689b      	ldr	r3, [r3, #8]
 8007110:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	78db      	ldrb	r3, [r3, #3]
 8007118:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800711a:	430b      	orrs	r3, r1
 800711c:	4313      	orrs	r3, r2
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	0151      	lsls	r1, r2, #5
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	440a      	add	r2, r1
 8007126:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800712a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800712e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007132:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007134:	2300      	movs	r3, #0
}
 8007136:	4618      	mov	r0, r3
 8007138:	3714      	adds	r7, #20
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
	...

08007144 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	785b      	ldrb	r3, [r3, #1]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d161      	bne.n	8007224 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	4413      	add	r3, r2
 8007168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007176:	d11f      	bne.n	80071b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007178:	68bb      	ldr	r3, [r7, #8]
 800717a:	015a      	lsls	r2, r3, #5
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	4413      	add	r3, r2
 8007180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	68ba      	ldr	r2, [r7, #8]
 8007188:	0151      	lsls	r1, r2, #5
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	440a      	add	r2, r1
 800718e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007192:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007196:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	015a      	lsls	r2, r3, #5
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4413      	add	r3, r2
 80071a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	68ba      	ldr	r2, [r7, #8]
 80071a8:	0151      	lsls	r1, r2, #5
 80071aa:	68fa      	ldr	r2, [r7, #12]
 80071ac:	440a      	add	r2, r1
 80071ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	f003 030f 	and.w	r3, r3, #15
 80071c8:	2101      	movs	r1, #1
 80071ca:	fa01 f303 	lsl.w	r3, r1, r3
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	43db      	mvns	r3, r3
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071d8:	4013      	ands	r3, r2
 80071da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071e2:	69da      	ldr	r2, [r3, #28]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	f003 030f 	and.w	r3, r3, #15
 80071ec:	2101      	movs	r1, #1
 80071ee:	fa01 f303 	lsl.w	r3, r1, r3
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	43db      	mvns	r3, r3
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071fc:	4013      	ands	r3, r2
 80071fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	0159      	lsls	r1, r3, #5
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	440b      	add	r3, r1
 8007216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721a:	4619      	mov	r1, r3
 800721c:	4b35      	ldr	r3, [pc, #212]	; (80072f4 <USB_DeactivateEndpoint+0x1b0>)
 800721e:	4013      	ands	r3, r2
 8007220:	600b      	str	r3, [r1, #0]
 8007222:	e060      	b.n	80072e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800723a:	d11f      	bne.n	800727c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68ba      	ldr	r2, [r7, #8]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007256:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800725a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	68ba      	ldr	r2, [r7, #8]
 800726c:	0151      	lsls	r1, r2, #5
 800726e:	68fa      	ldr	r2, [r7, #12]
 8007270:	440a      	add	r2, r1
 8007272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007276:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800727a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	f003 030f 	and.w	r3, r3, #15
 800728c:	2101      	movs	r1, #1
 800728e:	fa01 f303 	lsl.w	r3, r1, r3
 8007292:	041b      	lsls	r3, r3, #16
 8007294:	43db      	mvns	r3, r3
 8007296:	68f9      	ldr	r1, [r7, #12]
 8007298:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800729c:	4013      	ands	r3, r2
 800729e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a6:	69da      	ldr	r2, [r3, #28]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	f003 030f 	and.w	r3, r3, #15
 80072b0:	2101      	movs	r1, #1
 80072b2:	fa01 f303 	lsl.w	r3, r1, r3
 80072b6:	041b      	lsls	r3, r3, #16
 80072b8:	43db      	mvns	r3, r3
 80072ba:	68f9      	ldr	r1, [r7, #12]
 80072bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072c0:	4013      	ands	r3, r2
 80072c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	015a      	lsls	r2, r3, #5
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	4413      	add	r3, r2
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	681a      	ldr	r2, [r3, #0]
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	0159      	lsls	r1, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	440b      	add	r3, r1
 80072da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072de:	4619      	mov	r1, r3
 80072e0:	4b05      	ldr	r3, [pc, #20]	; (80072f8 <USB_DeactivateEndpoint+0x1b4>)
 80072e2:	4013      	ands	r3, r2
 80072e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80072e6:	2300      	movs	r3, #0
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr
 80072f4:	ec337800 	.word	0xec337800
 80072f8:	eff37800 	.word	0xeff37800

080072fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08a      	sub	sp, #40	; 0x28
 8007300:	af02      	add	r7, sp, #8
 8007302:	60f8      	str	r0, [r7, #12]
 8007304:	60b9      	str	r1, [r7, #8]
 8007306:	4613      	mov	r3, r2
 8007308:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	785b      	ldrb	r3, [r3, #1]
 8007318:	2b01      	cmp	r3, #1
 800731a:	f040 815c 	bne.w	80075d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d132      	bne.n	800738c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007340:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007344:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007348:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	69ba      	ldr	r2, [r7, #24]
 800735a:	0151      	lsls	r1, r2, #5
 800735c:	69fa      	ldr	r2, [r7, #28]
 800735e:	440a      	add	r2, r1
 8007360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007364:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007368:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800736a:	69bb      	ldr	r3, [r7, #24]
 800736c:	015a      	lsls	r2, r3, #5
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	4413      	add	r3, r2
 8007372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	69ba      	ldr	r2, [r7, #24]
 800737a:	0151      	lsls	r1, r2, #5
 800737c:	69fa      	ldr	r2, [r7, #28]
 800737e:	440a      	add	r2, r1
 8007380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007384:	0cdb      	lsrs	r3, r3, #19
 8007386:	04db      	lsls	r3, r3, #19
 8007388:	6113      	str	r3, [r2, #16]
 800738a:	e074      	b.n	8007476 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800738c:	69bb      	ldr	r3, [r7, #24]
 800738e:	015a      	lsls	r2, r3, #5
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	4413      	add	r3, r2
 8007394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	0151      	lsls	r1, r2, #5
 800739e:	69fa      	ldr	r2, [r7, #28]
 80073a0:	440a      	add	r2, r1
 80073a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073a6:	0cdb      	lsrs	r3, r3, #19
 80073a8:	04db      	lsls	r3, r3, #19
 80073aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80073ac:	69bb      	ldr	r3, [r7, #24]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	69ba      	ldr	r2, [r7, #24]
 80073bc:	0151      	lsls	r1, r2, #5
 80073be:	69fa      	ldr	r2, [r7, #28]
 80073c0:	440a      	add	r2, r1
 80073c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80073ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80073ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073dc:	691a      	ldr	r2, [r3, #16]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6959      	ldr	r1, [r3, #20]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	440b      	add	r3, r1
 80073e8:	1e59      	subs	r1, r3, #1
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	689b      	ldr	r3, [r3, #8]
 80073ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80073f2:	04d9      	lsls	r1, r3, #19
 80073f4:	4b9d      	ldr	r3, [pc, #628]	; (800766c <USB_EPStartXfer+0x370>)
 80073f6:	400b      	ands	r3, r1
 80073f8:	69b9      	ldr	r1, [r7, #24]
 80073fa:	0148      	lsls	r0, r1, #5
 80073fc:	69f9      	ldr	r1, [r7, #28]
 80073fe:	4401      	add	r1, r0
 8007400:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007404:	4313      	orrs	r3, r2
 8007406:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	015a      	lsls	r2, r3, #5
 800740c:	69fb      	ldr	r3, [r7, #28]
 800740e:	4413      	add	r3, r2
 8007410:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007414:	691a      	ldr	r2, [r3, #16]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	695b      	ldr	r3, [r3, #20]
 800741a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800741e:	69b9      	ldr	r1, [r7, #24]
 8007420:	0148      	lsls	r0, r1, #5
 8007422:	69f9      	ldr	r1, [r7, #28]
 8007424:	4401      	add	r1, r0
 8007426:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800742a:	4313      	orrs	r3, r2
 800742c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	78db      	ldrb	r3, [r3, #3]
 8007432:	2b01      	cmp	r3, #1
 8007434:	d11f      	bne.n	8007476 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007436:	69bb      	ldr	r3, [r7, #24]
 8007438:	015a      	lsls	r2, r3, #5
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	4413      	add	r3, r2
 800743e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007442:	691b      	ldr	r3, [r3, #16]
 8007444:	69ba      	ldr	r2, [r7, #24]
 8007446:	0151      	lsls	r1, r2, #5
 8007448:	69fa      	ldr	r2, [r7, #28]
 800744a:	440a      	add	r2, r1
 800744c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007450:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007454:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	015a      	lsls	r2, r3, #5
 800745a:	69fb      	ldr	r3, [r7, #28]
 800745c:	4413      	add	r3, r2
 800745e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	0151      	lsls	r1, r2, #5
 8007468:	69fa      	ldr	r2, [r7, #28]
 800746a:	440a      	add	r2, r1
 800746c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007470:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007474:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007476:	79fb      	ldrb	r3, [r7, #7]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d14b      	bne.n	8007514 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d009      	beq.n	8007498 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69fb      	ldr	r3, [r7, #28]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007490:	461a      	mov	r2, r3
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	691b      	ldr	r3, [r3, #16]
 8007496:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	78db      	ldrb	r3, [r3, #3]
 800749c:	2b01      	cmp	r3, #1
 800749e:	d128      	bne.n	80074f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074a6:	689b      	ldr	r3, [r3, #8]
 80074a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d110      	bne.n	80074d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	015a      	lsls	r2, r3, #5
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	69ba      	ldr	r2, [r7, #24]
 80074c0:	0151      	lsls	r1, r2, #5
 80074c2:	69fa      	ldr	r2, [r7, #28]
 80074c4:	440a      	add	r2, r1
 80074c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80074ce:	6013      	str	r3, [r2, #0]
 80074d0:	e00f      	b.n	80074f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80074d2:	69bb      	ldr	r3, [r7, #24]
 80074d4:	015a      	lsls	r2, r3, #5
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	4413      	add	r3, r2
 80074da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69ba      	ldr	r2, [r7, #24]
 80074e2:	0151      	lsls	r1, r2, #5
 80074e4:	69fa      	ldr	r2, [r7, #28]
 80074e6:	440a      	add	r2, r1
 80074e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80074f2:	69bb      	ldr	r3, [r7, #24]
 80074f4:	015a      	lsls	r2, r3, #5
 80074f6:	69fb      	ldr	r3, [r7, #28]
 80074f8:	4413      	add	r3, r2
 80074fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	69ba      	ldr	r2, [r7, #24]
 8007502:	0151      	lsls	r1, r2, #5
 8007504:	69fa      	ldr	r2, [r7, #28]
 8007506:	440a      	add	r2, r1
 8007508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800750c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	e12f      	b.n	8007774 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	015a      	lsls	r2, r3, #5
 8007518:	69fb      	ldr	r3, [r7, #28]
 800751a:	4413      	add	r3, r2
 800751c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	69ba      	ldr	r2, [r7, #24]
 8007524:	0151      	lsls	r1, r2, #5
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	440a      	add	r2, r1
 800752a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800752e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007532:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	78db      	ldrb	r3, [r3, #3]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d015      	beq.n	8007568 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 8117 	beq.w	8007774 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800754c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	f003 030f 	and.w	r3, r3, #15
 8007556:	2101      	movs	r1, #1
 8007558:	fa01 f303 	lsl.w	r3, r1, r3
 800755c:	69f9      	ldr	r1, [r7, #28]
 800755e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007562:	4313      	orrs	r3, r2
 8007564:	634b      	str	r3, [r1, #52]	; 0x34
 8007566:	e105      	b.n	8007774 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007568:	69fb      	ldr	r3, [r7, #28]
 800756a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007574:	2b00      	cmp	r3, #0
 8007576:	d110      	bne.n	800759a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007578:	69bb      	ldr	r3, [r7, #24]
 800757a:	015a      	lsls	r2, r3, #5
 800757c:	69fb      	ldr	r3, [r7, #28]
 800757e:	4413      	add	r3, r2
 8007580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	0151      	lsls	r1, r2, #5
 800758a:	69fa      	ldr	r2, [r7, #28]
 800758c:	440a      	add	r2, r1
 800758e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007592:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007596:	6013      	str	r3, [r2, #0]
 8007598:	e00f      	b.n	80075ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	69ba      	ldr	r2, [r7, #24]
 80075aa:	0151      	lsls	r1, r2, #5
 80075ac:	69fa      	ldr	r2, [r7, #28]
 80075ae:	440a      	add	r2, r1
 80075b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	68d9      	ldr	r1, [r3, #12]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	781a      	ldrb	r2, [r3, #0]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	b298      	uxth	r0, r3
 80075c8:	79fb      	ldrb	r3, [r7, #7]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	4603      	mov	r3, r0
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fa2b 	bl	8007a2a <USB_WritePacket>
 80075d4:	e0ce      	b.n	8007774 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075d6:	69bb      	ldr	r3, [r7, #24]
 80075d8:	015a      	lsls	r2, r3, #5
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	4413      	add	r3, r2
 80075de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	0151      	lsls	r1, r2, #5
 80075e8:	69fa      	ldr	r2, [r7, #28]
 80075ea:	440a      	add	r2, r1
 80075ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f0:	0cdb      	lsrs	r3, r3, #19
 80075f2:	04db      	lsls	r3, r3, #19
 80075f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075f6:	69bb      	ldr	r3, [r7, #24]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	69fb      	ldr	r3, [r7, #28]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	0151      	lsls	r1, r2, #5
 8007608:	69fa      	ldr	r2, [r7, #28]
 800760a:	440a      	add	r2, r1
 800760c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007610:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007614:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007618:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	695b      	ldr	r3, [r3, #20]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d126      	bne.n	8007670 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007622:	69bb      	ldr	r3, [r7, #24]
 8007624:	015a      	lsls	r2, r3, #5
 8007626:	69fb      	ldr	r3, [r7, #28]
 8007628:	4413      	add	r3, r2
 800762a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800762e:	691a      	ldr	r2, [r3, #16]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007638:	69b9      	ldr	r1, [r7, #24]
 800763a:	0148      	lsls	r0, r1, #5
 800763c:	69f9      	ldr	r1, [r7, #28]
 800763e:	4401      	add	r1, r0
 8007640:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007644:	4313      	orrs	r3, r2
 8007646:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	69ba      	ldr	r2, [r7, #24]
 8007658:	0151      	lsls	r1, r2, #5
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	440a      	add	r2, r1
 800765e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007662:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007666:	6113      	str	r3, [r2, #16]
 8007668:	e036      	b.n	80076d8 <USB_EPStartXfer+0x3dc>
 800766a:	bf00      	nop
 800766c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	695a      	ldr	r2, [r3, #20]
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	4413      	add	r3, r2
 800767a:	1e5a      	subs	r2, r3, #1
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	689b      	ldr	r3, [r3, #8]
 8007680:	fbb2 f3f3 	udiv	r3, r2, r3
 8007684:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007686:	69bb      	ldr	r3, [r7, #24]
 8007688:	015a      	lsls	r2, r3, #5
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	4413      	add	r3, r2
 800768e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007692:	691a      	ldr	r2, [r3, #16]
 8007694:	8afb      	ldrh	r3, [r7, #22]
 8007696:	04d9      	lsls	r1, r3, #19
 8007698:	4b39      	ldr	r3, [pc, #228]	; (8007780 <USB_EPStartXfer+0x484>)
 800769a:	400b      	ands	r3, r1
 800769c:	69b9      	ldr	r1, [r7, #24]
 800769e:	0148      	lsls	r0, r1, #5
 80076a0:	69f9      	ldr	r1, [r7, #28]
 80076a2:	4401      	add	r1, r0
 80076a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076a8:	4313      	orrs	r3, r2
 80076aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80076ac:	69bb      	ldr	r3, [r7, #24]
 80076ae:	015a      	lsls	r2, r3, #5
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	4413      	add	r3, r2
 80076b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b8:	691a      	ldr	r2, [r3, #16]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	8af9      	ldrh	r1, [r7, #22]
 80076c0:	fb01 f303 	mul.w	r3, r1, r3
 80076c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076c8:	69b9      	ldr	r1, [r7, #24]
 80076ca:	0148      	lsls	r0, r1, #5
 80076cc:	69f9      	ldr	r1, [r7, #28]
 80076ce:	4401      	add	r1, r0
 80076d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076d4:	4313      	orrs	r3, r2
 80076d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80076d8:	79fb      	ldrb	r3, [r7, #7]
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d10d      	bne.n	80076fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d009      	beq.n	80076fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	68d9      	ldr	r1, [r3, #12]
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	015a      	lsls	r2, r3, #5
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	4413      	add	r3, r2
 80076f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076f6:	460a      	mov	r2, r1
 80076f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	78db      	ldrb	r3, [r3, #3]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d128      	bne.n	8007754 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007702:	69fb      	ldr	r3, [r7, #28]
 8007704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800770e:	2b00      	cmp	r3, #0
 8007710:	d110      	bne.n	8007734 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	440a      	add	r2, r1
 8007728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800772c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007730:	6013      	str	r3, [r2, #0]
 8007732:	e00f      	b.n	8007754 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	69ba      	ldr	r2, [r7, #24]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800774e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007752:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800776e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007772:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007774:	2300      	movs	r3, #0
}
 8007776:	4618      	mov	r0, r3
 8007778:	3720      	adds	r7, #32
 800777a:	46bd      	mov	sp, r7
 800777c:	bd80      	pop	{r7, pc}
 800777e:	bf00      	nop
 8007780:	1ff80000 	.word	0x1ff80000

08007784 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	4613      	mov	r3, r2
 8007790:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	785b      	ldrb	r3, [r3, #1]
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	f040 80cd 	bne.w	8007940 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d132      	bne.n	8007814 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	693a      	ldr	r2, [r7, #16]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	015a      	lsls	r2, r3, #5
 80077d6:	697b      	ldr	r3, [r7, #20]
 80077d8:	4413      	add	r3, r2
 80077da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077de:	691b      	ldr	r3, [r3, #16]
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077f2:	693b      	ldr	r3, [r7, #16]
 80077f4:	015a      	lsls	r2, r3, #5
 80077f6:	697b      	ldr	r3, [r7, #20]
 80077f8:	4413      	add	r3, r2
 80077fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	693a      	ldr	r2, [r7, #16]
 8007802:	0151      	lsls	r1, r2, #5
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	440a      	add	r2, r1
 8007808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780c:	0cdb      	lsrs	r3, r3, #19
 800780e:	04db      	lsls	r3, r3, #19
 8007810:	6113      	str	r3, [r2, #16]
 8007812:	e04e      	b.n	80078b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	015a      	lsls	r2, r3, #5
 8007818:	697b      	ldr	r3, [r7, #20]
 800781a:	4413      	add	r3, r2
 800781c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007820:	691b      	ldr	r3, [r3, #16]
 8007822:	693a      	ldr	r2, [r7, #16]
 8007824:	0151      	lsls	r1, r2, #5
 8007826:	697a      	ldr	r2, [r7, #20]
 8007828:	440a      	add	r2, r1
 800782a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782e:	0cdb      	lsrs	r3, r3, #19
 8007830:	04db      	lsls	r3, r3, #19
 8007832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	693a      	ldr	r2, [r7, #16]
 8007844:	0151      	lsls	r1, r2, #5
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	440a      	add	r2, r1
 800784a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007852:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007856:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	695a      	ldr	r2, [r3, #20]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	429a      	cmp	r2, r3
 8007862:	d903      	bls.n	800786c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	693a      	ldr	r2, [r7, #16]
 800787c:	0151      	lsls	r1, r2, #5
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	440a      	add	r2, r1
 8007882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007886:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800788a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	015a      	lsls	r2, r3, #5
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	4413      	add	r3, r2
 8007894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007898:	691a      	ldr	r2, [r3, #16]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	695b      	ldr	r3, [r3, #20]
 800789e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078a2:	6939      	ldr	r1, [r7, #16]
 80078a4:	0148      	lsls	r0, r1, #5
 80078a6:	6979      	ldr	r1, [r7, #20]
 80078a8:	4401      	add	r1, r0
 80078aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80078ae:	4313      	orrs	r3, r2
 80078b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80078b2:	79fb      	ldrb	r3, [r7, #7]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d11e      	bne.n	80078f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	691b      	ldr	r3, [r3, #16]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d009      	beq.n	80078d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	015a      	lsls	r2, r3, #5
 80078c4:	697b      	ldr	r3, [r7, #20]
 80078c6:	4413      	add	r3, r2
 80078c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078cc:	461a      	mov	r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	691b      	ldr	r3, [r3, #16]
 80078d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	693a      	ldr	r2, [r7, #16]
 80078e4:	0151      	lsls	r1, r2, #5
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	440a      	add	r2, r1
 80078ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80078f2:	6013      	str	r3, [r2, #0]
 80078f4:	e092      	b.n	8007a1c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	0151      	lsls	r1, r2, #5
 8007908:	697a      	ldr	r2, [r7, #20]
 800790a:	440a      	add	r2, r1
 800790c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007910:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007914:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d07e      	beq.n	8007a1c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	f003 030f 	and.w	r3, r3, #15
 800792e:	2101      	movs	r1, #1
 8007930:	fa01 f303 	lsl.w	r3, r1, r3
 8007934:	6979      	ldr	r1, [r7, #20]
 8007936:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800793a:	4313      	orrs	r3, r2
 800793c:	634b      	str	r3, [r1, #52]	; 0x34
 800793e:	e06d      	b.n	8007a1c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	015a      	lsls	r2, r3, #5
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	4413      	add	r3, r2
 8007948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800794c:	691b      	ldr	r3, [r3, #16]
 800794e:	693a      	ldr	r2, [r7, #16]
 8007950:	0151      	lsls	r1, r2, #5
 8007952:	697a      	ldr	r2, [r7, #20]
 8007954:	440a      	add	r2, r1
 8007956:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800795a:	0cdb      	lsrs	r3, r3, #19
 800795c:	04db      	lsls	r3, r3, #19
 800795e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	693a      	ldr	r2, [r7, #16]
 8007970:	0151      	lsls	r1, r2, #5
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	440a      	add	r2, r1
 8007976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800797e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007982:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	695b      	ldr	r3, [r3, #20]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d003      	beq.n	8007994 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	689a      	ldr	r2, [r3, #8]
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a0:	691b      	ldr	r3, [r3, #16]
 80079a2:	693a      	ldr	r2, [r7, #16]
 80079a4:	0151      	lsls	r1, r2, #5
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	440a      	add	r2, r1
 80079aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80079b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80079b4:	693b      	ldr	r3, [r7, #16]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079c0:	691a      	ldr	r2, [r3, #16]
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80079ca:	6939      	ldr	r1, [r7, #16]
 80079cc:	0148      	lsls	r0, r1, #5
 80079ce:	6979      	ldr	r1, [r7, #20]
 80079d0:	4401      	add	r1, r0
 80079d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80079d6:	4313      	orrs	r3, r2
 80079d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80079da:	79fb      	ldrb	r3, [r7, #7]
 80079dc:	2b01      	cmp	r3, #1
 80079de:	d10d      	bne.n	80079fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	68db      	ldr	r3, [r3, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d009      	beq.n	80079fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	68d9      	ldr	r1, [r3, #12]
 80079ec:	693b      	ldr	r3, [r7, #16]
 80079ee:	015a      	lsls	r2, r3, #5
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	4413      	add	r3, r2
 80079f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079f8:	460a      	mov	r2, r1
 80079fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	015a      	lsls	r2, r3, #5
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	4413      	add	r3, r2
 8007a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	693a      	ldr	r2, [r7, #16]
 8007a0c:	0151      	lsls	r1, r2, #5
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	440a      	add	r2, r1
 8007a12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	371c      	adds	r7, #28
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr

08007a2a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007a2a:	b480      	push	{r7}
 8007a2c:	b089      	sub	sp, #36	; 0x24
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	4611      	mov	r1, r2
 8007a36:	461a      	mov	r2, r3
 8007a38:	460b      	mov	r3, r1
 8007a3a:	71fb      	strb	r3, [r7, #7]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007a48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d11a      	bne.n	8007a86 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a50:	88bb      	ldrh	r3, [r7, #4]
 8007a52:	3303      	adds	r3, #3
 8007a54:	089b      	lsrs	r3, r3, #2
 8007a56:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	61bb      	str	r3, [r7, #24]
 8007a5c:	e00f      	b.n	8007a7e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a5e:	79fb      	ldrb	r3, [r7, #7]
 8007a60:	031a      	lsls	r2, r3, #12
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	4413      	add	r3, r2
 8007a66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	3304      	adds	r3, #4
 8007a76:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	3301      	adds	r3, #1
 8007a7c:	61bb      	str	r3, [r7, #24]
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d3eb      	bcc.n	8007a5e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3724      	adds	r7, #36	; 0x24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a92:	4770      	bx	lr

08007a94 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a94:	b480      	push	{r7}
 8007a96:	b089      	sub	sp, #36	; 0x24
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	60f8      	str	r0, [r7, #12]
 8007a9c:	60b9      	str	r1, [r7, #8]
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	3303      	adds	r3, #3
 8007aae:	089b      	lsrs	r3, r3, #2
 8007ab0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61bb      	str	r3, [r7, #24]
 8007ab6:	e00b      	b.n	8007ad0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007abe:	681a      	ldr	r2, [r3, #0]
 8007ac0:	69fb      	ldr	r3, [r7, #28]
 8007ac2:	601a      	str	r2, [r3, #0]
    pDest++;
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	3304      	adds	r3, #4
 8007ac8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	3301      	adds	r3, #1
 8007ace:	61bb      	str	r3, [r7, #24]
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	693b      	ldr	r3, [r7, #16]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d3ef      	bcc.n	8007ab8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007ad8:	69fb      	ldr	r3, [r7, #28]
}
 8007ada:	4618      	mov	r0, r3
 8007adc:	3724      	adds	r7, #36	; 0x24
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ae6:	b480      	push	{r7}
 8007ae8:	b085      	sub	sp, #20
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
 8007aee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	781b      	ldrb	r3, [r3, #0]
 8007af8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	785b      	ldrb	r3, [r3, #1]
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d12c      	bne.n	8007b5c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b02:	68bb      	ldr	r3, [r7, #8]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	db12      	blt.n	8007b3a <USB_EPSetStall+0x54>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00f      	beq.n	8007b3a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	015a      	lsls	r2, r3, #5
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	4413      	add	r3, r2
 8007b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	0151      	lsls	r1, r2, #5
 8007b2c:	68fa      	ldr	r2, [r7, #12]
 8007b2e:	440a      	add	r2, r1
 8007b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b38:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	015a      	lsls	r2, r3, #5
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	4413      	add	r3, r2
 8007b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	0151      	lsls	r1, r2, #5
 8007b4c:	68fa      	ldr	r2, [r7, #12]
 8007b4e:	440a      	add	r2, r1
 8007b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	e02b      	b.n	8007bb4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	db12      	blt.n	8007b94 <USB_EPSetStall+0xae>
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	68fa      	ldr	r2, [r7, #12]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b92:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	015a      	lsls	r2, r3, #5
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	4413      	add	r3, r2
 8007b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	0151      	lsls	r1, r2, #5
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	440a      	add	r2, r1
 8007baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bb2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr

08007bc2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bc2:	b480      	push	{r7}
 8007bc4:	b085      	sub	sp, #20
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
 8007bca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	781b      	ldrb	r3, [r3, #0]
 8007bd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	785b      	ldrb	r3, [r3, #1]
 8007bda:	2b01      	cmp	r3, #1
 8007bdc:	d128      	bne.n	8007c30 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	68ba      	ldr	r2, [r7, #8]
 8007bee:	0151      	lsls	r1, r2, #5
 8007bf0:	68fa      	ldr	r2, [r7, #12]
 8007bf2:	440a      	add	r2, r1
 8007bf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bf8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007bfc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	78db      	ldrb	r3, [r3, #3]
 8007c02:	2b03      	cmp	r3, #3
 8007c04:	d003      	beq.n	8007c0e <USB_EPClearStall+0x4c>
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	78db      	ldrb	r3, [r3, #3]
 8007c0a:	2b02      	cmp	r3, #2
 8007c0c:	d138      	bne.n	8007c80 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	015a      	lsls	r2, r3, #5
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4413      	add	r3, r2
 8007c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	68ba      	ldr	r2, [r7, #8]
 8007c1e:	0151      	lsls	r1, r2, #5
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	440a      	add	r2, r1
 8007c24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	e027      	b.n	8007c80 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	015a      	lsls	r2, r3, #5
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	4413      	add	r3, r2
 8007c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	0151      	lsls	r1, r2, #5
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	440a      	add	r2, r1
 8007c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	78db      	ldrb	r3, [r3, #3]
 8007c54:	2b03      	cmp	r3, #3
 8007c56:	d003      	beq.n	8007c60 <USB_EPClearStall+0x9e>
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	78db      	ldrb	r3, [r3, #3]
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d10f      	bne.n	8007c80 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	015a      	lsls	r2, r3, #5
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	4413      	add	r3, r2
 8007c68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	0151      	lsls	r1, r2, #5
 8007c72:	68fa      	ldr	r2, [r7, #12]
 8007c74:	440a      	add	r2, r1
 8007c76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c7e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b085      	sub	sp, #20
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cb0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	011b      	lsls	r3, r3, #4
 8007cbe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cc2:	68f9      	ldr	r1, [r7, #12]
 8007cc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cc8:	4313      	orrs	r3, r2
 8007cca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007cda:	b480      	push	{r7}
 8007cdc:	b085      	sub	sp, #20
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007cf4:	f023 0303 	bic.w	r3, r3, #3
 8007cf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d08:	f023 0302 	bic.w	r3, r3, #2
 8007d0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d0e:	2300      	movs	r3, #0
}
 8007d10:	4618      	mov	r0, r3
 8007d12:	3714      	adds	r7, #20
 8007d14:	46bd      	mov	sp, r7
 8007d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1a:	4770      	bx	lr

08007d1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b085      	sub	sp, #20
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	68fa      	ldr	r2, [r7, #12]
 8007d32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d36:	f023 0303 	bic.w	r3, r3, #3
 8007d3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	68fa      	ldr	r2, [r7, #12]
 8007d46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d4a:	f043 0302 	orr.w	r3, r3, #2
 8007d4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3714      	adds	r7, #20
 8007d56:	46bd      	mov	sp, r7
 8007d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5c:	4770      	bx	lr

08007d5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d5e:	b480      	push	{r7}
 8007d60:	b085      	sub	sp, #20
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	699b      	ldr	r3, [r3, #24]
 8007d70:	68fa      	ldr	r2, [r7, #12]
 8007d72:	4013      	ands	r3, r2
 8007d74:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007d76:	68fb      	ldr	r3, [r7, #12]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b085      	sub	sp, #20
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d96:	699b      	ldr	r3, [r3, #24]
 8007d98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007da0:	69db      	ldr	r3, [r3, #28]
 8007da2:	68ba      	ldr	r2, [r7, #8]
 8007da4:	4013      	ands	r3, r2
 8007da6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	0c1b      	lsrs	r3, r3, #16
}
 8007dac:	4618      	mov	r0, r3
 8007dae:	3714      	adds	r7, #20
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007db8:	b480      	push	{r7}
 8007dba:	b085      	sub	sp, #20
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	68ba      	ldr	r2, [r7, #8]
 8007dd8:	4013      	ands	r3, r2
 8007dda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	b29b      	uxth	r3, r3
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007dfc:	78fb      	ldrb	r3, [r7, #3]
 8007dfe:	015a      	lsls	r2, r3, #5
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	4413      	add	r3, r2
 8007e04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e12:	695b      	ldr	r3, [r3, #20]
 8007e14:	68ba      	ldr	r2, [r7, #8]
 8007e16:	4013      	ands	r3, r2
 8007e18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e1a:	68bb      	ldr	r3, [r7, #8]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3714      	adds	r7, #20
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b087      	sub	sp, #28
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	6078      	str	r0, [r7, #4]
 8007e30:	460b      	mov	r3, r1
 8007e32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3e:	691b      	ldr	r3, [r3, #16]
 8007e40:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e4a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	f003 030f 	and.w	r3, r3, #15
 8007e52:	68fa      	ldr	r2, [r7, #12]
 8007e54:	fa22 f303 	lsr.w	r3, r2, r3
 8007e58:	01db      	lsls	r3, r3, #7
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e62:	78fb      	ldrb	r3, [r7, #3]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e6e:	689b      	ldr	r3, [r3, #8]
 8007e70:	693a      	ldr	r2, [r7, #16]
 8007e72:	4013      	ands	r3, r2
 8007e74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e76:	68bb      	ldr	r3, [r7, #8]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	371c      	adds	r7, #28
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	695b      	ldr	r3, [r3, #20]
 8007e90:	f003 0301 	and.w	r3, r3, #1
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	68fa      	ldr	r2, [r7, #12]
 8007eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007eba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ebe:	f023 0307 	bic.w	r3, r3, #7
 8007ec2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	68fa      	ldr	r2, [r7, #12]
 8007ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ed2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ed6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ed8:	2300      	movs	r3, #0
}
 8007eda:	4618      	mov	r0, r3
 8007edc:	3714      	adds	r7, #20
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee4:	4770      	bx	lr
	...

08007ee8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007ee8:	b480      	push	{r7}
 8007eea:	b087      	sub	sp, #28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	60f8      	str	r0, [r7, #12]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	607a      	str	r2, [r7, #4]
 8007ef4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	333c      	adds	r3, #60	; 0x3c
 8007efe:	3304      	adds	r3, #4
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4a26      	ldr	r2, [pc, #152]	; (8007fa0 <USB_EP0_OutStart+0xb8>)
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	d90a      	bls.n	8007f22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f1c:	d101      	bne.n	8007f22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	e037      	b.n	8007f92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f22:	697b      	ldr	r3, [r7, #20]
 8007f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f28:	461a      	mov	r2, r3
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f2e:	697b      	ldr	r3, [r7, #20]
 8007f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f34:	691b      	ldr	r3, [r3, #16]
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f48:	691b      	ldr	r3, [r3, #16]
 8007f4a:	697a      	ldr	r2, [r7, #20]
 8007f4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f50:	f043 0318 	orr.w	r3, r3, #24
 8007f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f6a:	7afb      	ldrb	r3, [r7, #11]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d10f      	bne.n	8007f90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f76:	461a      	mov	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	697a      	ldr	r2, [r7, #20]
 8007f86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007f8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	371c      	adds	r7, #28
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr
 8007f9e:	bf00      	nop
 8007fa0:	4f54300a 	.word	0x4f54300a

08007fa4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b085      	sub	sp, #20
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	60fb      	str	r3, [r7, #12]
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	4a13      	ldr	r2, [pc, #76]	; (8008008 <USB_CoreReset+0x64>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d901      	bls.n	8007fc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fbe:	2303      	movs	r3, #3
 8007fc0:	e01b      	b.n	8007ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	691b      	ldr	r3, [r3, #16]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	daf2      	bge.n	8007fb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	691b      	ldr	r3, [r3, #16]
 8007fd2:	f043 0201 	orr.w	r2, r3, #1
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	60fb      	str	r3, [r7, #12]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	4a09      	ldr	r2, [pc, #36]	; (8008008 <USB_CoreReset+0x64>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d901      	bls.n	8007fec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007fe8:	2303      	movs	r3, #3
 8007fea:	e006      	b.n	8007ffa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	691b      	ldr	r3, [r3, #16]
 8007ff0:	f003 0301 	and.w	r3, r3, #1
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d0f0      	beq.n	8007fda <USB_CoreReset+0x36>

  return HAL_OK;
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3714      	adds	r7, #20
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	00030d40 	.word	0x00030d40

0800800c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008018:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800801c:	f002 f92c 	bl	800a278 <malloc>
 8008020:	4603      	mov	r3, r0
 8008022:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d105      	bne.n	8008036 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2200      	movs	r2, #0
 800802e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008032:	2302      	movs	r3, #2
 8008034:	e066      	b.n	8008104 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	68fa      	ldr	r2, [r7, #12]
 800803a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	7c1b      	ldrb	r3, [r3, #16]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d119      	bne.n	800807a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008046:	f44f 7300 	mov.w	r3, #512	; 0x200
 800804a:	2202      	movs	r2, #2
 800804c:	2181      	movs	r1, #129	; 0x81
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f001 ff99 	bl	8009f86 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800805a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800805e:	2202      	movs	r2, #2
 8008060:	2101      	movs	r1, #1
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f001 ff8f 	bl	8009f86 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2210      	movs	r2, #16
 8008074:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8008078:	e016      	b.n	80080a8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800807a:	2340      	movs	r3, #64	; 0x40
 800807c:	2202      	movs	r2, #2
 800807e:	2181      	movs	r1, #129	; 0x81
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f001 ff80 	bl	8009f86 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2201      	movs	r2, #1
 800808a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800808c:	2340      	movs	r3, #64	; 0x40
 800808e:	2202      	movs	r2, #2
 8008090:	2101      	movs	r1, #1
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f001 ff77 	bl	8009f86 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2201      	movs	r2, #1
 800809c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2210      	movs	r2, #16
 80080a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080a8:	2308      	movs	r3, #8
 80080aa:	2203      	movs	r2, #3
 80080ac:	2182      	movs	r1, #130	; 0x82
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 ff69 	bl	8009f86 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	2200      	movs	r2, #0
 80080ca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	7c1b      	ldrb	r3, [r3, #16]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d109      	bne.n	80080f2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080e8:	2101      	movs	r1, #1
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f002 f83a 	bl	800a164 <USBD_LL_PrepareReceive>
 80080f0:	e007      	b.n	8008102 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80080f8:	2340      	movs	r3, #64	; 0x40
 80080fa:	2101      	movs	r1, #1
 80080fc:	6878      	ldr	r0, [r7, #4]
 80080fe:	f002 f831 	bl	800a164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3710      	adds	r7, #16
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	460b      	mov	r3, r1
 8008116:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800811c:	2181      	movs	r1, #129	; 0x81
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 ff57 	bl	8009fd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800812a:	2101      	movs	r1, #1
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 ff50 	bl	8009fd2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800813a:	2182      	movs	r1, #130	; 0x82
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f001 ff48 	bl	8009fd2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	2200      	movs	r2, #0
 8008146:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00e      	beq.n	800817a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800816c:	4618      	mov	r0, r3
 800816e:	f002 f88b 	bl	800a288 <free>
    pdev->pClassData = NULL;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	2200      	movs	r2, #0
 8008176:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008194:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008196:	2300      	movs	r3, #0
 8008198:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800819a:	2300      	movs	r3, #0
 800819c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800819e:	2300      	movs	r3, #0
 80081a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081a2:	683b      	ldr	r3, [r7, #0]
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d03a      	beq.n	8008224 <USBD_CDC_Setup+0xa0>
 80081ae:	2b20      	cmp	r3, #32
 80081b0:	f040 8097 	bne.w	80082e2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	88db      	ldrh	r3, [r3, #6]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d029      	beq.n	8008210 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	781b      	ldrb	r3, [r3, #0]
 80081c0:	b25b      	sxtb	r3, r3
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	da11      	bge.n	80081ea <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081cc:	689b      	ldr	r3, [r3, #8]
 80081ce:	683a      	ldr	r2, [r7, #0]
 80081d0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80081d2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80081d4:	683a      	ldr	r2, [r7, #0]
 80081d6:	88d2      	ldrh	r2, [r2, #6]
 80081d8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80081da:	6939      	ldr	r1, [r7, #16]
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	88db      	ldrh	r3, [r3, #6]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	f001 fa9d 	bl	8009722 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80081e8:	e082      	b.n	80082f0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	785a      	ldrb	r2, [r3, #1]
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	88db      	ldrh	r3, [r3, #6]
 80081f8:	b2da      	uxtb	r2, r3
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008200:	6939      	ldr	r1, [r7, #16]
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	88db      	ldrh	r3, [r3, #6]
 8008206:	461a      	mov	r2, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f001 fab6 	bl	800977a <USBD_CtlPrepareRx>
    break;
 800820e:	e06f      	b.n	80082f0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	683a      	ldr	r2, [r7, #0]
 800821a:	7850      	ldrb	r0, [r2, #1]
 800821c:	2200      	movs	r2, #0
 800821e:	6839      	ldr	r1, [r7, #0]
 8008220:	4798      	blx	r3
    break;
 8008222:	e065      	b.n	80082f0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	785b      	ldrb	r3, [r3, #1]
 8008228:	2b0b      	cmp	r3, #11
 800822a:	d84f      	bhi.n	80082cc <USBD_CDC_Setup+0x148>
 800822c:	a201      	add	r2, pc, #4	; (adr r2, 8008234 <USBD_CDC_Setup+0xb0>)
 800822e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008232:	bf00      	nop
 8008234:	08008265 	.word	0x08008265
 8008238:	080082db 	.word	0x080082db
 800823c:	080082cd 	.word	0x080082cd
 8008240:	080082cd 	.word	0x080082cd
 8008244:	080082cd 	.word	0x080082cd
 8008248:	080082cd 	.word	0x080082cd
 800824c:	080082cd 	.word	0x080082cd
 8008250:	080082cd 	.word	0x080082cd
 8008254:	080082cd 	.word	0x080082cd
 8008258:	080082cd 	.word	0x080082cd
 800825c:	0800828d 	.word	0x0800828d
 8008260:	080082b5 	.word	0x080082b5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800826a:	2b03      	cmp	r3, #3
 800826c:	d107      	bne.n	800827e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800826e:	f107 030c 	add.w	r3, r7, #12
 8008272:	2202      	movs	r2, #2
 8008274:	4619      	mov	r1, r3
 8008276:	6878      	ldr	r0, [r7, #4]
 8008278:	f001 fa53 	bl	8009722 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800827c:	e030      	b.n	80082e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800827e:	6839      	ldr	r1, [r7, #0]
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f001 f9dd 	bl	8009640 <USBD_CtlError>
        ret = USBD_FAIL;
 8008286:	2303      	movs	r3, #3
 8008288:	75fb      	strb	r3, [r7, #23]
      break;
 800828a:	e029      	b.n	80082e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008292:	2b03      	cmp	r3, #3
 8008294:	d107      	bne.n	80082a6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008296:	f107 030f 	add.w	r3, r7, #15
 800829a:	2201      	movs	r2, #1
 800829c:	4619      	mov	r1, r3
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 fa3f 	bl	8009722 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80082a4:	e01c      	b.n	80082e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80082a6:	6839      	ldr	r1, [r7, #0]
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f001 f9c9 	bl	8009640 <USBD_CtlError>
        ret = USBD_FAIL;
 80082ae:	2303      	movs	r3, #3
 80082b0:	75fb      	strb	r3, [r7, #23]
      break;
 80082b2:	e015      	b.n	80082e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ba:	2b03      	cmp	r3, #3
 80082bc:	d00f      	beq.n	80082de <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80082be:	6839      	ldr	r1, [r7, #0]
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 f9bd 	bl	8009640 <USBD_CtlError>
        ret = USBD_FAIL;
 80082c6:	2303      	movs	r3, #3
 80082c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80082ca:	e008      	b.n	80082de <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 f9b6 	bl	8009640 <USBD_CtlError>
      ret = USBD_FAIL;
 80082d4:	2303      	movs	r3, #3
 80082d6:	75fb      	strb	r3, [r7, #23]
      break;
 80082d8:	e002      	b.n	80082e0 <USBD_CDC_Setup+0x15c>
      break;
 80082da:	bf00      	nop
 80082dc:	e008      	b.n	80082f0 <USBD_CDC_Setup+0x16c>
      break;
 80082de:	bf00      	nop
    }
    break;
 80082e0:	e006      	b.n	80082f0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80082e2:	6839      	ldr	r1, [r7, #0]
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f001 f9ab 	bl	8009640 <USBD_CtlError>
    ret = USBD_FAIL;
 80082ea:	2303      	movs	r3, #3
 80082ec:	75fb      	strb	r3, [r7, #23]
    break;
 80082ee:	bf00      	nop
  }

  return (uint8_t)ret;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3718      	adds	r7, #24
 80082f6:	46bd      	mov	sp, r7
 80082f8:	bd80      	pop	{r7, pc}
 80082fa:	bf00      	nop

080082fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b084      	sub	sp, #16
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
 8008304:	460b      	mov	r3, r1
 8008306:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800830e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800831a:	2303      	movs	r3, #3
 800831c:	e049      	b.n	80083b2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008324:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008326:	78fa      	ldrb	r2, [r7, #3]
 8008328:	6879      	ldr	r1, [r7, #4]
 800832a:	4613      	mov	r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	009b      	lsls	r3, r3, #2
 8008332:	440b      	add	r3, r1
 8008334:	3318      	adds	r3, #24
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d029      	beq.n	8008390 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800833c:	78fa      	ldrb	r2, [r7, #3]
 800833e:	6879      	ldr	r1, [r7, #4]
 8008340:	4613      	mov	r3, r2
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	4413      	add	r3, r2
 8008346:	009b      	lsls	r3, r3, #2
 8008348:	440b      	add	r3, r1
 800834a:	3318      	adds	r3, #24
 800834c:	681a      	ldr	r2, [r3, #0]
 800834e:	78f9      	ldrb	r1, [r7, #3]
 8008350:	68f8      	ldr	r0, [r7, #12]
 8008352:	460b      	mov	r3, r1
 8008354:	00db      	lsls	r3, r3, #3
 8008356:	1a5b      	subs	r3, r3, r1
 8008358:	009b      	lsls	r3, r3, #2
 800835a:	4403      	add	r3, r0
 800835c:	3344      	adds	r3, #68	; 0x44
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	fbb2 f1f3 	udiv	r1, r2, r3
 8008364:	fb03 f301 	mul.w	r3, r3, r1
 8008368:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800836a:	2b00      	cmp	r3, #0
 800836c:	d110      	bne.n	8008390 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800836e:	78fa      	ldrb	r2, [r7, #3]
 8008370:	6879      	ldr	r1, [r7, #4]
 8008372:	4613      	mov	r3, r2
 8008374:	009b      	lsls	r3, r3, #2
 8008376:	4413      	add	r3, r2
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	440b      	add	r3, r1
 800837c:	3318      	adds	r3, #24
 800837e:	2200      	movs	r2, #0
 8008380:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008382:	78f9      	ldrb	r1, [r7, #3]
 8008384:	2300      	movs	r3, #0
 8008386:	2200      	movs	r2, #0
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f001 feca 	bl	800a122 <USBD_LL_Transmit>
 800838e:	e00f      	b.n	80083b0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2200      	movs	r2, #0
 8008394:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800839e:	691b      	ldr	r3, [r3, #16]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80083ac:	78fa      	ldrb	r2, [r7, #3]
 80083ae:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80083b0:	2300      	movs	r3, #0
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3710      	adds	r7, #16
 80083b6:	46bd      	mov	sp, r7
 80083b8:	bd80      	pop	{r7, pc}

080083ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80083ba:	b580      	push	{r7, lr}
 80083bc:	b084      	sub	sp, #16
 80083be:	af00      	add	r7, sp, #0
 80083c0:	6078      	str	r0, [r7, #4]
 80083c2:	460b      	mov	r3, r1
 80083c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d101      	bne.n	80083dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80083d8:	2303      	movs	r3, #3
 80083da:	e015      	b.n	8008408 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80083dc:	78fb      	ldrb	r3, [r7, #3]
 80083de:	4619      	mov	r1, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 fee0 	bl	800a1a6 <USBD_LL_GetRxDataSize>
 80083e6:	4602      	mov	r2, r0
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	68fa      	ldr	r2, [r7, #12]
 80083f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008402:	4611      	mov	r1, r2
 8008404:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008406:	2300      	movs	r3, #0
}
 8008408:	4618      	mov	r0, r3
 800840a:	3710      	adds	r7, #16
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}

08008410 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b084      	sub	sp, #16
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800841e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008426:	2b00      	cmp	r3, #0
 8008428:	d015      	beq.n	8008456 <USBD_CDC_EP0_RxReady+0x46>
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008430:	2bff      	cmp	r3, #255	; 0xff
 8008432:	d010      	beq.n	8008456 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800843a:	689b      	ldr	r3, [r3, #8]
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008442:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008444:	68fa      	ldr	r2, [r7, #12]
 8008446:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800844a:	b292      	uxth	r2, r2
 800844c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	22ff      	movs	r2, #255	; 0xff
 8008452:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3710      	adds	r7, #16
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2243      	movs	r2, #67	; 0x43
 800846c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800846e:	4b03      	ldr	r3, [pc, #12]	; (800847c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008470:	4618      	mov	r0, r3
 8008472:	370c      	adds	r7, #12
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	200000c4 	.word	0x200000c4

08008480 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008480:	b480      	push	{r7}
 8008482:	b083      	sub	sp, #12
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	2243      	movs	r2, #67	; 0x43
 800848c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800848e:	4b03      	ldr	r3, [pc, #12]	; (800849c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008490:	4618      	mov	r0, r3
 8008492:	370c      	adds	r7, #12
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr
 800849c:	20000080 	.word	0x20000080

080084a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2243      	movs	r2, #67	; 0x43
 80084ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80084ae:	4b03      	ldr	r3, [pc, #12]	; (80084bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr
 80084bc:	20000108 	.word	0x20000108

080084c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b083      	sub	sp, #12
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	220a      	movs	r2, #10
 80084cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80084ce:	4b03      	ldr	r3, [pc, #12]	; (80084dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr
 80084dc:	2000003c 	.word	0x2000003c

080084e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80084f0:	2303      	movs	r3, #3
 80084f2:	e004      	b.n	80084fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80084fc:	2300      	movs	r3, #0
}
 80084fe:	4618      	mov	r0, r3
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800850a:	b480      	push	{r7}
 800850c:	b087      	sub	sp, #28
 800850e:	af00      	add	r7, sp, #0
 8008510:	60f8      	str	r0, [r7, #12]
 8008512:	60b9      	str	r1, [r7, #8]
 8008514:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800851c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	68ba      	ldr	r2, [r7, #8]
 8008522:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800853c:	b480      	push	{r7}
 800853e:	b085      	sub	sp, #20
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800854c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3714      	adds	r7, #20
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008572:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008574:	2301      	movs	r3, #1
 8008576:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800857e:	2b00      	cmp	r3, #0
 8008580:	d101      	bne.n	8008586 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008582:	2303      	movs	r3, #3
 8008584:	e01a      	b.n	80085bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800858c:	2b00      	cmp	r3, #0
 800858e:	d114      	bne.n	80085ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2201      	movs	r2, #1
 8008594:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80085ae:	2181      	movs	r1, #129	; 0x81
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f001 fdb6 	bl	800a122 <USBD_LL_Transmit>

    ret = USBD_OK;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3710      	adds	r7, #16
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}

080085c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80085de:	2303      	movs	r3, #3
 80085e0:	e016      	b.n	8008610 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	7c1b      	ldrb	r3, [r3, #16]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d109      	bne.n	80085fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80085f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085f4:	2101      	movs	r1, #1
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f001 fdb4 	bl	800a164 <USBD_LL_PrepareReceive>
 80085fc:	e007      	b.n	800860e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008604:	2340      	movs	r3, #64	; 0x40
 8008606:	2101      	movs	r1, #1
 8008608:	6878      	ldr	r0, [r7, #4]
 800860a:	f001 fdab 	bl	800a164 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3710      	adds	r7, #16
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b086      	sub	sp, #24
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	4613      	mov	r3, r2
 8008624:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800862c:	2303      	movs	r3, #3
 800862e:	e025      	b.n	800867c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008636:	2b00      	cmp	r3, #0
 8008638:	d003      	beq.n	8008642 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008648:	2b00      	cmp	r3, #0
 800864a:	d003      	beq.n	8008654 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	2200      	movs	r2, #0
 8008650:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2201      	movs	r2, #1
 8008666:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	79fa      	ldrb	r2, [r7, #7]
 800866e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008670:	68f8      	ldr	r0, [r7, #12]
 8008672:	f001 fc21 	bl	8009eb8 <USBD_LL_Init>
 8008676:	4603      	mov	r3, r0
 8008678:	75fb      	strb	r3, [r7, #23]

  return ret;
 800867a:	7dfb      	ldrb	r3, [r7, #23]
}
 800867c:	4618      	mov	r0, r3
 800867e:	3718      	adds	r7, #24
 8008680:	46bd      	mov	sp, r7
 8008682:	bd80      	pop	{r7, pc}

08008684 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b084      	sub	sp, #16
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
 800868c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800868e:	2300      	movs	r3, #0
 8008690:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008698:	2303      	movs	r3, #3
 800869a:	e010      	b.n	80086be <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	683a      	ldr	r2, [r7, #0]
 80086a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ac:	f107 020e 	add.w	r2, r7, #14
 80086b0:	4610      	mov	r0, r2
 80086b2:	4798      	blx	r3
 80086b4:	4602      	mov	r2, r0
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3710      	adds	r7, #16
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f001 fc3e 	bl	8009f50 <USBD_LL_Start>
 80086d4:	4603      	mov	r3, r0
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}

080086de <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80086de:	b480      	push	{r7}
 80086e0:	b083      	sub	sp, #12
 80086e2:	af00      	add	r7, sp, #0
 80086e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80086e6:	2300      	movs	r3, #0
}
 80086e8:	4618      	mov	r0, r3
 80086ea:	370c      	adds	r7, #12
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr

080086f4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	460b      	mov	r3, r1
 80086fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008700:	2303      	movs	r3, #3
 8008702:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800870a:	2b00      	cmp	r3, #0
 800870c:	d009      	beq.n	8008722 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	78fa      	ldrb	r2, [r7, #3]
 8008718:	4611      	mov	r1, r2
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	4798      	blx	r3
 800871e:	4603      	mov	r3, r0
 8008720:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008722:	7bfb      	ldrb	r3, [r7, #15]
}
 8008724:	4618      	mov	r0, r3
 8008726:	3710      	adds	r7, #16
 8008728:	46bd      	mov	sp, r7
 800872a:	bd80      	pop	{r7, pc}

0800872c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	460b      	mov	r3, r1
 8008736:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800873e:	2b00      	cmp	r3, #0
 8008740:	d007      	beq.n	8008752 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	78fa      	ldrb	r2, [r7, #3]
 800874c:	4611      	mov	r1, r2
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	4798      	blx	r3
  }

  return USBD_OK;
 8008752:	2300      	movs	r3, #0
}
 8008754:	4618      	mov	r0, r3
 8008756:	3708      	adds	r7, #8
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800876c:	6839      	ldr	r1, [r7, #0]
 800876e:	4618      	mov	r0, r3
 8008770:	f000 ff2c 	bl	80095cc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008782:	461a      	mov	r2, r3
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008790:	f003 031f 	and.w	r3, r3, #31
 8008794:	2b01      	cmp	r3, #1
 8008796:	d00e      	beq.n	80087b6 <USBD_LL_SetupStage+0x5a>
 8008798:	2b01      	cmp	r3, #1
 800879a:	d302      	bcc.n	80087a2 <USBD_LL_SetupStage+0x46>
 800879c:	2b02      	cmp	r3, #2
 800879e:	d014      	beq.n	80087ca <USBD_LL_SetupStage+0x6e>
 80087a0:	e01d      	b.n	80087de <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 fa18 	bl	8008be0 <USBD_StdDevReq>
 80087b0:	4603      	mov	r3, r0
 80087b2:	73fb      	strb	r3, [r7, #15]
      break;
 80087b4:	e020      	b.n	80087f8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087bc:	4619      	mov	r1, r3
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f000 fa7c 	bl	8008cbc <USBD_StdItfReq>
 80087c4:	4603      	mov	r3, r0
 80087c6:	73fb      	strb	r3, [r7, #15]
      break;
 80087c8:	e016      	b.n	80087f8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087d0:	4619      	mov	r1, r3
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f000 fab8 	bl	8008d48 <USBD_StdEPReq>
 80087d8:	4603      	mov	r3, r0
 80087da:	73fb      	strb	r3, [r7, #15]
      break;
 80087dc:	e00c      	b.n	80087f8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80087e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80087e8:	b2db      	uxtb	r3, r3
 80087ea:	4619      	mov	r1, r3
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f001 fc0f 	bl	800a010 <USBD_LL_StallEP>
 80087f2:	4603      	mov	r3, r0
 80087f4:	73fb      	strb	r3, [r7, #15]
      break;
 80087f6:	bf00      	nop
  }

  return ret;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008802:	b580      	push	{r7, lr}
 8008804:	b086      	sub	sp, #24
 8008806:	af00      	add	r7, sp, #0
 8008808:	60f8      	str	r0, [r7, #12]
 800880a:	460b      	mov	r3, r1
 800880c:	607a      	str	r2, [r7, #4]
 800880e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008810:	7afb      	ldrb	r3, [r7, #11]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d137      	bne.n	8008886 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800881c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008824:	2b03      	cmp	r3, #3
 8008826:	d14a      	bne.n	80088be <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	689a      	ldr	r2, [r3, #8]
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	68db      	ldr	r3, [r3, #12]
 8008830:	429a      	cmp	r2, r3
 8008832:	d913      	bls.n	800885c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	689a      	ldr	r2, [r3, #8]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	1ad2      	subs	r2, r2, r3
 800883e:	693b      	ldr	r3, [r7, #16]
 8008840:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008842:	693b      	ldr	r3, [r7, #16]
 8008844:	68da      	ldr	r2, [r3, #12]
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	689b      	ldr	r3, [r3, #8]
 800884a:	4293      	cmp	r3, r2
 800884c:	bf28      	it	cs
 800884e:	4613      	movcs	r3, r2
 8008850:	461a      	mov	r2, r3
 8008852:	6879      	ldr	r1, [r7, #4]
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f000 ffad 	bl	80097b4 <USBD_CtlContinueRx>
 800885a:	e030      	b.n	80088be <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008862:	691b      	ldr	r3, [r3, #16]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d00a      	beq.n	800887e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800886e:	2b03      	cmp	r3, #3
 8008870:	d105      	bne.n	800887e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	68f8      	ldr	r0, [r7, #12]
 800887c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800887e:	68f8      	ldr	r0, [r7, #12]
 8008880:	f000 ffa9 	bl	80097d6 <USBD_CtlSendStatus>
 8008884:	e01b      	b.n	80088be <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d013      	beq.n	80088ba <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008898:	2b03      	cmp	r3, #3
 800889a:	d10e      	bne.n	80088ba <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a2:	699b      	ldr	r3, [r3, #24]
 80088a4:	7afa      	ldrb	r2, [r7, #11]
 80088a6:	4611      	mov	r1, r2
 80088a8:	68f8      	ldr	r0, [r7, #12]
 80088aa:	4798      	blx	r3
 80088ac:	4603      	mov	r3, r0
 80088ae:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80088b0:	7dfb      	ldrb	r3, [r7, #23]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80088b6:	7dfb      	ldrb	r3, [r7, #23]
 80088b8:	e002      	b.n	80088c0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e000      	b.n	80088c0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80088be:	2300      	movs	r3, #0
}
 80088c0:	4618      	mov	r0, r3
 80088c2:	3718      	adds	r7, #24
 80088c4:	46bd      	mov	sp, r7
 80088c6:	bd80      	pop	{r7, pc}

080088c8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b086      	sub	sp, #24
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	60f8      	str	r0, [r7, #12]
 80088d0:	460b      	mov	r3, r1
 80088d2:	607a      	str	r2, [r7, #4]
 80088d4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80088d6:	7afb      	ldrb	r3, [r7, #11]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d16a      	bne.n	80089b2 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	3314      	adds	r3, #20
 80088e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088e8:	2b02      	cmp	r3, #2
 80088ea:	d155      	bne.n	8008998 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	689a      	ldr	r2, [r3, #8]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	68db      	ldr	r3, [r3, #12]
 80088f4:	429a      	cmp	r2, r3
 80088f6:	d914      	bls.n	8008922 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	689a      	ldr	r2, [r3, #8]
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	68db      	ldr	r3, [r3, #12]
 8008900:	1ad2      	subs	r2, r2, r3
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	461a      	mov	r2, r3
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	68f8      	ldr	r0, [r7, #12]
 8008910:	f000 ff22 	bl	8009758 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008914:	2300      	movs	r3, #0
 8008916:	2200      	movs	r2, #0
 8008918:	2100      	movs	r1, #0
 800891a:	68f8      	ldr	r0, [r7, #12]
 800891c:	f001 fc22 	bl	800a164 <USBD_LL_PrepareReceive>
 8008920:	e03a      	b.n	8008998 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008922:	693b      	ldr	r3, [r7, #16]
 8008924:	68da      	ldr	r2, [r3, #12]
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	429a      	cmp	r2, r3
 800892c:	d11c      	bne.n	8008968 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	685a      	ldr	r2, [r3, #4]
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008936:	429a      	cmp	r2, r3
 8008938:	d316      	bcc.n	8008968 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800893a:	693b      	ldr	r3, [r7, #16]
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008944:	429a      	cmp	r2, r3
 8008946:	d20f      	bcs.n	8008968 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008948:	2200      	movs	r2, #0
 800894a:	2100      	movs	r1, #0
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 ff03 	bl	8009758 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2200      	movs	r2, #0
 8008956:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800895a:	2300      	movs	r3, #0
 800895c:	2200      	movs	r2, #0
 800895e:	2100      	movs	r1, #0
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f001 fbff 	bl	800a164 <USBD_LL_PrepareReceive>
 8008966:	e017      	b.n	8008998 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800897a:	2b03      	cmp	r3, #3
 800897c:	d105      	bne.n	800898a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008984:	68db      	ldr	r3, [r3, #12]
 8008986:	68f8      	ldr	r0, [r7, #12]
 8008988:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800898a:	2180      	movs	r1, #128	; 0x80
 800898c:	68f8      	ldr	r0, [r7, #12]
 800898e:	f001 fb3f 	bl	800a010 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008992:	68f8      	ldr	r0, [r7, #12]
 8008994:	f000 ff32 	bl	80097fc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d123      	bne.n	80089ea <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80089a2:	68f8      	ldr	r0, [r7, #12]
 80089a4:	f7ff fe9b 	bl	80086de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80089b0:	e01b      	b.n	80089ea <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b8:	695b      	ldr	r3, [r3, #20]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d013      	beq.n	80089e6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80089c4:	2b03      	cmp	r3, #3
 80089c6:	d10e      	bne.n	80089e6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089ce:	695b      	ldr	r3, [r3, #20]
 80089d0:	7afa      	ldrb	r2, [r7, #11]
 80089d2:	4611      	mov	r1, r2
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	4798      	blx	r3
 80089d8:	4603      	mov	r3, r0
 80089da:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d003      	beq.n	80089ea <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80089e2:	7dfb      	ldrb	r3, [r7, #23]
 80089e4:	e002      	b.n	80089ec <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80089e6:	2303      	movs	r3, #3
 80089e8:	e000      	b.n	80089ec <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80089ea:	2300      	movs	r3, #0
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b082      	sub	sp, #8
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	2200      	movs	r2, #0
 8008a08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2200      	movs	r2, #0
 8008a16:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d009      	beq.n	8008a38 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	6852      	ldr	r2, [r2, #4]
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	4611      	mov	r1, r2
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a38:	2340      	movs	r3, #64	; 0x40
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f001 faa1 	bl	8009f86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	2201      	movs	r2, #1
 8008a48:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2240      	movs	r2, #64	; 0x40
 8008a50:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008a54:	2340      	movs	r3, #64	; 0x40
 8008a56:	2200      	movs	r2, #0
 8008a58:	2180      	movs	r1, #128	; 0x80
 8008a5a:	6878      	ldr	r0, [r7, #4]
 8008a5c:	f001 fa93 	bl	8009f86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	2240      	movs	r2, #64	; 0x40
 8008a6a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}

08008a76 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
 8008a7e:	460b      	mov	r3, r1
 8008a80:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	78fa      	ldrb	r2, [r7, #3]
 8008a86:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr

08008a96 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008a96:	b480      	push	{r7}
 8008a98:	b083      	sub	sp, #12
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2204      	movs	r2, #4
 8008aae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ace:	2b04      	cmp	r3, #4
 8008ad0:	d105      	bne.n	8008ade <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b082      	sub	sp, #8
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008afa:	2b03      	cmp	r3, #3
 8008afc:	d10b      	bne.n	8008b16 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b04:	69db      	ldr	r3, [r3, #28]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d005      	beq.n	8008b16 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b2c:	2300      	movs	r3, #0
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	370c      	adds	r7, #12
 8008b32:	46bd      	mov	sp, r7
 8008b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b38:	4770      	bx	lr

08008b3a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008b3a:	b480      	push	{r7}
 8008b3c:	b083      	sub	sp, #12
 8008b3e:	af00      	add	r7, sp, #0
 8008b40:	6078      	str	r0, [r7, #4]
 8008b42:	460b      	mov	r3, r1
 8008b44:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008b46:	2300      	movs	r3, #0
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b083      	sub	sp, #12
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr

08008b6a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008b6a:	b580      	push	{r7, lr}
 8008b6c:	b082      	sub	sp, #8
 8008b6e:	af00      	add	r7, sp, #0
 8008b70:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d009      	beq.n	8008b98 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	6852      	ldr	r2, [r2, #4]
 8008b90:	b2d2      	uxtb	r2, r2
 8008b92:	4611      	mov	r1, r2
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	4798      	blx	r3
  }

  return USBD_OK;
 8008b98:	2300      	movs	r3, #0
}
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	3708      	adds	r7, #8
 8008b9e:	46bd      	mov	sp, r7
 8008ba0:	bd80      	pop	{r7, pc}

08008ba2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b087      	sub	sp, #28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008bc0:	8a3b      	ldrh	r3, [r7, #16]
 8008bc2:	021b      	lsls	r3, r3, #8
 8008bc4:	b21a      	sxth	r2, r3
 8008bc6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	b21b      	sxth	r3, r3
 8008bce:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008bd0:	89fb      	ldrh	r3, [r7, #14]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	371c      	adds	r7, #28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr
	...

08008be0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bea:	2300      	movs	r3, #0
 8008bec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008bf6:	2b20      	cmp	r3, #32
 8008bf8:	d004      	beq.n	8008c04 <USBD_StdDevReq+0x24>
 8008bfa:	2b40      	cmp	r3, #64	; 0x40
 8008bfc:	d002      	beq.n	8008c04 <USBD_StdDevReq+0x24>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00a      	beq.n	8008c18 <USBD_StdDevReq+0x38>
 8008c02:	e050      	b.n	8008ca6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	689b      	ldr	r3, [r3, #8]
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
 8008c12:	4603      	mov	r3, r0
 8008c14:	73fb      	strb	r3, [r7, #15]
    break;
 8008c16:	e04b      	b.n	8008cb0 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	785b      	ldrb	r3, [r3, #1]
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d83c      	bhi.n	8008c9a <USBD_StdDevReq+0xba>
 8008c20:	a201      	add	r2, pc, #4	; (adr r2, 8008c28 <USBD_StdDevReq+0x48>)
 8008c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c26:	bf00      	nop
 8008c28:	08008c7d 	.word	0x08008c7d
 8008c2c:	08008c91 	.word	0x08008c91
 8008c30:	08008c9b 	.word	0x08008c9b
 8008c34:	08008c87 	.word	0x08008c87
 8008c38:	08008c9b 	.word	0x08008c9b
 8008c3c:	08008c5b 	.word	0x08008c5b
 8008c40:	08008c51 	.word	0x08008c51
 8008c44:	08008c9b 	.word	0x08008c9b
 8008c48:	08008c73 	.word	0x08008c73
 8008c4c:	08008c65 	.word	0x08008c65
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008c50:	6839      	ldr	r1, [r7, #0]
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f9ce 	bl	8008ff4 <USBD_GetDescriptor>
      break;
 8008c58:	e024      	b.n	8008ca4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008c5a:	6839      	ldr	r1, [r7, #0]
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fb33 	bl	80092c8 <USBD_SetAddress>
      break;
 8008c62:	e01f      	b.n	8008ca4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008c64:	6839      	ldr	r1, [r7, #0]
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	f000 fb70 	bl	800934c <USBD_SetConfig>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c70:	e018      	b.n	8008ca4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008c72:	6839      	ldr	r1, [r7, #0]
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f000 fc0d 	bl	8009494 <USBD_GetConfig>
      break;
 8008c7a:	e013      	b.n	8008ca4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008c7c:	6839      	ldr	r1, [r7, #0]
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fc3c 	bl	80094fc <USBD_GetStatus>
      break;
 8008c84:	e00e      	b.n	8008ca4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008c86:	6839      	ldr	r1, [r7, #0]
 8008c88:	6878      	ldr	r0, [r7, #4]
 8008c8a:	f000 fc6a 	bl	8009562 <USBD_SetFeature>
      break;
 8008c8e:	e009      	b.n	8008ca4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008c90:	6839      	ldr	r1, [r7, #0]
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f000 fc79 	bl	800958a <USBD_ClrFeature>
      break;
 8008c98:	e004      	b.n	8008ca4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008c9a:	6839      	ldr	r1, [r7, #0]
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f000 fccf 	bl	8009640 <USBD_CtlError>
      break;
 8008ca2:	bf00      	nop
    }
    break;
 8008ca4:	e004      	b.n	8008cb0 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008ca6:	6839      	ldr	r1, [r7, #0]
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fcc9 	bl	8009640 <USBD_CtlError>
    break;
 8008cae:	bf00      	nop
  }

  return ret;
 8008cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3710      	adds	r7, #16
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop

08008cbc <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b084      	sub	sp, #16
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cc6:	2300      	movs	r3, #0
 8008cc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	781b      	ldrb	r3, [r3, #0]
 8008cce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008cd2:	2b20      	cmp	r3, #32
 8008cd4:	d003      	beq.n	8008cde <USBD_StdItfReq+0x22>
 8008cd6:	2b40      	cmp	r3, #64	; 0x40
 8008cd8:	d001      	beq.n	8008cde <USBD_StdItfReq+0x22>
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d12a      	bne.n	8008d34 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	2b02      	cmp	r3, #2
 8008ce8:	d81d      	bhi.n	8008d26 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	889b      	ldrh	r3, [r3, #4]
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d813      	bhi.n	8008d1c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	6839      	ldr	r1, [r7, #0]
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	4798      	blx	r3
 8008d02:	4603      	mov	r3, r0
 8008d04:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	88db      	ldrh	r3, [r3, #6]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d110      	bne.n	8008d30 <USBD_StdItfReq+0x74>
 8008d0e:	7bfb      	ldrb	r3, [r7, #15]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10d      	bne.n	8008d30 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008d14:	6878      	ldr	r0, [r7, #4]
 8008d16:	f000 fd5e 	bl	80097d6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008d1a:	e009      	b.n	8008d30 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008d1c:	6839      	ldr	r1, [r7, #0]
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f000 fc8e 	bl	8009640 <USBD_CtlError>
      break;
 8008d24:	e004      	b.n	8008d30 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008d26:	6839      	ldr	r1, [r7, #0]
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f000 fc89 	bl	8009640 <USBD_CtlError>
      break;
 8008d2e:	e000      	b.n	8008d32 <USBD_StdItfReq+0x76>
      break;
 8008d30:	bf00      	nop
    }
    break;
 8008d32:	e004      	b.n	8008d3e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008d34:	6839      	ldr	r1, [r7, #0]
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 fc82 	bl	8009640 <USBD_CtlError>
    break;
 8008d3c:	bf00      	nop
  }

  return ret;
 8008d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3710      	adds	r7, #16
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b084      	sub	sp, #16
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d52:	2300      	movs	r3, #0
 8008d54:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008d56:	683b      	ldr	r3, [r7, #0]
 8008d58:	889b      	ldrh	r3, [r3, #4]
 8008d5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	781b      	ldrb	r3, [r3, #0]
 8008d60:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d64:	2b20      	cmp	r3, #32
 8008d66:	d004      	beq.n	8008d72 <USBD_StdEPReq+0x2a>
 8008d68:	2b40      	cmp	r3, #64	; 0x40
 8008d6a:	d002      	beq.n	8008d72 <USBD_StdEPReq+0x2a>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d00a      	beq.n	8008d86 <USBD_StdEPReq+0x3e>
 8008d70:	e135      	b.n	8008fde <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d78:	689b      	ldr	r3, [r3, #8]
 8008d7a:	6839      	ldr	r1, [r7, #0]
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	4798      	blx	r3
 8008d80:	4603      	mov	r3, r0
 8008d82:	73fb      	strb	r3, [r7, #15]
    break;
 8008d84:	e130      	b.n	8008fe8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	785b      	ldrb	r3, [r3, #1]
 8008d8a:	2b01      	cmp	r3, #1
 8008d8c:	d03e      	beq.n	8008e0c <USBD_StdEPReq+0xc4>
 8008d8e:	2b03      	cmp	r3, #3
 8008d90:	d002      	beq.n	8008d98 <USBD_StdEPReq+0x50>
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d077      	beq.n	8008e86 <USBD_StdEPReq+0x13e>
 8008d96:	e11c      	b.n	8008fd2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d9e:	2b02      	cmp	r3, #2
 8008da0:	d002      	beq.n	8008da8 <USBD_StdEPReq+0x60>
 8008da2:	2b03      	cmp	r3, #3
 8008da4:	d015      	beq.n	8008dd2 <USBD_StdEPReq+0x8a>
 8008da6:	e02b      	b.n	8008e00 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008da8:	7bbb      	ldrb	r3, [r7, #14]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d00c      	beq.n	8008dc8 <USBD_StdEPReq+0x80>
 8008dae:	7bbb      	ldrb	r3, [r7, #14]
 8008db0:	2b80      	cmp	r3, #128	; 0x80
 8008db2:	d009      	beq.n	8008dc8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008db4:	7bbb      	ldrb	r3, [r7, #14]
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f001 f929 	bl	800a010 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008dbe:	2180      	movs	r1, #128	; 0x80
 8008dc0:	6878      	ldr	r0, [r7, #4]
 8008dc2:	f001 f925 	bl	800a010 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008dc6:	e020      	b.n	8008e0a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008dc8:	6839      	ldr	r1, [r7, #0]
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 fc38 	bl	8009640 <USBD_CtlError>
        break;
 8008dd0:	e01b      	b.n	8008e0a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	885b      	ldrh	r3, [r3, #2]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d10e      	bne.n	8008df8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008dda:	7bbb      	ldrb	r3, [r7, #14]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d00b      	beq.n	8008df8 <USBD_StdEPReq+0xb0>
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	2b80      	cmp	r3, #128	; 0x80
 8008de4:	d008      	beq.n	8008df8 <USBD_StdEPReq+0xb0>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	88db      	ldrh	r3, [r3, #6]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d104      	bne.n	8008df8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008dee:	7bbb      	ldrb	r3, [r7, #14]
 8008df0:	4619      	mov	r1, r3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f001 f90c 	bl	800a010 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008df8:	6878      	ldr	r0, [r7, #4]
 8008dfa:	f000 fcec 	bl	80097d6 <USBD_CtlSendStatus>

        break;
 8008dfe:	e004      	b.n	8008e0a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008e00:	6839      	ldr	r1, [r7, #0]
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 fc1c 	bl	8009640 <USBD_CtlError>
        break;
 8008e08:	bf00      	nop
      }
      break;
 8008e0a:	e0e7      	b.n	8008fdc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e12:	2b02      	cmp	r3, #2
 8008e14:	d002      	beq.n	8008e1c <USBD_StdEPReq+0xd4>
 8008e16:	2b03      	cmp	r3, #3
 8008e18:	d015      	beq.n	8008e46 <USBD_StdEPReq+0xfe>
 8008e1a:	e02d      	b.n	8008e78 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e1c:	7bbb      	ldrb	r3, [r7, #14]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d00c      	beq.n	8008e3c <USBD_StdEPReq+0xf4>
 8008e22:	7bbb      	ldrb	r3, [r7, #14]
 8008e24:	2b80      	cmp	r3, #128	; 0x80
 8008e26:	d009      	beq.n	8008e3c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e28:	7bbb      	ldrb	r3, [r7, #14]
 8008e2a:	4619      	mov	r1, r3
 8008e2c:	6878      	ldr	r0, [r7, #4]
 8008e2e:	f001 f8ef 	bl	800a010 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e32:	2180      	movs	r1, #128	; 0x80
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f001 f8eb 	bl	800a010 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008e3a:	e023      	b.n	8008e84 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008e3c:	6839      	ldr	r1, [r7, #0]
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fbfe 	bl	8009640 <USBD_CtlError>
        break;
 8008e44:	e01e      	b.n	8008e84 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	885b      	ldrh	r3, [r3, #2]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d119      	bne.n	8008e82 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008e4e:	7bbb      	ldrb	r3, [r7, #14]
 8008e50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d004      	beq.n	8008e62 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008e58:	7bbb      	ldrb	r3, [r7, #14]
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	6878      	ldr	r0, [r7, #4]
 8008e5e:	f001 f8f6 	bl	800a04e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008e62:	6878      	ldr	r0, [r7, #4]
 8008e64:	f000 fcb7 	bl	80097d6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	4798      	blx	r3
        }
        break;
 8008e76:	e004      	b.n	8008e82 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008e78:	6839      	ldr	r1, [r7, #0]
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f000 fbe0 	bl	8009640 <USBD_CtlError>
        break;
 8008e80:	e000      	b.n	8008e84 <USBD_StdEPReq+0x13c>
        break;
 8008e82:	bf00      	nop
      }
      break;
 8008e84:	e0aa      	b.n	8008fdc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e8c:	2b02      	cmp	r3, #2
 8008e8e:	d002      	beq.n	8008e96 <USBD_StdEPReq+0x14e>
 8008e90:	2b03      	cmp	r3, #3
 8008e92:	d032      	beq.n	8008efa <USBD_StdEPReq+0x1b2>
 8008e94:	e097      	b.n	8008fc6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e96:	7bbb      	ldrb	r3, [r7, #14]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d007      	beq.n	8008eac <USBD_StdEPReq+0x164>
 8008e9c:	7bbb      	ldrb	r3, [r7, #14]
 8008e9e:	2b80      	cmp	r3, #128	; 0x80
 8008ea0:	d004      	beq.n	8008eac <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008ea2:	6839      	ldr	r1, [r7, #0]
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 fbcb 	bl	8009640 <USBD_CtlError>
          break;
 8008eaa:	e091      	b.n	8008fd0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008eac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	da0b      	bge.n	8008ecc <USBD_StdEPReq+0x184>
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	009b      	lsls	r3, r3, #2
 8008ec2:	3310      	adds	r3, #16
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	4413      	add	r3, r2
 8008ec8:	3304      	adds	r3, #4
 8008eca:	e00b      	b.n	8008ee4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008ed2:	4613      	mov	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4413      	add	r3, r2
 8008ed8:	009b      	lsls	r3, r3, #2
 8008eda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	2200      	movs	r2, #0
 8008eea:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2202      	movs	r2, #2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f000 fc15 	bl	8009722 <USBD_CtlSendData>
        break;
 8008ef8:	e06a      	b.n	8008fd0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008efa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da11      	bge.n	8008f26 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f02:	7bbb      	ldrb	r3, [r7, #14]
 8008f04:	f003 020f 	and.w	r2, r3, #15
 8008f08:	6879      	ldr	r1, [r7, #4]
 8008f0a:	4613      	mov	r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	4413      	add	r3, r2
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	440b      	add	r3, r1
 8008f14:	3324      	adds	r3, #36	; 0x24
 8008f16:	881b      	ldrh	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d117      	bne.n	8008f4c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008f1c:	6839      	ldr	r1, [r7, #0]
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 fb8e 	bl	8009640 <USBD_CtlError>
            break;
 8008f24:	e054      	b.n	8008fd0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f26:	7bbb      	ldrb	r3, [r7, #14]
 8008f28:	f003 020f 	and.w	r2, r3, #15
 8008f2c:	6879      	ldr	r1, [r7, #4]
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	440b      	add	r3, r1
 8008f38:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f3c:	881b      	ldrh	r3, [r3, #0]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008f42:	6839      	ldr	r1, [r7, #0]
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f000 fb7b 	bl	8009640 <USBD_CtlError>
            break;
 8008f4a:	e041      	b.n	8008fd0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	da0b      	bge.n	8008f6c <USBD_StdEPReq+0x224>
 8008f54:	7bbb      	ldrb	r3, [r7, #14]
 8008f56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	3310      	adds	r3, #16
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	4413      	add	r3, r2
 8008f68:	3304      	adds	r3, #4
 8008f6a:	e00b      	b.n	8008f84 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008f6c:	7bbb      	ldrb	r3, [r7, #14]
 8008f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f72:	4613      	mov	r3, r2
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	009b      	lsls	r3, r3, #2
 8008f7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	4413      	add	r3, r2
 8008f82:	3304      	adds	r3, #4
 8008f84:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008f86:	7bbb      	ldrb	r3, [r7, #14]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d002      	beq.n	8008f92 <USBD_StdEPReq+0x24a>
 8008f8c:	7bbb      	ldrb	r3, [r7, #14]
 8008f8e:	2b80      	cmp	r3, #128	; 0x80
 8008f90:	d103      	bne.n	8008f9a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	2200      	movs	r2, #0
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	e00e      	b.n	8008fb8 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008f9a:	7bbb      	ldrb	r3, [r7, #14]
 8008f9c:	4619      	mov	r1, r3
 8008f9e:	6878      	ldr	r0, [r7, #4]
 8008fa0:	f001 f874 	bl	800a08c <USBD_LL_IsStallEP>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2201      	movs	r2, #1
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	e002      	b.n	8008fb8 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008fb8:	68bb      	ldr	r3, [r7, #8]
 8008fba:	2202      	movs	r2, #2
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f000 fbaf 	bl	8009722 <USBD_CtlSendData>
          break;
 8008fc4:	e004      	b.n	8008fd0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008fc6:	6839      	ldr	r1, [r7, #0]
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fb39 	bl	8009640 <USBD_CtlError>
        break;
 8008fce:	bf00      	nop
      }
      break;
 8008fd0:	e004      	b.n	8008fdc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008fd2:	6839      	ldr	r1, [r7, #0]
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f000 fb33 	bl	8009640 <USBD_CtlError>
      break;
 8008fda:	bf00      	nop
    }
    break;
 8008fdc:	e004      	b.n	8008fe8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008fde:	6839      	ldr	r1, [r7, #0]
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 fb2d 	bl	8009640 <USBD_CtlError>
    break;
 8008fe6:	bf00      	nop
  }

  return ret;
 8008fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009006:	2300      	movs	r3, #0
 8009008:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	885b      	ldrh	r3, [r3, #2]
 800900e:	0a1b      	lsrs	r3, r3, #8
 8009010:	b29b      	uxth	r3, r3
 8009012:	3b01      	subs	r3, #1
 8009014:	2b06      	cmp	r3, #6
 8009016:	f200 8128 	bhi.w	800926a <USBD_GetDescriptor+0x276>
 800901a:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <USBD_GetDescriptor+0x2c>)
 800901c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009020:	0800903d 	.word	0x0800903d
 8009024:	08009055 	.word	0x08009055
 8009028:	08009095 	.word	0x08009095
 800902c:	0800926b 	.word	0x0800926b
 8009030:	0800926b 	.word	0x0800926b
 8009034:	0800920b 	.word	0x0800920b
 8009038:	08009237 	.word	0x08009237
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	7c12      	ldrb	r2, [r2, #16]
 8009048:	f107 0108 	add.w	r1, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3
 8009050:	60f8      	str	r0, [r7, #12]
    break;
 8009052:	e112      	b.n	800927a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	7c1b      	ldrb	r3, [r3, #16]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d10d      	bne.n	8009078 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009064:	f107 0208 	add.w	r2, r7, #8
 8009068:	4610      	mov	r0, r2
 800906a:	4798      	blx	r3
 800906c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3301      	adds	r3, #1
 8009072:	2202      	movs	r2, #2
 8009074:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009076:	e100      	b.n	800927a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800907e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009080:	f107 0208 	add.w	r2, r7, #8
 8009084:	4610      	mov	r0, r2
 8009086:	4798      	blx	r3
 8009088:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	3301      	adds	r3, #1
 800908e:	2202      	movs	r2, #2
 8009090:	701a      	strb	r2, [r3, #0]
    break;
 8009092:	e0f2      	b.n	800927a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	885b      	ldrh	r3, [r3, #2]
 8009098:	b2db      	uxtb	r3, r3
 800909a:	2b05      	cmp	r3, #5
 800909c:	f200 80ac 	bhi.w	80091f8 <USBD_GetDescriptor+0x204>
 80090a0:	a201      	add	r2, pc, #4	; (adr r2, 80090a8 <USBD_GetDescriptor+0xb4>)
 80090a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090a6:	bf00      	nop
 80090a8:	080090c1 	.word	0x080090c1
 80090ac:	080090f5 	.word	0x080090f5
 80090b0:	08009129 	.word	0x08009129
 80090b4:	0800915d 	.word	0x0800915d
 80090b8:	08009191 	.word	0x08009191
 80090bc:	080091c5 	.word	0x080091c5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d00b      	beq.n	80090e4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090d2:	685b      	ldr	r3, [r3, #4]
 80090d4:	687a      	ldr	r2, [r7, #4]
 80090d6:	7c12      	ldrb	r2, [r2, #16]
 80090d8:	f107 0108 	add.w	r1, r7, #8
 80090dc:	4610      	mov	r0, r2
 80090de:	4798      	blx	r3
 80090e0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090e2:	e091      	b.n	8009208 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80090e4:	6839      	ldr	r1, [r7, #0]
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f000 faaa 	bl	8009640 <USBD_CtlError>
        err++;
 80090ec:	7afb      	ldrb	r3, [r7, #11]
 80090ee:	3301      	adds	r3, #1
 80090f0:	72fb      	strb	r3, [r7, #11]
      break;
 80090f2:	e089      	b.n	8009208 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d00b      	beq.n	8009118 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	7c12      	ldrb	r2, [r2, #16]
 800910c:	f107 0108 	add.w	r1, r7, #8
 8009110:	4610      	mov	r0, r2
 8009112:	4798      	blx	r3
 8009114:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009116:	e077      	b.n	8009208 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009118:	6839      	ldr	r1, [r7, #0]
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f000 fa90 	bl	8009640 <USBD_CtlError>
        err++;
 8009120:	7afb      	ldrb	r3, [r7, #11]
 8009122:	3301      	adds	r3, #1
 8009124:	72fb      	strb	r3, [r7, #11]
      break;
 8009126:	e06f      	b.n	8009208 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800912e:	68db      	ldr	r3, [r3, #12]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d00b      	beq.n	800914c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	7c12      	ldrb	r2, [r2, #16]
 8009140:	f107 0108 	add.w	r1, r7, #8
 8009144:	4610      	mov	r0, r2
 8009146:	4798      	blx	r3
 8009148:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800914a:	e05d      	b.n	8009208 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa76 	bl	8009640 <USBD_CtlError>
        err++;
 8009154:	7afb      	ldrb	r3, [r7, #11]
 8009156:	3301      	adds	r3, #1
 8009158:	72fb      	strb	r3, [r7, #11]
      break;
 800915a:	e055      	b.n	8009208 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d00b      	beq.n	8009180 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	687a      	ldr	r2, [r7, #4]
 8009172:	7c12      	ldrb	r2, [r2, #16]
 8009174:	f107 0108 	add.w	r1, r7, #8
 8009178:	4610      	mov	r0, r2
 800917a:	4798      	blx	r3
 800917c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800917e:	e043      	b.n	8009208 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 fa5c 	bl	8009640 <USBD_CtlError>
        err++;
 8009188:	7afb      	ldrb	r3, [r7, #11]
 800918a:	3301      	adds	r3, #1
 800918c:	72fb      	strb	r3, [r7, #11]
      break;
 800918e:	e03b      	b.n	8009208 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d00b      	beq.n	80091b4 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091a2:	695b      	ldr	r3, [r3, #20]
 80091a4:	687a      	ldr	r2, [r7, #4]
 80091a6:	7c12      	ldrb	r2, [r2, #16]
 80091a8:	f107 0108 	add.w	r1, r7, #8
 80091ac:	4610      	mov	r0, r2
 80091ae:	4798      	blx	r3
 80091b0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091b2:	e029      	b.n	8009208 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80091b4:	6839      	ldr	r1, [r7, #0]
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 fa42 	bl	8009640 <USBD_CtlError>
        err++;
 80091bc:	7afb      	ldrb	r3, [r7, #11]
 80091be:	3301      	adds	r3, #1
 80091c0:	72fb      	strb	r3, [r7, #11]
      break;
 80091c2:	e021      	b.n	8009208 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ca:	699b      	ldr	r3, [r3, #24]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d00b      	beq.n	80091e8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	7c12      	ldrb	r2, [r2, #16]
 80091dc:	f107 0108 	add.w	r1, r7, #8
 80091e0:	4610      	mov	r0, r2
 80091e2:	4798      	blx	r3
 80091e4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80091e6:	e00f      	b.n	8009208 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80091e8:	6839      	ldr	r1, [r7, #0]
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa28 	bl	8009640 <USBD_CtlError>
        err++;
 80091f0:	7afb      	ldrb	r3, [r7, #11]
 80091f2:	3301      	adds	r3, #1
 80091f4:	72fb      	strb	r3, [r7, #11]
      break;
 80091f6:	e007      	b.n	8009208 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 fa20 	bl	8009640 <USBD_CtlError>
      err++;
 8009200:	7afb      	ldrb	r3, [r7, #11]
 8009202:	3301      	adds	r3, #1
 8009204:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8009206:	bf00      	nop
    }
    break;
 8009208:	e037      	b.n	800927a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	7c1b      	ldrb	r3, [r3, #16]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d109      	bne.n	8009226 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009218:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921a:	f107 0208 	add.w	r2, r7, #8
 800921e:	4610      	mov	r0, r2
 8009220:	4798      	blx	r3
 8009222:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009224:	e029      	b.n	800927a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fa09 	bl	8009640 <USBD_CtlError>
      err++;
 800922e:	7afb      	ldrb	r3, [r7, #11]
 8009230:	3301      	adds	r3, #1
 8009232:	72fb      	strb	r3, [r7, #11]
    break;
 8009234:	e021      	b.n	800927a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	7c1b      	ldrb	r3, [r3, #16]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10d      	bne.n	800925a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009246:	f107 0208 	add.w	r2, r7, #8
 800924a:	4610      	mov	r0, r2
 800924c:	4798      	blx	r3
 800924e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	3301      	adds	r3, #1
 8009254:	2207      	movs	r2, #7
 8009256:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009258:	e00f      	b.n	800927a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800925a:	6839      	ldr	r1, [r7, #0]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f000 f9ef 	bl	8009640 <USBD_CtlError>
      err++;
 8009262:	7afb      	ldrb	r3, [r7, #11]
 8009264:	3301      	adds	r3, #1
 8009266:	72fb      	strb	r3, [r7, #11]
    break;
 8009268:	e007      	b.n	800927a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 f9e7 	bl	8009640 <USBD_CtlError>
    err++;
 8009272:	7afb      	ldrb	r3, [r7, #11]
 8009274:	3301      	adds	r3, #1
 8009276:	72fb      	strb	r3, [r7, #11]
    break;
 8009278:	bf00      	nop
  }

  if (err != 0U)
 800927a:	7afb      	ldrb	r3, [r7, #11]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d11e      	bne.n	80092be <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	88db      	ldrh	r3, [r3, #6]
 8009284:	2b00      	cmp	r3, #0
 8009286:	d016      	beq.n	80092b6 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009288:	893b      	ldrh	r3, [r7, #8]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00e      	beq.n	80092ac <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	88da      	ldrh	r2, [r3, #6]
 8009292:	893b      	ldrh	r3, [r7, #8]
 8009294:	4293      	cmp	r3, r2
 8009296:	bf28      	it	cs
 8009298:	4613      	movcs	r3, r2
 800929a:	b29b      	uxth	r3, r3
 800929c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800929e:	893b      	ldrh	r3, [r7, #8]
 80092a0:	461a      	mov	r2, r3
 80092a2:	68f9      	ldr	r1, [r7, #12]
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 fa3c 	bl	8009722 <USBD_CtlSendData>
 80092aa:	e009      	b.n	80092c0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 f9c6 	bl	8009640 <USBD_CtlError>
 80092b4:	e004      	b.n	80092c0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f000 fa8d 	bl	80097d6 <USBD_CtlSendStatus>
 80092bc:	e000      	b.n	80092c0 <USBD_GetDescriptor+0x2cc>
    return;
 80092be:	bf00      	nop
    }
  }
}
 80092c0:	3710      	adds	r7, #16
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop

080092c8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80092d2:	683b      	ldr	r3, [r7, #0]
 80092d4:	889b      	ldrh	r3, [r3, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d130      	bne.n	800933c <USBD_SetAddress+0x74>
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	88db      	ldrh	r3, [r3, #6]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d12c      	bne.n	800933c <USBD_SetAddress+0x74>
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	885b      	ldrh	r3, [r3, #2]
 80092e6:	2b7f      	cmp	r3, #127	; 0x7f
 80092e8:	d828      	bhi.n	800933c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	885b      	ldrh	r3, [r3, #2]
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092f4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092fc:	2b03      	cmp	r3, #3
 80092fe:	d104      	bne.n	800930a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 f99c 	bl	8009640 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009308:	e01c      	b.n	8009344 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	7bfa      	ldrb	r2, [r7, #15]
 800930e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009312:	7bfb      	ldrb	r3, [r7, #15]
 8009314:	4619      	mov	r1, r3
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fee4 	bl	800a0e4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fa5a 	bl	80097d6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009322:	7bfb      	ldrb	r3, [r7, #15]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d004      	beq.n	8009332 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2202      	movs	r2, #2
 800932c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009330:	e008      	b.n	8009344 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800933a:	e003      	b.n	8009344 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800933c:	6839      	ldr	r1, [r7, #0]
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 f97e 	bl	8009640 <USBD_CtlError>
  }
}
 8009344:	bf00      	nop
 8009346:	3710      	adds	r7, #16
 8009348:	46bd      	mov	sp, r7
 800934a:	bd80      	pop	{r7, pc}

0800934c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b084      	sub	sp, #16
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
 8009354:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009356:	2300      	movs	r3, #0
 8009358:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800935a:	683b      	ldr	r3, [r7, #0]
 800935c:	885b      	ldrh	r3, [r3, #2]
 800935e:	b2da      	uxtb	r2, r3
 8009360:	4b4b      	ldr	r3, [pc, #300]	; (8009490 <USBD_SetConfig+0x144>)
 8009362:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009364:	4b4a      	ldr	r3, [pc, #296]	; (8009490 <USBD_SetConfig+0x144>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d905      	bls.n	8009378 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800936c:	6839      	ldr	r1, [r7, #0]
 800936e:	6878      	ldr	r0, [r7, #4]
 8009370:	f000 f966 	bl	8009640 <USBD_CtlError>
    return USBD_FAIL;
 8009374:	2303      	movs	r3, #3
 8009376:	e087      	b.n	8009488 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800937e:	2b02      	cmp	r3, #2
 8009380:	d002      	beq.n	8009388 <USBD_SetConfig+0x3c>
 8009382:	2b03      	cmp	r3, #3
 8009384:	d025      	beq.n	80093d2 <USBD_SetConfig+0x86>
 8009386:	e071      	b.n	800946c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009388:	4b41      	ldr	r3, [pc, #260]	; (8009490 <USBD_SetConfig+0x144>)
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d01c      	beq.n	80093ca <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009390:	4b3f      	ldr	r3, [pc, #252]	; (8009490 <USBD_SetConfig+0x144>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	461a      	mov	r2, r3
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800939a:	4b3d      	ldr	r3, [pc, #244]	; (8009490 <USBD_SetConfig+0x144>)
 800939c:	781b      	ldrb	r3, [r3, #0]
 800939e:	4619      	mov	r1, r3
 80093a0:	6878      	ldr	r0, [r7, #4]
 80093a2:	f7ff f9a7 	bl	80086f4 <USBD_SetClassConfig>
 80093a6:	4603      	mov	r3, r0
 80093a8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80093aa:	7bfb      	ldrb	r3, [r7, #15]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80093b0:	6839      	ldr	r1, [r7, #0]
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f944 	bl	8009640 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80093b8:	e065      	b.n	8009486 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fa0b 	bl	80097d6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2203      	movs	r2, #3
 80093c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80093c8:	e05d      	b.n	8009486 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fa03 	bl	80097d6 <USBD_CtlSendStatus>
    break;
 80093d0:	e059      	b.n	8009486 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80093d2:	4b2f      	ldr	r3, [pc, #188]	; (8009490 <USBD_SetConfig+0x144>)
 80093d4:	781b      	ldrb	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d112      	bne.n	8009400 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2202      	movs	r2, #2
 80093de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80093e2:	4b2b      	ldr	r3, [pc, #172]	; (8009490 <USBD_SetConfig+0x144>)
 80093e4:	781b      	ldrb	r3, [r3, #0]
 80093e6:	461a      	mov	r2, r3
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80093ec:	4b28      	ldr	r3, [pc, #160]	; (8009490 <USBD_SetConfig+0x144>)
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	4619      	mov	r1, r3
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7ff f99a 	bl	800872c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 f9ec 	bl	80097d6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80093fe:	e042      	b.n	8009486 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009400:	4b23      	ldr	r3, [pc, #140]	; (8009490 <USBD_SetConfig+0x144>)
 8009402:	781b      	ldrb	r3, [r3, #0]
 8009404:	461a      	mov	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	429a      	cmp	r2, r3
 800940c:	d02a      	beq.n	8009464 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	4619      	mov	r1, r3
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff f988 	bl	800872c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800941c:	4b1c      	ldr	r3, [pc, #112]	; (8009490 <USBD_SetConfig+0x144>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	461a      	mov	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009426:	4b1a      	ldr	r3, [pc, #104]	; (8009490 <USBD_SetConfig+0x144>)
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	4619      	mov	r1, r3
 800942c:	6878      	ldr	r0, [r7, #4]
 800942e:	f7ff f961 	bl	80086f4 <USBD_SetClassConfig>
 8009432:	4603      	mov	r3, r0
 8009434:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009436:	7bfb      	ldrb	r3, [r7, #15]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00f      	beq.n	800945c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f8fe 	bl	8009640 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	b2db      	uxtb	r3, r3
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff f96d 	bl	800872c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2202      	movs	r2, #2
 8009456:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800945a:	e014      	b.n	8009486 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 f9ba 	bl	80097d6 <USBD_CtlSendStatus>
    break;
 8009462:	e010      	b.n	8009486 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f9b6 	bl	80097d6 <USBD_CtlSendStatus>
    break;
 800946a:	e00c      	b.n	8009486 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800946c:	6839      	ldr	r1, [r7, #0]
 800946e:	6878      	ldr	r0, [r7, #4]
 8009470:	f000 f8e6 	bl	8009640 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009474:	4b06      	ldr	r3, [pc, #24]	; (8009490 <USBD_SetConfig+0x144>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f7ff f956 	bl	800872c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009480:	2303      	movs	r3, #3
 8009482:	73fb      	strb	r3, [r7, #15]
    break;
 8009484:	bf00      	nop
  }

  return ret;
 8009486:	7bfb      	ldrb	r3, [r7, #15]
}
 8009488:	4618      	mov	r0, r3
 800948a:	3710      	adds	r7, #16
 800948c:	46bd      	mov	sp, r7
 800948e:	bd80      	pop	{r7, pc}
 8009490:	20000234 	.word	0x20000234

08009494 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b082      	sub	sp, #8
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
 800949c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	88db      	ldrh	r3, [r3, #6]
 80094a2:	2b01      	cmp	r3, #1
 80094a4:	d004      	beq.n	80094b0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80094a6:	6839      	ldr	r1, [r7, #0]
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f8c9 	bl	8009640 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80094ae:	e021      	b.n	80094f4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	db17      	blt.n	80094ea <USBD_GetConfig+0x56>
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	dd02      	ble.n	80094c4 <USBD_GetConfig+0x30>
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d00b      	beq.n	80094da <USBD_GetConfig+0x46>
 80094c2:	e012      	b.n	80094ea <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	3308      	adds	r3, #8
 80094ce:	2201      	movs	r2, #1
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f925 	bl	8009722 <USBD_CtlSendData>
      break;
 80094d8:	e00c      	b.n	80094f4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3304      	adds	r3, #4
 80094de:	2201      	movs	r2, #1
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f91d 	bl	8009722 <USBD_CtlSendData>
      break;
 80094e8:	e004      	b.n	80094f4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 f8a7 	bl	8009640 <USBD_CtlError>
      break;
 80094f2:	bf00      	nop
}
 80094f4:	bf00      	nop
 80094f6:	3708      	adds	r7, #8
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}

080094fc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800950c:	3b01      	subs	r3, #1
 800950e:	2b02      	cmp	r3, #2
 8009510:	d81e      	bhi.n	8009550 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8009512:	683b      	ldr	r3, [r7, #0]
 8009514:	88db      	ldrh	r3, [r3, #6]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d004      	beq.n	8009524 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800951a:	6839      	ldr	r1, [r7, #0]
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 f88f 	bl	8009640 <USBD_CtlError>
      break;
 8009522:	e01a      	b.n	800955a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2201      	movs	r2, #1
 8009528:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009530:	2b00      	cmp	r3, #0
 8009532:	d005      	beq.n	8009540 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	68db      	ldr	r3, [r3, #12]
 8009538:	f043 0202 	orr.w	r2, r3, #2
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	330c      	adds	r3, #12
 8009544:	2202      	movs	r2, #2
 8009546:	4619      	mov	r1, r3
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f000 f8ea 	bl	8009722 <USBD_CtlSendData>
    break;
 800954e:	e004      	b.n	800955a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009550:	6839      	ldr	r1, [r7, #0]
 8009552:	6878      	ldr	r0, [r7, #4]
 8009554:	f000 f874 	bl	8009640 <USBD_CtlError>
    break;
 8009558:	bf00      	nop
  }
}
 800955a:	bf00      	nop
 800955c:	3708      	adds	r7, #8
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}

08009562 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009562:	b580      	push	{r7, lr}
 8009564:	b082      	sub	sp, #8
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
 800956a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	885b      	ldrh	r3, [r3, #2]
 8009570:	2b01      	cmp	r3, #1
 8009572:	d106      	bne.n	8009582 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	2201      	movs	r2, #1
 8009578:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800957c:	6878      	ldr	r0, [r7, #4]
 800957e:	f000 f92a 	bl	80097d6 <USBD_CtlSendStatus>
  }
}
 8009582:	bf00      	nop
 8009584:	3708      	adds	r7, #8
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800959a:	3b01      	subs	r3, #1
 800959c:	2b02      	cmp	r3, #2
 800959e:	d80b      	bhi.n	80095b8 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	885b      	ldrh	r3, [r3, #2]
 80095a4:	2b01      	cmp	r3, #1
 80095a6:	d10c      	bne.n	80095c2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f000 f910 	bl	80097d6 <USBD_CtlSendStatus>
      }
      break;
 80095b6:	e004      	b.n	80095c2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80095b8:	6839      	ldr	r1, [r7, #0]
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	f000 f840 	bl	8009640 <USBD_CtlError>
      break;
 80095c0:	e000      	b.n	80095c4 <USBD_ClrFeature+0x3a>
      break;
 80095c2:	bf00      	nop
  }
}
 80095c4:	bf00      	nop
 80095c6:	3708      	adds	r7, #8
 80095c8:	46bd      	mov	sp, r7
 80095ca:	bd80      	pop	{r7, pc}

080095cc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
 80095d4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	3301      	adds	r3, #1
 80095e6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	781a      	ldrb	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	3301      	adds	r3, #1
 80095f4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80095f6:	68f8      	ldr	r0, [r7, #12]
 80095f8:	f7ff fad3 	bl	8008ba2 <SWAPBYTE>
 80095fc:	4603      	mov	r3, r0
 80095fe:	461a      	mov	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	3301      	adds	r3, #1
 8009608:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3301      	adds	r3, #1
 800960e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009610:	68f8      	ldr	r0, [r7, #12]
 8009612:	f7ff fac6 	bl	8008ba2 <SWAPBYTE>
 8009616:	4603      	mov	r3, r0
 8009618:	461a      	mov	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	3301      	adds	r3, #1
 8009622:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	3301      	adds	r3, #1
 8009628:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800962a:	68f8      	ldr	r0, [r7, #12]
 800962c:	f7ff fab9 	bl	8008ba2 <SWAPBYTE>
 8009630:	4603      	mov	r3, r0
 8009632:	461a      	mov	r2, r3
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	80da      	strh	r2, [r3, #6]
}
 8009638:	bf00      	nop
 800963a:	3710      	adds	r7, #16
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b082      	sub	sp, #8
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800964a:	2180      	movs	r1, #128	; 0x80
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 fcdf 	bl	800a010 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009652:	2100      	movs	r1, #0
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fcdb 	bl	800a010 <USBD_LL_StallEP>
}
 800965a:	bf00      	nop
 800965c:	3708      	adds	r7, #8
 800965e:	46bd      	mov	sp, r7
 8009660:	bd80      	pop	{r7, pc}

08009662 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009662:	b580      	push	{r7, lr}
 8009664:	b086      	sub	sp, #24
 8009666:	af00      	add	r7, sp, #0
 8009668:	60f8      	str	r0, [r7, #12]
 800966a:	60b9      	str	r1, [r7, #8]
 800966c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800966e:	2300      	movs	r3, #0
 8009670:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	2b00      	cmp	r3, #0
 8009676:	d036      	beq.n	80096e6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800967c:	6938      	ldr	r0, [r7, #16]
 800967e:	f000 f836 	bl	80096ee <USBD_GetLen>
 8009682:	4603      	mov	r3, r0
 8009684:	3301      	adds	r3, #1
 8009686:	b29b      	uxth	r3, r3
 8009688:	005b      	lsls	r3, r3, #1
 800968a:	b29a      	uxth	r2, r3
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009690:	7dfb      	ldrb	r3, [r7, #23]
 8009692:	68ba      	ldr	r2, [r7, #8]
 8009694:	4413      	add	r3, r2
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	7812      	ldrb	r2, [r2, #0]
 800969a:	701a      	strb	r2, [r3, #0]
  idx++;
 800969c:	7dfb      	ldrb	r3, [r7, #23]
 800969e:	3301      	adds	r3, #1
 80096a0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80096a2:	7dfb      	ldrb	r3, [r7, #23]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	4413      	add	r3, r2
 80096a8:	2203      	movs	r2, #3
 80096aa:	701a      	strb	r2, [r3, #0]
  idx++;
 80096ac:	7dfb      	ldrb	r3, [r7, #23]
 80096ae:	3301      	adds	r3, #1
 80096b0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80096b2:	e013      	b.n	80096dc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80096b4:	7dfb      	ldrb	r3, [r7, #23]
 80096b6:	68ba      	ldr	r2, [r7, #8]
 80096b8:	4413      	add	r3, r2
 80096ba:	693a      	ldr	r2, [r7, #16]
 80096bc:	7812      	ldrb	r2, [r2, #0]
 80096be:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	3301      	adds	r3, #1
 80096c4:	613b      	str	r3, [r7, #16]
    idx++;
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	3301      	adds	r3, #1
 80096ca:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
 80096ce:	68ba      	ldr	r2, [r7, #8]
 80096d0:	4413      	add	r3, r2
 80096d2:	2200      	movs	r2, #0
 80096d4:	701a      	strb	r2, [r3, #0]
    idx++;
 80096d6:	7dfb      	ldrb	r3, [r7, #23]
 80096d8:	3301      	adds	r3, #1
 80096da:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80096dc:	693b      	ldr	r3, [r7, #16]
 80096de:	781b      	ldrb	r3, [r3, #0]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d1e7      	bne.n	80096b4 <USBD_GetString+0x52>
 80096e4:	e000      	b.n	80096e8 <USBD_GetString+0x86>
    return;
 80096e6:	bf00      	nop
  }
}
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}

080096ee <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80096fe:	e005      	b.n	800970c <USBD_GetLen+0x1e>
  {
    len++;
 8009700:	7bfb      	ldrb	r3, [r7, #15]
 8009702:	3301      	adds	r3, #1
 8009704:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009706:	68bb      	ldr	r3, [r7, #8]
 8009708:	3301      	adds	r3, #1
 800970a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	781b      	ldrb	r3, [r3, #0]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d1f5      	bne.n	8009700 <USBD_GetLen+0x12>
  }

  return len;
 8009714:	7bfb      	ldrb	r3, [r7, #15]
}
 8009716:	4618      	mov	r0, r3
 8009718:	3714      	adds	r7, #20
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	2202      	movs	r2, #2
 8009732:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	687a      	ldr	r2, [r7, #4]
 800973a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	687a      	ldr	r2, [r7, #4]
 8009740:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68ba      	ldr	r2, [r7, #8]
 8009746:	2100      	movs	r1, #0
 8009748:	68f8      	ldr	r0, [r7, #12]
 800974a:	f000 fcea 	bl	800a122 <USBD_LL_Transmit>

  return USBD_OK;
 800974e:	2300      	movs	r3, #0
}
 8009750:	4618      	mov	r0, r3
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	60f8      	str	r0, [r7, #12]
 8009760:	60b9      	str	r1, [r7, #8]
 8009762:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	68ba      	ldr	r2, [r7, #8]
 8009768:	2100      	movs	r1, #0
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f000 fcd9 	bl	800a122 <USBD_LL_Transmit>

  return USBD_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	3710      	adds	r7, #16
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}

0800977a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800977a:	b580      	push	{r7, lr}
 800977c:	b084      	sub	sp, #16
 800977e:	af00      	add	r7, sp, #0
 8009780:	60f8      	str	r0, [r7, #12]
 8009782:	60b9      	str	r1, [r7, #8]
 8009784:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2203      	movs	r2, #3
 800978a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	68ba      	ldr	r2, [r7, #8]
 80097a2:	2100      	movs	r1, #0
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f000 fcdd 	bl	800a164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097aa:	2300      	movs	r3, #0
}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3710      	adds	r7, #16
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b084      	sub	sp, #16
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	2100      	movs	r1, #0
 80097c6:	68f8      	ldr	r0, [r7, #12]
 80097c8:	f000 fccc 	bl	800a164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80097cc:	2300      	movs	r3, #0
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80097d6:	b580      	push	{r7, lr}
 80097d8:	b082      	sub	sp, #8
 80097da:	af00      	add	r7, sp, #0
 80097dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	2204      	movs	r2, #4
 80097e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80097e6:	2300      	movs	r3, #0
 80097e8:	2200      	movs	r2, #0
 80097ea:	2100      	movs	r1, #0
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fc98 	bl	800a122 <USBD_LL_Transmit>

  return USBD_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}

080097fc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	b082      	sub	sp, #8
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2205      	movs	r2, #5
 8009808:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800980c:	2300      	movs	r3, #0
 800980e:	2200      	movs	r2, #0
 8009810:	2100      	movs	r1, #0
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f000 fca6 	bl	800a164 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}
	...

08009824 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009824:	b580      	push	{r7, lr}
 8009826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009828:	2200      	movs	r2, #0
 800982a:	4912      	ldr	r1, [pc, #72]	; (8009874 <MX_USB_DEVICE_Init+0x50>)
 800982c:	4812      	ldr	r0, [pc, #72]	; (8009878 <MX_USB_DEVICE_Init+0x54>)
 800982e:	f7fe fef3 	bl	8008618 <USBD_Init>
 8009832:	4603      	mov	r3, r0
 8009834:	2b00      	cmp	r3, #0
 8009836:	d001      	beq.n	800983c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009838:	f7f8 f864 	bl	8001904 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800983c:	490f      	ldr	r1, [pc, #60]	; (800987c <MX_USB_DEVICE_Init+0x58>)
 800983e:	480e      	ldr	r0, [pc, #56]	; (8009878 <MX_USB_DEVICE_Init+0x54>)
 8009840:	f7fe ff20 	bl	8008684 <USBD_RegisterClass>
 8009844:	4603      	mov	r3, r0
 8009846:	2b00      	cmp	r3, #0
 8009848:	d001      	beq.n	800984e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800984a:	f7f8 f85b 	bl	8001904 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800984e:	490c      	ldr	r1, [pc, #48]	; (8009880 <MX_USB_DEVICE_Init+0x5c>)
 8009850:	4809      	ldr	r0, [pc, #36]	; (8009878 <MX_USB_DEVICE_Init+0x54>)
 8009852:	f7fe fe45 	bl	80084e0 <USBD_CDC_RegisterInterface>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d001      	beq.n	8009860 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800985c:	f7f8 f852 	bl	8001904 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009860:	4805      	ldr	r0, [pc, #20]	; (8009878 <MX_USB_DEVICE_Init+0x54>)
 8009862:	f7fe ff30 	bl	80086c6 <USBD_Start>
 8009866:	4603      	mov	r3, r0
 8009868:	2b00      	cmp	r3, #0
 800986a:	d001      	beq.n	8009870 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800986c:	f7f8 f84a 	bl	8001904 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009870:	bf00      	nop
 8009872:	bd80      	pop	{r7, pc}
 8009874:	20000160 	.word	0x20000160
 8009878:	200008f0 	.word	0x200008f0
 800987c:	20000048 	.word	0x20000048
 8009880:	2000014c 	.word	0x2000014c

08009884 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009888:	2200      	movs	r2, #0
 800988a:	4905      	ldr	r1, [pc, #20]	; (80098a0 <CDC_Init_FS+0x1c>)
 800988c:	4805      	ldr	r0, [pc, #20]	; (80098a4 <CDC_Init_FS+0x20>)
 800988e:	f7fe fe3c 	bl	800850a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009892:	4905      	ldr	r1, [pc, #20]	; (80098a8 <CDC_Init_FS+0x24>)
 8009894:	4803      	ldr	r0, [pc, #12]	; (80098a4 <CDC_Init_FS+0x20>)
 8009896:	f7fe fe51 	bl	800853c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800989a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800989c:	4618      	mov	r0, r3
 800989e:	bd80      	pop	{r7, pc}
 80098a0:	200013c0 	.word	0x200013c0
 80098a4:	200008f0 	.word	0x200008f0
 80098a8:	20000bc0 	.word	0x20000bc0

080098ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80098ac:	b480      	push	{r7}
 80098ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80098b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80098bc:	b480      	push	{r7}
 80098be:	b083      	sub	sp, #12
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	4603      	mov	r3, r0
 80098c4:	6039      	str	r1, [r7, #0]
 80098c6:	71fb      	strb	r3, [r7, #7]
 80098c8:	4613      	mov	r3, r2
 80098ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80098cc:	79fb      	ldrb	r3, [r7, #7]
 80098ce:	2b23      	cmp	r3, #35	; 0x23
 80098d0:	d84a      	bhi.n	8009968 <CDC_Control_FS+0xac>
 80098d2:	a201      	add	r2, pc, #4	; (adr r2, 80098d8 <CDC_Control_FS+0x1c>)
 80098d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098d8:	08009969 	.word	0x08009969
 80098dc:	08009969 	.word	0x08009969
 80098e0:	08009969 	.word	0x08009969
 80098e4:	08009969 	.word	0x08009969
 80098e8:	08009969 	.word	0x08009969
 80098ec:	08009969 	.word	0x08009969
 80098f0:	08009969 	.word	0x08009969
 80098f4:	08009969 	.word	0x08009969
 80098f8:	08009969 	.word	0x08009969
 80098fc:	08009969 	.word	0x08009969
 8009900:	08009969 	.word	0x08009969
 8009904:	08009969 	.word	0x08009969
 8009908:	08009969 	.word	0x08009969
 800990c:	08009969 	.word	0x08009969
 8009910:	08009969 	.word	0x08009969
 8009914:	08009969 	.word	0x08009969
 8009918:	08009969 	.word	0x08009969
 800991c:	08009969 	.word	0x08009969
 8009920:	08009969 	.word	0x08009969
 8009924:	08009969 	.word	0x08009969
 8009928:	08009969 	.word	0x08009969
 800992c:	08009969 	.word	0x08009969
 8009930:	08009969 	.word	0x08009969
 8009934:	08009969 	.word	0x08009969
 8009938:	08009969 	.word	0x08009969
 800993c:	08009969 	.word	0x08009969
 8009940:	08009969 	.word	0x08009969
 8009944:	08009969 	.word	0x08009969
 8009948:	08009969 	.word	0x08009969
 800994c:	08009969 	.word	0x08009969
 8009950:	08009969 	.word	0x08009969
 8009954:	08009969 	.word	0x08009969
 8009958:	08009969 	.word	0x08009969
 800995c:	08009969 	.word	0x08009969
 8009960:	08009969 	.word	0x08009969
 8009964:	08009969 	.word	0x08009969
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009968:	bf00      	nop
  }

  return (USBD_OK);
 800996a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800996c:	4618      	mov	r0, r3
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
 8009980:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009982:	6879      	ldr	r1, [r7, #4]
 8009984:	4805      	ldr	r0, [pc, #20]	; (800999c <CDC_Receive_FS+0x24>)
 8009986:	f7fe fdd9 	bl	800853c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800998a:	4804      	ldr	r0, [pc, #16]	; (800999c <CDC_Receive_FS+0x24>)
 800998c:	f7fe fe1a 	bl	80085c4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009990:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009992:	4618      	mov	r0, r3
 8009994:	3708      	adds	r7, #8
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop
 800999c:	200008f0 	.word	0x200008f0

080099a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b084      	sub	sp, #16
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	460b      	mov	r3, r1
 80099aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80099ac:	2300      	movs	r3, #0
 80099ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80099b0:	4b0d      	ldr	r3, [pc, #52]	; (80099e8 <CDC_Transmit_FS+0x48>)
 80099b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d001      	beq.n	80099c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e00b      	b.n	80099de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80099c6:	887b      	ldrh	r3, [r7, #2]
 80099c8:	461a      	mov	r2, r3
 80099ca:	6879      	ldr	r1, [r7, #4]
 80099cc:	4806      	ldr	r0, [pc, #24]	; (80099e8 <CDC_Transmit_FS+0x48>)
 80099ce:	f7fe fd9c 	bl	800850a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80099d2:	4805      	ldr	r0, [pc, #20]	; (80099e8 <CDC_Transmit_FS+0x48>)
 80099d4:	f7fe fdc6 	bl	8008564 <USBD_CDC_TransmitPacket>
 80099d8:	4603      	mov	r3, r0
 80099da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80099dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	200008f0 	.word	0x200008f0

080099ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b087      	sub	sp, #28
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	4613      	mov	r3, r2
 80099f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80099fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	371c      	adds	r7, #28
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
	...

08009a10 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	4603      	mov	r3, r0
 8009a18:	6039      	str	r1, [r7, #0]
 8009a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	2212      	movs	r2, #18
 8009a20:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009a22:	4b03      	ldr	r3, [pc, #12]	; (8009a30 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	370c      	adds	r7, #12
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr
 8009a30:	2000017c 	.word	0x2000017c

08009a34 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	6039      	str	r1, [r7, #0]
 8009a3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	2204      	movs	r2, #4
 8009a44:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009a46:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr
 8009a54:	20000190 	.word	0x20000190

08009a58 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a58:	b580      	push	{r7, lr}
 8009a5a:	b082      	sub	sp, #8
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	4603      	mov	r3, r0
 8009a60:	6039      	str	r1, [r7, #0]
 8009a62:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d105      	bne.n	8009a76 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a6a:	683a      	ldr	r2, [r7, #0]
 8009a6c:	4907      	ldr	r1, [pc, #28]	; (8009a8c <USBD_FS_ProductStrDescriptor+0x34>)
 8009a6e:	4808      	ldr	r0, [pc, #32]	; (8009a90 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a70:	f7ff fdf7 	bl	8009662 <USBD_GetString>
 8009a74:	e004      	b.n	8009a80 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	4904      	ldr	r1, [pc, #16]	; (8009a8c <USBD_FS_ProductStrDescriptor+0x34>)
 8009a7a:	4805      	ldr	r0, [pc, #20]	; (8009a90 <USBD_FS_ProductStrDescriptor+0x38>)
 8009a7c:	f7ff fdf1 	bl	8009662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009a80:	4b02      	ldr	r3, [pc, #8]	; (8009a8c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009a82:	4618      	mov	r0, r3
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}
 8009a8a:	bf00      	nop
 8009a8c:	20001bc0 	.word	0x20001bc0
 8009a90:	0800bb00 	.word	0x0800bb00

08009a94 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b082      	sub	sp, #8
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	6039      	str	r1, [r7, #0]
 8009a9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009aa0:	683a      	ldr	r2, [r7, #0]
 8009aa2:	4904      	ldr	r1, [pc, #16]	; (8009ab4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009aa4:	4804      	ldr	r0, [pc, #16]	; (8009ab8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009aa6:	f7ff fddc 	bl	8009662 <USBD_GetString>
  return USBD_StrDesc;
 8009aaa:	4b02      	ldr	r3, [pc, #8]	; (8009ab4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	3708      	adds	r7, #8
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	bd80      	pop	{r7, pc}
 8009ab4:	20001bc0 	.word	0x20001bc0
 8009ab8:	0800bb18 	.word	0x0800bb18

08009abc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	4603      	mov	r3, r0
 8009ac4:	6039      	str	r1, [r7, #0]
 8009ac6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	221a      	movs	r2, #26
 8009acc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009ace:	f000 f843 	bl	8009b58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009ad2:	4b02      	ldr	r3, [pc, #8]	; (8009adc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3708      	adds	r7, #8
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bd80      	pop	{r7, pc}
 8009adc:	20000194 	.word	0x20000194

08009ae0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	6039      	str	r1, [r7, #0]
 8009aea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009aec:	79fb      	ldrb	r3, [r7, #7]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d105      	bne.n	8009afe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	4907      	ldr	r1, [pc, #28]	; (8009b14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009af6:	4808      	ldr	r0, [pc, #32]	; (8009b18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009af8:	f7ff fdb3 	bl	8009662 <USBD_GetString>
 8009afc:	e004      	b.n	8009b08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009afe:	683a      	ldr	r2, [r7, #0]
 8009b00:	4904      	ldr	r1, [pc, #16]	; (8009b14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009b02:	4805      	ldr	r0, [pc, #20]	; (8009b18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009b04:	f7ff fdad 	bl	8009662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b08:	4b02      	ldr	r3, [pc, #8]	; (8009b14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009b0a:	4618      	mov	r0, r3
 8009b0c:	3708      	adds	r7, #8
 8009b0e:	46bd      	mov	sp, r7
 8009b10:	bd80      	pop	{r7, pc}
 8009b12:	bf00      	nop
 8009b14:	20001bc0 	.word	0x20001bc0
 8009b18:	0800bb2c 	.word	0x0800bb2c

08009b1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b082      	sub	sp, #8
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	4603      	mov	r3, r0
 8009b24:	6039      	str	r1, [r7, #0]
 8009b26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b28:	79fb      	ldrb	r3, [r7, #7]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d105      	bne.n	8009b3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b2e:	683a      	ldr	r2, [r7, #0]
 8009b30:	4907      	ldr	r1, [pc, #28]	; (8009b50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b32:	4808      	ldr	r0, [pc, #32]	; (8009b54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b34:	f7ff fd95 	bl	8009662 <USBD_GetString>
 8009b38:	e004      	b.n	8009b44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009b3a:	683a      	ldr	r2, [r7, #0]
 8009b3c:	4904      	ldr	r1, [pc, #16]	; (8009b50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009b3e:	4805      	ldr	r0, [pc, #20]	; (8009b54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009b40:	f7ff fd8f 	bl	8009662 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b44:	4b02      	ldr	r3, [pc, #8]	; (8009b50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20001bc0 	.word	0x20001bc0
 8009b54:	0800bb38 	.word	0x0800bb38

08009b58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b084      	sub	sp, #16
 8009b5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009b5e:	4b0f      	ldr	r3, [pc, #60]	; (8009b9c <Get_SerialNum+0x44>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009b64:	4b0e      	ldr	r3, [pc, #56]	; (8009ba0 <Get_SerialNum+0x48>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009b6a:	4b0e      	ldr	r3, [pc, #56]	; (8009ba4 <Get_SerialNum+0x4c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009b70:	68fa      	ldr	r2, [r7, #12]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	4413      	add	r3, r2
 8009b76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d009      	beq.n	8009b92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009b7e:	2208      	movs	r2, #8
 8009b80:	4909      	ldr	r1, [pc, #36]	; (8009ba8 <Get_SerialNum+0x50>)
 8009b82:	68f8      	ldr	r0, [r7, #12]
 8009b84:	f000 f814 	bl	8009bb0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009b88:	2204      	movs	r2, #4
 8009b8a:	4908      	ldr	r1, [pc, #32]	; (8009bac <Get_SerialNum+0x54>)
 8009b8c:	68b8      	ldr	r0, [r7, #8]
 8009b8e:	f000 f80f 	bl	8009bb0 <IntToUnicode>
  }
}
 8009b92:	bf00      	nop
 8009b94:	3710      	adds	r7, #16
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}
 8009b9a:	bf00      	nop
 8009b9c:	1fff7a10 	.word	0x1fff7a10
 8009ba0:	1fff7a14 	.word	0x1fff7a14
 8009ba4:	1fff7a18 	.word	0x1fff7a18
 8009ba8:	20000196 	.word	0x20000196
 8009bac:	200001a6 	.word	0x200001a6

08009bb0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b087      	sub	sp, #28
 8009bb4:	af00      	add	r7, sp, #0
 8009bb6:	60f8      	str	r0, [r7, #12]
 8009bb8:	60b9      	str	r1, [r7, #8]
 8009bba:	4613      	mov	r3, r2
 8009bbc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	75fb      	strb	r3, [r7, #23]
 8009bc6:	e027      	b.n	8009c18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	0f1b      	lsrs	r3, r3, #28
 8009bcc:	2b09      	cmp	r3, #9
 8009bce:	d80b      	bhi.n	8009be8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	0f1b      	lsrs	r3, r3, #28
 8009bd4:	b2da      	uxtb	r2, r3
 8009bd6:	7dfb      	ldrb	r3, [r7, #23]
 8009bd8:	005b      	lsls	r3, r3, #1
 8009bda:	4619      	mov	r1, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	440b      	add	r3, r1
 8009be0:	3230      	adds	r2, #48	; 0x30
 8009be2:	b2d2      	uxtb	r2, r2
 8009be4:	701a      	strb	r2, [r3, #0]
 8009be6:	e00a      	b.n	8009bfe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	0f1b      	lsrs	r3, r3, #28
 8009bec:	b2da      	uxtb	r2, r3
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
 8009bf0:	005b      	lsls	r3, r3, #1
 8009bf2:	4619      	mov	r1, r3
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	440b      	add	r3, r1
 8009bf8:	3237      	adds	r2, #55	; 0x37
 8009bfa:	b2d2      	uxtb	r2, r2
 8009bfc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	011b      	lsls	r3, r3, #4
 8009c02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009c04:	7dfb      	ldrb	r3, [r7, #23]
 8009c06:	005b      	lsls	r3, r3, #1
 8009c08:	3301      	adds	r3, #1
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	2200      	movs	r2, #0
 8009c10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009c12:	7dfb      	ldrb	r3, [r7, #23]
 8009c14:	3301      	adds	r3, #1
 8009c16:	75fb      	strb	r3, [r7, #23]
 8009c18:	7dfa      	ldrb	r2, [r7, #23]
 8009c1a:	79fb      	ldrb	r3, [r7, #7]
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	d3d3      	bcc.n	8009bc8 <IntToUnicode+0x18>
  }
}
 8009c20:	bf00      	nop
 8009c22:	371c      	adds	r7, #28
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b08a      	sub	sp, #40	; 0x28
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009c34:	f107 0314 	add.w	r3, r7, #20
 8009c38:	2200      	movs	r2, #0
 8009c3a:	601a      	str	r2, [r3, #0]
 8009c3c:	605a      	str	r2, [r3, #4]
 8009c3e:	609a      	str	r2, [r3, #8]
 8009c40:	60da      	str	r2, [r3, #12]
 8009c42:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009c4c:	d13a      	bne.n	8009cc4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009c4e:	2300      	movs	r3, #0
 8009c50:	613b      	str	r3, [r7, #16]
 8009c52:	4b1e      	ldr	r3, [pc, #120]	; (8009ccc <HAL_PCD_MspInit+0xa0>)
 8009c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c56:	4a1d      	ldr	r2, [pc, #116]	; (8009ccc <HAL_PCD_MspInit+0xa0>)
 8009c58:	f043 0301 	orr.w	r3, r3, #1
 8009c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8009c5e:	4b1b      	ldr	r3, [pc, #108]	; (8009ccc <HAL_PCD_MspInit+0xa0>)
 8009c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c62:	f003 0301 	and.w	r3, r3, #1
 8009c66:	613b      	str	r3, [r7, #16]
 8009c68:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009c6a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009c6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009c70:	2302      	movs	r3, #2
 8009c72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009c74:	2300      	movs	r3, #0
 8009c76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009c78:	2303      	movs	r3, #3
 8009c7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009c7c:	230a      	movs	r3, #10
 8009c7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009c80:	f107 0314 	add.w	r3, r7, #20
 8009c84:	4619      	mov	r1, r3
 8009c86:	4812      	ldr	r0, [pc, #72]	; (8009cd0 <HAL_PCD_MspInit+0xa4>)
 8009c88:	f7f9 face 	bl	8003228 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009c8c:	4b0f      	ldr	r3, [pc, #60]	; (8009ccc <HAL_PCD_MspInit+0xa0>)
 8009c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009c90:	4a0e      	ldr	r2, [pc, #56]	; (8009ccc <HAL_PCD_MspInit+0xa0>)
 8009c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c96:	6353      	str	r3, [r2, #52]	; 0x34
 8009c98:	2300      	movs	r3, #0
 8009c9a:	60fb      	str	r3, [r7, #12]
 8009c9c:	4b0b      	ldr	r3, [pc, #44]	; (8009ccc <HAL_PCD_MspInit+0xa0>)
 8009c9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca0:	4a0a      	ldr	r2, [pc, #40]	; (8009ccc <HAL_PCD_MspInit+0xa0>)
 8009ca2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009ca6:	6453      	str	r3, [r2, #68]	; 0x44
 8009ca8:	4b08      	ldr	r3, [pc, #32]	; (8009ccc <HAL_PCD_MspInit+0xa0>)
 8009caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cb0:	60fb      	str	r3, [r7, #12]
 8009cb2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	2043      	movs	r0, #67	; 0x43
 8009cba:	f7f8 fd28 	bl	800270e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009cbe:	2043      	movs	r0, #67	; 0x43
 8009cc0:	f7f8 fd41 	bl	8002746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009cc4:	bf00      	nop
 8009cc6:	3728      	adds	r7, #40	; 0x28
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}
 8009ccc:	40023800 	.word	0x40023800
 8009cd0:	40020000 	.word	0x40020000

08009cd4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ce8:	4619      	mov	r1, r3
 8009cea:	4610      	mov	r0, r2
 8009cec:	f7fe fd36 	bl	800875c <USBD_LL_SetupStage>
}
 8009cf0:	bf00      	nop
 8009cf2:	3708      	adds	r7, #8
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b082      	sub	sp, #8
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	460b      	mov	r3, r1
 8009d02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009d0a:	78fa      	ldrb	r2, [r7, #3]
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	00db      	lsls	r3, r3, #3
 8009d12:	1a9b      	subs	r3, r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009d1c:	681a      	ldr	r2, [r3, #0]
 8009d1e:	78fb      	ldrb	r3, [r7, #3]
 8009d20:	4619      	mov	r1, r3
 8009d22:	f7fe fd6e 	bl	8008802 <USBD_LL_DataOutStage>
}
 8009d26:	bf00      	nop
 8009d28:	3708      	adds	r7, #8
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}

08009d2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d2e:	b580      	push	{r7, lr}
 8009d30:	b082      	sub	sp, #8
 8009d32:	af00      	add	r7, sp, #0
 8009d34:	6078      	str	r0, [r7, #4]
 8009d36:	460b      	mov	r3, r1
 8009d38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009d40:	78fa      	ldrb	r2, [r7, #3]
 8009d42:	6879      	ldr	r1, [r7, #4]
 8009d44:	4613      	mov	r3, r2
 8009d46:	00db      	lsls	r3, r3, #3
 8009d48:	1a9b      	subs	r3, r3, r2
 8009d4a:	009b      	lsls	r3, r3, #2
 8009d4c:	440b      	add	r3, r1
 8009d4e:	3348      	adds	r3, #72	; 0x48
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	78fb      	ldrb	r3, [r7, #3]
 8009d54:	4619      	mov	r1, r3
 8009d56:	f7fe fdb7 	bl	80088c8 <USBD_LL_DataInStage>
}
 8009d5a:	bf00      	nop
 8009d5c:	3708      	adds	r7, #8
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe febb 	bl	8008aec <USBD_LL_SOF>
}
 8009d76:	bf00      	nop
 8009d78:	3708      	adds	r7, #8
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}

08009d7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b084      	sub	sp, #16
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009d86:	2301      	movs	r3, #1
 8009d88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	68db      	ldr	r3, [r3, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d102      	bne.n	8009d98 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009d92:	2300      	movs	r3, #0
 8009d94:	73fb      	strb	r3, [r7, #15]
 8009d96:	e008      	b.n	8009daa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	2b02      	cmp	r3, #2
 8009d9e:	d102      	bne.n	8009da6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009da0:	2301      	movs	r3, #1
 8009da2:	73fb      	strb	r3, [r7, #15]
 8009da4:	e001      	b.n	8009daa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009da6:	f7f7 fdad 	bl	8001904 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009db0:	7bfa      	ldrb	r2, [r7, #15]
 8009db2:	4611      	mov	r1, r2
 8009db4:	4618      	mov	r0, r3
 8009db6:	f7fe fe5e 	bl	8008a76 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f7fe fe17 	bl	80089f4 <USBD_LL_Reset>
}
 8009dc6:	bf00      	nop
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
	...

08009dd0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009dde:	4618      	mov	r0, r3
 8009de0:	f7fe fe59 	bl	8008a96 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	6812      	ldr	r2, [r2, #0]
 8009df2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009df6:	f043 0301 	orr.w	r3, r3, #1
 8009dfa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a1b      	ldr	r3, [r3, #32]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d005      	beq.n	8009e10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e04:	4b04      	ldr	r3, [pc, #16]	; (8009e18 <HAL_PCD_SuspendCallback+0x48>)
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	4a03      	ldr	r2, [pc, #12]	; (8009e18 <HAL_PCD_SuspendCallback+0x48>)
 8009e0a:	f043 0306 	orr.w	r3, r3, #6
 8009e0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009e10:	bf00      	nop
 8009e12:	3708      	adds	r7, #8
 8009e14:	46bd      	mov	sp, r7
 8009e16:	bd80      	pop	{r7, pc}
 8009e18:	e000ed00 	.word	0xe000ed00

08009e1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	b082      	sub	sp, #8
 8009e20:	af00      	add	r7, sp, #0
 8009e22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fe fe48 	bl	8008ac0 <USBD_LL_Resume>
}
 8009e30:	bf00      	nop
 8009e32:	3708      	adds	r7, #8
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	460b      	mov	r3, r1
 8009e42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e4a:	78fa      	ldrb	r2, [r7, #3]
 8009e4c:	4611      	mov	r1, r2
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f7fe fe73 	bl	8008b3a <USBD_LL_IsoOUTIncomplete>
}
 8009e54:	bf00      	nop
 8009e56:	3708      	adds	r7, #8
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}

08009e5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e5c:	b580      	push	{r7, lr}
 8009e5e:	b082      	sub	sp, #8
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	460b      	mov	r3, r1
 8009e66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e6e:	78fa      	ldrb	r2, [r7, #3]
 8009e70:	4611      	mov	r1, r2
 8009e72:	4618      	mov	r0, r3
 8009e74:	f7fe fe54 	bl	8008b20 <USBD_LL_IsoINIncomplete>
}
 8009e78:	bf00      	nop
 8009e7a:	3708      	adds	r7, #8
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f7fe fe60 	bl	8008b54 <USBD_LL_DevConnected>
}
 8009e94:	bf00      	nop
 8009e96:	3708      	adds	r7, #8
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b082      	sub	sp, #8
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009eaa:	4618      	mov	r0, r3
 8009eac:	f7fe fe5d 	bl	8008b6a <USBD_LL_DevDisconnected>
}
 8009eb0:	bf00      	nop
 8009eb2:	3708      	adds	r7, #8
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bd80      	pop	{r7, pc}

08009eb8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b082      	sub	sp, #8
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d13c      	bne.n	8009f42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009ec8:	4a20      	ldr	r2, [pc, #128]	; (8009f4c <USBD_LL_Init+0x94>)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a1e      	ldr	r2, [pc, #120]	; (8009f4c <USBD_LL_Init+0x94>)
 8009ed4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009ed8:	4b1c      	ldr	r3, [pc, #112]	; (8009f4c <USBD_LL_Init+0x94>)
 8009eda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009ede:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009ee0:	4b1a      	ldr	r3, [pc, #104]	; (8009f4c <USBD_LL_Init+0x94>)
 8009ee2:	2204      	movs	r2, #4
 8009ee4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009ee6:	4b19      	ldr	r3, [pc, #100]	; (8009f4c <USBD_LL_Init+0x94>)
 8009ee8:	2202      	movs	r2, #2
 8009eea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009eec:	4b17      	ldr	r3, [pc, #92]	; (8009f4c <USBD_LL_Init+0x94>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009ef2:	4b16      	ldr	r3, [pc, #88]	; (8009f4c <USBD_LL_Init+0x94>)
 8009ef4:	2202      	movs	r2, #2
 8009ef6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009ef8:	4b14      	ldr	r3, [pc, #80]	; (8009f4c <USBD_LL_Init+0x94>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009efe:	4b13      	ldr	r3, [pc, #76]	; (8009f4c <USBD_LL_Init+0x94>)
 8009f00:	2200      	movs	r2, #0
 8009f02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009f04:	4b11      	ldr	r3, [pc, #68]	; (8009f4c <USBD_LL_Init+0x94>)
 8009f06:	2200      	movs	r2, #0
 8009f08:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009f0a:	4b10      	ldr	r3, [pc, #64]	; (8009f4c <USBD_LL_Init+0x94>)
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009f10:	4b0e      	ldr	r3, [pc, #56]	; (8009f4c <USBD_LL_Init+0x94>)
 8009f12:	2200      	movs	r2, #0
 8009f14:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009f16:	480d      	ldr	r0, [pc, #52]	; (8009f4c <USBD_LL_Init+0x94>)
 8009f18:	f7f9 fce3 	bl	80038e2 <HAL_PCD_Init>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009f22:	f7f7 fcef 	bl	8001904 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009f26:	2180      	movs	r1, #128	; 0x80
 8009f28:	4808      	ldr	r0, [pc, #32]	; (8009f4c <USBD_LL_Init+0x94>)
 8009f2a:	f7fa fe40 	bl	8004bae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009f2e:	2240      	movs	r2, #64	; 0x40
 8009f30:	2100      	movs	r1, #0
 8009f32:	4806      	ldr	r0, [pc, #24]	; (8009f4c <USBD_LL_Init+0x94>)
 8009f34:	f7fa fdf4 	bl	8004b20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009f38:	2280      	movs	r2, #128	; 0x80
 8009f3a:	2101      	movs	r1, #1
 8009f3c:	4803      	ldr	r0, [pc, #12]	; (8009f4c <USBD_LL_Init+0x94>)
 8009f3e:	f7fa fdef 	bl	8004b20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}
 8009f4c:	20001dc0 	.word	0x20001dc0

08009f50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f5c:	2300      	movs	r3, #0
 8009f5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7f9 fdd8 	bl	8003b1c <HAL_PCD_Start>
 8009f6c:	4603      	mov	r3, r0
 8009f6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f70:	7bfb      	ldrb	r3, [r7, #15]
 8009f72:	4618      	mov	r0, r3
 8009f74:	f000 f92a 	bl	800a1cc <USBD_Get_USB_Status>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	3710      	adds	r7, #16
 8009f82:	46bd      	mov	sp, r7
 8009f84:	bd80      	pop	{r7, pc}

08009f86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009f86:	b580      	push	{r7, lr}
 8009f88:	b084      	sub	sp, #16
 8009f8a:	af00      	add	r7, sp, #0
 8009f8c:	6078      	str	r0, [r7, #4]
 8009f8e:	4608      	mov	r0, r1
 8009f90:	4611      	mov	r1, r2
 8009f92:	461a      	mov	r2, r3
 8009f94:	4603      	mov	r3, r0
 8009f96:	70fb      	strb	r3, [r7, #3]
 8009f98:	460b      	mov	r3, r1
 8009f9a:	70bb      	strb	r3, [r7, #2]
 8009f9c:	4613      	mov	r3, r2
 8009f9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fa0:	2300      	movs	r3, #0
 8009fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fae:	78bb      	ldrb	r3, [r7, #2]
 8009fb0:	883a      	ldrh	r2, [r7, #0]
 8009fb2:	78f9      	ldrb	r1, [r7, #3]
 8009fb4:	f7fa f9bc 	bl	8004330 <HAL_PCD_EP_Open>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fbc:	7bfb      	ldrb	r3, [r7, #15]
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f000 f904 	bl	800a1cc <USBD_Get_USB_Status>
 8009fc4:	4603      	mov	r3, r0
 8009fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3710      	adds	r7, #16
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009fd2:	b580      	push	{r7, lr}
 8009fd4:	b084      	sub	sp, #16
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
 8009fda:	460b      	mov	r3, r1
 8009fdc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009fec:	78fa      	ldrb	r2, [r7, #3]
 8009fee:	4611      	mov	r1, r2
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7fa fa05 	bl	8004400 <HAL_PCD_EP_Close>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	f000 f8e5 	bl	800a1cc <USBD_Get_USB_Status>
 800a002:	4603      	mov	r3, r0
 800a004:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a006:	7bbb      	ldrb	r3, [r7, #14]
}
 800a008:	4618      	mov	r0, r3
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	460b      	mov	r3, r1
 800a01a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a01c:	2300      	movs	r3, #0
 800a01e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a020:	2300      	movs	r3, #0
 800a022:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a02a:	78fa      	ldrb	r2, [r7, #3]
 800a02c:	4611      	mov	r1, r2
 800a02e:	4618      	mov	r0, r3
 800a030:	f7fa fadd 	bl	80045ee <HAL_PCD_EP_SetStall>
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 f8c6 	bl	800a1cc <USBD_Get_USB_Status>
 800a040:	4603      	mov	r3, r0
 800a042:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a044:	7bbb      	ldrb	r3, [r7, #14]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3710      	adds	r7, #16
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}

0800a04e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a04e:	b580      	push	{r7, lr}
 800a050:	b084      	sub	sp, #16
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a05a:	2300      	movs	r3, #0
 800a05c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a05e:	2300      	movs	r3, #0
 800a060:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a068:	78fa      	ldrb	r2, [r7, #3]
 800a06a:	4611      	mov	r1, r2
 800a06c:	4618      	mov	r0, r3
 800a06e:	f7fa fb22 	bl	80046b6 <HAL_PCD_EP_ClrStall>
 800a072:	4603      	mov	r3, r0
 800a074:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a076:	7bfb      	ldrb	r3, [r7, #15]
 800a078:	4618      	mov	r0, r3
 800a07a:	f000 f8a7 	bl	800a1cc <USBD_Get_USB_Status>
 800a07e:	4603      	mov	r3, r0
 800a080:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a082:	7bbb      	ldrb	r3, [r7, #14]
}
 800a084:	4618      	mov	r0, r3
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	460b      	mov	r3, r1
 800a096:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a09e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	da0b      	bge.n	800a0c0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0a8:	78fb      	ldrb	r3, [r7, #3]
 800a0aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0ae:	68f9      	ldr	r1, [r7, #12]
 800a0b0:	4613      	mov	r3, r2
 800a0b2:	00db      	lsls	r3, r3, #3
 800a0b4:	1a9b      	subs	r3, r3, r2
 800a0b6:	009b      	lsls	r3, r3, #2
 800a0b8:	440b      	add	r3, r1
 800a0ba:	333e      	adds	r3, #62	; 0x3e
 800a0bc:	781b      	ldrb	r3, [r3, #0]
 800a0be:	e00b      	b.n	800a0d8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0c0:	78fb      	ldrb	r3, [r7, #3]
 800a0c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0c6:	68f9      	ldr	r1, [r7, #12]
 800a0c8:	4613      	mov	r3, r2
 800a0ca:	00db      	lsls	r3, r3, #3
 800a0cc:	1a9b      	subs	r3, r3, r2
 800a0ce:	009b      	lsls	r3, r3, #2
 800a0d0:	440b      	add	r3, r1
 800a0d2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3714      	adds	r7, #20
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e2:	4770      	bx	lr

0800a0e4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
 800a0ec:	460b      	mov	r3, r1
 800a0ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0fe:	78fa      	ldrb	r2, [r7, #3]
 800a100:	4611      	mov	r1, r2
 800a102:	4618      	mov	r0, r3
 800a104:	f7fa f8ef 	bl	80042e6 <HAL_PCD_SetAddress>
 800a108:	4603      	mov	r3, r0
 800a10a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a10c:	7bfb      	ldrb	r3, [r7, #15]
 800a10e:	4618      	mov	r0, r3
 800a110:	f000 f85c 	bl	800a1cc <USBD_Get_USB_Status>
 800a114:	4603      	mov	r3, r0
 800a116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a118:	7bbb      	ldrb	r3, [r7, #14]
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3710      	adds	r7, #16
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}

0800a122 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a122:	b580      	push	{r7, lr}
 800a124:	b086      	sub	sp, #24
 800a126:	af00      	add	r7, sp, #0
 800a128:	60f8      	str	r0, [r7, #12]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
 800a12e:	460b      	mov	r3, r1
 800a130:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a132:	2300      	movs	r3, #0
 800a134:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a136:	2300      	movs	r3, #0
 800a138:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a140:	7af9      	ldrb	r1, [r7, #11]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	687a      	ldr	r2, [r7, #4]
 800a146:	f7fa fa08 	bl	800455a <HAL_PCD_EP_Transmit>
 800a14a:	4603      	mov	r3, r0
 800a14c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 f83b 	bl	800a1cc <USBD_Get_USB_Status>
 800a156:	4603      	mov	r3, r0
 800a158:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a15a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3718      	adds	r7, #24
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b086      	sub	sp, #24
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	607a      	str	r2, [r7, #4]
 800a16e:	603b      	str	r3, [r7, #0]
 800a170:	460b      	mov	r3, r1
 800a172:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a178:	2300      	movs	r3, #0
 800a17a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a182:	7af9      	ldrb	r1, [r7, #11]
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	f7fa f984 	bl	8004494 <HAL_PCD_EP_Receive>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a190:	7dfb      	ldrb	r3, [r7, #23]
 800a192:	4618      	mov	r0, r3
 800a194:	f000 f81a 	bl	800a1cc <USBD_Get_USB_Status>
 800a198:	4603      	mov	r3, r0
 800a19a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a19c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3718      	adds	r7, #24
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}

0800a1a6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a6:	b580      	push	{r7, lr}
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	af00      	add	r7, sp, #0
 800a1ac:	6078      	str	r0, [r7, #4]
 800a1ae:	460b      	mov	r3, r1
 800a1b0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1b8:	78fa      	ldrb	r2, [r7, #3]
 800a1ba:	4611      	mov	r1, r2
 800a1bc:	4618      	mov	r0, r3
 800a1be:	f7fa f9b4 	bl	800452a <HAL_PCD_EP_GetRxCount>
 800a1c2:	4603      	mov	r3, r0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}

0800a1cc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b085      	sub	sp, #20
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a1da:	79fb      	ldrb	r3, [r7, #7]
 800a1dc:	2b03      	cmp	r3, #3
 800a1de:	d817      	bhi.n	800a210 <USBD_Get_USB_Status+0x44>
 800a1e0:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <USBD_Get_USB_Status+0x1c>)
 800a1e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e6:	bf00      	nop
 800a1e8:	0800a1f9 	.word	0x0800a1f9
 800a1ec:	0800a1ff 	.word	0x0800a1ff
 800a1f0:	0800a205 	.word	0x0800a205
 800a1f4:	0800a20b 	.word	0x0800a20b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a1fc:	e00b      	b.n	800a216 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a1fe:	2303      	movs	r3, #3
 800a200:	73fb      	strb	r3, [r7, #15]
    break;
 800a202:	e008      	b.n	800a216 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a204:	2301      	movs	r3, #1
 800a206:	73fb      	strb	r3, [r7, #15]
    break;
 800a208:	e005      	b.n	800a216 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a20a:	2303      	movs	r3, #3
 800a20c:	73fb      	strb	r3, [r7, #15]
    break;
 800a20e:	e002      	b.n	800a216 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a210:	2303      	movs	r3, #3
 800a212:	73fb      	strb	r3, [r7, #15]
    break;
 800a214:	bf00      	nop
  }
  return usb_status;
 800a216:	7bfb      	ldrb	r3, [r7, #15]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <__errno>:
 800a224:	4b01      	ldr	r3, [pc, #4]	; (800a22c <__errno+0x8>)
 800a226:	6818      	ldr	r0, [r3, #0]
 800a228:	4770      	bx	lr
 800a22a:	bf00      	nop
 800a22c:	200001b0 	.word	0x200001b0

0800a230 <__libc_init_array>:
 800a230:	b570      	push	{r4, r5, r6, lr}
 800a232:	4e0d      	ldr	r6, [pc, #52]	; (800a268 <__libc_init_array+0x38>)
 800a234:	4c0d      	ldr	r4, [pc, #52]	; (800a26c <__libc_init_array+0x3c>)
 800a236:	1ba4      	subs	r4, r4, r6
 800a238:	10a4      	asrs	r4, r4, #2
 800a23a:	2500      	movs	r5, #0
 800a23c:	42a5      	cmp	r5, r4
 800a23e:	d109      	bne.n	800a254 <__libc_init_array+0x24>
 800a240:	4e0b      	ldr	r6, [pc, #44]	; (800a270 <__libc_init_array+0x40>)
 800a242:	4c0c      	ldr	r4, [pc, #48]	; (800a274 <__libc_init_array+0x44>)
 800a244:	f001 fc4a 	bl	800badc <_init>
 800a248:	1ba4      	subs	r4, r4, r6
 800a24a:	10a4      	asrs	r4, r4, #2
 800a24c:	2500      	movs	r5, #0
 800a24e:	42a5      	cmp	r5, r4
 800a250:	d105      	bne.n	800a25e <__libc_init_array+0x2e>
 800a252:	bd70      	pop	{r4, r5, r6, pc}
 800a254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a258:	4798      	blx	r3
 800a25a:	3501      	adds	r5, #1
 800a25c:	e7ee      	b.n	800a23c <__libc_init_array+0xc>
 800a25e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a262:	4798      	blx	r3
 800a264:	3501      	adds	r5, #1
 800a266:	e7f2      	b.n	800a24e <__libc_init_array+0x1e>
 800a268:	0800bd80 	.word	0x0800bd80
 800a26c:	0800bd80 	.word	0x0800bd80
 800a270:	0800bd80 	.word	0x0800bd80
 800a274:	0800bd84 	.word	0x0800bd84

0800a278 <malloc>:
 800a278:	4b02      	ldr	r3, [pc, #8]	; (800a284 <malloc+0xc>)
 800a27a:	4601      	mov	r1, r0
 800a27c:	6818      	ldr	r0, [r3, #0]
 800a27e:	f000 b861 	b.w	800a344 <_malloc_r>
 800a282:	bf00      	nop
 800a284:	200001b0 	.word	0x200001b0

0800a288 <free>:
 800a288:	4b02      	ldr	r3, [pc, #8]	; (800a294 <free+0xc>)
 800a28a:	4601      	mov	r1, r0
 800a28c:	6818      	ldr	r0, [r3, #0]
 800a28e:	f000 b80b 	b.w	800a2a8 <_free_r>
 800a292:	bf00      	nop
 800a294:	200001b0 	.word	0x200001b0

0800a298 <memset>:
 800a298:	4402      	add	r2, r0
 800a29a:	4603      	mov	r3, r0
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d100      	bne.n	800a2a2 <memset+0xa>
 800a2a0:	4770      	bx	lr
 800a2a2:	f803 1b01 	strb.w	r1, [r3], #1
 800a2a6:	e7f9      	b.n	800a29c <memset+0x4>

0800a2a8 <_free_r>:
 800a2a8:	b538      	push	{r3, r4, r5, lr}
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	2900      	cmp	r1, #0
 800a2ae:	d045      	beq.n	800a33c <_free_r+0x94>
 800a2b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2b4:	1f0c      	subs	r4, r1, #4
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	bfb8      	it	lt
 800a2ba:	18e4      	addlt	r4, r4, r3
 800a2bc:	f000 f8cc 	bl	800a458 <__malloc_lock>
 800a2c0:	4a1f      	ldr	r2, [pc, #124]	; (800a340 <_free_r+0x98>)
 800a2c2:	6813      	ldr	r3, [r2, #0]
 800a2c4:	4610      	mov	r0, r2
 800a2c6:	b933      	cbnz	r3, 800a2d6 <_free_r+0x2e>
 800a2c8:	6063      	str	r3, [r4, #4]
 800a2ca:	6014      	str	r4, [r2, #0]
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2d2:	f000 b8c2 	b.w	800a45a <__malloc_unlock>
 800a2d6:	42a3      	cmp	r3, r4
 800a2d8:	d90c      	bls.n	800a2f4 <_free_r+0x4c>
 800a2da:	6821      	ldr	r1, [r4, #0]
 800a2dc:	1862      	adds	r2, r4, r1
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	bf04      	itt	eq
 800a2e2:	681a      	ldreq	r2, [r3, #0]
 800a2e4:	685b      	ldreq	r3, [r3, #4]
 800a2e6:	6063      	str	r3, [r4, #4]
 800a2e8:	bf04      	itt	eq
 800a2ea:	1852      	addeq	r2, r2, r1
 800a2ec:	6022      	streq	r2, [r4, #0]
 800a2ee:	6004      	str	r4, [r0, #0]
 800a2f0:	e7ec      	b.n	800a2cc <_free_r+0x24>
 800a2f2:	4613      	mov	r3, r2
 800a2f4:	685a      	ldr	r2, [r3, #4]
 800a2f6:	b10a      	cbz	r2, 800a2fc <_free_r+0x54>
 800a2f8:	42a2      	cmp	r2, r4
 800a2fa:	d9fa      	bls.n	800a2f2 <_free_r+0x4a>
 800a2fc:	6819      	ldr	r1, [r3, #0]
 800a2fe:	1858      	adds	r0, r3, r1
 800a300:	42a0      	cmp	r0, r4
 800a302:	d10b      	bne.n	800a31c <_free_r+0x74>
 800a304:	6820      	ldr	r0, [r4, #0]
 800a306:	4401      	add	r1, r0
 800a308:	1858      	adds	r0, r3, r1
 800a30a:	4282      	cmp	r2, r0
 800a30c:	6019      	str	r1, [r3, #0]
 800a30e:	d1dd      	bne.n	800a2cc <_free_r+0x24>
 800a310:	6810      	ldr	r0, [r2, #0]
 800a312:	6852      	ldr	r2, [r2, #4]
 800a314:	605a      	str	r2, [r3, #4]
 800a316:	4401      	add	r1, r0
 800a318:	6019      	str	r1, [r3, #0]
 800a31a:	e7d7      	b.n	800a2cc <_free_r+0x24>
 800a31c:	d902      	bls.n	800a324 <_free_r+0x7c>
 800a31e:	230c      	movs	r3, #12
 800a320:	602b      	str	r3, [r5, #0]
 800a322:	e7d3      	b.n	800a2cc <_free_r+0x24>
 800a324:	6820      	ldr	r0, [r4, #0]
 800a326:	1821      	adds	r1, r4, r0
 800a328:	428a      	cmp	r2, r1
 800a32a:	bf04      	itt	eq
 800a32c:	6811      	ldreq	r1, [r2, #0]
 800a32e:	6852      	ldreq	r2, [r2, #4]
 800a330:	6062      	str	r2, [r4, #4]
 800a332:	bf04      	itt	eq
 800a334:	1809      	addeq	r1, r1, r0
 800a336:	6021      	streq	r1, [r4, #0]
 800a338:	605c      	str	r4, [r3, #4]
 800a33a:	e7c7      	b.n	800a2cc <_free_r+0x24>
 800a33c:	bd38      	pop	{r3, r4, r5, pc}
 800a33e:	bf00      	nop
 800a340:	20000238 	.word	0x20000238

0800a344 <_malloc_r>:
 800a344:	b570      	push	{r4, r5, r6, lr}
 800a346:	1ccd      	adds	r5, r1, #3
 800a348:	f025 0503 	bic.w	r5, r5, #3
 800a34c:	3508      	adds	r5, #8
 800a34e:	2d0c      	cmp	r5, #12
 800a350:	bf38      	it	cc
 800a352:	250c      	movcc	r5, #12
 800a354:	2d00      	cmp	r5, #0
 800a356:	4606      	mov	r6, r0
 800a358:	db01      	blt.n	800a35e <_malloc_r+0x1a>
 800a35a:	42a9      	cmp	r1, r5
 800a35c:	d903      	bls.n	800a366 <_malloc_r+0x22>
 800a35e:	230c      	movs	r3, #12
 800a360:	6033      	str	r3, [r6, #0]
 800a362:	2000      	movs	r0, #0
 800a364:	bd70      	pop	{r4, r5, r6, pc}
 800a366:	f000 f877 	bl	800a458 <__malloc_lock>
 800a36a:	4a21      	ldr	r2, [pc, #132]	; (800a3f0 <_malloc_r+0xac>)
 800a36c:	6814      	ldr	r4, [r2, #0]
 800a36e:	4621      	mov	r1, r4
 800a370:	b991      	cbnz	r1, 800a398 <_malloc_r+0x54>
 800a372:	4c20      	ldr	r4, [pc, #128]	; (800a3f4 <_malloc_r+0xb0>)
 800a374:	6823      	ldr	r3, [r4, #0]
 800a376:	b91b      	cbnz	r3, 800a380 <_malloc_r+0x3c>
 800a378:	4630      	mov	r0, r6
 800a37a:	f000 f83d 	bl	800a3f8 <_sbrk_r>
 800a37e:	6020      	str	r0, [r4, #0]
 800a380:	4629      	mov	r1, r5
 800a382:	4630      	mov	r0, r6
 800a384:	f000 f838 	bl	800a3f8 <_sbrk_r>
 800a388:	1c43      	adds	r3, r0, #1
 800a38a:	d124      	bne.n	800a3d6 <_malloc_r+0x92>
 800a38c:	230c      	movs	r3, #12
 800a38e:	6033      	str	r3, [r6, #0]
 800a390:	4630      	mov	r0, r6
 800a392:	f000 f862 	bl	800a45a <__malloc_unlock>
 800a396:	e7e4      	b.n	800a362 <_malloc_r+0x1e>
 800a398:	680b      	ldr	r3, [r1, #0]
 800a39a:	1b5b      	subs	r3, r3, r5
 800a39c:	d418      	bmi.n	800a3d0 <_malloc_r+0x8c>
 800a39e:	2b0b      	cmp	r3, #11
 800a3a0:	d90f      	bls.n	800a3c2 <_malloc_r+0x7e>
 800a3a2:	600b      	str	r3, [r1, #0]
 800a3a4:	50cd      	str	r5, [r1, r3]
 800a3a6:	18cc      	adds	r4, r1, r3
 800a3a8:	4630      	mov	r0, r6
 800a3aa:	f000 f856 	bl	800a45a <__malloc_unlock>
 800a3ae:	f104 000b 	add.w	r0, r4, #11
 800a3b2:	1d23      	adds	r3, r4, #4
 800a3b4:	f020 0007 	bic.w	r0, r0, #7
 800a3b8:	1ac3      	subs	r3, r0, r3
 800a3ba:	d0d3      	beq.n	800a364 <_malloc_r+0x20>
 800a3bc:	425a      	negs	r2, r3
 800a3be:	50e2      	str	r2, [r4, r3]
 800a3c0:	e7d0      	b.n	800a364 <_malloc_r+0x20>
 800a3c2:	428c      	cmp	r4, r1
 800a3c4:	684b      	ldr	r3, [r1, #4]
 800a3c6:	bf16      	itet	ne
 800a3c8:	6063      	strne	r3, [r4, #4]
 800a3ca:	6013      	streq	r3, [r2, #0]
 800a3cc:	460c      	movne	r4, r1
 800a3ce:	e7eb      	b.n	800a3a8 <_malloc_r+0x64>
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	6849      	ldr	r1, [r1, #4]
 800a3d4:	e7cc      	b.n	800a370 <_malloc_r+0x2c>
 800a3d6:	1cc4      	adds	r4, r0, #3
 800a3d8:	f024 0403 	bic.w	r4, r4, #3
 800a3dc:	42a0      	cmp	r0, r4
 800a3de:	d005      	beq.n	800a3ec <_malloc_r+0xa8>
 800a3e0:	1a21      	subs	r1, r4, r0
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f000 f808 	bl	800a3f8 <_sbrk_r>
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d0cf      	beq.n	800a38c <_malloc_r+0x48>
 800a3ec:	6025      	str	r5, [r4, #0]
 800a3ee:	e7db      	b.n	800a3a8 <_malloc_r+0x64>
 800a3f0:	20000238 	.word	0x20000238
 800a3f4:	2000023c 	.word	0x2000023c

0800a3f8 <_sbrk_r>:
 800a3f8:	b538      	push	{r3, r4, r5, lr}
 800a3fa:	4c06      	ldr	r4, [pc, #24]	; (800a414 <_sbrk_r+0x1c>)
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4605      	mov	r5, r0
 800a400:	4608      	mov	r0, r1
 800a402:	6023      	str	r3, [r4, #0]
 800a404:	f7f7 fb22 	bl	8001a4c <_sbrk>
 800a408:	1c43      	adds	r3, r0, #1
 800a40a:	d102      	bne.n	800a412 <_sbrk_r+0x1a>
 800a40c:	6823      	ldr	r3, [r4, #0]
 800a40e:	b103      	cbz	r3, 800a412 <_sbrk_r+0x1a>
 800a410:	602b      	str	r3, [r5, #0]
 800a412:	bd38      	pop	{r3, r4, r5, pc}
 800a414:	200021c8 	.word	0x200021c8

0800a418 <siprintf>:
 800a418:	b40e      	push	{r1, r2, r3}
 800a41a:	b500      	push	{lr}
 800a41c:	b09c      	sub	sp, #112	; 0x70
 800a41e:	ab1d      	add	r3, sp, #116	; 0x74
 800a420:	9002      	str	r0, [sp, #8]
 800a422:	9006      	str	r0, [sp, #24]
 800a424:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a428:	4809      	ldr	r0, [pc, #36]	; (800a450 <siprintf+0x38>)
 800a42a:	9107      	str	r1, [sp, #28]
 800a42c:	9104      	str	r1, [sp, #16]
 800a42e:	4909      	ldr	r1, [pc, #36]	; (800a454 <siprintf+0x3c>)
 800a430:	f853 2b04 	ldr.w	r2, [r3], #4
 800a434:	9105      	str	r1, [sp, #20]
 800a436:	6800      	ldr	r0, [r0, #0]
 800a438:	9301      	str	r3, [sp, #4]
 800a43a:	a902      	add	r1, sp, #8
 800a43c:	f000 f868 	bl	800a510 <_svfiprintf_r>
 800a440:	9b02      	ldr	r3, [sp, #8]
 800a442:	2200      	movs	r2, #0
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	b01c      	add	sp, #112	; 0x70
 800a448:	f85d eb04 	ldr.w	lr, [sp], #4
 800a44c:	b003      	add	sp, #12
 800a44e:	4770      	bx	lr
 800a450:	200001b0 	.word	0x200001b0
 800a454:	ffff0208 	.word	0xffff0208

0800a458 <__malloc_lock>:
 800a458:	4770      	bx	lr

0800a45a <__malloc_unlock>:
 800a45a:	4770      	bx	lr

0800a45c <__ssputs_r>:
 800a45c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a460:	688e      	ldr	r6, [r1, #8]
 800a462:	429e      	cmp	r6, r3
 800a464:	4682      	mov	sl, r0
 800a466:	460c      	mov	r4, r1
 800a468:	4690      	mov	r8, r2
 800a46a:	4699      	mov	r9, r3
 800a46c:	d837      	bhi.n	800a4de <__ssputs_r+0x82>
 800a46e:	898a      	ldrh	r2, [r1, #12]
 800a470:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a474:	d031      	beq.n	800a4da <__ssputs_r+0x7e>
 800a476:	6825      	ldr	r5, [r4, #0]
 800a478:	6909      	ldr	r1, [r1, #16]
 800a47a:	1a6f      	subs	r7, r5, r1
 800a47c:	6965      	ldr	r5, [r4, #20]
 800a47e:	2302      	movs	r3, #2
 800a480:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a484:	fb95 f5f3 	sdiv	r5, r5, r3
 800a488:	f109 0301 	add.w	r3, r9, #1
 800a48c:	443b      	add	r3, r7
 800a48e:	429d      	cmp	r5, r3
 800a490:	bf38      	it	cc
 800a492:	461d      	movcc	r5, r3
 800a494:	0553      	lsls	r3, r2, #21
 800a496:	d530      	bpl.n	800a4fa <__ssputs_r+0x9e>
 800a498:	4629      	mov	r1, r5
 800a49a:	f7ff ff53 	bl	800a344 <_malloc_r>
 800a49e:	4606      	mov	r6, r0
 800a4a0:	b950      	cbnz	r0, 800a4b8 <__ssputs_r+0x5c>
 800a4a2:	230c      	movs	r3, #12
 800a4a4:	f8ca 3000 	str.w	r3, [sl]
 800a4a8:	89a3      	ldrh	r3, [r4, #12]
 800a4aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4ae:	81a3      	strh	r3, [r4, #12]
 800a4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b8:	463a      	mov	r2, r7
 800a4ba:	6921      	ldr	r1, [r4, #16]
 800a4bc:	f000 faa8 	bl	800aa10 <memcpy>
 800a4c0:	89a3      	ldrh	r3, [r4, #12]
 800a4c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a4c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a4ca:	81a3      	strh	r3, [r4, #12]
 800a4cc:	6126      	str	r6, [r4, #16]
 800a4ce:	6165      	str	r5, [r4, #20]
 800a4d0:	443e      	add	r6, r7
 800a4d2:	1bed      	subs	r5, r5, r7
 800a4d4:	6026      	str	r6, [r4, #0]
 800a4d6:	60a5      	str	r5, [r4, #8]
 800a4d8:	464e      	mov	r6, r9
 800a4da:	454e      	cmp	r6, r9
 800a4dc:	d900      	bls.n	800a4e0 <__ssputs_r+0x84>
 800a4de:	464e      	mov	r6, r9
 800a4e0:	4632      	mov	r2, r6
 800a4e2:	4641      	mov	r1, r8
 800a4e4:	6820      	ldr	r0, [r4, #0]
 800a4e6:	f000 fa9e 	bl	800aa26 <memmove>
 800a4ea:	68a3      	ldr	r3, [r4, #8]
 800a4ec:	1b9b      	subs	r3, r3, r6
 800a4ee:	60a3      	str	r3, [r4, #8]
 800a4f0:	6823      	ldr	r3, [r4, #0]
 800a4f2:	441e      	add	r6, r3
 800a4f4:	6026      	str	r6, [r4, #0]
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	e7dc      	b.n	800a4b4 <__ssputs_r+0x58>
 800a4fa:	462a      	mov	r2, r5
 800a4fc:	f000 faac 	bl	800aa58 <_realloc_r>
 800a500:	4606      	mov	r6, r0
 800a502:	2800      	cmp	r0, #0
 800a504:	d1e2      	bne.n	800a4cc <__ssputs_r+0x70>
 800a506:	6921      	ldr	r1, [r4, #16]
 800a508:	4650      	mov	r0, sl
 800a50a:	f7ff fecd 	bl	800a2a8 <_free_r>
 800a50e:	e7c8      	b.n	800a4a2 <__ssputs_r+0x46>

0800a510 <_svfiprintf_r>:
 800a510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	461d      	mov	r5, r3
 800a516:	898b      	ldrh	r3, [r1, #12]
 800a518:	061f      	lsls	r7, r3, #24
 800a51a:	b09d      	sub	sp, #116	; 0x74
 800a51c:	4680      	mov	r8, r0
 800a51e:	460c      	mov	r4, r1
 800a520:	4616      	mov	r6, r2
 800a522:	d50f      	bpl.n	800a544 <_svfiprintf_r+0x34>
 800a524:	690b      	ldr	r3, [r1, #16]
 800a526:	b96b      	cbnz	r3, 800a544 <_svfiprintf_r+0x34>
 800a528:	2140      	movs	r1, #64	; 0x40
 800a52a:	f7ff ff0b 	bl	800a344 <_malloc_r>
 800a52e:	6020      	str	r0, [r4, #0]
 800a530:	6120      	str	r0, [r4, #16]
 800a532:	b928      	cbnz	r0, 800a540 <_svfiprintf_r+0x30>
 800a534:	230c      	movs	r3, #12
 800a536:	f8c8 3000 	str.w	r3, [r8]
 800a53a:	f04f 30ff 	mov.w	r0, #4294967295
 800a53e:	e0c8      	b.n	800a6d2 <_svfiprintf_r+0x1c2>
 800a540:	2340      	movs	r3, #64	; 0x40
 800a542:	6163      	str	r3, [r4, #20]
 800a544:	2300      	movs	r3, #0
 800a546:	9309      	str	r3, [sp, #36]	; 0x24
 800a548:	2320      	movs	r3, #32
 800a54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a54e:	2330      	movs	r3, #48	; 0x30
 800a550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a554:	9503      	str	r5, [sp, #12]
 800a556:	f04f 0b01 	mov.w	fp, #1
 800a55a:	4637      	mov	r7, r6
 800a55c:	463d      	mov	r5, r7
 800a55e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a562:	b10b      	cbz	r3, 800a568 <_svfiprintf_r+0x58>
 800a564:	2b25      	cmp	r3, #37	; 0x25
 800a566:	d13e      	bne.n	800a5e6 <_svfiprintf_r+0xd6>
 800a568:	ebb7 0a06 	subs.w	sl, r7, r6
 800a56c:	d00b      	beq.n	800a586 <_svfiprintf_r+0x76>
 800a56e:	4653      	mov	r3, sl
 800a570:	4632      	mov	r2, r6
 800a572:	4621      	mov	r1, r4
 800a574:	4640      	mov	r0, r8
 800a576:	f7ff ff71 	bl	800a45c <__ssputs_r>
 800a57a:	3001      	adds	r0, #1
 800a57c:	f000 80a4 	beq.w	800a6c8 <_svfiprintf_r+0x1b8>
 800a580:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a582:	4453      	add	r3, sl
 800a584:	9309      	str	r3, [sp, #36]	; 0x24
 800a586:	783b      	ldrb	r3, [r7, #0]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 809d 	beq.w	800a6c8 <_svfiprintf_r+0x1b8>
 800a58e:	2300      	movs	r3, #0
 800a590:	f04f 32ff 	mov.w	r2, #4294967295
 800a594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a598:	9304      	str	r3, [sp, #16]
 800a59a:	9307      	str	r3, [sp, #28]
 800a59c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a5a2:	462f      	mov	r7, r5
 800a5a4:	2205      	movs	r2, #5
 800a5a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a5aa:	4850      	ldr	r0, [pc, #320]	; (800a6ec <_svfiprintf_r+0x1dc>)
 800a5ac:	f7f5 fe28 	bl	8000200 <memchr>
 800a5b0:	9b04      	ldr	r3, [sp, #16]
 800a5b2:	b9d0      	cbnz	r0, 800a5ea <_svfiprintf_r+0xda>
 800a5b4:	06d9      	lsls	r1, r3, #27
 800a5b6:	bf44      	itt	mi
 800a5b8:	2220      	movmi	r2, #32
 800a5ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5be:	071a      	lsls	r2, r3, #28
 800a5c0:	bf44      	itt	mi
 800a5c2:	222b      	movmi	r2, #43	; 0x2b
 800a5c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a5c8:	782a      	ldrb	r2, [r5, #0]
 800a5ca:	2a2a      	cmp	r2, #42	; 0x2a
 800a5cc:	d015      	beq.n	800a5fa <_svfiprintf_r+0xea>
 800a5ce:	9a07      	ldr	r2, [sp, #28]
 800a5d0:	462f      	mov	r7, r5
 800a5d2:	2000      	movs	r0, #0
 800a5d4:	250a      	movs	r5, #10
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5dc:	3b30      	subs	r3, #48	; 0x30
 800a5de:	2b09      	cmp	r3, #9
 800a5e0:	d94d      	bls.n	800a67e <_svfiprintf_r+0x16e>
 800a5e2:	b1b8      	cbz	r0, 800a614 <_svfiprintf_r+0x104>
 800a5e4:	e00f      	b.n	800a606 <_svfiprintf_r+0xf6>
 800a5e6:	462f      	mov	r7, r5
 800a5e8:	e7b8      	b.n	800a55c <_svfiprintf_r+0x4c>
 800a5ea:	4a40      	ldr	r2, [pc, #256]	; (800a6ec <_svfiprintf_r+0x1dc>)
 800a5ec:	1a80      	subs	r0, r0, r2
 800a5ee:	fa0b f000 	lsl.w	r0, fp, r0
 800a5f2:	4318      	orrs	r0, r3
 800a5f4:	9004      	str	r0, [sp, #16]
 800a5f6:	463d      	mov	r5, r7
 800a5f8:	e7d3      	b.n	800a5a2 <_svfiprintf_r+0x92>
 800a5fa:	9a03      	ldr	r2, [sp, #12]
 800a5fc:	1d11      	adds	r1, r2, #4
 800a5fe:	6812      	ldr	r2, [r2, #0]
 800a600:	9103      	str	r1, [sp, #12]
 800a602:	2a00      	cmp	r2, #0
 800a604:	db01      	blt.n	800a60a <_svfiprintf_r+0xfa>
 800a606:	9207      	str	r2, [sp, #28]
 800a608:	e004      	b.n	800a614 <_svfiprintf_r+0x104>
 800a60a:	4252      	negs	r2, r2
 800a60c:	f043 0302 	orr.w	r3, r3, #2
 800a610:	9207      	str	r2, [sp, #28]
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	783b      	ldrb	r3, [r7, #0]
 800a616:	2b2e      	cmp	r3, #46	; 0x2e
 800a618:	d10c      	bne.n	800a634 <_svfiprintf_r+0x124>
 800a61a:	787b      	ldrb	r3, [r7, #1]
 800a61c:	2b2a      	cmp	r3, #42	; 0x2a
 800a61e:	d133      	bne.n	800a688 <_svfiprintf_r+0x178>
 800a620:	9b03      	ldr	r3, [sp, #12]
 800a622:	1d1a      	adds	r2, r3, #4
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	9203      	str	r2, [sp, #12]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	bfb8      	it	lt
 800a62c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a630:	3702      	adds	r7, #2
 800a632:	9305      	str	r3, [sp, #20]
 800a634:	4d2e      	ldr	r5, [pc, #184]	; (800a6f0 <_svfiprintf_r+0x1e0>)
 800a636:	7839      	ldrb	r1, [r7, #0]
 800a638:	2203      	movs	r2, #3
 800a63a:	4628      	mov	r0, r5
 800a63c:	f7f5 fde0 	bl	8000200 <memchr>
 800a640:	b138      	cbz	r0, 800a652 <_svfiprintf_r+0x142>
 800a642:	2340      	movs	r3, #64	; 0x40
 800a644:	1b40      	subs	r0, r0, r5
 800a646:	fa03 f000 	lsl.w	r0, r3, r0
 800a64a:	9b04      	ldr	r3, [sp, #16]
 800a64c:	4303      	orrs	r3, r0
 800a64e:	3701      	adds	r7, #1
 800a650:	9304      	str	r3, [sp, #16]
 800a652:	7839      	ldrb	r1, [r7, #0]
 800a654:	4827      	ldr	r0, [pc, #156]	; (800a6f4 <_svfiprintf_r+0x1e4>)
 800a656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a65a:	2206      	movs	r2, #6
 800a65c:	1c7e      	adds	r6, r7, #1
 800a65e:	f7f5 fdcf 	bl	8000200 <memchr>
 800a662:	2800      	cmp	r0, #0
 800a664:	d038      	beq.n	800a6d8 <_svfiprintf_r+0x1c8>
 800a666:	4b24      	ldr	r3, [pc, #144]	; (800a6f8 <_svfiprintf_r+0x1e8>)
 800a668:	bb13      	cbnz	r3, 800a6b0 <_svfiprintf_r+0x1a0>
 800a66a:	9b03      	ldr	r3, [sp, #12]
 800a66c:	3307      	adds	r3, #7
 800a66e:	f023 0307 	bic.w	r3, r3, #7
 800a672:	3308      	adds	r3, #8
 800a674:	9303      	str	r3, [sp, #12]
 800a676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a678:	444b      	add	r3, r9
 800a67a:	9309      	str	r3, [sp, #36]	; 0x24
 800a67c:	e76d      	b.n	800a55a <_svfiprintf_r+0x4a>
 800a67e:	fb05 3202 	mla	r2, r5, r2, r3
 800a682:	2001      	movs	r0, #1
 800a684:	460f      	mov	r7, r1
 800a686:	e7a6      	b.n	800a5d6 <_svfiprintf_r+0xc6>
 800a688:	2300      	movs	r3, #0
 800a68a:	3701      	adds	r7, #1
 800a68c:	9305      	str	r3, [sp, #20]
 800a68e:	4619      	mov	r1, r3
 800a690:	250a      	movs	r5, #10
 800a692:	4638      	mov	r0, r7
 800a694:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a698:	3a30      	subs	r2, #48	; 0x30
 800a69a:	2a09      	cmp	r2, #9
 800a69c:	d903      	bls.n	800a6a6 <_svfiprintf_r+0x196>
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d0c8      	beq.n	800a634 <_svfiprintf_r+0x124>
 800a6a2:	9105      	str	r1, [sp, #20]
 800a6a4:	e7c6      	b.n	800a634 <_svfiprintf_r+0x124>
 800a6a6:	fb05 2101 	mla	r1, r5, r1, r2
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	4607      	mov	r7, r0
 800a6ae:	e7f0      	b.n	800a692 <_svfiprintf_r+0x182>
 800a6b0:	ab03      	add	r3, sp, #12
 800a6b2:	9300      	str	r3, [sp, #0]
 800a6b4:	4622      	mov	r2, r4
 800a6b6:	4b11      	ldr	r3, [pc, #68]	; (800a6fc <_svfiprintf_r+0x1ec>)
 800a6b8:	a904      	add	r1, sp, #16
 800a6ba:	4640      	mov	r0, r8
 800a6bc:	f3af 8000 	nop.w
 800a6c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a6c4:	4681      	mov	r9, r0
 800a6c6:	d1d6      	bne.n	800a676 <_svfiprintf_r+0x166>
 800a6c8:	89a3      	ldrh	r3, [r4, #12]
 800a6ca:	065b      	lsls	r3, r3, #25
 800a6cc:	f53f af35 	bmi.w	800a53a <_svfiprintf_r+0x2a>
 800a6d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a6d2:	b01d      	add	sp, #116	; 0x74
 800a6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6d8:	ab03      	add	r3, sp, #12
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	4622      	mov	r2, r4
 800a6de:	4b07      	ldr	r3, [pc, #28]	; (800a6fc <_svfiprintf_r+0x1ec>)
 800a6e0:	a904      	add	r1, sp, #16
 800a6e2:	4640      	mov	r0, r8
 800a6e4:	f000 f882 	bl	800a7ec <_printf_i>
 800a6e8:	e7ea      	b.n	800a6c0 <_svfiprintf_r+0x1b0>
 800a6ea:	bf00      	nop
 800a6ec:	0800bb68 	.word	0x0800bb68
 800a6f0:	0800bb6e 	.word	0x0800bb6e
 800a6f4:	0800bb72 	.word	0x0800bb72
 800a6f8:	00000000 	.word	0x00000000
 800a6fc:	0800a45d 	.word	0x0800a45d

0800a700 <_printf_common>:
 800a700:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a704:	4691      	mov	r9, r2
 800a706:	461f      	mov	r7, r3
 800a708:	688a      	ldr	r2, [r1, #8]
 800a70a:	690b      	ldr	r3, [r1, #16]
 800a70c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a710:	4293      	cmp	r3, r2
 800a712:	bfb8      	it	lt
 800a714:	4613      	movlt	r3, r2
 800a716:	f8c9 3000 	str.w	r3, [r9]
 800a71a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a71e:	4606      	mov	r6, r0
 800a720:	460c      	mov	r4, r1
 800a722:	b112      	cbz	r2, 800a72a <_printf_common+0x2a>
 800a724:	3301      	adds	r3, #1
 800a726:	f8c9 3000 	str.w	r3, [r9]
 800a72a:	6823      	ldr	r3, [r4, #0]
 800a72c:	0699      	lsls	r1, r3, #26
 800a72e:	bf42      	ittt	mi
 800a730:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a734:	3302      	addmi	r3, #2
 800a736:	f8c9 3000 	strmi.w	r3, [r9]
 800a73a:	6825      	ldr	r5, [r4, #0]
 800a73c:	f015 0506 	ands.w	r5, r5, #6
 800a740:	d107      	bne.n	800a752 <_printf_common+0x52>
 800a742:	f104 0a19 	add.w	sl, r4, #25
 800a746:	68e3      	ldr	r3, [r4, #12]
 800a748:	f8d9 2000 	ldr.w	r2, [r9]
 800a74c:	1a9b      	subs	r3, r3, r2
 800a74e:	42ab      	cmp	r3, r5
 800a750:	dc28      	bgt.n	800a7a4 <_printf_common+0xa4>
 800a752:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a756:	6822      	ldr	r2, [r4, #0]
 800a758:	3300      	adds	r3, #0
 800a75a:	bf18      	it	ne
 800a75c:	2301      	movne	r3, #1
 800a75e:	0692      	lsls	r2, r2, #26
 800a760:	d42d      	bmi.n	800a7be <_printf_common+0xbe>
 800a762:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a766:	4639      	mov	r1, r7
 800a768:	4630      	mov	r0, r6
 800a76a:	47c0      	blx	r8
 800a76c:	3001      	adds	r0, #1
 800a76e:	d020      	beq.n	800a7b2 <_printf_common+0xb2>
 800a770:	6823      	ldr	r3, [r4, #0]
 800a772:	68e5      	ldr	r5, [r4, #12]
 800a774:	f8d9 2000 	ldr.w	r2, [r9]
 800a778:	f003 0306 	and.w	r3, r3, #6
 800a77c:	2b04      	cmp	r3, #4
 800a77e:	bf08      	it	eq
 800a780:	1aad      	subeq	r5, r5, r2
 800a782:	68a3      	ldr	r3, [r4, #8]
 800a784:	6922      	ldr	r2, [r4, #16]
 800a786:	bf0c      	ite	eq
 800a788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a78c:	2500      	movne	r5, #0
 800a78e:	4293      	cmp	r3, r2
 800a790:	bfc4      	itt	gt
 800a792:	1a9b      	subgt	r3, r3, r2
 800a794:	18ed      	addgt	r5, r5, r3
 800a796:	f04f 0900 	mov.w	r9, #0
 800a79a:	341a      	adds	r4, #26
 800a79c:	454d      	cmp	r5, r9
 800a79e:	d11a      	bne.n	800a7d6 <_printf_common+0xd6>
 800a7a0:	2000      	movs	r0, #0
 800a7a2:	e008      	b.n	800a7b6 <_printf_common+0xb6>
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	4652      	mov	r2, sl
 800a7a8:	4639      	mov	r1, r7
 800a7aa:	4630      	mov	r0, r6
 800a7ac:	47c0      	blx	r8
 800a7ae:	3001      	adds	r0, #1
 800a7b0:	d103      	bne.n	800a7ba <_printf_common+0xba>
 800a7b2:	f04f 30ff 	mov.w	r0, #4294967295
 800a7b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7ba:	3501      	adds	r5, #1
 800a7bc:	e7c3      	b.n	800a746 <_printf_common+0x46>
 800a7be:	18e1      	adds	r1, r4, r3
 800a7c0:	1c5a      	adds	r2, r3, #1
 800a7c2:	2030      	movs	r0, #48	; 0x30
 800a7c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a7c8:	4422      	add	r2, r4
 800a7ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a7ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a7d2:	3302      	adds	r3, #2
 800a7d4:	e7c5      	b.n	800a762 <_printf_common+0x62>
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	4622      	mov	r2, r4
 800a7da:	4639      	mov	r1, r7
 800a7dc:	4630      	mov	r0, r6
 800a7de:	47c0      	blx	r8
 800a7e0:	3001      	adds	r0, #1
 800a7e2:	d0e6      	beq.n	800a7b2 <_printf_common+0xb2>
 800a7e4:	f109 0901 	add.w	r9, r9, #1
 800a7e8:	e7d8      	b.n	800a79c <_printf_common+0x9c>
	...

0800a7ec <_printf_i>:
 800a7ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a7f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	7e09      	ldrb	r1, [r1, #24]
 800a7f8:	b085      	sub	sp, #20
 800a7fa:	296e      	cmp	r1, #110	; 0x6e
 800a7fc:	4617      	mov	r7, r2
 800a7fe:	4606      	mov	r6, r0
 800a800:	4698      	mov	r8, r3
 800a802:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a804:	f000 80b3 	beq.w	800a96e <_printf_i+0x182>
 800a808:	d822      	bhi.n	800a850 <_printf_i+0x64>
 800a80a:	2963      	cmp	r1, #99	; 0x63
 800a80c:	d036      	beq.n	800a87c <_printf_i+0x90>
 800a80e:	d80a      	bhi.n	800a826 <_printf_i+0x3a>
 800a810:	2900      	cmp	r1, #0
 800a812:	f000 80b9 	beq.w	800a988 <_printf_i+0x19c>
 800a816:	2958      	cmp	r1, #88	; 0x58
 800a818:	f000 8083 	beq.w	800a922 <_printf_i+0x136>
 800a81c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a820:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a824:	e032      	b.n	800a88c <_printf_i+0xa0>
 800a826:	2964      	cmp	r1, #100	; 0x64
 800a828:	d001      	beq.n	800a82e <_printf_i+0x42>
 800a82a:	2969      	cmp	r1, #105	; 0x69
 800a82c:	d1f6      	bne.n	800a81c <_printf_i+0x30>
 800a82e:	6820      	ldr	r0, [r4, #0]
 800a830:	6813      	ldr	r3, [r2, #0]
 800a832:	0605      	lsls	r5, r0, #24
 800a834:	f103 0104 	add.w	r1, r3, #4
 800a838:	d52a      	bpl.n	800a890 <_printf_i+0xa4>
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	6011      	str	r1, [r2, #0]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	da03      	bge.n	800a84a <_printf_i+0x5e>
 800a842:	222d      	movs	r2, #45	; 0x2d
 800a844:	425b      	negs	r3, r3
 800a846:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a84a:	486f      	ldr	r0, [pc, #444]	; (800aa08 <_printf_i+0x21c>)
 800a84c:	220a      	movs	r2, #10
 800a84e:	e039      	b.n	800a8c4 <_printf_i+0xd8>
 800a850:	2973      	cmp	r1, #115	; 0x73
 800a852:	f000 809d 	beq.w	800a990 <_printf_i+0x1a4>
 800a856:	d808      	bhi.n	800a86a <_printf_i+0x7e>
 800a858:	296f      	cmp	r1, #111	; 0x6f
 800a85a:	d020      	beq.n	800a89e <_printf_i+0xb2>
 800a85c:	2970      	cmp	r1, #112	; 0x70
 800a85e:	d1dd      	bne.n	800a81c <_printf_i+0x30>
 800a860:	6823      	ldr	r3, [r4, #0]
 800a862:	f043 0320 	orr.w	r3, r3, #32
 800a866:	6023      	str	r3, [r4, #0]
 800a868:	e003      	b.n	800a872 <_printf_i+0x86>
 800a86a:	2975      	cmp	r1, #117	; 0x75
 800a86c:	d017      	beq.n	800a89e <_printf_i+0xb2>
 800a86e:	2978      	cmp	r1, #120	; 0x78
 800a870:	d1d4      	bne.n	800a81c <_printf_i+0x30>
 800a872:	2378      	movs	r3, #120	; 0x78
 800a874:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a878:	4864      	ldr	r0, [pc, #400]	; (800aa0c <_printf_i+0x220>)
 800a87a:	e055      	b.n	800a928 <_printf_i+0x13c>
 800a87c:	6813      	ldr	r3, [r2, #0]
 800a87e:	1d19      	adds	r1, r3, #4
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	6011      	str	r1, [r2, #0]
 800a884:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a888:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a88c:	2301      	movs	r3, #1
 800a88e:	e08c      	b.n	800a9aa <_printf_i+0x1be>
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	6011      	str	r1, [r2, #0]
 800a894:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a898:	bf18      	it	ne
 800a89a:	b21b      	sxthne	r3, r3
 800a89c:	e7cf      	b.n	800a83e <_printf_i+0x52>
 800a89e:	6813      	ldr	r3, [r2, #0]
 800a8a0:	6825      	ldr	r5, [r4, #0]
 800a8a2:	1d18      	adds	r0, r3, #4
 800a8a4:	6010      	str	r0, [r2, #0]
 800a8a6:	0628      	lsls	r0, r5, #24
 800a8a8:	d501      	bpl.n	800a8ae <_printf_i+0xc2>
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	e002      	b.n	800a8b4 <_printf_i+0xc8>
 800a8ae:	0668      	lsls	r0, r5, #25
 800a8b0:	d5fb      	bpl.n	800a8aa <_printf_i+0xbe>
 800a8b2:	881b      	ldrh	r3, [r3, #0]
 800a8b4:	4854      	ldr	r0, [pc, #336]	; (800aa08 <_printf_i+0x21c>)
 800a8b6:	296f      	cmp	r1, #111	; 0x6f
 800a8b8:	bf14      	ite	ne
 800a8ba:	220a      	movne	r2, #10
 800a8bc:	2208      	moveq	r2, #8
 800a8be:	2100      	movs	r1, #0
 800a8c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a8c4:	6865      	ldr	r5, [r4, #4]
 800a8c6:	60a5      	str	r5, [r4, #8]
 800a8c8:	2d00      	cmp	r5, #0
 800a8ca:	f2c0 8095 	blt.w	800a9f8 <_printf_i+0x20c>
 800a8ce:	6821      	ldr	r1, [r4, #0]
 800a8d0:	f021 0104 	bic.w	r1, r1, #4
 800a8d4:	6021      	str	r1, [r4, #0]
 800a8d6:	2b00      	cmp	r3, #0
 800a8d8:	d13d      	bne.n	800a956 <_printf_i+0x16a>
 800a8da:	2d00      	cmp	r5, #0
 800a8dc:	f040 808e 	bne.w	800a9fc <_printf_i+0x210>
 800a8e0:	4665      	mov	r5, ip
 800a8e2:	2a08      	cmp	r2, #8
 800a8e4:	d10b      	bne.n	800a8fe <_printf_i+0x112>
 800a8e6:	6823      	ldr	r3, [r4, #0]
 800a8e8:	07db      	lsls	r3, r3, #31
 800a8ea:	d508      	bpl.n	800a8fe <_printf_i+0x112>
 800a8ec:	6923      	ldr	r3, [r4, #16]
 800a8ee:	6862      	ldr	r2, [r4, #4]
 800a8f0:	429a      	cmp	r2, r3
 800a8f2:	bfde      	ittt	le
 800a8f4:	2330      	movle	r3, #48	; 0x30
 800a8f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a8fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a8fe:	ebac 0305 	sub.w	r3, ip, r5
 800a902:	6123      	str	r3, [r4, #16]
 800a904:	f8cd 8000 	str.w	r8, [sp]
 800a908:	463b      	mov	r3, r7
 800a90a:	aa03      	add	r2, sp, #12
 800a90c:	4621      	mov	r1, r4
 800a90e:	4630      	mov	r0, r6
 800a910:	f7ff fef6 	bl	800a700 <_printf_common>
 800a914:	3001      	adds	r0, #1
 800a916:	d14d      	bne.n	800a9b4 <_printf_i+0x1c8>
 800a918:	f04f 30ff 	mov.w	r0, #4294967295
 800a91c:	b005      	add	sp, #20
 800a91e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a922:	4839      	ldr	r0, [pc, #228]	; (800aa08 <_printf_i+0x21c>)
 800a924:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a928:	6813      	ldr	r3, [r2, #0]
 800a92a:	6821      	ldr	r1, [r4, #0]
 800a92c:	1d1d      	adds	r5, r3, #4
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	6015      	str	r5, [r2, #0]
 800a932:	060a      	lsls	r2, r1, #24
 800a934:	d50b      	bpl.n	800a94e <_printf_i+0x162>
 800a936:	07ca      	lsls	r2, r1, #31
 800a938:	bf44      	itt	mi
 800a93a:	f041 0120 	orrmi.w	r1, r1, #32
 800a93e:	6021      	strmi	r1, [r4, #0]
 800a940:	b91b      	cbnz	r3, 800a94a <_printf_i+0x15e>
 800a942:	6822      	ldr	r2, [r4, #0]
 800a944:	f022 0220 	bic.w	r2, r2, #32
 800a948:	6022      	str	r2, [r4, #0]
 800a94a:	2210      	movs	r2, #16
 800a94c:	e7b7      	b.n	800a8be <_printf_i+0xd2>
 800a94e:	064d      	lsls	r5, r1, #25
 800a950:	bf48      	it	mi
 800a952:	b29b      	uxthmi	r3, r3
 800a954:	e7ef      	b.n	800a936 <_printf_i+0x14a>
 800a956:	4665      	mov	r5, ip
 800a958:	fbb3 f1f2 	udiv	r1, r3, r2
 800a95c:	fb02 3311 	mls	r3, r2, r1, r3
 800a960:	5cc3      	ldrb	r3, [r0, r3]
 800a962:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a966:	460b      	mov	r3, r1
 800a968:	2900      	cmp	r1, #0
 800a96a:	d1f5      	bne.n	800a958 <_printf_i+0x16c>
 800a96c:	e7b9      	b.n	800a8e2 <_printf_i+0xf6>
 800a96e:	6813      	ldr	r3, [r2, #0]
 800a970:	6825      	ldr	r5, [r4, #0]
 800a972:	6961      	ldr	r1, [r4, #20]
 800a974:	1d18      	adds	r0, r3, #4
 800a976:	6010      	str	r0, [r2, #0]
 800a978:	0628      	lsls	r0, r5, #24
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	d501      	bpl.n	800a982 <_printf_i+0x196>
 800a97e:	6019      	str	r1, [r3, #0]
 800a980:	e002      	b.n	800a988 <_printf_i+0x19c>
 800a982:	066a      	lsls	r2, r5, #25
 800a984:	d5fb      	bpl.n	800a97e <_printf_i+0x192>
 800a986:	8019      	strh	r1, [r3, #0]
 800a988:	2300      	movs	r3, #0
 800a98a:	6123      	str	r3, [r4, #16]
 800a98c:	4665      	mov	r5, ip
 800a98e:	e7b9      	b.n	800a904 <_printf_i+0x118>
 800a990:	6813      	ldr	r3, [r2, #0]
 800a992:	1d19      	adds	r1, r3, #4
 800a994:	6011      	str	r1, [r2, #0]
 800a996:	681d      	ldr	r5, [r3, #0]
 800a998:	6862      	ldr	r2, [r4, #4]
 800a99a:	2100      	movs	r1, #0
 800a99c:	4628      	mov	r0, r5
 800a99e:	f7f5 fc2f 	bl	8000200 <memchr>
 800a9a2:	b108      	cbz	r0, 800a9a8 <_printf_i+0x1bc>
 800a9a4:	1b40      	subs	r0, r0, r5
 800a9a6:	6060      	str	r0, [r4, #4]
 800a9a8:	6863      	ldr	r3, [r4, #4]
 800a9aa:	6123      	str	r3, [r4, #16]
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a9b2:	e7a7      	b.n	800a904 <_printf_i+0x118>
 800a9b4:	6923      	ldr	r3, [r4, #16]
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4639      	mov	r1, r7
 800a9ba:	4630      	mov	r0, r6
 800a9bc:	47c0      	blx	r8
 800a9be:	3001      	adds	r0, #1
 800a9c0:	d0aa      	beq.n	800a918 <_printf_i+0x12c>
 800a9c2:	6823      	ldr	r3, [r4, #0]
 800a9c4:	079b      	lsls	r3, r3, #30
 800a9c6:	d413      	bmi.n	800a9f0 <_printf_i+0x204>
 800a9c8:	68e0      	ldr	r0, [r4, #12]
 800a9ca:	9b03      	ldr	r3, [sp, #12]
 800a9cc:	4298      	cmp	r0, r3
 800a9ce:	bfb8      	it	lt
 800a9d0:	4618      	movlt	r0, r3
 800a9d2:	e7a3      	b.n	800a91c <_printf_i+0x130>
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	464a      	mov	r2, r9
 800a9d8:	4639      	mov	r1, r7
 800a9da:	4630      	mov	r0, r6
 800a9dc:	47c0      	blx	r8
 800a9de:	3001      	adds	r0, #1
 800a9e0:	d09a      	beq.n	800a918 <_printf_i+0x12c>
 800a9e2:	3501      	adds	r5, #1
 800a9e4:	68e3      	ldr	r3, [r4, #12]
 800a9e6:	9a03      	ldr	r2, [sp, #12]
 800a9e8:	1a9b      	subs	r3, r3, r2
 800a9ea:	42ab      	cmp	r3, r5
 800a9ec:	dcf2      	bgt.n	800a9d4 <_printf_i+0x1e8>
 800a9ee:	e7eb      	b.n	800a9c8 <_printf_i+0x1dc>
 800a9f0:	2500      	movs	r5, #0
 800a9f2:	f104 0919 	add.w	r9, r4, #25
 800a9f6:	e7f5      	b.n	800a9e4 <_printf_i+0x1f8>
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d1ac      	bne.n	800a956 <_printf_i+0x16a>
 800a9fc:	7803      	ldrb	r3, [r0, #0]
 800a9fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa02:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa06:	e76c      	b.n	800a8e2 <_printf_i+0xf6>
 800aa08:	0800bb79 	.word	0x0800bb79
 800aa0c:	0800bb8a 	.word	0x0800bb8a

0800aa10 <memcpy>:
 800aa10:	b510      	push	{r4, lr}
 800aa12:	1e43      	subs	r3, r0, #1
 800aa14:	440a      	add	r2, r1
 800aa16:	4291      	cmp	r1, r2
 800aa18:	d100      	bne.n	800aa1c <memcpy+0xc>
 800aa1a:	bd10      	pop	{r4, pc}
 800aa1c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa20:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa24:	e7f7      	b.n	800aa16 <memcpy+0x6>

0800aa26 <memmove>:
 800aa26:	4288      	cmp	r0, r1
 800aa28:	b510      	push	{r4, lr}
 800aa2a:	eb01 0302 	add.w	r3, r1, r2
 800aa2e:	d807      	bhi.n	800aa40 <memmove+0x1a>
 800aa30:	1e42      	subs	r2, r0, #1
 800aa32:	4299      	cmp	r1, r3
 800aa34:	d00a      	beq.n	800aa4c <memmove+0x26>
 800aa36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa3a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aa3e:	e7f8      	b.n	800aa32 <memmove+0xc>
 800aa40:	4283      	cmp	r3, r0
 800aa42:	d9f5      	bls.n	800aa30 <memmove+0xa>
 800aa44:	1881      	adds	r1, r0, r2
 800aa46:	1ad2      	subs	r2, r2, r3
 800aa48:	42d3      	cmn	r3, r2
 800aa4a:	d100      	bne.n	800aa4e <memmove+0x28>
 800aa4c:	bd10      	pop	{r4, pc}
 800aa4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa52:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa56:	e7f7      	b.n	800aa48 <memmove+0x22>

0800aa58 <_realloc_r>:
 800aa58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa5a:	4607      	mov	r7, r0
 800aa5c:	4614      	mov	r4, r2
 800aa5e:	460e      	mov	r6, r1
 800aa60:	b921      	cbnz	r1, 800aa6c <_realloc_r+0x14>
 800aa62:	4611      	mov	r1, r2
 800aa64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aa68:	f7ff bc6c 	b.w	800a344 <_malloc_r>
 800aa6c:	b922      	cbnz	r2, 800aa78 <_realloc_r+0x20>
 800aa6e:	f7ff fc1b 	bl	800a2a8 <_free_r>
 800aa72:	4625      	mov	r5, r4
 800aa74:	4628      	mov	r0, r5
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa78:	f000 f814 	bl	800aaa4 <_malloc_usable_size_r>
 800aa7c:	42a0      	cmp	r0, r4
 800aa7e:	d20f      	bcs.n	800aaa0 <_realloc_r+0x48>
 800aa80:	4621      	mov	r1, r4
 800aa82:	4638      	mov	r0, r7
 800aa84:	f7ff fc5e 	bl	800a344 <_malloc_r>
 800aa88:	4605      	mov	r5, r0
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	d0f2      	beq.n	800aa74 <_realloc_r+0x1c>
 800aa8e:	4631      	mov	r1, r6
 800aa90:	4622      	mov	r2, r4
 800aa92:	f7ff ffbd 	bl	800aa10 <memcpy>
 800aa96:	4631      	mov	r1, r6
 800aa98:	4638      	mov	r0, r7
 800aa9a:	f7ff fc05 	bl	800a2a8 <_free_r>
 800aa9e:	e7e9      	b.n	800aa74 <_realloc_r+0x1c>
 800aaa0:	4635      	mov	r5, r6
 800aaa2:	e7e7      	b.n	800aa74 <_realloc_r+0x1c>

0800aaa4 <_malloc_usable_size_r>:
 800aaa4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aaa8:	1f18      	subs	r0, r3, #4
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	bfbc      	itt	lt
 800aaae:	580b      	ldrlt	r3, [r1, r0]
 800aab0:	18c0      	addlt	r0, r0, r3
 800aab2:	4770      	bx	lr
 800aab4:	0000      	movs	r0, r0
	...

0800aab8 <sin>:
 800aab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aaba:	ec51 0b10 	vmov	r0, r1, d0
 800aabe:	4a20      	ldr	r2, [pc, #128]	; (800ab40 <sin+0x88>)
 800aac0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800aac4:	4293      	cmp	r3, r2
 800aac6:	dc07      	bgt.n	800aad8 <sin+0x20>
 800aac8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800ab38 <sin+0x80>
 800aacc:	2000      	movs	r0, #0
 800aace:	f000 fe37 	bl	800b740 <__kernel_sin>
 800aad2:	ec51 0b10 	vmov	r0, r1, d0
 800aad6:	e007      	b.n	800aae8 <sin+0x30>
 800aad8:	4a1a      	ldr	r2, [pc, #104]	; (800ab44 <sin+0x8c>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	dd09      	ble.n	800aaf2 <sin+0x3a>
 800aade:	ee10 2a10 	vmov	r2, s0
 800aae2:	460b      	mov	r3, r1
 800aae4:	f7f5 fbe0 	bl	80002a8 <__aeabi_dsub>
 800aae8:	ec41 0b10 	vmov	d0, r0, r1
 800aaec:	b005      	add	sp, #20
 800aaee:	f85d fb04 	ldr.w	pc, [sp], #4
 800aaf2:	4668      	mov	r0, sp
 800aaf4:	f000 f828 	bl	800ab48 <__ieee754_rem_pio2>
 800aaf8:	f000 0003 	and.w	r0, r0, #3
 800aafc:	2801      	cmp	r0, #1
 800aafe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800ab02:	ed9d 0b00 	vldr	d0, [sp]
 800ab06:	d004      	beq.n	800ab12 <sin+0x5a>
 800ab08:	2802      	cmp	r0, #2
 800ab0a:	d005      	beq.n	800ab18 <sin+0x60>
 800ab0c:	b970      	cbnz	r0, 800ab2c <sin+0x74>
 800ab0e:	2001      	movs	r0, #1
 800ab10:	e7dd      	b.n	800aace <sin+0x16>
 800ab12:	f000 fa0d 	bl	800af30 <__kernel_cos>
 800ab16:	e7dc      	b.n	800aad2 <sin+0x1a>
 800ab18:	2001      	movs	r0, #1
 800ab1a:	f000 fe11 	bl	800b740 <__kernel_sin>
 800ab1e:	ec53 2b10 	vmov	r2, r3, d0
 800ab22:	ee10 0a10 	vmov	r0, s0
 800ab26:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ab2a:	e7dd      	b.n	800aae8 <sin+0x30>
 800ab2c:	f000 fa00 	bl	800af30 <__kernel_cos>
 800ab30:	e7f5      	b.n	800ab1e <sin+0x66>
 800ab32:	bf00      	nop
 800ab34:	f3af 8000 	nop.w
	...
 800ab40:	3fe921fb 	.word	0x3fe921fb
 800ab44:	7fefffff 	.word	0x7fefffff

0800ab48 <__ieee754_rem_pio2>:
 800ab48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab4c:	ec57 6b10 	vmov	r6, r7, d0
 800ab50:	4bc3      	ldr	r3, [pc, #780]	; (800ae60 <__ieee754_rem_pio2+0x318>)
 800ab52:	b08d      	sub	sp, #52	; 0x34
 800ab54:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ab58:	4598      	cmp	r8, r3
 800ab5a:	4604      	mov	r4, r0
 800ab5c:	9704      	str	r7, [sp, #16]
 800ab5e:	dc07      	bgt.n	800ab70 <__ieee754_rem_pio2+0x28>
 800ab60:	2200      	movs	r2, #0
 800ab62:	2300      	movs	r3, #0
 800ab64:	ed84 0b00 	vstr	d0, [r4]
 800ab68:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800ab6c:	2500      	movs	r5, #0
 800ab6e:	e027      	b.n	800abc0 <__ieee754_rem_pio2+0x78>
 800ab70:	4bbc      	ldr	r3, [pc, #752]	; (800ae64 <__ieee754_rem_pio2+0x31c>)
 800ab72:	4598      	cmp	r8, r3
 800ab74:	dc75      	bgt.n	800ac62 <__ieee754_rem_pio2+0x11a>
 800ab76:	9b04      	ldr	r3, [sp, #16]
 800ab78:	4dbb      	ldr	r5, [pc, #748]	; (800ae68 <__ieee754_rem_pio2+0x320>)
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	ee10 0a10 	vmov	r0, s0
 800ab80:	a3a9      	add	r3, pc, #676	; (adr r3, 800ae28 <__ieee754_rem_pio2+0x2e0>)
 800ab82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab86:	4639      	mov	r1, r7
 800ab88:	dd36      	ble.n	800abf8 <__ieee754_rem_pio2+0xb0>
 800ab8a:	f7f5 fb8d 	bl	80002a8 <__aeabi_dsub>
 800ab8e:	45a8      	cmp	r8, r5
 800ab90:	4606      	mov	r6, r0
 800ab92:	460f      	mov	r7, r1
 800ab94:	d018      	beq.n	800abc8 <__ieee754_rem_pio2+0x80>
 800ab96:	a3a6      	add	r3, pc, #664	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x2e8>)
 800ab98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab9c:	f7f5 fb84 	bl	80002a8 <__aeabi_dsub>
 800aba0:	4602      	mov	r2, r0
 800aba2:	460b      	mov	r3, r1
 800aba4:	e9c4 2300 	strd	r2, r3, [r4]
 800aba8:	4630      	mov	r0, r6
 800abaa:	4639      	mov	r1, r7
 800abac:	f7f5 fb7c 	bl	80002a8 <__aeabi_dsub>
 800abb0:	a39f      	add	r3, pc, #636	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x2e8>)
 800abb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb6:	f7f5 fb77 	bl	80002a8 <__aeabi_dsub>
 800abba:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800abbe:	2501      	movs	r5, #1
 800abc0:	4628      	mov	r0, r5
 800abc2:	b00d      	add	sp, #52	; 0x34
 800abc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc8:	a39b      	add	r3, pc, #620	; (adr r3, 800ae38 <__ieee754_rem_pio2+0x2f0>)
 800abca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abce:	f7f5 fb6b 	bl	80002a8 <__aeabi_dsub>
 800abd2:	a39b      	add	r3, pc, #620	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x2f8>)
 800abd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd8:	4606      	mov	r6, r0
 800abda:	460f      	mov	r7, r1
 800abdc:	f7f5 fb64 	bl	80002a8 <__aeabi_dsub>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	e9c4 2300 	strd	r2, r3, [r4]
 800abe8:	4630      	mov	r0, r6
 800abea:	4639      	mov	r1, r7
 800abec:	f7f5 fb5c 	bl	80002a8 <__aeabi_dsub>
 800abf0:	a393      	add	r3, pc, #588	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x2f8>)
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	e7de      	b.n	800abb6 <__ieee754_rem_pio2+0x6e>
 800abf8:	f7f5 fb58 	bl	80002ac <__adddf3>
 800abfc:	45a8      	cmp	r8, r5
 800abfe:	4606      	mov	r6, r0
 800ac00:	460f      	mov	r7, r1
 800ac02:	d016      	beq.n	800ac32 <__ieee754_rem_pio2+0xea>
 800ac04:	a38a      	add	r3, pc, #552	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x2e8>)
 800ac06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac0a:	f7f5 fb4f 	bl	80002ac <__adddf3>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	460b      	mov	r3, r1
 800ac12:	e9c4 2300 	strd	r2, r3, [r4]
 800ac16:	4630      	mov	r0, r6
 800ac18:	4639      	mov	r1, r7
 800ac1a:	f7f5 fb45 	bl	80002a8 <__aeabi_dsub>
 800ac1e:	a384      	add	r3, pc, #528	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x2e8>)
 800ac20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac24:	f7f5 fb42 	bl	80002ac <__adddf3>
 800ac28:	f04f 35ff 	mov.w	r5, #4294967295
 800ac2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ac30:	e7c6      	b.n	800abc0 <__ieee754_rem_pio2+0x78>
 800ac32:	a381      	add	r3, pc, #516	; (adr r3, 800ae38 <__ieee754_rem_pio2+0x2f0>)
 800ac34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac38:	f7f5 fb38 	bl	80002ac <__adddf3>
 800ac3c:	a380      	add	r3, pc, #512	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x2f8>)
 800ac3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac42:	4606      	mov	r6, r0
 800ac44:	460f      	mov	r7, r1
 800ac46:	f7f5 fb31 	bl	80002ac <__adddf3>
 800ac4a:	4602      	mov	r2, r0
 800ac4c:	460b      	mov	r3, r1
 800ac4e:	e9c4 2300 	strd	r2, r3, [r4]
 800ac52:	4630      	mov	r0, r6
 800ac54:	4639      	mov	r1, r7
 800ac56:	f7f5 fb27 	bl	80002a8 <__aeabi_dsub>
 800ac5a:	a379      	add	r3, pc, #484	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x2f8>)
 800ac5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac60:	e7e0      	b.n	800ac24 <__ieee754_rem_pio2+0xdc>
 800ac62:	4b82      	ldr	r3, [pc, #520]	; (800ae6c <__ieee754_rem_pio2+0x324>)
 800ac64:	4598      	cmp	r8, r3
 800ac66:	f300 80d0 	bgt.w	800ae0a <__ieee754_rem_pio2+0x2c2>
 800ac6a:	f000 fe23 	bl	800b8b4 <fabs>
 800ac6e:	ec57 6b10 	vmov	r6, r7, d0
 800ac72:	ee10 0a10 	vmov	r0, s0
 800ac76:	a374      	add	r3, pc, #464	; (adr r3, 800ae48 <__ieee754_rem_pio2+0x300>)
 800ac78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7c:	4639      	mov	r1, r7
 800ac7e:	f7f5 fccb 	bl	8000618 <__aeabi_dmul>
 800ac82:	2200      	movs	r2, #0
 800ac84:	4b7a      	ldr	r3, [pc, #488]	; (800ae70 <__ieee754_rem_pio2+0x328>)
 800ac86:	f7f5 fb11 	bl	80002ac <__adddf3>
 800ac8a:	f7f5 ff5f 	bl	8000b4c <__aeabi_d2iz>
 800ac8e:	4605      	mov	r5, r0
 800ac90:	f7f5 fc58 	bl	8000544 <__aeabi_i2d>
 800ac94:	a364      	add	r3, pc, #400	; (adr r3, 800ae28 <__ieee754_rem_pio2+0x2e0>)
 800ac96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ac9e:	f7f5 fcbb 	bl	8000618 <__aeabi_dmul>
 800aca2:	4602      	mov	r2, r0
 800aca4:	460b      	mov	r3, r1
 800aca6:	4630      	mov	r0, r6
 800aca8:	4639      	mov	r1, r7
 800acaa:	f7f5 fafd 	bl	80002a8 <__aeabi_dsub>
 800acae:	a360      	add	r3, pc, #384	; (adr r3, 800ae30 <__ieee754_rem_pio2+0x2e8>)
 800acb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb4:	4682      	mov	sl, r0
 800acb6:	468b      	mov	fp, r1
 800acb8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800acbc:	f7f5 fcac 	bl	8000618 <__aeabi_dmul>
 800acc0:	2d1f      	cmp	r5, #31
 800acc2:	4606      	mov	r6, r0
 800acc4:	460f      	mov	r7, r1
 800acc6:	dc0c      	bgt.n	800ace2 <__ieee754_rem_pio2+0x19a>
 800acc8:	1e6a      	subs	r2, r5, #1
 800acca:	4b6a      	ldr	r3, [pc, #424]	; (800ae74 <__ieee754_rem_pio2+0x32c>)
 800accc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acd0:	4543      	cmp	r3, r8
 800acd2:	d006      	beq.n	800ace2 <__ieee754_rem_pio2+0x19a>
 800acd4:	4632      	mov	r2, r6
 800acd6:	463b      	mov	r3, r7
 800acd8:	4650      	mov	r0, sl
 800acda:	4659      	mov	r1, fp
 800acdc:	f7f5 fae4 	bl	80002a8 <__aeabi_dsub>
 800ace0:	e00e      	b.n	800ad00 <__ieee754_rem_pio2+0x1b8>
 800ace2:	4632      	mov	r2, r6
 800ace4:	463b      	mov	r3, r7
 800ace6:	4650      	mov	r0, sl
 800ace8:	4659      	mov	r1, fp
 800acea:	f7f5 fadd 	bl	80002a8 <__aeabi_dsub>
 800acee:	ea4f 5328 	mov.w	r3, r8, asr #20
 800acf2:	9305      	str	r3, [sp, #20]
 800acf4:	9a05      	ldr	r2, [sp, #20]
 800acf6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800acfa:	1ad3      	subs	r3, r2, r3
 800acfc:	2b10      	cmp	r3, #16
 800acfe:	dc02      	bgt.n	800ad06 <__ieee754_rem_pio2+0x1be>
 800ad00:	e9c4 0100 	strd	r0, r1, [r4]
 800ad04:	e039      	b.n	800ad7a <__ieee754_rem_pio2+0x232>
 800ad06:	a34c      	add	r3, pc, #304	; (adr r3, 800ae38 <__ieee754_rem_pio2+0x2f0>)
 800ad08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad10:	f7f5 fc82 	bl	8000618 <__aeabi_dmul>
 800ad14:	4606      	mov	r6, r0
 800ad16:	460f      	mov	r7, r1
 800ad18:	4602      	mov	r2, r0
 800ad1a:	460b      	mov	r3, r1
 800ad1c:	4650      	mov	r0, sl
 800ad1e:	4659      	mov	r1, fp
 800ad20:	f7f5 fac2 	bl	80002a8 <__aeabi_dsub>
 800ad24:	4602      	mov	r2, r0
 800ad26:	460b      	mov	r3, r1
 800ad28:	4680      	mov	r8, r0
 800ad2a:	4689      	mov	r9, r1
 800ad2c:	4650      	mov	r0, sl
 800ad2e:	4659      	mov	r1, fp
 800ad30:	f7f5 faba 	bl	80002a8 <__aeabi_dsub>
 800ad34:	4632      	mov	r2, r6
 800ad36:	463b      	mov	r3, r7
 800ad38:	f7f5 fab6 	bl	80002a8 <__aeabi_dsub>
 800ad3c:	a340      	add	r3, pc, #256	; (adr r3, 800ae40 <__ieee754_rem_pio2+0x2f8>)
 800ad3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad42:	4606      	mov	r6, r0
 800ad44:	460f      	mov	r7, r1
 800ad46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad4a:	f7f5 fc65 	bl	8000618 <__aeabi_dmul>
 800ad4e:	4632      	mov	r2, r6
 800ad50:	463b      	mov	r3, r7
 800ad52:	f7f5 faa9 	bl	80002a8 <__aeabi_dsub>
 800ad56:	4602      	mov	r2, r0
 800ad58:	460b      	mov	r3, r1
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	460f      	mov	r7, r1
 800ad5e:	4640      	mov	r0, r8
 800ad60:	4649      	mov	r1, r9
 800ad62:	f7f5 faa1 	bl	80002a8 <__aeabi_dsub>
 800ad66:	9a05      	ldr	r2, [sp, #20]
 800ad68:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800ad6c:	1ad3      	subs	r3, r2, r3
 800ad6e:	2b31      	cmp	r3, #49	; 0x31
 800ad70:	dc20      	bgt.n	800adb4 <__ieee754_rem_pio2+0x26c>
 800ad72:	e9c4 0100 	strd	r0, r1, [r4]
 800ad76:	46c2      	mov	sl, r8
 800ad78:	46cb      	mov	fp, r9
 800ad7a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800ad7e:	4650      	mov	r0, sl
 800ad80:	4642      	mov	r2, r8
 800ad82:	464b      	mov	r3, r9
 800ad84:	4659      	mov	r1, fp
 800ad86:	f7f5 fa8f 	bl	80002a8 <__aeabi_dsub>
 800ad8a:	463b      	mov	r3, r7
 800ad8c:	4632      	mov	r2, r6
 800ad8e:	f7f5 fa8b 	bl	80002a8 <__aeabi_dsub>
 800ad92:	9b04      	ldr	r3, [sp, #16]
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ad9a:	f6bf af11 	bge.w	800abc0 <__ieee754_rem_pio2+0x78>
 800ad9e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ada2:	6063      	str	r3, [r4, #4]
 800ada4:	f8c4 8000 	str.w	r8, [r4]
 800ada8:	60a0      	str	r0, [r4, #8]
 800adaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adae:	60e3      	str	r3, [r4, #12]
 800adb0:	426d      	negs	r5, r5
 800adb2:	e705      	b.n	800abc0 <__ieee754_rem_pio2+0x78>
 800adb4:	a326      	add	r3, pc, #152	; (adr r3, 800ae50 <__ieee754_rem_pio2+0x308>)
 800adb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adbe:	f7f5 fc2b 	bl	8000618 <__aeabi_dmul>
 800adc2:	4606      	mov	r6, r0
 800adc4:	460f      	mov	r7, r1
 800adc6:	4602      	mov	r2, r0
 800adc8:	460b      	mov	r3, r1
 800adca:	4640      	mov	r0, r8
 800adcc:	4649      	mov	r1, r9
 800adce:	f7f5 fa6b 	bl	80002a8 <__aeabi_dsub>
 800add2:	4602      	mov	r2, r0
 800add4:	460b      	mov	r3, r1
 800add6:	4682      	mov	sl, r0
 800add8:	468b      	mov	fp, r1
 800adda:	4640      	mov	r0, r8
 800addc:	4649      	mov	r1, r9
 800adde:	f7f5 fa63 	bl	80002a8 <__aeabi_dsub>
 800ade2:	4632      	mov	r2, r6
 800ade4:	463b      	mov	r3, r7
 800ade6:	f7f5 fa5f 	bl	80002a8 <__aeabi_dsub>
 800adea:	a31b      	add	r3, pc, #108	; (adr r3, 800ae58 <__ieee754_rem_pio2+0x310>)
 800adec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf0:	4606      	mov	r6, r0
 800adf2:	460f      	mov	r7, r1
 800adf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adf8:	f7f5 fc0e 	bl	8000618 <__aeabi_dmul>
 800adfc:	4632      	mov	r2, r6
 800adfe:	463b      	mov	r3, r7
 800ae00:	f7f5 fa52 	bl	80002a8 <__aeabi_dsub>
 800ae04:	4606      	mov	r6, r0
 800ae06:	460f      	mov	r7, r1
 800ae08:	e764      	b.n	800acd4 <__ieee754_rem_pio2+0x18c>
 800ae0a:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <__ieee754_rem_pio2+0x330>)
 800ae0c:	4598      	cmp	r8, r3
 800ae0e:	dd35      	ble.n	800ae7c <__ieee754_rem_pio2+0x334>
 800ae10:	ee10 2a10 	vmov	r2, s0
 800ae14:	463b      	mov	r3, r7
 800ae16:	4630      	mov	r0, r6
 800ae18:	4639      	mov	r1, r7
 800ae1a:	f7f5 fa45 	bl	80002a8 <__aeabi_dsub>
 800ae1e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ae22:	e9c4 0100 	strd	r0, r1, [r4]
 800ae26:	e6a1      	b.n	800ab6c <__ieee754_rem_pio2+0x24>
 800ae28:	54400000 	.word	0x54400000
 800ae2c:	3ff921fb 	.word	0x3ff921fb
 800ae30:	1a626331 	.word	0x1a626331
 800ae34:	3dd0b461 	.word	0x3dd0b461
 800ae38:	1a600000 	.word	0x1a600000
 800ae3c:	3dd0b461 	.word	0x3dd0b461
 800ae40:	2e037073 	.word	0x2e037073
 800ae44:	3ba3198a 	.word	0x3ba3198a
 800ae48:	6dc9c883 	.word	0x6dc9c883
 800ae4c:	3fe45f30 	.word	0x3fe45f30
 800ae50:	2e000000 	.word	0x2e000000
 800ae54:	3ba3198a 	.word	0x3ba3198a
 800ae58:	252049c1 	.word	0x252049c1
 800ae5c:	397b839a 	.word	0x397b839a
 800ae60:	3fe921fb 	.word	0x3fe921fb
 800ae64:	4002d97b 	.word	0x4002d97b
 800ae68:	3ff921fb 	.word	0x3ff921fb
 800ae6c:	413921fb 	.word	0x413921fb
 800ae70:	3fe00000 	.word	0x3fe00000
 800ae74:	0800bb9c 	.word	0x0800bb9c
 800ae78:	7fefffff 	.word	0x7fefffff
 800ae7c:	ea4f 5528 	mov.w	r5, r8, asr #20
 800ae80:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800ae84:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800ae88:	4630      	mov	r0, r6
 800ae8a:	460f      	mov	r7, r1
 800ae8c:	f7f5 fe5e 	bl	8000b4c <__aeabi_d2iz>
 800ae90:	f7f5 fb58 	bl	8000544 <__aeabi_i2d>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4630      	mov	r0, r6
 800ae9a:	4639      	mov	r1, r7
 800ae9c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800aea0:	f7f5 fa02 	bl	80002a8 <__aeabi_dsub>
 800aea4:	2200      	movs	r2, #0
 800aea6:	4b1f      	ldr	r3, [pc, #124]	; (800af24 <__ieee754_rem_pio2+0x3dc>)
 800aea8:	f7f5 fbb6 	bl	8000618 <__aeabi_dmul>
 800aeac:	460f      	mov	r7, r1
 800aeae:	4606      	mov	r6, r0
 800aeb0:	f7f5 fe4c 	bl	8000b4c <__aeabi_d2iz>
 800aeb4:	f7f5 fb46 	bl	8000544 <__aeabi_i2d>
 800aeb8:	4602      	mov	r2, r0
 800aeba:	460b      	mov	r3, r1
 800aebc:	4630      	mov	r0, r6
 800aebe:	4639      	mov	r1, r7
 800aec0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aec4:	f7f5 f9f0 	bl	80002a8 <__aeabi_dsub>
 800aec8:	2200      	movs	r2, #0
 800aeca:	4b16      	ldr	r3, [pc, #88]	; (800af24 <__ieee754_rem_pio2+0x3dc>)
 800aecc:	f7f5 fba4 	bl	8000618 <__aeabi_dmul>
 800aed0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800aed4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800aed8:	f04f 0803 	mov.w	r8, #3
 800aedc:	2600      	movs	r6, #0
 800aede:	2700      	movs	r7, #0
 800aee0:	4632      	mov	r2, r6
 800aee2:	463b      	mov	r3, r7
 800aee4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800aee8:	f108 3aff 	add.w	sl, r8, #4294967295
 800aeec:	f7f5 fdfc 	bl	8000ae8 <__aeabi_dcmpeq>
 800aef0:	b9b0      	cbnz	r0, 800af20 <__ieee754_rem_pio2+0x3d8>
 800aef2:	4b0d      	ldr	r3, [pc, #52]	; (800af28 <__ieee754_rem_pio2+0x3e0>)
 800aef4:	9301      	str	r3, [sp, #4]
 800aef6:	2302      	movs	r3, #2
 800aef8:	9300      	str	r3, [sp, #0]
 800aefa:	462a      	mov	r2, r5
 800aefc:	4643      	mov	r3, r8
 800aefe:	4621      	mov	r1, r4
 800af00:	a806      	add	r0, sp, #24
 800af02:	f000 f8dd 	bl	800b0c0 <__kernel_rem_pio2>
 800af06:	9b04      	ldr	r3, [sp, #16]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	4605      	mov	r5, r0
 800af0c:	f6bf ae58 	bge.w	800abc0 <__ieee754_rem_pio2+0x78>
 800af10:	6863      	ldr	r3, [r4, #4]
 800af12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af16:	6063      	str	r3, [r4, #4]
 800af18:	68e3      	ldr	r3, [r4, #12]
 800af1a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800af1e:	e746      	b.n	800adae <__ieee754_rem_pio2+0x266>
 800af20:	46d0      	mov	r8, sl
 800af22:	e7dd      	b.n	800aee0 <__ieee754_rem_pio2+0x398>
 800af24:	41700000 	.word	0x41700000
 800af28:	0800bc1c 	.word	0x0800bc1c
 800af2c:	00000000 	.word	0x00000000

0800af30 <__kernel_cos>:
 800af30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af34:	ec59 8b10 	vmov	r8, r9, d0
 800af38:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800af3c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800af40:	ed2d 8b02 	vpush	{d8}
 800af44:	eeb0 8a41 	vmov.f32	s16, s2
 800af48:	eef0 8a61 	vmov.f32	s17, s3
 800af4c:	da07      	bge.n	800af5e <__kernel_cos+0x2e>
 800af4e:	ee10 0a10 	vmov	r0, s0
 800af52:	4649      	mov	r1, r9
 800af54:	f7f5 fdfa 	bl	8000b4c <__aeabi_d2iz>
 800af58:	2800      	cmp	r0, #0
 800af5a:	f000 8089 	beq.w	800b070 <__kernel_cos+0x140>
 800af5e:	4642      	mov	r2, r8
 800af60:	464b      	mov	r3, r9
 800af62:	4640      	mov	r0, r8
 800af64:	4649      	mov	r1, r9
 800af66:	f7f5 fb57 	bl	8000618 <__aeabi_dmul>
 800af6a:	2200      	movs	r2, #0
 800af6c:	4b4e      	ldr	r3, [pc, #312]	; (800b0a8 <__kernel_cos+0x178>)
 800af6e:	4604      	mov	r4, r0
 800af70:	460d      	mov	r5, r1
 800af72:	f7f5 fb51 	bl	8000618 <__aeabi_dmul>
 800af76:	a340      	add	r3, pc, #256	; (adr r3, 800b078 <__kernel_cos+0x148>)
 800af78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af7c:	4682      	mov	sl, r0
 800af7e:	468b      	mov	fp, r1
 800af80:	4620      	mov	r0, r4
 800af82:	4629      	mov	r1, r5
 800af84:	f7f5 fb48 	bl	8000618 <__aeabi_dmul>
 800af88:	a33d      	add	r3, pc, #244	; (adr r3, 800b080 <__kernel_cos+0x150>)
 800af8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8e:	f7f5 f98d 	bl	80002ac <__adddf3>
 800af92:	4622      	mov	r2, r4
 800af94:	462b      	mov	r3, r5
 800af96:	f7f5 fb3f 	bl	8000618 <__aeabi_dmul>
 800af9a:	a33b      	add	r3, pc, #236	; (adr r3, 800b088 <__kernel_cos+0x158>)
 800af9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa0:	f7f5 f982 	bl	80002a8 <__aeabi_dsub>
 800afa4:	4622      	mov	r2, r4
 800afa6:	462b      	mov	r3, r5
 800afa8:	f7f5 fb36 	bl	8000618 <__aeabi_dmul>
 800afac:	a338      	add	r3, pc, #224	; (adr r3, 800b090 <__kernel_cos+0x160>)
 800afae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb2:	f7f5 f97b 	bl	80002ac <__adddf3>
 800afb6:	4622      	mov	r2, r4
 800afb8:	462b      	mov	r3, r5
 800afba:	f7f5 fb2d 	bl	8000618 <__aeabi_dmul>
 800afbe:	a336      	add	r3, pc, #216	; (adr r3, 800b098 <__kernel_cos+0x168>)
 800afc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afc4:	f7f5 f970 	bl	80002a8 <__aeabi_dsub>
 800afc8:	4622      	mov	r2, r4
 800afca:	462b      	mov	r3, r5
 800afcc:	f7f5 fb24 	bl	8000618 <__aeabi_dmul>
 800afd0:	a333      	add	r3, pc, #204	; (adr r3, 800b0a0 <__kernel_cos+0x170>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 f969 	bl	80002ac <__adddf3>
 800afda:	4622      	mov	r2, r4
 800afdc:	462b      	mov	r3, r5
 800afde:	f7f5 fb1b 	bl	8000618 <__aeabi_dmul>
 800afe2:	4622      	mov	r2, r4
 800afe4:	462b      	mov	r3, r5
 800afe6:	f7f5 fb17 	bl	8000618 <__aeabi_dmul>
 800afea:	ec53 2b18 	vmov	r2, r3, d8
 800afee:	4604      	mov	r4, r0
 800aff0:	460d      	mov	r5, r1
 800aff2:	4640      	mov	r0, r8
 800aff4:	4649      	mov	r1, r9
 800aff6:	f7f5 fb0f 	bl	8000618 <__aeabi_dmul>
 800affa:	460b      	mov	r3, r1
 800affc:	4602      	mov	r2, r0
 800affe:	4629      	mov	r1, r5
 800b000:	4620      	mov	r0, r4
 800b002:	f7f5 f951 	bl	80002a8 <__aeabi_dsub>
 800b006:	4b29      	ldr	r3, [pc, #164]	; (800b0ac <__kernel_cos+0x17c>)
 800b008:	429e      	cmp	r6, r3
 800b00a:	4680      	mov	r8, r0
 800b00c:	4689      	mov	r9, r1
 800b00e:	dc11      	bgt.n	800b034 <__kernel_cos+0x104>
 800b010:	4602      	mov	r2, r0
 800b012:	460b      	mov	r3, r1
 800b014:	4650      	mov	r0, sl
 800b016:	4659      	mov	r1, fp
 800b018:	f7f5 f946 	bl	80002a8 <__aeabi_dsub>
 800b01c:	460b      	mov	r3, r1
 800b01e:	4924      	ldr	r1, [pc, #144]	; (800b0b0 <__kernel_cos+0x180>)
 800b020:	4602      	mov	r2, r0
 800b022:	2000      	movs	r0, #0
 800b024:	f7f5 f940 	bl	80002a8 <__aeabi_dsub>
 800b028:	ecbd 8b02 	vpop	{d8}
 800b02c:	ec41 0b10 	vmov	d0, r0, r1
 800b030:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b034:	4b1f      	ldr	r3, [pc, #124]	; (800b0b4 <__kernel_cos+0x184>)
 800b036:	491e      	ldr	r1, [pc, #120]	; (800b0b0 <__kernel_cos+0x180>)
 800b038:	429e      	cmp	r6, r3
 800b03a:	bfcc      	ite	gt
 800b03c:	4d1e      	ldrgt	r5, [pc, #120]	; (800b0b8 <__kernel_cos+0x188>)
 800b03e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800b042:	2400      	movs	r4, #0
 800b044:	4622      	mov	r2, r4
 800b046:	462b      	mov	r3, r5
 800b048:	2000      	movs	r0, #0
 800b04a:	f7f5 f92d 	bl	80002a8 <__aeabi_dsub>
 800b04e:	4622      	mov	r2, r4
 800b050:	4606      	mov	r6, r0
 800b052:	460f      	mov	r7, r1
 800b054:	462b      	mov	r3, r5
 800b056:	4650      	mov	r0, sl
 800b058:	4659      	mov	r1, fp
 800b05a:	f7f5 f925 	bl	80002a8 <__aeabi_dsub>
 800b05e:	4642      	mov	r2, r8
 800b060:	464b      	mov	r3, r9
 800b062:	f7f5 f921 	bl	80002a8 <__aeabi_dsub>
 800b066:	4602      	mov	r2, r0
 800b068:	460b      	mov	r3, r1
 800b06a:	4630      	mov	r0, r6
 800b06c:	4639      	mov	r1, r7
 800b06e:	e7d9      	b.n	800b024 <__kernel_cos+0xf4>
 800b070:	2000      	movs	r0, #0
 800b072:	490f      	ldr	r1, [pc, #60]	; (800b0b0 <__kernel_cos+0x180>)
 800b074:	e7d8      	b.n	800b028 <__kernel_cos+0xf8>
 800b076:	bf00      	nop
 800b078:	be8838d4 	.word	0xbe8838d4
 800b07c:	bda8fae9 	.word	0xbda8fae9
 800b080:	bdb4b1c4 	.word	0xbdb4b1c4
 800b084:	3e21ee9e 	.word	0x3e21ee9e
 800b088:	809c52ad 	.word	0x809c52ad
 800b08c:	3e927e4f 	.word	0x3e927e4f
 800b090:	19cb1590 	.word	0x19cb1590
 800b094:	3efa01a0 	.word	0x3efa01a0
 800b098:	16c15177 	.word	0x16c15177
 800b09c:	3f56c16c 	.word	0x3f56c16c
 800b0a0:	5555554c 	.word	0x5555554c
 800b0a4:	3fa55555 	.word	0x3fa55555
 800b0a8:	3fe00000 	.word	0x3fe00000
 800b0ac:	3fd33332 	.word	0x3fd33332
 800b0b0:	3ff00000 	.word	0x3ff00000
 800b0b4:	3fe90000 	.word	0x3fe90000
 800b0b8:	3fd20000 	.word	0x3fd20000
 800b0bc:	00000000 	.word	0x00000000

0800b0c0 <__kernel_rem_pio2>:
 800b0c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0c4:	ed2d 8b02 	vpush	{d8}
 800b0c8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b0cc:	1ed4      	subs	r4, r2, #3
 800b0ce:	9308      	str	r3, [sp, #32]
 800b0d0:	9101      	str	r1, [sp, #4]
 800b0d2:	4bc5      	ldr	r3, [pc, #788]	; (800b3e8 <__kernel_rem_pio2+0x328>)
 800b0d4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b0d6:	9009      	str	r0, [sp, #36]	; 0x24
 800b0d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0dc:	9304      	str	r3, [sp, #16]
 800b0de:	9b08      	ldr	r3, [sp, #32]
 800b0e0:	3b01      	subs	r3, #1
 800b0e2:	9307      	str	r3, [sp, #28]
 800b0e4:	2318      	movs	r3, #24
 800b0e6:	fb94 f4f3 	sdiv	r4, r4, r3
 800b0ea:	f06f 0317 	mvn.w	r3, #23
 800b0ee:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800b0f2:	fb04 3303 	mla	r3, r4, r3, r3
 800b0f6:	eb03 0a02 	add.w	sl, r3, r2
 800b0fa:	9b04      	ldr	r3, [sp, #16]
 800b0fc:	9a07      	ldr	r2, [sp, #28]
 800b0fe:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b3d8 <__kernel_rem_pio2+0x318>
 800b102:	eb03 0802 	add.w	r8, r3, r2
 800b106:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b108:	1aa7      	subs	r7, r4, r2
 800b10a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b10e:	ae22      	add	r6, sp, #136	; 0x88
 800b110:	2500      	movs	r5, #0
 800b112:	4545      	cmp	r5, r8
 800b114:	dd13      	ble.n	800b13e <__kernel_rem_pio2+0x7e>
 800b116:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b3d8 <__kernel_rem_pio2+0x318>
 800b11a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800b11e:	2600      	movs	r6, #0
 800b120:	9b04      	ldr	r3, [sp, #16]
 800b122:	429e      	cmp	r6, r3
 800b124:	dc32      	bgt.n	800b18c <__kernel_rem_pio2+0xcc>
 800b126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b128:	9302      	str	r3, [sp, #8]
 800b12a:	9b08      	ldr	r3, [sp, #32]
 800b12c:	199d      	adds	r5, r3, r6
 800b12e:	ab22      	add	r3, sp, #136	; 0x88
 800b130:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b134:	9306      	str	r3, [sp, #24]
 800b136:	ec59 8b18 	vmov	r8, r9, d8
 800b13a:	2700      	movs	r7, #0
 800b13c:	e01f      	b.n	800b17e <__kernel_rem_pio2+0xbe>
 800b13e:	42ef      	cmn	r7, r5
 800b140:	d407      	bmi.n	800b152 <__kernel_rem_pio2+0x92>
 800b142:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b146:	f7f5 f9fd 	bl	8000544 <__aeabi_i2d>
 800b14a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b14e:	3501      	adds	r5, #1
 800b150:	e7df      	b.n	800b112 <__kernel_rem_pio2+0x52>
 800b152:	ec51 0b18 	vmov	r0, r1, d8
 800b156:	e7f8      	b.n	800b14a <__kernel_rem_pio2+0x8a>
 800b158:	9906      	ldr	r1, [sp, #24]
 800b15a:	9d02      	ldr	r5, [sp, #8]
 800b15c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800b160:	9106      	str	r1, [sp, #24]
 800b162:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800b166:	9502      	str	r5, [sp, #8]
 800b168:	f7f5 fa56 	bl	8000618 <__aeabi_dmul>
 800b16c:	4602      	mov	r2, r0
 800b16e:	460b      	mov	r3, r1
 800b170:	4640      	mov	r0, r8
 800b172:	4649      	mov	r1, r9
 800b174:	f7f5 f89a 	bl	80002ac <__adddf3>
 800b178:	3701      	adds	r7, #1
 800b17a:	4680      	mov	r8, r0
 800b17c:	4689      	mov	r9, r1
 800b17e:	9b07      	ldr	r3, [sp, #28]
 800b180:	429f      	cmp	r7, r3
 800b182:	dde9      	ble.n	800b158 <__kernel_rem_pio2+0x98>
 800b184:	e8eb 8902 	strd	r8, r9, [fp], #8
 800b188:	3601      	adds	r6, #1
 800b18a:	e7c9      	b.n	800b120 <__kernel_rem_pio2+0x60>
 800b18c:	9b04      	ldr	r3, [sp, #16]
 800b18e:	aa0e      	add	r2, sp, #56	; 0x38
 800b190:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b194:	930c      	str	r3, [sp, #48]	; 0x30
 800b196:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800b198:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800b19c:	9c04      	ldr	r4, [sp, #16]
 800b19e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b1a0:	ab9a      	add	r3, sp, #616	; 0x268
 800b1a2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800b1a6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b1aa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1ae:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800b1b2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800b1b6:	ab9a      	add	r3, sp, #616	; 0x268
 800b1b8:	445b      	add	r3, fp
 800b1ba:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800b1be:	2500      	movs	r5, #0
 800b1c0:	1b63      	subs	r3, r4, r5
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	dc78      	bgt.n	800b2b8 <__kernel_rem_pio2+0x1f8>
 800b1c6:	4650      	mov	r0, sl
 800b1c8:	ec49 8b10 	vmov	d0, r8, r9
 800b1cc:	f000 fc00 	bl	800b9d0 <scalbn>
 800b1d0:	ec57 6b10 	vmov	r6, r7, d0
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800b1da:	ee10 0a10 	vmov	r0, s0
 800b1de:	4639      	mov	r1, r7
 800b1e0:	f7f5 fa1a 	bl	8000618 <__aeabi_dmul>
 800b1e4:	ec41 0b10 	vmov	d0, r0, r1
 800b1e8:	f000 fb6e 	bl	800b8c8 <floor>
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	ec51 0b10 	vmov	r0, r1, d0
 800b1f2:	4b7e      	ldr	r3, [pc, #504]	; (800b3ec <__kernel_rem_pio2+0x32c>)
 800b1f4:	f7f5 fa10 	bl	8000618 <__aeabi_dmul>
 800b1f8:	4602      	mov	r2, r0
 800b1fa:	460b      	mov	r3, r1
 800b1fc:	4630      	mov	r0, r6
 800b1fe:	4639      	mov	r1, r7
 800b200:	f7f5 f852 	bl	80002a8 <__aeabi_dsub>
 800b204:	460f      	mov	r7, r1
 800b206:	4606      	mov	r6, r0
 800b208:	f7f5 fca0 	bl	8000b4c <__aeabi_d2iz>
 800b20c:	9006      	str	r0, [sp, #24]
 800b20e:	f7f5 f999 	bl	8000544 <__aeabi_i2d>
 800b212:	4602      	mov	r2, r0
 800b214:	460b      	mov	r3, r1
 800b216:	4630      	mov	r0, r6
 800b218:	4639      	mov	r1, r7
 800b21a:	f7f5 f845 	bl	80002a8 <__aeabi_dsub>
 800b21e:	f1ba 0f00 	cmp.w	sl, #0
 800b222:	4606      	mov	r6, r0
 800b224:	460f      	mov	r7, r1
 800b226:	dd6c      	ble.n	800b302 <__kernel_rem_pio2+0x242>
 800b228:	1e62      	subs	r2, r4, #1
 800b22a:	ab0e      	add	r3, sp, #56	; 0x38
 800b22c:	f1ca 0118 	rsb	r1, sl, #24
 800b230:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800b234:	9d06      	ldr	r5, [sp, #24]
 800b236:	fa40 f301 	asr.w	r3, r0, r1
 800b23a:	441d      	add	r5, r3
 800b23c:	408b      	lsls	r3, r1
 800b23e:	1ac0      	subs	r0, r0, r3
 800b240:	ab0e      	add	r3, sp, #56	; 0x38
 800b242:	9506      	str	r5, [sp, #24]
 800b244:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800b248:	f1ca 0317 	rsb	r3, sl, #23
 800b24c:	fa40 f303 	asr.w	r3, r0, r3
 800b250:	9302      	str	r3, [sp, #8]
 800b252:	9b02      	ldr	r3, [sp, #8]
 800b254:	2b00      	cmp	r3, #0
 800b256:	dd62      	ble.n	800b31e <__kernel_rem_pio2+0x25e>
 800b258:	9b06      	ldr	r3, [sp, #24]
 800b25a:	2200      	movs	r2, #0
 800b25c:	3301      	adds	r3, #1
 800b25e:	9306      	str	r3, [sp, #24]
 800b260:	4615      	mov	r5, r2
 800b262:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800b266:	4294      	cmp	r4, r2
 800b268:	f300 8095 	bgt.w	800b396 <__kernel_rem_pio2+0x2d6>
 800b26c:	f1ba 0f00 	cmp.w	sl, #0
 800b270:	dd07      	ble.n	800b282 <__kernel_rem_pio2+0x1c2>
 800b272:	f1ba 0f01 	cmp.w	sl, #1
 800b276:	f000 80a2 	beq.w	800b3be <__kernel_rem_pio2+0x2fe>
 800b27a:	f1ba 0f02 	cmp.w	sl, #2
 800b27e:	f000 80c1 	beq.w	800b404 <__kernel_rem_pio2+0x344>
 800b282:	9b02      	ldr	r3, [sp, #8]
 800b284:	2b02      	cmp	r3, #2
 800b286:	d14a      	bne.n	800b31e <__kernel_rem_pio2+0x25e>
 800b288:	4632      	mov	r2, r6
 800b28a:	463b      	mov	r3, r7
 800b28c:	2000      	movs	r0, #0
 800b28e:	4958      	ldr	r1, [pc, #352]	; (800b3f0 <__kernel_rem_pio2+0x330>)
 800b290:	f7f5 f80a 	bl	80002a8 <__aeabi_dsub>
 800b294:	4606      	mov	r6, r0
 800b296:	460f      	mov	r7, r1
 800b298:	2d00      	cmp	r5, #0
 800b29a:	d040      	beq.n	800b31e <__kernel_rem_pio2+0x25e>
 800b29c:	4650      	mov	r0, sl
 800b29e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b3e0 <__kernel_rem_pio2+0x320>
 800b2a2:	f000 fb95 	bl	800b9d0 <scalbn>
 800b2a6:	4630      	mov	r0, r6
 800b2a8:	4639      	mov	r1, r7
 800b2aa:	ec53 2b10 	vmov	r2, r3, d0
 800b2ae:	f7f4 fffb 	bl	80002a8 <__aeabi_dsub>
 800b2b2:	4606      	mov	r6, r0
 800b2b4:	460f      	mov	r7, r1
 800b2b6:	e032      	b.n	800b31e <__kernel_rem_pio2+0x25e>
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	4b4e      	ldr	r3, [pc, #312]	; (800b3f4 <__kernel_rem_pio2+0x334>)
 800b2bc:	4640      	mov	r0, r8
 800b2be:	4649      	mov	r1, r9
 800b2c0:	f7f5 f9aa 	bl	8000618 <__aeabi_dmul>
 800b2c4:	f7f5 fc42 	bl	8000b4c <__aeabi_d2iz>
 800b2c8:	f7f5 f93c 	bl	8000544 <__aeabi_i2d>
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	4b4a      	ldr	r3, [pc, #296]	; (800b3f8 <__kernel_rem_pio2+0x338>)
 800b2d0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b2d4:	f7f5 f9a0 	bl	8000618 <__aeabi_dmul>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	460b      	mov	r3, r1
 800b2dc:	4640      	mov	r0, r8
 800b2de:	4649      	mov	r1, r9
 800b2e0:	f7f4 ffe2 	bl	80002a8 <__aeabi_dsub>
 800b2e4:	f7f5 fc32 	bl	8000b4c <__aeabi_d2iz>
 800b2e8:	ab0e      	add	r3, sp, #56	; 0x38
 800b2ea:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b2ee:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b2f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b2f6:	f7f4 ffd9 	bl	80002ac <__adddf3>
 800b2fa:	3501      	adds	r5, #1
 800b2fc:	4680      	mov	r8, r0
 800b2fe:	4689      	mov	r9, r1
 800b300:	e75e      	b.n	800b1c0 <__kernel_rem_pio2+0x100>
 800b302:	d105      	bne.n	800b310 <__kernel_rem_pio2+0x250>
 800b304:	1e63      	subs	r3, r4, #1
 800b306:	aa0e      	add	r2, sp, #56	; 0x38
 800b308:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b30c:	15c3      	asrs	r3, r0, #23
 800b30e:	e79f      	b.n	800b250 <__kernel_rem_pio2+0x190>
 800b310:	2200      	movs	r2, #0
 800b312:	4b3a      	ldr	r3, [pc, #232]	; (800b3fc <__kernel_rem_pio2+0x33c>)
 800b314:	f7f5 fc06 	bl	8000b24 <__aeabi_dcmpge>
 800b318:	2800      	cmp	r0, #0
 800b31a:	d139      	bne.n	800b390 <__kernel_rem_pio2+0x2d0>
 800b31c:	9002      	str	r0, [sp, #8]
 800b31e:	2200      	movs	r2, #0
 800b320:	2300      	movs	r3, #0
 800b322:	4630      	mov	r0, r6
 800b324:	4639      	mov	r1, r7
 800b326:	f7f5 fbdf 	bl	8000ae8 <__aeabi_dcmpeq>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	f000 80c7 	beq.w	800b4be <__kernel_rem_pio2+0x3fe>
 800b330:	1e65      	subs	r5, r4, #1
 800b332:	462b      	mov	r3, r5
 800b334:	2200      	movs	r2, #0
 800b336:	9904      	ldr	r1, [sp, #16]
 800b338:	428b      	cmp	r3, r1
 800b33a:	da6a      	bge.n	800b412 <__kernel_rem_pio2+0x352>
 800b33c:	2a00      	cmp	r2, #0
 800b33e:	f000 8088 	beq.w	800b452 <__kernel_rem_pio2+0x392>
 800b342:	ab0e      	add	r3, sp, #56	; 0x38
 800b344:	f1aa 0a18 	sub.w	sl, sl, #24
 800b348:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	f000 80b4 	beq.w	800b4ba <__kernel_rem_pio2+0x3fa>
 800b352:	4650      	mov	r0, sl
 800b354:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b3e0 <__kernel_rem_pio2+0x320>
 800b358:	f000 fb3a 	bl	800b9d0 <scalbn>
 800b35c:	00ec      	lsls	r4, r5, #3
 800b35e:	ab72      	add	r3, sp, #456	; 0x1c8
 800b360:	191e      	adds	r6, r3, r4
 800b362:	ec59 8b10 	vmov	r8, r9, d0
 800b366:	f106 0a08 	add.w	sl, r6, #8
 800b36a:	462f      	mov	r7, r5
 800b36c:	2f00      	cmp	r7, #0
 800b36e:	f280 80df 	bge.w	800b530 <__kernel_rem_pio2+0x470>
 800b372:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b3d8 <__kernel_rem_pio2+0x318>
 800b376:	f04f 0a00 	mov.w	sl, #0
 800b37a:	eba5 030a 	sub.w	r3, r5, sl
 800b37e:	2b00      	cmp	r3, #0
 800b380:	f2c0 810a 	blt.w	800b598 <__kernel_rem_pio2+0x4d8>
 800b384:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b400 <__kernel_rem_pio2+0x340>
 800b388:	ec59 8b18 	vmov	r8, r9, d8
 800b38c:	2700      	movs	r7, #0
 800b38e:	e0f5      	b.n	800b57c <__kernel_rem_pio2+0x4bc>
 800b390:	2302      	movs	r3, #2
 800b392:	9302      	str	r3, [sp, #8]
 800b394:	e760      	b.n	800b258 <__kernel_rem_pio2+0x198>
 800b396:	ab0e      	add	r3, sp, #56	; 0x38
 800b398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b39c:	b94d      	cbnz	r5, 800b3b2 <__kernel_rem_pio2+0x2f2>
 800b39e:	b12b      	cbz	r3, 800b3ac <__kernel_rem_pio2+0x2ec>
 800b3a0:	a80e      	add	r0, sp, #56	; 0x38
 800b3a2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b3a6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	3201      	adds	r2, #1
 800b3ae:	461d      	mov	r5, r3
 800b3b0:	e759      	b.n	800b266 <__kernel_rem_pio2+0x1a6>
 800b3b2:	a80e      	add	r0, sp, #56	; 0x38
 800b3b4:	1acb      	subs	r3, r1, r3
 800b3b6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b3ba:	462b      	mov	r3, r5
 800b3bc:	e7f6      	b.n	800b3ac <__kernel_rem_pio2+0x2ec>
 800b3be:	1e62      	subs	r2, r4, #1
 800b3c0:	ab0e      	add	r3, sp, #56	; 0x38
 800b3c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3c6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b3ca:	a90e      	add	r1, sp, #56	; 0x38
 800b3cc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b3d0:	e757      	b.n	800b282 <__kernel_rem_pio2+0x1c2>
 800b3d2:	bf00      	nop
 800b3d4:	f3af 8000 	nop.w
	...
 800b3e4:	3ff00000 	.word	0x3ff00000
 800b3e8:	0800bd68 	.word	0x0800bd68
 800b3ec:	40200000 	.word	0x40200000
 800b3f0:	3ff00000 	.word	0x3ff00000
 800b3f4:	3e700000 	.word	0x3e700000
 800b3f8:	41700000 	.word	0x41700000
 800b3fc:	3fe00000 	.word	0x3fe00000
 800b400:	0800bd28 	.word	0x0800bd28
 800b404:	1e62      	subs	r2, r4, #1
 800b406:	ab0e      	add	r3, sp, #56	; 0x38
 800b408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b40c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b410:	e7db      	b.n	800b3ca <__kernel_rem_pio2+0x30a>
 800b412:	a90e      	add	r1, sp, #56	; 0x38
 800b414:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b418:	3b01      	subs	r3, #1
 800b41a:	430a      	orrs	r2, r1
 800b41c:	e78b      	b.n	800b336 <__kernel_rem_pio2+0x276>
 800b41e:	3301      	adds	r3, #1
 800b420:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b424:	2900      	cmp	r1, #0
 800b426:	d0fa      	beq.n	800b41e <__kernel_rem_pio2+0x35e>
 800b428:	9a08      	ldr	r2, [sp, #32]
 800b42a:	4422      	add	r2, r4
 800b42c:	00d2      	lsls	r2, r2, #3
 800b42e:	a922      	add	r1, sp, #136	; 0x88
 800b430:	18e3      	adds	r3, r4, r3
 800b432:	9206      	str	r2, [sp, #24]
 800b434:	440a      	add	r2, r1
 800b436:	9302      	str	r3, [sp, #8]
 800b438:	f10b 0108 	add.w	r1, fp, #8
 800b43c:	f102 0308 	add.w	r3, r2, #8
 800b440:	1c66      	adds	r6, r4, #1
 800b442:	910a      	str	r1, [sp, #40]	; 0x28
 800b444:	2500      	movs	r5, #0
 800b446:	930d      	str	r3, [sp, #52]	; 0x34
 800b448:	9b02      	ldr	r3, [sp, #8]
 800b44a:	42b3      	cmp	r3, r6
 800b44c:	da04      	bge.n	800b458 <__kernel_rem_pio2+0x398>
 800b44e:	461c      	mov	r4, r3
 800b450:	e6a6      	b.n	800b1a0 <__kernel_rem_pio2+0xe0>
 800b452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b454:	2301      	movs	r3, #1
 800b456:	e7e3      	b.n	800b420 <__kernel_rem_pio2+0x360>
 800b458:	9b06      	ldr	r3, [sp, #24]
 800b45a:	18ef      	adds	r7, r5, r3
 800b45c:	ab22      	add	r3, sp, #136	; 0x88
 800b45e:	441f      	add	r7, r3
 800b460:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b462:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b466:	f7f5 f86d 	bl	8000544 <__aeabi_i2d>
 800b46a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b46c:	461c      	mov	r4, r3
 800b46e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b470:	e9c7 0100 	strd	r0, r1, [r7]
 800b474:	eb03 0b05 	add.w	fp, r3, r5
 800b478:	2700      	movs	r7, #0
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	f04f 0900 	mov.w	r9, #0
 800b482:	9b07      	ldr	r3, [sp, #28]
 800b484:	429f      	cmp	r7, r3
 800b486:	dd08      	ble.n	800b49a <__kernel_rem_pio2+0x3da>
 800b488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b48a:	aa72      	add	r2, sp, #456	; 0x1c8
 800b48c:	18eb      	adds	r3, r5, r3
 800b48e:	4413      	add	r3, r2
 800b490:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b494:	3601      	adds	r6, #1
 800b496:	3508      	adds	r5, #8
 800b498:	e7d6      	b.n	800b448 <__kernel_rem_pio2+0x388>
 800b49a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b49e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b4a2:	f7f5 f8b9 	bl	8000618 <__aeabi_dmul>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	460b      	mov	r3, r1
 800b4aa:	4640      	mov	r0, r8
 800b4ac:	4649      	mov	r1, r9
 800b4ae:	f7f4 fefd 	bl	80002ac <__adddf3>
 800b4b2:	3701      	adds	r7, #1
 800b4b4:	4680      	mov	r8, r0
 800b4b6:	4689      	mov	r9, r1
 800b4b8:	e7e3      	b.n	800b482 <__kernel_rem_pio2+0x3c2>
 800b4ba:	3d01      	subs	r5, #1
 800b4bc:	e741      	b.n	800b342 <__kernel_rem_pio2+0x282>
 800b4be:	f1ca 0000 	rsb	r0, sl, #0
 800b4c2:	ec47 6b10 	vmov	d0, r6, r7
 800b4c6:	f000 fa83 	bl	800b9d0 <scalbn>
 800b4ca:	ec57 6b10 	vmov	r6, r7, d0
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	4b99      	ldr	r3, [pc, #612]	; (800b738 <__kernel_rem_pio2+0x678>)
 800b4d2:	ee10 0a10 	vmov	r0, s0
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	f7f5 fb24 	bl	8000b24 <__aeabi_dcmpge>
 800b4dc:	b1f8      	cbz	r0, 800b51e <__kernel_rem_pio2+0x45e>
 800b4de:	2200      	movs	r2, #0
 800b4e0:	4b96      	ldr	r3, [pc, #600]	; (800b73c <__kernel_rem_pio2+0x67c>)
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	4639      	mov	r1, r7
 800b4e6:	f7f5 f897 	bl	8000618 <__aeabi_dmul>
 800b4ea:	f7f5 fb2f 	bl	8000b4c <__aeabi_d2iz>
 800b4ee:	4680      	mov	r8, r0
 800b4f0:	f7f5 f828 	bl	8000544 <__aeabi_i2d>
 800b4f4:	2200      	movs	r2, #0
 800b4f6:	4b90      	ldr	r3, [pc, #576]	; (800b738 <__kernel_rem_pio2+0x678>)
 800b4f8:	f7f5 f88e 	bl	8000618 <__aeabi_dmul>
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	4602      	mov	r2, r0
 800b500:	4639      	mov	r1, r7
 800b502:	4630      	mov	r0, r6
 800b504:	f7f4 fed0 	bl	80002a8 <__aeabi_dsub>
 800b508:	f7f5 fb20 	bl	8000b4c <__aeabi_d2iz>
 800b50c:	1c65      	adds	r5, r4, #1
 800b50e:	ab0e      	add	r3, sp, #56	; 0x38
 800b510:	f10a 0a18 	add.w	sl, sl, #24
 800b514:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b518:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b51c:	e719      	b.n	800b352 <__kernel_rem_pio2+0x292>
 800b51e:	4630      	mov	r0, r6
 800b520:	4639      	mov	r1, r7
 800b522:	f7f5 fb13 	bl	8000b4c <__aeabi_d2iz>
 800b526:	ab0e      	add	r3, sp, #56	; 0x38
 800b528:	4625      	mov	r5, r4
 800b52a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b52e:	e710      	b.n	800b352 <__kernel_rem_pio2+0x292>
 800b530:	ab0e      	add	r3, sp, #56	; 0x38
 800b532:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b536:	f7f5 f805 	bl	8000544 <__aeabi_i2d>
 800b53a:	4642      	mov	r2, r8
 800b53c:	464b      	mov	r3, r9
 800b53e:	f7f5 f86b 	bl	8000618 <__aeabi_dmul>
 800b542:	2200      	movs	r2, #0
 800b544:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b548:	4b7c      	ldr	r3, [pc, #496]	; (800b73c <__kernel_rem_pio2+0x67c>)
 800b54a:	4640      	mov	r0, r8
 800b54c:	4649      	mov	r1, r9
 800b54e:	f7f5 f863 	bl	8000618 <__aeabi_dmul>
 800b552:	3f01      	subs	r7, #1
 800b554:	4680      	mov	r8, r0
 800b556:	4689      	mov	r9, r1
 800b558:	e708      	b.n	800b36c <__kernel_rem_pio2+0x2ac>
 800b55a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b562:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b566:	f7f5 f857 	bl	8000618 <__aeabi_dmul>
 800b56a:	4602      	mov	r2, r0
 800b56c:	460b      	mov	r3, r1
 800b56e:	4640      	mov	r0, r8
 800b570:	4649      	mov	r1, r9
 800b572:	f7f4 fe9b 	bl	80002ac <__adddf3>
 800b576:	3701      	adds	r7, #1
 800b578:	4680      	mov	r8, r0
 800b57a:	4689      	mov	r9, r1
 800b57c:	9b04      	ldr	r3, [sp, #16]
 800b57e:	429f      	cmp	r7, r3
 800b580:	dc01      	bgt.n	800b586 <__kernel_rem_pio2+0x4c6>
 800b582:	45ba      	cmp	sl, r7
 800b584:	dae9      	bge.n	800b55a <__kernel_rem_pio2+0x49a>
 800b586:	ab4a      	add	r3, sp, #296	; 0x128
 800b588:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b58c:	e9c3 8900 	strd	r8, r9, [r3]
 800b590:	f10a 0a01 	add.w	sl, sl, #1
 800b594:	3e08      	subs	r6, #8
 800b596:	e6f0      	b.n	800b37a <__kernel_rem_pio2+0x2ba>
 800b598:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b59a:	2b03      	cmp	r3, #3
 800b59c:	d85b      	bhi.n	800b656 <__kernel_rem_pio2+0x596>
 800b59e:	e8df f003 	tbb	[pc, r3]
 800b5a2:	264a      	.short	0x264a
 800b5a4:	0226      	.short	0x0226
 800b5a6:	ab9a      	add	r3, sp, #616	; 0x268
 800b5a8:	441c      	add	r4, r3
 800b5aa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b5ae:	46a2      	mov	sl, r4
 800b5b0:	46ab      	mov	fp, r5
 800b5b2:	f1bb 0f00 	cmp.w	fp, #0
 800b5b6:	dc6c      	bgt.n	800b692 <__kernel_rem_pio2+0x5d2>
 800b5b8:	46a2      	mov	sl, r4
 800b5ba:	46ab      	mov	fp, r5
 800b5bc:	f1bb 0f01 	cmp.w	fp, #1
 800b5c0:	f300 8086 	bgt.w	800b6d0 <__kernel_rem_pio2+0x610>
 800b5c4:	2000      	movs	r0, #0
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	2d01      	cmp	r5, #1
 800b5ca:	f300 80a0 	bgt.w	800b70e <__kernel_rem_pio2+0x64e>
 800b5ce:	9b02      	ldr	r3, [sp, #8]
 800b5d0:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b5d4:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	f040 809e 	bne.w	800b71a <__kernel_rem_pio2+0x65a>
 800b5de:	9b01      	ldr	r3, [sp, #4]
 800b5e0:	e9c3 7800 	strd	r7, r8, [r3]
 800b5e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b5e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b5ec:	e033      	b.n	800b656 <__kernel_rem_pio2+0x596>
 800b5ee:	3408      	adds	r4, #8
 800b5f0:	ab4a      	add	r3, sp, #296	; 0x128
 800b5f2:	441c      	add	r4, r3
 800b5f4:	462e      	mov	r6, r5
 800b5f6:	2000      	movs	r0, #0
 800b5f8:	2100      	movs	r1, #0
 800b5fa:	2e00      	cmp	r6, #0
 800b5fc:	da3a      	bge.n	800b674 <__kernel_rem_pio2+0x5b4>
 800b5fe:	9b02      	ldr	r3, [sp, #8]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d03d      	beq.n	800b680 <__kernel_rem_pio2+0x5c0>
 800b604:	4602      	mov	r2, r0
 800b606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b60a:	9c01      	ldr	r4, [sp, #4]
 800b60c:	e9c4 2300 	strd	r2, r3, [r4]
 800b610:	4602      	mov	r2, r0
 800b612:	460b      	mov	r3, r1
 800b614:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b618:	f7f4 fe46 	bl	80002a8 <__aeabi_dsub>
 800b61c:	ae4c      	add	r6, sp, #304	; 0x130
 800b61e:	2401      	movs	r4, #1
 800b620:	42a5      	cmp	r5, r4
 800b622:	da30      	bge.n	800b686 <__kernel_rem_pio2+0x5c6>
 800b624:	9b02      	ldr	r3, [sp, #8]
 800b626:	b113      	cbz	r3, 800b62e <__kernel_rem_pio2+0x56e>
 800b628:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b62c:	4619      	mov	r1, r3
 800b62e:	9b01      	ldr	r3, [sp, #4]
 800b630:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b634:	e00f      	b.n	800b656 <__kernel_rem_pio2+0x596>
 800b636:	ab9a      	add	r3, sp, #616	; 0x268
 800b638:	441c      	add	r4, r3
 800b63a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b63e:	2000      	movs	r0, #0
 800b640:	2100      	movs	r1, #0
 800b642:	2d00      	cmp	r5, #0
 800b644:	da10      	bge.n	800b668 <__kernel_rem_pio2+0x5a8>
 800b646:	9b02      	ldr	r3, [sp, #8]
 800b648:	b113      	cbz	r3, 800b650 <__kernel_rem_pio2+0x590>
 800b64a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b64e:	4619      	mov	r1, r3
 800b650:	9b01      	ldr	r3, [sp, #4]
 800b652:	e9c3 0100 	strd	r0, r1, [r3]
 800b656:	9b06      	ldr	r3, [sp, #24]
 800b658:	f003 0007 	and.w	r0, r3, #7
 800b65c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b660:	ecbd 8b02 	vpop	{d8}
 800b664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b668:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b66c:	f7f4 fe1e 	bl	80002ac <__adddf3>
 800b670:	3d01      	subs	r5, #1
 800b672:	e7e6      	b.n	800b642 <__kernel_rem_pio2+0x582>
 800b674:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b678:	f7f4 fe18 	bl	80002ac <__adddf3>
 800b67c:	3e01      	subs	r6, #1
 800b67e:	e7bc      	b.n	800b5fa <__kernel_rem_pio2+0x53a>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	e7c1      	b.n	800b60a <__kernel_rem_pio2+0x54a>
 800b686:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b68a:	f7f4 fe0f 	bl	80002ac <__adddf3>
 800b68e:	3401      	adds	r4, #1
 800b690:	e7c6      	b.n	800b620 <__kernel_rem_pio2+0x560>
 800b692:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b696:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b69a:	4640      	mov	r0, r8
 800b69c:	ec53 2b17 	vmov	r2, r3, d7
 800b6a0:	4649      	mov	r1, r9
 800b6a2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b6a6:	f7f4 fe01 	bl	80002ac <__adddf3>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	460b      	mov	r3, r1
 800b6ae:	4606      	mov	r6, r0
 800b6b0:	460f      	mov	r7, r1
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	f7f4 fdf7 	bl	80002a8 <__aeabi_dsub>
 800b6ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6be:	f7f4 fdf5 	bl	80002ac <__adddf3>
 800b6c2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b6c6:	e9ca 0100 	strd	r0, r1, [sl]
 800b6ca:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b6ce:	e770      	b.n	800b5b2 <__kernel_rem_pio2+0x4f2>
 800b6d0:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b6d4:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b6d8:	4630      	mov	r0, r6
 800b6da:	ec53 2b17 	vmov	r2, r3, d7
 800b6de:	4639      	mov	r1, r7
 800b6e0:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b6e4:	f7f4 fde2 	bl	80002ac <__adddf3>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	460b      	mov	r3, r1
 800b6ec:	4680      	mov	r8, r0
 800b6ee:	4689      	mov	r9, r1
 800b6f0:	4630      	mov	r0, r6
 800b6f2:	4639      	mov	r1, r7
 800b6f4:	f7f4 fdd8 	bl	80002a8 <__aeabi_dsub>
 800b6f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6fc:	f7f4 fdd6 	bl	80002ac <__adddf3>
 800b700:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b704:	e9ca 0100 	strd	r0, r1, [sl]
 800b708:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b70c:	e756      	b.n	800b5bc <__kernel_rem_pio2+0x4fc>
 800b70e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b712:	f7f4 fdcb 	bl	80002ac <__adddf3>
 800b716:	3d01      	subs	r5, #1
 800b718:	e756      	b.n	800b5c8 <__kernel_rem_pio2+0x508>
 800b71a:	9b01      	ldr	r3, [sp, #4]
 800b71c:	9a01      	ldr	r2, [sp, #4]
 800b71e:	601f      	str	r7, [r3, #0]
 800b720:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b724:	605c      	str	r4, [r3, #4]
 800b726:	609d      	str	r5, [r3, #8]
 800b728:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b72c:	60d3      	str	r3, [r2, #12]
 800b72e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b732:	6110      	str	r0, [r2, #16]
 800b734:	6153      	str	r3, [r2, #20]
 800b736:	e78e      	b.n	800b656 <__kernel_rem_pio2+0x596>
 800b738:	41700000 	.word	0x41700000
 800b73c:	3e700000 	.word	0x3e700000

0800b740 <__kernel_sin>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	ec55 4b10 	vmov	r4, r5, d0
 800b748:	b085      	sub	sp, #20
 800b74a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b74e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b752:	ed8d 1b00 	vstr	d1, [sp]
 800b756:	9002      	str	r0, [sp, #8]
 800b758:	da06      	bge.n	800b768 <__kernel_sin+0x28>
 800b75a:	ee10 0a10 	vmov	r0, s0
 800b75e:	4629      	mov	r1, r5
 800b760:	f7f5 f9f4 	bl	8000b4c <__aeabi_d2iz>
 800b764:	2800      	cmp	r0, #0
 800b766:	d051      	beq.n	800b80c <__kernel_sin+0xcc>
 800b768:	4622      	mov	r2, r4
 800b76a:	462b      	mov	r3, r5
 800b76c:	4620      	mov	r0, r4
 800b76e:	4629      	mov	r1, r5
 800b770:	f7f4 ff52 	bl	8000618 <__aeabi_dmul>
 800b774:	4682      	mov	sl, r0
 800b776:	468b      	mov	fp, r1
 800b778:	4602      	mov	r2, r0
 800b77a:	460b      	mov	r3, r1
 800b77c:	4620      	mov	r0, r4
 800b77e:	4629      	mov	r1, r5
 800b780:	f7f4 ff4a 	bl	8000618 <__aeabi_dmul>
 800b784:	a341      	add	r3, pc, #260	; (adr r3, 800b88c <__kernel_sin+0x14c>)
 800b786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78a:	4680      	mov	r8, r0
 800b78c:	4689      	mov	r9, r1
 800b78e:	4650      	mov	r0, sl
 800b790:	4659      	mov	r1, fp
 800b792:	f7f4 ff41 	bl	8000618 <__aeabi_dmul>
 800b796:	a33f      	add	r3, pc, #252	; (adr r3, 800b894 <__kernel_sin+0x154>)
 800b798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79c:	f7f4 fd84 	bl	80002a8 <__aeabi_dsub>
 800b7a0:	4652      	mov	r2, sl
 800b7a2:	465b      	mov	r3, fp
 800b7a4:	f7f4 ff38 	bl	8000618 <__aeabi_dmul>
 800b7a8:	a33c      	add	r3, pc, #240	; (adr r3, 800b89c <__kernel_sin+0x15c>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	f7f4 fd7d 	bl	80002ac <__adddf3>
 800b7b2:	4652      	mov	r2, sl
 800b7b4:	465b      	mov	r3, fp
 800b7b6:	f7f4 ff2f 	bl	8000618 <__aeabi_dmul>
 800b7ba:	a33a      	add	r3, pc, #232	; (adr r3, 800b8a4 <__kernel_sin+0x164>)
 800b7bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7c0:	f7f4 fd72 	bl	80002a8 <__aeabi_dsub>
 800b7c4:	4652      	mov	r2, sl
 800b7c6:	465b      	mov	r3, fp
 800b7c8:	f7f4 ff26 	bl	8000618 <__aeabi_dmul>
 800b7cc:	a337      	add	r3, pc, #220	; (adr r3, 800b8ac <__kernel_sin+0x16c>)
 800b7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d2:	f7f4 fd6b 	bl	80002ac <__adddf3>
 800b7d6:	9b02      	ldr	r3, [sp, #8]
 800b7d8:	4606      	mov	r6, r0
 800b7da:	460f      	mov	r7, r1
 800b7dc:	b9db      	cbnz	r3, 800b816 <__kernel_sin+0xd6>
 800b7de:	4602      	mov	r2, r0
 800b7e0:	460b      	mov	r3, r1
 800b7e2:	4650      	mov	r0, sl
 800b7e4:	4659      	mov	r1, fp
 800b7e6:	f7f4 ff17 	bl	8000618 <__aeabi_dmul>
 800b7ea:	a325      	add	r3, pc, #148	; (adr r3, 800b880 <__kernel_sin+0x140>)
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f7f4 fd5a 	bl	80002a8 <__aeabi_dsub>
 800b7f4:	4642      	mov	r2, r8
 800b7f6:	464b      	mov	r3, r9
 800b7f8:	f7f4 ff0e 	bl	8000618 <__aeabi_dmul>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4620      	mov	r0, r4
 800b802:	4629      	mov	r1, r5
 800b804:	f7f4 fd52 	bl	80002ac <__adddf3>
 800b808:	4604      	mov	r4, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	ec45 4b10 	vmov	d0, r4, r5
 800b810:	b005      	add	sp, #20
 800b812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b816:	2200      	movs	r2, #0
 800b818:	4b1b      	ldr	r3, [pc, #108]	; (800b888 <__kernel_sin+0x148>)
 800b81a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b81e:	f7f4 fefb 	bl	8000618 <__aeabi_dmul>
 800b822:	4632      	mov	r2, r6
 800b824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b828:	463b      	mov	r3, r7
 800b82a:	4640      	mov	r0, r8
 800b82c:	4649      	mov	r1, r9
 800b82e:	f7f4 fef3 	bl	8000618 <__aeabi_dmul>
 800b832:	4602      	mov	r2, r0
 800b834:	460b      	mov	r3, r1
 800b836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b83a:	f7f4 fd35 	bl	80002a8 <__aeabi_dsub>
 800b83e:	4652      	mov	r2, sl
 800b840:	465b      	mov	r3, fp
 800b842:	f7f4 fee9 	bl	8000618 <__aeabi_dmul>
 800b846:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b84a:	f7f4 fd2d 	bl	80002a8 <__aeabi_dsub>
 800b84e:	a30c      	add	r3, pc, #48	; (adr r3, 800b880 <__kernel_sin+0x140>)
 800b850:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	4640      	mov	r0, r8
 800b85a:	4649      	mov	r1, r9
 800b85c:	f7f4 fedc 	bl	8000618 <__aeabi_dmul>
 800b860:	4602      	mov	r2, r0
 800b862:	460b      	mov	r3, r1
 800b864:	4630      	mov	r0, r6
 800b866:	4639      	mov	r1, r7
 800b868:	f7f4 fd20 	bl	80002ac <__adddf3>
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4620      	mov	r0, r4
 800b872:	4629      	mov	r1, r5
 800b874:	f7f4 fd18 	bl	80002a8 <__aeabi_dsub>
 800b878:	e7c6      	b.n	800b808 <__kernel_sin+0xc8>
 800b87a:	bf00      	nop
 800b87c:	f3af 8000 	nop.w
 800b880:	55555549 	.word	0x55555549
 800b884:	3fc55555 	.word	0x3fc55555
 800b888:	3fe00000 	.word	0x3fe00000
 800b88c:	5acfd57c 	.word	0x5acfd57c
 800b890:	3de5d93a 	.word	0x3de5d93a
 800b894:	8a2b9ceb 	.word	0x8a2b9ceb
 800b898:	3e5ae5e6 	.word	0x3e5ae5e6
 800b89c:	57b1fe7d 	.word	0x57b1fe7d
 800b8a0:	3ec71de3 	.word	0x3ec71de3
 800b8a4:	19c161d5 	.word	0x19c161d5
 800b8a8:	3f2a01a0 	.word	0x3f2a01a0
 800b8ac:	1110f8a6 	.word	0x1110f8a6
 800b8b0:	3f811111 	.word	0x3f811111

0800b8b4 <fabs>:
 800b8b4:	ec51 0b10 	vmov	r0, r1, d0
 800b8b8:	ee10 2a10 	vmov	r2, s0
 800b8bc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b8c0:	ec43 2b10 	vmov	d0, r2, r3
 800b8c4:	4770      	bx	lr
	...

0800b8c8 <floor>:
 800b8c8:	ec51 0b10 	vmov	r0, r1, d0
 800b8cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b8d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b8d8:	2e13      	cmp	r6, #19
 800b8da:	460c      	mov	r4, r1
 800b8dc:	ee10 5a10 	vmov	r5, s0
 800b8e0:	4680      	mov	r8, r0
 800b8e2:	dc34      	bgt.n	800b94e <floor+0x86>
 800b8e4:	2e00      	cmp	r6, #0
 800b8e6:	da16      	bge.n	800b916 <floor+0x4e>
 800b8e8:	a335      	add	r3, pc, #212	; (adr r3, 800b9c0 <floor+0xf8>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f7f4 fcdd 	bl	80002ac <__adddf3>
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	f7f5 f91f 	bl	8000b38 <__aeabi_dcmpgt>
 800b8fa:	b148      	cbz	r0, 800b910 <floor+0x48>
 800b8fc:	2c00      	cmp	r4, #0
 800b8fe:	da59      	bge.n	800b9b4 <floor+0xec>
 800b900:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b904:	4a30      	ldr	r2, [pc, #192]	; (800b9c8 <floor+0x100>)
 800b906:	432b      	orrs	r3, r5
 800b908:	2500      	movs	r5, #0
 800b90a:	42ab      	cmp	r3, r5
 800b90c:	bf18      	it	ne
 800b90e:	4614      	movne	r4, r2
 800b910:	4621      	mov	r1, r4
 800b912:	4628      	mov	r0, r5
 800b914:	e025      	b.n	800b962 <floor+0x9a>
 800b916:	4f2d      	ldr	r7, [pc, #180]	; (800b9cc <floor+0x104>)
 800b918:	4137      	asrs	r7, r6
 800b91a:	ea01 0307 	and.w	r3, r1, r7
 800b91e:	4303      	orrs	r3, r0
 800b920:	d01f      	beq.n	800b962 <floor+0x9a>
 800b922:	a327      	add	r3, pc, #156	; (adr r3, 800b9c0 <floor+0xf8>)
 800b924:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b928:	f7f4 fcc0 	bl	80002ac <__adddf3>
 800b92c:	2200      	movs	r2, #0
 800b92e:	2300      	movs	r3, #0
 800b930:	f7f5 f902 	bl	8000b38 <__aeabi_dcmpgt>
 800b934:	2800      	cmp	r0, #0
 800b936:	d0eb      	beq.n	800b910 <floor+0x48>
 800b938:	2c00      	cmp	r4, #0
 800b93a:	bfbe      	ittt	lt
 800b93c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b940:	fa43 f606 	asrlt.w	r6, r3, r6
 800b944:	19a4      	addlt	r4, r4, r6
 800b946:	ea24 0407 	bic.w	r4, r4, r7
 800b94a:	2500      	movs	r5, #0
 800b94c:	e7e0      	b.n	800b910 <floor+0x48>
 800b94e:	2e33      	cmp	r6, #51	; 0x33
 800b950:	dd0b      	ble.n	800b96a <floor+0xa2>
 800b952:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b956:	d104      	bne.n	800b962 <floor+0x9a>
 800b958:	ee10 2a10 	vmov	r2, s0
 800b95c:	460b      	mov	r3, r1
 800b95e:	f7f4 fca5 	bl	80002ac <__adddf3>
 800b962:	ec41 0b10 	vmov	d0, r0, r1
 800b966:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b96a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b96e:	f04f 33ff 	mov.w	r3, #4294967295
 800b972:	fa23 f707 	lsr.w	r7, r3, r7
 800b976:	4207      	tst	r7, r0
 800b978:	d0f3      	beq.n	800b962 <floor+0x9a>
 800b97a:	a311      	add	r3, pc, #68	; (adr r3, 800b9c0 <floor+0xf8>)
 800b97c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b980:	f7f4 fc94 	bl	80002ac <__adddf3>
 800b984:	2200      	movs	r2, #0
 800b986:	2300      	movs	r3, #0
 800b988:	f7f5 f8d6 	bl	8000b38 <__aeabi_dcmpgt>
 800b98c:	2800      	cmp	r0, #0
 800b98e:	d0bf      	beq.n	800b910 <floor+0x48>
 800b990:	2c00      	cmp	r4, #0
 800b992:	da02      	bge.n	800b99a <floor+0xd2>
 800b994:	2e14      	cmp	r6, #20
 800b996:	d103      	bne.n	800b9a0 <floor+0xd8>
 800b998:	3401      	adds	r4, #1
 800b99a:	ea25 0507 	bic.w	r5, r5, r7
 800b99e:	e7b7      	b.n	800b910 <floor+0x48>
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b9a6:	fa03 f606 	lsl.w	r6, r3, r6
 800b9aa:	4435      	add	r5, r6
 800b9ac:	4545      	cmp	r5, r8
 800b9ae:	bf38      	it	cc
 800b9b0:	18e4      	addcc	r4, r4, r3
 800b9b2:	e7f2      	b.n	800b99a <floor+0xd2>
 800b9b4:	2500      	movs	r5, #0
 800b9b6:	462c      	mov	r4, r5
 800b9b8:	e7aa      	b.n	800b910 <floor+0x48>
 800b9ba:	bf00      	nop
 800b9bc:	f3af 8000 	nop.w
 800b9c0:	8800759c 	.word	0x8800759c
 800b9c4:	7e37e43c 	.word	0x7e37e43c
 800b9c8:	bff00000 	.word	0xbff00000
 800b9cc:	000fffff 	.word	0x000fffff

0800b9d0 <scalbn>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	ec55 4b10 	vmov	r4, r5, d0
 800b9d6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b9da:	4606      	mov	r6, r0
 800b9dc:	462b      	mov	r3, r5
 800b9de:	b9aa      	cbnz	r2, 800ba0c <scalbn+0x3c>
 800b9e0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b9e4:	4323      	orrs	r3, r4
 800b9e6:	d03b      	beq.n	800ba60 <scalbn+0x90>
 800b9e8:	4b31      	ldr	r3, [pc, #196]	; (800bab0 <scalbn+0xe0>)
 800b9ea:	4629      	mov	r1, r5
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	ee10 0a10 	vmov	r0, s0
 800b9f2:	f7f4 fe11 	bl	8000618 <__aeabi_dmul>
 800b9f6:	4b2f      	ldr	r3, [pc, #188]	; (800bab4 <scalbn+0xe4>)
 800b9f8:	429e      	cmp	r6, r3
 800b9fa:	4604      	mov	r4, r0
 800b9fc:	460d      	mov	r5, r1
 800b9fe:	da12      	bge.n	800ba26 <scalbn+0x56>
 800ba00:	a327      	add	r3, pc, #156	; (adr r3, 800baa0 <scalbn+0xd0>)
 800ba02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba06:	f7f4 fe07 	bl	8000618 <__aeabi_dmul>
 800ba0a:	e009      	b.n	800ba20 <scalbn+0x50>
 800ba0c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800ba10:	428a      	cmp	r2, r1
 800ba12:	d10c      	bne.n	800ba2e <scalbn+0x5e>
 800ba14:	ee10 2a10 	vmov	r2, s0
 800ba18:	4620      	mov	r0, r4
 800ba1a:	4629      	mov	r1, r5
 800ba1c:	f7f4 fc46 	bl	80002ac <__adddf3>
 800ba20:	4604      	mov	r4, r0
 800ba22:	460d      	mov	r5, r1
 800ba24:	e01c      	b.n	800ba60 <scalbn+0x90>
 800ba26:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800ba2a:	460b      	mov	r3, r1
 800ba2c:	3a36      	subs	r2, #54	; 0x36
 800ba2e:	4432      	add	r2, r6
 800ba30:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800ba34:	428a      	cmp	r2, r1
 800ba36:	dd0b      	ble.n	800ba50 <scalbn+0x80>
 800ba38:	ec45 4b11 	vmov	d1, r4, r5
 800ba3c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800baa8 <scalbn+0xd8>
 800ba40:	f000 f83c 	bl	800babc <copysign>
 800ba44:	a318      	add	r3, pc, #96	; (adr r3, 800baa8 <scalbn+0xd8>)
 800ba46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba4a:	ec51 0b10 	vmov	r0, r1, d0
 800ba4e:	e7da      	b.n	800ba06 <scalbn+0x36>
 800ba50:	2a00      	cmp	r2, #0
 800ba52:	dd08      	ble.n	800ba66 <scalbn+0x96>
 800ba54:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba58:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba5c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba60:	ec45 4b10 	vmov	d0, r4, r5
 800ba64:	bd70      	pop	{r4, r5, r6, pc}
 800ba66:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800ba6a:	da0d      	bge.n	800ba88 <scalbn+0xb8>
 800ba6c:	f24c 3350 	movw	r3, #50000	; 0xc350
 800ba70:	429e      	cmp	r6, r3
 800ba72:	ec45 4b11 	vmov	d1, r4, r5
 800ba76:	dce1      	bgt.n	800ba3c <scalbn+0x6c>
 800ba78:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800baa0 <scalbn+0xd0>
 800ba7c:	f000 f81e 	bl	800babc <copysign>
 800ba80:	a307      	add	r3, pc, #28	; (adr r3, 800baa0 <scalbn+0xd0>)
 800ba82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba86:	e7e0      	b.n	800ba4a <scalbn+0x7a>
 800ba88:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ba8c:	3236      	adds	r2, #54	; 0x36
 800ba8e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ba92:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800ba96:	4620      	mov	r0, r4
 800ba98:	4629      	mov	r1, r5
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	4b06      	ldr	r3, [pc, #24]	; (800bab8 <scalbn+0xe8>)
 800ba9e:	e7b2      	b.n	800ba06 <scalbn+0x36>
 800baa0:	c2f8f359 	.word	0xc2f8f359
 800baa4:	01a56e1f 	.word	0x01a56e1f
 800baa8:	8800759c 	.word	0x8800759c
 800baac:	7e37e43c 	.word	0x7e37e43c
 800bab0:	43500000 	.word	0x43500000
 800bab4:	ffff3cb0 	.word	0xffff3cb0
 800bab8:	3c900000 	.word	0x3c900000

0800babc <copysign>:
 800babc:	ec51 0b10 	vmov	r0, r1, d0
 800bac0:	ee11 0a90 	vmov	r0, s3
 800bac4:	ee10 2a10 	vmov	r2, s0
 800bac8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800bacc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800bad0:	ea41 0300 	orr.w	r3, r1, r0
 800bad4:	ec43 2b10 	vmov	d0, r2, r3
 800bad8:	4770      	bx	lr
	...

0800badc <_init>:
 800badc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bade:	bf00      	nop
 800bae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bae2:	bc08      	pop	{r3}
 800bae4:	469e      	mov	lr, r3
 800bae6:	4770      	bx	lr

0800bae8 <_fini>:
 800bae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800baea:	bf00      	nop
 800baec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800baee:	bc08      	pop	{r3}
 800baf0:	469e      	mov	lr, r3
 800baf2:	4770      	bx	lr
