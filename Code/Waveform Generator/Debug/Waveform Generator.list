
Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a584  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800a738  0800a738  0001a738  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a978  0800a978  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800a978  0800a978  0001a978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a980  0800a980  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a980  0800a980  0001a980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a984  0800a984  0001a984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800a988  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d40  20000208  0800ab90  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f48  0800ab90  00021f48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bb11  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f31  00000000  00000000  0003bd49  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000014d0  00000000  00000000  0003fc80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000012d8  00000000  00000000  00041150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000703c  00000000  00000000  00042428  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000151b2  00000000  00000000  00049464  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e7579  00000000  00000000  0005e616  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00145b8f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a64  00000000  00000000  00145c0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000208 	.word	0x20000208
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800a71c 	.word	0x0800a71c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	0800a71c 	.word	0x0800a71c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <MX_DAC_Init+0x64>)
 8000e3c:	4a15      	ldr	r2, [pc, #84]	; (8000e94 <MX_DAC_Init+0x68>)
 8000e3e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e40:	4813      	ldr	r0, [pc, #76]	; (8000e90 <MX_DAC_Init+0x64>)
 8000e42:	f000 ff44 	bl	8001cce <HAL_DAC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000e4c:	f000 faec 	bl	8001428 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000e50:	2324      	movs	r3, #36	; 0x24
 8000e52:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480c      	ldr	r0, [pc, #48]	; (8000e90 <MX_DAC_Init+0x64>)
 8000e60:	f001 f824 	bl	8001eac <HAL_DAC_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000e6a:	f000 fadd 	bl	8001428 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000e6e:	232c      	movs	r3, #44	; 0x2c
 8000e70:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	2210      	movs	r2, #16
 8000e76:	4619      	mov	r1, r3
 8000e78:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_DAC_Init+0x64>)
 8000e7a:	f001 f817 	bl	8001eac <HAL_DAC_ConfigChannel>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000e84:	f000 fad0 	bl	8001428 <Error_Handler>
  }

}
 8000e88:	bf00      	nop
 8000e8a:	3708      	adds	r7, #8
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	20000294 	.word	0x20000294
 8000e94:	40007400 	.word	0x40007400

08000e98 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08a      	sub	sp, #40	; 0x28
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
 8000ea8:	605a      	str	r2, [r3, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
 8000eac:	60da      	str	r2, [r3, #12]
 8000eae:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a48      	ldr	r2, [pc, #288]	; (8000fd8 <HAL_DAC_MspInit+0x140>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	f040 808a 	bne.w	8000fd0 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
 8000ec0:	4b46      	ldr	r3, [pc, #280]	; (8000fdc <HAL_DAC_MspInit+0x144>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	4a45      	ldr	r2, [pc, #276]	; (8000fdc <HAL_DAC_MspInit+0x144>)
 8000ec6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000eca:	6413      	str	r3, [r2, #64]	; 0x40
 8000ecc:	4b43      	ldr	r3, [pc, #268]	; (8000fdc <HAL_DAC_MspInit+0x144>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	4b3f      	ldr	r3, [pc, #252]	; (8000fdc <HAL_DAC_MspInit+0x144>)
 8000ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee0:	4a3e      	ldr	r2, [pc, #248]	; (8000fdc <HAL_DAC_MspInit+0x144>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee8:	4b3c      	ldr	r3, [pc, #240]	; (8000fdc <HAL_DAC_MspInit+0x144>)
 8000eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000ef4:	2330      	movs	r3, #48	; 0x30
 8000ef6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000ef8:	2303      	movs	r3, #3
 8000efa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f00:	f107 0314 	add.w	r3, r7, #20
 8000f04:	4619      	mov	r1, r3
 8000f06:	4836      	ldr	r0, [pc, #216]	; (8000fe0 <HAL_DAC_MspInit+0x148>)
 8000f08:	f001 fca8 	bl	800285c <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8000f0c:	4b35      	ldr	r3, [pc, #212]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f0e:	4a36      	ldr	r2, [pc, #216]	; (8000fe8 <HAL_DAC_MspInit+0x150>)
 8000f10:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8000f12:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f14:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f18:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f1a:	4b32      	ldr	r3, [pc, #200]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f1c:	2240      	movs	r2, #64	; 0x40
 8000f1e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f20:	4b30      	ldr	r3, [pc, #192]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8000f26:	4b2f      	ldr	r3, [pc, #188]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f2e:	4b2d      	ldr	r3, [pc, #180]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f34:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f36:	4b2b      	ldr	r3, [pc, #172]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f40:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f44:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8000f46:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f4c:	4b25      	ldr	r3, [pc, #148]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8000f52:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f54:	f001 f882 	bl	800205c <HAL_DMA_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000f5e:	f000 fa63 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_DAC_MspInit+0x14c>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8000f6e:	4b1f      	ldr	r3, [pc, #124]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000f70:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <HAL_DAC_MspInit+0x158>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8000f74:	4b1d      	ldr	r3, [pc, #116]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000f76:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000f7a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000f7e:	2240      	movs	r2, #64	; 0x40
 8000f80:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f82:	4b1a      	ldr	r3, [pc, #104]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8000f88:	4b18      	ldr	r3, [pc, #96]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000f8a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f8e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f90:	4b16      	ldr	r3, [pc, #88]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000f92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f96:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000f9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f9e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fa6:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8000fa8:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8000fb4:	480d      	ldr	r0, [pc, #52]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000fb6:	f001 f851 	bl	800205c <HAL_DMA_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 8000fc0:	f000 fa32 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a09      	ldr	r2, [pc, #36]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	4a08      	ldr	r2, [pc, #32]	; (8000fec <HAL_DAC_MspInit+0x154>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	; 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40007400 	.word	0x40007400
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	20000234 	.word	0x20000234
 8000fe8:	40026088 	.word	0x40026088
 8000fec:	200002a8 	.word	0x200002a8
 8000ff0:	400260a0 	.word	0x400260a0

08000ff4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	607b      	str	r3, [r7, #4]
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <MX_DMA_Init+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	4a1e      	ldr	r2, [pc, #120]	; (800107c <MX_DMA_Init+0x88>)
 8001004:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001008:	6313      	str	r3, [r2, #48]	; 0x30
 800100a:	4b1c      	ldr	r3, [pc, #112]	; (800107c <MX_DMA_Init+0x88>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001012:	607b      	str	r3, [r7, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
 800101a:	4b18      	ldr	r3, [pc, #96]	; (800107c <MX_DMA_Init+0x88>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	4a17      	ldr	r2, [pc, #92]	; (800107c <MX_DMA_Init+0x88>)
 8001020:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001024:	6313      	str	r3, [r2, #48]	; 0x30
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <MX_DMA_Init+0x88>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800102e:	603b      	str	r3, [r7, #0]
 8001030:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	2010      	movs	r0, #16
 8001038:	f000 fe13 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800103c:	2010      	movs	r0, #16
 800103e:	f000 fe2c 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2011      	movs	r0, #17
 8001048:	f000 fe0b 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800104c:	2011      	movs	r0, #17
 800104e:	f000 fe24 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	203a      	movs	r0, #58	; 0x3a
 8001058:	f000 fe03 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800105c:	203a      	movs	r0, #58	; 0x3a
 800105e:	f000 fe1c 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2046      	movs	r0, #70	; 0x46
 8001068:	f000 fdfb 	bl	8001c62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800106c:	2046      	movs	r0, #70	; 0x46
 800106e:	f000 fe14 	bl	8001c9a <HAL_NVIC_EnableIRQ>

}
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800

08001080 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_GPIO_Init+0x68>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	4a16      	ldr	r2, [pc, #88]	; (80010e8 <MX_GPIO_Init+0x68>)
 8001090:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001094:	6313      	str	r3, [r2, #48]	; 0x30
 8001096:	4b14      	ldr	r3, [pc, #80]	; (80010e8 <MX_GPIO_Init+0x68>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	4b10      	ldr	r3, [pc, #64]	; (80010e8 <MX_GPIO_Init+0x68>)
 80010a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010aa:	4a0f      	ldr	r2, [pc, #60]	; (80010e8 <MX_GPIO_Init+0x68>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6313      	str	r3, [r2, #48]	; 0x30
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <MX_GPIO_Init+0x68>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	60bb      	str	r3, [r7, #8]
 80010bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	4b09      	ldr	r3, [pc, #36]	; (80010e8 <MX_GPIO_Init+0x68>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a08      	ldr	r2, [pc, #32]	; (80010e8 <MX_GPIO_Init+0x68>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <MX_GPIO_Init+0x68>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	607b      	str	r3, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]

}
 80010da:	bf00      	nop
 80010dc:	3714      	adds	r7, #20
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40023800 	.word	0x40023800
 80010ec:	00000000 	.word	0x00000000

080010f0 <get_sineval>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 90000000;	// Tim2 Clock Frequency
int Period = 1;				// Tim2 Period


void get_sineval(void){
 80010f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	e06b      	b.n	80011d4 <get_sineval+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4618      	mov	r0, r3
 8001102:	f7ff f9c7 	bl	8000494 <__aeabi_i2d>
 8001106:	a33e      	add	r3, pc, #248	; (adr r3, 8001200 <get_sineval+0x110>)
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	f7ff fa2c 	bl	8000568 <__aeabi_dmul>
 8001110:	4603      	mov	r3, r0
 8001112:	460c      	mov	r4, r1
 8001114:	4618      	mov	r0, r3
 8001116:	4621      	mov	r1, r4
 8001118:	f04f 0200 	mov.w	r2, #0
 800111c:	4b32      	ldr	r3, [pc, #200]	; (80011e8 <get_sineval+0xf8>)
 800111e:	f7ff fb4d 	bl	80007bc <__aeabi_ddiv>
 8001122:	4603      	mov	r3, r0
 8001124:	460c      	mov	r4, r1
 8001126:	ec44 3b17 	vmov	d7, r3, r4
 800112a:	eeb0 0a47 	vmov.f32	s0, s14
 800112e:	eef0 0a67 	vmov.f32	s1, s15
 8001132:	f008 fae1 	bl	80096f8 <sin>
 8001136:	ec51 0b10 	vmov	r0, r1, d0
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b2b      	ldr	r3, [pc, #172]	; (80011ec <get_sineval+0xfc>)
 8001140:	f7ff f85c 	bl	80001fc <__adddf3>
 8001144:	4603      	mov	r3, r0
 8001146:	460c      	mov	r4, r1
 8001148:	4625      	mov	r5, r4
 800114a:	461c      	mov	r4, r3
 800114c:	4b28      	ldr	r3, [pc, #160]	; (80011f0 <get_sineval+0x100>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	0fda      	lsrs	r2, r3, #31
 8001152:	4413      	add	r3, r2
 8001154:	105b      	asrs	r3, r3, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff f99c 	bl	8000494 <__aeabi_i2d>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4620      	mov	r0, r4
 8001162:	4629      	mov	r1, r5
 8001164:	f7ff fa00 	bl	8000568 <__aeabi_dmul>
 8001168:	4603      	mov	r3, r0
 800116a:	460c      	mov	r4, r1
 800116c:	4618      	mov	r0, r3
 800116e:	4621      	mov	r1, r4
 8001170:	f7ff fcbc 	bl	8000aec <__aeabi_d2uiz>
 8001174:	4601      	mov	r1, r0
 8001176:	4a1f      	ldr	r2, [pc, #124]	; (80011f4 <get_sineval+0x104>)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 800117e:	4b1e      	ldr	r3, [pc, #120]	; (80011f8 <get_sineval+0x108>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff f986 	bl	8000494 <__aeabi_i2d>
 8001188:	4605      	mov	r5, r0
 800118a:	460e      	mov	r6, r1
 800118c:	4a19      	ldr	r2, [pc, #100]	; (80011f4 <get_sineval+0x104>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f96d 	bl	8000474 <__aeabi_ui2d>
 800119a:	4b18      	ldr	r3, [pc, #96]	; (80011fc <get_sineval+0x10c>)
 800119c:	e9d3 3400 	ldrd	r3, r4, [r3]
 80011a0:	461a      	mov	r2, r3
 80011a2:	4623      	mov	r3, r4
 80011a4:	f7ff f9e0 	bl	8000568 <__aeabi_dmul>
 80011a8:	4603      	mov	r3, r0
 80011aa:	460c      	mov	r4, r1
 80011ac:	461a      	mov	r2, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	4628      	mov	r0, r5
 80011b2:	4631      	mov	r1, r6
 80011b4:	f7ff f822 	bl	80001fc <__adddf3>
 80011b8:	4603      	mov	r3, r0
 80011ba:	460c      	mov	r4, r1
 80011bc:	4618      	mov	r0, r3
 80011be:	4621      	mov	r1, r4
 80011c0:	f7ff fc94 	bl	8000aec <__aeabi_d2uiz>
 80011c4:	4601      	mov	r1, r0
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <get_sineval+0x104>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	3301      	adds	r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b63      	cmp	r3, #99	; 0x63
 80011d8:	dd90      	ble.n	80010fc <get_sineval+0xc>
	}
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e2:	bf00      	nop
 80011e4:	f3af 8000 	nop.w
 80011e8:	40590000 	.word	0x40590000
 80011ec:	3ff00000 	.word	0x3ff00000
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000310 	.word	0x20000310
 80011f8:	20000010 	.word	0x20000010
 80011fc:	20000008 	.word	0x20000008
 8001200:	4d12d84a 	.word	0x4d12d84a
 8001204:	400921fb 	.word	0x400921fb

08001208 <set_clock>:


void set_clock(void){
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Fsine*(Period + 1) ) - 1;
 800120c:	4b15      	ldr	r3, [pc, #84]	; (8001264 <set_clock+0x5c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a15      	ldr	r2, [pc, #84]	; (8001268 <set_clock+0x60>)
 8001212:	fba2 2303 	umull	r2, r3, r2, r3
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	4a14      	ldr	r2, [pc, #80]	; (800126c <set_clock+0x64>)
 800121a:	6812      	ldr	r2, [r2, #0]
 800121c:	3201      	adds	r2, #1
 800121e:	4914      	ldr	r1, [pc, #80]	; (8001270 <set_clock+0x68>)
 8001220:	6809      	ldr	r1, [r1, #0]
 8001222:	fb01 f202 	mul.w	r2, r1, r2
 8001226:	fbb3 f3f2 	udiv	r3, r3, r2
 800122a:	3b01      	subs	r3, #1
 800122c:	461a      	mov	r2, r3
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <set_clock+0x6c>)
 8001230:	601a      	str	r2, [r3, #0]

	  htim2.Instance = TIM2;
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <set_clock+0x70>)
 8001234:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001238:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 800123a:	4b0c      	ldr	r3, [pc, #48]	; (800126c <set_clock+0x64>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	461a      	mov	r2, r3
 8001240:	4b0d      	ldr	r3, [pc, #52]	; (8001278 <set_clock+0x70>)
 8001242:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 8001244:	4b0b      	ldr	r3, [pc, #44]	; (8001274 <set_clock+0x6c>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <set_clock+0x70>)
 800124c:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <set_clock+0x70>)
 8001250:	f003 fa94 	bl	800477c <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <set_clock+0x56>
	  {
	    Error_Handler();
 800125a:	f000 f8e5 	bl	8001428 <Error_Handler>
	  }

}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000018 	.word	0x20000018
 8001268:	51eb851f 	.word	0x51eb851f
 800126c:	2000001c 	.word	0x2000001c
 8001270:	20000014 	.word	0x20000014
 8001274:	2000030c 	.word	0x2000030c
 8001278:	200004e8 	.word	0x200004e8

0800127c <HAL_UART_RxCpltCallback>:
/* Setting up UART communications*/
#define uartSize 1
uint8_t rx_buff[uartSize];
uint8_t tx_buff[] = {0b00000010};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(&huart1); // Stop UART
 8001284:	4805      	ldr	r0, [pc, #20]	; (800129c <HAL_UART_RxCpltCallback+0x20>)
 8001286:	f003 fe6f 	bl	8004f68 <HAL_UART_DMAStop>

	// Do something

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 800128a:	2201      	movs	r2, #1
 800128c:	4904      	ldr	r1, [pc, #16]	; (80012a0 <HAL_UART_RxCpltCallback+0x24>)
 800128e:	4803      	ldr	r0, [pc, #12]	; (800129c <HAL_UART_RxCpltCallback+0x20>)
 8001290:	f003 fdea 	bl	8004e68 <HAL_UART_Receive_DMA>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200005e8 	.word	0x200005e8
 80012a0:	20000308 	.word	0x20000308

080012a4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b084      	sub	sp, #16
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(&huart1); // Stop UART
 80012ac:	480a      	ldr	r0, [pc, #40]	; (80012d8 <HAL_UART_TxCpltCallback+0x34>)
 80012ae:	f003 fe5b 	bl	8004f68 <HAL_UART_DMAStop>
	int i = 100;
 80012b2:	2364      	movs	r3, #100	; 0x64
 80012b4:	60fb      	str	r3, [r7, #12]
	while(i>0){
 80012b6:	e002      	b.n	80012be <HAL_UART_TxCpltCallback+0x1a>
		i = i -1;
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	3b01      	subs	r3, #1
 80012bc:	60fb      	str	r3, [r7, #12]
	while(i>0){
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	dcf9      	bgt.n	80012b8 <HAL_UART_TxCpltCallback+0x14>
	}

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 80012c4:	2201      	movs	r2, #1
 80012c6:	4905      	ldr	r1, [pc, #20]	; (80012dc <HAL_UART_TxCpltCallback+0x38>)
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <HAL_UART_TxCpltCallback+0x34>)
 80012ca:	f003 fdcd 	bl	8004e68 <HAL_UART_Receive_DMA>
}
 80012ce:	bf00      	nop
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200005e8 	.word	0x200005e8
 80012dc:	20000308 	.word	0x20000308

080012e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012e6:	f000 fb4d 	bl	8001984 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ea:	f000 f833 	bl	8001354 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012ee:	f7ff fec7 	bl	8001080 <MX_GPIO_Init>
  MX_DMA_Init();
 80012f2:	f7ff fe7f 	bl	8000ff4 <MX_DMA_Init>
  MX_DAC_Init();
 80012f6:	f7ff fd99 	bl	8000e2c <MX_DAC_Init>
  MX_TIM2_Init();
 80012fa:	f000 f97b 	bl	80015f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80012fe:	f000 f9fb 	bl	80016f8 <MX_USART1_UART_Init>
  MX_USB_DEVICE_Init();
 8001302:	f007 fc23 	bl	8008b4c <MX_USB_DEVICE_Init>
	//  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
	//  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);


  /* Sine function */
  set_clock();							// Setting frequency of timer
 8001306:	f7ff ff7f 	bl	8001208 <set_clock>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <main+0x5c>)
 800130c:	f003 fa61 	bl	80047d2 <HAL_TIM_Base_Start>
  get_sineval();						// Call get sineval function
 8001310:	f7ff feee 	bl	80010f0 <get_sineval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	2364      	movs	r3, #100	; 0x64
 800131a:	4a09      	ldr	r2, [pc, #36]	; (8001340 <main+0x60>)
 800131c:	2100      	movs	r1, #0
 800131e:	4809      	ldr	r0, [pc, #36]	; (8001344 <main+0x64>)
 8001320:	f000 fcf8 	bl	8001d14 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//
	  HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
 8001324:	2201      	movs	r2, #1
 8001326:	4908      	ldr	r1, [pc, #32]	; (8001348 <main+0x68>)
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <main+0x6c>)
 800132a:	f003 fd9d 	bl	8004e68 <HAL_UART_Receive_DMA>
	  HAL_UART_Transmit_DMA(&huart1, tx_buff, uartSize);
 800132e:	2201      	movs	r2, #1
 8001330:	4907      	ldr	r1, [pc, #28]	; (8001350 <main+0x70>)
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <main+0x6c>)
 8001334:	f003 fd2c 	bl	8004d90 <HAL_UART_Transmit_DMA>
	  HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
 8001338:	e7f4      	b.n	8001324 <main+0x44>
 800133a:	bf00      	nop
 800133c:	200004e8 	.word	0x200004e8
 8001340:	20000310 	.word	0x20000310
 8001344:	20000294 	.word	0x20000294
 8001348:	20000308 	.word	0x20000308
 800134c:	200005e8 	.word	0x200005e8
 8001350:	20000020 	.word	0x20000020

08001354 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b094      	sub	sp, #80	; 0x50
 8001358:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800135a:	f107 0320 	add.w	r3, r7, #32
 800135e:	2230      	movs	r2, #48	; 0x30
 8001360:	2100      	movs	r1, #0
 8001362:	4618      	mov	r0, r3
 8001364:	f008 f906 	bl	8009574 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001378:	2300      	movs	r3, #0
 800137a:	60bb      	str	r3, [r7, #8]
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <SystemClock_Config+0xcc>)
 800137e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001380:	4a27      	ldr	r2, [pc, #156]	; (8001420 <SystemClock_Config+0xcc>)
 8001382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001386:	6413      	str	r3, [r2, #64]	; 0x40
 8001388:	4b25      	ldr	r3, [pc, #148]	; (8001420 <SystemClock_Config+0xcc>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
 8001398:	4b22      	ldr	r3, [pc, #136]	; (8001424 <SystemClock_Config+0xd0>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a0:	4a20      	ldr	r2, [pc, #128]	; (8001424 <SystemClock_Config+0xd0>)
 80013a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013a6:	6013      	str	r3, [r2, #0]
 80013a8:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <SystemClock_Config+0xd0>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013bc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013be:	2302      	movs	r3, #2
 80013c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80013c8:	230d      	movs	r3, #13
 80013ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80013cc:	2348      	movs	r3, #72	; 0x48
 80013ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013d0:	2302      	movs	r3, #2
 80013d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013d4:	2303      	movs	r3, #3
 80013d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013d8:	f107 0320 	add.w	r3, r7, #32
 80013dc:	4618      	mov	r0, r3
 80013de:	f002 fd6b 	bl	8003eb8 <HAL_RCC_OscConfig>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <SystemClock_Config+0x98>
  {
    Error_Handler();
 80013e8:	f000 f81e 	bl	8001428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013ec:	230f      	movs	r3, #15
 80013ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013f0:	2302      	movs	r3, #2
 80013f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013fe:	2300      	movs	r3, #0
 8001400:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	2102      	movs	r1, #2
 8001408:	4618      	mov	r0, r3
 800140a:	f002 ffc5 	bl	8004398 <HAL_RCC_ClockConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001414:	f000 f808 	bl	8001428 <Error_Handler>
  }
}
 8001418:	bf00      	nop
 800141a:	3750      	adds	r7, #80	; 0x50
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800
 8001424:	40007000 	.word	0x40007000

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
	...

08001438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b10      	ldr	r3, [pc, #64]	; (8001484 <HAL_MspInit+0x4c>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	4a0f      	ldr	r2, [pc, #60]	; (8001484 <HAL_MspInit+0x4c>)
 8001448:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800144c:	6453      	str	r3, [r2, #68]	; 0x44
 800144e:	4b0d      	ldr	r3, [pc, #52]	; (8001484 <HAL_MspInit+0x4c>)
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b09      	ldr	r3, [pc, #36]	; (8001484 <HAL_MspInit+0x4c>)
 8001460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001462:	4a08      	ldr	r2, [pc, #32]	; (8001484 <HAL_MspInit+0x4c>)
 8001464:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001468:	6413      	str	r3, [r2, #64]	; 0x40
 800146a:	4b06      	ldr	r3, [pc, #24]	; (8001484 <HAL_MspInit+0x4c>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001476:	bf00      	nop
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
 8001482:	bf00      	nop
 8001484:	40023800 	.word	0x40023800

08001488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149a:	e7fe      	b.n	800149a <HardFault_Handler+0x4>

0800149c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <MemManage_Handler+0x4>

080014a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <BusFault_Handler+0x4>

080014a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <UsageFault_Handler+0x4>

080014ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ca:	b480      	push	{r7}
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ce:	bf00      	nop
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr

080014d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014dc:	f000 faa4 	bl	8001a28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e0:	bf00      	nop
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80014e8:	4802      	ldr	r0, [pc, #8]	; (80014f4 <DMA1_Stream5_IRQHandler+0x10>)
 80014ea:	f000 ff4f 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000234 	.word	0x20000234

080014f8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80014fc:	4802      	ldr	r0, [pc, #8]	; (8001508 <DMA1_Stream6_IRQHandler+0x10>)
 80014fe:	f000 ff45 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200002a8 	.word	0x200002a8

0800150c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001510:	4802      	ldr	r0, [pc, #8]	; (800151c <USART1_IRQHandler+0x10>)
 8001512:	f003 fd85 	bl	8005020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200005e8 	.word	0x200005e8

08001520 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001524:	4802      	ldr	r0, [pc, #8]	; (8001530 <USART2_IRQHandler+0x10>)
 8001526:	f003 fd7b 	bl	8005020 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800152a:	bf00      	nop
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	20000628 	.word	0x20000628

08001534 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001538:	4802      	ldr	r0, [pc, #8]	; (8001544 <DMA2_Stream2_IRQHandler+0x10>)
 800153a:	f000 ff27 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000588 	.word	0x20000588

08001548 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800154c:	4802      	ldr	r0, [pc, #8]	; (8001558 <OTG_FS_IRQHandler+0x10>)
 800154e:	f001 fc7f 	bl	8002e50 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20001b3c 	.word	0x20001b3c

0800155c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001560:	4802      	ldr	r0, [pc, #8]	; (800156c <DMA2_Stream7_IRQHandler+0x10>)
 8001562:	f000 ff13 	bl	800238c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000528 	.word	0x20000528

08001570 <_sbrk>:
 8001570:	b580      	push	{r7, lr}
 8001572:	b084      	sub	sp, #16
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x50>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <_sbrk+0x16>
 8001580:	4b0f      	ldr	r3, [pc, #60]	; (80015c0 <_sbrk+0x50>)
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <_sbrk+0x54>)
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	4b0e      	ldr	r3, [pc, #56]	; (80015c0 <_sbrk+0x50>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <_sbrk+0x50>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4413      	add	r3, r2
 8001594:	466a      	mov	r2, sp
 8001596:	4293      	cmp	r3, r2
 8001598:	d907      	bls.n	80015aa <_sbrk+0x3a>
 800159a:	f007 ffb1 	bl	8009500 <__errno>
 800159e:	4602      	mov	r2, r0
 80015a0:	230c      	movs	r3, #12
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	f04f 33ff 	mov.w	r3, #4294967295
 80015a8:	e006      	b.n	80015b8 <_sbrk+0x48>
 80015aa:	4b05      	ldr	r3, [pc, #20]	; (80015c0 <_sbrk+0x50>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	4a03      	ldr	r2, [pc, #12]	; (80015c0 <_sbrk+0x50>)
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4618      	mov	r0, r3
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000224 	.word	0x20000224
 80015c4:	20001f48 	.word	0x20001f48

080015c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <SystemInit+0x28>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a07      	ldr	r2, [pc, #28]	; (80015f0 <SystemInit+0x28>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015dc:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <SystemInit+0x28>)
 80015de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015e2:	609a      	str	r2, [r3, #8]
#endif
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0308 	add.w	r3, r7, #8
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	463b      	mov	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <MX_TIM2_Init+0x94>)
 8001612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001616:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001618:	4b1b      	ldr	r3, [pc, #108]	; (8001688 <MX_TIM2_Init+0x94>)
 800161a:	2201      	movs	r2, #1
 800161c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b1a      	ldr	r3, [pc, #104]	; (8001688 <MX_TIM2_Init+0x94>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001624:	4b18      	ldr	r3, [pc, #96]	; (8001688 <MX_TIM2_Init+0x94>)
 8001626:	2201      	movs	r2, #1
 8001628:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162a:	4b17      	ldr	r3, [pc, #92]	; (8001688 <MX_TIM2_Init+0x94>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001630:	4b15      	ldr	r3, [pc, #84]	; (8001688 <MX_TIM2_Init+0x94>)
 8001632:	2280      	movs	r2, #128	; 0x80
 8001634:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001636:	4814      	ldr	r0, [pc, #80]	; (8001688 <MX_TIM2_Init+0x94>)
 8001638:	f003 f8a0 	bl	800477c <HAL_TIM_Base_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001642:	f7ff fef1 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800164a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800164c:	f107 0308 	add.w	r3, r7, #8
 8001650:	4619      	mov	r1, r3
 8001652:	480d      	ldr	r0, [pc, #52]	; (8001688 <MX_TIM2_Init+0x94>)
 8001654:	f003 f8e1 	bl	800481a <HAL_TIM_ConfigClockSource>
 8001658:	4603      	mov	r3, r0
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 800165e:	f7ff fee3 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001662:	2320      	movs	r3, #32
 8001664:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800166a:	463b      	mov	r3, r7
 800166c:	4619      	mov	r1, r3
 800166e:	4806      	ldr	r0, [pc, #24]	; (8001688 <MX_TIM2_Init+0x94>)
 8001670:	f003 fac4 	bl	8004bfc <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800167a:	f7ff fed5 	bl	8001428 <Error_Handler>
  }

}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200004e8 	.word	0x200004e8

0800168c <HAL_TIM_Base_MspInit>:
  }

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800169c:	d10e      	bne.n	80016bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <HAL_TIM_Base_MspInit+0x64>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a12      	ldr	r2, [pc, #72]	; (80016f0 <HAL_TIM_Base_MspInit+0x64>)
 80016a8:	f043 0301 	orr.w	r3, r3, #1
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <HAL_TIM_Base_MspInit+0x64>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 0301 	and.w	r3, r3, #1
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80016ba:	e012      	b.n	80016e2 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a0c      	ldr	r2, [pc, #48]	; (80016f4 <HAL_TIM_Base_MspInit+0x68>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d10d      	bne.n	80016e2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <HAL_TIM_Base_MspInit+0x64>)
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	4a08      	ldr	r2, [pc, #32]	; (80016f0 <HAL_TIM_Base_MspInit+0x64>)
 80016d0:	f043 0304 	orr.w	r3, r3, #4
 80016d4:	6413      	str	r3, [r2, #64]	; 0x40
 80016d6:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <HAL_TIM_Base_MspInit+0x64>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016da:	f003 0304 	and.w	r3, r3, #4
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
}
 80016e2:	bf00      	nop
 80016e4:	3714      	adds	r7, #20
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40023800 	.word	0x40023800
 80016f4:	40000800 	.word	0x40000800

080016f8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 80016fe:	4a12      	ldr	r2, [pc, #72]	; (8001748 <MX_USART1_UART_Init+0x50>)
 8001700:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001702:	4b10      	ldr	r3, [pc, #64]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART1_UART_Init+0x4c>)
 8001730:	f003 fae0 	bl	8004cf4 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800173a:	f7ff fe75 	bl	8001428 <Error_Handler>
  }

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	200005e8 	.word	0x200005e8
 8001748:	40011000 	.word	0x40011000

0800174c <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b08c      	sub	sp, #48	; 0x30
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001754:	f107 031c 	add.w	r3, r7, #28
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a69      	ldr	r2, [pc, #420]	; (8001910 <HAL_UART_MspInit+0x1c4>)
 800176a:	4293      	cmp	r3, r2
 800176c:	f040 8092 	bne.w	8001894 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	61bb      	str	r3, [r7, #24]
 8001774:	4b67      	ldr	r3, [pc, #412]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 8001776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001778:	4a66      	ldr	r2, [pc, #408]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 800177a:	f043 0310 	orr.w	r3, r3, #16
 800177e:	6453      	str	r3, [r2, #68]	; 0x44
 8001780:	4b64      	ldr	r3, [pc, #400]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	61bb      	str	r3, [r7, #24]
 800178a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	4b60      	ldr	r3, [pc, #384]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 8001792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001794:	4a5f      	ldr	r2, [pc, #380]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6313      	str	r3, [r2, #48]	; 0x30
 800179c:	4b5d      	ldr	r3, [pc, #372]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 800179e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a0:	f003 0301 	and.w	r3, r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ae:	2302      	movs	r3, #2
 80017b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b2:	2300      	movs	r3, #0
 80017b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b6:	2303      	movs	r3, #3
 80017b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ba:	2307      	movs	r3, #7
 80017bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	4854      	ldr	r0, [pc, #336]	; (8001918 <HAL_UART_MspInit+0x1cc>)
 80017c6:	f001 f849 	bl	800285c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80017ca:	4b54      	ldr	r3, [pc, #336]	; (800191c <HAL_UART_MspInit+0x1d0>)
 80017cc:	4a54      	ldr	r2, [pc, #336]	; (8001920 <HAL_UART_MspInit+0x1d4>)
 80017ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80017d0:	4b52      	ldr	r3, [pc, #328]	; (800191c <HAL_UART_MspInit+0x1d0>)
 80017d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d8:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_UART_MspInit+0x1d0>)
 80017da:	2200      	movs	r2, #0
 80017dc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017de:	4b4f      	ldr	r3, [pc, #316]	; (800191c <HAL_UART_MspInit+0x1d0>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017e4:	4b4d      	ldr	r3, [pc, #308]	; (800191c <HAL_UART_MspInit+0x1d0>)
 80017e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ea:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017ec:	4b4b      	ldr	r3, [pc, #300]	; (800191c <HAL_UART_MspInit+0x1d0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017f2:	4b4a      	ldr	r3, [pc, #296]	; (800191c <HAL_UART_MspInit+0x1d0>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017f8:	4b48      	ldr	r3, [pc, #288]	; (800191c <HAL_UART_MspInit+0x1d0>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <HAL_UART_MspInit+0x1d0>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001804:	4b45      	ldr	r3, [pc, #276]	; (800191c <HAL_UART_MspInit+0x1d0>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800180a:	4844      	ldr	r0, [pc, #272]	; (800191c <HAL_UART_MspInit+0x1d0>)
 800180c:	f000 fc26 	bl	800205c <HAL_DMA_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001816:	f7ff fe07 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a3f      	ldr	r2, [pc, #252]	; (800191c <HAL_UART_MspInit+0x1d0>)
 800181e:	635a      	str	r2, [r3, #52]	; 0x34
 8001820:	4a3e      	ldr	r2, [pc, #248]	; (800191c <HAL_UART_MspInit+0x1d0>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 8001828:	4a3f      	ldr	r2, [pc, #252]	; (8001928 <HAL_UART_MspInit+0x1dc>)
 800182a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 800182c:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 800182e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001832:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001834:	4b3b      	ldr	r3, [pc, #236]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 8001836:	2240      	movs	r2, #64	; 0x40
 8001838:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800183a:	4b3a      	ldr	r3, [pc, #232]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 800183c:	2200      	movs	r2, #0
 800183e:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001840:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 8001842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001846:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001848:	4b36      	ldr	r3, [pc, #216]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 800184a:	2200      	movs	r2, #0
 800184c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800184e:	4b35      	ldr	r3, [pc, #212]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 8001850:	2200      	movs	r2, #0
 8001852:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 8001856:	2200      	movs	r2, #0
 8001858:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800185a:	4b32      	ldr	r3, [pc, #200]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 800185c:	2200      	movs	r2, #0
 800185e:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 8001862:	2200      	movs	r2, #0
 8001864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001866:	482f      	ldr	r0, [pc, #188]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 8001868:	f000 fbf8 	bl	800205c <HAL_DMA_Init>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001872:	f7ff fdd9 	bl	8001428 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 800187a:	631a      	str	r2, [r3, #48]	; 0x30
 800187c:	4a29      	ldr	r2, [pc, #164]	; (8001924 <HAL_UART_MspInit+0x1d8>)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001882:	2200      	movs	r2, #0
 8001884:	2100      	movs	r1, #0
 8001886:	2025      	movs	r0, #37	; 0x25
 8001888:	f000 f9eb 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800188c:	2025      	movs	r0, #37	; 0x25
 800188e:	f000 fa04 	bl	8001c9a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001892:	e038      	b.n	8001906 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a24      	ldr	r2, [pc, #144]	; (800192c <HAL_UART_MspInit+0x1e0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d133      	bne.n	8001906 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a6:	4a1b      	ldr	r2, [pc, #108]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	6413      	str	r3, [r2, #64]	; 0x40
 80018ae:	4b19      	ldr	r3, [pc, #100]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	613b      	str	r3, [r7, #16]
 80018b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_UART_MspInit+0x1c8>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018d6:	230c      	movs	r3, #12
 80018d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	2302      	movs	r3, #2
 80018dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	2300      	movs	r3, #0
 80018e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	2303      	movs	r3, #3
 80018e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018e6:	2307      	movs	r3, #7
 80018e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ea:	f107 031c 	add.w	r3, r7, #28
 80018ee:	4619      	mov	r1, r3
 80018f0:	4809      	ldr	r0, [pc, #36]	; (8001918 <HAL_UART_MspInit+0x1cc>)
 80018f2:	f000 ffb3 	bl	800285c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	2100      	movs	r1, #0
 80018fa:	2026      	movs	r0, #38	; 0x26
 80018fc:	f000 f9b1 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001900:	2026      	movs	r0, #38	; 0x26
 8001902:	f000 f9ca 	bl	8001c9a <HAL_NVIC_EnableIRQ>
}
 8001906:	bf00      	nop
 8001908:	3730      	adds	r7, #48	; 0x30
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	40011000 	.word	0x40011000
 8001914:	40023800 	.word	0x40023800
 8001918:	40020000 	.word	0x40020000
 800191c:	20000588 	.word	0x20000588
 8001920:	40026440 	.word	0x40026440
 8001924:	20000528 	.word	0x20000528
 8001928:	400264b8 	.word	0x400264b8
 800192c:	40004400 	.word	0x40004400

08001930 <Reset_Handler>:
 8001930:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001968 <LoopFillZerobss+0x14>
 8001934:	2100      	movs	r1, #0
 8001936:	e003      	b.n	8001940 <LoopCopyDataInit>

08001938 <CopyDataInit>:
 8001938:	4b0c      	ldr	r3, [pc, #48]	; (800196c <LoopFillZerobss+0x18>)
 800193a:	585b      	ldr	r3, [r3, r1]
 800193c:	5043      	str	r3, [r0, r1]
 800193e:	3104      	adds	r1, #4

08001940 <LoopCopyDataInit>:
 8001940:	480b      	ldr	r0, [pc, #44]	; (8001970 <LoopFillZerobss+0x1c>)
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <LoopFillZerobss+0x20>)
 8001944:	1842      	adds	r2, r0, r1
 8001946:	429a      	cmp	r2, r3
 8001948:	d3f6      	bcc.n	8001938 <CopyDataInit>
 800194a:	4a0b      	ldr	r2, [pc, #44]	; (8001978 <LoopFillZerobss+0x24>)
 800194c:	e002      	b.n	8001954 <LoopFillZerobss>

0800194e <FillZerobss>:
 800194e:	2300      	movs	r3, #0
 8001950:	f842 3b04 	str.w	r3, [r2], #4

08001954 <LoopFillZerobss>:
 8001954:	4b09      	ldr	r3, [pc, #36]	; (800197c <LoopFillZerobss+0x28>)
 8001956:	429a      	cmp	r2, r3
 8001958:	d3f9      	bcc.n	800194e <FillZerobss>
 800195a:	f7ff fe35 	bl	80015c8 <SystemInit>
 800195e:	f007 fdd5 	bl	800950c <__libc_init_array>
 8001962:	f7ff fcbd 	bl	80012e0 <main>
 8001966:	4770      	bx	lr
 8001968:	20030000 	.word	0x20030000
 800196c:	0800a988 	.word	0x0800a988
 8001970:	20000000 	.word	0x20000000
 8001974:	20000208 	.word	0x20000208
 8001978:	20000208 	.word	0x20000208
 800197c:	20001f48 	.word	0x20001f48

08001980 <ADC_IRQHandler>:
 8001980:	e7fe      	b.n	8001980 <ADC_IRQHandler>
	...

08001984 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001988:	4b0e      	ldr	r3, [pc, #56]	; (80019c4 <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a0d      	ldr	r2, [pc, #52]	; (80019c4 <HAL_Init+0x40>)
 800198e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001992:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001994:	4b0b      	ldr	r3, [pc, #44]	; (80019c4 <HAL_Init+0x40>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_Init+0x40>)
 800199a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800199e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <HAL_Init+0x40>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <HAL_Init+0x40>)
 80019a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019ac:	2003      	movs	r0, #3
 80019ae:	f000 f94d 	bl	8001c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b2:	2000      	movs	r0, #0
 80019b4:	f000 f808 	bl	80019c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019b8:	f7ff fd3e 	bl	8001438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019bc:	2300      	movs	r3, #0
}
 80019be:	4618      	mov	r0, r3
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40023c00 	.word	0x40023c00

080019c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d0:	4b12      	ldr	r3, [pc, #72]	; (8001a1c <HAL_InitTick+0x54>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x58>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019de:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e6:	4618      	mov	r0, r3
 80019e8:	f000 f965 	bl	8001cb6 <HAL_SYSTICK_Config>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00e      	b.n	8001a14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b0f      	cmp	r3, #15
 80019fa:	d80a      	bhi.n	8001a12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019fc:	2200      	movs	r2, #0
 80019fe:	6879      	ldr	r1, [r7, #4]
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f000 f92d 	bl	8001c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a08:	4a06      	ldr	r2, [pc, #24]	; (8001a24 <HAL_InitTick+0x5c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	e000      	b.n	8001a14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000024 	.word	0x20000024
 8001a20:	2000002c 	.word	0x2000002c
 8001a24:	20000028 	.word	0x20000028

08001a28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a2c:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_IncTick+0x20>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x24>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	4a04      	ldr	r2, [pc, #16]	; (8001a4c <HAL_IncTick+0x24>)
 8001a3a:	6013      	str	r3, [r2, #0]
}
 8001a3c:	bf00      	nop
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	2000002c 	.word	0x2000002c
 8001a4c:	20000668 	.word	0x20000668

08001a50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return uwTick;
 8001a54:	4b03      	ldr	r3, [pc, #12]	; (8001a64 <HAL_GetTick+0x14>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	20000668 	.word	0x20000668

08001a68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a70:	f7ff ffee 	bl	8001a50 <HAL_GetTick>
 8001a74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d005      	beq.n	8001a8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <HAL_Delay+0x40>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	461a      	mov	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a8e:	bf00      	nop
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_GetTick>
 8001a94:	4602      	mov	r2, r0
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d8f7      	bhi.n	8001a90 <HAL_Delay+0x28>
  {
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000002c 	.word	0x2000002c

08001aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b085      	sub	sp, #20
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001abc:	4b0c      	ldr	r3, [pc, #48]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001abe:	68db      	ldr	r3, [r3, #12]
 8001ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ac2:	68ba      	ldr	r2, [r7, #8]
 8001ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ac8:	4013      	ands	r3, r2
 8001aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ade:	4a04      	ldr	r2, [pc, #16]	; (8001af0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	60d3      	str	r3, [r2, #12]
}
 8001ae4:	bf00      	nop
 8001ae6:	3714      	adds	r7, #20
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <__NVIC_GetPriorityGrouping+0x18>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	f003 0307 	and.w	r3, r3, #7
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	4603      	mov	r3, r0
 8001b18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	db0b      	blt.n	8001b3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	f003 021f 	and.w	r2, r3, #31
 8001b28:	4907      	ldr	r1, [pc, #28]	; (8001b48 <__NVIC_EnableIRQ+0x38>)
 8001b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2e:	095b      	lsrs	r3, r3, #5
 8001b30:	2001      	movs	r0, #1
 8001b32:	fa00 f202 	lsl.w	r2, r0, r2
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
 8001b46:	bf00      	nop
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
         );
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c18:	d301      	bcc.n	8001c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00f      	b.n	8001c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c1e:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <SysTick_Config+0x40>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	3b01      	subs	r3, #1
 8001c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c26:	210f      	movs	r1, #15
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f7ff ff8e 	bl	8001b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c30:	4b05      	ldr	r3, [pc, #20]	; (8001c48 <SysTick_Config+0x40>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <SysTick_Config+0x40>)
 8001c38:	2207      	movs	r2, #7
 8001c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	e000e010 	.word	0xe000e010

08001c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f7ff ff29 	bl	8001aac <__NVIC_SetPriorityGrouping>
}
 8001c5a:	bf00      	nop
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c74:	f7ff ff3e 	bl	8001af4 <__NVIC_GetPriorityGrouping>
 8001c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68b9      	ldr	r1, [r7, #8]
 8001c7e:	6978      	ldr	r0, [r7, #20]
 8001c80:	f7ff ff8e 	bl	8001ba0 <NVIC_EncodePriority>
 8001c84:	4602      	mov	r2, r0
 8001c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff5d 	bl	8001b4c <__NVIC_SetPriority>
}
 8001c92:	bf00      	nop
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff31 	bl	8001b10 <__NVIC_EnableIRQ>
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff ffa2 	bl	8001c08 <SysTick_Config>
 8001cc4:	4603      	mov	r3, r0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e014      	b.n	8001d0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	791b      	ldrb	r3, [r3, #4]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d105      	bne.n	8001cf6 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2200      	movs	r2, #0
 8001cee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff f8d1 	bl	8000e98 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	795b      	ldrb	r3, [r3, #5]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_DAC_Start_DMA+0x1e>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e08e      	b.n	8001e50 <HAL_DAC_Start_DMA+0x13c>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	2201      	movs	r2, #1
 8001d36:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2202      	movs	r2, #2
 8001d3c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d12a      	bne.n	8001d9a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	4a43      	ldr	r2, [pc, #268]	; (8001e58 <HAL_DAC_Start_DMA+0x144>)
 8001d4a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	4a42      	ldr	r2, [pc, #264]	; (8001e5c <HAL_DAC_Start_DMA+0x148>)
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a41      	ldr	r2, [pc, #260]	; (8001e60 <HAL_DAC_Start_DMA+0x14c>)
 8001d5a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001d6a:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8001d6c:	6a3b      	ldr	r3, [r7, #32]
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d009      	beq.n	8001d86 <HAL_DAC_Start_DMA+0x72>
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d00c      	beq.n	8001d90 <HAL_DAC_Start_DMA+0x7c>
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d000      	beq.n	8001d7c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001d7a:	e039      	b.n	8001df0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	3308      	adds	r3, #8
 8001d82:	617b      	str	r3, [r7, #20]
        break;
 8001d84:	e034      	b.n	8001df0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	330c      	adds	r3, #12
 8001d8c:	617b      	str	r3, [r7, #20]
        break;
 8001d8e:	e02f      	b.n	8001df0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	3310      	adds	r3, #16
 8001d96:	617b      	str	r3, [r7, #20]
        break;
 8001d98:	e02a      	b.n	8001df0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	4a31      	ldr	r2, [pc, #196]	; (8001e64 <HAL_DAC_Start_DMA+0x150>)
 8001da0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	4a30      	ldr	r2, [pc, #192]	; (8001e68 <HAL_DAC_Start_DMA+0x154>)
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <HAL_DAC_Start_DMA+0x158>)
 8001db0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001dc0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d009      	beq.n	8001ddc <HAL_DAC_Start_DMA+0xc8>
 8001dc8:	2b08      	cmp	r3, #8
 8001dca:	d00c      	beq.n	8001de6 <HAL_DAC_Start_DMA+0xd2>
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d000      	beq.n	8001dd2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001dd0:	e00e      	b.n	8001df0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	3314      	adds	r3, #20
 8001dd8:	617b      	str	r3, [r7, #20]
        break;
 8001dda:	e009      	b.n	8001df0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	3318      	adds	r3, #24
 8001de2:	617b      	str	r3, [r7, #20]
        break;
 8001de4:	e004      	b.n	8001df0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	331c      	adds	r3, #28
 8001dec:	617b      	str	r3, [r7, #20]
        break;
 8001dee:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10f      	bne.n	8001e16 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681a      	ldr	r2, [r3, #0]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e04:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6898      	ldr	r0, [r3, #8]
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	f000 f9d2 	bl	80021b8 <HAL_DMA_Start_IT>
 8001e14:	e00e      	b.n	8001e34 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001e24:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	68d8      	ldr	r0, [r3, #12]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	f000 f9c2 	bl	80021b8 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3718      	adds	r7, #24
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	08001f47 	.word	0x08001f47
 8001e5c:	08001f69 	.word	0x08001f69
 8001e60:	08001f85 	.word	0x08001f85
 8001e64:	08001fef 	.word	0x08001fef
 8001e68:	08002011 	.word	0x08002011
 8001e6c:	0800202d 	.word	0x0800202d

08001e70 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr

08001e84 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001ea0:	bf00      	nop
 8001ea2:	370c      	adds	r7, #12
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b087      	sub	sp, #28
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	60f8      	str	r0, [r7, #12]
 8001eb4:	60b9      	str	r1, [r7, #8]
 8001eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	795b      	ldrb	r3, [r3, #5]
 8001ec4:	2b01      	cmp	r3, #1
 8001ec6:	d101      	bne.n	8001ecc <HAL_DAC_ConfigChannel+0x20>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	e036      	b.n	8001f3a <HAL_DAC_ConfigChannel+0x8e>
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001ee0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eea:	43db      	mvns	r3, r3
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	697a      	ldr	r2, [r7, #20]
 8001f12:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6819      	ldr	r1, [r3, #0]
 8001f1a:	22c0      	movs	r2, #192	; 0xc0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	43da      	mvns	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	400a      	ands	r2, r1
 8001f2a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2200      	movs	r2, #0
 8001f36:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b084      	sub	sp, #16
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f52:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001f54:	68f8      	ldr	r0, [r7, #12]
 8001f56:	f7ff ff8b 	bl	8001e70 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2201      	movs	r2, #1
 8001f5e:	711a      	strb	r2, [r3, #4]
}
 8001f60:	bf00      	nop
 8001f62:	3710      	adds	r7, #16
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b084      	sub	sp, #16
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f74:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001f76:	68f8      	ldr	r0, [r7, #12]
 8001f78:	f7ff ff84 	bl	8001e84 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f7c:	bf00      	nop
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f90:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	f043 0204 	orr.w	r2, r3, #4
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ff7a 	bl	8001e98 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	711a      	strb	r2, [r3, #4]
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	b083      	sub	sp, #12
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8001fba:	bf00      	nop
 8001fbc:	370c      	adds	r7, #12
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc4:	4770      	bx	lr

08001fc6 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8001fc6:	b480      	push	{r7}
 8001fc8:	b083      	sub	sp, #12
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001fce:	bf00      	nop
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b083      	sub	sp, #12
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr

08001fee <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ffa:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7ff ffd8 	bl	8001fb2 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	711a      	strb	r2, [r3, #4]
}
 8002008:	bf00      	nop
 800200a:	3710      	adds	r7, #16
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b084      	sub	sp, #16
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800201c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f7ff ffd1 	bl	8001fc6 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002024:	bf00      	nop
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002038:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	691b      	ldr	r3, [r3, #16]
 800203e:	f043 0204 	orr.w	r2, r3, #4
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f7ff ffc7 	bl	8001fda <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	2201      	movs	r2, #1
 8002050:	711a      	strb	r2, [r3, #4]
}
 8002052:	bf00      	nop
 8002054:	3710      	adds	r7, #16
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b086      	sub	sp, #24
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002068:	f7ff fcf2 	bl	8001a50 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e099      	b.n	80021ac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2202      	movs	r2, #2
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002098:	e00f      	b.n	80020ba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800209a:	f7ff fcd9 	bl	8001a50 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b05      	cmp	r3, #5
 80020a6:	d908      	bls.n	80020ba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2220      	movs	r2, #32
 80020ac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2203      	movs	r2, #3
 80020b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e078      	b.n	80021ac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d1e8      	bne.n	800209a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	4b38      	ldr	r3, [pc, #224]	; (80021b4 <HAL_DMA_Init+0x158>)
 80020d4:	4013      	ands	r3, r2
 80020d6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	691b      	ldr	r3, [r3, #16]
 80020ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002106:	697a      	ldr	r2, [r7, #20]
 8002108:	4313      	orrs	r3, r2
 800210a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002110:	2b04      	cmp	r3, #4
 8002112:	d107      	bne.n	8002124 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211c:	4313      	orrs	r3, r2
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	4313      	orrs	r3, r2
 8002122:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	f023 0307 	bic.w	r3, r3, #7
 800213a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002140:	697a      	ldr	r2, [r7, #20]
 8002142:	4313      	orrs	r3, r2
 8002144:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	2b04      	cmp	r3, #4
 800214c:	d117      	bne.n	800217e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002152:	697a      	ldr	r2, [r7, #20]
 8002154:	4313      	orrs	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	f000 fb01 	bl	8002768 <DMA_CheckFifoParam>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d008      	beq.n	800217e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2240      	movs	r2, #64	; 0x40
 8002170:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800217a:	2301      	movs	r3, #1
 800217c:	e016      	b.n	80021ac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002186:	6878      	ldr	r0, [r7, #4]
 8002188:	f000 fab8 	bl	80026fc <DMA_CalcBaseAndBitshift>
 800218c:	4603      	mov	r3, r0
 800218e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	223f      	movs	r2, #63	; 0x3f
 8002196:	409a      	lsls	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3718      	adds	r7, #24
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	f010803f 	.word	0xf010803f

080021b8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ce:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d101      	bne.n	80021de <HAL_DMA_Start_IT+0x26>
 80021da:	2302      	movs	r3, #2
 80021dc:	e040      	b.n	8002260 <HAL_DMA_Start_IT+0xa8>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2201      	movs	r2, #1
 80021e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d12f      	bne.n	8002252 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2202      	movs	r2, #2
 80021f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	687a      	ldr	r2, [r7, #4]
 8002204:	68b9      	ldr	r1, [r7, #8]
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 fa4a 	bl	80026a0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002210:	223f      	movs	r2, #63	; 0x3f
 8002212:	409a      	lsls	r2, r3
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f042 0216 	orr.w	r2, r2, #22
 8002226:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	2b00      	cmp	r3, #0
 800222e:	d007      	beq.n	8002240 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f042 0208 	orr.w	r2, r2, #8
 800223e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 0201 	orr.w	r2, r2, #1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	e005      	b.n	800225e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800225a:	2302      	movs	r3, #2
 800225c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800225e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3718      	adds	r7, #24
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002274:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002276:	f7ff fbeb 	bl	8001a50 <HAL_GetTick>
 800227a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002282:	b2db      	uxtb	r3, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d008      	beq.n	800229a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2280      	movs	r2, #128	; 0x80
 800228c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e052      	b.n	8002340 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f022 0216 	bic.w	r2, r2, #22
 80022a8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022b8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d103      	bne.n	80022ca <HAL_DMA_Abort+0x62>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d007      	beq.n	80022da <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0208 	bic.w	r2, r2, #8
 80022d8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f022 0201 	bic.w	r2, r2, #1
 80022e8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ea:	e013      	b.n	8002314 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022ec:	f7ff fbb0 	bl	8001a50 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b05      	cmp	r3, #5
 80022f8:	d90c      	bls.n	8002314 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2220      	movs	r2, #32
 80022fe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2203      	movs	r2, #3
 800230c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e015      	b.n	8002340 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1e4      	bne.n	80022ec <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	223f      	movs	r2, #63	; 0x3f
 8002328:	409a      	lsls	r2, r3
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3710      	adds	r7, #16
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d004      	beq.n	8002366 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2280      	movs	r2, #128	; 0x80
 8002360:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e00c      	b.n	8002380 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2205      	movs	r2, #5
 800236a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 0201 	bic.w	r2, r2, #1
 800237c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002398:	4b92      	ldr	r3, [pc, #584]	; (80025e4 <HAL_DMA_IRQHandler+0x258>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a92      	ldr	r2, [pc, #584]	; (80025e8 <HAL_DMA_IRQHandler+0x25c>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	0a9b      	lsrs	r3, r3, #10
 80023a4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023aa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023b6:	2208      	movs	r2, #8
 80023b8:	409a      	lsls	r2, r3
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	4013      	ands	r3, r2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d01a      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0304 	and.w	r3, r3, #4
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 0204 	bic.w	r2, r2, #4
 80023de:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	2208      	movs	r2, #8
 80023e6:	409a      	lsls	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2201      	movs	r2, #1
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d012      	beq.n	800242e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2201      	movs	r2, #1
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002426:	f043 0202 	orr.w	r2, r3, #2
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002432:	2204      	movs	r2, #4
 8002434:	409a      	lsls	r2, r3
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	4013      	ands	r3, r2
 800243a:	2b00      	cmp	r3, #0
 800243c:	d012      	beq.n	8002464 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d00b      	beq.n	8002464 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002450:	2204      	movs	r2, #4
 8002452:	409a      	lsls	r2, r3
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800245c:	f043 0204 	orr.w	r2, r3, #4
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002468:	2210      	movs	r2, #16
 800246a:	409a      	lsls	r2, r3
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d043      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0308 	and.w	r3, r3, #8
 800247e:	2b00      	cmp	r3, #0
 8002480:	d03c      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002486:	2210      	movs	r2, #16
 8002488:	409a      	lsls	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d018      	beq.n	80024ce <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d108      	bne.n	80024bc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d024      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	4798      	blx	r3
 80024ba:	e01f      	b.n	80024fc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01b      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	4798      	blx	r3
 80024cc:	e016      	b.n	80024fc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d107      	bne.n	80024ec <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0208 	bic.w	r2, r2, #8
 80024ea:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2220      	movs	r2, #32
 8002502:	409a      	lsls	r2, r3
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4013      	ands	r3, r2
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 808e 	beq.w	800262a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 8086 	beq.w	800262a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002522:	2220      	movs	r2, #32
 8002524:	409a      	lsls	r2, r3
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002530:	b2db      	uxtb	r3, r3
 8002532:	2b05      	cmp	r3, #5
 8002534:	d136      	bne.n	80025a4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 0216 	bic.w	r2, r2, #22
 8002544:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695a      	ldr	r2, [r3, #20]
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002554:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	2b00      	cmp	r3, #0
 800255c:	d103      	bne.n	8002566 <HAL_DMA_IRQHandler+0x1da>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002562:	2b00      	cmp	r3, #0
 8002564:	d007      	beq.n	8002576 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0208 	bic.w	r2, r2, #8
 8002574:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800257a:	223f      	movs	r2, #63	; 0x3f
 800257c:	409a      	lsls	r2, r3
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2201      	movs	r2, #1
 800258e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d07d      	beq.n	8002696 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	4798      	blx	r3
        }
        return;
 80025a2:	e078      	b.n	8002696 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d01c      	beq.n	80025ec <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d108      	bne.n	80025d2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d030      	beq.n	800262a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	4798      	blx	r3
 80025d0:	e02b      	b.n	800262a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d027      	beq.n	800262a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
 80025e2:	e022      	b.n	800262a <HAL_DMA_IRQHandler+0x29e>
 80025e4:	20000024 	.word	0x20000024
 80025e8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10f      	bne.n	800261a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0210 	bic.w	r2, r2, #16
 8002608:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800262e:	2b00      	cmp	r3, #0
 8002630:	d032      	beq.n	8002698 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	f003 0301 	and.w	r3, r3, #1
 800263a:	2b00      	cmp	r3, #0
 800263c:	d022      	beq.n	8002684 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2205      	movs	r2, #5
 8002642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f022 0201 	bic.w	r2, r2, #1
 8002654:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	3301      	adds	r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
 800265c:	697a      	ldr	r2, [r7, #20]
 800265e:	429a      	cmp	r2, r3
 8002660:	d307      	bcc.n	8002672 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0301 	and.w	r3, r3, #1
 800266c:	2b00      	cmp	r3, #0
 800266e:	d1f2      	bne.n	8002656 <HAL_DMA_IRQHandler+0x2ca>
 8002670:	e000      	b.n	8002674 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002672:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	4798      	blx	r3
 8002694:	e000      	b.n	8002698 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002696:	bf00      	nop
    }
  }
}
 8002698:	3718      	adds	r7, #24
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop

080026a0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
 80026ac:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026bc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	683a      	ldr	r2, [r7, #0]
 80026c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	2b40      	cmp	r3, #64	; 0x40
 80026cc:	d108      	bne.n	80026e0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68ba      	ldr	r2, [r7, #8]
 80026dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80026de:	e007      	b.n	80026f0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	60da      	str	r2, [r3, #12]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b085      	sub	sp, #20
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b2db      	uxtb	r3, r3
 800270a:	3b10      	subs	r3, #16
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <DMA_CalcBaseAndBitshift+0x64>)
 800270e:	fba2 2303 	umull	r2, r3, r2, r3
 8002712:	091b      	lsrs	r3, r3, #4
 8002714:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <DMA_CalcBaseAndBitshift+0x68>)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4413      	add	r3, r2
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	461a      	mov	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2b03      	cmp	r3, #3
 8002728:	d909      	bls.n	800273e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002732:	f023 0303 	bic.w	r3, r3, #3
 8002736:	1d1a      	adds	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	659a      	str	r2, [r3, #88]	; 0x58
 800273c:	e007      	b.n	800274e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002746:	f023 0303 	bic.w	r3, r3, #3
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	aaaaaaab 	.word	0xaaaaaaab
 8002764:	0800a798 	.word	0x0800a798

08002768 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002778:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11f      	bne.n	80027c2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d855      	bhi.n	8002834 <DMA_CheckFifoParam+0xcc>
 8002788:	a201      	add	r2, pc, #4	; (adr r2, 8002790 <DMA_CheckFifoParam+0x28>)
 800278a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800278e:	bf00      	nop
 8002790:	080027a1 	.word	0x080027a1
 8002794:	080027b3 	.word	0x080027b3
 8002798:	080027a1 	.word	0x080027a1
 800279c:	08002835 	.word	0x08002835
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d045      	beq.n	8002838 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027b0:	e042      	b.n	8002838 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027ba:	d13f      	bne.n	800283c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027c0:	e03c      	b.n	800283c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027ca:	d121      	bne.n	8002810 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d836      	bhi.n	8002840 <DMA_CheckFifoParam+0xd8>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <DMA_CheckFifoParam+0x70>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	080027e9 	.word	0x080027e9
 80027dc:	080027ef 	.word	0x080027ef
 80027e0:	080027e9 	.word	0x080027e9
 80027e4:	08002801 	.word	0x08002801
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80027e8:	2301      	movs	r3, #1
 80027ea:	73fb      	strb	r3, [r7, #15]
      break;
 80027ec:	e02f      	b.n	800284e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d024      	beq.n	8002844 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027fe:	e021      	b.n	8002844 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002804:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002808:	d11e      	bne.n	8002848 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800280e:	e01b      	b.n	8002848 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	2b02      	cmp	r3, #2
 8002814:	d902      	bls.n	800281c <DMA_CheckFifoParam+0xb4>
 8002816:	2b03      	cmp	r3, #3
 8002818:	d003      	beq.n	8002822 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800281a:	e018      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	73fb      	strb	r3, [r7, #15]
      break;
 8002820:	e015      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00e      	beq.n	800284c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      break;
 8002832:	e00b      	b.n	800284c <DMA_CheckFifoParam+0xe4>
      break;
 8002834:	bf00      	nop
 8002836:	e00a      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      break;
 8002838:	bf00      	nop
 800283a:	e008      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      break;
 800283c:	bf00      	nop
 800283e:	e006      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      break;
 8002840:	bf00      	nop
 8002842:	e004      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      break;
 8002844:	bf00      	nop
 8002846:	e002      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      break;   
 8002848:	bf00      	nop
 800284a:	e000      	b.n	800284e <DMA_CheckFifoParam+0xe6>
      break;
 800284c:	bf00      	nop
    }
  } 
  
  return status; 
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3714      	adds	r7, #20
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002866:	2300      	movs	r3, #0
 8002868:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800286e:	2300      	movs	r3, #0
 8002870:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002872:	2300      	movs	r3, #0
 8002874:	61fb      	str	r3, [r7, #28]
 8002876:	e177      	b.n	8002b68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002878:	2201      	movs	r2, #1
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	fa02 f303 	lsl.w	r3, r2, r3
 8002880:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	4013      	ands	r3, r2
 800288a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800288c:	693a      	ldr	r2, [r7, #16]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	429a      	cmp	r2, r3
 8002892:	f040 8166 	bne.w	8002b62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d00b      	beq.n	80028b6 <HAL_GPIO_Init+0x5a>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d007      	beq.n	80028b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028aa:	2b11      	cmp	r3, #17
 80028ac:	d003      	beq.n	80028b6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b12      	cmp	r3, #18
 80028b4:	d130      	bne.n	8002918 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	2203      	movs	r2, #3
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68da      	ldr	r2, [r3, #12]
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	005b      	lsls	r3, r3, #1
 80028d6:	fa02 f303 	lsl.w	r3, r2, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4313      	orrs	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	69ba      	ldr	r2, [r7, #24]
 80028e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028ec:	2201      	movs	r2, #1
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	fa02 f303 	lsl.w	r3, r2, r3
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	091b      	lsrs	r3, r3, #4
 8002902:	f003 0201 	and.w	r2, r3, #1
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4313      	orrs	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	2203      	movs	r2, #3
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	43db      	mvns	r3, r3
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	4013      	ands	r3, r2
 800292e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	689a      	ldr	r2, [r3, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	fa02 f303 	lsl.w	r3, r2, r3
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	4313      	orrs	r3, r2
 8002940:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	2b02      	cmp	r3, #2
 800294e:	d003      	beq.n	8002958 <HAL_GPIO_Init+0xfc>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	2b12      	cmp	r3, #18
 8002956:	d123      	bne.n	80029a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	08da      	lsrs	r2, r3, #3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	3208      	adds	r2, #8
 8002960:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002964:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002966:	69fb      	ldr	r3, [r7, #28]
 8002968:	f003 0307 	and.w	r3, r3, #7
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	220f      	movs	r2, #15
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	691a      	ldr	r2, [r3, #16]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	f003 0307 	and.w	r3, r3, #7
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	69ba      	ldr	r2, [r7, #24]
 800298e:	4313      	orrs	r3, r2
 8002990:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	08da      	lsrs	r2, r3, #3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	3208      	adds	r2, #8
 800299a:	69b9      	ldr	r1, [r7, #24]
 800299c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	2203      	movs	r2, #3
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 0203 	and.w	r2, r3, #3
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	fa02 f303 	lsl.w	r3, r2, r3
 80029c8:	69ba      	ldr	r2, [r7, #24]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69ba      	ldr	r2, [r7, #24]
 80029d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80c0 	beq.w	8002b62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e2:	2300      	movs	r3, #0
 80029e4:	60fb      	str	r3, [r7, #12]
 80029e6:	4b65      	ldr	r3, [pc, #404]	; (8002b7c <HAL_GPIO_Init+0x320>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a64      	ldr	r2, [pc, #400]	; (8002b7c <HAL_GPIO_Init+0x320>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b62      	ldr	r3, [pc, #392]	; (8002b7c <HAL_GPIO_Init+0x320>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029fe:	4a60      	ldr	r2, [pc, #384]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a57      	ldr	r2, [pc, #348]	; (8002b84 <HAL_GPIO_Init+0x328>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d037      	beq.n	8002a9a <HAL_GPIO_Init+0x23e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a56      	ldr	r2, [pc, #344]	; (8002b88 <HAL_GPIO_Init+0x32c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d031      	beq.n	8002a96 <HAL_GPIO_Init+0x23a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a55      	ldr	r2, [pc, #340]	; (8002b8c <HAL_GPIO_Init+0x330>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02b      	beq.n	8002a92 <HAL_GPIO_Init+0x236>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a54      	ldr	r2, [pc, #336]	; (8002b90 <HAL_GPIO_Init+0x334>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d025      	beq.n	8002a8e <HAL_GPIO_Init+0x232>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a53      	ldr	r2, [pc, #332]	; (8002b94 <HAL_GPIO_Init+0x338>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01f      	beq.n	8002a8a <HAL_GPIO_Init+0x22e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a52      	ldr	r2, [pc, #328]	; (8002b98 <HAL_GPIO_Init+0x33c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <HAL_GPIO_Init+0x22a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a51      	ldr	r2, [pc, #324]	; (8002b9c <HAL_GPIO_Init+0x340>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0x226>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a50      	ldr	r2, [pc, #320]	; (8002ba0 <HAL_GPIO_Init+0x344>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00d      	beq.n	8002a7e <HAL_GPIO_Init+0x222>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a4f      	ldr	r2, [pc, #316]	; (8002ba4 <HAL_GPIO_Init+0x348>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_Init+0x21e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_GPIO_Init+0x21a>
 8002a72:	2309      	movs	r3, #9
 8002a74:	e012      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a76:	230a      	movs	r3, #10
 8002a78:	e010      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	e00e      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e00c      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a82:	2306      	movs	r3, #6
 8002a84:	e00a      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a86:	2305      	movs	r3, #5
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f002 0203 	and.w	r2, r2, #3
 8002aa2:	0092      	lsls	r2, r2, #2
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aac:	4934      	ldr	r1, [pc, #208]	; (8002b80 <HAL_GPIO_Init+0x324>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aba:	4b3c      	ldr	r3, [pc, #240]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ade:	4a33      	ldr	r2, [pc, #204]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002ae4:	4b31      	ldr	r3, [pc, #196]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b08:	4a28      	ldr	r2, [pc, #160]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b0e:	4b27      	ldr	r3, [pc, #156]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b32:	4a1e      	ldr	r2, [pc, #120]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b38:	4b1c      	ldr	r3, [pc, #112]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b5c:	4a13      	ldr	r2, [pc, #76]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	f67f ae84 	bls.w	8002878 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	3724      	adds	r7, #36	; 0x24
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40023800 	.word	0x40023800
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40020000 	.word	0x40020000
 8002b88:	40020400 	.word	0x40020400
 8002b8c:	40020800 	.word	0x40020800
 8002b90:	40020c00 	.word	0x40020c00
 8002b94:	40021000 	.word	0x40021000
 8002b98:	40021400 	.word	0x40021400
 8002b9c:	40021800 	.word	0x40021800
 8002ba0:	40021c00 	.word	0x40021c00
 8002ba4:	40022000 	.word	0x40022000
 8002ba8:	40022400 	.word	0x40022400
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb2:	b08f      	sub	sp, #60	; 0x3c
 8002bb4:	af0a      	add	r7, sp, #40	; 0x28
 8002bb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d101      	bne.n	8002bc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e10f      	b.n	8002de2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d106      	bne.n	8002be2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002bdc:	6878      	ldr	r0, [r7, #4]
 8002bde:	f006 f993 	bl	8008f08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2203      	movs	r2, #3
 8002be6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d102      	bne.n	8002bfc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4618      	mov	r0, r3
 8002c02:	f003 f9b6 	bl	8005f72 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	603b      	str	r3, [r7, #0]
 8002c0c:	687e      	ldr	r6, [r7, #4]
 8002c0e:	466d      	mov	r5, sp
 8002c10:	f106 0410 	add.w	r4, r6, #16
 8002c14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c18:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c1a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c1c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c20:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c24:	1d33      	adds	r3, r6, #4
 8002c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c28:	6838      	ldr	r0, [r7, #0]
 8002c2a:	f003 f88d 	bl	8005d48 <USB_CoreInit>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e0d0      	b.n	8002de2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2100      	movs	r1, #0
 8002c46:	4618      	mov	r0, r3
 8002c48:	f003 f9a4 	bl	8005f94 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	73fb      	strb	r3, [r7, #15]
 8002c50:	e04a      	b.n	8002ce8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002c52:	7bfa      	ldrb	r2, [r7, #15]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	333d      	adds	r3, #61	; 0x3d
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002c66:	7bfa      	ldrb	r2, [r7, #15]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	00db      	lsls	r3, r3, #3
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	333c      	adds	r3, #60	; 0x3c
 8002c76:	7bfa      	ldrb	r2, [r7, #15]
 8002c78:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002c7a:	7bfa      	ldrb	r2, [r7, #15]
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
 8002c7e:	b298      	uxth	r0, r3
 8002c80:	6879      	ldr	r1, [r7, #4]
 8002c82:	4613      	mov	r3, r2
 8002c84:	00db      	lsls	r3, r3, #3
 8002c86:	1a9b      	subs	r3, r3, r2
 8002c88:	009b      	lsls	r3, r3, #2
 8002c8a:	440b      	add	r3, r1
 8002c8c:	3342      	adds	r3, #66	; 0x42
 8002c8e:	4602      	mov	r2, r0
 8002c90:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	6879      	ldr	r1, [r7, #4]
 8002c96:	4613      	mov	r3, r2
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	1a9b      	subs	r3, r3, r2
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	440b      	add	r3, r1
 8002ca0:	333f      	adds	r3, #63	; 0x3f
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ca6:	7bfa      	ldrb	r2, [r7, #15]
 8002ca8:	6879      	ldr	r1, [r7, #4]
 8002caa:	4613      	mov	r3, r2
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	1a9b      	subs	r3, r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	3344      	adds	r3, #68	; 0x44
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002cba:	7bfa      	ldrb	r2, [r7, #15]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	00db      	lsls	r3, r3, #3
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3348      	adds	r3, #72	; 0x48
 8002cca:	2200      	movs	r2, #0
 8002ccc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002cce:	7bfa      	ldrb	r2, [r7, #15]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3350      	adds	r3, #80	; 0x50
 8002cde:	2200      	movs	r2, #0
 8002ce0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	73fb      	strb	r3, [r7, #15]
 8002ce8:	7bfa      	ldrb	r2, [r7, #15]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3af      	bcc.n	8002c52 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e044      	b.n	8002d82 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d0e:	7bfa      	ldrb	r2, [r7, #15]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	00db      	lsls	r3, r3, #3
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002d24:	7bfa      	ldrb	r2, [r7, #15]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002d36:	2200      	movs	r2, #0
 8002d38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002d50:	7bfa      	ldrb	r2, [r7, #15]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	00db      	lsls	r3, r3, #3
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002d66:	7bfa      	ldrb	r2, [r7, #15]
 8002d68:	6879      	ldr	r1, [r7, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	00db      	lsls	r3, r3, #3
 8002d6e:	1a9b      	subs	r3, r3, r2
 8002d70:	009b      	lsls	r3, r3, #2
 8002d72:	440b      	add	r3, r1
 8002d74:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d7c:	7bfb      	ldrb	r3, [r7, #15]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
 8002d82:	7bfa      	ldrb	r2, [r7, #15]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d3b5      	bcc.n	8002cf8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	687e      	ldr	r6, [r7, #4]
 8002d94:	466d      	mov	r5, sp
 8002d96:	f106 0410 	add.w	r4, r6, #16
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002daa:	1d33      	adds	r3, r6, #4
 8002dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dae:	6838      	ldr	r0, [r7, #0]
 8002db0:	f003 f91a 	bl	8005fe8 <USB_DevInit>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d005      	beq.n	8002dc6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2202      	movs	r2, #2
 8002dbe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e00d      	b.n	8002de2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f004 f962 	bl	80070a4 <USB_DevDisconnect>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3714      	adds	r7, #20
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b084      	sub	sp, #16
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d101      	bne.n	8002e06 <HAL_PCD_Start+0x1c>
 8002e02:	2302      	movs	r3, #2
 8002e04:	e020      	b.n	8002e48 <HAL_PCD_Start+0x5e>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d109      	bne.n	8002e2a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d005      	beq.n	8002e2a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f003 f88e 	bl	8005f50 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f004 f912 	bl	8007062 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b08d      	sub	sp, #52	; 0x34
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e5e:	6a3b      	ldr	r3, [r7, #32]
 8002e60:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f004 f9d0 	bl	800720c <USB_GetMode>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f040 839d 	bne.w	80035ae <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f004 f934 	bl	80070e6 <USB_ReadInterrupts>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 8393 	beq.w	80035ac <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f004 f92b 	bl	80070e6 <USB_ReadInterrupts>
 8002e90:	4603      	mov	r3, r0
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d107      	bne.n	8002eaa <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f002 0202 	and.w	r2, r2, #2
 8002ea8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f004 f919 	bl	80070e6 <USB_ReadInterrupts>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f003 0310 	and.w	r3, r3, #16
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d161      	bne.n	8002f82 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	699a      	ldr	r2, [r3, #24]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f022 0210 	bic.w	r2, r2, #16
 8002ecc:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	f003 020f 	and.w	r2, r3, #15
 8002eda:	4613      	mov	r3, r2
 8002edc:	00db      	lsls	r3, r3, #3
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	4413      	add	r3, r2
 8002eea:	3304      	adds	r3, #4
 8002eec:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002eee:	69bb      	ldr	r3, [r7, #24]
 8002ef0:	0c5b      	lsrs	r3, r3, #17
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d124      	bne.n	8002f44 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d035      	beq.n	8002f72 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	091b      	lsrs	r3, r3, #4
 8002f0e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f14:	b29b      	uxth	r3, r3
 8002f16:	461a      	mov	r2, r3
 8002f18:	6a38      	ldr	r0, [r7, #32]
 8002f1a:	f003 ff7f 	bl	8006e1c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	68da      	ldr	r2, [r3, #12]
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	091b      	lsrs	r3, r3, #4
 8002f26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f2a:	441a      	add	r2, r3
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	699a      	ldr	r2, [r3, #24]
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	091b      	lsrs	r3, r3, #4
 8002f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f3c:	441a      	add	r2, r3
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	619a      	str	r2, [r3, #24]
 8002f42:	e016      	b.n	8002f72 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f44:	69bb      	ldr	r3, [r7, #24]
 8002f46:	0c5b      	lsrs	r3, r3, #17
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	2b06      	cmp	r3, #6
 8002f4e:	d110      	bne.n	8002f72 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002f56:	2208      	movs	r2, #8
 8002f58:	4619      	mov	r1, r3
 8002f5a:	6a38      	ldr	r0, [r7, #32]
 8002f5c:	f003 ff5e 	bl	8006e1c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	699a      	ldr	r2, [r3, #24]
 8002f64:	69bb      	ldr	r3, [r7, #24]
 8002f66:	091b      	lsrs	r3, r3, #4
 8002f68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f6c:	441a      	add	r2, r3
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	699a      	ldr	r2, [r3, #24]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f042 0210 	orr.w	r2, r2, #16
 8002f80:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f004 f8ad 	bl	80070e6 <USB_ReadInterrupts>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f92:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002f96:	d16e      	bne.n	8003076 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f004 f8b3 	bl	800710c <USB_ReadDevAllOutEpInterrupt>
 8002fa6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002fa8:	e062      	b.n	8003070 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d057      	beq.n	8003064 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fba:	b2d2      	uxtb	r2, r2
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f004 f8d8 	bl	8007174 <USB_ReadDevOutEPInterrupt>
 8002fc4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f003 0301 	and.w	r3, r3, #1
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00c      	beq.n	8002fea <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2301      	movs	r3, #1
 8002fe0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002fe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 fdb1 	bl	8003b4c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00c      	beq.n	800300e <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003000:	461a      	mov	r2, r3
 8003002:	2308      	movs	r3, #8
 8003004:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003006:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 feab 	bl	8003d64 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	f003 0310 	and.w	r3, r3, #16
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	4413      	add	r3, r2
 8003020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003024:	461a      	mov	r2, r3
 8003026:	2310      	movs	r3, #16
 8003028:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	4413      	add	r3, r2
 800303c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003040:	461a      	mov	r2, r3
 8003042:	2320      	movs	r3, #32
 8003044:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d009      	beq.n	8003064 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305c:	461a      	mov	r2, r3
 800305e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003062:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	3301      	adds	r3, #1
 8003068:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800306a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306c:	085b      	lsrs	r3, r3, #1
 800306e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003072:	2b00      	cmp	r3, #0
 8003074:	d199      	bne.n	8002faa <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4618      	mov	r0, r3
 800307c:	f004 f833 	bl	80070e6 <USB_ReadInterrupts>
 8003080:	4603      	mov	r3, r0
 8003082:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003086:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800308a:	f040 80c0 	bne.w	800320e <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f004 f854 	bl	8007140 <USB_ReadDevAllInEpInterrupt>
 8003098:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800309e:	e0b2      	b.n	8003206 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80030a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 80a7 	beq.w	80031fa <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b2:	b2d2      	uxtb	r2, r2
 80030b4:	4611      	mov	r1, r2
 80030b6:	4618      	mov	r0, r3
 80030b8:	f004 f87a 	bl	80071b0 <USB_ReadDevInEPInterrupt>
 80030bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d057      	beq.n	8003178 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80030c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ca:	f003 030f 	and.w	r3, r3, #15
 80030ce:	2201      	movs	r2, #1
 80030d0:	fa02 f303 	lsl.w	r3, r2, r3
 80030d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	43db      	mvns	r3, r3
 80030e2:	69f9      	ldr	r1, [r7, #28]
 80030e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80030e8:	4013      	ands	r3, r2
 80030ea:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80030ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ee:	015a      	lsls	r2, r3, #5
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	4413      	add	r3, r2
 80030f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f8:	461a      	mov	r2, r3
 80030fa:	2301      	movs	r3, #1
 80030fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d132      	bne.n	800316c <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310a:	4613      	mov	r3, r2
 800310c:	00db      	lsls	r3, r3, #3
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	3348      	adds	r3, #72	; 0x48
 8003116:	6819      	ldr	r1, [r3, #0]
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311c:	4613      	mov	r3, r2
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	1a9b      	subs	r3, r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4403      	add	r3, r0
 8003126:	3344      	adds	r3, #68	; 0x44
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4419      	add	r1, r3
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	3348      	adds	r3, #72	; 0x48
 800313c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	2b00      	cmp	r3, #0
 8003142:	d113      	bne.n	800316c <HAL_PCD_IRQHandler+0x31c>
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3350      	adds	r3, #80	; 0x50
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d108      	bne.n	800316c <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003164:	461a      	mov	r2, r3
 8003166:	2101      	movs	r1, #1
 8003168:	f004 f882 	bl	8007270 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800316c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800316e:	b2db      	uxtb	r3, r3
 8003170:	4619      	mov	r1, r3
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f005 ff49 	bl	800900a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f003 0308 	and.w	r3, r3, #8
 800317e:	2b00      	cmp	r3, #0
 8003180:	d008      	beq.n	8003194 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	4413      	add	r3, r2
 800318a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800318e:	461a      	mov	r2, r3
 8003190:	2308      	movs	r3, #8
 8003192:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d008      	beq.n	80031b0 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800319e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031aa:	461a      	mov	r2, r3
 80031ac:	2310      	movs	r3, #16
 80031ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80031ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031bc:	015a      	lsls	r2, r3, #5
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	4413      	add	r3, r2
 80031c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031c6:	461a      	mov	r2, r3
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	f003 0302 	and.w	r3, r3, #2
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d008      	beq.n	80031e8 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	015a      	lsls	r2, r3, #5
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	4413      	add	r3, r2
 80031de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e2:	461a      	mov	r2, r3
 80031e4:	2302      	movs	r3, #2
 80031e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80031f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 fc1b 	bl	8003a30 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	3301      	adds	r3, #1
 80031fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003202:	085b      	lsrs	r3, r3, #1
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003208:	2b00      	cmp	r3, #0
 800320a:	f47f af49 	bne.w	80030a0 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f003 ff67 	bl	80070e6 <USB_ReadInterrupts>
 8003218:	4603      	mov	r3, r0
 800321a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800321e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003222:	d122      	bne.n	800326a <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	69fa      	ldr	r2, [r7, #28]
 800322e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003232:	f023 0301 	bic.w	r3, r3, #1
 8003236:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800323e:	2b01      	cmp	r3, #1
 8003240:	d108      	bne.n	8003254 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800324a:	2100      	movs	r1, #0
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 fe27 	bl	8003ea0 <HAL_PCDEx_LPM_Callback>
 8003252:	e002      	b.n	800325a <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f005 ff4f 	bl	80090f8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695a      	ldr	r2, [r3, #20]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003268:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	4618      	mov	r0, r3
 8003270:	f003 ff39 	bl	80070e6 <USB_ReadInterrupts>
 8003274:	4603      	mov	r3, r0
 8003276:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800327a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800327e:	d112      	bne.n	80032a6 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0301 	and.w	r3, r3, #1
 800328c:	2b01      	cmp	r3, #1
 800328e:	d102      	bne.n	8003296 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f005 ff0b 	bl	80090ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	695a      	ldr	r2, [r3, #20]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80032a4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 ff1b 	bl	80070e6 <USB_ReadInterrupts>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ba:	f040 80c7 	bne.w	800344c <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	69fa      	ldr	r2, [r7, #28]
 80032c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032cc:	f023 0301 	bic.w	r3, r3, #1
 80032d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2110      	movs	r1, #16
 80032d8:	4618      	mov	r0, r3
 80032da:	f002 ffe9 	bl	80062b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032de:	2300      	movs	r3, #0
 80032e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032e2:	e056      	b.n	8003392 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80032e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032e6:	015a      	lsls	r2, r3, #5
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	4413      	add	r3, r2
 80032ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f0:	461a      	mov	r2, r3
 80032f2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80032f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032fa:	015a      	lsls	r2, r3, #5
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	4413      	add	r3, r2
 8003300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003308:	0151      	lsls	r1, r2, #5
 800330a:	69fa      	ldr	r2, [r7, #28]
 800330c:	440a      	add	r2, r1
 800330e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003312:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003316:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003328:	0151      	lsls	r1, r2, #5
 800332a:	69fa      	ldr	r2, [r7, #28]
 800332c:	440a      	add	r2, r1
 800332e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003336:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800333a:	015a      	lsls	r2, r3, #5
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	4413      	add	r3, r2
 8003340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003344:	461a      	mov	r2, r3
 8003346:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800334a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800334c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800335c:	0151      	lsls	r1, r2, #5
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	440a      	add	r2, r1
 8003362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003366:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800336a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336e:	015a      	lsls	r2, r3, #5
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	4413      	add	r3, r2
 8003374:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800337c:	0151      	lsls	r1, r2, #5
 800337e:	69fa      	ldr	r2, [r7, #28]
 8003380:	440a      	add	r2, r1
 8003382:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003386:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800338a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800338c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338e:	3301      	adds	r3, #1
 8003390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003398:	429a      	cmp	r2, r3
 800339a:	d3a3      	bcc.n	80032e4 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033aa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80033ae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d016      	beq.n	80033e6 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033c2:	69fa      	ldr	r2, [r7, #28]
 80033c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033c8:	f043 030b 	orr.w	r3, r3, #11
 80033cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033de:	f043 030b 	orr.w	r3, r3, #11
 80033e2:	6453      	str	r3, [r2, #68]	; 0x44
 80033e4:	e015      	b.n	8003412 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ec:	695b      	ldr	r3, [r3, #20]
 80033ee:	69fa      	ldr	r2, [r7, #28]
 80033f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80033f8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80033fc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	69fa      	ldr	r2, [r7, #28]
 8003408:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800340c:	f043 030b 	orr.w	r3, r3, #11
 8003410:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003420:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003424:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003436:	461a      	mov	r2, r3
 8003438:	f003 ff1a 	bl	8007270 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	695a      	ldr	r2, [r3, #20]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800344a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4618      	mov	r0, r3
 8003452:	f003 fe48 	bl	80070e6 <USB_ReadInterrupts>
 8003456:	4603      	mov	r3, r0
 8003458:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d124      	bne.n	80034ac <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f003 fede 	bl	8007228 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4618      	mov	r0, r3
 8003472:	f002 ff7e 	bl	8006372 <USB_GetDevSpeed>
 8003476:	4603      	mov	r3, r0
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681c      	ldr	r4, [r3, #0]
 8003482:	f001 f947 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 8003486:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	4620      	mov	r0, r4
 8003492:	f002 fcbb 	bl	8005e0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f005 fddf 	bl	800905a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80034aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4618      	mov	r0, r3
 80034b2:	f003 fe18 	bl	80070e6 <USB_ReadInterrupts>
 80034b6:	4603      	mov	r3, r0
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d10a      	bne.n	80034d6 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f005 fdbc 	bl	800903e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	695a      	ldr	r2, [r3, #20]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f002 0208 	and.w	r2, r2, #8
 80034d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4618      	mov	r0, r3
 80034dc:	f003 fe03 	bl	80070e6 <USB_ReadInterrupts>
 80034e0:	4603      	mov	r3, r0
 80034e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ea:	d10f      	bne.n	800350c <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f005 fe1e 	bl	8009138 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	695a      	ldr	r2, [r3, #20]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800350a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f003 fde8 	bl	80070e6 <USB_ReadInterrupts>
 8003516:	4603      	mov	r3, r0
 8003518:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800351c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003520:	d10f      	bne.n	8003542 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003528:	b2db      	uxtb	r3, r3
 800352a:	4619      	mov	r1, r3
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f005 fdf1 	bl	8009114 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4618      	mov	r0, r3
 8003548:	f003 fdcd 	bl	80070e6 <USB_ReadInterrupts>
 800354c:	4603      	mov	r3, r0
 800354e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003552:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003556:	d10a      	bne.n	800356e <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f005 fdff 	bl	800915c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	695a      	ldr	r2, [r3, #20]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800356c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f003 fdb7 	bl	80070e6 <USB_ReadInterrupts>
 8003578:	4603      	mov	r3, r0
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d115      	bne.n	80035ae <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f005 fdef 	bl	8009178 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	6859      	ldr	r1, [r3, #4]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e000      	b.n	80035ae <HAL_PCD_IRQHandler+0x75e>
      return;
 80035ac:	bf00      	nop
    }
  }
}
 80035ae:	3734      	adds	r7, #52	; 0x34
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}

080035b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	460b      	mov	r3, r1
 80035be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d101      	bne.n	80035ce <HAL_PCD_SetAddress+0x1a>
 80035ca:	2302      	movs	r3, #2
 80035cc:	e013      	b.n	80035f6 <HAL_PCD_SetAddress+0x42>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	78fa      	ldrb	r2, [r7, #3]
 80035e4:	4611      	mov	r1, r2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f003 fd15 	bl	8007016 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80035f4:	2300      	movs	r3, #0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
 8003606:	4608      	mov	r0, r1
 8003608:	4611      	mov	r1, r2
 800360a:	461a      	mov	r2, r3
 800360c:	4603      	mov	r3, r0
 800360e:	70fb      	strb	r3, [r7, #3]
 8003610:	460b      	mov	r3, r1
 8003612:	803b      	strh	r3, [r7, #0]
 8003614:	4613      	mov	r3, r2
 8003616:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800361c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003620:	2b00      	cmp	r3, #0
 8003622:	da0f      	bge.n	8003644 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	f003 020f 	and.w	r2, r3, #15
 800362a:	4613      	mov	r3, r2
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	3338      	adds	r3, #56	; 0x38
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	4413      	add	r3, r2
 8003638:	3304      	adds	r3, #4
 800363a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2201      	movs	r2, #1
 8003640:	705a      	strb	r2, [r3, #1]
 8003642:	e00f      	b.n	8003664 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	f003 020f 	and.w	r2, r3, #15
 800364a:	4613      	mov	r3, r2
 800364c:	00db      	lsls	r3, r3, #3
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003656:	687a      	ldr	r2, [r7, #4]
 8003658:	4413      	add	r3, r2
 800365a:	3304      	adds	r3, #4
 800365c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	f003 030f 	and.w	r3, r3, #15
 800366a:	b2da      	uxtb	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003670:	883a      	ldrh	r2, [r7, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	78ba      	ldrb	r2, [r7, #2]
 800367a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	785b      	ldrb	r3, [r3, #1]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	b29a      	uxth	r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800368e:	78bb      	ldrb	r3, [r7, #2]
 8003690:	2b02      	cmp	r3, #2
 8003692:	d102      	bne.n	800369a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d101      	bne.n	80036a8 <HAL_PCD_EP_Open+0xaa>
 80036a4:	2302      	movs	r3, #2
 80036a6:	e00e      	b.n	80036c6 <HAL_PCD_EP_Open+0xc8>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	68f9      	ldr	r1, [r7, #12]
 80036b6:	4618      	mov	r0, r3
 80036b8:	f002 fe80 	bl	80063bc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80036c4:	7afb      	ldrb	r3, [r7, #11]
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}

080036ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b084      	sub	sp, #16
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
 80036d6:	460b      	mov	r3, r1
 80036d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80036da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	da0f      	bge.n	8003702 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036e2:	78fb      	ldrb	r3, [r7, #3]
 80036e4:	f003 020f 	and.w	r2, r3, #15
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	1a9b      	subs	r3, r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	3338      	adds	r3, #56	; 0x38
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	4413      	add	r3, r2
 80036f6:	3304      	adds	r3, #4
 80036f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	705a      	strb	r2, [r3, #1]
 8003700:	e00f      	b.n	8003722 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	f003 020f 	and.w	r2, r3, #15
 8003708:	4613      	mov	r3, r2
 800370a:	00db      	lsls	r3, r3, #3
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003714:	687a      	ldr	r2, [r7, #4]
 8003716:	4413      	add	r3, r2
 8003718:	3304      	adds	r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003722:	78fb      	ldrb	r3, [r7, #3]
 8003724:	f003 030f 	and.w	r3, r3, #15
 8003728:	b2da      	uxtb	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003734:	2b01      	cmp	r3, #1
 8003736:	d101      	bne.n	800373c <HAL_PCD_EP_Close+0x6e>
 8003738:	2302      	movs	r3, #2
 800373a:	e00e      	b.n	800375a <HAL_PCD_EP_Close+0x8c>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2201      	movs	r2, #1
 8003740:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	68f9      	ldr	r1, [r7, #12]
 800374a:	4618      	mov	r0, r3
 800374c:	f002 febe 	bl	80064cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}

08003762 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003762:	b580      	push	{r7, lr}
 8003764:	b086      	sub	sp, #24
 8003766:	af00      	add	r7, sp, #0
 8003768:	60f8      	str	r0, [r7, #12]
 800376a:	607a      	str	r2, [r7, #4]
 800376c:	603b      	str	r3, [r7, #0]
 800376e:	460b      	mov	r3, r1
 8003770:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003772:	7afb      	ldrb	r3, [r7, #11]
 8003774:	f003 020f 	and.w	r2, r3, #15
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	1a9b      	subs	r3, r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003784:	68fa      	ldr	r2, [r7, #12]
 8003786:	4413      	add	r3, r2
 8003788:	3304      	adds	r3, #4
 800378a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	2200      	movs	r2, #0
 800379c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2200      	movs	r2, #0
 80037a2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037a4:	7afb      	ldrb	r3, [r7, #11]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d102      	bne.n	80037be <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80037be:	7afb      	ldrb	r3, [r7, #11]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d109      	bne.n	80037dc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6818      	ldr	r0, [r3, #0]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	691b      	ldr	r3, [r3, #16]
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	461a      	mov	r2, r3
 80037d4:	6979      	ldr	r1, [r7, #20]
 80037d6:	f003 f999 	bl	8006b0c <USB_EP0StartXfer>
 80037da:	e008      	b.n	80037ee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6818      	ldr	r0, [r3, #0]
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	461a      	mov	r2, r3
 80037e8:	6979      	ldr	r1, [r7, #20]
 80037ea:	f002 ff4b 	bl	8006684 <USB_EPStartXfer>
  }

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	460b      	mov	r3, r1
 8003802:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	f003 020f 	and.w	r2, r3, #15
 800380a:	6879      	ldr	r1, [r7, #4]
 800380c:	4613      	mov	r3, r2
 800380e:	00db      	lsls	r3, r3, #3
 8003810:	1a9b      	subs	r3, r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	440b      	add	r3, r1
 8003816:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800381a:	681b      	ldr	r3, [r3, #0]
}
 800381c:	4618      	mov	r0, r3
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	607a      	str	r2, [r7, #4]
 8003832:	603b      	str	r3, [r7, #0]
 8003834:	460b      	mov	r3, r1
 8003836:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003838:	7afb      	ldrb	r3, [r7, #11]
 800383a:	f003 020f 	and.w	r2, r3, #15
 800383e:	4613      	mov	r3, r2
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	3338      	adds	r3, #56	; 0x38
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	4413      	add	r3, r2
 800384c:	3304      	adds	r3, #4
 800384e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	2200      	movs	r2, #0
 8003860:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003862:	697b      	ldr	r3, [r7, #20]
 8003864:	2201      	movs	r2, #1
 8003866:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003868:	7afb      	ldrb	r3, [r7, #11]
 800386a:	f003 030f 	and.w	r3, r3, #15
 800386e:	b2da      	uxtb	r2, r3
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	691b      	ldr	r3, [r3, #16]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d102      	bne.n	8003882 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003882:	7afb      	ldrb	r3, [r7, #11]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	2b00      	cmp	r3, #0
 800388a:	d109      	bne.n	80038a0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6818      	ldr	r0, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	461a      	mov	r2, r3
 8003898:	6979      	ldr	r1, [r7, #20]
 800389a:	f003 f937 	bl	8006b0c <USB_EP0StartXfer>
 800389e:	e008      	b.n	80038b2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6818      	ldr	r0, [r3, #0]
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	691b      	ldr	r3, [r3, #16]
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	461a      	mov	r2, r3
 80038ac:	6979      	ldr	r1, [r7, #20]
 80038ae:	f002 fee9 	bl	8006684 <USB_EPStartXfer>
  }

  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3718      	adds	r7, #24
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80038c8:	78fb      	ldrb	r3, [r7, #3]
 80038ca:	f003 020f 	and.w	r2, r3, #15
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d901      	bls.n	80038da <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e050      	b.n	800397c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80038da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	da0f      	bge.n	8003902 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038e2:	78fb      	ldrb	r3, [r7, #3]
 80038e4:	f003 020f 	and.w	r2, r3, #15
 80038e8:	4613      	mov	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	3338      	adds	r3, #56	; 0x38
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	3304      	adds	r3, #4
 80038f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	705a      	strb	r2, [r3, #1]
 8003900:	e00d      	b.n	800391e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4413      	add	r3, r2
 8003914:	3304      	adds	r3, #4
 8003916:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2200      	movs	r2, #0
 800391c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2201      	movs	r2, #1
 8003922:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	f003 030f 	and.w	r3, r3, #15
 800392a:	b2da      	uxtb	r2, r3
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <HAL_PCD_EP_SetStall+0x82>
 800393a:	2302      	movs	r3, #2
 800393c:	e01e      	b.n	800397c <HAL_PCD_EP_SetStall+0xc0>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68f9      	ldr	r1, [r7, #12]
 800394c:	4618      	mov	r0, r3
 800394e:	f003 fa8e 	bl	8006e6e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003952:	78fb      	ldrb	r3, [r7, #3]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6818      	ldr	r0, [r3, #0]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	691b      	ldr	r3, [r3, #16]
 8003964:	b2d9      	uxtb	r1, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800396c:	461a      	mov	r2, r3
 800396e:	f003 fc7f 	bl	8007270 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	460b      	mov	r3, r1
 800398e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003990:	78fb      	ldrb	r3, [r7, #3]
 8003992:	f003 020f 	and.w	r2, r3, #15
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	429a      	cmp	r2, r3
 800399c:	d901      	bls.n	80039a2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e042      	b.n	8003a28 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80039a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	da0f      	bge.n	80039ca <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80039aa:	78fb      	ldrb	r3, [r7, #3]
 80039ac:	f003 020f 	and.w	r2, r3, #15
 80039b0:	4613      	mov	r3, r2
 80039b2:	00db      	lsls	r3, r3, #3
 80039b4:	1a9b      	subs	r3, r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	3338      	adds	r3, #56	; 0x38
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	4413      	add	r3, r2
 80039be:	3304      	adds	r3, #4
 80039c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	2201      	movs	r2, #1
 80039c6:	705a      	strb	r2, [r3, #1]
 80039c8:	e00f      	b.n	80039ea <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80039ca:	78fb      	ldrb	r3, [r7, #3]
 80039cc:	f003 020f 	and.w	r2, r3, #15
 80039d0:	4613      	mov	r3, r2
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	1a9b      	subs	r3, r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	3304      	adds	r3, #4
 80039e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d101      	bne.n	8003a0a <HAL_PCD_EP_ClrStall+0x86>
 8003a06:	2302      	movs	r3, #2
 8003a08:	e00e      	b.n	8003a28 <HAL_PCD_EP_ClrStall+0xa4>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68f9      	ldr	r1, [r7, #12]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f003 fa96 	bl	8006f4a <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b08a      	sub	sp, #40	; 0x28
 8003a34:	af02      	add	r7, sp, #8
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	4613      	mov	r3, r2
 8003a48:	00db      	lsls	r3, r3, #3
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	3338      	adds	r3, #56	; 0x38
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	699a      	ldr	r2, [r3, #24]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d901      	bls.n	8003a68 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e06c      	b.n	8003b42 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	695a      	ldr	r2, [r3, #20]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	699b      	ldr	r3, [r3, #24]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	69fa      	ldr	r2, [r7, #28]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d902      	bls.n	8003a84 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003a84:	69fb      	ldr	r3, [r7, #28]
 8003a86:	3303      	adds	r3, #3
 8003a88:	089b      	lsrs	r3, r3, #2
 8003a8a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003a8c:	e02b      	b.n	8003ae6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d902      	bls.n	8003aaa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	3303      	adds	r3, #3
 8003aae:	089b      	lsrs	r3, r3, #2
 8003ab0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	68d9      	ldr	r1, [r3, #12]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	b2da      	uxtb	r2, r3
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	9300      	str	r3, [sp, #0]
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	6978      	ldr	r0, [r7, #20]
 8003aca:	f003 f972 	bl	8006db2 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	441a      	add	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	699a      	ldr	r2, [r3, #24]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	441a      	add	r2, r3
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d809      	bhi.n	8003b10 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d203      	bcs.n	8003b10 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d1be      	bne.n	8003a8e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	695a      	ldr	r2, [r3, #20]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	699b      	ldr	r3, [r3, #24]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d811      	bhi.n	8003b40 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	f003 030f 	and.w	r3, r3, #15
 8003b22:	2201      	movs	r2, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b30:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	43db      	mvns	r3, r3
 8003b36:	6939      	ldr	r1, [r7, #16]
 8003b38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003b40:	2300      	movs	r3, #0
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
	...

08003b4c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
 8003b54:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	333c      	adds	r3, #60	; 0x3c
 8003b64:	3304      	adds	r3, #4
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	015a      	lsls	r2, r3, #5
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	4413      	add	r3, r2
 8003b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	f040 80a0 	bne.w	8003cc4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d015      	beq.n	8003bba <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a72      	ldr	r2, [pc, #456]	; (8003d5c <PCD_EP_OutXfrComplete_int+0x210>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	f240 80dd 	bls.w	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	f000 80d7 	beq.w	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	015a      	lsls	r2, r3, #5
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	4413      	add	r3, r2
 8003bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb6:	6093      	str	r3, [r2, #8]
 8003bb8:	e0cb      	b.n	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	f003 0320 	and.w	r3, r3, #32
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d009      	beq.n	8003bd8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2320      	movs	r3, #32
 8003bd4:	6093      	str	r3, [r2, #8]
 8003bd6:	e0bc      	b.n	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f040 80b7 	bne.w	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a5d      	ldr	r2, [pc, #372]	; (8003d5c <PCD_EP_OutXfrComplete_int+0x210>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d90f      	bls.n	8003c0c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	015a      	lsls	r2, r3, #5
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	4413      	add	r3, r2
 8003bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c02:	461a      	mov	r2, r3
 8003c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c08:	6093      	str	r3, [r2, #8]
 8003c0a:	e0a2      	b.n	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003c0c:	6879      	ldr	r1, [r7, #4]
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	4613      	mov	r3, r2
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c1e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	0159      	lsls	r1, r3, #5
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	440b      	add	r3, r1
 8003c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8003c32:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	4403      	add	r3, r0
 8003c42:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003c46:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c5a:	6819      	ldr	r1, [r3, #0]
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	00db      	lsls	r3, r3, #3
 8003c64:	1a9b      	subs	r3, r3, r2
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	4403      	add	r3, r0
 8003c6a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4419      	add	r1, r3
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	4613      	mov	r3, r2
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	4403      	add	r3, r0
 8003c80:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003c84:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d114      	bne.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x16a>
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	4613      	mov	r3, r2
 8003c92:	00db      	lsls	r3, r3, #3
 8003c94:	1a9b      	subs	r3, r3, r2
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	440b      	add	r3, r1
 8003c9a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d108      	bne.n	8003cb6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6818      	ldr	r0, [r3, #0]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2101      	movs	r1, #1
 8003cb2:	f003 fadd 	bl	8007270 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f005 f989 	bl	8008fd4 <HAL_PCD_DataOutStageCallback>
 8003cc2:	e046      	b.n	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	4a26      	ldr	r2, [pc, #152]	; (8003d60 <PCD_EP_OutXfrComplete_int+0x214>)
 8003cc8:	4293      	cmp	r3, r2
 8003cca:	d124      	bne.n	8003d16 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00a      	beq.n	8003cec <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce8:	6093      	str	r3, [r2, #8]
 8003cea:	e032      	b.n	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003cec:	68bb      	ldr	r3, [r7, #8]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	015a      	lsls	r2, r3, #5
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d02:	461a      	mov	r2, r3
 8003d04:	2320      	movs	r3, #32
 8003d06:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f005 f960 	bl	8008fd4 <HAL_PCD_DataOutStageCallback>
 8003d14:	e01d      	b.n	8003d52 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d114      	bne.n	8003d46 <PCD_EP_OutXfrComplete_int+0x1fa>
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	4613      	mov	r3, r2
 8003d22:	00db      	lsls	r3, r3, #3
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	440b      	add	r3, r1
 8003d2a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d108      	bne.n	8003d46 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6818      	ldr	r0, [r3, #0]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d3e:	461a      	mov	r2, r3
 8003d40:	2100      	movs	r1, #0
 8003d42:	f003 fa95 	bl	8007270 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f005 f941 	bl	8008fd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003d52:	2300      	movs	r3, #0
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3718      	adds	r7, #24
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	4f54300a 	.word	0x4f54300a
 8003d60:	4f54310a 	.word	0x4f54310a

08003d64 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	333c      	adds	r3, #60	; 0x3c
 8003d7c:	3304      	adds	r3, #4
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	015a      	lsls	r2, r3, #5
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	4413      	add	r3, r2
 8003d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4a15      	ldr	r2, [pc, #84]	; (8003dec <PCD_EP_OutSetupPacket_int+0x88>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d90e      	bls.n	8003db8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d009      	beq.n	8003db8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db0:	461a      	mov	r2, r3
 8003db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003db6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003db8:	6878      	ldr	r0, [r7, #4]
 8003dba:	f005 f8f9 	bl	8008fb0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4a0a      	ldr	r2, [pc, #40]	; (8003dec <PCD_EP_OutSetupPacket_int+0x88>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d90c      	bls.n	8003de0 <PCD_EP_OutSetupPacket_int+0x7c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d108      	bne.n	8003de0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2101      	movs	r1, #1
 8003ddc:	f003 fa48 	bl	8007270 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	4f54300a 	.word	0x4f54300a

08003df0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	460b      	mov	r3, r1
 8003dfa:	70fb      	strb	r3, [r7, #3]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d107      	bne.n	8003e1e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003e0e:	883b      	ldrh	r3, [r7, #0]
 8003e10:	0419      	lsls	r1, r3, #16
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	629a      	str	r2, [r3, #40]	; 0x28
 8003e1c:	e028      	b.n	8003e70 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e24:	0c1b      	lsrs	r3, r3, #16
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	4413      	add	r3, r2
 8003e2a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73fb      	strb	r3, [r7, #15]
 8003e30:	e00d      	b.n	8003e4e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	7bfb      	ldrb	r3, [r7, #15]
 8003e38:	3340      	adds	r3, #64	; 0x40
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	0c1b      	lsrs	r3, r3, #16
 8003e42:	68ba      	ldr	r2, [r7, #8]
 8003e44:	4413      	add	r3, r2
 8003e46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	73fb      	strb	r3, [r7, #15]
 8003e4e:	7bfa      	ldrb	r2, [r7, #15]
 8003e50:	78fb      	ldrb	r3, [r7, #3]
 8003e52:	3b01      	subs	r3, #1
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3ec      	bcc.n	8003e32 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003e58:	883b      	ldrh	r3, [r7, #0]
 8003e5a:	0418      	lsls	r0, r3, #16
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	78fb      	ldrb	r3, [r7, #3]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	4302      	orrs	r2, r0
 8003e68:	3340      	adds	r3, #64	; 0x40
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	887a      	ldrh	r2, [r7, #2]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003e92:	2300      	movs	r3, #0
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e25b      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d075      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ed6:	4ba3      	ldr	r3, [pc, #652]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00c      	beq.n	8003efc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ee2:	4ba0      	ldr	r3, [pc, #640]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d112      	bne.n	8003f14 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eee:	4b9d      	ldr	r3, [pc, #628]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003efa:	d10b      	bne.n	8003f14 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	4b99      	ldr	r3, [pc, #612]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d05b      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x108>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d157      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e236      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f1c:	d106      	bne.n	8003f2c <HAL_RCC_OscConfig+0x74>
 8003f1e:	4b91      	ldr	r3, [pc, #580]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a90      	ldr	r2, [pc, #576]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f28:	6013      	str	r3, [r2, #0]
 8003f2a:	e01d      	b.n	8003f68 <HAL_RCC_OscConfig+0xb0>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f34:	d10c      	bne.n	8003f50 <HAL_RCC_OscConfig+0x98>
 8003f36:	4b8b      	ldr	r3, [pc, #556]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a8a      	ldr	r2, [pc, #552]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f40:	6013      	str	r3, [r2, #0]
 8003f42:	4b88      	ldr	r3, [pc, #544]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a87      	ldr	r2, [pc, #540]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	e00b      	b.n	8003f68 <HAL_RCC_OscConfig+0xb0>
 8003f50:	4b84      	ldr	r3, [pc, #528]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a83      	ldr	r2, [pc, #524]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	4b81      	ldr	r3, [pc, #516]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a80      	ldr	r2, [pc, #512]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f66:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d013      	beq.n	8003f98 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f70:	f7fd fd6e 	bl	8001a50 <HAL_GetTick>
 8003f74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f76:	e008      	b.n	8003f8a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f78:	f7fd fd6a 	bl	8001a50 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b64      	cmp	r3, #100	; 0x64
 8003f84:	d901      	bls.n	8003f8a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	e1fb      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f8a:	4b76      	ldr	r3, [pc, #472]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d0f0      	beq.n	8003f78 <HAL_RCC_OscConfig+0xc0>
 8003f96:	e014      	b.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f98:	f7fd fd5a 	bl	8001a50 <HAL_GetTick>
 8003f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f9e:	e008      	b.n	8003fb2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003fa0:	f7fd fd56 	bl	8001a50 <HAL_GetTick>
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	1ad3      	subs	r3, r2, r3
 8003faa:	2b64      	cmp	r3, #100	; 0x64
 8003fac:	d901      	bls.n	8003fb2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fae:	2303      	movs	r3, #3
 8003fb0:	e1e7      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fb2:	4b6c      	ldr	r3, [pc, #432]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1f0      	bne.n	8003fa0 <HAL_RCC_OscConfig+0xe8>
 8003fbe:	e000      	b.n	8003fc2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d063      	beq.n	8004096 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fce:	4b65      	ldr	r3, [pc, #404]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	f003 030c 	and.w	r3, r3, #12
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00b      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fda:	4b62      	ldr	r3, [pc, #392]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fe2:	2b08      	cmp	r3, #8
 8003fe4:	d11c      	bne.n	8004020 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fe6:	4b5f      	ldr	r3, [pc, #380]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d116      	bne.n	8004020 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d005      	beq.n	800400a <HAL_RCC_OscConfig+0x152>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d001      	beq.n	800400a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e1bb      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800400a:	4b56      	ldr	r3, [pc, #344]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	4952      	ldr	r1, [pc, #328]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	4313      	orrs	r3, r2
 800401c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800401e:	e03a      	b.n	8004096 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d020      	beq.n	800406a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004028:	4b4f      	ldr	r3, [pc, #316]	; (8004168 <HAL_RCC_OscConfig+0x2b0>)
 800402a:	2201      	movs	r2, #1
 800402c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800402e:	f7fd fd0f 	bl	8001a50 <HAL_GetTick>
 8004032:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004034:	e008      	b.n	8004048 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004036:	f7fd fd0b 	bl	8001a50 <HAL_GetTick>
 800403a:	4602      	mov	r2, r0
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1ad3      	subs	r3, r2, r3
 8004040:	2b02      	cmp	r3, #2
 8004042:	d901      	bls.n	8004048 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e19c      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004048:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d0f0      	beq.n	8004036 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004054:	4b43      	ldr	r3, [pc, #268]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4940      	ldr	r1, [pc, #256]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004064:	4313      	orrs	r3, r2
 8004066:	600b      	str	r3, [r1, #0]
 8004068:	e015      	b.n	8004096 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800406a:	4b3f      	ldr	r3, [pc, #252]	; (8004168 <HAL_RCC_OscConfig+0x2b0>)
 800406c:	2200      	movs	r2, #0
 800406e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004070:	f7fd fcee 	bl	8001a50 <HAL_GetTick>
 8004074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004076:	e008      	b.n	800408a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004078:	f7fd fcea 	bl	8001a50 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	2b02      	cmp	r3, #2
 8004084:	d901      	bls.n	800408a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e17b      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800408a:	4b36      	ldr	r3, [pc, #216]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d1f0      	bne.n	8004078 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 0308 	and.w	r3, r3, #8
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d030      	beq.n	8004104 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d016      	beq.n	80040d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040aa:	4b30      	ldr	r3, [pc, #192]	; (800416c <HAL_RCC_OscConfig+0x2b4>)
 80040ac:	2201      	movs	r2, #1
 80040ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040b0:	f7fd fcce 	bl	8001a50 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b8:	f7fd fcca 	bl	8001a50 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e15b      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040ca:	4b26      	ldr	r3, [pc, #152]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ce:	f003 0302 	and.w	r3, r3, #2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0x200>
 80040d6:	e015      	b.n	8004104 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_RCC_OscConfig+0x2b4>)
 80040da:	2200      	movs	r2, #0
 80040dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040de:	f7fd fcb7 	bl	8001a50 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040e6:	f7fd fcb3 	bl	8001a50 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e144      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 80040fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f0      	bne.n	80040e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80a0 	beq.w	8004252 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004112:	2300      	movs	r3, #0
 8004114:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10f      	bne.n	8004142 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	4b0f      	ldr	r3, [pc, #60]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412a:	4a0e      	ldr	r2, [pc, #56]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 800412c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004130:	6413      	str	r3, [r2, #64]	; 0x40
 8004132:	4b0c      	ldr	r3, [pc, #48]	; (8004164 <HAL_RCC_OscConfig+0x2ac>)
 8004134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800413a:	60bb      	str	r3, [r7, #8]
 800413c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800413e:	2301      	movs	r3, #1
 8004140:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004142:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_RCC_OscConfig+0x2b8>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800414a:	2b00      	cmp	r3, #0
 800414c:	d121      	bne.n	8004192 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <HAL_RCC_OscConfig+0x2b8>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a07      	ldr	r2, [pc, #28]	; (8004170 <HAL_RCC_OscConfig+0x2b8>)
 8004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004158:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800415a:	f7fd fc79 	bl	8001a50 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004160:	e011      	b.n	8004186 <HAL_RCC_OscConfig+0x2ce>
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	42470000 	.word	0x42470000
 800416c:	42470e80 	.word	0x42470e80
 8004170:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004174:	f7fd fc6c 	bl	8001a50 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e0fd      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004186:	4b81      	ldr	r3, [pc, #516]	; (800438c <HAL_RCC_OscConfig+0x4d4>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d106      	bne.n	80041a8 <HAL_RCC_OscConfig+0x2f0>
 800419a:	4b7d      	ldr	r3, [pc, #500]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4a7c      	ldr	r2, [pc, #496]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041a0:	f043 0301 	orr.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70
 80041a6:	e01c      	b.n	80041e2 <HAL_RCC_OscConfig+0x32a>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b05      	cmp	r3, #5
 80041ae:	d10c      	bne.n	80041ca <HAL_RCC_OscConfig+0x312>
 80041b0:	4b77      	ldr	r3, [pc, #476]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b4:	4a76      	ldr	r2, [pc, #472]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041b6:	f043 0304 	orr.w	r3, r3, #4
 80041ba:	6713      	str	r3, [r2, #112]	; 0x70
 80041bc:	4b74      	ldr	r3, [pc, #464]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c0:	4a73      	ldr	r2, [pc, #460]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041c2:	f043 0301 	orr.w	r3, r3, #1
 80041c6:	6713      	str	r3, [r2, #112]	; 0x70
 80041c8:	e00b      	b.n	80041e2 <HAL_RCC_OscConfig+0x32a>
 80041ca:	4b71      	ldr	r3, [pc, #452]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a70      	ldr	r2, [pc, #448]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041d0:	f023 0301 	bic.w	r3, r3, #1
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70
 80041d6:	4b6e      	ldr	r3, [pc, #440]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	4a6d      	ldr	r2, [pc, #436]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80041dc:	f023 0304 	bic.w	r3, r3, #4
 80041e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d015      	beq.n	8004216 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ea:	f7fd fc31 	bl	8001a50 <HAL_GetTick>
 80041ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041f0:	e00a      	b.n	8004208 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f2:	f7fd fc2d 	bl	8001a50 <HAL_GetTick>
 80041f6:	4602      	mov	r2, r0
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	1ad3      	subs	r3, r2, r3
 80041fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004200:	4293      	cmp	r3, r2
 8004202:	d901      	bls.n	8004208 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004204:	2303      	movs	r3, #3
 8004206:	e0bc      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004208:	4b61      	ldr	r3, [pc, #388]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 800420a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d0ee      	beq.n	80041f2 <HAL_RCC_OscConfig+0x33a>
 8004214:	e014      	b.n	8004240 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004216:	f7fd fc1b 	bl	8001a50 <HAL_GetTick>
 800421a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800421c:	e00a      	b.n	8004234 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800421e:	f7fd fc17 	bl	8001a50 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	f241 3288 	movw	r2, #5000	; 0x1388
 800422c:	4293      	cmp	r3, r2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e0a6      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004234:	4b56      	ldr	r3, [pc, #344]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 8004236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d1ee      	bne.n	800421e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004240:	7dfb      	ldrb	r3, [r7, #23]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d105      	bne.n	8004252 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004246:	4b52      	ldr	r3, [pc, #328]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 8004248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424a:	4a51      	ldr	r2, [pc, #324]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 800424c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004250:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	2b00      	cmp	r3, #0
 8004258:	f000 8092 	beq.w	8004380 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800425c:	4b4c      	ldr	r3, [pc, #304]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 030c 	and.w	r3, r3, #12
 8004264:	2b08      	cmp	r3, #8
 8004266:	d05c      	beq.n	8004322 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	2b02      	cmp	r3, #2
 800426e:	d141      	bne.n	80042f4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004270:	4b48      	ldr	r3, [pc, #288]	; (8004394 <HAL_RCC_OscConfig+0x4dc>)
 8004272:	2200      	movs	r2, #0
 8004274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004276:	f7fd fbeb 	bl	8001a50 <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800427e:	f7fd fbe7 	bl	8001a50 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e078      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004290:	4b3f      	ldr	r3, [pc, #252]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d1f0      	bne.n	800427e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	431a      	orrs	r2, r3
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	019b      	lsls	r3, r3, #6
 80042ac:	431a      	orrs	r2, r3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b2:	085b      	lsrs	r3, r3, #1
 80042b4:	3b01      	subs	r3, #1
 80042b6:	041b      	lsls	r3, r3, #16
 80042b8:	431a      	orrs	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042be:	061b      	lsls	r3, r3, #24
 80042c0:	4933      	ldr	r1, [pc, #204]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80042c2:	4313      	orrs	r3, r2
 80042c4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80042c6:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_RCC_OscConfig+0x4dc>)
 80042c8:	2201      	movs	r2, #1
 80042ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fd fbc0 	bl	8001a50 <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d4:	f7fd fbbc 	bl	8001a50 <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b02      	cmp	r3, #2
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e04d      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042e6:	4b2a      	ldr	r3, [pc, #168]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0f0      	beq.n	80042d4 <HAL_RCC_OscConfig+0x41c>
 80042f2:	e045      	b.n	8004380 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <HAL_RCC_OscConfig+0x4dc>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042fa:	f7fd fba9 	bl	8001a50 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004302:	f7fd fba5 	bl	8001a50 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e036      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004314:	4b1e      	ldr	r3, [pc, #120]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x44a>
 8004320:	e02e      	b.n	8004380 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	2b01      	cmp	r3, #1
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e029      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800432e:	4b18      	ldr	r3, [pc, #96]	; (8004390 <HAL_RCC_OscConfig+0x4d8>)
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	69db      	ldr	r3, [r3, #28]
 800433e:	429a      	cmp	r2, r3
 8004340:	d11c      	bne.n	800437c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800434c:	429a      	cmp	r2, r3
 800434e:	d115      	bne.n	800437c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004356:	4013      	ands	r3, r2
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800435c:	4293      	cmp	r3, r2
 800435e:	d10d      	bne.n	800437c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800436a:	429a      	cmp	r2, r3
 800436c:	d106      	bne.n	800437c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004378:	429a      	cmp	r2, r3
 800437a:	d001      	beq.n	8004380 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e000      	b.n	8004382 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3718      	adds	r7, #24
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	40007000 	.word	0x40007000
 8004390:	40023800 	.word	0x40023800
 8004394:	42470060 	.word	0x42470060

08004398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0cc      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043ac:	4b68      	ldr	r3, [pc, #416]	; (8004550 <HAL_RCC_ClockConfig+0x1b8>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	683a      	ldr	r2, [r7, #0]
 80043b6:	429a      	cmp	r2, r3
 80043b8:	d90c      	bls.n	80043d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ba:	4b65      	ldr	r3, [pc, #404]	; (8004550 <HAL_RCC_ClockConfig+0x1b8>)
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	b2d2      	uxtb	r2, r2
 80043c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043c2:	4b63      	ldr	r3, [pc, #396]	; (8004550 <HAL_RCC_ClockConfig+0x1b8>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 030f 	and.w	r3, r3, #15
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d001      	beq.n	80043d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0b8      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0302 	and.w	r3, r3, #2
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0304 	and.w	r3, r3, #4
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d005      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043ec:	4b59      	ldr	r3, [pc, #356]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	4a58      	ldr	r2, [pc, #352]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0308 	and.w	r3, r3, #8
 8004400:	2b00      	cmp	r3, #0
 8004402:	d005      	beq.n	8004410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004404:	4b53      	ldr	r3, [pc, #332]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	4a52      	ldr	r2, [pc, #328]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 800440a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800440e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004410:	4b50      	ldr	r3, [pc, #320]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	494d      	ldr	r1, [pc, #308]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 800441e:	4313      	orrs	r3, r2
 8004420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0301 	and.w	r3, r3, #1
 800442a:	2b00      	cmp	r3, #0
 800442c:	d044      	beq.n	80044b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004436:	4b47      	ldr	r3, [pc, #284]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d119      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e07f      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d003      	beq.n	8004456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004452:	2b03      	cmp	r3, #3
 8004454:	d107      	bne.n	8004466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004456:	4b3f      	ldr	r3, [pc, #252]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d109      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e06f      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004466:	4b3b      	ldr	r3, [pc, #236]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e067      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004476:	4b37      	ldr	r3, [pc, #220]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 0203 	bic.w	r2, r3, #3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4934      	ldr	r1, [pc, #208]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 8004484:	4313      	orrs	r3, r2
 8004486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004488:	f7fd fae2 	bl	8001a50 <HAL_GetTick>
 800448c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800448e:	e00a      	b.n	80044a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004490:	f7fd fade 	bl	8001a50 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e04f      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044a6:	4b2b      	ldr	r3, [pc, #172]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 020c 	and.w	r2, r3, #12
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d1eb      	bne.n	8004490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80044b8:	4b25      	ldr	r3, [pc, #148]	; (8004550 <HAL_RCC_ClockConfig+0x1b8>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 030f 	and.w	r3, r3, #15
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d20c      	bcs.n	80044e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044c6:	4b22      	ldr	r3, [pc, #136]	; (8004550 <HAL_RCC_ClockConfig+0x1b8>)
 80044c8:	683a      	ldr	r2, [r7, #0]
 80044ca:	b2d2      	uxtb	r2, r2
 80044cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ce:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCC_ClockConfig+0x1b8>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 030f 	and.w	r3, r3, #15
 80044d6:	683a      	ldr	r2, [r7, #0]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d001      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e032      	b.n	8004546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0304 	and.w	r3, r3, #4
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044ec:	4b19      	ldr	r3, [pc, #100]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	4916      	ldr	r1, [pc, #88]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f003 0308 	and.w	r3, r3, #8
 8004506:	2b00      	cmp	r3, #0
 8004508:	d009      	beq.n	800451e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800450a:	4b12      	ldr	r3, [pc, #72]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	691b      	ldr	r3, [r3, #16]
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	490e      	ldr	r1, [pc, #56]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	4313      	orrs	r3, r2
 800451c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800451e:	f000 f821 	bl	8004564 <HAL_RCC_GetSysClockFreq>
 8004522:	4601      	mov	r1, r0
 8004524:	4b0b      	ldr	r3, [pc, #44]	; (8004554 <HAL_RCC_ClockConfig+0x1bc>)
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	4a0a      	ldr	r2, [pc, #40]	; (8004558 <HAL_RCC_ClockConfig+0x1c0>)
 8004530:	5cd3      	ldrb	r3, [r2, r3]
 8004532:	fa21 f303 	lsr.w	r3, r1, r3
 8004536:	4a09      	ldr	r2, [pc, #36]	; (800455c <HAL_RCC_ClockConfig+0x1c4>)
 8004538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800453a:	4b09      	ldr	r3, [pc, #36]	; (8004560 <HAL_RCC_ClockConfig+0x1c8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4618      	mov	r0, r3
 8004540:	f7fd fa42 	bl	80019c8 <HAL_InitTick>

  return HAL_OK;
 8004544:	2300      	movs	r3, #0
}
 8004546:	4618      	mov	r0, r3
 8004548:	3710      	adds	r7, #16
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	40023c00 	.word	0x40023c00
 8004554:	40023800 	.word	0x40023800
 8004558:	0800a780 	.word	0x0800a780
 800455c:	20000024 	.word	0x20000024
 8004560:	20000028 	.word	0x20000028

08004564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800456a:	2300      	movs	r3, #0
 800456c:	607b      	str	r3, [r7, #4]
 800456e:	2300      	movs	r3, #0
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	2300      	movs	r3, #0
 8004574:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004576:	2300      	movs	r3, #0
 8004578:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800457a:	4b63      	ldr	r3, [pc, #396]	; (8004708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
 8004582:	2b04      	cmp	r3, #4
 8004584:	d007      	beq.n	8004596 <HAL_RCC_GetSysClockFreq+0x32>
 8004586:	2b08      	cmp	r3, #8
 8004588:	d008      	beq.n	800459c <HAL_RCC_GetSysClockFreq+0x38>
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 80b4 	bne.w	80046f8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4b5e      	ldr	r3, [pc, #376]	; (800470c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004592:	60bb      	str	r3, [r7, #8]
       break;
 8004594:	e0b3      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004596:	4b5e      	ldr	r3, [pc, #376]	; (8004710 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004598:	60bb      	str	r3, [r7, #8]
      break;
 800459a:	e0b0      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800459c:	4b5a      	ldr	r3, [pc, #360]	; (8004708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80045a4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80045a6:	4b58      	ldr	r3, [pc, #352]	; (8004708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d04a      	beq.n	8004648 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045b2:	4b55      	ldr	r3, [pc, #340]	; (8004708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	099b      	lsrs	r3, r3, #6
 80045b8:	f04f 0400 	mov.w	r4, #0
 80045bc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	ea03 0501 	and.w	r5, r3, r1
 80045c8:	ea04 0602 	and.w	r6, r4, r2
 80045cc:	4629      	mov	r1, r5
 80045ce:	4632      	mov	r2, r6
 80045d0:	f04f 0300 	mov.w	r3, #0
 80045d4:	f04f 0400 	mov.w	r4, #0
 80045d8:	0154      	lsls	r4, r2, #5
 80045da:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80045de:	014b      	lsls	r3, r1, #5
 80045e0:	4619      	mov	r1, r3
 80045e2:	4622      	mov	r2, r4
 80045e4:	1b49      	subs	r1, r1, r5
 80045e6:	eb62 0206 	sbc.w	r2, r2, r6
 80045ea:	f04f 0300 	mov.w	r3, #0
 80045ee:	f04f 0400 	mov.w	r4, #0
 80045f2:	0194      	lsls	r4, r2, #6
 80045f4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80045f8:	018b      	lsls	r3, r1, #6
 80045fa:	1a5b      	subs	r3, r3, r1
 80045fc:	eb64 0402 	sbc.w	r4, r4, r2
 8004600:	f04f 0100 	mov.w	r1, #0
 8004604:	f04f 0200 	mov.w	r2, #0
 8004608:	00e2      	lsls	r2, r4, #3
 800460a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800460e:	00d9      	lsls	r1, r3, #3
 8004610:	460b      	mov	r3, r1
 8004612:	4614      	mov	r4, r2
 8004614:	195b      	adds	r3, r3, r5
 8004616:	eb44 0406 	adc.w	r4, r4, r6
 800461a:	f04f 0100 	mov.w	r1, #0
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	0262      	lsls	r2, r4, #9
 8004624:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004628:	0259      	lsls	r1, r3, #9
 800462a:	460b      	mov	r3, r1
 800462c:	4614      	mov	r4, r2
 800462e:	4618      	mov	r0, r3
 8004630:	4621      	mov	r1, r4
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f04f 0400 	mov.w	r4, #0
 8004638:	461a      	mov	r2, r3
 800463a:	4623      	mov	r3, r4
 800463c:	f7fc fa76 	bl	8000b2c <__aeabi_uldivmod>
 8004640:	4603      	mov	r3, r0
 8004642:	460c      	mov	r4, r1
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e049      	b.n	80046dc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004648:	4b2f      	ldr	r3, [pc, #188]	; (8004708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	099b      	lsrs	r3, r3, #6
 800464e:	f04f 0400 	mov.w	r4, #0
 8004652:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	ea03 0501 	and.w	r5, r3, r1
 800465e:	ea04 0602 	and.w	r6, r4, r2
 8004662:	4629      	mov	r1, r5
 8004664:	4632      	mov	r2, r6
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	f04f 0400 	mov.w	r4, #0
 800466e:	0154      	lsls	r4, r2, #5
 8004670:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004674:	014b      	lsls	r3, r1, #5
 8004676:	4619      	mov	r1, r3
 8004678:	4622      	mov	r2, r4
 800467a:	1b49      	subs	r1, r1, r5
 800467c:	eb62 0206 	sbc.w	r2, r2, r6
 8004680:	f04f 0300 	mov.w	r3, #0
 8004684:	f04f 0400 	mov.w	r4, #0
 8004688:	0194      	lsls	r4, r2, #6
 800468a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800468e:	018b      	lsls	r3, r1, #6
 8004690:	1a5b      	subs	r3, r3, r1
 8004692:	eb64 0402 	sbc.w	r4, r4, r2
 8004696:	f04f 0100 	mov.w	r1, #0
 800469a:	f04f 0200 	mov.w	r2, #0
 800469e:	00e2      	lsls	r2, r4, #3
 80046a0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046a4:	00d9      	lsls	r1, r3, #3
 80046a6:	460b      	mov	r3, r1
 80046a8:	4614      	mov	r4, r2
 80046aa:	195b      	adds	r3, r3, r5
 80046ac:	eb44 0406 	adc.w	r4, r4, r6
 80046b0:	f04f 0100 	mov.w	r1, #0
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	02a2      	lsls	r2, r4, #10
 80046ba:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80046be:	0299      	lsls	r1, r3, #10
 80046c0:	460b      	mov	r3, r1
 80046c2:	4614      	mov	r4, r2
 80046c4:	4618      	mov	r0, r3
 80046c6:	4621      	mov	r1, r4
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f04f 0400 	mov.w	r4, #0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4623      	mov	r3, r4
 80046d2:	f7fc fa2b 	bl	8000b2c <__aeabi_uldivmod>
 80046d6:	4603      	mov	r3, r0
 80046d8:	460c      	mov	r4, r1
 80046da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046dc:	4b0a      	ldr	r3, [pc, #40]	; (8004708 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	0c1b      	lsrs	r3, r3, #16
 80046e2:	f003 0303 	and.w	r3, r3, #3
 80046e6:	3301      	adds	r3, #1
 80046e8:	005b      	lsls	r3, r3, #1
 80046ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f4:	60bb      	str	r3, [r7, #8]
      break;
 80046f6:	e002      	b.n	80046fe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80046fa:	60bb      	str	r3, [r7, #8]
      break;
 80046fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046fe:	68bb      	ldr	r3, [r7, #8]
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004708:	40023800 	.word	0x40023800
 800470c:	00f42400 	.word	0x00f42400
 8004710:	007a1200 	.word	0x007a1200

08004714 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004718:	4b03      	ldr	r3, [pc, #12]	; (8004728 <HAL_RCC_GetHCLKFreq+0x14>)
 800471a:	681b      	ldr	r3, [r3, #0]
}
 800471c:	4618      	mov	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
 8004726:	bf00      	nop
 8004728:	20000024 	.word	0x20000024

0800472c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004730:	f7ff fff0 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 8004734:	4601      	mov	r1, r0
 8004736:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	0a9b      	lsrs	r3, r3, #10
 800473c:	f003 0307 	and.w	r3, r3, #7
 8004740:	4a03      	ldr	r2, [pc, #12]	; (8004750 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004742:	5cd3      	ldrb	r3, [r2, r3]
 8004744:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004748:	4618      	mov	r0, r3
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40023800 	.word	0x40023800
 8004750:	0800a790 	.word	0x0800a790

08004754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004758:	f7ff ffdc 	bl	8004714 <HAL_RCC_GetHCLKFreq>
 800475c:	4601      	mov	r1, r0
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	0b5b      	lsrs	r3, r3, #13
 8004764:	f003 0307 	and.w	r3, r3, #7
 8004768:	4a03      	ldr	r2, [pc, #12]	; (8004778 <HAL_RCC_GetPCLK2Freq+0x24>)
 800476a:	5cd3      	ldrb	r3, [r2, r3]
 800476c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004770:	4618      	mov	r0, r3
 8004772:	bd80      	pop	{r7, pc}
 8004774:	40023800 	.word	0x40023800
 8004778:	0800a790 	.word	0x0800a790

0800477c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d101      	bne.n	800478e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e01d      	b.n	80047ca <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004794:	b2db      	uxtb	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d106      	bne.n	80047a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2200      	movs	r2, #0
 800479e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7fc ff72 	bl	800168c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681a      	ldr	r2, [r3, #0]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3304      	adds	r3, #4
 80047b8:	4619      	mov	r1, r3
 80047ba:	4610      	mov	r0, r2
 80047bc:	f000 f8e4 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	3708      	adds	r7, #8
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}

080047d2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80047d2:	b480      	push	{r7}
 80047d4:	b085      	sub	sp, #20
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b06      	cmp	r3, #6
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3714      	adds	r7, #20
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800481a:	b580      	push	{r7, lr}
 800481c:	b084      	sub	sp, #16
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482a:	2b01      	cmp	r3, #1
 800482c:	d101      	bne.n	8004832 <HAL_TIM_ConfigClockSource+0x18>
 800482e:	2302      	movs	r3, #2
 8004830:	e0a6      	b.n	8004980 <HAL_TIM_ConfigClockSource+0x166>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2201      	movs	r2, #1
 8004836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004850:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004858:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2b40      	cmp	r3, #64	; 0x40
 8004868:	d067      	beq.n	800493a <HAL_TIM_ConfigClockSource+0x120>
 800486a:	2b40      	cmp	r3, #64	; 0x40
 800486c:	d80b      	bhi.n	8004886 <HAL_TIM_ConfigClockSource+0x6c>
 800486e:	2b10      	cmp	r3, #16
 8004870:	d073      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x140>
 8004872:	2b10      	cmp	r3, #16
 8004874:	d802      	bhi.n	800487c <HAL_TIM_ConfigClockSource+0x62>
 8004876:	2b00      	cmp	r3, #0
 8004878:	d06f      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800487a:	e078      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800487c:	2b20      	cmp	r3, #32
 800487e:	d06c      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x140>
 8004880:	2b30      	cmp	r3, #48	; 0x30
 8004882:	d06a      	beq.n	800495a <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004884:	e073      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004886:	2b70      	cmp	r3, #112	; 0x70
 8004888:	d00d      	beq.n	80048a6 <HAL_TIM_ConfigClockSource+0x8c>
 800488a:	2b70      	cmp	r3, #112	; 0x70
 800488c:	d804      	bhi.n	8004898 <HAL_TIM_ConfigClockSource+0x7e>
 800488e:	2b50      	cmp	r3, #80	; 0x50
 8004890:	d033      	beq.n	80048fa <HAL_TIM_ConfigClockSource+0xe0>
 8004892:	2b60      	cmp	r3, #96	; 0x60
 8004894:	d041      	beq.n	800491a <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004896:	e06a      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800489c:	d066      	beq.n	800496c <HAL_TIM_ConfigClockSource+0x152>
 800489e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048a2:	d017      	beq.n	80048d4 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80048a4:	e063      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	6899      	ldr	r1, [r3, #8]
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685a      	ldr	r2, [r3, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f000 f981 	bl	8004bbc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80048c8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	609a      	str	r2, [r3, #8]
      break;
 80048d2:	e04c      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	6899      	ldr	r1, [r3, #8]
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	f000 f96a 	bl	8004bbc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689a      	ldr	r2, [r3, #8]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048f6:	609a      	str	r2, [r3, #8]
      break;
 80048f8:	e039      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6818      	ldr	r0, [r3, #0]
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	6859      	ldr	r1, [r3, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	461a      	mov	r2, r3
 8004908:	f000 f8de 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2150      	movs	r1, #80	; 0x50
 8004912:	4618      	mov	r0, r3
 8004914:	f000 f937 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004918:	e029      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6818      	ldr	r0, [r3, #0]
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	6859      	ldr	r1, [r3, #4]
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	461a      	mov	r2, r3
 8004928:	f000 f8fd 	bl	8004b26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2160      	movs	r1, #96	; 0x60
 8004932:	4618      	mov	r0, r3
 8004934:	f000 f927 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004938:	e019      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6818      	ldr	r0, [r3, #0]
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	6859      	ldr	r1, [r3, #4]
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	461a      	mov	r2, r3
 8004948:	f000 f8be 	bl	8004ac8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	2140      	movs	r1, #64	; 0x40
 8004952:	4618      	mov	r0, r3
 8004954:	f000 f917 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 8004958:	e009      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	4610      	mov	r0, r2
 8004966:	f000 f90e 	bl	8004b86 <TIM_ITRx_SetConfig>
      break;
 800496a:	e000      	b.n	800496e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800496c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800497e:	2300      	movs	r3, #0
}
 8004980:	4618      	mov	r0, r3
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d027      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d023      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <TIM_Base_SetConfig+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <TIM_Base_SetConfig+0x130>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <TIM_Base_SetConfig+0x134>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <TIM_Base_SetConfig+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b087      	sub	sp, #28
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	f023 0201 	bic.w	r2, r3, #1
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	011b      	lsls	r3, r3, #4
 8004af8:	693a      	ldr	r2, [r7, #16]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f023 030a 	bic.w	r3, r3, #10
 8004b04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004b06:	697a      	ldr	r2, [r7, #20]
 8004b08:	68bb      	ldr	r3, [r7, #8]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	697a      	ldr	r2, [r7, #20]
 8004b18:	621a      	str	r2, [r3, #32]
}
 8004b1a:	bf00      	nop
 8004b1c:	371c      	adds	r7, #28
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b24:	4770      	bx	lr

08004b26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004b26:	b480      	push	{r7}
 8004b28:	b087      	sub	sp, #28
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	f023 0210 	bic.w	r2, r3, #16
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a1b      	ldr	r3, [r3, #32]
 8004b48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	031b      	lsls	r3, r3, #12
 8004b56:	697a      	ldr	r2, [r7, #20]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	011b      	lsls	r3, r3, #4
 8004b68:	693a      	ldr	r2, [r7, #16]
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	693a      	ldr	r2, [r7, #16]
 8004b78:	621a      	str	r2, [r3, #32]
}
 8004b7a:	bf00      	nop
 8004b7c:	371c      	adds	r7, #28
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr

08004b86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b86:	b480      	push	{r7}
 8004b88:	b085      	sub	sp, #20
 8004b8a:	af00      	add	r7, sp, #0
 8004b8c:	6078      	str	r0, [r7, #4]
 8004b8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f043 0307 	orr.w	r3, r3, #7
 8004ba8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	68fa      	ldr	r2, [r7, #12]
 8004bae:	609a      	str	r2, [r3, #8]
}
 8004bb0:	bf00      	nop
 8004bb2:	3714      	adds	r7, #20
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004bd0:	697b      	ldr	r3, [r7, #20]
 8004bd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	021a      	lsls	r2, r3, #8
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	431a      	orrs	r2, r3
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	4313      	orrs	r3, r2
 8004be4:	697a      	ldr	r2, [r7, #20]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	697a      	ldr	r2, [r7, #20]
 8004bee:	609a      	str	r2, [r3, #8]
}
 8004bf0:	bf00      	nop
 8004bf2:	371c      	adds	r7, #28
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d101      	bne.n	8004c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004c10:	2302      	movs	r3, #2
 8004c12:	e05a      	b.n	8004cca <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2202      	movs	r2, #2
 8004c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	685b      	ldr	r3, [r3, #4]
 8004c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a21      	ldr	r2, [pc, #132]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d022      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c60:	d01d      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d018      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a1b      	ldr	r2, [pc, #108]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d013      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d00e      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a18      	ldr	r2, [pc, #96]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d009      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a17      	ldr	r2, [pc, #92]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d004      	beq.n	8004c9e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	4313      	orrs	r3, r2
 8004cae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68ba      	ldr	r2, [r7, #8]
 8004cb6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40010400 	.word	0x40010400
 8004cec:	40014000 	.word	0x40014000
 8004cf0:	40001800 	.word	0x40001800

08004cf4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e03f      	b.n	8004d86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d106      	bne.n	8004d20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7fc fd16 	bl	800174c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2224      	movs	r2, #36	; 0x24
 8004d24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68da      	ldr	r2, [r3, #12]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004d38:	6878      	ldr	r0, [r7, #4]
 8004d3a:	f000 fc89 	bl	8005650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	695a      	ldr	r2, [r3, #20]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004d5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	2200      	movs	r2, #0
 8004d72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2220      	movs	r2, #32
 8004d78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004d84:	2300      	movs	r3, #0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b086      	sub	sp, #24
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004da4:	b2db      	uxtb	r3, r3
 8004da6:	2b20      	cmp	r3, #32
 8004da8:	d153      	bne.n	8004e52 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <HAL_UART_Transmit_DMA+0x26>
 8004db0:	88fb      	ldrh	r3, [r7, #6]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e04c      	b.n	8004e54 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_UART_Transmit_DMA+0x38>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e045      	b.n	8004e54 <HAL_UART_Transmit_DMA+0xc4>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	88fa      	ldrh	r2, [r7, #6]
 8004dda:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	88fa      	ldrh	r2, [r7, #6]
 8004de0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2200      	movs	r2, #0
 8004de6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2221      	movs	r2, #33	; 0x21
 8004dec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df4:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <HAL_UART_Transmit_DMA+0xcc>)
 8004df6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dfc:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <HAL_UART_Transmit_DMA+0xd0>)
 8004dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <HAL_UART_Transmit_DMA+0xd4>)
 8004e06:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8004e10:	f107 0308 	add.w	r3, r7, #8
 8004e14:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	6819      	ldr	r1, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	3304      	adds	r3, #4
 8004e24:	461a      	mov	r2, r3
 8004e26:	88fb      	ldrh	r3, [r7, #6]
 8004e28:	f7fd f9c6 	bl	80021b8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e34:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	695a      	ldr	r2, [r3, #20]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e4c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e000      	b.n	8004e54 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004e52:	2302      	movs	r3, #2
  }
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3718      	adds	r7, #24
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	0800525d 	.word	0x0800525d
 8004e60:	080052af 	.word	0x080052af
 8004e64:	0800534f 	.word	0x0800534f

08004e68 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	4613      	mov	r3, r2
 8004e74:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b20      	cmp	r3, #32
 8004e80:	d166      	bne.n	8004f50 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <HAL_UART_Receive_DMA+0x26>
 8004e88:	88fb      	ldrh	r3, [r7, #6]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e05f      	b.n	8004f52 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Receive_DMA+0x38>
 8004e9c:	2302      	movs	r3, #2
 8004e9e:	e058      	b.n	8004f52 <HAL_UART_Receive_DMA+0xea>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004ea8:	68ba      	ldr	r2, [r7, #8]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	88fa      	ldrh	r2, [r7, #6]
 8004eb2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2222      	movs	r2, #34	; 0x22
 8004ebe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	4a25      	ldr	r2, [pc, #148]	; (8004f5c <HAL_UART_Receive_DMA+0xf4>)
 8004ec8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	4a24      	ldr	r2, [pc, #144]	; (8004f60 <HAL_UART_Receive_DMA+0xf8>)
 8004ed0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	4a23      	ldr	r2, [pc, #140]	; (8004f64 <HAL_UART_Receive_DMA+0xfc>)
 8004ed8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ede:	2200      	movs	r2, #0
 8004ee0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8004ee2:	f107 0308 	add.w	r3, r7, #8
 8004ee6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3304      	adds	r3, #4
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	88fb      	ldrh	r3, [r7, #6]
 8004efa:	f7fd f95d 	bl	80021b8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8004efe:	2300      	movs	r3, #0
 8004f00:	613b      	str	r3, [r7, #16]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	613b      	str	r3, [r7, #16]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	613b      	str	r3, [r7, #16]
 8004f12:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68da      	ldr	r2, [r3, #12]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f2a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695a      	ldr	r2, [r3, #20]
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f042 0201 	orr.w	r2, r2, #1
 8004f3a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695a      	ldr	r2, [r3, #20]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f4a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e000      	b.n	8004f52 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004f50:	2302      	movs	r3, #2
  }
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	080052cb 	.word	0x080052cb
 8004f60:	08005333 	.word	0x08005333
 8004f64:	0800534f 	.word	0x0800534f

08004f68 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7e:	2b80      	cmp	r3, #128	; 0x80
 8004f80:	bf0c      	ite	eq
 8004f82:	2301      	moveq	r3, #1
 8004f84:	2300      	movne	r3, #0
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004f90:	b2db      	uxtb	r3, r3
 8004f92:	2b21      	cmp	r3, #33	; 0x21
 8004f94:	d116      	bne.n	8004fc4 <HAL_UART_DMAStop+0x5c>
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d013      	beq.n	8004fc4 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	695a      	ldr	r2, [r3, #20]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004faa:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d004      	beq.n	8004fbe <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	4618      	mov	r0, r3
 8004fba:	f7fd f955 	bl	8002268 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 fa0f 	bl	80053e2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fce:	2b40      	cmp	r3, #64	; 0x40
 8004fd0:	bf0c      	ite	eq
 8004fd2:	2301      	moveq	r3, #1
 8004fd4:	2300      	movne	r3, #0
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b22      	cmp	r3, #34	; 0x22
 8004fe4:	d116      	bne.n	8005014 <HAL_UART_DMAStop+0xac>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d013      	beq.n	8005014 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695a      	ldr	r2, [r3, #20]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ffa:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005000:	2b00      	cmp	r3, #0
 8005002:	d004      	beq.n	800500e <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005008:	4618      	mov	r0, r3
 800500a:	f7fd f92d 	bl	8002268 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f9fd 	bl	800540e <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005014:	2300      	movs	r3, #0
}
 8005016:	4618      	mov	r0, r3
 8005018:	3710      	adds	r7, #16
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
	...

08005020 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b088      	sub	sp, #32
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005040:	2300      	movs	r3, #0
 8005042:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10d      	bne.n	8005072 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	f003 0320 	and.w	r3, r3, #32
 800505c:	2b00      	cmp	r3, #0
 800505e:	d008      	beq.n	8005072 <HAL_UART_IRQHandler+0x52>
 8005060:	69bb      	ldr	r3, [r7, #24]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fa6f 	bl	800554e <UART_Receive_IT>
      return;
 8005070:	e0d1      	b.n	8005216 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	f000 80b0 	beq.w	80051da <HAL_UART_IRQHandler+0x1ba>
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d105      	bne.n	8005090 <HAL_UART_IRQHandler+0x70>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800508a:	2b00      	cmp	r3, #0
 800508c:	f000 80a5 	beq.w	80051da <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005090:	69fb      	ldr	r3, [r7, #28]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d00a      	beq.n	80050b0 <HAL_UART_IRQHandler+0x90>
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d005      	beq.n	80050b0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050a8:	f043 0201 	orr.w	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f003 0304 	and.w	r3, r3, #4
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d00a      	beq.n	80050d0 <HAL_UART_IRQHandler+0xb0>
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d005      	beq.n	80050d0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050c8:	f043 0202 	orr.w	r2, r3, #2
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	f003 0302 	and.w	r3, r3, #2
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d00a      	beq.n	80050f0 <HAL_UART_IRQHandler+0xd0>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e8:	f043 0204 	orr.w	r2, r3, #4
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d00f      	beq.n	800511a <HAL_UART_IRQHandler+0xfa>
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	f003 0320 	and.w	r3, r3, #32
 8005100:	2b00      	cmp	r3, #0
 8005102:	d104      	bne.n	800510e <HAL_UART_IRQHandler+0xee>
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d005      	beq.n	800511a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005112:	f043 0208 	orr.w	r2, r3, #8
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800511e:	2b00      	cmp	r3, #0
 8005120:	d078      	beq.n	8005214 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	f003 0320 	and.w	r3, r3, #32
 8005128:	2b00      	cmp	r3, #0
 800512a:	d007      	beq.n	800513c <HAL_UART_IRQHandler+0x11c>
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f003 0320 	and.w	r3, r3, #32
 8005132:	2b00      	cmp	r3, #0
 8005134:	d002      	beq.n	800513c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 fa09 	bl	800554e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	bf0c      	ite	eq
 800514a:	2301      	moveq	r3, #1
 800514c:	2300      	movne	r3, #0
 800514e:	b2db      	uxtb	r3, r3
 8005150:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005156:	f003 0308 	and.w	r3, r3, #8
 800515a:	2b00      	cmp	r3, #0
 800515c:	d102      	bne.n	8005164 <HAL_UART_IRQHandler+0x144>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d031      	beq.n	80051c8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005164:	6878      	ldr	r0, [r7, #4]
 8005166:	f000 f952 	bl	800540e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	695b      	ldr	r3, [r3, #20]
 8005170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005174:	2b40      	cmp	r3, #64	; 0x40
 8005176:	d123      	bne.n	80051c0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	695a      	ldr	r2, [r3, #20]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005186:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800518c:	2b00      	cmp	r3, #0
 800518e:	d013      	beq.n	80051b8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005194:	4a21      	ldr	r2, [pc, #132]	; (800521c <HAL_UART_IRQHandler+0x1fc>)
 8005196:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800519c:	4618      	mov	r0, r3
 800519e:	f7fd f8d3 	bl	8002348 <HAL_DMA_Abort_IT>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d016      	beq.n	80051d6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051b2:	4610      	mov	r0, r2
 80051b4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051b6:	e00e      	b.n	80051d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 f845 	bl	8005248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051be:	e00a      	b.n	80051d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f000 f841 	bl	8005248 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051c6:	e006      	b.n	80051d6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f000 f83d 	bl	8005248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80051d4:	e01e      	b.n	8005214 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80051d6:	bf00      	nop
    return;
 80051d8:	e01c      	b.n	8005214 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d008      	beq.n	80051f6 <HAL_UART_IRQHandler+0x1d6>
 80051e4:	69bb      	ldr	r3, [r7, #24]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d003      	beq.n	80051f6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f93f 	bl	8005472 <UART_Transmit_IT>
    return;
 80051f4:	e00f      	b.n	8005216 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00a      	beq.n	8005216 <HAL_UART_IRQHandler+0x1f6>
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f987 	bl	800551e <UART_EndTransmit_IT>
    return;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005214:	bf00      	nop
  }
}
 8005216:	3720      	adds	r7, #32
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	0800544b 	.word	0x0800544b

08005220 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b084      	sub	sp, #16
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005268:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d113      	bne.n	80052a0 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695a      	ldr	r2, [r3, #20]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800528c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68da      	ldr	r2, [r3, #12]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800529c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800529e:	e002      	b.n	80052a6 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7fb ffff 	bl	80012a4 <HAL_UART_TxCpltCallback>
}
 80052a6:	bf00      	nop
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b084      	sub	sp, #16
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f7ff ffaf 	bl	8005220 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80052c2:	bf00      	nop
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}

080052ca <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80052ca:	b580      	push	{r7, lr}
 80052cc:	b084      	sub	sp, #16
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d11e      	bne.n	8005324 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2200      	movs	r2, #0
 80052ea:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68da      	ldr	r2, [r3, #12]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052fa:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	695a      	ldr	r2, [r3, #20]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f022 0201 	bic.w	r2, r2, #1
 800530a:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800531a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005324:	68f8      	ldr	r0, [r7, #12]
 8005326:	f7fb ffa9 	bl	800127c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f7ff ff77 	bl	8005234 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005346:	bf00      	nop
 8005348:	3710      	adds	r7, #16
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	2b80      	cmp	r3, #128	; 0x80
 800536c:	bf0c      	ite	eq
 800536e:	2301      	moveq	r3, #1
 8005370:	2300      	movne	r3, #0
 8005372:	b2db      	uxtb	r3, r3
 8005374:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b21      	cmp	r3, #33	; 0x21
 8005380:	d108      	bne.n	8005394 <UART_DMAError+0x46>
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	2200      	movs	r2, #0
 800538c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800538e:	68b8      	ldr	r0, [r7, #8]
 8005390:	f000 f827 	bl	80053e2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	695b      	ldr	r3, [r3, #20]
 800539a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	bf0c      	ite	eq
 80053a2:	2301      	moveq	r3, #1
 80053a4:	2300      	movne	r3, #0
 80053a6:	b2db      	uxtb	r3, r3
 80053a8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b22      	cmp	r3, #34	; 0x22
 80053b4:	d108      	bne.n	80053c8 <UART_DMAError+0x7a>
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d005      	beq.n	80053c8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2200      	movs	r2, #0
 80053c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80053c2:	68b8      	ldr	r0, [r7, #8]
 80053c4:	f000 f823 	bl	800540e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053cc:	f043 0210 	orr.w	r2, r3, #16
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f7ff ff37 	bl	8005248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053da:	bf00      	nop
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80053f8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2220      	movs	r2, #32
 80053fe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005424:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	695a      	ldr	r2, [r3, #20]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0201 	bic.w	r2, r2, #1
 8005434:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005456:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2200      	movs	r2, #0
 800545c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005464:	68f8      	ldr	r0, [r7, #12]
 8005466:	f7ff feef 	bl	8005248 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800546a:	bf00      	nop
 800546c:	3710      	adds	r7, #16
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}

08005472 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005472:	b480      	push	{r7}
 8005474:	b085      	sub	sp, #20
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b21      	cmp	r3, #33	; 0x21
 8005484:	d144      	bne.n	8005510 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548e:	d11a      	bne.n	80054c6 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a1b      	ldr	r3, [r3, #32]
 8005494:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	881b      	ldrh	r3, [r3, #0]
 800549a:	461a      	mov	r2, r3
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054a4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	1c9a      	adds	r2, r3, #2
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	621a      	str	r2, [r3, #32]
 80054b8:	e00e      	b.n	80054d8 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6a1b      	ldr	r3, [r3, #32]
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	621a      	str	r2, [r3, #32]
 80054c4:	e008      	b.n	80054d8 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	6211      	str	r1, [r2, #32]
 80054d0:	781a      	ldrb	r2, [r3, #0]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054dc:	b29b      	uxth	r3, r3
 80054de:	3b01      	subs	r3, #1
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	4619      	mov	r1, r3
 80054e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10f      	bne.n	800550c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68da      	ldr	r2, [r3, #12]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800550a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800550c:	2300      	movs	r3, #0
 800550e:	e000      	b.n	8005512 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005510:	2302      	movs	r3, #2
  }
}
 8005512:	4618      	mov	r0, r3
 8005514:	3714      	adds	r7, #20
 8005516:	46bd      	mov	sp, r7
 8005518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551c:	4770      	bx	lr

0800551e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b082      	sub	sp, #8
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68da      	ldr	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005534:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2220      	movs	r2, #32
 800553a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7fb feb0 	bl	80012a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3708      	adds	r7, #8
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b22      	cmp	r3, #34	; 0x22
 8005560:	d171      	bne.n	8005646 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800556a:	d123      	bne.n	80055b4 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d10e      	bne.n	8005598 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	b29b      	uxth	r3, r3
 8005582:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005586:	b29a      	uxth	r2, r3
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005590:	1c9a      	adds	r2, r3, #2
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	629a      	str	r2, [r3, #40]	; 0x28
 8005596:	e029      	b.n	80055ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	b29b      	uxth	r3, r3
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	b29a      	uxth	r2, r3
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ac:	1c5a      	adds	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	629a      	str	r2, [r3, #40]	; 0x28
 80055b2:	e01b      	b.n	80055ec <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d10a      	bne.n	80055d2 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6858      	ldr	r0, [r3, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c6:	1c59      	adds	r1, r3, #1
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6291      	str	r1, [r2, #40]	; 0x28
 80055cc:	b2c2      	uxtb	r2, r0
 80055ce:	701a      	strb	r2, [r3, #0]
 80055d0:	e00c      	b.n	80055ec <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	b2da      	uxtb	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	1c58      	adds	r0, r3, #1
 80055e0:	6879      	ldr	r1, [r7, #4]
 80055e2:	6288      	str	r0, [r1, #40]	; 0x28
 80055e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055e8:	b2d2      	uxtb	r2, r2
 80055ea:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	3b01      	subs	r3, #1
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	4619      	mov	r1, r3
 80055fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d120      	bne.n	8005642 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68da      	ldr	r2, [r3, #12]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 0220 	bic.w	r2, r2, #32
 800560e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	68da      	ldr	r2, [r3, #12]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800561e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	695a      	ldr	r2, [r3, #20]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f7fb fe1f 	bl	800127c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800563e:	2300      	movs	r3, #0
 8005640:	e002      	b.n	8005648 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005642:	2300      	movs	r3, #0
 8005644:	e000      	b.n	8005648 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005646:	2302      	movs	r3, #2
  }
}
 8005648:	4618      	mov	r0, r3
 800564a:	3710      	adds	r7, #16
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}

08005650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	b085      	sub	sp, #20
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68da      	ldr	r2, [r3, #12]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	430a      	orrs	r2, r1
 800566e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	431a      	orrs	r2, r3
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	69db      	ldr	r3, [r3, #28]
 8005684:	4313      	orrs	r3, r2
 8005686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005692:	f023 030c 	bic.w	r3, r3, #12
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	6812      	ldr	r2, [r2, #0]
 800569a:	68f9      	ldr	r1, [r7, #12]
 800569c:	430b      	orrs	r3, r1
 800569e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	699a      	ldr	r2, [r3, #24]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	430a      	orrs	r2, r1
 80056b4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	69db      	ldr	r3, [r3, #28]
 80056ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056be:	f040 818b 	bne.w	80059d8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4ac1      	ldr	r2, [pc, #772]	; (80059cc <UART_SetConfig+0x37c>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d005      	beq.n	80056d8 <UART_SetConfig+0x88>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4abf      	ldr	r2, [pc, #764]	; (80059d0 <UART_SetConfig+0x380>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	f040 80bd 	bne.w	8005852 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056d8:	f7ff f83c 	bl	8004754 <HAL_RCC_GetPCLK2Freq>
 80056dc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	461d      	mov	r5, r3
 80056e2:	f04f 0600 	mov.w	r6, #0
 80056e6:	46a8      	mov	r8, r5
 80056e8:	46b1      	mov	r9, r6
 80056ea:	eb18 0308 	adds.w	r3, r8, r8
 80056ee:	eb49 0409 	adc.w	r4, r9, r9
 80056f2:	4698      	mov	r8, r3
 80056f4:	46a1      	mov	r9, r4
 80056f6:	eb18 0805 	adds.w	r8, r8, r5
 80056fa:	eb49 0906 	adc.w	r9, r9, r6
 80056fe:	f04f 0100 	mov.w	r1, #0
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800570a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800570e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005712:	4688      	mov	r8, r1
 8005714:	4691      	mov	r9, r2
 8005716:	eb18 0005 	adds.w	r0, r8, r5
 800571a:	eb49 0106 	adc.w	r1, r9, r6
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	461d      	mov	r5, r3
 8005724:	f04f 0600 	mov.w	r6, #0
 8005728:	196b      	adds	r3, r5, r5
 800572a:	eb46 0406 	adc.w	r4, r6, r6
 800572e:	461a      	mov	r2, r3
 8005730:	4623      	mov	r3, r4
 8005732:	f7fb f9fb 	bl	8000b2c <__aeabi_uldivmod>
 8005736:	4603      	mov	r3, r0
 8005738:	460c      	mov	r4, r1
 800573a:	461a      	mov	r2, r3
 800573c:	4ba5      	ldr	r3, [pc, #660]	; (80059d4 <UART_SetConfig+0x384>)
 800573e:	fba3 2302 	umull	r2, r3, r3, r2
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	461d      	mov	r5, r3
 800574c:	f04f 0600 	mov.w	r6, #0
 8005750:	46a9      	mov	r9, r5
 8005752:	46b2      	mov	sl, r6
 8005754:	eb19 0309 	adds.w	r3, r9, r9
 8005758:	eb4a 040a 	adc.w	r4, sl, sl
 800575c:	4699      	mov	r9, r3
 800575e:	46a2      	mov	sl, r4
 8005760:	eb19 0905 	adds.w	r9, r9, r5
 8005764:	eb4a 0a06 	adc.w	sl, sl, r6
 8005768:	f04f 0100 	mov.w	r1, #0
 800576c:	f04f 0200 	mov.w	r2, #0
 8005770:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005774:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005778:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800577c:	4689      	mov	r9, r1
 800577e:	4692      	mov	sl, r2
 8005780:	eb19 0005 	adds.w	r0, r9, r5
 8005784:	eb4a 0106 	adc.w	r1, sl, r6
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	461d      	mov	r5, r3
 800578e:	f04f 0600 	mov.w	r6, #0
 8005792:	196b      	adds	r3, r5, r5
 8005794:	eb46 0406 	adc.w	r4, r6, r6
 8005798:	461a      	mov	r2, r3
 800579a:	4623      	mov	r3, r4
 800579c:	f7fb f9c6 	bl	8000b2c <__aeabi_uldivmod>
 80057a0:	4603      	mov	r3, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	461a      	mov	r2, r3
 80057a6:	4b8b      	ldr	r3, [pc, #556]	; (80059d4 <UART_SetConfig+0x384>)
 80057a8:	fba3 1302 	umull	r1, r3, r3, r2
 80057ac:	095b      	lsrs	r3, r3, #5
 80057ae:	2164      	movs	r1, #100	; 0x64
 80057b0:	fb01 f303 	mul.w	r3, r1, r3
 80057b4:	1ad3      	subs	r3, r2, r3
 80057b6:	00db      	lsls	r3, r3, #3
 80057b8:	3332      	adds	r3, #50	; 0x32
 80057ba:	4a86      	ldr	r2, [pc, #536]	; (80059d4 <UART_SetConfig+0x384>)
 80057bc:	fba2 2303 	umull	r2, r3, r2, r3
 80057c0:	095b      	lsrs	r3, r3, #5
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057c8:	4498      	add	r8, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	461d      	mov	r5, r3
 80057ce:	f04f 0600 	mov.w	r6, #0
 80057d2:	46a9      	mov	r9, r5
 80057d4:	46b2      	mov	sl, r6
 80057d6:	eb19 0309 	adds.w	r3, r9, r9
 80057da:	eb4a 040a 	adc.w	r4, sl, sl
 80057de:	4699      	mov	r9, r3
 80057e0:	46a2      	mov	sl, r4
 80057e2:	eb19 0905 	adds.w	r9, r9, r5
 80057e6:	eb4a 0a06 	adc.w	sl, sl, r6
 80057ea:	f04f 0100 	mov.w	r1, #0
 80057ee:	f04f 0200 	mov.w	r2, #0
 80057f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80057fa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80057fe:	4689      	mov	r9, r1
 8005800:	4692      	mov	sl, r2
 8005802:	eb19 0005 	adds.w	r0, r9, r5
 8005806:	eb4a 0106 	adc.w	r1, sl, r6
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	461d      	mov	r5, r3
 8005810:	f04f 0600 	mov.w	r6, #0
 8005814:	196b      	adds	r3, r5, r5
 8005816:	eb46 0406 	adc.w	r4, r6, r6
 800581a:	461a      	mov	r2, r3
 800581c:	4623      	mov	r3, r4
 800581e:	f7fb f985 	bl	8000b2c <__aeabi_uldivmod>
 8005822:	4603      	mov	r3, r0
 8005824:	460c      	mov	r4, r1
 8005826:	461a      	mov	r2, r3
 8005828:	4b6a      	ldr	r3, [pc, #424]	; (80059d4 <UART_SetConfig+0x384>)
 800582a:	fba3 1302 	umull	r1, r3, r3, r2
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2164      	movs	r1, #100	; 0x64
 8005832:	fb01 f303 	mul.w	r3, r1, r3
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	00db      	lsls	r3, r3, #3
 800583a:	3332      	adds	r3, #50	; 0x32
 800583c:	4a65      	ldr	r2, [pc, #404]	; (80059d4 <UART_SetConfig+0x384>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 0207 	and.w	r2, r3, #7
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4442      	add	r2, r8
 800584e:	609a      	str	r2, [r3, #8]
 8005850:	e26f      	b.n	8005d32 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005852:	f7fe ff6b 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 8005856:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	461d      	mov	r5, r3
 800585c:	f04f 0600 	mov.w	r6, #0
 8005860:	46a8      	mov	r8, r5
 8005862:	46b1      	mov	r9, r6
 8005864:	eb18 0308 	adds.w	r3, r8, r8
 8005868:	eb49 0409 	adc.w	r4, r9, r9
 800586c:	4698      	mov	r8, r3
 800586e:	46a1      	mov	r9, r4
 8005870:	eb18 0805 	adds.w	r8, r8, r5
 8005874:	eb49 0906 	adc.w	r9, r9, r6
 8005878:	f04f 0100 	mov.w	r1, #0
 800587c:	f04f 0200 	mov.w	r2, #0
 8005880:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005884:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005888:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800588c:	4688      	mov	r8, r1
 800588e:	4691      	mov	r9, r2
 8005890:	eb18 0005 	adds.w	r0, r8, r5
 8005894:	eb49 0106 	adc.w	r1, r9, r6
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	461d      	mov	r5, r3
 800589e:	f04f 0600 	mov.w	r6, #0
 80058a2:	196b      	adds	r3, r5, r5
 80058a4:	eb46 0406 	adc.w	r4, r6, r6
 80058a8:	461a      	mov	r2, r3
 80058aa:	4623      	mov	r3, r4
 80058ac:	f7fb f93e 	bl	8000b2c <__aeabi_uldivmod>
 80058b0:	4603      	mov	r3, r0
 80058b2:	460c      	mov	r4, r1
 80058b4:	461a      	mov	r2, r3
 80058b6:	4b47      	ldr	r3, [pc, #284]	; (80059d4 <UART_SetConfig+0x384>)
 80058b8:	fba3 2302 	umull	r2, r3, r3, r2
 80058bc:	095b      	lsrs	r3, r3, #5
 80058be:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	461d      	mov	r5, r3
 80058c6:	f04f 0600 	mov.w	r6, #0
 80058ca:	46a9      	mov	r9, r5
 80058cc:	46b2      	mov	sl, r6
 80058ce:	eb19 0309 	adds.w	r3, r9, r9
 80058d2:	eb4a 040a 	adc.w	r4, sl, sl
 80058d6:	4699      	mov	r9, r3
 80058d8:	46a2      	mov	sl, r4
 80058da:	eb19 0905 	adds.w	r9, r9, r5
 80058de:	eb4a 0a06 	adc.w	sl, sl, r6
 80058e2:	f04f 0100 	mov.w	r1, #0
 80058e6:	f04f 0200 	mov.w	r2, #0
 80058ea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058ee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058f2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058f6:	4689      	mov	r9, r1
 80058f8:	4692      	mov	sl, r2
 80058fa:	eb19 0005 	adds.w	r0, r9, r5
 80058fe:	eb4a 0106 	adc.w	r1, sl, r6
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	461d      	mov	r5, r3
 8005908:	f04f 0600 	mov.w	r6, #0
 800590c:	196b      	adds	r3, r5, r5
 800590e:	eb46 0406 	adc.w	r4, r6, r6
 8005912:	461a      	mov	r2, r3
 8005914:	4623      	mov	r3, r4
 8005916:	f7fb f909 	bl	8000b2c <__aeabi_uldivmod>
 800591a:	4603      	mov	r3, r0
 800591c:	460c      	mov	r4, r1
 800591e:	461a      	mov	r2, r3
 8005920:	4b2c      	ldr	r3, [pc, #176]	; (80059d4 <UART_SetConfig+0x384>)
 8005922:	fba3 1302 	umull	r1, r3, r3, r2
 8005926:	095b      	lsrs	r3, r3, #5
 8005928:	2164      	movs	r1, #100	; 0x64
 800592a:	fb01 f303 	mul.w	r3, r1, r3
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	00db      	lsls	r3, r3, #3
 8005932:	3332      	adds	r3, #50	; 0x32
 8005934:	4a27      	ldr	r2, [pc, #156]	; (80059d4 <UART_SetConfig+0x384>)
 8005936:	fba2 2303 	umull	r2, r3, r2, r3
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005942:	4498      	add	r8, r3
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	461d      	mov	r5, r3
 8005948:	f04f 0600 	mov.w	r6, #0
 800594c:	46a9      	mov	r9, r5
 800594e:	46b2      	mov	sl, r6
 8005950:	eb19 0309 	adds.w	r3, r9, r9
 8005954:	eb4a 040a 	adc.w	r4, sl, sl
 8005958:	4699      	mov	r9, r3
 800595a:	46a2      	mov	sl, r4
 800595c:	eb19 0905 	adds.w	r9, r9, r5
 8005960:	eb4a 0a06 	adc.w	sl, sl, r6
 8005964:	f04f 0100 	mov.w	r1, #0
 8005968:	f04f 0200 	mov.w	r2, #0
 800596c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005970:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005974:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005978:	4689      	mov	r9, r1
 800597a:	4692      	mov	sl, r2
 800597c:	eb19 0005 	adds.w	r0, r9, r5
 8005980:	eb4a 0106 	adc.w	r1, sl, r6
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	461d      	mov	r5, r3
 800598a:	f04f 0600 	mov.w	r6, #0
 800598e:	196b      	adds	r3, r5, r5
 8005990:	eb46 0406 	adc.w	r4, r6, r6
 8005994:	461a      	mov	r2, r3
 8005996:	4623      	mov	r3, r4
 8005998:	f7fb f8c8 	bl	8000b2c <__aeabi_uldivmod>
 800599c:	4603      	mov	r3, r0
 800599e:	460c      	mov	r4, r1
 80059a0:	461a      	mov	r2, r3
 80059a2:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <UART_SetConfig+0x384>)
 80059a4:	fba3 1302 	umull	r1, r3, r3, r2
 80059a8:	095b      	lsrs	r3, r3, #5
 80059aa:	2164      	movs	r1, #100	; 0x64
 80059ac:	fb01 f303 	mul.w	r3, r1, r3
 80059b0:	1ad3      	subs	r3, r2, r3
 80059b2:	00db      	lsls	r3, r3, #3
 80059b4:	3332      	adds	r3, #50	; 0x32
 80059b6:	4a07      	ldr	r2, [pc, #28]	; (80059d4 <UART_SetConfig+0x384>)
 80059b8:	fba2 2303 	umull	r2, r3, r2, r3
 80059bc:	095b      	lsrs	r3, r3, #5
 80059be:	f003 0207 	and.w	r2, r3, #7
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4442      	add	r2, r8
 80059c8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80059ca:	e1b2      	b.n	8005d32 <UART_SetConfig+0x6e2>
 80059cc:	40011000 	.word	0x40011000
 80059d0:	40011400 	.word	0x40011400
 80059d4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	4ad7      	ldr	r2, [pc, #860]	; (8005d3c <UART_SetConfig+0x6ec>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d005      	beq.n	80059ee <UART_SetConfig+0x39e>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	4ad6      	ldr	r2, [pc, #856]	; (8005d40 <UART_SetConfig+0x6f0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	f040 80d1 	bne.w	8005b90 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80059ee:	f7fe feb1 	bl	8004754 <HAL_RCC_GetPCLK2Freq>
 80059f2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	469a      	mov	sl, r3
 80059f8:	f04f 0b00 	mov.w	fp, #0
 80059fc:	46d0      	mov	r8, sl
 80059fe:	46d9      	mov	r9, fp
 8005a00:	eb18 0308 	adds.w	r3, r8, r8
 8005a04:	eb49 0409 	adc.w	r4, r9, r9
 8005a08:	4698      	mov	r8, r3
 8005a0a:	46a1      	mov	r9, r4
 8005a0c:	eb18 080a 	adds.w	r8, r8, sl
 8005a10:	eb49 090b 	adc.w	r9, r9, fp
 8005a14:	f04f 0100 	mov.w	r1, #0
 8005a18:	f04f 0200 	mov.w	r2, #0
 8005a1c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005a20:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005a24:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005a28:	4688      	mov	r8, r1
 8005a2a:	4691      	mov	r9, r2
 8005a2c:	eb1a 0508 	adds.w	r5, sl, r8
 8005a30:	eb4b 0609 	adc.w	r6, fp, r9
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	4619      	mov	r1, r3
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	f04f 0400 	mov.w	r4, #0
 8005a46:	0094      	lsls	r4, r2, #2
 8005a48:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a4c:	008b      	lsls	r3, r1, #2
 8005a4e:	461a      	mov	r2, r3
 8005a50:	4623      	mov	r3, r4
 8005a52:	4628      	mov	r0, r5
 8005a54:	4631      	mov	r1, r6
 8005a56:	f7fb f869 	bl	8000b2c <__aeabi_uldivmod>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	461a      	mov	r2, r3
 8005a60:	4bb8      	ldr	r3, [pc, #736]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005a62:	fba3 2302 	umull	r2, r3, r3, r2
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	469b      	mov	fp, r3
 8005a70:	f04f 0c00 	mov.w	ip, #0
 8005a74:	46d9      	mov	r9, fp
 8005a76:	46e2      	mov	sl, ip
 8005a78:	eb19 0309 	adds.w	r3, r9, r9
 8005a7c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a80:	4699      	mov	r9, r3
 8005a82:	46a2      	mov	sl, r4
 8005a84:	eb19 090b 	adds.w	r9, r9, fp
 8005a88:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a8c:	f04f 0100 	mov.w	r1, #0
 8005a90:	f04f 0200 	mov.w	r2, #0
 8005a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005aa0:	4689      	mov	r9, r1
 8005aa2:	4692      	mov	sl, r2
 8005aa4:	eb1b 0509 	adds.w	r5, fp, r9
 8005aa8:	eb4c 060a 	adc.w	r6, ip, sl
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	f04f 0200 	mov.w	r2, #0
 8005ab6:	f04f 0300 	mov.w	r3, #0
 8005aba:	f04f 0400 	mov.w	r4, #0
 8005abe:	0094      	lsls	r4, r2, #2
 8005ac0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005ac4:	008b      	lsls	r3, r1, #2
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	4623      	mov	r3, r4
 8005aca:	4628      	mov	r0, r5
 8005acc:	4631      	mov	r1, r6
 8005ace:	f7fb f82d 	bl	8000b2c <__aeabi_uldivmod>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	460c      	mov	r4, r1
 8005ad6:	461a      	mov	r2, r3
 8005ad8:	4b9a      	ldr	r3, [pc, #616]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005ada:	fba3 1302 	umull	r1, r3, r3, r2
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	2164      	movs	r1, #100	; 0x64
 8005ae2:	fb01 f303 	mul.w	r3, r1, r3
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	3332      	adds	r3, #50	; 0x32
 8005aec:	4a95      	ldr	r2, [pc, #596]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af8:	4498      	add	r8, r3
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	469b      	mov	fp, r3
 8005afe:	f04f 0c00 	mov.w	ip, #0
 8005b02:	46d9      	mov	r9, fp
 8005b04:	46e2      	mov	sl, ip
 8005b06:	eb19 0309 	adds.w	r3, r9, r9
 8005b0a:	eb4a 040a 	adc.w	r4, sl, sl
 8005b0e:	4699      	mov	r9, r3
 8005b10:	46a2      	mov	sl, r4
 8005b12:	eb19 090b 	adds.w	r9, r9, fp
 8005b16:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005b1a:	f04f 0100 	mov.w	r1, #0
 8005b1e:	f04f 0200 	mov.w	r2, #0
 8005b22:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b26:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005b2a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005b2e:	4689      	mov	r9, r1
 8005b30:	4692      	mov	sl, r2
 8005b32:	eb1b 0509 	adds.w	r5, fp, r9
 8005b36:	eb4c 060a 	adc.w	r6, ip, sl
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f04f 0200 	mov.w	r2, #0
 8005b44:	f04f 0300 	mov.w	r3, #0
 8005b48:	f04f 0400 	mov.w	r4, #0
 8005b4c:	0094      	lsls	r4, r2, #2
 8005b4e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005b52:	008b      	lsls	r3, r1, #2
 8005b54:	461a      	mov	r2, r3
 8005b56:	4623      	mov	r3, r4
 8005b58:	4628      	mov	r0, r5
 8005b5a:	4631      	mov	r1, r6
 8005b5c:	f7fa ffe6 	bl	8000b2c <__aeabi_uldivmod>
 8005b60:	4603      	mov	r3, r0
 8005b62:	460c      	mov	r4, r1
 8005b64:	461a      	mov	r2, r3
 8005b66:	4b77      	ldr	r3, [pc, #476]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005b68:	fba3 1302 	umull	r1, r3, r3, r2
 8005b6c:	095b      	lsrs	r3, r3, #5
 8005b6e:	2164      	movs	r1, #100	; 0x64
 8005b70:	fb01 f303 	mul.w	r3, r1, r3
 8005b74:	1ad3      	subs	r3, r2, r3
 8005b76:	011b      	lsls	r3, r3, #4
 8005b78:	3332      	adds	r3, #50	; 0x32
 8005b7a:	4a72      	ldr	r2, [pc, #456]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b80:	095b      	lsrs	r3, r3, #5
 8005b82:	f003 020f 	and.w	r2, r3, #15
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4442      	add	r2, r8
 8005b8c:	609a      	str	r2, [r3, #8]
 8005b8e:	e0d0      	b.n	8005d32 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b90:	f7fe fdcc 	bl	800472c <HAL_RCC_GetPCLK1Freq>
 8005b94:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	469a      	mov	sl, r3
 8005b9a:	f04f 0b00 	mov.w	fp, #0
 8005b9e:	46d0      	mov	r8, sl
 8005ba0:	46d9      	mov	r9, fp
 8005ba2:	eb18 0308 	adds.w	r3, r8, r8
 8005ba6:	eb49 0409 	adc.w	r4, r9, r9
 8005baa:	4698      	mov	r8, r3
 8005bac:	46a1      	mov	r9, r4
 8005bae:	eb18 080a 	adds.w	r8, r8, sl
 8005bb2:	eb49 090b 	adc.w	r9, r9, fp
 8005bb6:	f04f 0100 	mov.w	r1, #0
 8005bba:	f04f 0200 	mov.w	r2, #0
 8005bbe:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005bc2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bc6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bca:	4688      	mov	r8, r1
 8005bcc:	4691      	mov	r9, r2
 8005bce:	eb1a 0508 	adds.w	r5, sl, r8
 8005bd2:	eb4b 0609 	adc.w	r6, fp, r9
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	f04f 0400 	mov.w	r4, #0
 8005be8:	0094      	lsls	r4, r2, #2
 8005bea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005bee:	008b      	lsls	r3, r1, #2
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	4623      	mov	r3, r4
 8005bf4:	4628      	mov	r0, r5
 8005bf6:	4631      	mov	r1, r6
 8005bf8:	f7fa ff98 	bl	8000b2c <__aeabi_uldivmod>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	460c      	mov	r4, r1
 8005c00:	461a      	mov	r2, r3
 8005c02:	4b50      	ldr	r3, [pc, #320]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005c04:	fba3 2302 	umull	r2, r3, r3, r2
 8005c08:	095b      	lsrs	r3, r3, #5
 8005c0a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	469b      	mov	fp, r3
 8005c12:	f04f 0c00 	mov.w	ip, #0
 8005c16:	46d9      	mov	r9, fp
 8005c18:	46e2      	mov	sl, ip
 8005c1a:	eb19 0309 	adds.w	r3, r9, r9
 8005c1e:	eb4a 040a 	adc.w	r4, sl, sl
 8005c22:	4699      	mov	r9, r3
 8005c24:	46a2      	mov	sl, r4
 8005c26:	eb19 090b 	adds.w	r9, r9, fp
 8005c2a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c3a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c3e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c42:	4689      	mov	r9, r1
 8005c44:	4692      	mov	sl, r2
 8005c46:	eb1b 0509 	adds.w	r5, fp, r9
 8005c4a:	eb4c 060a 	adc.w	r6, ip, sl
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	4619      	mov	r1, r3
 8005c54:	f04f 0200 	mov.w	r2, #0
 8005c58:	f04f 0300 	mov.w	r3, #0
 8005c5c:	f04f 0400 	mov.w	r4, #0
 8005c60:	0094      	lsls	r4, r2, #2
 8005c62:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005c66:	008b      	lsls	r3, r1, #2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	4631      	mov	r1, r6
 8005c70:	f7fa ff5c 	bl	8000b2c <__aeabi_uldivmod>
 8005c74:	4603      	mov	r3, r0
 8005c76:	460c      	mov	r4, r1
 8005c78:	461a      	mov	r2, r3
 8005c7a:	4b32      	ldr	r3, [pc, #200]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8005c80:	095b      	lsrs	r3, r3, #5
 8005c82:	2164      	movs	r1, #100	; 0x64
 8005c84:	fb01 f303 	mul.w	r3, r1, r3
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	3332      	adds	r3, #50	; 0x32
 8005c8e:	4a2d      	ldr	r2, [pc, #180]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005c90:	fba2 2303 	umull	r2, r3, r2, r3
 8005c94:	095b      	lsrs	r3, r3, #5
 8005c96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c9a:	4498      	add	r8, r3
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	469b      	mov	fp, r3
 8005ca0:	f04f 0c00 	mov.w	ip, #0
 8005ca4:	46d9      	mov	r9, fp
 8005ca6:	46e2      	mov	sl, ip
 8005ca8:	eb19 0309 	adds.w	r3, r9, r9
 8005cac:	eb4a 040a 	adc.w	r4, sl, sl
 8005cb0:	4699      	mov	r9, r3
 8005cb2:	46a2      	mov	sl, r4
 8005cb4:	eb19 090b 	adds.w	r9, r9, fp
 8005cb8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005cbc:	f04f 0100 	mov.w	r1, #0
 8005cc0:	f04f 0200 	mov.w	r2, #0
 8005cc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cc8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005ccc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cd0:	4689      	mov	r9, r1
 8005cd2:	4692      	mov	sl, r2
 8005cd4:	eb1b 0509 	adds.w	r5, fp, r9
 8005cd8:	eb4c 060a 	adc.w	r6, ip, sl
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f04f 0200 	mov.w	r2, #0
 8005ce6:	f04f 0300 	mov.w	r3, #0
 8005cea:	f04f 0400 	mov.w	r4, #0
 8005cee:	0094      	lsls	r4, r2, #2
 8005cf0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005cf4:	008b      	lsls	r3, r1, #2
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	4628      	mov	r0, r5
 8005cfc:	4631      	mov	r1, r6
 8005cfe:	f7fa ff15 	bl	8000b2c <__aeabi_uldivmod>
 8005d02:	4603      	mov	r3, r0
 8005d04:	460c      	mov	r4, r1
 8005d06:	461a      	mov	r2, r3
 8005d08:	4b0e      	ldr	r3, [pc, #56]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005d0a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0e:	095b      	lsrs	r3, r3, #5
 8005d10:	2164      	movs	r1, #100	; 0x64
 8005d12:	fb01 f303 	mul.w	r3, r1, r3
 8005d16:	1ad3      	subs	r3, r2, r3
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	3332      	adds	r3, #50	; 0x32
 8005d1c:	4a09      	ldr	r2, [pc, #36]	; (8005d44 <UART_SetConfig+0x6f4>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	f003 020f 	and.w	r2, r3, #15
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4442      	add	r2, r8
 8005d2e:	609a      	str	r2, [r3, #8]
}
 8005d30:	e7ff      	b.n	8005d32 <UART_SetConfig+0x6e2>
 8005d32:	bf00      	nop
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d3c:	40011000 	.word	0x40011000
 8005d40:	40011400 	.word	0x40011400
 8005d44:	51eb851f 	.word	0x51eb851f

08005d48 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d48:	b084      	sub	sp, #16
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
 8005d52:	f107 001c 	add.w	r0, r7, #28
 8005d56:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d122      	bne.n	8005da6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	68db      	ldr	r3, [r3, #12]
 8005d70:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d78:	687a      	ldr	r2, [r7, #4]
 8005d7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d105      	bne.n	8005d9a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fac6 	bl	800732c <USB_CoreReset>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]
 8005da4:	e01a      	b.n	8005ddc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f001 faba 	bl	800732c <USB_CoreReset>
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dc6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	639a      	str	r2, [r3, #56]	; 0x38
 8005dce:	e005      	b.n	8005ddc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d10b      	bne.n	8005dfa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	689b      	ldr	r3, [r3, #8]
 8005de6:	f043 0206 	orr.w	r2, r3, #6
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	689b      	ldr	r3, [r3, #8]
 8005df2:	f043 0220 	orr.w	r2, r3, #32
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005dfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3710      	adds	r7, #16
 8005e00:	46bd      	mov	sp, r7
 8005e02:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e06:	b004      	add	sp, #16
 8005e08:	4770      	bx	lr
	...

08005e0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	4613      	mov	r3, r2
 8005e18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e1a:	79fb      	ldrb	r3, [r7, #7]
 8005e1c:	2b02      	cmp	r3, #2
 8005e1e:	d165      	bne.n	8005eec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	4a41      	ldr	r2, [pc, #260]	; (8005f28 <USB_SetTurnaroundTime+0x11c>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d906      	bls.n	8005e36 <USB_SetTurnaroundTime+0x2a>
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4a40      	ldr	r2, [pc, #256]	; (8005f2c <USB_SetTurnaroundTime+0x120>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d802      	bhi.n	8005e36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e30:	230f      	movs	r3, #15
 8005e32:	617b      	str	r3, [r7, #20]
 8005e34:	e062      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	4a3c      	ldr	r2, [pc, #240]	; (8005f2c <USB_SetTurnaroundTime+0x120>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d906      	bls.n	8005e4c <USB_SetTurnaroundTime+0x40>
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	4a3b      	ldr	r2, [pc, #236]	; (8005f30 <USB_SetTurnaroundTime+0x124>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d802      	bhi.n	8005e4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e46:	230e      	movs	r3, #14
 8005e48:	617b      	str	r3, [r7, #20]
 8005e4a:	e057      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4a38      	ldr	r2, [pc, #224]	; (8005f30 <USB_SetTurnaroundTime+0x124>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d906      	bls.n	8005e62 <USB_SetTurnaroundTime+0x56>
 8005e54:	68bb      	ldr	r3, [r7, #8]
 8005e56:	4a37      	ldr	r2, [pc, #220]	; (8005f34 <USB_SetTurnaroundTime+0x128>)
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d802      	bhi.n	8005e62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e5c:	230d      	movs	r3, #13
 8005e5e:	617b      	str	r3, [r7, #20]
 8005e60:	e04c      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	4a33      	ldr	r2, [pc, #204]	; (8005f34 <USB_SetTurnaroundTime+0x128>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d906      	bls.n	8005e78 <USB_SetTurnaroundTime+0x6c>
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	4a32      	ldr	r2, [pc, #200]	; (8005f38 <USB_SetTurnaroundTime+0x12c>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d802      	bhi.n	8005e78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e72:	230c      	movs	r3, #12
 8005e74:	617b      	str	r3, [r7, #20]
 8005e76:	e041      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	4a2f      	ldr	r2, [pc, #188]	; (8005f38 <USB_SetTurnaroundTime+0x12c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d906      	bls.n	8005e8e <USB_SetTurnaroundTime+0x82>
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	4a2e      	ldr	r2, [pc, #184]	; (8005f3c <USB_SetTurnaroundTime+0x130>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d802      	bhi.n	8005e8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e88:	230b      	movs	r3, #11
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	e036      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	4a2a      	ldr	r2, [pc, #168]	; (8005f3c <USB_SetTurnaroundTime+0x130>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d906      	bls.n	8005ea4 <USB_SetTurnaroundTime+0x98>
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	4a29      	ldr	r2, [pc, #164]	; (8005f40 <USB_SetTurnaroundTime+0x134>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d802      	bhi.n	8005ea4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e9e:	230a      	movs	r3, #10
 8005ea0:	617b      	str	r3, [r7, #20]
 8005ea2:	e02b      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4a26      	ldr	r2, [pc, #152]	; (8005f40 <USB_SetTurnaroundTime+0x134>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d906      	bls.n	8005eba <USB_SetTurnaroundTime+0xae>
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	4a25      	ldr	r2, [pc, #148]	; (8005f44 <USB_SetTurnaroundTime+0x138>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d802      	bhi.n	8005eba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005eb4:	2309      	movs	r3, #9
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e020      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	4a21      	ldr	r2, [pc, #132]	; (8005f44 <USB_SetTurnaroundTime+0x138>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d906      	bls.n	8005ed0 <USB_SetTurnaroundTime+0xc4>
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4a20      	ldr	r2, [pc, #128]	; (8005f48 <USB_SetTurnaroundTime+0x13c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d802      	bhi.n	8005ed0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005eca:	2308      	movs	r3, #8
 8005ecc:	617b      	str	r3, [r7, #20]
 8005ece:	e015      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	4a1d      	ldr	r2, [pc, #116]	; (8005f48 <USB_SetTurnaroundTime+0x13c>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d906      	bls.n	8005ee6 <USB_SetTurnaroundTime+0xda>
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4a1c      	ldr	r2, [pc, #112]	; (8005f4c <USB_SetTurnaroundTime+0x140>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d802      	bhi.n	8005ee6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ee0:	2307      	movs	r3, #7
 8005ee2:	617b      	str	r3, [r7, #20]
 8005ee4:	e00a      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ee6:	2306      	movs	r3, #6
 8005ee8:	617b      	str	r3, [r7, #20]
 8005eea:	e007      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005ef2:	2309      	movs	r3, #9
 8005ef4:	617b      	str	r3, [r7, #20]
 8005ef6:	e001      	b.n	8005efc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ef8:	2309      	movs	r3, #9
 8005efa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	697b      	ldr	r3, [r7, #20]
 8005f0e:	029b      	lsls	r3, r3, #10
 8005f10:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005f14:	431a      	orrs	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f1a:	2300      	movs	r3, #0
}
 8005f1c:	4618      	mov	r0, r3
 8005f1e:	371c      	adds	r7, #28
 8005f20:	46bd      	mov	sp, r7
 8005f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f26:	4770      	bx	lr
 8005f28:	00d8acbf 	.word	0x00d8acbf
 8005f2c:	00e4e1bf 	.word	0x00e4e1bf
 8005f30:	00f423ff 	.word	0x00f423ff
 8005f34:	0106737f 	.word	0x0106737f
 8005f38:	011a499f 	.word	0x011a499f
 8005f3c:	01312cff 	.word	0x01312cff
 8005f40:	014ca43f 	.word	0x014ca43f
 8005f44:	016e35ff 	.word	0x016e35ff
 8005f48:	01a6ab1f 	.word	0x01a6ab1f
 8005f4c:	01e847ff 	.word	0x01e847ff

08005f50 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	f043 0201 	orr.w	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f72:	b480      	push	{r7}
 8005f74:	b083      	sub	sp, #12
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f023 0201 	bic.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f86:	2300      	movs	r3, #0
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	460b      	mov	r3, r1
 8005f9e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	68db      	ldr	r3, [r3, #12]
 8005fa4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d106      	bne.n	8005fc0 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	60da      	str	r2, [r3, #12]
 8005fbe:	e00b      	b.n	8005fd8 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fc0:	78fb      	ldrb	r3, [r7, #3]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d106      	bne.n	8005fd4 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	60da      	str	r2, [r3, #12]
 8005fd2:	e001      	b.n	8005fd8 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e003      	b.n	8005fe0 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fd8:	2032      	movs	r0, #50	; 0x32
 8005fda:	f7fb fd45 	bl	8001a68 <HAL_Delay>

  return HAL_OK;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fe8:	b084      	sub	sp, #16
 8005fea:	b580      	push	{r7, lr}
 8005fec:	b086      	sub	sp, #24
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006002:	2300      	movs	r3, #0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	e009      	b.n	800601c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	3340      	adds	r3, #64	; 0x40
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	4413      	add	r3, r2
 8006012:	2200      	movs	r2, #0
 8006014:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006016:	693b      	ldr	r3, [r7, #16]
 8006018:	3301      	adds	r3, #1
 800601a:	613b      	str	r3, [r7, #16]
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b0e      	cmp	r3, #14
 8006020:	d9f2      	bls.n	8006008 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006024:	2b00      	cmp	r3, #0
 8006026:	d11c      	bne.n	8006062 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	68fa      	ldr	r2, [r7, #12]
 8006032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006036:	f043 0302 	orr.w	r3, r3, #2
 800603a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800604c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	639a      	str	r2, [r3, #56]	; 0x38
 8006060:	e00b      	b.n	800607a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006066:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006072:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006080:	461a      	mov	r2, r3
 8006082:	2300      	movs	r3, #0
 8006084:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800608c:	4619      	mov	r1, r3
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006094:	461a      	mov	r2, r3
 8006096:	680b      	ldr	r3, [r1, #0]
 8006098:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800609a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800609c:	2b01      	cmp	r3, #1
 800609e:	d10c      	bne.n	80060ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80060a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d104      	bne.n	80060b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80060a6:	2100      	movs	r1, #0
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f949 	bl	8006340 <USB_SetDevSpeed>
 80060ae:	e008      	b.n	80060c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80060b0:	2101      	movs	r1, #1
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f000 f944 	bl	8006340 <USB_SetDevSpeed>
 80060b8:	e003      	b.n	80060c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80060ba:	2103      	movs	r1, #3
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f93f 	bl	8006340 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80060c2:	2110      	movs	r1, #16
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 f8f3 	bl	80062b0 <USB_FlushTxFifo>
 80060ca:	4603      	mov	r3, r0
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d001      	beq.n	80060d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80060d0:	2301      	movs	r3, #1
 80060d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 f911 	bl	80062fc <USB_FlushRxFifo>
 80060da:	4603      	mov	r3, r0
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ea:	461a      	mov	r2, r3
 80060ec:	2300      	movs	r3, #0
 80060ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060f6:	461a      	mov	r2, r3
 80060f8:	2300      	movs	r3, #0
 80060fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006102:	461a      	mov	r2, r3
 8006104:	2300      	movs	r3, #0
 8006106:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006108:	2300      	movs	r3, #0
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	e043      	b.n	8006196 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006124:	d118      	bne.n	8006158 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10a      	bne.n	8006142 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	461a      	mov	r2, r3
 800613a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	e013      	b.n	800616a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	015a      	lsls	r2, r3, #5
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	4413      	add	r3, r2
 800614a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614e:	461a      	mov	r2, r3
 8006150:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006154:	6013      	str	r3, [r2, #0]
 8006156:	e008      	b.n	800616a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006164:	461a      	mov	r2, r3
 8006166:	2300      	movs	r3, #0
 8006168:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	015a      	lsls	r2, r3, #5
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	4413      	add	r3, r2
 8006172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006176:	461a      	mov	r2, r3
 8006178:	2300      	movs	r3, #0
 800617a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	015a      	lsls	r2, r3, #5
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006188:	461a      	mov	r2, r3
 800618a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800618e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	3301      	adds	r3, #1
 8006194:	613b      	str	r3, [r7, #16]
 8006196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	429a      	cmp	r2, r3
 800619c:	d3b7      	bcc.n	800610e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e043      	b.n	800622c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061a4:	693b      	ldr	r3, [r7, #16]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061ba:	d118      	bne.n	80061ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d10a      	bne.n	80061d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	461a      	mov	r2, r3
 80061d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	e013      	b.n	8006200 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	015a      	lsls	r2, r3, #5
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	4413      	add	r3, r2
 80061e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e4:	461a      	mov	r2, r3
 80061e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061ea:	6013      	str	r3, [r2, #0]
 80061ec:	e008      	b.n	8006200 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	015a      	lsls	r2, r3, #5
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	4413      	add	r3, r2
 80061f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061fa:	461a      	mov	r2, r3
 80061fc:	2300      	movs	r3, #0
 80061fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800620c:	461a      	mov	r2, r3
 800620e:	2300      	movs	r3, #0
 8006210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800621e:	461a      	mov	r2, r3
 8006220:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006224:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	3301      	adds	r3, #1
 800622a:	613b      	str	r3, [r7, #16]
 800622c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800622e:	693a      	ldr	r2, [r7, #16]
 8006230:	429a      	cmp	r2, r3
 8006232:	d3b7      	bcc.n	80061a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	691b      	ldr	r3, [r3, #16]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006246:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006254:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	2b00      	cmp	r3, #0
 800625a:	d105      	bne.n	8006268 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	699b      	ldr	r3, [r3, #24]
 8006260:	f043 0210 	orr.w	r2, r3, #16
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	699a      	ldr	r2, [r3, #24]
 800626c:	4b0f      	ldr	r3, [pc, #60]	; (80062ac <USB_DevInit+0x2c4>)
 800626e:	4313      	orrs	r3, r2
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006276:	2b00      	cmp	r3, #0
 8006278:	d005      	beq.n	8006286 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f043 0208 	orr.w	r2, r3, #8
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006288:	2b01      	cmp	r3, #1
 800628a:	d107      	bne.n	800629c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	699b      	ldr	r3, [r3, #24]
 8006290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006294:	f043 0304 	orr.w	r3, r3, #4
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800629c:	7dfb      	ldrb	r3, [r7, #23]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a8:	b004      	add	sp, #16
 80062aa:	4770      	bx	lr
 80062ac:	803c3800 	.word	0x803c3800

080062b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80062ba:	2300      	movs	r3, #0
 80062bc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	019b      	lsls	r3, r3, #6
 80062c2:	f043 0220 	orr.w	r2, r3, #32
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	3301      	adds	r3, #1
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	4a09      	ldr	r2, [pc, #36]	; (80062f8 <USB_FlushTxFifo+0x48>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d901      	bls.n	80062dc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e006      	b.n	80062ea <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d0f0      	beq.n	80062ca <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3714      	adds	r7, #20
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	00030d40 	.word	0x00030d40

080062fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80062fc:	b480      	push	{r7}
 80062fe:	b085      	sub	sp, #20
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006304:	2300      	movs	r3, #0
 8006306:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2210      	movs	r2, #16
 800630c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	3301      	adds	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	4a09      	ldr	r2, [pc, #36]	; (800633c <USB_FlushRxFifo+0x40>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d901      	bls.n	8006320 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800631c:	2303      	movs	r3, #3
 800631e:	e006      	b.n	800632e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	f003 0310 	and.w	r3, r3, #16
 8006328:	2b10      	cmp	r3, #16
 800632a:	d0f0      	beq.n	800630e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	00030d40 	.word	0x00030d40

08006340 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006340:	b480      	push	{r7}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	460b      	mov	r3, r1
 800634a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	78fb      	ldrb	r3, [r7, #3]
 800635a:	68f9      	ldr	r1, [r7, #12]
 800635c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006360:	4313      	orrs	r3, r2
 8006362:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006364:	2300      	movs	r3, #0
}
 8006366:	4618      	mov	r0, r3
 8006368:	3714      	adds	r7, #20
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr

08006372 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006372:	b480      	push	{r7}
 8006374:	b087      	sub	sp, #28
 8006376:	af00      	add	r7, sp, #0
 8006378:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	f003 0306 	and.w	r3, r3, #6
 800638a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d102      	bne.n	8006398 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006392:	2300      	movs	r3, #0
 8006394:	75fb      	strb	r3, [r7, #23]
 8006396:	e00a      	b.n	80063ae <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2b02      	cmp	r3, #2
 800639c:	d002      	beq.n	80063a4 <USB_GetDevSpeed+0x32>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b06      	cmp	r3, #6
 80063a2:	d102      	bne.n	80063aa <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063a4:	2302      	movs	r3, #2
 80063a6:	75fb      	strb	r3, [r7, #23]
 80063a8:	e001      	b.n	80063ae <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063aa:	230f      	movs	r3, #15
 80063ac:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	371c      	adds	r7, #28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	785b      	ldrb	r3, [r3, #1]
 80063d4:	2b01      	cmp	r3, #1
 80063d6:	d13a      	bne.n	800644e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063de:	69da      	ldr	r2, [r3, #28]
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	f003 030f 	and.w	r3, r3, #15
 80063e8:	2101      	movs	r1, #1
 80063ea:	fa01 f303 	lsl.w	r3, r1, r3
 80063ee:	b29b      	uxth	r3, r3
 80063f0:	68f9      	ldr	r1, [r7, #12]
 80063f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063f6:	4313      	orrs	r3, r2
 80063f8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800640c:	2b00      	cmp	r3, #0
 800640e:	d155      	bne.n	80064bc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	015a      	lsls	r2, r3, #5
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	4413      	add	r3, r2
 8006418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	78db      	ldrb	r3, [r3, #3]
 800642a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800642c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	059b      	lsls	r3, r3, #22
 8006432:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006434:	4313      	orrs	r3, r2
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	0151      	lsls	r1, r2, #5
 800643a:	68fa      	ldr	r2, [r7, #12]
 800643c:	440a      	add	r2, r1
 800643e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	e036      	b.n	80064bc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006454:	69da      	ldr	r2, [r3, #28]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	f003 030f 	and.w	r3, r3, #15
 800645e:	2101      	movs	r1, #1
 8006460:	fa01 f303 	lsl.w	r3, r1, r3
 8006464:	041b      	lsls	r3, r3, #16
 8006466:	68f9      	ldr	r1, [r7, #12]
 8006468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800646c:	4313      	orrs	r3, r2
 800646e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	015a      	lsls	r2, r3, #5
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	4413      	add	r3, r2
 8006478:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d11a      	bne.n	80064bc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	015a      	lsls	r2, r3, #5
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4413      	add	r3, r2
 800648e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	78db      	ldrb	r3, [r3, #3]
 80064a0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064a2:	430b      	orrs	r3, r1
 80064a4:	4313      	orrs	r3, r2
 80064a6:	68ba      	ldr	r2, [r7, #8]
 80064a8:	0151      	lsls	r1, r2, #5
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	440a      	add	r2, r1
 80064ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ba:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3714      	adds	r7, #20
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
	...

080064cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	785b      	ldrb	r3, [r3, #1]
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d161      	bne.n	80065ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80064fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064fe:	d11f      	bne.n	8006540 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800651e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006520:	68bb      	ldr	r3, [r7, #8]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	0151      	lsls	r1, r2, #5
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	440a      	add	r2, r1
 8006536:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800653e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	781b      	ldrb	r3, [r3, #0]
 800654c:	f003 030f 	and.w	r3, r3, #15
 8006550:	2101      	movs	r1, #1
 8006552:	fa01 f303 	lsl.w	r3, r1, r3
 8006556:	b29b      	uxth	r3, r3
 8006558:	43db      	mvns	r3, r3
 800655a:	68f9      	ldr	r1, [r7, #12]
 800655c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006560:	4013      	ands	r3, r2
 8006562:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656a:	69da      	ldr	r2, [r3, #28]
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	f003 030f 	and.w	r3, r3, #15
 8006574:	2101      	movs	r1, #1
 8006576:	fa01 f303 	lsl.w	r3, r1, r3
 800657a:	b29b      	uxth	r3, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	68f9      	ldr	r1, [r7, #12]
 8006580:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006584:	4013      	ands	r3, r2
 8006586:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	0159      	lsls	r1, r3, #5
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	440b      	add	r3, r1
 800659e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065a2:	4619      	mov	r1, r3
 80065a4:	4b35      	ldr	r3, [pc, #212]	; (800667c <USB_DeactivateEndpoint+0x1b0>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	600b      	str	r3, [r1, #0]
 80065aa:	e060      	b.n	800666e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80065be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80065c2:	d11f      	bne.n	8006604 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	0151      	lsls	r1, r2, #5
 80065d6:	68fa      	ldr	r2, [r7, #12]
 80065d8:	440a      	add	r2, r1
 80065da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80065e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	015a      	lsls	r2, r3, #5
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	4413      	add	r3, r2
 80065ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68ba      	ldr	r2, [r7, #8]
 80065f4:	0151      	lsls	r1, r2, #5
 80065f6:	68fa      	ldr	r2, [r7, #12]
 80065f8:	440a      	add	r2, r1
 80065fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006602:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800660a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	f003 030f 	and.w	r3, r3, #15
 8006614:	2101      	movs	r1, #1
 8006616:	fa01 f303 	lsl.w	r3, r1, r3
 800661a:	041b      	lsls	r3, r3, #16
 800661c:	43db      	mvns	r3, r3
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006624:	4013      	ands	r3, r2
 8006626:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662e:	69da      	ldr	r2, [r3, #28]
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	f003 030f 	and.w	r3, r3, #15
 8006638:	2101      	movs	r1, #1
 800663a:	fa01 f303 	lsl.w	r3, r1, r3
 800663e:	041b      	lsls	r3, r3, #16
 8006640:	43db      	mvns	r3, r3
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006648:	4013      	ands	r3, r2
 800664a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800664c:	68bb      	ldr	r3, [r7, #8]
 800664e:	015a      	lsls	r2, r3, #5
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	4413      	add	r3, r2
 8006654:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	0159      	lsls	r1, r3, #5
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	440b      	add	r3, r1
 8006662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006666:	4619      	mov	r1, r3
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <USB_DeactivateEndpoint+0x1b4>)
 800666a:	4013      	ands	r3, r2
 800666c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	ec337800 	.word	0xec337800
 8006680:	eff37800 	.word	0xeff37800

08006684 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b08a      	sub	sp, #40	; 0x28
 8006688:	af02      	add	r7, sp, #8
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	785b      	ldrb	r3, [r3, #1]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	f040 815c 	bne.w	800695e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d132      	bne.n	8006714 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066ae:	69bb      	ldr	r3, [r7, #24]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	69ba      	ldr	r2, [r7, #24]
 80066be:	0151      	lsls	r1, r2, #5
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	440a      	add	r2, r1
 80066c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	69fb      	ldr	r3, [r7, #28]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	69fa      	ldr	r2, [r7, #28]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	015a      	lsls	r2, r3, #5
 80066f6:	69fb      	ldr	r3, [r7, #28]
 80066f8:	4413      	add	r3, r2
 80066fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fe:	691b      	ldr	r3, [r3, #16]
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	0151      	lsls	r1, r2, #5
 8006704:	69fa      	ldr	r2, [r7, #28]
 8006706:	440a      	add	r2, r1
 8006708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670c:	0cdb      	lsrs	r3, r3, #19
 800670e:	04db      	lsls	r3, r3, #19
 8006710:	6113      	str	r3, [r2, #16]
 8006712:	e074      	b.n	80067fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	69fa      	ldr	r2, [r7, #28]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672e:	0cdb      	lsrs	r3, r3, #19
 8006730:	04db      	lsls	r3, r3, #19
 8006732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	015a      	lsls	r2, r3, #5
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	4413      	add	r3, r2
 800673c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	69ba      	ldr	r2, [r7, #24]
 8006744:	0151      	lsls	r1, r2, #5
 8006746:	69fa      	ldr	r2, [r7, #28]
 8006748:	440a      	add	r2, r1
 800674a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006752:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006758:	69bb      	ldr	r3, [r7, #24]
 800675a:	015a      	lsls	r2, r3, #5
 800675c:	69fb      	ldr	r3, [r7, #28]
 800675e:	4413      	add	r3, r2
 8006760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006764:	691a      	ldr	r2, [r3, #16]
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	6959      	ldr	r1, [r3, #20]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	440b      	add	r3, r1
 8006770:	1e59      	subs	r1, r3, #1
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	fbb1 f3f3 	udiv	r3, r1, r3
 800677a:	04d9      	lsls	r1, r3, #19
 800677c:	4b9d      	ldr	r3, [pc, #628]	; (80069f4 <USB_EPStartXfer+0x370>)
 800677e:	400b      	ands	r3, r1
 8006780:	69b9      	ldr	r1, [r7, #24]
 8006782:	0148      	lsls	r0, r1, #5
 8006784:	69f9      	ldr	r1, [r7, #28]
 8006786:	4401      	add	r1, r0
 8006788:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800678c:	4313      	orrs	r3, r2
 800678e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	691a      	ldr	r2, [r3, #16]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	695b      	ldr	r3, [r3, #20]
 80067a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067a6:	69b9      	ldr	r1, [r7, #24]
 80067a8:	0148      	lsls	r0, r1, #5
 80067aa:	69f9      	ldr	r1, [r7, #28]
 80067ac:	4401      	add	r1, r0
 80067ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80067b2:	4313      	orrs	r3, r2
 80067b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	78db      	ldrb	r3, [r3, #3]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d11f      	bne.n	80067fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	015a      	lsls	r2, r3, #5
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	4413      	add	r3, r2
 80067c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	69ba      	ldr	r2, [r7, #24]
 80067ce:	0151      	lsls	r1, r2, #5
 80067d0:	69fa      	ldr	r2, [r7, #28]
 80067d2:	440a      	add	r2, r1
 80067d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80067dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	015a      	lsls	r2, r3, #5
 80067e2:	69fb      	ldr	r3, [r7, #28]
 80067e4:	4413      	add	r3, r2
 80067e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	69ba      	ldr	r2, [r7, #24]
 80067ee:	0151      	lsls	r1, r2, #5
 80067f0:	69fa      	ldr	r2, [r7, #28]
 80067f2:	440a      	add	r2, r1
 80067f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80067fe:	79fb      	ldrb	r3, [r7, #7]
 8006800:	2b01      	cmp	r3, #1
 8006802:	d14b      	bne.n	800689c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	691b      	ldr	r3, [r3, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d009      	beq.n	8006820 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800680c:	69bb      	ldr	r3, [r7, #24]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006818:	461a      	mov	r2, r3
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	78db      	ldrb	r3, [r3, #3]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d128      	bne.n	800687a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006828:	69fb      	ldr	r3, [r7, #28]
 800682a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006834:	2b00      	cmp	r3, #0
 8006836:	d110      	bne.n	800685a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	015a      	lsls	r2, r3, #5
 800683c:	69fb      	ldr	r3, [r7, #28]
 800683e:	4413      	add	r3, r2
 8006840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	69ba      	ldr	r2, [r7, #24]
 8006848:	0151      	lsls	r1, r2, #5
 800684a:	69fa      	ldr	r2, [r7, #28]
 800684c:	440a      	add	r2, r1
 800684e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006852:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006856:	6013      	str	r3, [r2, #0]
 8006858:	e00f      	b.n	800687a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	015a      	lsls	r2, r3, #5
 800685e:	69fb      	ldr	r3, [r7, #28]
 8006860:	4413      	add	r3, r2
 8006862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69ba      	ldr	r2, [r7, #24]
 800686a:	0151      	lsls	r1, r2, #5
 800686c:	69fa      	ldr	r2, [r7, #28]
 800686e:	440a      	add	r2, r1
 8006870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006878:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006894:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	e12f      	b.n	8006afc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69fb      	ldr	r3, [r7, #28]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	69ba      	ldr	r2, [r7, #24]
 80068ac:	0151      	lsls	r1, r2, #5
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	440a      	add	r2, r1
 80068b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	78db      	ldrb	r3, [r3, #3]
 80068c0:	2b01      	cmp	r3, #1
 80068c2:	d015      	beq.n	80068f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	695b      	ldr	r3, [r3, #20]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f000 8117 	beq.w	8006afc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068ce:	69fb      	ldr	r3, [r7, #28]
 80068d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068d6:	68bb      	ldr	r3, [r7, #8]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f003 030f 	and.w	r3, r3, #15
 80068de:	2101      	movs	r1, #1
 80068e0:	fa01 f303 	lsl.w	r3, r1, r3
 80068e4:	69f9      	ldr	r1, [r7, #28]
 80068e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068ea:	4313      	orrs	r3, r2
 80068ec:	634b      	str	r3, [r1, #52]	; 0x34
 80068ee:	e105      	b.n	8006afc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d110      	bne.n	8006922 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	440a      	add	r2, r1
 8006916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800691a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	e00f      	b.n	8006942 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	015a      	lsls	r2, r3, #5
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	4413      	add	r3, r2
 800692a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69ba      	ldr	r2, [r7, #24]
 8006932:	0151      	lsls	r1, r2, #5
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	440a      	add	r2, r1
 8006938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800693c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006940:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	68d9      	ldr	r1, [r3, #12]
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	781a      	ldrb	r2, [r3, #0]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	695b      	ldr	r3, [r3, #20]
 800694e:	b298      	uxth	r0, r3
 8006950:	79fb      	ldrb	r3, [r7, #7]
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	4603      	mov	r3, r0
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f000 fa2b 	bl	8006db2 <USB_WritePacket>
 800695c:	e0ce      	b.n	8006afc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	4413      	add	r3, r2
 8006966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	69ba      	ldr	r2, [r7, #24]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	440a      	add	r2, r1
 8006974:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006978:	0cdb      	lsrs	r3, r3, #19
 800697a:	04db      	lsls	r3, r3, #19
 800697c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	4413      	add	r3, r2
 8006986:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800698a:	691b      	ldr	r3, [r3, #16]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	0151      	lsls	r1, r2, #5
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	440a      	add	r2, r1
 8006994:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006998:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800699c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80069a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d126      	bne.n	80069f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	015a      	lsls	r2, r3, #5
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	4413      	add	r3, r2
 80069b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b6:	691a      	ldr	r2, [r3, #16]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069c0:	69b9      	ldr	r1, [r7, #24]
 80069c2:	0148      	lsls	r0, r1, #5
 80069c4:	69f9      	ldr	r1, [r7, #28]
 80069c6:	4401      	add	r1, r0
 80069c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069cc:	4313      	orrs	r3, r2
 80069ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80069d0:	69bb      	ldr	r3, [r7, #24]
 80069d2:	015a      	lsls	r2, r3, #5
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	4413      	add	r3, r2
 80069d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	0151      	lsls	r1, r2, #5
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	440a      	add	r2, r1
 80069e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80069ee:	6113      	str	r3, [r2, #16]
 80069f0:	e036      	b.n	8006a60 <USB_EPStartXfer+0x3dc>
 80069f2:	bf00      	nop
 80069f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	695a      	ldr	r2, [r3, #20]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	4413      	add	r3, r2
 8006a02:	1e5a      	subs	r2, r3, #1
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006a0e:	69bb      	ldr	r3, [r7, #24]
 8006a10:	015a      	lsls	r2, r3, #5
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	4413      	add	r3, r2
 8006a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	8afb      	ldrh	r3, [r7, #22]
 8006a1e:	04d9      	lsls	r1, r3, #19
 8006a20:	4b39      	ldr	r3, [pc, #228]	; (8006b08 <USB_EPStartXfer+0x484>)
 8006a22:	400b      	ands	r3, r1
 8006a24:	69b9      	ldr	r1, [r7, #24]
 8006a26:	0148      	lsls	r0, r1, #5
 8006a28:	69f9      	ldr	r1, [r7, #28]
 8006a2a:	4401      	add	r1, r0
 8006a2c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a30:	4313      	orrs	r3, r2
 8006a32:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	015a      	lsls	r2, r3, #5
 8006a38:	69fb      	ldr	r3, [r7, #28]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a40:	691a      	ldr	r2, [r3, #16]
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	689b      	ldr	r3, [r3, #8]
 8006a46:	8af9      	ldrh	r1, [r7, #22]
 8006a48:	fb01 f303 	mul.w	r3, r1, r3
 8006a4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a50:	69b9      	ldr	r1, [r7, #24]
 8006a52:	0148      	lsls	r0, r1, #5
 8006a54:	69f9      	ldr	r1, [r7, #28]
 8006a56:	4401      	add	r1, r0
 8006a58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006a60:	79fb      	ldrb	r3, [r7, #7]
 8006a62:	2b01      	cmp	r3, #1
 8006a64:	d10d      	bne.n	8006a82 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006a66:	68bb      	ldr	r3, [r7, #8]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d009      	beq.n	8006a82 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	68d9      	ldr	r1, [r3, #12]
 8006a72:	69bb      	ldr	r3, [r7, #24]
 8006a74:	015a      	lsls	r2, r3, #5
 8006a76:	69fb      	ldr	r3, [r7, #28]
 8006a78:	4413      	add	r3, r2
 8006a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a7e:	460a      	mov	r2, r1
 8006a80:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	78db      	ldrb	r3, [r3, #3]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d128      	bne.n	8006adc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d110      	bne.n	8006abc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006a9a:	69bb      	ldr	r3, [r7, #24]
 8006a9c:	015a      	lsls	r2, r3, #5
 8006a9e:	69fb      	ldr	r3, [r7, #28]
 8006aa0:	4413      	add	r3, r2
 8006aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	0151      	lsls	r1, r2, #5
 8006aac:	69fa      	ldr	r2, [r7, #28]
 8006aae:	440a      	add	r2, r1
 8006ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ab4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	e00f      	b.n	8006adc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	4413      	add	r3, r2
 8006ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	0151      	lsls	r1, r2, #5
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	440a      	add	r2, r1
 8006ad2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ada:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006adc:	69bb      	ldr	r3, [r7, #24]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	69ba      	ldr	r2, [r7, #24]
 8006aec:	0151      	lsls	r1, r2, #5
 8006aee:	69fa      	ldr	r2, [r7, #28]
 8006af0:	440a      	add	r2, r1
 8006af2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006af6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006afa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006afc:	2300      	movs	r3, #0
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3720      	adds	r7, #32
 8006b02:	46bd      	mov	sp, r7
 8006b04:	bd80      	pop	{r7, pc}
 8006b06:	bf00      	nop
 8006b08:	1ff80000 	.word	0x1ff80000

08006b0c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	4613      	mov	r3, r2
 8006b18:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	785b      	ldrb	r3, [r3, #1]
 8006b28:	2b01      	cmp	r3, #1
 8006b2a:	f040 80cd 	bne.w	8006cc8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d132      	bne.n	8006b9c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	015a      	lsls	r2, r3, #5
 8006b3a:	697b      	ldr	r3, [r7, #20]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b42:	691b      	ldr	r3, [r3, #16]
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	0151      	lsls	r1, r2, #5
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	440a      	add	r2, r1
 8006b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b50:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b54:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	015a      	lsls	r2, r3, #5
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	693a      	ldr	r2, [r7, #16]
 8006b6a:	0151      	lsls	r1, r2, #5
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	440a      	add	r2, r1
 8006b70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b74:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b7a:	693b      	ldr	r3, [r7, #16]
 8006b7c:	015a      	lsls	r2, r3, #5
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	4413      	add	r3, r2
 8006b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b86:	691b      	ldr	r3, [r3, #16]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	0151      	lsls	r1, r2, #5
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	440a      	add	r2, r1
 8006b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b94:	0cdb      	lsrs	r3, r3, #19
 8006b96:	04db      	lsls	r3, r3, #19
 8006b98:	6113      	str	r3, [r2, #16]
 8006b9a:	e04e      	b.n	8006c3a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	0151      	lsls	r1, r2, #5
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	440a      	add	r2, r1
 8006bb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bb6:	0cdb      	lsrs	r3, r3, #19
 8006bb8:	04db      	lsls	r3, r3, #19
 8006bba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	015a      	lsls	r2, r3, #5
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	4413      	add	r3, r2
 8006bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	693a      	ldr	r2, [r7, #16]
 8006bcc:	0151      	lsls	r1, r2, #5
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	440a      	add	r2, r1
 8006bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bd6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006bda:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006bde:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	429a      	cmp	r2, r3
 8006bea:	d903      	bls.n	8006bf4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	689a      	ldr	r2, [r3, #8]
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	697b      	ldr	r3, [r7, #20]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	693a      	ldr	r2, [r7, #16]
 8006c04:	0151      	lsls	r1, r2, #5
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	440a      	add	r2, r1
 8006c0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c0e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c12:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	015a      	lsls	r2, r3, #5
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c2a:	6939      	ldr	r1, [r7, #16]
 8006c2c:	0148      	lsls	r0, r1, #5
 8006c2e:	6979      	ldr	r1, [r7, #20]
 8006c30:	4401      	add	r1, r0
 8006c32:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006c36:	4313      	orrs	r3, r2
 8006c38:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006c3a:	79fb      	ldrb	r3, [r7, #7]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d11e      	bne.n	8006c7e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	691b      	ldr	r3, [r3, #16]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d009      	beq.n	8006c5c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006c48:	693b      	ldr	r3, [r7, #16]
 8006c4a:	015a      	lsls	r2, r3, #5
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	4413      	add	r3, r2
 8006c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c54:	461a      	mov	r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	697a      	ldr	r2, [r7, #20]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e092      	b.n	8006da4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006c9c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	695b      	ldr	r3, [r3, #20]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d07e      	beq.n	8006da4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	f003 030f 	and.w	r3, r3, #15
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8006cbc:	6979      	ldr	r1, [r7, #20]
 8006cbe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	634b      	str	r3, [r1, #52]	; 0x34
 8006cc6:	e06d      	b.n	8006da4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	0151      	lsls	r1, r2, #5
 8006cda:	697a      	ldr	r2, [r7, #20]
 8006cdc:	440a      	add	r2, r1
 8006cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ce2:	0cdb      	lsrs	r3, r3, #19
 8006ce4:	04db      	lsls	r3, r3, #19
 8006ce6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	015a      	lsls	r2, r3, #5
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	4413      	add	r3, r2
 8006cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	0151      	lsls	r1, r2, #5
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	440a      	add	r2, r1
 8006cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d02:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006d06:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006d0a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d003      	beq.n	8006d1c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	689a      	ldr	r2, [r3, #8]
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	0151      	lsls	r1, r2, #5
 8006d2e:	697a      	ldr	r2, [r7, #20]
 8006d30:	440a      	add	r2, r1
 8006d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006d3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d48:	691a      	ldr	r2, [r3, #16]
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	689b      	ldr	r3, [r3, #8]
 8006d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d52:	6939      	ldr	r1, [r7, #16]
 8006d54:	0148      	lsls	r0, r1, #5
 8006d56:	6979      	ldr	r1, [r7, #20]
 8006d58:	4401      	add	r1, r0
 8006d5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006d62:	79fb      	ldrb	r3, [r7, #7]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d10d      	bne.n	8006d84 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	68db      	ldr	r3, [r3, #12]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d009      	beq.n	8006d84 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	68d9      	ldr	r1, [r3, #12]
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	015a      	lsls	r2, r3, #5
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	4413      	add	r3, r2
 8006d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d80:	460a      	mov	r2, r1
 8006d82:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	693a      	ldr	r2, [r7, #16]
 8006d94:	0151      	lsls	r1, r2, #5
 8006d96:	697a      	ldr	r2, [r7, #20]
 8006d98:	440a      	add	r2, r1
 8006d9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006d9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006da2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr

08006db2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b089      	sub	sp, #36	; 0x24
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	4611      	mov	r1, r2
 8006dbe:	461a      	mov	r2, r3
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	71fb      	strb	r3, [r7, #7]
 8006dc4:	4613      	mov	r3, r2
 8006dc6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006dd0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d11a      	bne.n	8006e0e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dd8:	88bb      	ldrh	r3, [r7, #4]
 8006dda:	3303      	adds	r3, #3
 8006ddc:	089b      	lsrs	r3, r3, #2
 8006dde:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006de0:	2300      	movs	r3, #0
 8006de2:	61bb      	str	r3, [r7, #24]
 8006de4:	e00f      	b.n	8006e06 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006de6:	79fb      	ldrb	r3, [r7, #7]
 8006de8:	031a      	lsls	r2, r3, #12
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006df2:	461a      	mov	r2, r3
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	3304      	adds	r3, #4
 8006dfe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	3301      	adds	r3, #1
 8006e04:	61bb      	str	r3, [r7, #24]
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	429a      	cmp	r2, r3
 8006e0c:	d3eb      	bcc.n	8006de6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e0e:	2300      	movs	r3, #0
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3724      	adds	r7, #36	; 0x24
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	3303      	adds	r3, #3
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	61bb      	str	r3, [r7, #24]
 8006e3e:	e00b      	b.n	8006e58 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	3304      	adds	r3, #4
 8006e50:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	3301      	adds	r3, #1
 8006e56:	61bb      	str	r3, [r7, #24]
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d3ef      	bcc.n	8006e40 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006e60:	69fb      	ldr	r3, [r7, #28]
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3724      	adds	r7, #36	; 0x24
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e6e:	b480      	push	{r7}
 8006e70:	b085      	sub	sp, #20
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	2b01      	cmp	r3, #1
 8006e88:	d12c      	bne.n	8006ee4 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	db12      	blt.n	8006ec2 <USB_EPSetStall+0x54>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00f      	beq.n	8006ec2 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	015a      	lsls	r2, r3, #5
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	0151      	lsls	r1, r2, #5
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	440a      	add	r2, r1
 8006eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ebc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ec0:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	015a      	lsls	r2, r3, #5
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4413      	add	r3, r2
 8006eca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	0151      	lsls	r1, r2, #5
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	440a      	add	r2, r1
 8006ed8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006edc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ee0:	6013      	str	r3, [r2, #0]
 8006ee2:	e02b      	b.n	8006f3c <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	db12      	blt.n	8006f1c <USB_EPSetStall+0xae>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00f      	beq.n	8006f1c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	015a      	lsls	r2, r3, #5
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	4413      	add	r3, r2
 8006f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	68ba      	ldr	r2, [r7, #8]
 8006f0c:	0151      	lsls	r1, r2, #5
 8006f0e:	68fa      	ldr	r2, [r7, #12]
 8006f10:	440a      	add	r2, r1
 8006f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006f1a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006f1c:	68bb      	ldr	r3, [r7, #8]
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	68ba      	ldr	r2, [r7, #8]
 8006f2c:	0151      	lsls	r1, r2, #5
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	440a      	add	r2, r1
 8006f32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006f3a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr

08006f4a <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f4a:	b480      	push	{r7}
 8006f4c:	b085      	sub	sp, #20
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	6078      	str	r0, [r7, #4]
 8006f52:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	785b      	ldrb	r3, [r3, #1]
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d128      	bne.n	8006fb8 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	015a      	lsls	r2, r3, #5
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4413      	add	r3, r2
 8006f6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	68ba      	ldr	r2, [r7, #8]
 8006f76:	0151      	lsls	r1, r2, #5
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	440a      	add	r2, r1
 8006f7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f84:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	78db      	ldrb	r3, [r3, #3]
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d003      	beq.n	8006f96 <USB_EPClearStall+0x4c>
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	78db      	ldrb	r3, [r3, #3]
 8006f92:	2b02      	cmp	r3, #2
 8006f94:	d138      	bne.n	8007008 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	015a      	lsls	r2, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	0151      	lsls	r1, r2, #5
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	440a      	add	r2, r1
 8006fac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fb4:	6013      	str	r3, [r2, #0]
 8006fb6:	e027      	b.n	8007008 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	015a      	lsls	r2, r3, #5
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	0151      	lsls	r1, r2, #5
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	440a      	add	r2, r1
 8006fce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006fd6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	78db      	ldrb	r3, [r3, #3]
 8006fdc:	2b03      	cmp	r3, #3
 8006fde:	d003      	beq.n	8006fe8 <USB_EPClearStall+0x9e>
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	78db      	ldrb	r3, [r3, #3]
 8006fe4:	2b02      	cmp	r3, #2
 8006fe6:	d10f      	bne.n	8007008 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	68ba      	ldr	r2, [r7, #8]
 8006ff8:	0151      	lsls	r1, r2, #5
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	440a      	add	r2, r1
 8006ffe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007002:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007006:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	460b      	mov	r3, r1
 8007020:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	68fa      	ldr	r2, [r7, #12]
 8007030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007034:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007038:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	011b      	lsls	r3, r3, #4
 8007046:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800704a:	68f9      	ldr	r1, [r7, #12]
 800704c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007050:	4313      	orrs	r3, r2
 8007052:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007054:	2300      	movs	r3, #0
}
 8007056:	4618      	mov	r0, r3
 8007058:	3714      	adds	r7, #20
 800705a:	46bd      	mov	sp, r7
 800705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007060:	4770      	bx	lr

08007062 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007062:	b480      	push	{r7}
 8007064:	b085      	sub	sp, #20
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800707c:	f023 0303 	bic.w	r3, r3, #3
 8007080:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007090:	f023 0302 	bic.w	r3, r3, #2
 8007094:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80070be:	f023 0303 	bic.w	r3, r3, #3
 80070c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070d2:	f043 0302 	orr.w	r3, r3, #2
 80070d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3714      	adds	r7, #20
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr

080070e6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80070e6:	b480      	push	{r7}
 80070e8:	b085      	sub	sp, #20
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	695b      	ldr	r3, [r3, #20]
 80070f2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	699b      	ldr	r3, [r3, #24]
 80070f8:	68fa      	ldr	r2, [r7, #12]
 80070fa:	4013      	ands	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80070fe:	68fb      	ldr	r3, [r7, #12]
}
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4013      	ands	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	0c1b      	lsrs	r3, r3, #16
}
 8007134:	4618      	mov	r0, r3
 8007136:	3714      	adds	r7, #20
 8007138:	46bd      	mov	sp, r7
 800713a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713e:	4770      	bx	lr

08007140 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007140:	b480      	push	{r7}
 8007142:	b085      	sub	sp, #20
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007152:	699b      	ldr	r3, [r3, #24]
 8007154:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800715c:	69db      	ldr	r3, [r3, #28]
 800715e:	68ba      	ldr	r2, [r7, #8]
 8007160:	4013      	ands	r3, r2
 8007162:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	b29b      	uxth	r3, r3
}
 8007168:	4618      	mov	r0, r3
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	460b      	mov	r3, r1
 800717e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4413      	add	r3, r2
 800718c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007190:	689b      	ldr	r3, [r3, #8]
 8007192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	695b      	ldr	r3, [r3, #20]
 800719c:	68ba      	ldr	r2, [r7, #8]
 800719e:	4013      	ands	r3, r2
 80071a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071a2:	68bb      	ldr	r3, [r7, #8]
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	460b      	mov	r3, r1
 80071ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071c6:	691b      	ldr	r3, [r3, #16]
 80071c8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	f003 030f 	and.w	r3, r3, #15
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	fa22 f303 	lsr.w	r3, r2, r3
 80071e0:	01db      	lsls	r3, r3, #7
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	693a      	ldr	r2, [r7, #16]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80071ea:	78fb      	ldrb	r3, [r7, #3]
 80071ec:	015a      	lsls	r2, r3, #5
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	4413      	add	r3, r2
 80071f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	693a      	ldr	r2, [r7, #16]
 80071fa:	4013      	ands	r3, r2
 80071fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80071fe:	68bb      	ldr	r3, [r7, #8]
}
 8007200:	4618      	mov	r0, r3
 8007202:	371c      	adds	r7, #28
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	695b      	ldr	r3, [r3, #20]
 8007218:	f003 0301 	and.w	r3, r3, #1
}
 800721c:	4618      	mov	r0, r3
 800721e:	370c      	adds	r7, #12
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007228:	b480      	push	{r7}
 800722a:	b085      	sub	sp, #20
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007242:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007246:	f023 0307 	bic.w	r3, r3, #7
 800724a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	68fa      	ldr	r2, [r7, #12]
 8007256:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800725a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800725e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3714      	adds	r7, #20
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007270:	b480      	push	{r7}
 8007272:	b087      	sub	sp, #28
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	460b      	mov	r3, r1
 800727a:	607a      	str	r2, [r7, #4]
 800727c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	333c      	adds	r3, #60	; 0x3c
 8007286:	3304      	adds	r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	4a26      	ldr	r2, [pc, #152]	; (8007328 <USB_EP0_OutStart+0xb8>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d90a      	bls.n	80072aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072a4:	d101      	bne.n	80072aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80072a6:	2300      	movs	r3, #0
 80072a8:	e037      	b.n	800731a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b0:	461a      	mov	r2, r3
 80072b2:	2300      	movs	r3, #0
 80072b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072bc:	691b      	ldr	r3, [r3, #16]
 80072be:	697a      	ldr	r2, [r7, #20]
 80072c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072c4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072d0:	691b      	ldr	r3, [r3, #16]
 80072d2:	697a      	ldr	r2, [r7, #20]
 80072d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d8:	f043 0318 	orr.w	r3, r3, #24
 80072dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	697a      	ldr	r2, [r7, #20]
 80072e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072ec:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80072f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80072f2:	7afb      	ldrb	r3, [r7, #11]
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d10f      	bne.n	8007318 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	697a      	ldr	r2, [r7, #20]
 800730e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007312:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007316:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007318:	2300      	movs	r3, #0
}
 800731a:	4618      	mov	r0, r3
 800731c:	371c      	adds	r7, #28
 800731e:	46bd      	mov	sp, r7
 8007320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	4f54300a 	.word	0x4f54300a

0800732c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800732c:	b480      	push	{r7}
 800732e:	b085      	sub	sp, #20
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007334:	2300      	movs	r3, #0
 8007336:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	3301      	adds	r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	4a13      	ldr	r2, [pc, #76]	; (8007390 <USB_CoreReset+0x64>)
 8007342:	4293      	cmp	r3, r2
 8007344:	d901      	bls.n	800734a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007346:	2303      	movs	r3, #3
 8007348:	e01b      	b.n	8007382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	2b00      	cmp	r3, #0
 8007350:	daf2      	bge.n	8007338 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007352:	2300      	movs	r3, #0
 8007354:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	f043 0201 	orr.w	r2, r3, #1
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a09      	ldr	r2, [pc, #36]	; (8007390 <USB_CoreReset+0x64>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d901      	bls.n	8007374 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e006      	b.n	8007382 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d0f0      	beq.n	8007362 <USB_CoreReset+0x36>

  return HAL_OK;
 8007380:	2300      	movs	r3, #0
}
 8007382:	4618      	mov	r0, r3
 8007384:	3714      	adds	r7, #20
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr
 800738e:	bf00      	nop
 8007390:	00030d40 	.word	0x00030d40

08007394 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b084      	sub	sp, #16
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80073a0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80073a4:	f002 f8d6 	bl	8009554 <malloc>
 80073a8:	4603      	mov	r3, r0
 80073aa:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d105      	bne.n	80073be <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 80073ba:	2302      	movs	r3, #2
 80073bc:	e066      	b.n	800748c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	68fa      	ldr	r2, [r7, #12]
 80073c2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	7c1b      	ldrb	r3, [r3, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d119      	bne.n	8007402 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80073ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073d2:	2202      	movs	r2, #2
 80073d4:	2181      	movs	r1, #129	; 0x81
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 ff43 	bl	8009262 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80073e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e6:	2202      	movs	r2, #2
 80073e8:	2101      	movs	r1, #1
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f001 ff39 	bl	8009262 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2201      	movs	r2, #1
 80073f4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2210      	movs	r2, #16
 80073fc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007400:	e016      	b.n	8007430 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007402:	2340      	movs	r3, #64	; 0x40
 8007404:	2202      	movs	r2, #2
 8007406:	2181      	movs	r1, #129	; 0x81
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f001 ff2a 	bl	8009262 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2201      	movs	r2, #1
 8007412:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007414:	2340      	movs	r3, #64	; 0x40
 8007416:	2202      	movs	r2, #2
 8007418:	2101      	movs	r1, #1
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f001 ff21 	bl	8009262 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2201      	movs	r2, #1
 8007424:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2210      	movs	r2, #16
 800742c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007430:	2308      	movs	r3, #8
 8007432:	2203      	movs	r2, #3
 8007434:	2182      	movs	r1, #130	; 0x82
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f001 ff13 	bl	8009262 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	2200      	movs	r2, #0
 8007452:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	2200      	movs	r2, #0
 800745a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	7c1b      	ldrb	r3, [r3, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d109      	bne.n	800747a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800746c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007470:	2101      	movs	r1, #1
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f001 ffe4 	bl	8009440 <USBD_LL_PrepareReceive>
 8007478:	e007      	b.n	800748a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007480:	2340      	movs	r3, #64	; 0x40
 8007482:	2101      	movs	r1, #1
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f001 ffdb 	bl	8009440 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800748a:	2300      	movs	r3, #0
}
 800748c:	4618      	mov	r0, r3
 800748e:	3710      	adds	r7, #16
 8007490:	46bd      	mov	sp, r7
 8007492:	bd80      	pop	{r7, pc}

08007494 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	460b      	mov	r3, r1
 800749e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80074a4:	2181      	movs	r1, #129	; 0x81
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 ff01 	bl	80092ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2200      	movs	r2, #0
 80074b0:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80074b2:	2101      	movs	r1, #1
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f001 fefa 	bl	80092ae <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80074c2:	2182      	movs	r1, #130	; 0x82
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fef2 	bl	80092ae <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00e      	beq.n	8007502 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80074ea:	685b      	ldr	r3, [r3, #4]
 80074ec:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f4:	4618      	mov	r0, r3
 80074f6:	f002 f835 	bl	8009564 <free>
    pdev->pClassData = NULL;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007502:	7bfb      	ldrb	r3, [r7, #15]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800751c:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800751e:	2300      	movs	r3, #0
 8007520:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007526:	2300      	movs	r3, #0
 8007528:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	781b      	ldrb	r3, [r3, #0]
 800752e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007532:	2b00      	cmp	r3, #0
 8007534:	d03a      	beq.n	80075ac <USBD_CDC_Setup+0xa0>
 8007536:	2b20      	cmp	r3, #32
 8007538:	f040 8097 	bne.w	800766a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	88db      	ldrh	r3, [r3, #6]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d029      	beq.n	8007598 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b25b      	sxtb	r3, r3
 800754a:	2b00      	cmp	r3, #0
 800754c:	da11      	bge.n	8007572 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007554:	689b      	ldr	r3, [r3, #8]
 8007556:	683a      	ldr	r2, [r7, #0]
 8007558:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 800755a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800755c:	683a      	ldr	r2, [r7, #0]
 800755e:	88d2      	ldrh	r2, [r2, #6]
 8007560:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007562:	6939      	ldr	r1, [r7, #16]
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	88db      	ldrh	r3, [r3, #6]
 8007568:	461a      	mov	r2, r3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f001 fa6d 	bl	8008a4a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007570:	e082      	b.n	8007678 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	785a      	ldrb	r2, [r3, #1]
 8007576:	693b      	ldr	r3, [r7, #16]
 8007578:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	88db      	ldrh	r3, [r3, #6]
 8007580:	b2da      	uxtb	r2, r3
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007588:	6939      	ldr	r1, [r7, #16]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	88db      	ldrh	r3, [r3, #6]
 800758e:	461a      	mov	r2, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f001 fa86 	bl	8008aa2 <USBD_CtlPrepareRx>
    break;
 8007596:	e06f      	b.n	8007678 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	683a      	ldr	r2, [r7, #0]
 80075a2:	7850      	ldrb	r0, [r2, #1]
 80075a4:	2200      	movs	r2, #0
 80075a6:	6839      	ldr	r1, [r7, #0]
 80075a8:	4798      	blx	r3
    break;
 80075aa:	e065      	b.n	8007678 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b0b      	cmp	r3, #11
 80075b2:	d84f      	bhi.n	8007654 <USBD_CDC_Setup+0x148>
 80075b4:	a201      	add	r2, pc, #4	; (adr r2, 80075bc <USBD_CDC_Setup+0xb0>)
 80075b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ba:	bf00      	nop
 80075bc:	080075ed 	.word	0x080075ed
 80075c0:	08007663 	.word	0x08007663
 80075c4:	08007655 	.word	0x08007655
 80075c8:	08007655 	.word	0x08007655
 80075cc:	08007655 	.word	0x08007655
 80075d0:	08007655 	.word	0x08007655
 80075d4:	08007655 	.word	0x08007655
 80075d8:	08007655 	.word	0x08007655
 80075dc:	08007655 	.word	0x08007655
 80075e0:	08007655 	.word	0x08007655
 80075e4:	08007615 	.word	0x08007615
 80075e8:	0800763d 	.word	0x0800763d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d107      	bne.n	8007606 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80075f6:	f107 030c 	add.w	r3, r7, #12
 80075fa:	2202      	movs	r2, #2
 80075fc:	4619      	mov	r1, r3
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f001 fa23 	bl	8008a4a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007604:	e030      	b.n	8007668 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f001 f9ad 	bl	8008968 <USBD_CtlError>
        ret = USBD_FAIL;
 800760e:	2303      	movs	r3, #3
 8007610:	75fb      	strb	r3, [r7, #23]
      break;
 8007612:	e029      	b.n	8007668 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800761a:	2b03      	cmp	r3, #3
 800761c:	d107      	bne.n	800762e <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800761e:	f107 030f 	add.w	r3, r7, #15
 8007622:	2201      	movs	r2, #1
 8007624:	4619      	mov	r1, r3
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	f001 fa0f 	bl	8008a4a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800762c:	e01c      	b.n	8007668 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800762e:	6839      	ldr	r1, [r7, #0]
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f001 f999 	bl	8008968 <USBD_CtlError>
        ret = USBD_FAIL;
 8007636:	2303      	movs	r3, #3
 8007638:	75fb      	strb	r3, [r7, #23]
      break;
 800763a:	e015      	b.n	8007668 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007642:	2b03      	cmp	r3, #3
 8007644:	d00f      	beq.n	8007666 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f001 f98d 	bl	8008968 <USBD_CtlError>
        ret = USBD_FAIL;
 800764e:	2303      	movs	r3, #3
 8007650:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007652:	e008      	b.n	8007666 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007654:	6839      	ldr	r1, [r7, #0]
 8007656:	6878      	ldr	r0, [r7, #4]
 8007658:	f001 f986 	bl	8008968 <USBD_CtlError>
      ret = USBD_FAIL;
 800765c:	2303      	movs	r3, #3
 800765e:	75fb      	strb	r3, [r7, #23]
      break;
 8007660:	e002      	b.n	8007668 <USBD_CDC_Setup+0x15c>
      break;
 8007662:	bf00      	nop
 8007664:	e008      	b.n	8007678 <USBD_CDC_Setup+0x16c>
      break;
 8007666:	bf00      	nop
    }
    break;
 8007668:	e006      	b.n	8007678 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800766a:	6839      	ldr	r1, [r7, #0]
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f001 f97b 	bl	8008968 <USBD_CtlError>
    ret = USBD_FAIL;
 8007672:	2303      	movs	r3, #3
 8007674:	75fb      	strb	r3, [r7, #23]
    break;
 8007676:	bf00      	nop
  }

  return (uint8_t)ret;
 8007678:	7dfb      	ldrb	r3, [r7, #23]
}
 800767a:	4618      	mov	r0, r3
 800767c:	3718      	adds	r7, #24
 800767e:	46bd      	mov	sp, r7
 8007680:	bd80      	pop	{r7, pc}
 8007682:	bf00      	nop

08007684 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007684:	b580      	push	{r7, lr}
 8007686:	b084      	sub	sp, #16
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
 800768c:	460b      	mov	r3, r1
 800768e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007696:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d101      	bne.n	80076a6 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e049      	b.n	800773a <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80076ac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80076ae:	78fa      	ldrb	r2, [r7, #3]
 80076b0:	6879      	ldr	r1, [r7, #4]
 80076b2:	4613      	mov	r3, r2
 80076b4:	009b      	lsls	r3, r3, #2
 80076b6:	4413      	add	r3, r2
 80076b8:	009b      	lsls	r3, r3, #2
 80076ba:	440b      	add	r3, r1
 80076bc:	3318      	adds	r3, #24
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d029      	beq.n	8007718 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80076c4:	78fa      	ldrb	r2, [r7, #3]
 80076c6:	6879      	ldr	r1, [r7, #4]
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	440b      	add	r3, r1
 80076d2:	3318      	adds	r3, #24
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	78f9      	ldrb	r1, [r7, #3]
 80076d8:	68f8      	ldr	r0, [r7, #12]
 80076da:	460b      	mov	r3, r1
 80076dc:	00db      	lsls	r3, r3, #3
 80076de:	1a5b      	subs	r3, r3, r1
 80076e0:	009b      	lsls	r3, r3, #2
 80076e2:	4403      	add	r3, r0
 80076e4:	3344      	adds	r3, #68	; 0x44
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	fbb2 f1f3 	udiv	r1, r2, r3
 80076ec:	fb03 f301 	mul.w	r3, r3, r1
 80076f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d110      	bne.n	8007718 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80076f6:	78fa      	ldrb	r2, [r7, #3]
 80076f8:	6879      	ldr	r1, [r7, #4]
 80076fa:	4613      	mov	r3, r2
 80076fc:	009b      	lsls	r3, r3, #2
 80076fe:	4413      	add	r3, r2
 8007700:	009b      	lsls	r3, r3, #2
 8007702:	440b      	add	r3, r1
 8007704:	3318      	adds	r3, #24
 8007706:	2200      	movs	r2, #0
 8007708:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800770a:	78f9      	ldrb	r1, [r7, #3]
 800770c:	2300      	movs	r3, #0
 800770e:	2200      	movs	r2, #0
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f001 fe74 	bl	80093fe <USBD_LL_Transmit>
 8007716:	e00f      	b.n	8007738 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2200      	movs	r2, #0
 800771c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007726:	691b      	ldr	r3, [r3, #16]
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800772e:	68ba      	ldr	r2, [r7, #8]
 8007730:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007734:	78fa      	ldrb	r2, [r7, #3]
 8007736:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
 800774a:	460b      	mov	r3, r1
 800774c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007754:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800775c:	2b00      	cmp	r3, #0
 800775e:	d101      	bne.n	8007764 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007760:	2303      	movs	r3, #3
 8007762:	e015      	b.n	8007790 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007764:	78fb      	ldrb	r3, [r7, #3]
 8007766:	4619      	mov	r1, r3
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f001 fe8a 	bl	8009482 <USBD_LL_GetRxDataSize>
 800776e:	4602      	mov	r2, r0
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800778a:	4611      	mov	r1, r2
 800778c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077a6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d015      	beq.n	80077de <USBD_CDC_EP0_RxReady+0x46>
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80077b8:	2bff      	cmp	r3, #255	; 0xff
 80077ba:	d010      	beq.n	80077de <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80077ca:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80077cc:	68fa      	ldr	r2, [r7, #12]
 80077ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80077d2:	b292      	uxth	r2, r2
 80077d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	22ff      	movs	r2, #255	; 0xff
 80077da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}

080077e8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2243      	movs	r2, #67	; 0x43
 80077f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80077f6:	4b03      	ldr	r3, [pc, #12]	; (8007804 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	370c      	adds	r7, #12
 80077fc:	46bd      	mov	sp, r7
 80077fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007802:	4770      	bx	lr
 8007804:	200000b8 	.word	0x200000b8

08007808 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007808:	b480      	push	{r7}
 800780a:	b083      	sub	sp, #12
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2243      	movs	r2, #67	; 0x43
 8007814:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007816:	4b03      	ldr	r3, [pc, #12]	; (8007824 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007818:	4618      	mov	r0, r3
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr
 8007824:	20000074 	.word	0x20000074

08007828 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2243      	movs	r2, #67	; 0x43
 8007834:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007836:	4b03      	ldr	r3, [pc, #12]	; (8007844 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007838:	4618      	mov	r0, r3
 800783a:	370c      	adds	r7, #12
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr
 8007844:	200000fc 	.word	0x200000fc

08007848 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007848:	b480      	push	{r7}
 800784a:	b083      	sub	sp, #12
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	220a      	movs	r2, #10
 8007854:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007856:	4b03      	ldr	r3, [pc, #12]	; (8007864 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007858:	4618      	mov	r0, r3
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	20000030 	.word	0x20000030

08007868 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
 8007870:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d101      	bne.n	800787c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	e004      	b.n	8007886 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	683a      	ldr	r2, [r7, #0]
 8007880:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007884:	2300      	movs	r3, #0
}
 8007886:	4618      	mov	r0, r3
 8007888:	370c      	adds	r7, #12
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007892:	b480      	push	{r7}
 8007894:	b087      	sub	sp, #28
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078a4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	68ba      	ldr	r2, [r7, #8]
 80078aa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	687a      	ldr	r2, [r7, #4]
 80078b2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80078b6:	2300      	movs	r3, #0
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	371c      	adds	r7, #28
 80078bc:	46bd      	mov	sp, r7
 80078be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c2:	4770      	bx	lr

080078c4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b085      	sub	sp, #20
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078d4:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80078de:	2300      	movs	r3, #0
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	3714      	adds	r7, #20
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr

080078ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80078fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007902:	2b00      	cmp	r3, #0
 8007904:	d101      	bne.n	800790a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007906:	2303      	movs	r3, #3
 8007908:	e016      	b.n	8007938 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	7c1b      	ldrb	r3, [r3, #16]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d109      	bne.n	8007926 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791c:	2101      	movs	r1, #1
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	f001 fd8e 	bl	8009440 <USBD_LL_PrepareReceive>
 8007924:	e007      	b.n	8007936 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800792c:	2340      	movs	r3, #64	; 0x40
 800792e:	2101      	movs	r1, #1
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 fd85 	bl	8009440 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007936:	2300      	movs	r3, #0
}
 8007938:	4618      	mov	r0, r3
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b086      	sub	sp, #24
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	4613      	mov	r3, r2
 800794c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d101      	bne.n	8007958 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007954:	2303      	movs	r3, #3
 8007956:	e025      	b.n	80079a4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2200      	movs	r2, #0
 8007966:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d003      	beq.n	800798a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	68ba      	ldr	r2, [r7, #8]
 8007986:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	2201      	movs	r2, #1
 800798e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	79fa      	ldrb	r2, [r7, #7]
 8007996:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007998:	68f8      	ldr	r0, [r7, #12]
 800799a:	f001 fbfb 	bl	8009194 <USBD_LL_Init>
 800799e:	4603      	mov	r3, r0
 80079a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80079a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3718      	adds	r7, #24
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d101      	bne.n	80079c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e010      	b.n	80079e6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	683a      	ldr	r2, [r7, #0]
 80079c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d4:	f107 020e 	add.w	r2, r7, #14
 80079d8:	4610      	mov	r0, r2
 80079da:	4798      	blx	r3
 80079dc:	4602      	mov	r2, r0
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80079e4:	2300      	movs	r3, #0
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	3710      	adds	r7, #16
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bd80      	pop	{r7, pc}

080079ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80079ee:	b580      	push	{r7, lr}
 80079f0:	b082      	sub	sp, #8
 80079f2:	af00      	add	r7, sp, #0
 80079f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f001 fc18 	bl	800922c <USBD_LL_Start>
 80079fc:	4603      	mov	r3, r0
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr

08007a1c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b084      	sub	sp, #16
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	6078      	str	r0, [r7, #4]
 8007a24:	460b      	mov	r3, r1
 8007a26:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8007a28:	2303      	movs	r3, #3
 8007a2a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	78fa      	ldrb	r2, [r7, #3]
 8007a40:	4611      	mov	r1, r2
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	4798      	blx	r3
 8007a46:	4603      	mov	r3, r0
 8007a48:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3710      	adds	r7, #16
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}

08007a54 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b082      	sub	sp, #8
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d007      	beq.n	8007a7a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	78fa      	ldrb	r2, [r7, #3]
 8007a74:	4611      	mov	r1, r2
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
  }

  return USBD_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3708      	adds	r7, #8
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a94:	6839      	ldr	r1, [r7, #0]
 8007a96:	4618      	mov	r0, r3
 8007a98:	f000 ff2c 	bl	80088f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007aaa:	461a      	mov	r2, r3
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007ab8:	f003 031f 	and.w	r3, r3, #31
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d00e      	beq.n	8007ade <USBD_LL_SetupStage+0x5a>
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d302      	bcc.n	8007aca <USBD_LL_SetupStage+0x46>
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	d014      	beq.n	8007af2 <USBD_LL_SetupStage+0x6e>
 8007ac8:	e01d      	b.n	8007b06 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fa18 	bl	8007f08 <USBD_StdDevReq>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	73fb      	strb	r3, [r7, #15]
      break;
 8007adc:	e020      	b.n	8007b20 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa7c 	bl	8007fe4 <USBD_StdItfReq>
 8007aec:	4603      	mov	r3, r0
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e016      	b.n	8007b20 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007af8:	4619      	mov	r1, r3
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 fab8 	bl	8008070 <USBD_StdEPReq>
 8007b00:	4603      	mov	r3, r0
 8007b02:	73fb      	strb	r3, [r7, #15]
      break;
 8007b04:	e00c      	b.n	8007b20 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b10:	b2db      	uxtb	r3, r3
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f001 fbe9 	bl	80092ec <USBD_LL_StallEP>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	73fb      	strb	r3, [r7, #15]
      break;
 8007b1e:	bf00      	nop
  }

  return ret;
 8007b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	3710      	adds	r7, #16
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}

08007b2a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007b2a:	b580      	push	{r7, lr}
 8007b2c:	b086      	sub	sp, #24
 8007b2e:	af00      	add	r7, sp, #0
 8007b30:	60f8      	str	r0, [r7, #12]
 8007b32:	460b      	mov	r3, r1
 8007b34:	607a      	str	r2, [r7, #4]
 8007b36:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007b38:	7afb      	ldrb	r3, [r7, #11]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d137      	bne.n	8007bae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007b44:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b4c:	2b03      	cmp	r3, #3
 8007b4e:	d14a      	bne.n	8007be6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	689a      	ldr	r2, [r3, #8]
 8007b54:	693b      	ldr	r3, [r7, #16]
 8007b56:	68db      	ldr	r3, [r3, #12]
 8007b58:	429a      	cmp	r2, r3
 8007b5a:	d913      	bls.n	8007b84 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	689a      	ldr	r2, [r3, #8]
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	68db      	ldr	r3, [r3, #12]
 8007b64:	1ad2      	subs	r2, r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	68da      	ldr	r2, [r3, #12]
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	4293      	cmp	r3, r2
 8007b74:	bf28      	it	cs
 8007b76:	4613      	movcs	r3, r2
 8007b78:	461a      	mov	r2, r3
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	68f8      	ldr	r0, [r7, #12]
 8007b7e:	f000 ffad 	bl	8008adc <USBD_CtlContinueRx>
 8007b82:	e030      	b.n	8007be6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b8a:	691b      	ldr	r3, [r3, #16]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00a      	beq.n	8007ba6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007b96:	2b03      	cmp	r3, #3
 8007b98:	d105      	bne.n	8007ba6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007ba6:	68f8      	ldr	r0, [r7, #12]
 8007ba8:	f000 ffa9 	bl	8008afe <USBD_CtlSendStatus>
 8007bac:	e01b      	b.n	8007be6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d013      	beq.n	8007be2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8007bc0:	2b03      	cmp	r3, #3
 8007bc2:	d10e      	bne.n	8007be2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	7afa      	ldrb	r2, [r7, #11]
 8007bce:	4611      	mov	r1, r2
 8007bd0:	68f8      	ldr	r0, [r7, #12]
 8007bd2:	4798      	blx	r3
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d003      	beq.n	8007be6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
 8007be0:	e002      	b.n	8007be8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e000      	b.n	8007be8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}

08007bf0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b086      	sub	sp, #24
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	460b      	mov	r3, r1
 8007bfa:	607a      	str	r2, [r7, #4]
 8007bfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8007bfe:	7afb      	ldrb	r3, [r7, #11]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d16a      	bne.n	8007cda <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	3314      	adds	r3, #20
 8007c08:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d155      	bne.n	8007cc0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c14:	693b      	ldr	r3, [r7, #16]
 8007c16:	689a      	ldr	r2, [r3, #8]
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d914      	bls.n	8007c4a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	68db      	ldr	r3, [r3, #12]
 8007c28:	1ad2      	subs	r2, r2, r3
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	461a      	mov	r2, r3
 8007c34:	6879      	ldr	r1, [r7, #4]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 ff22 	bl	8008a80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	2200      	movs	r2, #0
 8007c40:	2100      	movs	r1, #0
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f001 fbfc 	bl	8009440 <USBD_LL_PrepareReceive>
 8007c48:	e03a      	b.n	8007cc0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d11c      	bne.n	8007c90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	685a      	ldr	r2, [r3, #4]
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d316      	bcc.n	8007c90 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c62:	693b      	ldr	r3, [r7, #16]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d20f      	bcs.n	8007c90 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c70:	2200      	movs	r2, #0
 8007c72:	2100      	movs	r1, #0
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 ff03 	bl	8008a80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c82:	2300      	movs	r3, #0
 8007c84:	2200      	movs	r2, #0
 8007c86:	2100      	movs	r1, #0
 8007c88:	68f8      	ldr	r0, [r7, #12]
 8007c8a:	f001 fbd9 	bl	8009440 <USBD_LL_PrepareReceive>
 8007c8e:	e017      	b.n	8007cc0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007ca2:	2b03      	cmp	r3, #3
 8007ca4:	d105      	bne.n	8007cb2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cac:	68db      	ldr	r3, [r3, #12]
 8007cae:	68f8      	ldr	r0, [r7, #12]
 8007cb0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007cb2:	2180      	movs	r1, #128	; 0x80
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f001 fb19 	bl	80092ec <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 ff32 	bl	8008b24 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cc6:	2b01      	cmp	r3, #1
 8007cc8:	d123      	bne.n	8007d12 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007cca:	68f8      	ldr	r0, [r7, #12]
 8007ccc:	f7ff fe9b 	bl	8007a06 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007cd8:	e01b      	b.n	8007d12 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce0:	695b      	ldr	r3, [r3, #20]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d013      	beq.n	8007d0e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007cec:	2b03      	cmp	r3, #3
 8007cee:	d10e      	bne.n	8007d0e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	7afa      	ldrb	r2, [r7, #11]
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	68f8      	ldr	r0, [r7, #12]
 8007cfe:	4798      	blx	r3
 8007d00:	4603      	mov	r3, r0
 8007d02:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007d04:	7dfb      	ldrb	r3, [r7, #23]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8007d0a:	7dfb      	ldrb	r3, [r7, #23]
 8007d0c:	e002      	b.n	8007d14 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007d0e:	2303      	movs	r3, #3
 8007d10:	e000      	b.n	8007d14 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3718      	adds	r7, #24
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2201      	movs	r2, #1
 8007d28:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2200      	movs	r2, #0
 8007d38:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d009      	beq.n	8007d60 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d52:	685b      	ldr	r3, [r3, #4]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6852      	ldr	r2, [r2, #4]
 8007d58:	b2d2      	uxtb	r2, r2
 8007d5a:	4611      	mov	r1, r2
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d60:	2340      	movs	r3, #64	; 0x40
 8007d62:	2200      	movs	r2, #0
 8007d64:	2100      	movs	r1, #0
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f001 fa7b 	bl	8009262 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2240      	movs	r2, #64	; 0x40
 8007d78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007d7c:	2340      	movs	r3, #64	; 0x40
 8007d7e:	2200      	movs	r2, #0
 8007d80:	2180      	movs	r1, #128	; 0x80
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fa6d 	bl	8009262 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2240      	movs	r2, #64	; 0x40
 8007d92:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
 8007da6:	460b      	mov	r3, r1
 8007da8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	78fa      	ldrb	r2, [r7, #3]
 8007dae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	370c      	adds	r7, #12
 8007db6:	46bd      	mov	sp, r7
 8007db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dbc:	4770      	bx	lr

08007dbe <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007dbe:	b480      	push	{r7}
 8007dc0:	b083      	sub	sp, #12
 8007dc2:	af00      	add	r7, sp, #0
 8007dc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2204      	movs	r2, #4
 8007dd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df6:	2b04      	cmp	r3, #4
 8007df8:	d105      	bne.n	8007e06 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e06:	2300      	movs	r3, #0
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d10b      	bne.n	8007e3e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2c:	69db      	ldr	r3, [r3, #28]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d005      	beq.n	8007e3e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	6878      	ldr	r0, [r7, #4]
 8007e3c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007e3e:	2300      	movs	r3, #0
}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e54:	2300      	movs	r3, #0
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr

08007e62 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007e62:	b480      	push	{r7}
 8007e64:	b083      	sub	sp, #12
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007e84:	2300      	movs	r3, #0
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2201      	movs	r2, #1
 8007e9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d009      	beq.n	8007ec0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6852      	ldr	r2, [r2, #4]
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	4611      	mov	r1, r2
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	4798      	blx	r3
  }

  return USBD_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3708      	adds	r7, #8
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd80      	pop	{r7, pc}

08007eca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b087      	sub	sp, #28
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	3301      	adds	r3, #1
 8007ee0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	781b      	ldrb	r3, [r3, #0]
 8007ee6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007ee8:	8a3b      	ldrh	r3, [r7, #16]
 8007eea:	021b      	lsls	r3, r3, #8
 8007eec:	b21a      	sxth	r2, r3
 8007eee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	b21b      	sxth	r3, r3
 8007ef6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007ef8:	89fb      	ldrh	r3, [r7, #14]
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	371c      	adds	r7, #28
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
	...

08007f08 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007f1e:	2b20      	cmp	r3, #32
 8007f20:	d004      	beq.n	8007f2c <USBD_StdDevReq+0x24>
 8007f22:	2b40      	cmp	r3, #64	; 0x40
 8007f24:	d002      	beq.n	8007f2c <USBD_StdDevReq+0x24>
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d00a      	beq.n	8007f40 <USBD_StdDevReq+0x38>
 8007f2a:	e050      	b.n	8007fce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	6839      	ldr	r1, [r7, #0]
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8007f3e:	e04b      	b.n	8007fd8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	785b      	ldrb	r3, [r3, #1]
 8007f44:	2b09      	cmp	r3, #9
 8007f46:	d83c      	bhi.n	8007fc2 <USBD_StdDevReq+0xba>
 8007f48:	a201      	add	r2, pc, #4	; (adr r2, 8007f50 <USBD_StdDevReq+0x48>)
 8007f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f4e:	bf00      	nop
 8007f50:	08007fa5 	.word	0x08007fa5
 8007f54:	08007fb9 	.word	0x08007fb9
 8007f58:	08007fc3 	.word	0x08007fc3
 8007f5c:	08007faf 	.word	0x08007faf
 8007f60:	08007fc3 	.word	0x08007fc3
 8007f64:	08007f83 	.word	0x08007f83
 8007f68:	08007f79 	.word	0x08007f79
 8007f6c:	08007fc3 	.word	0x08007fc3
 8007f70:	08007f9b 	.word	0x08007f9b
 8007f74:	08007f8d 	.word	0x08007f8d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007f78:	6839      	ldr	r1, [r7, #0]
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f9ce 	bl	800831c <USBD_GetDescriptor>
      break;
 8007f80:	e024      	b.n	8007fcc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 fb33 	bl	80085f0 <USBD_SetAddress>
      break;
 8007f8a:	e01f      	b.n	8007fcc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fb70 	bl	8008674 <USBD_SetConfig>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]
      break;
 8007f98:	e018      	b.n	8007fcc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007f9a:	6839      	ldr	r1, [r7, #0]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f000 fc0d 	bl	80087bc <USBD_GetConfig>
      break;
 8007fa2:	e013      	b.n	8007fcc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007fa4:	6839      	ldr	r1, [r7, #0]
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 fc3c 	bl	8008824 <USBD_GetStatus>
      break;
 8007fac:	e00e      	b.n	8007fcc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8007fae:	6839      	ldr	r1, [r7, #0]
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	f000 fc6a 	bl	800888a <USBD_SetFeature>
      break;
 8007fb6:	e009      	b.n	8007fcc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007fb8:	6839      	ldr	r1, [r7, #0]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fc79 	bl	80088b2 <USBD_ClrFeature>
      break;
 8007fc0:	e004      	b.n	8007fcc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 fccf 	bl	8008968 <USBD_CtlError>
      break;
 8007fca:	bf00      	nop
    }
    break;
 8007fcc:	e004      	b.n	8007fd8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f000 fcc9 	bl	8008968 <USBD_CtlError>
    break;
 8007fd6:	bf00      	nop
  }

  return ret;
 8007fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3710      	adds	r7, #16
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop

08007fe4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	b084      	sub	sp, #16
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	781b      	ldrb	r3, [r3, #0]
 8007ff6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ffa:	2b20      	cmp	r3, #32
 8007ffc:	d003      	beq.n	8008006 <USBD_StdItfReq+0x22>
 8007ffe:	2b40      	cmp	r3, #64	; 0x40
 8008000:	d001      	beq.n	8008006 <USBD_StdItfReq+0x22>
 8008002:	2b00      	cmp	r3, #0
 8008004:	d12a      	bne.n	800805c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800c:	3b01      	subs	r3, #1
 800800e:	2b02      	cmp	r3, #2
 8008010:	d81d      	bhi.n	800804e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	889b      	ldrh	r3, [r3, #4]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	2b01      	cmp	r3, #1
 800801a:	d813      	bhi.n	8008044 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	4798      	blx	r3
 800802a:	4603      	mov	r3, r0
 800802c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	88db      	ldrh	r3, [r3, #6]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d110      	bne.n	8008058 <USBD_StdItfReq+0x74>
 8008036:	7bfb      	ldrb	r3, [r7, #15]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10d      	bne.n	8008058 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f000 fd5e 	bl	8008afe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008042:	e009      	b.n	8008058 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008044:	6839      	ldr	r1, [r7, #0]
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 fc8e 	bl	8008968 <USBD_CtlError>
      break;
 800804c:	e004      	b.n	8008058 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800804e:	6839      	ldr	r1, [r7, #0]
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 fc89 	bl	8008968 <USBD_CtlError>
      break;
 8008056:	e000      	b.n	800805a <USBD_StdItfReq+0x76>
      break;
 8008058:	bf00      	nop
    }
    break;
 800805a:	e004      	b.n	8008066 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fc82 	bl	8008968 <USBD_CtlError>
    break;
 8008064:	bf00      	nop
  }

  return ret;
 8008066:	7bfb      	ldrb	r3, [r7, #15]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3710      	adds	r7, #16
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}

08008070 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b084      	sub	sp, #16
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
 8008078:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800807a:	2300      	movs	r3, #0
 800807c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	889b      	ldrh	r3, [r3, #4]
 8008082:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	781b      	ldrb	r3, [r3, #0]
 8008088:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800808c:	2b20      	cmp	r3, #32
 800808e:	d004      	beq.n	800809a <USBD_StdEPReq+0x2a>
 8008090:	2b40      	cmp	r3, #64	; 0x40
 8008092:	d002      	beq.n	800809a <USBD_StdEPReq+0x2a>
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00a      	beq.n	80080ae <USBD_StdEPReq+0x3e>
 8008098:	e135      	b.n	8008306 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80080a0:	689b      	ldr	r3, [r3, #8]
 80080a2:	6839      	ldr	r1, [r7, #0]
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	4798      	blx	r3
 80080a8:	4603      	mov	r3, r0
 80080aa:	73fb      	strb	r3, [r7, #15]
    break;
 80080ac:	e130      	b.n	8008310 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	785b      	ldrb	r3, [r3, #1]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d03e      	beq.n	8008134 <USBD_StdEPReq+0xc4>
 80080b6:	2b03      	cmp	r3, #3
 80080b8:	d002      	beq.n	80080c0 <USBD_StdEPReq+0x50>
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d077      	beq.n	80081ae <USBD_StdEPReq+0x13e>
 80080be:	e11c      	b.n	80082fa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d002      	beq.n	80080d0 <USBD_StdEPReq+0x60>
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d015      	beq.n	80080fa <USBD_StdEPReq+0x8a>
 80080ce:	e02b      	b.n	8008128 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d00c      	beq.n	80080f0 <USBD_StdEPReq+0x80>
 80080d6:	7bbb      	ldrb	r3, [r7, #14]
 80080d8:	2b80      	cmp	r3, #128	; 0x80
 80080da:	d009      	beq.n	80080f0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80080dc:	7bbb      	ldrb	r3, [r7, #14]
 80080de:	4619      	mov	r1, r3
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f001 f903 	bl	80092ec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80080e6:	2180      	movs	r1, #128	; 0x80
 80080e8:	6878      	ldr	r0, [r7, #4]
 80080ea:	f001 f8ff 	bl	80092ec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80080ee:	e020      	b.n	8008132 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 80080f0:	6839      	ldr	r1, [r7, #0]
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 fc38 	bl	8008968 <USBD_CtlError>
        break;
 80080f8:	e01b      	b.n	8008132 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	885b      	ldrh	r3, [r3, #2]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d10e      	bne.n	8008120 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008102:	7bbb      	ldrb	r3, [r7, #14]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d00b      	beq.n	8008120 <USBD_StdEPReq+0xb0>
 8008108:	7bbb      	ldrb	r3, [r7, #14]
 800810a:	2b80      	cmp	r3, #128	; 0x80
 800810c:	d008      	beq.n	8008120 <USBD_StdEPReq+0xb0>
 800810e:	683b      	ldr	r3, [r7, #0]
 8008110:	88db      	ldrh	r3, [r3, #6]
 8008112:	2b00      	cmp	r3, #0
 8008114:	d104      	bne.n	8008120 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 f8e6 	bl	80092ec <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fcec 	bl	8008afe <USBD_CtlSendStatus>

        break;
 8008126:	e004      	b.n	8008132 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fc1c 	bl	8008968 <USBD_CtlError>
        break;
 8008130:	bf00      	nop
      }
      break;
 8008132:	e0e7      	b.n	8008304 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800813a:	2b02      	cmp	r3, #2
 800813c:	d002      	beq.n	8008144 <USBD_StdEPReq+0xd4>
 800813e:	2b03      	cmp	r3, #3
 8008140:	d015      	beq.n	800816e <USBD_StdEPReq+0xfe>
 8008142:	e02d      	b.n	80081a0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008144:	7bbb      	ldrb	r3, [r7, #14]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d00c      	beq.n	8008164 <USBD_StdEPReq+0xf4>
 800814a:	7bbb      	ldrb	r3, [r7, #14]
 800814c:	2b80      	cmp	r3, #128	; 0x80
 800814e:	d009      	beq.n	8008164 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008150:	7bbb      	ldrb	r3, [r7, #14]
 8008152:	4619      	mov	r1, r3
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f001 f8c9 	bl	80092ec <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800815a:	2180      	movs	r1, #128	; 0x80
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f001 f8c5 	bl	80092ec <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008162:	e023      	b.n	80081ac <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008164:	6839      	ldr	r1, [r7, #0]
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fbfe 	bl	8008968 <USBD_CtlError>
        break;
 800816c:	e01e      	b.n	80081ac <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	885b      	ldrh	r3, [r3, #2]
 8008172:	2b00      	cmp	r3, #0
 8008174:	d119      	bne.n	80081aa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008176:	7bbb      	ldrb	r3, [r7, #14]
 8008178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800817c:	2b00      	cmp	r3, #0
 800817e:	d004      	beq.n	800818a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 f8d0 	bl	800932a <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f000 fcb7 	bl	8008afe <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008196:	689b      	ldr	r3, [r3, #8]
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	4798      	blx	r3
        }
        break;
 800819e:	e004      	b.n	80081aa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80081a0:	6839      	ldr	r1, [r7, #0]
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 fbe0 	bl	8008968 <USBD_CtlError>
        break;
 80081a8:	e000      	b.n	80081ac <USBD_StdEPReq+0x13c>
        break;
 80081aa:	bf00      	nop
      }
      break;
 80081ac:	e0aa      	b.n	8008304 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d002      	beq.n	80081be <USBD_StdEPReq+0x14e>
 80081b8:	2b03      	cmp	r3, #3
 80081ba:	d032      	beq.n	8008222 <USBD_StdEPReq+0x1b2>
 80081bc:	e097      	b.n	80082ee <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80081be:	7bbb      	ldrb	r3, [r7, #14]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d007      	beq.n	80081d4 <USBD_StdEPReq+0x164>
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b80      	cmp	r3, #128	; 0x80
 80081c8:	d004      	beq.n	80081d4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fbcb 	bl	8008968 <USBD_CtlError>
          break;
 80081d2:	e091      	b.n	80082f8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	da0b      	bge.n	80081f4 <USBD_StdEPReq+0x184>
 80081dc:	7bbb      	ldrb	r3, [r7, #14]
 80081de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80081e2:	4613      	mov	r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4413      	add	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	3310      	adds	r3, #16
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	4413      	add	r3, r2
 80081f0:	3304      	adds	r3, #4
 80081f2:	e00b      	b.n	800820c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80081f4:	7bbb      	ldrb	r3, [r7, #14]
 80081f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80081fa:	4613      	mov	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4413      	add	r3, r2
 8008200:	009b      	lsls	r3, r3, #2
 8008202:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	4413      	add	r3, r2
 800820a:	3304      	adds	r3, #4
 800820c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	2200      	movs	r2, #0
 8008212:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008214:	68bb      	ldr	r3, [r7, #8]
 8008216:	2202      	movs	r2, #2
 8008218:	4619      	mov	r1, r3
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f000 fc15 	bl	8008a4a <USBD_CtlSendData>
        break;
 8008220:	e06a      	b.n	80082f8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008222:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008226:	2b00      	cmp	r3, #0
 8008228:	da11      	bge.n	800824e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800822a:	7bbb      	ldrb	r3, [r7, #14]
 800822c:	f003 020f 	and.w	r2, r3, #15
 8008230:	6879      	ldr	r1, [r7, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	009b      	lsls	r3, r3, #2
 8008236:	4413      	add	r3, r2
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	440b      	add	r3, r1
 800823c:	3324      	adds	r3, #36	; 0x24
 800823e:	881b      	ldrh	r3, [r3, #0]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d117      	bne.n	8008274 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008244:	6839      	ldr	r1, [r7, #0]
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 fb8e 	bl	8008968 <USBD_CtlError>
            break;
 800824c:	e054      	b.n	80082f8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	f003 020f 	and.w	r2, r3, #15
 8008254:	6879      	ldr	r1, [r7, #4]
 8008256:	4613      	mov	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4413      	add	r3, r2
 800825c:	009b      	lsls	r3, r3, #2
 800825e:	440b      	add	r3, r1
 8008260:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008264:	881b      	ldrh	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d104      	bne.n	8008274 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800826a:	6839      	ldr	r1, [r7, #0]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f000 fb7b 	bl	8008968 <USBD_CtlError>
            break;
 8008272:	e041      	b.n	80082f8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008274:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008278:	2b00      	cmp	r3, #0
 800827a:	da0b      	bge.n	8008294 <USBD_StdEPReq+0x224>
 800827c:	7bbb      	ldrb	r3, [r7, #14]
 800827e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008282:	4613      	mov	r3, r2
 8008284:	009b      	lsls	r3, r3, #2
 8008286:	4413      	add	r3, r2
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	3310      	adds	r3, #16
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	4413      	add	r3, r2
 8008290:	3304      	adds	r3, #4
 8008292:	e00b      	b.n	80082ac <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008294:	7bbb      	ldrb	r3, [r7, #14]
 8008296:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800829a:	4613      	mov	r3, r2
 800829c:	009b      	lsls	r3, r3, #2
 800829e:	4413      	add	r3, r2
 80082a0:	009b      	lsls	r3, r3, #2
 80082a2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80082a6:	687a      	ldr	r2, [r7, #4]
 80082a8:	4413      	add	r3, r2
 80082aa:	3304      	adds	r3, #4
 80082ac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80082ae:	7bbb      	ldrb	r3, [r7, #14]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d002      	beq.n	80082ba <USBD_StdEPReq+0x24a>
 80082b4:	7bbb      	ldrb	r3, [r7, #14]
 80082b6:	2b80      	cmp	r3, #128	; 0x80
 80082b8:	d103      	bne.n	80082c2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2200      	movs	r2, #0
 80082be:	601a      	str	r2, [r3, #0]
 80082c0:	e00e      	b.n	80082e0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80082c2:	7bbb      	ldrb	r3, [r7, #14]
 80082c4:	4619      	mov	r1, r3
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f001 f84e 	bl	8009368 <USBD_LL_IsStallEP>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d003      	beq.n	80082da <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2201      	movs	r2, #1
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	e002      	b.n	80082e0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 80082da:	68bb      	ldr	r3, [r7, #8]
 80082dc:	2200      	movs	r2, #0
 80082de:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80082e0:	68bb      	ldr	r3, [r7, #8]
 80082e2:	2202      	movs	r2, #2
 80082e4:	4619      	mov	r1, r3
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f000 fbaf 	bl	8008a4a <USBD_CtlSendData>
          break;
 80082ec:	e004      	b.n	80082f8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f000 fb39 	bl	8008968 <USBD_CtlError>
        break;
 80082f6:	bf00      	nop
      }
      break;
 80082f8:	e004      	b.n	8008304 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f000 fb33 	bl	8008968 <USBD_CtlError>
      break;
 8008302:	bf00      	nop
    }
    break;
 8008304:	e004      	b.n	8008310 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f000 fb2d 	bl	8008968 <USBD_CtlError>
    break;
 800830e:	bf00      	nop
  }

  return ret;
 8008310:	7bfb      	ldrb	r3, [r7, #15]
}
 8008312:	4618      	mov	r0, r3
 8008314:	3710      	adds	r7, #16
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
	...

0800831c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800832e:	2300      	movs	r3, #0
 8008330:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	885b      	ldrh	r3, [r3, #2]
 8008336:	0a1b      	lsrs	r3, r3, #8
 8008338:	b29b      	uxth	r3, r3
 800833a:	3b01      	subs	r3, #1
 800833c:	2b06      	cmp	r3, #6
 800833e:	f200 8128 	bhi.w	8008592 <USBD_GetDescriptor+0x276>
 8008342:	a201      	add	r2, pc, #4	; (adr r2, 8008348 <USBD_GetDescriptor+0x2c>)
 8008344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008348:	08008365 	.word	0x08008365
 800834c:	0800837d 	.word	0x0800837d
 8008350:	080083bd 	.word	0x080083bd
 8008354:	08008593 	.word	0x08008593
 8008358:	08008593 	.word	0x08008593
 800835c:	08008533 	.word	0x08008533
 8008360:	0800855f 	.word	0x0800855f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	7c12      	ldrb	r2, [r2, #16]
 8008370:	f107 0108 	add.w	r1, r7, #8
 8008374:	4610      	mov	r0, r2
 8008376:	4798      	blx	r3
 8008378:	60f8      	str	r0, [r7, #12]
    break;
 800837a:	e112      	b.n	80085a2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	7c1b      	ldrb	r3, [r3, #16]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d10d      	bne.n	80083a0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800838a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800838c:	f107 0208 	add.w	r2, r7, #8
 8008390:	4610      	mov	r0, r2
 8008392:	4798      	blx	r3
 8008394:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	3301      	adds	r3, #1
 800839a:	2202      	movs	r2, #2
 800839c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800839e:	e100      	b.n	80085a2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a8:	f107 0208 	add.w	r2, r7, #8
 80083ac:	4610      	mov	r0, r2
 80083ae:	4798      	blx	r3
 80083b0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	3301      	adds	r3, #1
 80083b6:	2202      	movs	r2, #2
 80083b8:	701a      	strb	r2, [r3, #0]
    break;
 80083ba:	e0f2      	b.n	80085a2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	885b      	ldrh	r3, [r3, #2]
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b05      	cmp	r3, #5
 80083c4:	f200 80ac 	bhi.w	8008520 <USBD_GetDescriptor+0x204>
 80083c8:	a201      	add	r2, pc, #4	; (adr r2, 80083d0 <USBD_GetDescriptor+0xb4>)
 80083ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ce:	bf00      	nop
 80083d0:	080083e9 	.word	0x080083e9
 80083d4:	0800841d 	.word	0x0800841d
 80083d8:	08008451 	.word	0x08008451
 80083dc:	08008485 	.word	0x08008485
 80083e0:	080084b9 	.word	0x080084b9
 80083e4:	080084ed 	.word	0x080084ed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d00b      	beq.n	800840c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083fa:	685b      	ldr	r3, [r3, #4]
 80083fc:	687a      	ldr	r2, [r7, #4]
 80083fe:	7c12      	ldrb	r2, [r2, #16]
 8008400:	f107 0108 	add.w	r1, r7, #8
 8008404:	4610      	mov	r0, r2
 8008406:	4798      	blx	r3
 8008408:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800840a:	e091      	b.n	8008530 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800840c:	6839      	ldr	r1, [r7, #0]
 800840e:	6878      	ldr	r0, [r7, #4]
 8008410:	f000 faaa 	bl	8008968 <USBD_CtlError>
        err++;
 8008414:	7afb      	ldrb	r3, [r7, #11]
 8008416:	3301      	adds	r3, #1
 8008418:	72fb      	strb	r3, [r7, #11]
      break;
 800841a:	e089      	b.n	8008530 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008422:	689b      	ldr	r3, [r3, #8]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00b      	beq.n	8008440 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800842e:	689b      	ldr	r3, [r3, #8]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	7c12      	ldrb	r2, [r2, #16]
 8008434:	f107 0108 	add.w	r1, r7, #8
 8008438:	4610      	mov	r0, r2
 800843a:	4798      	blx	r3
 800843c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800843e:	e077      	b.n	8008530 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f000 fa90 	bl	8008968 <USBD_CtlError>
        err++;
 8008448:	7afb      	ldrb	r3, [r7, #11]
 800844a:	3301      	adds	r3, #1
 800844c:	72fb      	strb	r3, [r7, #11]
      break;
 800844e:	e06f      	b.n	8008530 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008456:	68db      	ldr	r3, [r3, #12]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d00b      	beq.n	8008474 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	7c12      	ldrb	r2, [r2, #16]
 8008468:	f107 0108 	add.w	r1, r7, #8
 800846c:	4610      	mov	r0, r2
 800846e:	4798      	blx	r3
 8008470:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008472:	e05d      	b.n	8008530 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008474:	6839      	ldr	r1, [r7, #0]
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fa76 	bl	8008968 <USBD_CtlError>
        err++;
 800847c:	7afb      	ldrb	r3, [r7, #11]
 800847e:	3301      	adds	r3, #1
 8008480:	72fb      	strb	r3, [r7, #11]
      break;
 8008482:	e055      	b.n	8008530 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00b      	beq.n	80084a8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008496:	691b      	ldr	r3, [r3, #16]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	7c12      	ldrb	r2, [r2, #16]
 800849c:	f107 0108 	add.w	r1, r7, #8
 80084a0:	4610      	mov	r0, r2
 80084a2:	4798      	blx	r3
 80084a4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084a6:	e043      	b.n	8008530 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80084a8:	6839      	ldr	r1, [r7, #0]
 80084aa:	6878      	ldr	r0, [r7, #4]
 80084ac:	f000 fa5c 	bl	8008968 <USBD_CtlError>
        err++;
 80084b0:	7afb      	ldrb	r3, [r7, #11]
 80084b2:	3301      	adds	r3, #1
 80084b4:	72fb      	strb	r3, [r7, #11]
      break;
 80084b6:	e03b      	b.n	8008530 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084be:	695b      	ldr	r3, [r3, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	687a      	ldr	r2, [r7, #4]
 80084ce:	7c12      	ldrb	r2, [r2, #16]
 80084d0:	f107 0108 	add.w	r1, r7, #8
 80084d4:	4610      	mov	r0, r2
 80084d6:	4798      	blx	r3
 80084d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80084da:	e029      	b.n	8008530 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80084dc:	6839      	ldr	r1, [r7, #0]
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fa42 	bl	8008968 <USBD_CtlError>
        err++;
 80084e4:	7afb      	ldrb	r3, [r7, #11]
 80084e6:	3301      	adds	r3, #1
 80084e8:	72fb      	strb	r3, [r7, #11]
      break;
 80084ea:	e021      	b.n	8008530 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d00b      	beq.n	8008510 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80084fe:	699b      	ldr	r3, [r3, #24]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	7c12      	ldrb	r2, [r2, #16]
 8008504:	f107 0108 	add.w	r1, r7, #8
 8008508:	4610      	mov	r0, r2
 800850a:	4798      	blx	r3
 800850c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800850e:	e00f      	b.n	8008530 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008510:	6839      	ldr	r1, [r7, #0]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fa28 	bl	8008968 <USBD_CtlError>
        err++;
 8008518:	7afb      	ldrb	r3, [r7, #11]
 800851a:	3301      	adds	r3, #1
 800851c:	72fb      	strb	r3, [r7, #11]
      break;
 800851e:	e007      	b.n	8008530 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fa20 	bl	8008968 <USBD_CtlError>
      err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800852e:	bf00      	nop
    }
    break;
 8008530:	e037      	b.n	80085a2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	7c1b      	ldrb	r3, [r3, #16]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008542:	f107 0208 	add.w	r2, r7, #8
 8008546:	4610      	mov	r0, r2
 8008548:	4798      	blx	r3
 800854a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800854c:	e029      	b.n	80085a2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800854e:	6839      	ldr	r1, [r7, #0]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fa09 	bl	8008968 <USBD_CtlError>
      err++;
 8008556:	7afb      	ldrb	r3, [r7, #11]
 8008558:	3301      	adds	r3, #1
 800855a:	72fb      	strb	r3, [r7, #11]
    break;
 800855c:	e021      	b.n	80085a2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	7c1b      	ldrb	r3, [r3, #16]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d10d      	bne.n	8008582 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800856c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800856e:	f107 0208 	add.w	r2, r7, #8
 8008572:	4610      	mov	r0, r2
 8008574:	4798      	blx	r3
 8008576:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3301      	adds	r3, #1
 800857c:	2207      	movs	r2, #7
 800857e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008580:	e00f      	b.n	80085a2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 f9ef 	bl	8008968 <USBD_CtlError>
      err++;
 800858a:	7afb      	ldrb	r3, [r7, #11]
 800858c:	3301      	adds	r3, #1
 800858e:	72fb      	strb	r3, [r7, #11]
    break;
 8008590:	e007      	b.n	80085a2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008592:	6839      	ldr	r1, [r7, #0]
 8008594:	6878      	ldr	r0, [r7, #4]
 8008596:	f000 f9e7 	bl	8008968 <USBD_CtlError>
    err++;
 800859a:	7afb      	ldrb	r3, [r7, #11]
 800859c:	3301      	adds	r3, #1
 800859e:	72fb      	strb	r3, [r7, #11]
    break;
 80085a0:	bf00      	nop
  }

  if (err != 0U)
 80085a2:	7afb      	ldrb	r3, [r7, #11]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d11e      	bne.n	80085e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80085a8:	683b      	ldr	r3, [r7, #0]
 80085aa:	88db      	ldrh	r3, [r3, #6]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d016      	beq.n	80085de <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80085b0:	893b      	ldrh	r3, [r7, #8]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00e      	beq.n	80085d4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	88da      	ldrh	r2, [r3, #6]
 80085ba:	893b      	ldrh	r3, [r7, #8]
 80085bc:	4293      	cmp	r3, r2
 80085be:	bf28      	it	cs
 80085c0:	4613      	movcs	r3, r2
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80085c6:	893b      	ldrh	r3, [r7, #8]
 80085c8:	461a      	mov	r2, r3
 80085ca:	68f9      	ldr	r1, [r7, #12]
 80085cc:	6878      	ldr	r0, [r7, #4]
 80085ce:	f000 fa3c 	bl	8008a4a <USBD_CtlSendData>
 80085d2:	e009      	b.n	80085e8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80085d4:	6839      	ldr	r1, [r7, #0]
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f000 f9c6 	bl	8008968 <USBD_CtlError>
 80085dc:	e004      	b.n	80085e8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f000 fa8d 	bl	8008afe <USBD_CtlSendStatus>
 80085e4:	e000      	b.n	80085e8 <USBD_GetDescriptor+0x2cc>
    return;
 80085e6:	bf00      	nop
    }
  }
}
 80085e8:	3710      	adds	r7, #16
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
 80085ee:	bf00      	nop

080085f0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	889b      	ldrh	r3, [r3, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d130      	bne.n	8008664 <USBD_SetAddress+0x74>
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	88db      	ldrh	r3, [r3, #6]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d12c      	bne.n	8008664 <USBD_SetAddress+0x74>
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	885b      	ldrh	r3, [r3, #2]
 800860e:	2b7f      	cmp	r3, #127	; 0x7f
 8008610:	d828      	bhi.n	8008664 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	885b      	ldrh	r3, [r3, #2]
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800861c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008624:	2b03      	cmp	r3, #3
 8008626:	d104      	bne.n	8008632 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008628:	6839      	ldr	r1, [r7, #0]
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	f000 f99c 	bl	8008968 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008630:	e01c      	b.n	800866c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	7bfa      	ldrb	r2, [r7, #15]
 8008636:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800863a:	7bfb      	ldrb	r3, [r7, #15]
 800863c:	4619      	mov	r1, r3
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 febe 	bl	80093c0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008644:	6878      	ldr	r0, [r7, #4]
 8008646:	f000 fa5a 	bl	8008afe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800864a:	7bfb      	ldrb	r3, [r7, #15]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d004      	beq.n	800865a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2202      	movs	r2, #2
 8008654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008658:	e008      	b.n	800866c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	2201      	movs	r2, #1
 800865e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008662:	e003      	b.n	800866c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008664:	6839      	ldr	r1, [r7, #0]
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 f97e 	bl	8008968 <USBD_CtlError>
  }
}
 800866c:	bf00      	nop
 800866e:	3710      	adds	r7, #16
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800867e:	2300      	movs	r3, #0
 8008680:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	885b      	ldrh	r3, [r3, #2]
 8008686:	b2da      	uxtb	r2, r3
 8008688:	4b4b      	ldr	r3, [pc, #300]	; (80087b8 <USBD_SetConfig+0x144>)
 800868a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800868c:	4b4a      	ldr	r3, [pc, #296]	; (80087b8 <USBD_SetConfig+0x144>)
 800868e:	781b      	ldrb	r3, [r3, #0]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d905      	bls.n	80086a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008694:	6839      	ldr	r1, [r7, #0]
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 f966 	bl	8008968 <USBD_CtlError>
    return USBD_FAIL;
 800869c:	2303      	movs	r3, #3
 800869e:	e087      	b.n	80087b0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086a6:	2b02      	cmp	r3, #2
 80086a8:	d002      	beq.n	80086b0 <USBD_SetConfig+0x3c>
 80086aa:	2b03      	cmp	r3, #3
 80086ac:	d025      	beq.n	80086fa <USBD_SetConfig+0x86>
 80086ae:	e071      	b.n	8008794 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80086b0:	4b41      	ldr	r3, [pc, #260]	; (80087b8 <USBD_SetConfig+0x144>)
 80086b2:	781b      	ldrb	r3, [r3, #0]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d01c      	beq.n	80086f2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80086b8:	4b3f      	ldr	r3, [pc, #252]	; (80087b8 <USBD_SetConfig+0x144>)
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	461a      	mov	r2, r3
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80086c2:	4b3d      	ldr	r3, [pc, #244]	; (80087b8 <USBD_SetConfig+0x144>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f7ff f9a7 	bl	8007a1c <USBD_SetClassConfig>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d004      	beq.n	80086e2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80086d8:	6839      	ldr	r1, [r7, #0]
 80086da:	6878      	ldr	r0, [r7, #4]
 80086dc:	f000 f944 	bl	8008968 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80086e0:	e065      	b.n	80087ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f000 fa0b 	bl	8008afe <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2203      	movs	r2, #3
 80086ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80086f0:	e05d      	b.n	80087ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa03 	bl	8008afe <USBD_CtlSendStatus>
    break;
 80086f8:	e059      	b.n	80087ae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80086fa:	4b2f      	ldr	r3, [pc, #188]	; (80087b8 <USBD_SetConfig+0x144>)
 80086fc:	781b      	ldrb	r3, [r3, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d112      	bne.n	8008728 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2202      	movs	r2, #2
 8008706:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800870a:	4b2b      	ldr	r3, [pc, #172]	; (80087b8 <USBD_SetConfig+0x144>)
 800870c:	781b      	ldrb	r3, [r3, #0]
 800870e:	461a      	mov	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008714:	4b28      	ldr	r3, [pc, #160]	; (80087b8 <USBD_SetConfig+0x144>)
 8008716:	781b      	ldrb	r3, [r3, #0]
 8008718:	4619      	mov	r1, r3
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f7ff f99a 	bl	8007a54 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 f9ec 	bl	8008afe <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8008726:	e042      	b.n	80087ae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8008728:	4b23      	ldr	r3, [pc, #140]	; (80087b8 <USBD_SetConfig+0x144>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	461a      	mov	r2, r3
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	429a      	cmp	r2, r3
 8008734:	d02a      	beq.n	800878c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	b2db      	uxtb	r3, r3
 800873c:	4619      	mov	r1, r3
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7ff f988 	bl	8007a54 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8008744:	4b1c      	ldr	r3, [pc, #112]	; (80087b8 <USBD_SetConfig+0x144>)
 8008746:	781b      	ldrb	r3, [r3, #0]
 8008748:	461a      	mov	r2, r3
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800874e:	4b1a      	ldr	r3, [pc, #104]	; (80087b8 <USBD_SetConfig+0x144>)
 8008750:	781b      	ldrb	r3, [r3, #0]
 8008752:	4619      	mov	r1, r3
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f7ff f961 	bl	8007a1c <USBD_SetClassConfig>
 800875a:	4603      	mov	r3, r0
 800875c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800875e:	7bfb      	ldrb	r3, [r7, #15]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00f      	beq.n	8008784 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8008764:	6839      	ldr	r1, [r7, #0]
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 f8fe 	bl	8008968 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	685b      	ldr	r3, [r3, #4]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	4619      	mov	r1, r3
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff f96d 	bl	8007a54 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2202      	movs	r2, #2
 800877e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8008782:	e014      	b.n	80087ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 f9ba 	bl	8008afe <USBD_CtlSendStatus>
    break;
 800878a:	e010      	b.n	80087ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 f9b6 	bl	8008afe <USBD_CtlSendStatus>
    break;
 8008792:	e00c      	b.n	80087ae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f8e6 	bl	8008968 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800879c:	4b06      	ldr	r3, [pc, #24]	; (80087b8 <USBD_SetConfig+0x144>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f7ff f956 	bl	8007a54 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80087a8:	2303      	movs	r3, #3
 80087aa:	73fb      	strb	r3, [r7, #15]
    break;
 80087ac:	bf00      	nop
  }

  return ret;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}
 80087b8:	20000228 	.word	0x20000228

080087bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b082      	sub	sp, #8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	88db      	ldrh	r3, [r3, #6]
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d004      	beq.n	80087d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80087ce:	6839      	ldr	r1, [r7, #0]
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f8c9 	bl	8008968 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80087d6:	e021      	b.n	800881c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	db17      	blt.n	8008812 <USBD_GetConfig+0x56>
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	dd02      	ble.n	80087ec <USBD_GetConfig+0x30>
 80087e6:	2b03      	cmp	r3, #3
 80087e8:	d00b      	beq.n	8008802 <USBD_GetConfig+0x46>
 80087ea:	e012      	b.n	8008812 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	3308      	adds	r3, #8
 80087f6:	2201      	movs	r2, #1
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f925 	bl	8008a4a <USBD_CtlSendData>
      break;
 8008800:	e00c      	b.n	800881c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	3304      	adds	r3, #4
 8008806:	2201      	movs	r2, #1
 8008808:	4619      	mov	r1, r3
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f000 f91d 	bl	8008a4a <USBD_CtlSendData>
      break;
 8008810:	e004      	b.n	800881c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8008812:	6839      	ldr	r1, [r7, #0]
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 f8a7 	bl	8008968 <USBD_CtlError>
      break;
 800881a:	bf00      	nop
}
 800881c:	bf00      	nop
 800881e:	3708      	adds	r7, #8
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b082      	sub	sp, #8
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008834:	3b01      	subs	r3, #1
 8008836:	2b02      	cmp	r3, #2
 8008838:	d81e      	bhi.n	8008878 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	88db      	ldrh	r3, [r3, #6]
 800883e:	2b02      	cmp	r3, #2
 8008840:	d004      	beq.n	800884c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008842:	6839      	ldr	r1, [r7, #0]
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	f000 f88f 	bl	8008968 <USBD_CtlError>
      break;
 800884a:	e01a      	b.n	8008882 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f043 0202 	orr.w	r2, r3, #2
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	330c      	adds	r3, #12
 800886c:	2202      	movs	r2, #2
 800886e:	4619      	mov	r1, r3
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f000 f8ea 	bl	8008a4a <USBD_CtlSendData>
    break;
 8008876:	e004      	b.n	8008882 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008878:	6839      	ldr	r1, [r7, #0]
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f874 	bl	8008968 <USBD_CtlError>
    break;
 8008880:	bf00      	nop
  }
}
 8008882:	bf00      	nop
 8008884:	3708      	adds	r7, #8
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b082      	sub	sp, #8
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	885b      	ldrh	r3, [r3, #2]
 8008898:	2b01      	cmp	r3, #1
 800889a:	d106      	bne.n	80088aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80088a4:	6878      	ldr	r0, [r7, #4]
 80088a6:	f000 f92a 	bl	8008afe <USBD_CtlSendStatus>
  }
}
 80088aa:	bf00      	nop
 80088ac:	3708      	adds	r7, #8
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd80      	pop	{r7, pc}

080088b2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b082      	sub	sp, #8
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	6078      	str	r0, [r7, #4]
 80088ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088c2:	3b01      	subs	r3, #1
 80088c4:	2b02      	cmp	r3, #2
 80088c6:	d80b      	bhi.n	80088e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	885b      	ldrh	r3, [r3, #2]
 80088cc:	2b01      	cmp	r3, #1
 80088ce:	d10c      	bne.n	80088ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80088d8:	6878      	ldr	r0, [r7, #4]
 80088da:	f000 f910 	bl	8008afe <USBD_CtlSendStatus>
      }
      break;
 80088de:	e004      	b.n	80088ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80088e0:	6839      	ldr	r1, [r7, #0]
 80088e2:	6878      	ldr	r0, [r7, #4]
 80088e4:	f000 f840 	bl	8008968 <USBD_CtlError>
      break;
 80088e8:	e000      	b.n	80088ec <USBD_ClrFeature+0x3a>
      break;
 80088ea:	bf00      	nop
  }
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b084      	sub	sp, #16
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	781a      	ldrb	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	3301      	adds	r3, #1
 800890e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	781a      	ldrb	r2, [r3, #0]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3301      	adds	r3, #1
 800891c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800891e:	68f8      	ldr	r0, [r7, #12]
 8008920:	f7ff fad3 	bl	8007eca <SWAPBYTE>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	3301      	adds	r3, #1
 8008930:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	3301      	adds	r3, #1
 8008936:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008938:	68f8      	ldr	r0, [r7, #12]
 800893a:	f7ff fac6 	bl	8007eca <SWAPBYTE>
 800893e:	4603      	mov	r3, r0
 8008940:	461a      	mov	r2, r3
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	3301      	adds	r3, #1
 800894a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	3301      	adds	r3, #1
 8008950:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008952:	68f8      	ldr	r0, [r7, #12]
 8008954:	f7ff fab9 	bl	8007eca <SWAPBYTE>
 8008958:	4603      	mov	r3, r0
 800895a:	461a      	mov	r2, r3
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	80da      	strh	r2, [r3, #6]
}
 8008960:	bf00      	nop
 8008962:	3710      	adds	r7, #16
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}

08008968 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b082      	sub	sp, #8
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
 8008970:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008972:	2180      	movs	r1, #128	; 0x80
 8008974:	6878      	ldr	r0, [r7, #4]
 8008976:	f000 fcb9 	bl	80092ec <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800897a:	2100      	movs	r1, #0
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f000 fcb5 	bl	80092ec <USBD_LL_StallEP>
}
 8008982:	bf00      	nop
 8008984:	3708      	adds	r7, #8
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b086      	sub	sp, #24
 800898e:	af00      	add	r7, sp, #0
 8008990:	60f8      	str	r0, [r7, #12]
 8008992:	60b9      	str	r1, [r7, #8]
 8008994:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008996:	2300      	movs	r3, #0
 8008998:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d036      	beq.n	8008a0e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80089a4:	6938      	ldr	r0, [r7, #16]
 80089a6:	f000 f836 	bl	8008a16 <USBD_GetLen>
 80089aa:	4603      	mov	r3, r0
 80089ac:	3301      	adds	r3, #1
 80089ae:	b29b      	uxth	r3, r3
 80089b0:	005b      	lsls	r3, r3, #1
 80089b2:	b29a      	uxth	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80089b8:	7dfb      	ldrb	r3, [r7, #23]
 80089ba:	68ba      	ldr	r2, [r7, #8]
 80089bc:	4413      	add	r3, r2
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	7812      	ldrb	r2, [r2, #0]
 80089c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80089c4:	7dfb      	ldrb	r3, [r7, #23]
 80089c6:	3301      	adds	r3, #1
 80089c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80089ca:	7dfb      	ldrb	r3, [r7, #23]
 80089cc:	68ba      	ldr	r2, [r7, #8]
 80089ce:	4413      	add	r3, r2
 80089d0:	2203      	movs	r2, #3
 80089d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80089d4:	7dfb      	ldrb	r3, [r7, #23]
 80089d6:	3301      	adds	r3, #1
 80089d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80089da:	e013      	b.n	8008a04 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80089dc:	7dfb      	ldrb	r3, [r7, #23]
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	4413      	add	r3, r2
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	7812      	ldrb	r2, [r2, #0]
 80089e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	3301      	adds	r3, #1
 80089ec:	613b      	str	r3, [r7, #16]
    idx++;
 80089ee:	7dfb      	ldrb	r3, [r7, #23]
 80089f0:	3301      	adds	r3, #1
 80089f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80089f4:	7dfb      	ldrb	r3, [r7, #23]
 80089f6:	68ba      	ldr	r2, [r7, #8]
 80089f8:	4413      	add	r3, r2
 80089fa:	2200      	movs	r2, #0
 80089fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80089fe:	7dfb      	ldrb	r3, [r7, #23]
 8008a00:	3301      	adds	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008a04:	693b      	ldr	r3, [r7, #16]
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d1e7      	bne.n	80089dc <USBD_GetString+0x52>
 8008a0c:	e000      	b.n	8008a10 <USBD_GetString+0x86>
    return;
 8008a0e:	bf00      	nop
  }
}
 8008a10:	3718      	adds	r7, #24
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b085      	sub	sp, #20
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008a26:	e005      	b.n	8008a34 <USBD_GetLen+0x1e>
  {
    len++;
 8008a28:	7bfb      	ldrb	r3, [r7, #15]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	3301      	adds	r3, #1
 8008a32:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	781b      	ldrb	r3, [r3, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1f5      	bne.n	8008a28 <USBD_GetLen+0x12>
  }

  return len;
 8008a3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3714      	adds	r7, #20
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b084      	sub	sp, #16
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	60f8      	str	r0, [r7, #12]
 8008a52:	60b9      	str	r1, [r7, #8]
 8008a54:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	2202      	movs	r2, #2
 8008a5a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	687a      	ldr	r2, [r7, #4]
 8008a62:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	2100      	movs	r1, #0
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f000 fcc4 	bl	80093fe <USBD_LL_Transmit>

  return USBD_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	2100      	movs	r1, #0
 8008a92:	68f8      	ldr	r0, [r7, #12]
 8008a94:	f000 fcb3 	bl	80093fe <USBD_LL_Transmit>

  return USBD_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3710      	adds	r7, #16
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}

08008aa2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008aa2:	b580      	push	{r7, lr}
 8008aa4:	b084      	sub	sp, #16
 8008aa6:	af00      	add	r7, sp, #0
 8008aa8:	60f8      	str	r0, [r7, #12]
 8008aaa:	60b9      	str	r1, [r7, #8]
 8008aac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	2203      	movs	r2, #3
 8008ab2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	687a      	ldr	r2, [r7, #4]
 8008aba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68ba      	ldr	r2, [r7, #8]
 8008aca:	2100      	movs	r1, #0
 8008acc:	68f8      	ldr	r0, [r7, #12]
 8008ace:	f000 fcb7 	bl	8009440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008ad2:	2300      	movs	r3, #0
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68ba      	ldr	r2, [r7, #8]
 8008aec:	2100      	movs	r1, #0
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 fca6 	bl	8009440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008af4:	2300      	movs	r3, #0
}
 8008af6:	4618      	mov	r0, r3
 8008af8:	3710      	adds	r7, #16
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2204      	movs	r2, #4
 8008b0a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008b0e:	2300      	movs	r3, #0
 8008b10:	2200      	movs	r2, #0
 8008b12:	2100      	movs	r1, #0
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fc72 	bl	80093fe <USBD_LL_Transmit>

  return USBD_OK;
 8008b1a:	2300      	movs	r3, #0
}
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	3708      	adds	r7, #8
 8008b20:	46bd      	mov	sp, r7
 8008b22:	bd80      	pop	{r7, pc}

08008b24 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2205      	movs	r2, #5
 8008b30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b34:	2300      	movs	r3, #0
 8008b36:	2200      	movs	r2, #0
 8008b38:	2100      	movs	r1, #0
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 fc80 	bl	8009440 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
	...

08008b4c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008b50:	2200      	movs	r2, #0
 8008b52:	4912      	ldr	r1, [pc, #72]	; (8008b9c <MX_USB_DEVICE_Init+0x50>)
 8008b54:	4812      	ldr	r0, [pc, #72]	; (8008ba0 <MX_USB_DEVICE_Init+0x54>)
 8008b56:	f7fe fef3 	bl	8007940 <USBD_Init>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008b60:	f7f8 fc62 	bl	8001428 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008b64:	490f      	ldr	r1, [pc, #60]	; (8008ba4 <MX_USB_DEVICE_Init+0x58>)
 8008b66:	480e      	ldr	r0, [pc, #56]	; (8008ba0 <MX_USB_DEVICE_Init+0x54>)
 8008b68:	f7fe ff20 	bl	80079ac <USBD_RegisterClass>
 8008b6c:	4603      	mov	r3, r0
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d001      	beq.n	8008b76 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008b72:	f7f8 fc59 	bl	8001428 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008b76:	490c      	ldr	r1, [pc, #48]	; (8008ba8 <MX_USB_DEVICE_Init+0x5c>)
 8008b78:	4809      	ldr	r0, [pc, #36]	; (8008ba0 <MX_USB_DEVICE_Init+0x54>)
 8008b7a:	f7fe fe75 	bl	8007868 <USBD_CDC_RegisterInterface>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008b84:	f7f8 fc50 	bl	8001428 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008b88:	4805      	ldr	r0, [pc, #20]	; (8008ba0 <MX_USB_DEVICE_Init+0x54>)
 8008b8a:	f7fe ff30 	bl	80079ee <USBD_Start>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008b94:	f7f8 fc48 	bl	8001428 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008b98:	bf00      	nop
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000154 	.word	0x20000154
 8008ba0:	2000066c 	.word	0x2000066c
 8008ba4:	2000003c 	.word	0x2000003c
 8008ba8:	20000140 	.word	0x20000140

08008bac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	4905      	ldr	r1, [pc, #20]	; (8008bc8 <CDC_Init_FS+0x1c>)
 8008bb4:	4805      	ldr	r0, [pc, #20]	; (8008bcc <CDC_Init_FS+0x20>)
 8008bb6:	f7fe fe6c 	bl	8007892 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008bba:	4905      	ldr	r1, [pc, #20]	; (8008bd0 <CDC_Init_FS+0x24>)
 8008bbc:	4803      	ldr	r0, [pc, #12]	; (8008bcc <CDC_Init_FS+0x20>)
 8008bbe:	f7fe fe81 	bl	80078c4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008bc2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	bd80      	pop	{r7, pc}
 8008bc8:	2000113c 	.word	0x2000113c
 8008bcc:	2000066c 	.word	0x2000066c
 8008bd0:	2000093c 	.word	0x2000093c

08008bd4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008bd8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	4603      	mov	r3, r0
 8008bec:	6039      	str	r1, [r7, #0]
 8008bee:	71fb      	strb	r3, [r7, #7]
 8008bf0:	4613      	mov	r3, r2
 8008bf2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b23      	cmp	r3, #35	; 0x23
 8008bf8:	d84a      	bhi.n	8008c90 <CDC_Control_FS+0xac>
 8008bfa:	a201      	add	r2, pc, #4	; (adr r2, 8008c00 <CDC_Control_FS+0x1c>)
 8008bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c00:	08008c91 	.word	0x08008c91
 8008c04:	08008c91 	.word	0x08008c91
 8008c08:	08008c91 	.word	0x08008c91
 8008c0c:	08008c91 	.word	0x08008c91
 8008c10:	08008c91 	.word	0x08008c91
 8008c14:	08008c91 	.word	0x08008c91
 8008c18:	08008c91 	.word	0x08008c91
 8008c1c:	08008c91 	.word	0x08008c91
 8008c20:	08008c91 	.word	0x08008c91
 8008c24:	08008c91 	.word	0x08008c91
 8008c28:	08008c91 	.word	0x08008c91
 8008c2c:	08008c91 	.word	0x08008c91
 8008c30:	08008c91 	.word	0x08008c91
 8008c34:	08008c91 	.word	0x08008c91
 8008c38:	08008c91 	.word	0x08008c91
 8008c3c:	08008c91 	.word	0x08008c91
 8008c40:	08008c91 	.word	0x08008c91
 8008c44:	08008c91 	.word	0x08008c91
 8008c48:	08008c91 	.word	0x08008c91
 8008c4c:	08008c91 	.word	0x08008c91
 8008c50:	08008c91 	.word	0x08008c91
 8008c54:	08008c91 	.word	0x08008c91
 8008c58:	08008c91 	.word	0x08008c91
 8008c5c:	08008c91 	.word	0x08008c91
 8008c60:	08008c91 	.word	0x08008c91
 8008c64:	08008c91 	.word	0x08008c91
 8008c68:	08008c91 	.word	0x08008c91
 8008c6c:	08008c91 	.word	0x08008c91
 8008c70:	08008c91 	.word	0x08008c91
 8008c74:	08008c91 	.word	0x08008c91
 8008c78:	08008c91 	.word	0x08008c91
 8008c7c:	08008c91 	.word	0x08008c91
 8008c80:	08008c91 	.word	0x08008c91
 8008c84:	08008c91 	.word	0x08008c91
 8008c88:	08008c91 	.word	0x08008c91
 8008c8c:	08008c91 	.word	0x08008c91
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008c90:	bf00      	nop
  }

  return (USBD_OK);
 8008c92:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b082      	sub	sp, #8
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
 8008ca8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008caa:	6879      	ldr	r1, [r7, #4]
 8008cac:	4805      	ldr	r0, [pc, #20]	; (8008cc4 <CDC_Receive_FS+0x24>)
 8008cae:	f7fe fe09 	bl	80078c4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008cb2:	4804      	ldr	r0, [pc, #16]	; (8008cc4 <CDC_Receive_FS+0x24>)
 8008cb4:	f7fe fe1a 	bl	80078ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008cb8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3708      	adds	r7, #8
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	2000066c 	.word	0x2000066c

08008cc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b087      	sub	sp, #28
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008cda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	371c      	adds	r7, #28
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
	...

08008cec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	4603      	mov	r3, r0
 8008cf4:	6039      	str	r1, [r7, #0]
 8008cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	2212      	movs	r2, #18
 8008cfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008cfe:	4b03      	ldr	r3, [pc, #12]	; (8008d0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	370c      	adds	r7, #12
 8008d04:	46bd      	mov	sp, r7
 8008d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0a:	4770      	bx	lr
 8008d0c:	20000170 	.word	0x20000170

08008d10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b083      	sub	sp, #12
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	4603      	mov	r3, r0
 8008d18:	6039      	str	r1, [r7, #0]
 8008d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	2204      	movs	r2, #4
 8008d20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008d22:	4b03      	ldr	r3, [pc, #12]	; (8008d30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr
 8008d30:	20000184 	.word	0x20000184

08008d34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b082      	sub	sp, #8
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	6039      	str	r1, [r7, #0]
 8008d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d105      	bne.n	8008d52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d46:	683a      	ldr	r2, [r7, #0]
 8008d48:	4907      	ldr	r1, [pc, #28]	; (8008d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d4a:	4808      	ldr	r0, [pc, #32]	; (8008d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8008d4c:	f7ff fe1d 	bl	800898a <USBD_GetString>
 8008d50:	e004      	b.n	8008d5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008d52:	683a      	ldr	r2, [r7, #0]
 8008d54:	4904      	ldr	r1, [pc, #16]	; (8008d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8008d56:	4805      	ldr	r0, [pc, #20]	; (8008d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8008d58:	f7ff fe17 	bl	800898a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008d5c:	4b02      	ldr	r3, [pc, #8]	; (8008d68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008d5e:	4618      	mov	r0, r3
 8008d60:	3708      	adds	r7, #8
 8008d62:	46bd      	mov	sp, r7
 8008d64:	bd80      	pop	{r7, pc}
 8008d66:	bf00      	nop
 8008d68:	2000193c 	.word	0x2000193c
 8008d6c:	0800a738 	.word	0x0800a738

08008d70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	b082      	sub	sp, #8
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	4603      	mov	r3, r0
 8008d78:	6039      	str	r1, [r7, #0]
 8008d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008d7c:	683a      	ldr	r2, [r7, #0]
 8008d7e:	4904      	ldr	r1, [pc, #16]	; (8008d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008d80:	4804      	ldr	r0, [pc, #16]	; (8008d94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008d82:	f7ff fe02 	bl	800898a <USBD_GetString>
  return USBD_StrDesc;
 8008d86:	4b02      	ldr	r3, [pc, #8]	; (8008d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3708      	adds	r7, #8
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}
 8008d90:	2000193c 	.word	0x2000193c
 8008d94:	0800a750 	.word	0x0800a750

08008d98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	4603      	mov	r3, r0
 8008da0:	6039      	str	r1, [r7, #0]
 8008da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	221a      	movs	r2, #26
 8008da8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008daa:	f000 f843 	bl	8008e34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008dae:	4b02      	ldr	r3, [pc, #8]	; (8008db8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3708      	adds	r7, #8
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20000188 	.word	0x20000188

08008dbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b082      	sub	sp, #8
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	6039      	str	r1, [r7, #0]
 8008dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008dc8:	79fb      	ldrb	r3, [r7, #7]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d105      	bne.n	8008dda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dce:	683a      	ldr	r2, [r7, #0]
 8008dd0:	4907      	ldr	r1, [pc, #28]	; (8008df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dd2:	4808      	ldr	r0, [pc, #32]	; (8008df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008dd4:	f7ff fdd9 	bl	800898a <USBD_GetString>
 8008dd8:	e004      	b.n	8008de4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008dda:	683a      	ldr	r2, [r7, #0]
 8008ddc:	4904      	ldr	r1, [pc, #16]	; (8008df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008dde:	4805      	ldr	r0, [pc, #20]	; (8008df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008de0:	f7ff fdd3 	bl	800898a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008de4:	4b02      	ldr	r3, [pc, #8]	; (8008df0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	2000193c 	.word	0x2000193c
 8008df4:	0800a764 	.word	0x0800a764

08008df8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b082      	sub	sp, #8
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	4603      	mov	r3, r0
 8008e00:	6039      	str	r1, [r7, #0]
 8008e02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e04:	79fb      	ldrb	r3, [r7, #7]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d105      	bne.n	8008e16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e0a:	683a      	ldr	r2, [r7, #0]
 8008e0c:	4907      	ldr	r1, [pc, #28]	; (8008e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e0e:	4808      	ldr	r0, [pc, #32]	; (8008e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e10:	f7ff fdbb 	bl	800898a <USBD_GetString>
 8008e14:	e004      	b.n	8008e20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008e16:	683a      	ldr	r2, [r7, #0]
 8008e18:	4904      	ldr	r1, [pc, #16]	; (8008e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008e1a:	4805      	ldr	r0, [pc, #20]	; (8008e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008e1c:	f7ff fdb5 	bl	800898a <USBD_GetString>
  }
  return USBD_StrDesc;
 8008e20:	4b02      	ldr	r3, [pc, #8]	; (8008e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3708      	adds	r7, #8
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
 8008e2a:	bf00      	nop
 8008e2c:	2000193c 	.word	0x2000193c
 8008e30:	0800a770 	.word	0x0800a770

08008e34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008e3a:	4b0f      	ldr	r3, [pc, #60]	; (8008e78 <Get_SerialNum+0x44>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008e40:	4b0e      	ldr	r3, [pc, #56]	; (8008e7c <Get_SerialNum+0x48>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008e46:	4b0e      	ldr	r3, [pc, #56]	; (8008e80 <Get_SerialNum+0x4c>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4413      	add	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d009      	beq.n	8008e6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008e5a:	2208      	movs	r2, #8
 8008e5c:	4909      	ldr	r1, [pc, #36]	; (8008e84 <Get_SerialNum+0x50>)
 8008e5e:	68f8      	ldr	r0, [r7, #12]
 8008e60:	f000 f814 	bl	8008e8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008e64:	2204      	movs	r2, #4
 8008e66:	4908      	ldr	r1, [pc, #32]	; (8008e88 <Get_SerialNum+0x54>)
 8008e68:	68b8      	ldr	r0, [r7, #8]
 8008e6a:	f000 f80f 	bl	8008e8c <IntToUnicode>
  }
}
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	1fff7a10 	.word	0x1fff7a10
 8008e7c:	1fff7a14 	.word	0x1fff7a14
 8008e80:	1fff7a18 	.word	0x1fff7a18
 8008e84:	2000018a 	.word	0x2000018a
 8008e88:	2000019a 	.word	0x2000019a

08008e8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	4613      	mov	r3, r2
 8008e98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	75fb      	strb	r3, [r7, #23]
 8008ea2:	e027      	b.n	8008ef4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	0f1b      	lsrs	r3, r3, #28
 8008ea8:	2b09      	cmp	r3, #9
 8008eaa:	d80b      	bhi.n	8008ec4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	0f1b      	lsrs	r3, r3, #28
 8008eb0:	b2da      	uxtb	r2, r3
 8008eb2:	7dfb      	ldrb	r3, [r7, #23]
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	4619      	mov	r1, r3
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	440b      	add	r3, r1
 8008ebc:	3230      	adds	r2, #48	; 0x30
 8008ebe:	b2d2      	uxtb	r2, r2
 8008ec0:	701a      	strb	r2, [r3, #0]
 8008ec2:	e00a      	b.n	8008eda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	0f1b      	lsrs	r3, r3, #28
 8008ec8:	b2da      	uxtb	r2, r3
 8008eca:	7dfb      	ldrb	r3, [r7, #23]
 8008ecc:	005b      	lsls	r3, r3, #1
 8008ece:	4619      	mov	r1, r3
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	440b      	add	r3, r1
 8008ed4:	3237      	adds	r2, #55	; 0x37
 8008ed6:	b2d2      	uxtb	r2, r2
 8008ed8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	005b      	lsls	r3, r3, #1
 8008ee4:	3301      	adds	r3, #1
 8008ee6:	68ba      	ldr	r2, [r7, #8]
 8008ee8:	4413      	add	r3, r2
 8008eea:	2200      	movs	r2, #0
 8008eec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008eee:	7dfb      	ldrb	r3, [r7, #23]
 8008ef0:	3301      	adds	r3, #1
 8008ef2:	75fb      	strb	r3, [r7, #23]
 8008ef4:	7dfa      	ldrb	r2, [r7, #23]
 8008ef6:	79fb      	ldrb	r3, [r7, #7]
 8008ef8:	429a      	cmp	r2, r3
 8008efa:	d3d3      	bcc.n	8008ea4 <IntToUnicode+0x18>
  }
}
 8008efc:	bf00      	nop
 8008efe:	371c      	adds	r7, #28
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b08a      	sub	sp, #40	; 0x28
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008f10:	f107 0314 	add.w	r3, r7, #20
 8008f14:	2200      	movs	r2, #0
 8008f16:	601a      	str	r2, [r3, #0]
 8008f18:	605a      	str	r2, [r3, #4]
 8008f1a:	609a      	str	r2, [r3, #8]
 8008f1c:	60da      	str	r2, [r3, #12]
 8008f1e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f28:	d13a      	bne.n	8008fa0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	613b      	str	r3, [r7, #16]
 8008f2e:	4b1e      	ldr	r3, [pc, #120]	; (8008fa8 <HAL_PCD_MspInit+0xa0>)
 8008f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f32:	4a1d      	ldr	r2, [pc, #116]	; (8008fa8 <HAL_PCD_MspInit+0xa0>)
 8008f34:	f043 0301 	orr.w	r3, r3, #1
 8008f38:	6313      	str	r3, [r2, #48]	; 0x30
 8008f3a:	4b1b      	ldr	r3, [pc, #108]	; (8008fa8 <HAL_PCD_MspInit+0xa0>)
 8008f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f3e:	f003 0301 	and.w	r3, r3, #1
 8008f42:	613b      	str	r3, [r7, #16]
 8008f44:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8008f46:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8008f4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f50:	2300      	movs	r3, #0
 8008f52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008f54:	2303      	movs	r3, #3
 8008f56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008f58:	230a      	movs	r3, #10
 8008f5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f5c:	f107 0314 	add.w	r3, r7, #20
 8008f60:	4619      	mov	r1, r3
 8008f62:	4812      	ldr	r0, [pc, #72]	; (8008fac <HAL_PCD_MspInit+0xa4>)
 8008f64:	f7f9 fc7a 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008f68:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <HAL_PCD_MspInit+0xa0>)
 8008f6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f6c:	4a0e      	ldr	r2, [pc, #56]	; (8008fa8 <HAL_PCD_MspInit+0xa0>)
 8008f6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f72:	6353      	str	r3, [r2, #52]	; 0x34
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]
 8008f78:	4b0b      	ldr	r3, [pc, #44]	; (8008fa8 <HAL_PCD_MspInit+0xa0>)
 8008f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f7c:	4a0a      	ldr	r2, [pc, #40]	; (8008fa8 <HAL_PCD_MspInit+0xa0>)
 8008f7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008f82:	6453      	str	r3, [r2, #68]	; 0x44
 8008f84:	4b08      	ldr	r3, [pc, #32]	; (8008fa8 <HAL_PCD_MspInit+0xa0>)
 8008f86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008f8c:	60fb      	str	r3, [r7, #12]
 8008f8e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008f90:	2200      	movs	r2, #0
 8008f92:	2100      	movs	r1, #0
 8008f94:	2043      	movs	r0, #67	; 0x43
 8008f96:	f7f8 fe64 	bl	8001c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008f9a:	2043      	movs	r0, #67	; 0x43
 8008f9c:	f7f8 fe7d 	bl	8001c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008fa0:	bf00      	nop
 8008fa2:	3728      	adds	r7, #40	; 0x28
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	40023800 	.word	0x40023800
 8008fac:	40020000 	.word	0x40020000

08008fb0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b082      	sub	sp, #8
 8008fb4:	af00      	add	r7, sp, #0
 8008fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	4610      	mov	r0, r2
 8008fc8:	f7fe fd5c 	bl	8007a84 <USBD_LL_SetupStage>
}
 8008fcc:	bf00      	nop
 8008fce:	3708      	adds	r7, #8
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fd4:	b580      	push	{r7, lr}
 8008fd6:	b082      	sub	sp, #8
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	460b      	mov	r3, r1
 8008fde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008fe6:	78fa      	ldrb	r2, [r7, #3]
 8008fe8:	6879      	ldr	r1, [r7, #4]
 8008fea:	4613      	mov	r3, r2
 8008fec:	00db      	lsls	r3, r3, #3
 8008fee:	1a9b      	subs	r3, r3, r2
 8008ff0:	009b      	lsls	r3, r3, #2
 8008ff2:	440b      	add	r3, r1
 8008ff4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	78fb      	ldrb	r3, [r7, #3]
 8008ffc:	4619      	mov	r1, r3
 8008ffe:	f7fe fd94 	bl	8007b2a <USBD_LL_DataOutStage>
}
 8009002:	bf00      	nop
 8009004:	3708      	adds	r7, #8
 8009006:	46bd      	mov	sp, r7
 8009008:	bd80      	pop	{r7, pc}

0800900a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800900a:	b580      	push	{r7, lr}
 800900c:	b082      	sub	sp, #8
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
 8009012:	460b      	mov	r3, r1
 8009014:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	4613      	mov	r3, r2
 8009022:	00db      	lsls	r3, r3, #3
 8009024:	1a9b      	subs	r3, r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	440b      	add	r3, r1
 800902a:	3348      	adds	r3, #72	; 0x48
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	78fb      	ldrb	r3, [r7, #3]
 8009030:	4619      	mov	r1, r3
 8009032:	f7fe fddd 	bl	8007bf0 <USBD_LL_DataInStage>
}
 8009036:	bf00      	nop
 8009038:	3708      	adds	r7, #8
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}

0800903e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800903e:	b580      	push	{r7, lr}
 8009040:	b082      	sub	sp, #8
 8009042:	af00      	add	r7, sp, #0
 8009044:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800904c:	4618      	mov	r0, r3
 800904e:	f7fe fee1 	bl	8007e14 <USBD_LL_SOF>
}
 8009052:	bf00      	nop
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800905a:	b580      	push	{r7, lr}
 800905c:	b084      	sub	sp, #16
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009062:	2301      	movs	r3, #1
 8009064:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800906e:	2300      	movs	r3, #0
 8009070:	73fb      	strb	r3, [r7, #15]
 8009072:	e008      	b.n	8009086 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	68db      	ldr	r3, [r3, #12]
 8009078:	2b02      	cmp	r3, #2
 800907a:	d102      	bne.n	8009082 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800907c:	2301      	movs	r3, #1
 800907e:	73fb      	strb	r3, [r7, #15]
 8009080:	e001      	b.n	8009086 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009082:	f7f8 f9d1 	bl	8001428 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800908c:	7bfa      	ldrb	r2, [r7, #15]
 800908e:	4611      	mov	r1, r2
 8009090:	4618      	mov	r0, r3
 8009092:	f7fe fe84 	bl	8007d9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800909c:	4618      	mov	r0, r3
 800909e:	f7fe fe3d 	bl	8007d1c <USBD_LL_Reset>
}
 80090a2:	bf00      	nop
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
	...

080090ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fe7f 	bl	8007dbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	687a      	ldr	r2, [r7, #4]
 80090cc:	6812      	ldr	r2, [r2, #0]
 80090ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80090d2:	f043 0301 	orr.w	r3, r3, #1
 80090d6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d005      	beq.n	80090ec <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80090e0:	4b04      	ldr	r3, [pc, #16]	; (80090f4 <HAL_PCD_SuspendCallback+0x48>)
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	4a03      	ldr	r2, [pc, #12]	; (80090f4 <HAL_PCD_SuspendCallback+0x48>)
 80090e6:	f043 0306 	orr.w	r3, r3, #6
 80090ea:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80090ec:	bf00      	nop
 80090ee:	3708      	adds	r7, #8
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}
 80090f4:	e000ed00 	.word	0xe000ed00

080090f8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009106:	4618      	mov	r0, r3
 8009108:	f7fe fe6e 	bl	8007de8 <USBD_LL_Resume>
}
 800910c:	bf00      	nop
 800910e:	3708      	adds	r7, #8
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009126:	78fa      	ldrb	r2, [r7, #3]
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f7fe fe99 	bl	8007e62 <USBD_LL_IsoOUTIncomplete>
}
 8009130:	bf00      	nop
 8009132:	3708      	adds	r7, #8
 8009134:	46bd      	mov	sp, r7
 8009136:	bd80      	pop	{r7, pc}

08009138 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
 8009140:	460b      	mov	r3, r1
 8009142:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800914a:	78fa      	ldrb	r2, [r7, #3]
 800914c:	4611      	mov	r1, r2
 800914e:	4618      	mov	r0, r3
 8009150:	f7fe fe7a 	bl	8007e48 <USBD_LL_IsoINIncomplete>
}
 8009154:	bf00      	nop
 8009156:	3708      	adds	r7, #8
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800916a:	4618      	mov	r0, r3
 800916c:	f7fe fe86 	bl	8007e7c <USBD_LL_DevConnected>
}
 8009170:	bf00      	nop
 8009172:	3708      	adds	r7, #8
 8009174:	46bd      	mov	sp, r7
 8009176:	bd80      	pop	{r7, pc}

08009178 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009186:	4618      	mov	r0, r3
 8009188:	f7fe fe83 	bl	8007e92 <USBD_LL_DevDisconnected>
}
 800918c:	bf00      	nop
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b082      	sub	sp, #8
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d13c      	bne.n	800921e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80091a4:	4a20      	ldr	r2, [pc, #128]	; (8009228 <USBD_LL_Init+0x94>)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	4a1e      	ldr	r2, [pc, #120]	; (8009228 <USBD_LL_Init+0x94>)
 80091b0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80091b4:	4b1c      	ldr	r3, [pc, #112]	; (8009228 <USBD_LL_Init+0x94>)
 80091b6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80091ba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80091bc:	4b1a      	ldr	r3, [pc, #104]	; (8009228 <USBD_LL_Init+0x94>)
 80091be:	2204      	movs	r2, #4
 80091c0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80091c2:	4b19      	ldr	r3, [pc, #100]	; (8009228 <USBD_LL_Init+0x94>)
 80091c4:	2202      	movs	r2, #2
 80091c6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80091c8:	4b17      	ldr	r3, [pc, #92]	; (8009228 <USBD_LL_Init+0x94>)
 80091ca:	2200      	movs	r2, #0
 80091cc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80091ce:	4b16      	ldr	r3, [pc, #88]	; (8009228 <USBD_LL_Init+0x94>)
 80091d0:	2202      	movs	r2, #2
 80091d2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80091d4:	4b14      	ldr	r3, [pc, #80]	; (8009228 <USBD_LL_Init+0x94>)
 80091d6:	2200      	movs	r2, #0
 80091d8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80091da:	4b13      	ldr	r3, [pc, #76]	; (8009228 <USBD_LL_Init+0x94>)
 80091dc:	2200      	movs	r2, #0
 80091de:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80091e0:	4b11      	ldr	r3, [pc, #68]	; (8009228 <USBD_LL_Init+0x94>)
 80091e2:	2200      	movs	r2, #0
 80091e4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80091e6:	4b10      	ldr	r3, [pc, #64]	; (8009228 <USBD_LL_Init+0x94>)
 80091e8:	2200      	movs	r2, #0
 80091ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80091ec:	4b0e      	ldr	r3, [pc, #56]	; (8009228 <USBD_LL_Init+0x94>)
 80091ee:	2200      	movs	r2, #0
 80091f0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80091f2:	480d      	ldr	r0, [pc, #52]	; (8009228 <USBD_LL_Init+0x94>)
 80091f4:	f7f9 fcdc 	bl	8002bb0 <HAL_PCD_Init>
 80091f8:	4603      	mov	r3, r0
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d001      	beq.n	8009202 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80091fe:	f7f8 f913 	bl	8001428 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009202:	2180      	movs	r1, #128	; 0x80
 8009204:	4808      	ldr	r0, [pc, #32]	; (8009228 <USBD_LL_Init+0x94>)
 8009206:	f7fa fe3a 	bl	8003e7e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800920a:	2240      	movs	r2, #64	; 0x40
 800920c:	2100      	movs	r1, #0
 800920e:	4806      	ldr	r0, [pc, #24]	; (8009228 <USBD_LL_Init+0x94>)
 8009210:	f7fa fdee 	bl	8003df0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009214:	2280      	movs	r2, #128	; 0x80
 8009216:	2101      	movs	r1, #1
 8009218:	4803      	ldr	r0, [pc, #12]	; (8009228 <USBD_LL_Init+0x94>)
 800921a:	f7fa fde9 	bl	8003df0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800921e:	2300      	movs	r3, #0
}
 8009220:	4618      	mov	r0, r3
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20001b3c 	.word	0x20001b3c

0800922c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b084      	sub	sp, #16
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009234:	2300      	movs	r3, #0
 8009236:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009242:	4618      	mov	r0, r3
 8009244:	f7f9 fdd1 	bl	8002dea <HAL_PCD_Start>
 8009248:	4603      	mov	r3, r0
 800924a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800924c:	7bfb      	ldrb	r3, [r7, #15]
 800924e:	4618      	mov	r0, r3
 8009250:	f000 f92a 	bl	80094a8 <USBD_Get_USB_Status>
 8009254:	4603      	mov	r3, r0
 8009256:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009258:	7bbb      	ldrb	r3, [r7, #14]
}
 800925a:	4618      	mov	r0, r3
 800925c:	3710      	adds	r7, #16
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b084      	sub	sp, #16
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	4608      	mov	r0, r1
 800926c:	4611      	mov	r1, r2
 800926e:	461a      	mov	r2, r3
 8009270:	4603      	mov	r3, r0
 8009272:	70fb      	strb	r3, [r7, #3]
 8009274:	460b      	mov	r3, r1
 8009276:	70bb      	strb	r3, [r7, #2]
 8009278:	4613      	mov	r3, r2
 800927a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800927c:	2300      	movs	r3, #0
 800927e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009280:	2300      	movs	r3, #0
 8009282:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800928a:	78bb      	ldrb	r3, [r7, #2]
 800928c:	883a      	ldrh	r2, [r7, #0]
 800928e:	78f9      	ldrb	r1, [r7, #3]
 8009290:	f7fa f9b5 	bl	80035fe <HAL_PCD_EP_Open>
 8009294:	4603      	mov	r3, r0
 8009296:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	4618      	mov	r0, r3
 800929c:	f000 f904 	bl	80094a8 <USBD_Get_USB_Status>
 80092a0:	4603      	mov	r3, r0
 80092a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80092a6:	4618      	mov	r0, r3
 80092a8:	3710      	adds	r7, #16
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}

080092ae <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ae:	b580      	push	{r7, lr}
 80092b0:	b084      	sub	sp, #16
 80092b2:	af00      	add	r7, sp, #0
 80092b4:	6078      	str	r0, [r7, #4]
 80092b6:	460b      	mov	r3, r1
 80092b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092ba:	2300      	movs	r3, #0
 80092bc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80092c8:	78fa      	ldrb	r2, [r7, #3]
 80092ca:	4611      	mov	r1, r2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fa f9fe 	bl	80036ce <HAL_PCD_EP_Close>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	4618      	mov	r0, r3
 80092da:	f000 f8e5 	bl	80094a8 <USBD_Get_USB_Status>
 80092de:	4603      	mov	r3, r0
 80092e0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80092e2:	7bbb      	ldrb	r3, [r7, #14]
}
 80092e4:	4618      	mov	r0, r3
 80092e6:	3710      	adds	r7, #16
 80092e8:	46bd      	mov	sp, r7
 80092ea:	bd80      	pop	{r7, pc}

080092ec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b084      	sub	sp, #16
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
 80092f4:	460b      	mov	r3, r1
 80092f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80092f8:	2300      	movs	r3, #0
 80092fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80092fc:	2300      	movs	r3, #0
 80092fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009306:	78fa      	ldrb	r2, [r7, #3]
 8009308:	4611      	mov	r1, r2
 800930a:	4618      	mov	r0, r3
 800930c:	f7fa fad6 	bl	80038bc <HAL_PCD_EP_SetStall>
 8009310:	4603      	mov	r3, r0
 8009312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009314:	7bfb      	ldrb	r3, [r7, #15]
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f8c6 	bl	80094a8 <USBD_Get_USB_Status>
 800931c:	4603      	mov	r3, r0
 800931e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009320:	7bbb      	ldrb	r3, [r7, #14]
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
 8009332:	460b      	mov	r3, r1
 8009334:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800933a:	2300      	movs	r3, #0
 800933c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009344:	78fa      	ldrb	r2, [r7, #3]
 8009346:	4611      	mov	r1, r2
 8009348:	4618      	mov	r0, r3
 800934a:	f7fa fb1b 	bl	8003984 <HAL_PCD_EP_ClrStall>
 800934e:	4603      	mov	r3, r0
 8009350:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	4618      	mov	r0, r3
 8009356:	f000 f8a7 	bl	80094a8 <USBD_Get_USB_Status>
 800935a:	4603      	mov	r3, r0
 800935c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800935e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009360:	4618      	mov	r0, r3
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	460b      	mov	r3, r1
 8009372:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800937a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800937c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009380:	2b00      	cmp	r3, #0
 8009382:	da0b      	bge.n	800939c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800938a:	68f9      	ldr	r1, [r7, #12]
 800938c:	4613      	mov	r3, r2
 800938e:	00db      	lsls	r3, r3, #3
 8009390:	1a9b      	subs	r3, r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	440b      	add	r3, r1
 8009396:	333e      	adds	r3, #62	; 0x3e
 8009398:	781b      	ldrb	r3, [r3, #0]
 800939a:	e00b      	b.n	80093b4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800939c:	78fb      	ldrb	r3, [r7, #3]
 800939e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80093a2:	68f9      	ldr	r1, [r7, #12]
 80093a4:	4613      	mov	r3, r2
 80093a6:	00db      	lsls	r3, r3, #3
 80093a8:	1a9b      	subs	r3, r3, r2
 80093aa:	009b      	lsls	r3, r3, #2
 80093ac:	440b      	add	r3, r1
 80093ae:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80093b2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80093b4:	4618      	mov	r0, r3
 80093b6:	3714      	adds	r7, #20
 80093b8:	46bd      	mov	sp, r7
 80093ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093be:	4770      	bx	lr

080093c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	460b      	mov	r3, r1
 80093ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093cc:	2300      	movs	r3, #0
 80093ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80093da:	78fa      	ldrb	r2, [r7, #3]
 80093dc:	4611      	mov	r1, r2
 80093de:	4618      	mov	r0, r3
 80093e0:	f7fa f8e8 	bl	80035b4 <HAL_PCD_SetAddress>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 f85c 	bl	80094a8 <USBD_Get_USB_Status>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b086      	sub	sp, #24
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	607a      	str	r2, [r7, #4]
 8009408:	603b      	str	r3, [r7, #0]
 800940a:	460b      	mov	r3, r1
 800940c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800940e:	2300      	movs	r3, #0
 8009410:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009412:	2300      	movs	r3, #0
 8009414:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800941c:	7af9      	ldrb	r1, [r7, #11]
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	687a      	ldr	r2, [r7, #4]
 8009422:	f7fa fa01 	bl	8003828 <HAL_PCD_EP_Transmit>
 8009426:	4603      	mov	r3, r0
 8009428:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800942a:	7dfb      	ldrb	r3, [r7, #23]
 800942c:	4618      	mov	r0, r3
 800942e:	f000 f83b 	bl	80094a8 <USBD_Get_USB_Status>
 8009432:	4603      	mov	r3, r0
 8009434:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009436:	7dbb      	ldrb	r3, [r7, #22]
}
 8009438:	4618      	mov	r0, r3
 800943a:	3718      	adds	r7, #24
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60f8      	str	r0, [r7, #12]
 8009448:	607a      	str	r2, [r7, #4]
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	460b      	mov	r3, r1
 800944e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009450:	2300      	movs	r3, #0
 8009452:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800945e:	7af9      	ldrb	r1, [r7, #11]
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	f7fa f97d 	bl	8003762 <HAL_PCD_EP_Receive>
 8009468:	4603      	mov	r3, r0
 800946a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800946c:	7dfb      	ldrb	r3, [r7, #23]
 800946e:	4618      	mov	r0, r3
 8009470:	f000 f81a 	bl	80094a8 <USBD_Get_USB_Status>
 8009474:	4603      	mov	r3, r0
 8009476:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009478:	7dbb      	ldrb	r3, [r7, #22]
}
 800947a:	4618      	mov	r0, r3
 800947c:	3718      	adds	r7, #24
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	460b      	mov	r3, r1
 800948c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	4611      	mov	r1, r2
 8009498:	4618      	mov	r0, r3
 800949a:	f7fa f9ad 	bl	80037f8 <HAL_PCD_EP_GetRxCount>
 800949e:	4603      	mov	r3, r0
}
 80094a0:	4618      	mov	r0, r3
 80094a2:	3708      	adds	r7, #8
 80094a4:	46bd      	mov	sp, r7
 80094a6:	bd80      	pop	{r7, pc}

080094a8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	4603      	mov	r3, r0
 80094b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094b2:	2300      	movs	r3, #0
 80094b4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	2b03      	cmp	r3, #3
 80094ba:	d817      	bhi.n	80094ec <USBD_Get_USB_Status+0x44>
 80094bc:	a201      	add	r2, pc, #4	; (adr r2, 80094c4 <USBD_Get_USB_Status+0x1c>)
 80094be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c2:	bf00      	nop
 80094c4:	080094d5 	.word	0x080094d5
 80094c8:	080094db 	.word	0x080094db
 80094cc:	080094e1 	.word	0x080094e1
 80094d0:	080094e7 	.word	0x080094e7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
    break;
 80094d8:	e00b      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80094da:	2303      	movs	r3, #3
 80094dc:	73fb      	strb	r3, [r7, #15]
    break;
 80094de:	e008      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80094e0:	2301      	movs	r3, #1
 80094e2:	73fb      	strb	r3, [r7, #15]
    break;
 80094e4:	e005      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80094e6:	2303      	movs	r3, #3
 80094e8:	73fb      	strb	r3, [r7, #15]
    break;
 80094ea:	e002      	b.n	80094f2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80094ec:	2303      	movs	r3, #3
 80094ee:	73fb      	strb	r3, [r7, #15]
    break;
 80094f0:	bf00      	nop
  }
  return usb_status;
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094f4:	4618      	mov	r0, r3
 80094f6:	3714      	adds	r7, #20
 80094f8:	46bd      	mov	sp, r7
 80094fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fe:	4770      	bx	lr

08009500 <__errno>:
 8009500:	4b01      	ldr	r3, [pc, #4]	; (8009508 <__errno+0x8>)
 8009502:	6818      	ldr	r0, [r3, #0]
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	200001a4 	.word	0x200001a4

0800950c <__libc_init_array>:
 800950c:	b570      	push	{r4, r5, r6, lr}
 800950e:	4e0d      	ldr	r6, [pc, #52]	; (8009544 <__libc_init_array+0x38>)
 8009510:	4c0d      	ldr	r4, [pc, #52]	; (8009548 <__libc_init_array+0x3c>)
 8009512:	1ba4      	subs	r4, r4, r6
 8009514:	10a4      	asrs	r4, r4, #2
 8009516:	2500      	movs	r5, #0
 8009518:	42a5      	cmp	r5, r4
 800951a:	d109      	bne.n	8009530 <__libc_init_array+0x24>
 800951c:	4e0b      	ldr	r6, [pc, #44]	; (800954c <__libc_init_array+0x40>)
 800951e:	4c0c      	ldr	r4, [pc, #48]	; (8009550 <__libc_init_array+0x44>)
 8009520:	f001 f8fc 	bl	800a71c <_init>
 8009524:	1ba4      	subs	r4, r4, r6
 8009526:	10a4      	asrs	r4, r4, #2
 8009528:	2500      	movs	r5, #0
 800952a:	42a5      	cmp	r5, r4
 800952c:	d105      	bne.n	800953a <__libc_init_array+0x2e>
 800952e:	bd70      	pop	{r4, r5, r6, pc}
 8009530:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009534:	4798      	blx	r3
 8009536:	3501      	adds	r5, #1
 8009538:	e7ee      	b.n	8009518 <__libc_init_array+0xc>
 800953a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800953e:	4798      	blx	r3
 8009540:	3501      	adds	r5, #1
 8009542:	e7f2      	b.n	800952a <__libc_init_array+0x1e>
 8009544:	0800a980 	.word	0x0800a980
 8009548:	0800a980 	.word	0x0800a980
 800954c:	0800a980 	.word	0x0800a980
 8009550:	0800a984 	.word	0x0800a984

08009554 <malloc>:
 8009554:	4b02      	ldr	r3, [pc, #8]	; (8009560 <malloc+0xc>)
 8009556:	4601      	mov	r1, r0
 8009558:	6818      	ldr	r0, [r3, #0]
 800955a:	f000 b861 	b.w	8009620 <_malloc_r>
 800955e:	bf00      	nop
 8009560:	200001a4 	.word	0x200001a4

08009564 <free>:
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <free+0xc>)
 8009566:	4601      	mov	r1, r0
 8009568:	6818      	ldr	r0, [r3, #0]
 800956a:	f000 b80b 	b.w	8009584 <_free_r>
 800956e:	bf00      	nop
 8009570:	200001a4 	.word	0x200001a4

08009574 <memset>:
 8009574:	4402      	add	r2, r0
 8009576:	4603      	mov	r3, r0
 8009578:	4293      	cmp	r3, r2
 800957a:	d100      	bne.n	800957e <memset+0xa>
 800957c:	4770      	bx	lr
 800957e:	f803 1b01 	strb.w	r1, [r3], #1
 8009582:	e7f9      	b.n	8009578 <memset+0x4>

08009584 <_free_r>:
 8009584:	b538      	push	{r3, r4, r5, lr}
 8009586:	4605      	mov	r5, r0
 8009588:	2900      	cmp	r1, #0
 800958a:	d045      	beq.n	8009618 <_free_r+0x94>
 800958c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009590:	1f0c      	subs	r4, r1, #4
 8009592:	2b00      	cmp	r3, #0
 8009594:	bfb8      	it	lt
 8009596:	18e4      	addlt	r4, r4, r3
 8009598:	f000 f8ac 	bl	80096f4 <__malloc_lock>
 800959c:	4a1f      	ldr	r2, [pc, #124]	; (800961c <_free_r+0x98>)
 800959e:	6813      	ldr	r3, [r2, #0]
 80095a0:	4610      	mov	r0, r2
 80095a2:	b933      	cbnz	r3, 80095b2 <_free_r+0x2e>
 80095a4:	6063      	str	r3, [r4, #4]
 80095a6:	6014      	str	r4, [r2, #0]
 80095a8:	4628      	mov	r0, r5
 80095aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095ae:	f000 b8a2 	b.w	80096f6 <__malloc_unlock>
 80095b2:	42a3      	cmp	r3, r4
 80095b4:	d90c      	bls.n	80095d0 <_free_r+0x4c>
 80095b6:	6821      	ldr	r1, [r4, #0]
 80095b8:	1862      	adds	r2, r4, r1
 80095ba:	4293      	cmp	r3, r2
 80095bc:	bf04      	itt	eq
 80095be:	681a      	ldreq	r2, [r3, #0]
 80095c0:	685b      	ldreq	r3, [r3, #4]
 80095c2:	6063      	str	r3, [r4, #4]
 80095c4:	bf04      	itt	eq
 80095c6:	1852      	addeq	r2, r2, r1
 80095c8:	6022      	streq	r2, [r4, #0]
 80095ca:	6004      	str	r4, [r0, #0]
 80095cc:	e7ec      	b.n	80095a8 <_free_r+0x24>
 80095ce:	4613      	mov	r3, r2
 80095d0:	685a      	ldr	r2, [r3, #4]
 80095d2:	b10a      	cbz	r2, 80095d8 <_free_r+0x54>
 80095d4:	42a2      	cmp	r2, r4
 80095d6:	d9fa      	bls.n	80095ce <_free_r+0x4a>
 80095d8:	6819      	ldr	r1, [r3, #0]
 80095da:	1858      	adds	r0, r3, r1
 80095dc:	42a0      	cmp	r0, r4
 80095de:	d10b      	bne.n	80095f8 <_free_r+0x74>
 80095e0:	6820      	ldr	r0, [r4, #0]
 80095e2:	4401      	add	r1, r0
 80095e4:	1858      	adds	r0, r3, r1
 80095e6:	4282      	cmp	r2, r0
 80095e8:	6019      	str	r1, [r3, #0]
 80095ea:	d1dd      	bne.n	80095a8 <_free_r+0x24>
 80095ec:	6810      	ldr	r0, [r2, #0]
 80095ee:	6852      	ldr	r2, [r2, #4]
 80095f0:	605a      	str	r2, [r3, #4]
 80095f2:	4401      	add	r1, r0
 80095f4:	6019      	str	r1, [r3, #0]
 80095f6:	e7d7      	b.n	80095a8 <_free_r+0x24>
 80095f8:	d902      	bls.n	8009600 <_free_r+0x7c>
 80095fa:	230c      	movs	r3, #12
 80095fc:	602b      	str	r3, [r5, #0]
 80095fe:	e7d3      	b.n	80095a8 <_free_r+0x24>
 8009600:	6820      	ldr	r0, [r4, #0]
 8009602:	1821      	adds	r1, r4, r0
 8009604:	428a      	cmp	r2, r1
 8009606:	bf04      	itt	eq
 8009608:	6811      	ldreq	r1, [r2, #0]
 800960a:	6852      	ldreq	r2, [r2, #4]
 800960c:	6062      	str	r2, [r4, #4]
 800960e:	bf04      	itt	eq
 8009610:	1809      	addeq	r1, r1, r0
 8009612:	6021      	streq	r1, [r4, #0]
 8009614:	605c      	str	r4, [r3, #4]
 8009616:	e7c7      	b.n	80095a8 <_free_r+0x24>
 8009618:	bd38      	pop	{r3, r4, r5, pc}
 800961a:	bf00      	nop
 800961c:	2000022c 	.word	0x2000022c

08009620 <_malloc_r>:
 8009620:	b570      	push	{r4, r5, r6, lr}
 8009622:	1ccd      	adds	r5, r1, #3
 8009624:	f025 0503 	bic.w	r5, r5, #3
 8009628:	3508      	adds	r5, #8
 800962a:	2d0c      	cmp	r5, #12
 800962c:	bf38      	it	cc
 800962e:	250c      	movcc	r5, #12
 8009630:	2d00      	cmp	r5, #0
 8009632:	4606      	mov	r6, r0
 8009634:	db01      	blt.n	800963a <_malloc_r+0x1a>
 8009636:	42a9      	cmp	r1, r5
 8009638:	d903      	bls.n	8009642 <_malloc_r+0x22>
 800963a:	230c      	movs	r3, #12
 800963c:	6033      	str	r3, [r6, #0]
 800963e:	2000      	movs	r0, #0
 8009640:	bd70      	pop	{r4, r5, r6, pc}
 8009642:	f000 f857 	bl	80096f4 <__malloc_lock>
 8009646:	4a21      	ldr	r2, [pc, #132]	; (80096cc <_malloc_r+0xac>)
 8009648:	6814      	ldr	r4, [r2, #0]
 800964a:	4621      	mov	r1, r4
 800964c:	b991      	cbnz	r1, 8009674 <_malloc_r+0x54>
 800964e:	4c20      	ldr	r4, [pc, #128]	; (80096d0 <_malloc_r+0xb0>)
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	b91b      	cbnz	r3, 800965c <_malloc_r+0x3c>
 8009654:	4630      	mov	r0, r6
 8009656:	f000 f83d 	bl	80096d4 <_sbrk_r>
 800965a:	6020      	str	r0, [r4, #0]
 800965c:	4629      	mov	r1, r5
 800965e:	4630      	mov	r0, r6
 8009660:	f000 f838 	bl	80096d4 <_sbrk_r>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d124      	bne.n	80096b2 <_malloc_r+0x92>
 8009668:	230c      	movs	r3, #12
 800966a:	6033      	str	r3, [r6, #0]
 800966c:	4630      	mov	r0, r6
 800966e:	f000 f842 	bl	80096f6 <__malloc_unlock>
 8009672:	e7e4      	b.n	800963e <_malloc_r+0x1e>
 8009674:	680b      	ldr	r3, [r1, #0]
 8009676:	1b5b      	subs	r3, r3, r5
 8009678:	d418      	bmi.n	80096ac <_malloc_r+0x8c>
 800967a:	2b0b      	cmp	r3, #11
 800967c:	d90f      	bls.n	800969e <_malloc_r+0x7e>
 800967e:	600b      	str	r3, [r1, #0]
 8009680:	50cd      	str	r5, [r1, r3]
 8009682:	18cc      	adds	r4, r1, r3
 8009684:	4630      	mov	r0, r6
 8009686:	f000 f836 	bl	80096f6 <__malloc_unlock>
 800968a:	f104 000b 	add.w	r0, r4, #11
 800968e:	1d23      	adds	r3, r4, #4
 8009690:	f020 0007 	bic.w	r0, r0, #7
 8009694:	1ac3      	subs	r3, r0, r3
 8009696:	d0d3      	beq.n	8009640 <_malloc_r+0x20>
 8009698:	425a      	negs	r2, r3
 800969a:	50e2      	str	r2, [r4, r3]
 800969c:	e7d0      	b.n	8009640 <_malloc_r+0x20>
 800969e:	428c      	cmp	r4, r1
 80096a0:	684b      	ldr	r3, [r1, #4]
 80096a2:	bf16      	itet	ne
 80096a4:	6063      	strne	r3, [r4, #4]
 80096a6:	6013      	streq	r3, [r2, #0]
 80096a8:	460c      	movne	r4, r1
 80096aa:	e7eb      	b.n	8009684 <_malloc_r+0x64>
 80096ac:	460c      	mov	r4, r1
 80096ae:	6849      	ldr	r1, [r1, #4]
 80096b0:	e7cc      	b.n	800964c <_malloc_r+0x2c>
 80096b2:	1cc4      	adds	r4, r0, #3
 80096b4:	f024 0403 	bic.w	r4, r4, #3
 80096b8:	42a0      	cmp	r0, r4
 80096ba:	d005      	beq.n	80096c8 <_malloc_r+0xa8>
 80096bc:	1a21      	subs	r1, r4, r0
 80096be:	4630      	mov	r0, r6
 80096c0:	f000 f808 	bl	80096d4 <_sbrk_r>
 80096c4:	3001      	adds	r0, #1
 80096c6:	d0cf      	beq.n	8009668 <_malloc_r+0x48>
 80096c8:	6025      	str	r5, [r4, #0]
 80096ca:	e7db      	b.n	8009684 <_malloc_r+0x64>
 80096cc:	2000022c 	.word	0x2000022c
 80096d0:	20000230 	.word	0x20000230

080096d4 <_sbrk_r>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4c06      	ldr	r4, [pc, #24]	; (80096f0 <_sbrk_r+0x1c>)
 80096d8:	2300      	movs	r3, #0
 80096da:	4605      	mov	r5, r0
 80096dc:	4608      	mov	r0, r1
 80096de:	6023      	str	r3, [r4, #0]
 80096e0:	f7f7 ff46 	bl	8001570 <_sbrk>
 80096e4:	1c43      	adds	r3, r0, #1
 80096e6:	d102      	bne.n	80096ee <_sbrk_r+0x1a>
 80096e8:	6823      	ldr	r3, [r4, #0]
 80096ea:	b103      	cbz	r3, 80096ee <_sbrk_r+0x1a>
 80096ec:	602b      	str	r3, [r5, #0]
 80096ee:	bd38      	pop	{r3, r4, r5, pc}
 80096f0:	20001f44 	.word	0x20001f44

080096f4 <__malloc_lock>:
 80096f4:	4770      	bx	lr

080096f6 <__malloc_unlock>:
 80096f6:	4770      	bx	lr

080096f8 <sin>:
 80096f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80096fa:	ec51 0b10 	vmov	r0, r1, d0
 80096fe:	4a20      	ldr	r2, [pc, #128]	; (8009780 <sin+0x88>)
 8009700:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009704:	4293      	cmp	r3, r2
 8009706:	dc07      	bgt.n	8009718 <sin+0x20>
 8009708:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8009778 <sin+0x80>
 800970c:	2000      	movs	r0, #0
 800970e:	f000 fe37 	bl	800a380 <__kernel_sin>
 8009712:	ec51 0b10 	vmov	r0, r1, d0
 8009716:	e007      	b.n	8009728 <sin+0x30>
 8009718:	4a1a      	ldr	r2, [pc, #104]	; (8009784 <sin+0x8c>)
 800971a:	4293      	cmp	r3, r2
 800971c:	dd09      	ble.n	8009732 <sin+0x3a>
 800971e:	ee10 2a10 	vmov	r2, s0
 8009722:	460b      	mov	r3, r1
 8009724:	f7f6 fd68 	bl	80001f8 <__aeabi_dsub>
 8009728:	ec41 0b10 	vmov	d0, r0, r1
 800972c:	b005      	add	sp, #20
 800972e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009732:	4668      	mov	r0, sp
 8009734:	f000 f828 	bl	8009788 <__ieee754_rem_pio2>
 8009738:	f000 0003 	and.w	r0, r0, #3
 800973c:	2801      	cmp	r0, #1
 800973e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8009742:	ed9d 0b00 	vldr	d0, [sp]
 8009746:	d004      	beq.n	8009752 <sin+0x5a>
 8009748:	2802      	cmp	r0, #2
 800974a:	d005      	beq.n	8009758 <sin+0x60>
 800974c:	b970      	cbnz	r0, 800976c <sin+0x74>
 800974e:	2001      	movs	r0, #1
 8009750:	e7dd      	b.n	800970e <sin+0x16>
 8009752:	f000 fa0d 	bl	8009b70 <__kernel_cos>
 8009756:	e7dc      	b.n	8009712 <sin+0x1a>
 8009758:	2001      	movs	r0, #1
 800975a:	f000 fe11 	bl	800a380 <__kernel_sin>
 800975e:	ec53 2b10 	vmov	r2, r3, d0
 8009762:	ee10 0a10 	vmov	r0, s0
 8009766:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800976a:	e7dd      	b.n	8009728 <sin+0x30>
 800976c:	f000 fa00 	bl	8009b70 <__kernel_cos>
 8009770:	e7f5      	b.n	800975e <sin+0x66>
 8009772:	bf00      	nop
 8009774:	f3af 8000 	nop.w
	...
 8009780:	3fe921fb 	.word	0x3fe921fb
 8009784:	7fefffff 	.word	0x7fefffff

08009788 <__ieee754_rem_pio2>:
 8009788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978c:	ec57 6b10 	vmov	r6, r7, d0
 8009790:	4bc3      	ldr	r3, [pc, #780]	; (8009aa0 <__ieee754_rem_pio2+0x318>)
 8009792:	b08d      	sub	sp, #52	; 0x34
 8009794:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8009798:	4598      	cmp	r8, r3
 800979a:	4604      	mov	r4, r0
 800979c:	9704      	str	r7, [sp, #16]
 800979e:	dc07      	bgt.n	80097b0 <__ieee754_rem_pio2+0x28>
 80097a0:	2200      	movs	r2, #0
 80097a2:	2300      	movs	r3, #0
 80097a4:	ed84 0b00 	vstr	d0, [r4]
 80097a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80097ac:	2500      	movs	r5, #0
 80097ae:	e027      	b.n	8009800 <__ieee754_rem_pio2+0x78>
 80097b0:	4bbc      	ldr	r3, [pc, #752]	; (8009aa4 <__ieee754_rem_pio2+0x31c>)
 80097b2:	4598      	cmp	r8, r3
 80097b4:	dc75      	bgt.n	80098a2 <__ieee754_rem_pio2+0x11a>
 80097b6:	9b04      	ldr	r3, [sp, #16]
 80097b8:	4dbb      	ldr	r5, [pc, #748]	; (8009aa8 <__ieee754_rem_pio2+0x320>)
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	ee10 0a10 	vmov	r0, s0
 80097c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8009a68 <__ieee754_rem_pio2+0x2e0>)
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	4639      	mov	r1, r7
 80097c8:	dd36      	ble.n	8009838 <__ieee754_rem_pio2+0xb0>
 80097ca:	f7f6 fd15 	bl	80001f8 <__aeabi_dsub>
 80097ce:	45a8      	cmp	r8, r5
 80097d0:	4606      	mov	r6, r0
 80097d2:	460f      	mov	r7, r1
 80097d4:	d018      	beq.n	8009808 <__ieee754_rem_pio2+0x80>
 80097d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8009a70 <__ieee754_rem_pio2+0x2e8>)
 80097d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097dc:	f7f6 fd0c 	bl	80001f8 <__aeabi_dsub>
 80097e0:	4602      	mov	r2, r0
 80097e2:	460b      	mov	r3, r1
 80097e4:	e9c4 2300 	strd	r2, r3, [r4]
 80097e8:	4630      	mov	r0, r6
 80097ea:	4639      	mov	r1, r7
 80097ec:	f7f6 fd04 	bl	80001f8 <__aeabi_dsub>
 80097f0:	a39f      	add	r3, pc, #636	; (adr r3, 8009a70 <__ieee754_rem_pio2+0x2e8>)
 80097f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f6:	f7f6 fcff 	bl	80001f8 <__aeabi_dsub>
 80097fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80097fe:	2501      	movs	r5, #1
 8009800:	4628      	mov	r0, r5
 8009802:	b00d      	add	sp, #52	; 0x34
 8009804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009808:	a39b      	add	r3, pc, #620	; (adr r3, 8009a78 <__ieee754_rem_pio2+0x2f0>)
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	f7f6 fcf3 	bl	80001f8 <__aeabi_dsub>
 8009812:	a39b      	add	r3, pc, #620	; (adr r3, 8009a80 <__ieee754_rem_pio2+0x2f8>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	4606      	mov	r6, r0
 800981a:	460f      	mov	r7, r1
 800981c:	f7f6 fcec 	bl	80001f8 <__aeabi_dsub>
 8009820:	4602      	mov	r2, r0
 8009822:	460b      	mov	r3, r1
 8009824:	e9c4 2300 	strd	r2, r3, [r4]
 8009828:	4630      	mov	r0, r6
 800982a:	4639      	mov	r1, r7
 800982c:	f7f6 fce4 	bl	80001f8 <__aeabi_dsub>
 8009830:	a393      	add	r3, pc, #588	; (adr r3, 8009a80 <__ieee754_rem_pio2+0x2f8>)
 8009832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009836:	e7de      	b.n	80097f6 <__ieee754_rem_pio2+0x6e>
 8009838:	f7f6 fce0 	bl	80001fc <__adddf3>
 800983c:	45a8      	cmp	r8, r5
 800983e:	4606      	mov	r6, r0
 8009840:	460f      	mov	r7, r1
 8009842:	d016      	beq.n	8009872 <__ieee754_rem_pio2+0xea>
 8009844:	a38a      	add	r3, pc, #552	; (adr r3, 8009a70 <__ieee754_rem_pio2+0x2e8>)
 8009846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984a:	f7f6 fcd7 	bl	80001fc <__adddf3>
 800984e:	4602      	mov	r2, r0
 8009850:	460b      	mov	r3, r1
 8009852:	e9c4 2300 	strd	r2, r3, [r4]
 8009856:	4630      	mov	r0, r6
 8009858:	4639      	mov	r1, r7
 800985a:	f7f6 fccd 	bl	80001f8 <__aeabi_dsub>
 800985e:	a384      	add	r3, pc, #528	; (adr r3, 8009a70 <__ieee754_rem_pio2+0x2e8>)
 8009860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009864:	f7f6 fcca 	bl	80001fc <__adddf3>
 8009868:	f04f 35ff 	mov.w	r5, #4294967295
 800986c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009870:	e7c6      	b.n	8009800 <__ieee754_rem_pio2+0x78>
 8009872:	a381      	add	r3, pc, #516	; (adr r3, 8009a78 <__ieee754_rem_pio2+0x2f0>)
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f7f6 fcc0 	bl	80001fc <__adddf3>
 800987c:	a380      	add	r3, pc, #512	; (adr r3, 8009a80 <__ieee754_rem_pio2+0x2f8>)
 800987e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009882:	4606      	mov	r6, r0
 8009884:	460f      	mov	r7, r1
 8009886:	f7f6 fcb9 	bl	80001fc <__adddf3>
 800988a:	4602      	mov	r2, r0
 800988c:	460b      	mov	r3, r1
 800988e:	e9c4 2300 	strd	r2, r3, [r4]
 8009892:	4630      	mov	r0, r6
 8009894:	4639      	mov	r1, r7
 8009896:	f7f6 fcaf 	bl	80001f8 <__aeabi_dsub>
 800989a:	a379      	add	r3, pc, #484	; (adr r3, 8009a80 <__ieee754_rem_pio2+0x2f8>)
 800989c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098a0:	e7e0      	b.n	8009864 <__ieee754_rem_pio2+0xdc>
 80098a2:	4b82      	ldr	r3, [pc, #520]	; (8009aac <__ieee754_rem_pio2+0x324>)
 80098a4:	4598      	cmp	r8, r3
 80098a6:	f300 80d0 	bgt.w	8009a4a <__ieee754_rem_pio2+0x2c2>
 80098aa:	f000 fe23 	bl	800a4f4 <fabs>
 80098ae:	ec57 6b10 	vmov	r6, r7, d0
 80098b2:	ee10 0a10 	vmov	r0, s0
 80098b6:	a374      	add	r3, pc, #464	; (adr r3, 8009a88 <__ieee754_rem_pio2+0x300>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	4639      	mov	r1, r7
 80098be:	f7f6 fe53 	bl	8000568 <__aeabi_dmul>
 80098c2:	2200      	movs	r2, #0
 80098c4:	4b7a      	ldr	r3, [pc, #488]	; (8009ab0 <__ieee754_rem_pio2+0x328>)
 80098c6:	f7f6 fc99 	bl	80001fc <__adddf3>
 80098ca:	f7f7 f8e7 	bl	8000a9c <__aeabi_d2iz>
 80098ce:	4605      	mov	r5, r0
 80098d0:	f7f6 fde0 	bl	8000494 <__aeabi_i2d>
 80098d4:	a364      	add	r3, pc, #400	; (adr r3, 8009a68 <__ieee754_rem_pio2+0x2e0>)
 80098d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098de:	f7f6 fe43 	bl	8000568 <__aeabi_dmul>
 80098e2:	4602      	mov	r2, r0
 80098e4:	460b      	mov	r3, r1
 80098e6:	4630      	mov	r0, r6
 80098e8:	4639      	mov	r1, r7
 80098ea:	f7f6 fc85 	bl	80001f8 <__aeabi_dsub>
 80098ee:	a360      	add	r3, pc, #384	; (adr r3, 8009a70 <__ieee754_rem_pio2+0x2e8>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	4682      	mov	sl, r0
 80098f6:	468b      	mov	fp, r1
 80098f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098fc:	f7f6 fe34 	bl	8000568 <__aeabi_dmul>
 8009900:	2d1f      	cmp	r5, #31
 8009902:	4606      	mov	r6, r0
 8009904:	460f      	mov	r7, r1
 8009906:	dc0c      	bgt.n	8009922 <__ieee754_rem_pio2+0x19a>
 8009908:	1e6a      	subs	r2, r5, #1
 800990a:	4b6a      	ldr	r3, [pc, #424]	; (8009ab4 <__ieee754_rem_pio2+0x32c>)
 800990c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009910:	4543      	cmp	r3, r8
 8009912:	d006      	beq.n	8009922 <__ieee754_rem_pio2+0x19a>
 8009914:	4632      	mov	r2, r6
 8009916:	463b      	mov	r3, r7
 8009918:	4650      	mov	r0, sl
 800991a:	4659      	mov	r1, fp
 800991c:	f7f6 fc6c 	bl	80001f8 <__aeabi_dsub>
 8009920:	e00e      	b.n	8009940 <__ieee754_rem_pio2+0x1b8>
 8009922:	4632      	mov	r2, r6
 8009924:	463b      	mov	r3, r7
 8009926:	4650      	mov	r0, sl
 8009928:	4659      	mov	r1, fp
 800992a:	f7f6 fc65 	bl	80001f8 <__aeabi_dsub>
 800992e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8009932:	9305      	str	r3, [sp, #20]
 8009934:	9a05      	ldr	r2, [sp, #20]
 8009936:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	2b10      	cmp	r3, #16
 800993e:	dc02      	bgt.n	8009946 <__ieee754_rem_pio2+0x1be>
 8009940:	e9c4 0100 	strd	r0, r1, [r4]
 8009944:	e039      	b.n	80099ba <__ieee754_rem_pio2+0x232>
 8009946:	a34c      	add	r3, pc, #304	; (adr r3, 8009a78 <__ieee754_rem_pio2+0x2f0>)
 8009948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009950:	f7f6 fe0a 	bl	8000568 <__aeabi_dmul>
 8009954:	4606      	mov	r6, r0
 8009956:	460f      	mov	r7, r1
 8009958:	4602      	mov	r2, r0
 800995a:	460b      	mov	r3, r1
 800995c:	4650      	mov	r0, sl
 800995e:	4659      	mov	r1, fp
 8009960:	f7f6 fc4a 	bl	80001f8 <__aeabi_dsub>
 8009964:	4602      	mov	r2, r0
 8009966:	460b      	mov	r3, r1
 8009968:	4680      	mov	r8, r0
 800996a:	4689      	mov	r9, r1
 800996c:	4650      	mov	r0, sl
 800996e:	4659      	mov	r1, fp
 8009970:	f7f6 fc42 	bl	80001f8 <__aeabi_dsub>
 8009974:	4632      	mov	r2, r6
 8009976:	463b      	mov	r3, r7
 8009978:	f7f6 fc3e 	bl	80001f8 <__aeabi_dsub>
 800997c:	a340      	add	r3, pc, #256	; (adr r3, 8009a80 <__ieee754_rem_pio2+0x2f8>)
 800997e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009982:	4606      	mov	r6, r0
 8009984:	460f      	mov	r7, r1
 8009986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800998a:	f7f6 fded 	bl	8000568 <__aeabi_dmul>
 800998e:	4632      	mov	r2, r6
 8009990:	463b      	mov	r3, r7
 8009992:	f7f6 fc31 	bl	80001f8 <__aeabi_dsub>
 8009996:	4602      	mov	r2, r0
 8009998:	460b      	mov	r3, r1
 800999a:	4606      	mov	r6, r0
 800999c:	460f      	mov	r7, r1
 800999e:	4640      	mov	r0, r8
 80099a0:	4649      	mov	r1, r9
 80099a2:	f7f6 fc29 	bl	80001f8 <__aeabi_dsub>
 80099a6:	9a05      	ldr	r2, [sp, #20]
 80099a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	2b31      	cmp	r3, #49	; 0x31
 80099b0:	dc20      	bgt.n	80099f4 <__ieee754_rem_pio2+0x26c>
 80099b2:	e9c4 0100 	strd	r0, r1, [r4]
 80099b6:	46c2      	mov	sl, r8
 80099b8:	46cb      	mov	fp, r9
 80099ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80099be:	4650      	mov	r0, sl
 80099c0:	4642      	mov	r2, r8
 80099c2:	464b      	mov	r3, r9
 80099c4:	4659      	mov	r1, fp
 80099c6:	f7f6 fc17 	bl	80001f8 <__aeabi_dsub>
 80099ca:	463b      	mov	r3, r7
 80099cc:	4632      	mov	r2, r6
 80099ce:	f7f6 fc13 	bl	80001f8 <__aeabi_dsub>
 80099d2:	9b04      	ldr	r3, [sp, #16]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80099da:	f6bf af11 	bge.w	8009800 <__ieee754_rem_pio2+0x78>
 80099de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80099e2:	6063      	str	r3, [r4, #4]
 80099e4:	f8c4 8000 	str.w	r8, [r4]
 80099e8:	60a0      	str	r0, [r4, #8]
 80099ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80099ee:	60e3      	str	r3, [r4, #12]
 80099f0:	426d      	negs	r5, r5
 80099f2:	e705      	b.n	8009800 <__ieee754_rem_pio2+0x78>
 80099f4:	a326      	add	r3, pc, #152	; (adr r3, 8009a90 <__ieee754_rem_pio2+0x308>)
 80099f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80099fe:	f7f6 fdb3 	bl	8000568 <__aeabi_dmul>
 8009a02:	4606      	mov	r6, r0
 8009a04:	460f      	mov	r7, r1
 8009a06:	4602      	mov	r2, r0
 8009a08:	460b      	mov	r3, r1
 8009a0a:	4640      	mov	r0, r8
 8009a0c:	4649      	mov	r1, r9
 8009a0e:	f7f6 fbf3 	bl	80001f8 <__aeabi_dsub>
 8009a12:	4602      	mov	r2, r0
 8009a14:	460b      	mov	r3, r1
 8009a16:	4682      	mov	sl, r0
 8009a18:	468b      	mov	fp, r1
 8009a1a:	4640      	mov	r0, r8
 8009a1c:	4649      	mov	r1, r9
 8009a1e:	f7f6 fbeb 	bl	80001f8 <__aeabi_dsub>
 8009a22:	4632      	mov	r2, r6
 8009a24:	463b      	mov	r3, r7
 8009a26:	f7f6 fbe7 	bl	80001f8 <__aeabi_dsub>
 8009a2a:	a31b      	add	r3, pc, #108	; (adr r3, 8009a98 <__ieee754_rem_pio2+0x310>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	4606      	mov	r6, r0
 8009a32:	460f      	mov	r7, r1
 8009a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a38:	f7f6 fd96 	bl	8000568 <__aeabi_dmul>
 8009a3c:	4632      	mov	r2, r6
 8009a3e:	463b      	mov	r3, r7
 8009a40:	f7f6 fbda 	bl	80001f8 <__aeabi_dsub>
 8009a44:	4606      	mov	r6, r0
 8009a46:	460f      	mov	r7, r1
 8009a48:	e764      	b.n	8009914 <__ieee754_rem_pio2+0x18c>
 8009a4a:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <__ieee754_rem_pio2+0x330>)
 8009a4c:	4598      	cmp	r8, r3
 8009a4e:	dd35      	ble.n	8009abc <__ieee754_rem_pio2+0x334>
 8009a50:	ee10 2a10 	vmov	r2, s0
 8009a54:	463b      	mov	r3, r7
 8009a56:	4630      	mov	r0, r6
 8009a58:	4639      	mov	r1, r7
 8009a5a:	f7f6 fbcd 	bl	80001f8 <__aeabi_dsub>
 8009a5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8009a62:	e9c4 0100 	strd	r0, r1, [r4]
 8009a66:	e6a1      	b.n	80097ac <__ieee754_rem_pio2+0x24>
 8009a68:	54400000 	.word	0x54400000
 8009a6c:	3ff921fb 	.word	0x3ff921fb
 8009a70:	1a626331 	.word	0x1a626331
 8009a74:	3dd0b461 	.word	0x3dd0b461
 8009a78:	1a600000 	.word	0x1a600000
 8009a7c:	3dd0b461 	.word	0x3dd0b461
 8009a80:	2e037073 	.word	0x2e037073
 8009a84:	3ba3198a 	.word	0x3ba3198a
 8009a88:	6dc9c883 	.word	0x6dc9c883
 8009a8c:	3fe45f30 	.word	0x3fe45f30
 8009a90:	2e000000 	.word	0x2e000000
 8009a94:	3ba3198a 	.word	0x3ba3198a
 8009a98:	252049c1 	.word	0x252049c1
 8009a9c:	397b839a 	.word	0x397b839a
 8009aa0:	3fe921fb 	.word	0x3fe921fb
 8009aa4:	4002d97b 	.word	0x4002d97b
 8009aa8:	3ff921fb 	.word	0x3ff921fb
 8009aac:	413921fb 	.word	0x413921fb
 8009ab0:	3fe00000 	.word	0x3fe00000
 8009ab4:	0800a7a0 	.word	0x0800a7a0
 8009ab8:	7fefffff 	.word	0x7fefffff
 8009abc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8009ac0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8009ac4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8009ac8:	4630      	mov	r0, r6
 8009aca:	460f      	mov	r7, r1
 8009acc:	f7f6 ffe6 	bl	8000a9c <__aeabi_d2iz>
 8009ad0:	f7f6 fce0 	bl	8000494 <__aeabi_i2d>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	460b      	mov	r3, r1
 8009ad8:	4630      	mov	r0, r6
 8009ada:	4639      	mov	r1, r7
 8009adc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ae0:	f7f6 fb8a 	bl	80001f8 <__aeabi_dsub>
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	4b1f      	ldr	r3, [pc, #124]	; (8009b64 <__ieee754_rem_pio2+0x3dc>)
 8009ae8:	f7f6 fd3e 	bl	8000568 <__aeabi_dmul>
 8009aec:	460f      	mov	r7, r1
 8009aee:	4606      	mov	r6, r0
 8009af0:	f7f6 ffd4 	bl	8000a9c <__aeabi_d2iz>
 8009af4:	f7f6 fcce 	bl	8000494 <__aeabi_i2d>
 8009af8:	4602      	mov	r2, r0
 8009afa:	460b      	mov	r3, r1
 8009afc:	4630      	mov	r0, r6
 8009afe:	4639      	mov	r1, r7
 8009b00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009b04:	f7f6 fb78 	bl	80001f8 <__aeabi_dsub>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4b16      	ldr	r3, [pc, #88]	; (8009b64 <__ieee754_rem_pio2+0x3dc>)
 8009b0c:	f7f6 fd2c 	bl	8000568 <__aeabi_dmul>
 8009b10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8009b14:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8009b18:	f04f 0803 	mov.w	r8, #3
 8009b1c:	2600      	movs	r6, #0
 8009b1e:	2700      	movs	r7, #0
 8009b20:	4632      	mov	r2, r6
 8009b22:	463b      	mov	r3, r7
 8009b24:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8009b2c:	f7f6 ff84 	bl	8000a38 <__aeabi_dcmpeq>
 8009b30:	b9b0      	cbnz	r0, 8009b60 <__ieee754_rem_pio2+0x3d8>
 8009b32:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <__ieee754_rem_pio2+0x3e0>)
 8009b34:	9301      	str	r3, [sp, #4]
 8009b36:	2302      	movs	r3, #2
 8009b38:	9300      	str	r3, [sp, #0]
 8009b3a:	462a      	mov	r2, r5
 8009b3c:	4643      	mov	r3, r8
 8009b3e:	4621      	mov	r1, r4
 8009b40:	a806      	add	r0, sp, #24
 8009b42:	f000 f8dd 	bl	8009d00 <__kernel_rem_pio2>
 8009b46:	9b04      	ldr	r3, [sp, #16]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	4605      	mov	r5, r0
 8009b4c:	f6bf ae58 	bge.w	8009800 <__ieee754_rem_pio2+0x78>
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009b56:	6063      	str	r3, [r4, #4]
 8009b58:	68e3      	ldr	r3, [r4, #12]
 8009b5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8009b5e:	e746      	b.n	80099ee <__ieee754_rem_pio2+0x266>
 8009b60:	46d0      	mov	r8, sl
 8009b62:	e7dd      	b.n	8009b20 <__ieee754_rem_pio2+0x398>
 8009b64:	41700000 	.word	0x41700000
 8009b68:	0800a820 	.word	0x0800a820
 8009b6c:	00000000 	.word	0x00000000

08009b70 <__kernel_cos>:
 8009b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b74:	ec59 8b10 	vmov	r8, r9, d0
 8009b78:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8009b7c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8009b80:	ed2d 8b02 	vpush	{d8}
 8009b84:	eeb0 8a41 	vmov.f32	s16, s2
 8009b88:	eef0 8a61 	vmov.f32	s17, s3
 8009b8c:	da07      	bge.n	8009b9e <__kernel_cos+0x2e>
 8009b8e:	ee10 0a10 	vmov	r0, s0
 8009b92:	4649      	mov	r1, r9
 8009b94:	f7f6 ff82 	bl	8000a9c <__aeabi_d2iz>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	f000 8089 	beq.w	8009cb0 <__kernel_cos+0x140>
 8009b9e:	4642      	mov	r2, r8
 8009ba0:	464b      	mov	r3, r9
 8009ba2:	4640      	mov	r0, r8
 8009ba4:	4649      	mov	r1, r9
 8009ba6:	f7f6 fcdf 	bl	8000568 <__aeabi_dmul>
 8009baa:	2200      	movs	r2, #0
 8009bac:	4b4e      	ldr	r3, [pc, #312]	; (8009ce8 <__kernel_cos+0x178>)
 8009bae:	4604      	mov	r4, r0
 8009bb0:	460d      	mov	r5, r1
 8009bb2:	f7f6 fcd9 	bl	8000568 <__aeabi_dmul>
 8009bb6:	a340      	add	r3, pc, #256	; (adr r3, 8009cb8 <__kernel_cos+0x148>)
 8009bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bbc:	4682      	mov	sl, r0
 8009bbe:	468b      	mov	fp, r1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	f7f6 fcd0 	bl	8000568 <__aeabi_dmul>
 8009bc8:	a33d      	add	r3, pc, #244	; (adr r3, 8009cc0 <__kernel_cos+0x150>)
 8009bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bce:	f7f6 fb15 	bl	80001fc <__adddf3>
 8009bd2:	4622      	mov	r2, r4
 8009bd4:	462b      	mov	r3, r5
 8009bd6:	f7f6 fcc7 	bl	8000568 <__aeabi_dmul>
 8009bda:	a33b      	add	r3, pc, #236	; (adr r3, 8009cc8 <__kernel_cos+0x158>)
 8009bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be0:	f7f6 fb0a 	bl	80001f8 <__aeabi_dsub>
 8009be4:	4622      	mov	r2, r4
 8009be6:	462b      	mov	r3, r5
 8009be8:	f7f6 fcbe 	bl	8000568 <__aeabi_dmul>
 8009bec:	a338      	add	r3, pc, #224	; (adr r3, 8009cd0 <__kernel_cos+0x160>)
 8009bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf2:	f7f6 fb03 	bl	80001fc <__adddf3>
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	f7f6 fcb5 	bl	8000568 <__aeabi_dmul>
 8009bfe:	a336      	add	r3, pc, #216	; (adr r3, 8009cd8 <__kernel_cos+0x168>)
 8009c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c04:	f7f6 faf8 	bl	80001f8 <__aeabi_dsub>
 8009c08:	4622      	mov	r2, r4
 8009c0a:	462b      	mov	r3, r5
 8009c0c:	f7f6 fcac 	bl	8000568 <__aeabi_dmul>
 8009c10:	a333      	add	r3, pc, #204	; (adr r3, 8009ce0 <__kernel_cos+0x170>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	f7f6 faf1 	bl	80001fc <__adddf3>
 8009c1a:	4622      	mov	r2, r4
 8009c1c:	462b      	mov	r3, r5
 8009c1e:	f7f6 fca3 	bl	8000568 <__aeabi_dmul>
 8009c22:	4622      	mov	r2, r4
 8009c24:	462b      	mov	r3, r5
 8009c26:	f7f6 fc9f 	bl	8000568 <__aeabi_dmul>
 8009c2a:	ec53 2b18 	vmov	r2, r3, d8
 8009c2e:	4604      	mov	r4, r0
 8009c30:	460d      	mov	r5, r1
 8009c32:	4640      	mov	r0, r8
 8009c34:	4649      	mov	r1, r9
 8009c36:	f7f6 fc97 	bl	8000568 <__aeabi_dmul>
 8009c3a:	460b      	mov	r3, r1
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	4629      	mov	r1, r5
 8009c40:	4620      	mov	r0, r4
 8009c42:	f7f6 fad9 	bl	80001f8 <__aeabi_dsub>
 8009c46:	4b29      	ldr	r3, [pc, #164]	; (8009cec <__kernel_cos+0x17c>)
 8009c48:	429e      	cmp	r6, r3
 8009c4a:	4680      	mov	r8, r0
 8009c4c:	4689      	mov	r9, r1
 8009c4e:	dc11      	bgt.n	8009c74 <__kernel_cos+0x104>
 8009c50:	4602      	mov	r2, r0
 8009c52:	460b      	mov	r3, r1
 8009c54:	4650      	mov	r0, sl
 8009c56:	4659      	mov	r1, fp
 8009c58:	f7f6 face 	bl	80001f8 <__aeabi_dsub>
 8009c5c:	460b      	mov	r3, r1
 8009c5e:	4924      	ldr	r1, [pc, #144]	; (8009cf0 <__kernel_cos+0x180>)
 8009c60:	4602      	mov	r2, r0
 8009c62:	2000      	movs	r0, #0
 8009c64:	f7f6 fac8 	bl	80001f8 <__aeabi_dsub>
 8009c68:	ecbd 8b02 	vpop	{d8}
 8009c6c:	ec41 0b10 	vmov	d0, r0, r1
 8009c70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c74:	4b1f      	ldr	r3, [pc, #124]	; (8009cf4 <__kernel_cos+0x184>)
 8009c76:	491e      	ldr	r1, [pc, #120]	; (8009cf0 <__kernel_cos+0x180>)
 8009c78:	429e      	cmp	r6, r3
 8009c7a:	bfcc      	ite	gt
 8009c7c:	4d1e      	ldrgt	r5, [pc, #120]	; (8009cf8 <__kernel_cos+0x188>)
 8009c7e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8009c82:	2400      	movs	r4, #0
 8009c84:	4622      	mov	r2, r4
 8009c86:	462b      	mov	r3, r5
 8009c88:	2000      	movs	r0, #0
 8009c8a:	f7f6 fab5 	bl	80001f8 <__aeabi_dsub>
 8009c8e:	4622      	mov	r2, r4
 8009c90:	4606      	mov	r6, r0
 8009c92:	460f      	mov	r7, r1
 8009c94:	462b      	mov	r3, r5
 8009c96:	4650      	mov	r0, sl
 8009c98:	4659      	mov	r1, fp
 8009c9a:	f7f6 faad 	bl	80001f8 <__aeabi_dsub>
 8009c9e:	4642      	mov	r2, r8
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	f7f6 faa9 	bl	80001f8 <__aeabi_dsub>
 8009ca6:	4602      	mov	r2, r0
 8009ca8:	460b      	mov	r3, r1
 8009caa:	4630      	mov	r0, r6
 8009cac:	4639      	mov	r1, r7
 8009cae:	e7d9      	b.n	8009c64 <__kernel_cos+0xf4>
 8009cb0:	2000      	movs	r0, #0
 8009cb2:	490f      	ldr	r1, [pc, #60]	; (8009cf0 <__kernel_cos+0x180>)
 8009cb4:	e7d8      	b.n	8009c68 <__kernel_cos+0xf8>
 8009cb6:	bf00      	nop
 8009cb8:	be8838d4 	.word	0xbe8838d4
 8009cbc:	bda8fae9 	.word	0xbda8fae9
 8009cc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8009cc4:	3e21ee9e 	.word	0x3e21ee9e
 8009cc8:	809c52ad 	.word	0x809c52ad
 8009ccc:	3e927e4f 	.word	0x3e927e4f
 8009cd0:	19cb1590 	.word	0x19cb1590
 8009cd4:	3efa01a0 	.word	0x3efa01a0
 8009cd8:	16c15177 	.word	0x16c15177
 8009cdc:	3f56c16c 	.word	0x3f56c16c
 8009ce0:	5555554c 	.word	0x5555554c
 8009ce4:	3fa55555 	.word	0x3fa55555
 8009ce8:	3fe00000 	.word	0x3fe00000
 8009cec:	3fd33332 	.word	0x3fd33332
 8009cf0:	3ff00000 	.word	0x3ff00000
 8009cf4:	3fe90000 	.word	0x3fe90000
 8009cf8:	3fd20000 	.word	0x3fd20000
 8009cfc:	00000000 	.word	0x00000000

08009d00 <__kernel_rem_pio2>:
 8009d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d04:	ed2d 8b02 	vpush	{d8}
 8009d08:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8009d0c:	1ed4      	subs	r4, r2, #3
 8009d0e:	9308      	str	r3, [sp, #32]
 8009d10:	9101      	str	r1, [sp, #4]
 8009d12:	4bc5      	ldr	r3, [pc, #788]	; (800a028 <__kernel_rem_pio2+0x328>)
 8009d14:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009d16:	9009      	str	r0, [sp, #36]	; 0x24
 8009d18:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009d1c:	9304      	str	r3, [sp, #16]
 8009d1e:	9b08      	ldr	r3, [sp, #32]
 8009d20:	3b01      	subs	r3, #1
 8009d22:	9307      	str	r3, [sp, #28]
 8009d24:	2318      	movs	r3, #24
 8009d26:	fb94 f4f3 	sdiv	r4, r4, r3
 8009d2a:	f06f 0317 	mvn.w	r3, #23
 8009d2e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009d32:	fb04 3303 	mla	r3, r4, r3, r3
 8009d36:	eb03 0a02 	add.w	sl, r3, r2
 8009d3a:	9b04      	ldr	r3, [sp, #16]
 8009d3c:	9a07      	ldr	r2, [sp, #28]
 8009d3e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800a018 <__kernel_rem_pio2+0x318>
 8009d42:	eb03 0802 	add.w	r8, r3, r2
 8009d46:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009d48:	1aa7      	subs	r7, r4, r2
 8009d4a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8009d4e:	ae22      	add	r6, sp, #136	; 0x88
 8009d50:	2500      	movs	r5, #0
 8009d52:	4545      	cmp	r5, r8
 8009d54:	dd13      	ble.n	8009d7e <__kernel_rem_pio2+0x7e>
 8009d56:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800a018 <__kernel_rem_pio2+0x318>
 8009d5a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8009d5e:	2600      	movs	r6, #0
 8009d60:	9b04      	ldr	r3, [sp, #16]
 8009d62:	429e      	cmp	r6, r3
 8009d64:	dc32      	bgt.n	8009dcc <__kernel_rem_pio2+0xcc>
 8009d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d68:	9302      	str	r3, [sp, #8]
 8009d6a:	9b08      	ldr	r3, [sp, #32]
 8009d6c:	199d      	adds	r5, r3, r6
 8009d6e:	ab22      	add	r3, sp, #136	; 0x88
 8009d70:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009d74:	9306      	str	r3, [sp, #24]
 8009d76:	ec59 8b18 	vmov	r8, r9, d8
 8009d7a:	2700      	movs	r7, #0
 8009d7c:	e01f      	b.n	8009dbe <__kernel_rem_pio2+0xbe>
 8009d7e:	42ef      	cmn	r7, r5
 8009d80:	d407      	bmi.n	8009d92 <__kernel_rem_pio2+0x92>
 8009d82:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8009d86:	f7f6 fb85 	bl	8000494 <__aeabi_i2d>
 8009d8a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8009d8e:	3501      	adds	r5, #1
 8009d90:	e7df      	b.n	8009d52 <__kernel_rem_pio2+0x52>
 8009d92:	ec51 0b18 	vmov	r0, r1, d8
 8009d96:	e7f8      	b.n	8009d8a <__kernel_rem_pio2+0x8a>
 8009d98:	9906      	ldr	r1, [sp, #24]
 8009d9a:	9d02      	ldr	r5, [sp, #8]
 8009d9c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8009da0:	9106      	str	r1, [sp, #24]
 8009da2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8009da6:	9502      	str	r5, [sp, #8]
 8009da8:	f7f6 fbde 	bl	8000568 <__aeabi_dmul>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4640      	mov	r0, r8
 8009db2:	4649      	mov	r1, r9
 8009db4:	f7f6 fa22 	bl	80001fc <__adddf3>
 8009db8:	3701      	adds	r7, #1
 8009dba:	4680      	mov	r8, r0
 8009dbc:	4689      	mov	r9, r1
 8009dbe:	9b07      	ldr	r3, [sp, #28]
 8009dc0:	429f      	cmp	r7, r3
 8009dc2:	dde9      	ble.n	8009d98 <__kernel_rem_pio2+0x98>
 8009dc4:	e8eb 8902 	strd	r8, r9, [fp], #8
 8009dc8:	3601      	adds	r6, #1
 8009dca:	e7c9      	b.n	8009d60 <__kernel_rem_pio2+0x60>
 8009dcc:	9b04      	ldr	r3, [sp, #16]
 8009dce:	aa0e      	add	r2, sp, #56	; 0x38
 8009dd0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009dd4:	930c      	str	r3, [sp, #48]	; 0x30
 8009dd6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009dd8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8009ddc:	9c04      	ldr	r4, [sp, #16]
 8009dde:	930b      	str	r3, [sp, #44]	; 0x2c
 8009de0:	ab9a      	add	r3, sp, #616	; 0x268
 8009de2:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8009de6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009dee:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009df2:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009df6:	ab9a      	add	r3, sp, #616	; 0x268
 8009df8:	445b      	add	r3, fp
 8009dfa:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8009dfe:	2500      	movs	r5, #0
 8009e00:	1b63      	subs	r3, r4, r5
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	dc78      	bgt.n	8009ef8 <__kernel_rem_pio2+0x1f8>
 8009e06:	4650      	mov	r0, sl
 8009e08:	ec49 8b10 	vmov	d0, r8, r9
 8009e0c:	f000 fc00 	bl	800a610 <scalbn>
 8009e10:	ec57 6b10 	vmov	r6, r7, d0
 8009e14:	2200      	movs	r2, #0
 8009e16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8009e1a:	ee10 0a10 	vmov	r0, s0
 8009e1e:	4639      	mov	r1, r7
 8009e20:	f7f6 fba2 	bl	8000568 <__aeabi_dmul>
 8009e24:	ec41 0b10 	vmov	d0, r0, r1
 8009e28:	f000 fb6e 	bl	800a508 <floor>
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	ec51 0b10 	vmov	r0, r1, d0
 8009e32:	4b7e      	ldr	r3, [pc, #504]	; (800a02c <__kernel_rem_pio2+0x32c>)
 8009e34:	f7f6 fb98 	bl	8000568 <__aeabi_dmul>
 8009e38:	4602      	mov	r2, r0
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	4630      	mov	r0, r6
 8009e3e:	4639      	mov	r1, r7
 8009e40:	f7f6 f9da 	bl	80001f8 <__aeabi_dsub>
 8009e44:	460f      	mov	r7, r1
 8009e46:	4606      	mov	r6, r0
 8009e48:	f7f6 fe28 	bl	8000a9c <__aeabi_d2iz>
 8009e4c:	9006      	str	r0, [sp, #24]
 8009e4e:	f7f6 fb21 	bl	8000494 <__aeabi_i2d>
 8009e52:	4602      	mov	r2, r0
 8009e54:	460b      	mov	r3, r1
 8009e56:	4630      	mov	r0, r6
 8009e58:	4639      	mov	r1, r7
 8009e5a:	f7f6 f9cd 	bl	80001f8 <__aeabi_dsub>
 8009e5e:	f1ba 0f00 	cmp.w	sl, #0
 8009e62:	4606      	mov	r6, r0
 8009e64:	460f      	mov	r7, r1
 8009e66:	dd6c      	ble.n	8009f42 <__kernel_rem_pio2+0x242>
 8009e68:	1e62      	subs	r2, r4, #1
 8009e6a:	ab0e      	add	r3, sp, #56	; 0x38
 8009e6c:	f1ca 0118 	rsb	r1, sl, #24
 8009e70:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009e74:	9d06      	ldr	r5, [sp, #24]
 8009e76:	fa40 f301 	asr.w	r3, r0, r1
 8009e7a:	441d      	add	r5, r3
 8009e7c:	408b      	lsls	r3, r1
 8009e7e:	1ac0      	subs	r0, r0, r3
 8009e80:	ab0e      	add	r3, sp, #56	; 0x38
 8009e82:	9506      	str	r5, [sp, #24]
 8009e84:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8009e88:	f1ca 0317 	rsb	r3, sl, #23
 8009e8c:	fa40 f303 	asr.w	r3, r0, r3
 8009e90:	9302      	str	r3, [sp, #8]
 8009e92:	9b02      	ldr	r3, [sp, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	dd62      	ble.n	8009f5e <__kernel_rem_pio2+0x25e>
 8009e98:	9b06      	ldr	r3, [sp, #24]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	3301      	adds	r3, #1
 8009e9e:	9306      	str	r3, [sp, #24]
 8009ea0:	4615      	mov	r5, r2
 8009ea2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8009ea6:	4294      	cmp	r4, r2
 8009ea8:	f300 8095 	bgt.w	8009fd6 <__kernel_rem_pio2+0x2d6>
 8009eac:	f1ba 0f00 	cmp.w	sl, #0
 8009eb0:	dd07      	ble.n	8009ec2 <__kernel_rem_pio2+0x1c2>
 8009eb2:	f1ba 0f01 	cmp.w	sl, #1
 8009eb6:	f000 80a2 	beq.w	8009ffe <__kernel_rem_pio2+0x2fe>
 8009eba:	f1ba 0f02 	cmp.w	sl, #2
 8009ebe:	f000 80c1 	beq.w	800a044 <__kernel_rem_pio2+0x344>
 8009ec2:	9b02      	ldr	r3, [sp, #8]
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d14a      	bne.n	8009f5e <__kernel_rem_pio2+0x25e>
 8009ec8:	4632      	mov	r2, r6
 8009eca:	463b      	mov	r3, r7
 8009ecc:	2000      	movs	r0, #0
 8009ece:	4958      	ldr	r1, [pc, #352]	; (800a030 <__kernel_rem_pio2+0x330>)
 8009ed0:	f7f6 f992 	bl	80001f8 <__aeabi_dsub>
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	460f      	mov	r7, r1
 8009ed8:	2d00      	cmp	r5, #0
 8009eda:	d040      	beq.n	8009f5e <__kernel_rem_pio2+0x25e>
 8009edc:	4650      	mov	r0, sl
 8009ede:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800a020 <__kernel_rem_pio2+0x320>
 8009ee2:	f000 fb95 	bl	800a610 <scalbn>
 8009ee6:	4630      	mov	r0, r6
 8009ee8:	4639      	mov	r1, r7
 8009eea:	ec53 2b10 	vmov	r2, r3, d0
 8009eee:	f7f6 f983 	bl	80001f8 <__aeabi_dsub>
 8009ef2:	4606      	mov	r6, r0
 8009ef4:	460f      	mov	r7, r1
 8009ef6:	e032      	b.n	8009f5e <__kernel_rem_pio2+0x25e>
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4b4e      	ldr	r3, [pc, #312]	; (800a034 <__kernel_rem_pio2+0x334>)
 8009efc:	4640      	mov	r0, r8
 8009efe:	4649      	mov	r1, r9
 8009f00:	f7f6 fb32 	bl	8000568 <__aeabi_dmul>
 8009f04:	f7f6 fdca 	bl	8000a9c <__aeabi_d2iz>
 8009f08:	f7f6 fac4 	bl	8000494 <__aeabi_i2d>
 8009f0c:	2200      	movs	r2, #0
 8009f0e:	4b4a      	ldr	r3, [pc, #296]	; (800a038 <__kernel_rem_pio2+0x338>)
 8009f10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f14:	f7f6 fb28 	bl	8000568 <__aeabi_dmul>
 8009f18:	4602      	mov	r2, r0
 8009f1a:	460b      	mov	r3, r1
 8009f1c:	4640      	mov	r0, r8
 8009f1e:	4649      	mov	r1, r9
 8009f20:	f7f6 f96a 	bl	80001f8 <__aeabi_dsub>
 8009f24:	f7f6 fdba 	bl	8000a9c <__aeabi_d2iz>
 8009f28:	ab0e      	add	r3, sp, #56	; 0x38
 8009f2a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 8009f2e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009f32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f36:	f7f6 f961 	bl	80001fc <__adddf3>
 8009f3a:	3501      	adds	r5, #1
 8009f3c:	4680      	mov	r8, r0
 8009f3e:	4689      	mov	r9, r1
 8009f40:	e75e      	b.n	8009e00 <__kernel_rem_pio2+0x100>
 8009f42:	d105      	bne.n	8009f50 <__kernel_rem_pio2+0x250>
 8009f44:	1e63      	subs	r3, r4, #1
 8009f46:	aa0e      	add	r2, sp, #56	; 0x38
 8009f48:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8009f4c:	15c3      	asrs	r3, r0, #23
 8009f4e:	e79f      	b.n	8009e90 <__kernel_rem_pio2+0x190>
 8009f50:	2200      	movs	r2, #0
 8009f52:	4b3a      	ldr	r3, [pc, #232]	; (800a03c <__kernel_rem_pio2+0x33c>)
 8009f54:	f7f6 fd8e 	bl	8000a74 <__aeabi_dcmpge>
 8009f58:	2800      	cmp	r0, #0
 8009f5a:	d139      	bne.n	8009fd0 <__kernel_rem_pio2+0x2d0>
 8009f5c:	9002      	str	r0, [sp, #8]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	2300      	movs	r3, #0
 8009f62:	4630      	mov	r0, r6
 8009f64:	4639      	mov	r1, r7
 8009f66:	f7f6 fd67 	bl	8000a38 <__aeabi_dcmpeq>
 8009f6a:	2800      	cmp	r0, #0
 8009f6c:	f000 80c7 	beq.w	800a0fe <__kernel_rem_pio2+0x3fe>
 8009f70:	1e65      	subs	r5, r4, #1
 8009f72:	462b      	mov	r3, r5
 8009f74:	2200      	movs	r2, #0
 8009f76:	9904      	ldr	r1, [sp, #16]
 8009f78:	428b      	cmp	r3, r1
 8009f7a:	da6a      	bge.n	800a052 <__kernel_rem_pio2+0x352>
 8009f7c:	2a00      	cmp	r2, #0
 8009f7e:	f000 8088 	beq.w	800a092 <__kernel_rem_pio2+0x392>
 8009f82:	ab0e      	add	r3, sp, #56	; 0x38
 8009f84:	f1aa 0a18 	sub.w	sl, sl, #24
 8009f88:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 80b4 	beq.w	800a0fa <__kernel_rem_pio2+0x3fa>
 8009f92:	4650      	mov	r0, sl
 8009f94:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800a020 <__kernel_rem_pio2+0x320>
 8009f98:	f000 fb3a 	bl	800a610 <scalbn>
 8009f9c:	00ec      	lsls	r4, r5, #3
 8009f9e:	ab72      	add	r3, sp, #456	; 0x1c8
 8009fa0:	191e      	adds	r6, r3, r4
 8009fa2:	ec59 8b10 	vmov	r8, r9, d0
 8009fa6:	f106 0a08 	add.w	sl, r6, #8
 8009faa:	462f      	mov	r7, r5
 8009fac:	2f00      	cmp	r7, #0
 8009fae:	f280 80df 	bge.w	800a170 <__kernel_rem_pio2+0x470>
 8009fb2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800a018 <__kernel_rem_pio2+0x318>
 8009fb6:	f04f 0a00 	mov.w	sl, #0
 8009fba:	eba5 030a 	sub.w	r3, r5, sl
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	f2c0 810a 	blt.w	800a1d8 <__kernel_rem_pio2+0x4d8>
 8009fc4:	f8df b078 	ldr.w	fp, [pc, #120]	; 800a040 <__kernel_rem_pio2+0x340>
 8009fc8:	ec59 8b18 	vmov	r8, r9, d8
 8009fcc:	2700      	movs	r7, #0
 8009fce:	e0f5      	b.n	800a1bc <__kernel_rem_pio2+0x4bc>
 8009fd0:	2302      	movs	r3, #2
 8009fd2:	9302      	str	r3, [sp, #8]
 8009fd4:	e760      	b.n	8009e98 <__kernel_rem_pio2+0x198>
 8009fd6:	ab0e      	add	r3, sp, #56	; 0x38
 8009fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fdc:	b94d      	cbnz	r5, 8009ff2 <__kernel_rem_pio2+0x2f2>
 8009fde:	b12b      	cbz	r3, 8009fec <__kernel_rem_pio2+0x2ec>
 8009fe0:	a80e      	add	r0, sp, #56	; 0x38
 8009fe2:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009fe6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009fea:	2301      	movs	r3, #1
 8009fec:	3201      	adds	r2, #1
 8009fee:	461d      	mov	r5, r3
 8009ff0:	e759      	b.n	8009ea6 <__kernel_rem_pio2+0x1a6>
 8009ff2:	a80e      	add	r0, sp, #56	; 0x38
 8009ff4:	1acb      	subs	r3, r1, r3
 8009ff6:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8009ffa:	462b      	mov	r3, r5
 8009ffc:	e7f6      	b.n	8009fec <__kernel_rem_pio2+0x2ec>
 8009ffe:	1e62      	subs	r2, r4, #1
 800a000:	ab0e      	add	r3, sp, #56	; 0x38
 800a002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a006:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800a00a:	a90e      	add	r1, sp, #56	; 0x38
 800a00c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800a010:	e757      	b.n	8009ec2 <__kernel_rem_pio2+0x1c2>
 800a012:	bf00      	nop
 800a014:	f3af 8000 	nop.w
	...
 800a024:	3ff00000 	.word	0x3ff00000
 800a028:	0800a968 	.word	0x0800a968
 800a02c:	40200000 	.word	0x40200000
 800a030:	3ff00000 	.word	0x3ff00000
 800a034:	3e700000 	.word	0x3e700000
 800a038:	41700000 	.word	0x41700000
 800a03c:	3fe00000 	.word	0x3fe00000
 800a040:	0800a928 	.word	0x0800a928
 800a044:	1e62      	subs	r2, r4, #1
 800a046:	ab0e      	add	r3, sp, #56	; 0x38
 800a048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a04c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800a050:	e7db      	b.n	800a00a <__kernel_rem_pio2+0x30a>
 800a052:	a90e      	add	r1, sp, #56	; 0x38
 800a054:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800a058:	3b01      	subs	r3, #1
 800a05a:	430a      	orrs	r2, r1
 800a05c:	e78b      	b.n	8009f76 <__kernel_rem_pio2+0x276>
 800a05e:	3301      	adds	r3, #1
 800a060:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800a064:	2900      	cmp	r1, #0
 800a066:	d0fa      	beq.n	800a05e <__kernel_rem_pio2+0x35e>
 800a068:	9a08      	ldr	r2, [sp, #32]
 800a06a:	4422      	add	r2, r4
 800a06c:	00d2      	lsls	r2, r2, #3
 800a06e:	a922      	add	r1, sp, #136	; 0x88
 800a070:	18e3      	adds	r3, r4, r3
 800a072:	9206      	str	r2, [sp, #24]
 800a074:	440a      	add	r2, r1
 800a076:	9302      	str	r3, [sp, #8]
 800a078:	f10b 0108 	add.w	r1, fp, #8
 800a07c:	f102 0308 	add.w	r3, r2, #8
 800a080:	1c66      	adds	r6, r4, #1
 800a082:	910a      	str	r1, [sp, #40]	; 0x28
 800a084:	2500      	movs	r5, #0
 800a086:	930d      	str	r3, [sp, #52]	; 0x34
 800a088:	9b02      	ldr	r3, [sp, #8]
 800a08a:	42b3      	cmp	r3, r6
 800a08c:	da04      	bge.n	800a098 <__kernel_rem_pio2+0x398>
 800a08e:	461c      	mov	r4, r3
 800a090:	e6a6      	b.n	8009de0 <__kernel_rem_pio2+0xe0>
 800a092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a094:	2301      	movs	r3, #1
 800a096:	e7e3      	b.n	800a060 <__kernel_rem_pio2+0x360>
 800a098:	9b06      	ldr	r3, [sp, #24]
 800a09a:	18ef      	adds	r7, r5, r3
 800a09c:	ab22      	add	r3, sp, #136	; 0x88
 800a09e:	441f      	add	r7, r3
 800a0a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a0a6:	f7f6 f9f5 	bl	8000494 <__aeabi_i2d>
 800a0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ac:	461c      	mov	r4, r3
 800a0ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0b0:	e9c7 0100 	strd	r0, r1, [r7]
 800a0b4:	eb03 0b05 	add.w	fp, r3, r5
 800a0b8:	2700      	movs	r7, #0
 800a0ba:	f04f 0800 	mov.w	r8, #0
 800a0be:	f04f 0900 	mov.w	r9, #0
 800a0c2:	9b07      	ldr	r3, [sp, #28]
 800a0c4:	429f      	cmp	r7, r3
 800a0c6:	dd08      	ble.n	800a0da <__kernel_rem_pio2+0x3da>
 800a0c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a0ca:	aa72      	add	r2, sp, #456	; 0x1c8
 800a0cc:	18eb      	adds	r3, r5, r3
 800a0ce:	4413      	add	r3, r2
 800a0d0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800a0d4:	3601      	adds	r6, #1
 800a0d6:	3508      	adds	r5, #8
 800a0d8:	e7d6      	b.n	800a088 <__kernel_rem_pio2+0x388>
 800a0da:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800a0de:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800a0e2:	f7f6 fa41 	bl	8000568 <__aeabi_dmul>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4640      	mov	r0, r8
 800a0ec:	4649      	mov	r1, r9
 800a0ee:	f7f6 f885 	bl	80001fc <__adddf3>
 800a0f2:	3701      	adds	r7, #1
 800a0f4:	4680      	mov	r8, r0
 800a0f6:	4689      	mov	r9, r1
 800a0f8:	e7e3      	b.n	800a0c2 <__kernel_rem_pio2+0x3c2>
 800a0fa:	3d01      	subs	r5, #1
 800a0fc:	e741      	b.n	8009f82 <__kernel_rem_pio2+0x282>
 800a0fe:	f1ca 0000 	rsb	r0, sl, #0
 800a102:	ec47 6b10 	vmov	d0, r6, r7
 800a106:	f000 fa83 	bl	800a610 <scalbn>
 800a10a:	ec57 6b10 	vmov	r6, r7, d0
 800a10e:	2200      	movs	r2, #0
 800a110:	4b99      	ldr	r3, [pc, #612]	; (800a378 <__kernel_rem_pio2+0x678>)
 800a112:	ee10 0a10 	vmov	r0, s0
 800a116:	4639      	mov	r1, r7
 800a118:	f7f6 fcac 	bl	8000a74 <__aeabi_dcmpge>
 800a11c:	b1f8      	cbz	r0, 800a15e <__kernel_rem_pio2+0x45e>
 800a11e:	2200      	movs	r2, #0
 800a120:	4b96      	ldr	r3, [pc, #600]	; (800a37c <__kernel_rem_pio2+0x67c>)
 800a122:	4630      	mov	r0, r6
 800a124:	4639      	mov	r1, r7
 800a126:	f7f6 fa1f 	bl	8000568 <__aeabi_dmul>
 800a12a:	f7f6 fcb7 	bl	8000a9c <__aeabi_d2iz>
 800a12e:	4680      	mov	r8, r0
 800a130:	f7f6 f9b0 	bl	8000494 <__aeabi_i2d>
 800a134:	2200      	movs	r2, #0
 800a136:	4b90      	ldr	r3, [pc, #576]	; (800a378 <__kernel_rem_pio2+0x678>)
 800a138:	f7f6 fa16 	bl	8000568 <__aeabi_dmul>
 800a13c:	460b      	mov	r3, r1
 800a13e:	4602      	mov	r2, r0
 800a140:	4639      	mov	r1, r7
 800a142:	4630      	mov	r0, r6
 800a144:	f7f6 f858 	bl	80001f8 <__aeabi_dsub>
 800a148:	f7f6 fca8 	bl	8000a9c <__aeabi_d2iz>
 800a14c:	1c65      	adds	r5, r4, #1
 800a14e:	ab0e      	add	r3, sp, #56	; 0x38
 800a150:	f10a 0a18 	add.w	sl, sl, #24
 800a154:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a158:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800a15c:	e719      	b.n	8009f92 <__kernel_rem_pio2+0x292>
 800a15e:	4630      	mov	r0, r6
 800a160:	4639      	mov	r1, r7
 800a162:	f7f6 fc9b 	bl	8000a9c <__aeabi_d2iz>
 800a166:	ab0e      	add	r3, sp, #56	; 0x38
 800a168:	4625      	mov	r5, r4
 800a16a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800a16e:	e710      	b.n	8009f92 <__kernel_rem_pio2+0x292>
 800a170:	ab0e      	add	r3, sp, #56	; 0x38
 800a172:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800a176:	f7f6 f98d 	bl	8000494 <__aeabi_i2d>
 800a17a:	4642      	mov	r2, r8
 800a17c:	464b      	mov	r3, r9
 800a17e:	f7f6 f9f3 	bl	8000568 <__aeabi_dmul>
 800a182:	2200      	movs	r2, #0
 800a184:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800a188:	4b7c      	ldr	r3, [pc, #496]	; (800a37c <__kernel_rem_pio2+0x67c>)
 800a18a:	4640      	mov	r0, r8
 800a18c:	4649      	mov	r1, r9
 800a18e:	f7f6 f9eb 	bl	8000568 <__aeabi_dmul>
 800a192:	3f01      	subs	r7, #1
 800a194:	4680      	mov	r8, r0
 800a196:	4689      	mov	r9, r1
 800a198:	e708      	b.n	8009fac <__kernel_rem_pio2+0x2ac>
 800a19a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800a19e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1a2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800a1a6:	f7f6 f9df 	bl	8000568 <__aeabi_dmul>
 800a1aa:	4602      	mov	r2, r0
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	4640      	mov	r0, r8
 800a1b0:	4649      	mov	r1, r9
 800a1b2:	f7f6 f823 	bl	80001fc <__adddf3>
 800a1b6:	3701      	adds	r7, #1
 800a1b8:	4680      	mov	r8, r0
 800a1ba:	4689      	mov	r9, r1
 800a1bc:	9b04      	ldr	r3, [sp, #16]
 800a1be:	429f      	cmp	r7, r3
 800a1c0:	dc01      	bgt.n	800a1c6 <__kernel_rem_pio2+0x4c6>
 800a1c2:	45ba      	cmp	sl, r7
 800a1c4:	dae9      	bge.n	800a19a <__kernel_rem_pio2+0x49a>
 800a1c6:	ab4a      	add	r3, sp, #296	; 0x128
 800a1c8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a1cc:	e9c3 8900 	strd	r8, r9, [r3]
 800a1d0:	f10a 0a01 	add.w	sl, sl, #1
 800a1d4:	3e08      	subs	r6, #8
 800a1d6:	e6f0      	b.n	8009fba <__kernel_rem_pio2+0x2ba>
 800a1d8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800a1da:	2b03      	cmp	r3, #3
 800a1dc:	d85b      	bhi.n	800a296 <__kernel_rem_pio2+0x596>
 800a1de:	e8df f003 	tbb	[pc, r3]
 800a1e2:	264a      	.short	0x264a
 800a1e4:	0226      	.short	0x0226
 800a1e6:	ab9a      	add	r3, sp, #616	; 0x268
 800a1e8:	441c      	add	r4, r3
 800a1ea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a1ee:	46a2      	mov	sl, r4
 800a1f0:	46ab      	mov	fp, r5
 800a1f2:	f1bb 0f00 	cmp.w	fp, #0
 800a1f6:	dc6c      	bgt.n	800a2d2 <__kernel_rem_pio2+0x5d2>
 800a1f8:	46a2      	mov	sl, r4
 800a1fa:	46ab      	mov	fp, r5
 800a1fc:	f1bb 0f01 	cmp.w	fp, #1
 800a200:	f300 8086 	bgt.w	800a310 <__kernel_rem_pio2+0x610>
 800a204:	2000      	movs	r0, #0
 800a206:	2100      	movs	r1, #0
 800a208:	2d01      	cmp	r5, #1
 800a20a:	f300 80a0 	bgt.w	800a34e <__kernel_rem_pio2+0x64e>
 800a20e:	9b02      	ldr	r3, [sp, #8]
 800a210:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800a214:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800a218:	2b00      	cmp	r3, #0
 800a21a:	f040 809e 	bne.w	800a35a <__kernel_rem_pio2+0x65a>
 800a21e:	9b01      	ldr	r3, [sp, #4]
 800a220:	e9c3 7800 	strd	r7, r8, [r3]
 800a224:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800a228:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a22c:	e033      	b.n	800a296 <__kernel_rem_pio2+0x596>
 800a22e:	3408      	adds	r4, #8
 800a230:	ab4a      	add	r3, sp, #296	; 0x128
 800a232:	441c      	add	r4, r3
 800a234:	462e      	mov	r6, r5
 800a236:	2000      	movs	r0, #0
 800a238:	2100      	movs	r1, #0
 800a23a:	2e00      	cmp	r6, #0
 800a23c:	da3a      	bge.n	800a2b4 <__kernel_rem_pio2+0x5b4>
 800a23e:	9b02      	ldr	r3, [sp, #8]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d03d      	beq.n	800a2c0 <__kernel_rem_pio2+0x5c0>
 800a244:	4602      	mov	r2, r0
 800a246:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a24a:	9c01      	ldr	r4, [sp, #4]
 800a24c:	e9c4 2300 	strd	r2, r3, [r4]
 800a250:	4602      	mov	r2, r0
 800a252:	460b      	mov	r3, r1
 800a254:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800a258:	f7f5 ffce 	bl	80001f8 <__aeabi_dsub>
 800a25c:	ae4c      	add	r6, sp, #304	; 0x130
 800a25e:	2401      	movs	r4, #1
 800a260:	42a5      	cmp	r5, r4
 800a262:	da30      	bge.n	800a2c6 <__kernel_rem_pio2+0x5c6>
 800a264:	9b02      	ldr	r3, [sp, #8]
 800a266:	b113      	cbz	r3, 800a26e <__kernel_rem_pio2+0x56e>
 800a268:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a26c:	4619      	mov	r1, r3
 800a26e:	9b01      	ldr	r3, [sp, #4]
 800a270:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800a274:	e00f      	b.n	800a296 <__kernel_rem_pio2+0x596>
 800a276:	ab9a      	add	r3, sp, #616	; 0x268
 800a278:	441c      	add	r4, r3
 800a27a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800a27e:	2000      	movs	r0, #0
 800a280:	2100      	movs	r1, #0
 800a282:	2d00      	cmp	r5, #0
 800a284:	da10      	bge.n	800a2a8 <__kernel_rem_pio2+0x5a8>
 800a286:	9b02      	ldr	r3, [sp, #8]
 800a288:	b113      	cbz	r3, 800a290 <__kernel_rem_pio2+0x590>
 800a28a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a28e:	4619      	mov	r1, r3
 800a290:	9b01      	ldr	r3, [sp, #4]
 800a292:	e9c3 0100 	strd	r0, r1, [r3]
 800a296:	9b06      	ldr	r3, [sp, #24]
 800a298:	f003 0007 	and.w	r0, r3, #7
 800a29c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800a2a0:	ecbd 8b02 	vpop	{d8}
 800a2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2a8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2ac:	f7f5 ffa6 	bl	80001fc <__adddf3>
 800a2b0:	3d01      	subs	r5, #1
 800a2b2:	e7e6      	b.n	800a282 <__kernel_rem_pio2+0x582>
 800a2b4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a2b8:	f7f5 ffa0 	bl	80001fc <__adddf3>
 800a2bc:	3e01      	subs	r6, #1
 800a2be:	e7bc      	b.n	800a23a <__kernel_rem_pio2+0x53a>
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	e7c1      	b.n	800a24a <__kernel_rem_pio2+0x54a>
 800a2c6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800a2ca:	f7f5 ff97 	bl	80001fc <__adddf3>
 800a2ce:	3401      	adds	r4, #1
 800a2d0:	e7c6      	b.n	800a260 <__kernel_rem_pio2+0x560>
 800a2d2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800a2d6:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a2da:	4640      	mov	r0, r8
 800a2dc:	ec53 2b17 	vmov	r2, r3, d7
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a2e6:	f7f5 ff89 	bl	80001fc <__adddf3>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	460b      	mov	r3, r1
 800a2ee:	4606      	mov	r6, r0
 800a2f0:	460f      	mov	r7, r1
 800a2f2:	4640      	mov	r0, r8
 800a2f4:	4649      	mov	r1, r9
 800a2f6:	f7f5 ff7f 	bl	80001f8 <__aeabi_dsub>
 800a2fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a2fe:	f7f5 ff7d 	bl	80001fc <__adddf3>
 800a302:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a306:	e9ca 0100 	strd	r0, r1, [sl]
 800a30a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800a30e:	e770      	b.n	800a1f2 <__kernel_rem_pio2+0x4f2>
 800a310:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800a314:	ed3a 7b02 	vldmdb	sl!, {d7}
 800a318:	4630      	mov	r0, r6
 800a31a:	ec53 2b17 	vmov	r2, r3, d7
 800a31e:	4639      	mov	r1, r7
 800a320:	ed8d 7b04 	vstr	d7, [sp, #16]
 800a324:	f7f5 ff6a 	bl	80001fc <__adddf3>
 800a328:	4602      	mov	r2, r0
 800a32a:	460b      	mov	r3, r1
 800a32c:	4680      	mov	r8, r0
 800a32e:	4689      	mov	r9, r1
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f5 ff60 	bl	80001f8 <__aeabi_dsub>
 800a338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a33c:	f7f5 ff5e 	bl	80001fc <__adddf3>
 800a340:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a344:	e9ca 0100 	strd	r0, r1, [sl]
 800a348:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800a34c:	e756      	b.n	800a1fc <__kernel_rem_pio2+0x4fc>
 800a34e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800a352:	f7f5 ff53 	bl	80001fc <__adddf3>
 800a356:	3d01      	subs	r5, #1
 800a358:	e756      	b.n	800a208 <__kernel_rem_pio2+0x508>
 800a35a:	9b01      	ldr	r3, [sp, #4]
 800a35c:	9a01      	ldr	r2, [sp, #4]
 800a35e:	601f      	str	r7, [r3, #0]
 800a360:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800a364:	605c      	str	r4, [r3, #4]
 800a366:	609d      	str	r5, [r3, #8]
 800a368:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a36c:	60d3      	str	r3, [r2, #12]
 800a36e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a372:	6110      	str	r0, [r2, #16]
 800a374:	6153      	str	r3, [r2, #20]
 800a376:	e78e      	b.n	800a296 <__kernel_rem_pio2+0x596>
 800a378:	41700000 	.word	0x41700000
 800a37c:	3e700000 	.word	0x3e700000

0800a380 <__kernel_sin>:
 800a380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a384:	ec55 4b10 	vmov	r4, r5, d0
 800a388:	b085      	sub	sp, #20
 800a38a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a38e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800a392:	ed8d 1b00 	vstr	d1, [sp]
 800a396:	9002      	str	r0, [sp, #8]
 800a398:	da06      	bge.n	800a3a8 <__kernel_sin+0x28>
 800a39a:	ee10 0a10 	vmov	r0, s0
 800a39e:	4629      	mov	r1, r5
 800a3a0:	f7f6 fb7c 	bl	8000a9c <__aeabi_d2iz>
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d051      	beq.n	800a44c <__kernel_sin+0xcc>
 800a3a8:	4622      	mov	r2, r4
 800a3aa:	462b      	mov	r3, r5
 800a3ac:	4620      	mov	r0, r4
 800a3ae:	4629      	mov	r1, r5
 800a3b0:	f7f6 f8da 	bl	8000568 <__aeabi_dmul>
 800a3b4:	4682      	mov	sl, r0
 800a3b6:	468b      	mov	fp, r1
 800a3b8:	4602      	mov	r2, r0
 800a3ba:	460b      	mov	r3, r1
 800a3bc:	4620      	mov	r0, r4
 800a3be:	4629      	mov	r1, r5
 800a3c0:	f7f6 f8d2 	bl	8000568 <__aeabi_dmul>
 800a3c4:	a341      	add	r3, pc, #260	; (adr r3, 800a4cc <__kernel_sin+0x14c>)
 800a3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ca:	4680      	mov	r8, r0
 800a3cc:	4689      	mov	r9, r1
 800a3ce:	4650      	mov	r0, sl
 800a3d0:	4659      	mov	r1, fp
 800a3d2:	f7f6 f8c9 	bl	8000568 <__aeabi_dmul>
 800a3d6:	a33f      	add	r3, pc, #252	; (adr r3, 800a4d4 <__kernel_sin+0x154>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f5 ff0c 	bl	80001f8 <__aeabi_dsub>
 800a3e0:	4652      	mov	r2, sl
 800a3e2:	465b      	mov	r3, fp
 800a3e4:	f7f6 f8c0 	bl	8000568 <__aeabi_dmul>
 800a3e8:	a33c      	add	r3, pc, #240	; (adr r3, 800a4dc <__kernel_sin+0x15c>)
 800a3ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ee:	f7f5 ff05 	bl	80001fc <__adddf3>
 800a3f2:	4652      	mov	r2, sl
 800a3f4:	465b      	mov	r3, fp
 800a3f6:	f7f6 f8b7 	bl	8000568 <__aeabi_dmul>
 800a3fa:	a33a      	add	r3, pc, #232	; (adr r3, 800a4e4 <__kernel_sin+0x164>)
 800a3fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a400:	f7f5 fefa 	bl	80001f8 <__aeabi_dsub>
 800a404:	4652      	mov	r2, sl
 800a406:	465b      	mov	r3, fp
 800a408:	f7f6 f8ae 	bl	8000568 <__aeabi_dmul>
 800a40c:	a337      	add	r3, pc, #220	; (adr r3, 800a4ec <__kernel_sin+0x16c>)
 800a40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a412:	f7f5 fef3 	bl	80001fc <__adddf3>
 800a416:	9b02      	ldr	r3, [sp, #8]
 800a418:	4606      	mov	r6, r0
 800a41a:	460f      	mov	r7, r1
 800a41c:	b9db      	cbnz	r3, 800a456 <__kernel_sin+0xd6>
 800a41e:	4602      	mov	r2, r0
 800a420:	460b      	mov	r3, r1
 800a422:	4650      	mov	r0, sl
 800a424:	4659      	mov	r1, fp
 800a426:	f7f6 f89f 	bl	8000568 <__aeabi_dmul>
 800a42a:	a325      	add	r3, pc, #148	; (adr r3, 800a4c0 <__kernel_sin+0x140>)
 800a42c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a430:	f7f5 fee2 	bl	80001f8 <__aeabi_dsub>
 800a434:	4642      	mov	r2, r8
 800a436:	464b      	mov	r3, r9
 800a438:	f7f6 f896 	bl	8000568 <__aeabi_dmul>
 800a43c:	4602      	mov	r2, r0
 800a43e:	460b      	mov	r3, r1
 800a440:	4620      	mov	r0, r4
 800a442:	4629      	mov	r1, r5
 800a444:	f7f5 feda 	bl	80001fc <__adddf3>
 800a448:	4604      	mov	r4, r0
 800a44a:	460d      	mov	r5, r1
 800a44c:	ec45 4b10 	vmov	d0, r4, r5
 800a450:	b005      	add	sp, #20
 800a452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a456:	2200      	movs	r2, #0
 800a458:	4b1b      	ldr	r3, [pc, #108]	; (800a4c8 <__kernel_sin+0x148>)
 800a45a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a45e:	f7f6 f883 	bl	8000568 <__aeabi_dmul>
 800a462:	4632      	mov	r2, r6
 800a464:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a468:	463b      	mov	r3, r7
 800a46a:	4640      	mov	r0, r8
 800a46c:	4649      	mov	r1, r9
 800a46e:	f7f6 f87b 	bl	8000568 <__aeabi_dmul>
 800a472:	4602      	mov	r2, r0
 800a474:	460b      	mov	r3, r1
 800a476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a47a:	f7f5 febd 	bl	80001f8 <__aeabi_dsub>
 800a47e:	4652      	mov	r2, sl
 800a480:	465b      	mov	r3, fp
 800a482:	f7f6 f871 	bl	8000568 <__aeabi_dmul>
 800a486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a48a:	f7f5 feb5 	bl	80001f8 <__aeabi_dsub>
 800a48e:	a30c      	add	r3, pc, #48	; (adr r3, 800a4c0 <__kernel_sin+0x140>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	4606      	mov	r6, r0
 800a496:	460f      	mov	r7, r1
 800a498:	4640      	mov	r0, r8
 800a49a:	4649      	mov	r1, r9
 800a49c:	f7f6 f864 	bl	8000568 <__aeabi_dmul>
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	4639      	mov	r1, r7
 800a4a8:	f7f5 fea8 	bl	80001fc <__adddf3>
 800a4ac:	4602      	mov	r2, r0
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	4620      	mov	r0, r4
 800a4b2:	4629      	mov	r1, r5
 800a4b4:	f7f5 fea0 	bl	80001f8 <__aeabi_dsub>
 800a4b8:	e7c6      	b.n	800a448 <__kernel_sin+0xc8>
 800a4ba:	bf00      	nop
 800a4bc:	f3af 8000 	nop.w
 800a4c0:	55555549 	.word	0x55555549
 800a4c4:	3fc55555 	.word	0x3fc55555
 800a4c8:	3fe00000 	.word	0x3fe00000
 800a4cc:	5acfd57c 	.word	0x5acfd57c
 800a4d0:	3de5d93a 	.word	0x3de5d93a
 800a4d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800a4d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800a4dc:	57b1fe7d 	.word	0x57b1fe7d
 800a4e0:	3ec71de3 	.word	0x3ec71de3
 800a4e4:	19c161d5 	.word	0x19c161d5
 800a4e8:	3f2a01a0 	.word	0x3f2a01a0
 800a4ec:	1110f8a6 	.word	0x1110f8a6
 800a4f0:	3f811111 	.word	0x3f811111

0800a4f4 <fabs>:
 800a4f4:	ec51 0b10 	vmov	r0, r1, d0
 800a4f8:	ee10 2a10 	vmov	r2, s0
 800a4fc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a500:	ec43 2b10 	vmov	d0, r2, r3
 800a504:	4770      	bx	lr
	...

0800a508 <floor>:
 800a508:	ec51 0b10 	vmov	r0, r1, d0
 800a50c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a510:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800a514:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800a518:	2e13      	cmp	r6, #19
 800a51a:	460c      	mov	r4, r1
 800a51c:	ee10 5a10 	vmov	r5, s0
 800a520:	4680      	mov	r8, r0
 800a522:	dc34      	bgt.n	800a58e <floor+0x86>
 800a524:	2e00      	cmp	r6, #0
 800a526:	da16      	bge.n	800a556 <floor+0x4e>
 800a528:	a335      	add	r3, pc, #212	; (adr r3, 800a600 <floor+0xf8>)
 800a52a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a52e:	f7f5 fe65 	bl	80001fc <__adddf3>
 800a532:	2200      	movs	r2, #0
 800a534:	2300      	movs	r3, #0
 800a536:	f7f6 faa7 	bl	8000a88 <__aeabi_dcmpgt>
 800a53a:	b148      	cbz	r0, 800a550 <floor+0x48>
 800a53c:	2c00      	cmp	r4, #0
 800a53e:	da59      	bge.n	800a5f4 <floor+0xec>
 800a540:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a544:	4a30      	ldr	r2, [pc, #192]	; (800a608 <floor+0x100>)
 800a546:	432b      	orrs	r3, r5
 800a548:	2500      	movs	r5, #0
 800a54a:	42ab      	cmp	r3, r5
 800a54c:	bf18      	it	ne
 800a54e:	4614      	movne	r4, r2
 800a550:	4621      	mov	r1, r4
 800a552:	4628      	mov	r0, r5
 800a554:	e025      	b.n	800a5a2 <floor+0x9a>
 800a556:	4f2d      	ldr	r7, [pc, #180]	; (800a60c <floor+0x104>)
 800a558:	4137      	asrs	r7, r6
 800a55a:	ea01 0307 	and.w	r3, r1, r7
 800a55e:	4303      	orrs	r3, r0
 800a560:	d01f      	beq.n	800a5a2 <floor+0x9a>
 800a562:	a327      	add	r3, pc, #156	; (adr r3, 800a600 <floor+0xf8>)
 800a564:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a568:	f7f5 fe48 	bl	80001fc <__adddf3>
 800a56c:	2200      	movs	r2, #0
 800a56e:	2300      	movs	r3, #0
 800a570:	f7f6 fa8a 	bl	8000a88 <__aeabi_dcmpgt>
 800a574:	2800      	cmp	r0, #0
 800a576:	d0eb      	beq.n	800a550 <floor+0x48>
 800a578:	2c00      	cmp	r4, #0
 800a57a:	bfbe      	ittt	lt
 800a57c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800a580:	fa43 f606 	asrlt.w	r6, r3, r6
 800a584:	19a4      	addlt	r4, r4, r6
 800a586:	ea24 0407 	bic.w	r4, r4, r7
 800a58a:	2500      	movs	r5, #0
 800a58c:	e7e0      	b.n	800a550 <floor+0x48>
 800a58e:	2e33      	cmp	r6, #51	; 0x33
 800a590:	dd0b      	ble.n	800a5aa <floor+0xa2>
 800a592:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a596:	d104      	bne.n	800a5a2 <floor+0x9a>
 800a598:	ee10 2a10 	vmov	r2, s0
 800a59c:	460b      	mov	r3, r1
 800a59e:	f7f5 fe2d 	bl	80001fc <__adddf3>
 800a5a2:	ec41 0b10 	vmov	d0, r0, r1
 800a5a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5aa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800a5ae:	f04f 33ff 	mov.w	r3, #4294967295
 800a5b2:	fa23 f707 	lsr.w	r7, r3, r7
 800a5b6:	4207      	tst	r7, r0
 800a5b8:	d0f3      	beq.n	800a5a2 <floor+0x9a>
 800a5ba:	a311      	add	r3, pc, #68	; (adr r3, 800a600 <floor+0xf8>)
 800a5bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5c0:	f7f5 fe1c 	bl	80001fc <__adddf3>
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	f7f6 fa5e 	bl	8000a88 <__aeabi_dcmpgt>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	d0bf      	beq.n	800a550 <floor+0x48>
 800a5d0:	2c00      	cmp	r4, #0
 800a5d2:	da02      	bge.n	800a5da <floor+0xd2>
 800a5d4:	2e14      	cmp	r6, #20
 800a5d6:	d103      	bne.n	800a5e0 <floor+0xd8>
 800a5d8:	3401      	adds	r4, #1
 800a5da:	ea25 0507 	bic.w	r5, r5, r7
 800a5de:	e7b7      	b.n	800a550 <floor+0x48>
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800a5e6:	fa03 f606 	lsl.w	r6, r3, r6
 800a5ea:	4435      	add	r5, r6
 800a5ec:	4545      	cmp	r5, r8
 800a5ee:	bf38      	it	cc
 800a5f0:	18e4      	addcc	r4, r4, r3
 800a5f2:	e7f2      	b.n	800a5da <floor+0xd2>
 800a5f4:	2500      	movs	r5, #0
 800a5f6:	462c      	mov	r4, r5
 800a5f8:	e7aa      	b.n	800a550 <floor+0x48>
 800a5fa:	bf00      	nop
 800a5fc:	f3af 8000 	nop.w
 800a600:	8800759c 	.word	0x8800759c
 800a604:	7e37e43c 	.word	0x7e37e43c
 800a608:	bff00000 	.word	0xbff00000
 800a60c:	000fffff 	.word	0x000fffff

0800a610 <scalbn>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	ec55 4b10 	vmov	r4, r5, d0
 800a616:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a61a:	4606      	mov	r6, r0
 800a61c:	462b      	mov	r3, r5
 800a61e:	b9aa      	cbnz	r2, 800a64c <scalbn+0x3c>
 800a620:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a624:	4323      	orrs	r3, r4
 800a626:	d03b      	beq.n	800a6a0 <scalbn+0x90>
 800a628:	4b31      	ldr	r3, [pc, #196]	; (800a6f0 <scalbn+0xe0>)
 800a62a:	4629      	mov	r1, r5
 800a62c:	2200      	movs	r2, #0
 800a62e:	ee10 0a10 	vmov	r0, s0
 800a632:	f7f5 ff99 	bl	8000568 <__aeabi_dmul>
 800a636:	4b2f      	ldr	r3, [pc, #188]	; (800a6f4 <scalbn+0xe4>)
 800a638:	429e      	cmp	r6, r3
 800a63a:	4604      	mov	r4, r0
 800a63c:	460d      	mov	r5, r1
 800a63e:	da12      	bge.n	800a666 <scalbn+0x56>
 800a640:	a327      	add	r3, pc, #156	; (adr r3, 800a6e0 <scalbn+0xd0>)
 800a642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a646:	f7f5 ff8f 	bl	8000568 <__aeabi_dmul>
 800a64a:	e009      	b.n	800a660 <scalbn+0x50>
 800a64c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a650:	428a      	cmp	r2, r1
 800a652:	d10c      	bne.n	800a66e <scalbn+0x5e>
 800a654:	ee10 2a10 	vmov	r2, s0
 800a658:	4620      	mov	r0, r4
 800a65a:	4629      	mov	r1, r5
 800a65c:	f7f5 fdce 	bl	80001fc <__adddf3>
 800a660:	4604      	mov	r4, r0
 800a662:	460d      	mov	r5, r1
 800a664:	e01c      	b.n	800a6a0 <scalbn+0x90>
 800a666:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a66a:	460b      	mov	r3, r1
 800a66c:	3a36      	subs	r2, #54	; 0x36
 800a66e:	4432      	add	r2, r6
 800a670:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a674:	428a      	cmp	r2, r1
 800a676:	dd0b      	ble.n	800a690 <scalbn+0x80>
 800a678:	ec45 4b11 	vmov	d1, r4, r5
 800a67c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800a6e8 <scalbn+0xd8>
 800a680:	f000 f83c 	bl	800a6fc <copysign>
 800a684:	a318      	add	r3, pc, #96	; (adr r3, 800a6e8 <scalbn+0xd8>)
 800a686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a68a:	ec51 0b10 	vmov	r0, r1, d0
 800a68e:	e7da      	b.n	800a646 <scalbn+0x36>
 800a690:	2a00      	cmp	r2, #0
 800a692:	dd08      	ble.n	800a6a6 <scalbn+0x96>
 800a694:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a698:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a69c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6a0:	ec45 4b10 	vmov	d0, r4, r5
 800a6a4:	bd70      	pop	{r4, r5, r6, pc}
 800a6a6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a6aa:	da0d      	bge.n	800a6c8 <scalbn+0xb8>
 800a6ac:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a6b0:	429e      	cmp	r6, r3
 800a6b2:	ec45 4b11 	vmov	d1, r4, r5
 800a6b6:	dce1      	bgt.n	800a67c <scalbn+0x6c>
 800a6b8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800a6e0 <scalbn+0xd0>
 800a6bc:	f000 f81e 	bl	800a6fc <copysign>
 800a6c0:	a307      	add	r3, pc, #28	; (adr r3, 800a6e0 <scalbn+0xd0>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	e7e0      	b.n	800a68a <scalbn+0x7a>
 800a6c8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a6cc:	3236      	adds	r2, #54	; 0x36
 800a6ce:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a6d2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	4629      	mov	r1, r5
 800a6da:	2200      	movs	r2, #0
 800a6dc:	4b06      	ldr	r3, [pc, #24]	; (800a6f8 <scalbn+0xe8>)
 800a6de:	e7b2      	b.n	800a646 <scalbn+0x36>
 800a6e0:	c2f8f359 	.word	0xc2f8f359
 800a6e4:	01a56e1f 	.word	0x01a56e1f
 800a6e8:	8800759c 	.word	0x8800759c
 800a6ec:	7e37e43c 	.word	0x7e37e43c
 800a6f0:	43500000 	.word	0x43500000
 800a6f4:	ffff3cb0 	.word	0xffff3cb0
 800a6f8:	3c900000 	.word	0x3c900000

0800a6fc <copysign>:
 800a6fc:	ec51 0b10 	vmov	r0, r1, d0
 800a700:	ee11 0a90 	vmov	r0, s3
 800a704:	ee10 2a10 	vmov	r2, s0
 800a708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800a70c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800a710:	ea41 0300 	orr.w	r3, r1, r0
 800a714:	ec43 2b10 	vmov	d0, r2, r3
 800a718:	4770      	bx	lr
	...

0800a71c <_init>:
 800a71c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a71e:	bf00      	nop
 800a720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a722:	bc08      	pop	{r3}
 800a724:	469e      	mov	lr, r3
 800a726:	4770      	bx	lr

0800a728 <_fini>:
 800a728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72a:	bf00      	nop
 800a72c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72e:	bc08      	pop	{r3}
 800a730:	469e      	mov	lr, r3
 800a732:	4770      	bx	lr
