
STM32F439ZIT6U waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bd4  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008d88  08008d88  00018d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008fc8  08008fc8  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  08008fc8  08008fc8  00018fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008fd0  08008fd0  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008fd0  08008fd0  00018fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008fd4  08008fd4  00018fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  08008fd8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d98  20000204  080091dc  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001f9c  080091dc  00021f9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002059c  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000480e  00000000  00000000  000407d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e0  00000000  00000000  00044fe0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016c0  00000000  00000000  000468c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a1dd  00000000  00000000  00047f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000191e5  00000000  00000000  0007215d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8835  00000000  00000000  0008b342  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00173b77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c38  00000000  00000000  00173bf4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008d6c 	.word	0x08008d6c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	08008d6c 	.word	0x08008d6c

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_ADC1_Init+0x9c>)
 8000e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e6c:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <MX_ADC1_Init+0xa0>)
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e8c:	f001 f8d4 	bl	8002038 <HAL_ADC_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 fbf1 	bl	800167c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000eac:	f001 f908 	bl	80020c0 <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eb6:	f000 fbe1 	bl	800167c <Error_Handler>
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000022c 	.word	0x2000022c
 8000ec8:	40012000 	.word	0x40012000
 8000ecc:	0f000001 	.word	0x0f000001

08000ed0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_ADC_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d127      	bne.n	8000f42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_ADC_MspInit+0x84>)
 8000f3e:	f002 f933 	bl	80031a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <MX_DAC_Init+0x60>)
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <MX_DAC_Init+0x64>)
 8000f6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f6c:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <MX_DAC_Init+0x60>)
 8000f6e:	f001 fbe6 	bl	800273e <HAL_DAC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f78:	f000 fb80 	bl	800167c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f7c:	2324      	movs	r3, #36	; 0x24
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480b      	ldr	r0, [pc, #44]	; (8000fb8 <MX_DAC_Init+0x60>)
 8000f8c:	f001 fcc6 	bl	800291c <HAL_DAC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f96:	f000 fb71 	bl	800167c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2210      	movs	r2, #16
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	; (8000fb8 <MX_DAC_Init+0x60>)
 8000fa2:	f001 fcbb 	bl	800291c <HAL_DAC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000fac:	f000 fb66 	bl	800167c <Error_Handler>
  }

}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	200002d4 	.word	0x200002d4
 8000fbc:	40007400 	.word	0x40007400

08000fc0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a48      	ldr	r2, [pc, #288]	; (8001100 <HAL_DAC_MspInit+0x140>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	f040 8089 	bne.w	80010f6 <HAL_DAC_MspInit+0x136>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	4b46      	ldr	r3, [pc, #280]	; (8001104 <HAL_DAC_MspInit+0x144>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fec:	4a45      	ldr	r2, [pc, #276]	; (8001104 <HAL_DAC_MspInit+0x144>)
 8000fee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff4:	4b43      	ldr	r3, [pc, #268]	; (8001104 <HAL_DAC_MspInit+0x144>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ffc:	613b      	str	r3, [r7, #16]
 8000ffe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <HAL_DAC_MspInit+0x144>)
 8001006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001008:	4a3e      	ldr	r2, [pc, #248]	; (8001104 <HAL_DAC_MspInit+0x144>)
 800100a:	f043 0301 	orr.w	r3, r3, #1
 800100e:	6313      	str	r3, [r2, #48]	; 0x30
 8001010:	4b3c      	ldr	r3, [pc, #240]	; (8001104 <HAL_DAC_MspInit+0x144>)
 8001012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800101c:	2330      	movs	r3, #48	; 0x30
 800101e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001020:	2303      	movs	r3, #3
 8001022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	4619      	mov	r1, r3
 800102e:	4836      	ldr	r0, [pc, #216]	; (8001108 <HAL_DAC_MspInit+0x148>)
 8001030:	f002 f8ba 	bl	80031a8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001034:	4b35      	ldr	r3, [pc, #212]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001036:	4a36      	ldr	r2, [pc, #216]	; (8001110 <HAL_DAC_MspInit+0x150>)
 8001038:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800103a:	4b34      	ldr	r3, [pc, #208]	; (800110c <HAL_DAC_MspInit+0x14c>)
 800103c:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001040:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001042:	4b32      	ldr	r3, [pc, #200]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001044:	2240      	movs	r2, #64	; 0x40
 8001046:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001048:	4b30      	ldr	r3, [pc, #192]	; (800110c <HAL_DAC_MspInit+0x14c>)
 800104a:	2200      	movs	r2, #0
 800104c:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 800104e:	4b2f      	ldr	r3, [pc, #188]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001054:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001056:	4b2d      	ldr	r3, [pc, #180]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001058:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800105c:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800105e:	4b2b      	ldr	r3, [pc, #172]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001060:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001064:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8001066:	4b29      	ldr	r3, [pc, #164]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800106c:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 800106e:	4b27      	ldr	r3, [pc, #156]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001070:	2200      	movs	r2, #0
 8001072:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001074:	4b25      	ldr	r3, [pc, #148]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800107a:	4824      	ldr	r0, [pc, #144]	; (800110c <HAL_DAC_MspInit+0x14c>)
 800107c:	f001 fd26 	bl	8002acc <HAL_DMA_Init>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8001086:	f000 faf9 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	4a1f      	ldr	r2, [pc, #124]	; (800110c <HAL_DAC_MspInit+0x14c>)
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	4a1e      	ldr	r2, [pc, #120]	; (800110c <HAL_DAC_MspInit+0x14c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8001096:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <HAL_DAC_MspInit+0x154>)
 8001098:	4a1f      	ldr	r2, [pc, #124]	; (8001118 <HAL_DAC_MspInit+0x158>)
 800109a:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 800109c:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_DAC_MspInit+0x154>)
 800109e:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a4:	4b1b      	ldr	r3, [pc, #108]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010a6:	2240      	movs	r2, #64	; 0x40
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80010b0:	4b18      	ldr	r3, [pc, #96]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b8:	4b16      	ldr	r3, [pc, #88]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010be:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c0:	4b14      	ldr	r3, [pc, #80]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_NORMAL;
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b11      	ldr	r3, [pc, #68]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d4:	4b0f      	ldr	r3, [pc, #60]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80010da:	480e      	ldr	r0, [pc, #56]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010dc:	f001 fcf6 	bl	8002acc <HAL_DMA_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_DAC_MspInit+0x12a>
    {
      Error_Handler();
 80010e6:	f000 fac9 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a09      	ldr	r2, [pc, #36]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010ee:	60da      	str	r2, [r3, #12]
 80010f0:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_DAC_MspInit+0x154>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	; 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40007400 	.word	0x40007400
 8001104:	40023800 	.word	0x40023800
 8001108:	40020000 	.word	0x40020000
 800110c:	20000274 	.word	0x20000274
 8001110:	40026088 	.word	0x40026088
 8001114:	200002e8 	.word	0x200002e8
 8001118:	400260a0 	.word	0x400260a0

0800111c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	607b      	str	r3, [r7, #4]
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <MX_DMA_Init+0x4c>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a0f      	ldr	r2, [pc, #60]	; (8001168 <MX_DMA_Init+0x4c>)
 800112c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0d      	ldr	r3, [pc, #52]	; (8001168 <MX_DMA_Init+0x4c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800113a:	607b      	str	r3, [r7, #4]
 800113c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	2100      	movs	r1, #0
 8001142:	2010      	movs	r0, #16
 8001144:	f001 fac5 	bl	80026d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001148:	2010      	movs	r0, #16
 800114a:	f001 fade 	bl	800270a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2011      	movs	r0, #17
 8001154:	f001 fabd 	bl	80026d2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001158:	2011      	movs	r0, #17
 800115a:	f001 fad6 	bl	800270a <HAL_NVIC_EnableIRQ>

}
 800115e:	bf00      	nop
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800

0800116c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08a      	sub	sp, #40	; 0x28
 8001170:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b3e      	ldr	r3, [pc, #248]	; (8001280 <MX_GPIO_Init+0x114>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a3d      	ldr	r2, [pc, #244]	; (8001280 <MX_GPIO_Init+0x114>)
 800118c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b3b      	ldr	r3, [pc, #236]	; (8001280 <MX_GPIO_Init+0x114>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b37      	ldr	r3, [pc, #220]	; (8001280 <MX_GPIO_Init+0x114>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a36      	ldr	r2, [pc, #216]	; (8001280 <MX_GPIO_Init+0x114>)
 80011a8:	f043 0304 	orr.w	r3, r3, #4
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b34      	ldr	r3, [pc, #208]	; (8001280 <MX_GPIO_Init+0x114>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0304 	and.w	r3, r3, #4
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	4b30      	ldr	r3, [pc, #192]	; (8001280 <MX_GPIO_Init+0x114>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a2f      	ldr	r2, [pc, #188]	; (8001280 <MX_GPIO_Init+0x114>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b2d      	ldr	r3, [pc, #180]	; (8001280 <MX_GPIO_Init+0x114>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	607b      	str	r3, [r7, #4]
 80011da:	4b29      	ldr	r3, [pc, #164]	; (8001280 <MX_GPIO_Init+0x114>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a28      	ldr	r2, [pc, #160]	; (8001280 <MX_GPIO_Init+0x114>)
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b26      	ldr	r3, [pc, #152]	; (8001280 <MX_GPIO_Init+0x114>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	603b      	str	r3, [r7, #0]
 80011f6:	4b22      	ldr	r3, [pc, #136]	; (8001280 <MX_GPIO_Init+0x114>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a21      	ldr	r2, [pc, #132]	; (8001280 <MX_GPIO_Init+0x114>)
 80011fc:	f043 0308 	orr.w	r3, r3, #8
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b1f      	ldr	r3, [pc, #124]	; (8001280 <MX_GPIO_Init+0x114>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAX485_PWR_Pin|MAX485_DE_Pin, GPIO_PIN_RESET);
 800120e:	2200      	movs	r2, #0
 8001210:	2103      	movs	r1, #3
 8001212:	481c      	ldr	r0, [pc, #112]	; (8001284 <MX_GPIO_Init+0x118>)
 8001214:	f002 f972 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8001218:	2200      	movs	r2, #0
 800121a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800121e:	481a      	ldr	r0, [pc, #104]	; (8001288 <MX_GPIO_Init+0x11c>)
 8001220:	f002 f96c 	bl	80034fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAX485_PWR_Pin|MAX485_DE_Pin;
 8001224:	2303      	movs	r3, #3
 8001226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001228:	2301      	movs	r3, #1
 800122a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	2300      	movs	r3, #0
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001230:	2300      	movs	r3, #0
 8001232:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	4619      	mov	r1, r3
 800123a:	4812      	ldr	r0, [pc, #72]	; (8001284 <MX_GPIO_Init+0x118>)
 800123c:	f001 ffb4 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001240:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001246:	2301      	movs	r3, #1
 8001248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124a:	2300      	movs	r3, #0
 800124c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124e:	2300      	movs	r3, #0
 8001250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001252:	f107 0314 	add.w	r3, r7, #20
 8001256:	4619      	mov	r1, r3
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <MX_GPIO_Init+0x11c>)
 800125a:	f001 ffa5 	bl	80031a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Btn3_Input_Pin|Btn2_Input_Pin|Btn1_Input_Pin;
 800125e:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001264:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_GPIO_Init+0x120>)
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	4804      	ldr	r0, [pc, #16]	; (8001284 <MX_GPIO_Init+0x118>)
 8001274:	f001 ff98 	bl	80031a8 <HAL_GPIO_Init>

}
 8001278:	bf00      	nop
 800127a:	3728      	adds	r7, #40	; 0x28
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40023800 	.word	0x40023800
 8001284:	40020800 	.word	0x40020800
 8001288:	40020400 	.word	0x40020400
 800128c:	10110000 	.word	0x10110000

08001290 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_I2C1_Init+0x74>)
 8001296:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <MX_I2C1_Init+0x78>)
 8001298:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800129a:	4b1a      	ldr	r3, [pc, #104]	; (8001304 <MX_I2C1_Init+0x74>)
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <MX_I2C1_Init+0x7c>)
 800129e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_I2C1_Init+0x74>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012a6:	4b17      	ldr	r3, [pc, #92]	; (8001304 <MX_I2C1_Init+0x74>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ac:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_I2C1_Init+0x74>)
 80012ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012b2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c0:	4b10      	ldr	r3, [pc, #64]	; (8001304 <MX_I2C1_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_I2C1_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <MX_I2C1_Init+0x74>)
 80012ce:	f002 f92f 	bl	8003530 <HAL_I2C_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012d8:	f000 f9d0 	bl	800167c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012dc:	2100      	movs	r1, #0
 80012de:	4809      	ldr	r0, [pc, #36]	; (8001304 <MX_I2C1_Init+0x74>)
 80012e0:	f002 fa5e 	bl	80037a0 <HAL_I2CEx_ConfigAnalogFilter>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012ea:	f000 f9c7 	bl	800167c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012ee:	2100      	movs	r1, #0
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_I2C1_Init+0x74>)
 80012f2:	f002 fa91 	bl	8003818 <HAL_I2CEx_ConfigDigitalFilter>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80012fc:	f000 f9be 	bl	800167c <Error_Handler>
  }

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000348 	.word	0x20000348
 8001308:	40005400 	.word	0x40005400
 800130c:	000186a0 	.word	0x000186a0

08001310 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 0314 	add.w	r3, r7, #20
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a19      	ldr	r2, [pc, #100]	; (8001394 <HAL_I2C_MspInit+0x84>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d12c      	bne.n	800138c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
 8001336:	4b18      	ldr	r3, [pc, #96]	; (8001398 <HAL_I2C_MspInit+0x88>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a17      	ldr	r2, [pc, #92]	; (8001398 <HAL_I2C_MspInit+0x88>)
 800133c:	f043 0302 	orr.w	r3, r3, #2
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_I2C_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	613b      	str	r3, [r7, #16]
 800134c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 800134e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001352:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001354:	2312      	movs	r3, #18
 8001356:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001358:	2301      	movs	r3, #1
 800135a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001360:	2304      	movs	r3, #4
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001364:	f107 0314 	add.w	r3, r7, #20
 8001368:	4619      	mov	r1, r3
 800136a:	480c      	ldr	r0, [pc, #48]	; (800139c <HAL_I2C_MspInit+0x8c>)
 800136c:	f001 ff1c 	bl	80031a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001370:	2300      	movs	r3, #0
 8001372:	60fb      	str	r3, [r7, #12]
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <HAL_I2C_MspInit+0x88>)
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	4a07      	ldr	r2, [pc, #28]	; (8001398 <HAL_I2C_MspInit+0x88>)
 800137a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800137e:	6413      	str	r3, [r2, #64]	; 0x40
 8001380:	4b05      	ldr	r3, [pc, #20]	; (8001398 <HAL_I2C_MspInit+0x88>)
 8001382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	; 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40005400 	.word	0x40005400
 8001398:	40023800 	.word	0x40023800
 800139c:	40020400 	.word	0x40020400

080013a0 <get_sineval>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 90000000;	// Tim2 Clock Frequency
int Period = 1;				// Tim2 Period


void get_sineval(void){
 80013a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e06b      	b.n	8001484 <get_sineval+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff f86f 	bl	8000494 <__aeabi_i2d>
 80013b6:	a33e      	add	r3, pc, #248	; (adr r3, 80014b0 <get_sineval+0x110>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f8d4 	bl	8000568 <__aeabi_dmul>
 80013c0:	4603      	mov	r3, r0
 80013c2:	460c      	mov	r4, r1
 80013c4:	4618      	mov	r0, r3
 80013c6:	4621      	mov	r1, r4
 80013c8:	f04f 0200 	mov.w	r2, #0
 80013cc:	4b32      	ldr	r3, [pc, #200]	; (8001498 <get_sineval+0xf8>)
 80013ce:	f7ff f9f5 	bl	80007bc <__aeabi_ddiv>
 80013d2:	4603      	mov	r3, r0
 80013d4:	460c      	mov	r4, r1
 80013d6:	ec44 3b17 	vmov	d7, r3, r4
 80013da:	eeb0 0a47 	vmov.f32	s0, s14
 80013de:	eef0 0a67 	vmov.f32	s1, s15
 80013e2:	f006 fcb1 	bl	8007d48 <sin>
 80013e6:	ec51 0b10 	vmov	r0, r1, d0
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	4b2b      	ldr	r3, [pc, #172]	; (800149c <get_sineval+0xfc>)
 80013f0:	f7fe ff04 	bl	80001fc <__adddf3>
 80013f4:	4603      	mov	r3, r0
 80013f6:	460c      	mov	r4, r1
 80013f8:	4625      	mov	r5, r4
 80013fa:	461c      	mov	r4, r3
 80013fc:	4b28      	ldr	r3, [pc, #160]	; (80014a0 <get_sineval+0x100>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	0fda      	lsrs	r2, r3, #31
 8001402:	4413      	add	r3, r2
 8001404:	105b      	asrs	r3, r3, #1
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f844 	bl	8000494 <__aeabi_i2d>
 800140c:	4602      	mov	r2, r0
 800140e:	460b      	mov	r3, r1
 8001410:	4620      	mov	r0, r4
 8001412:	4629      	mov	r1, r5
 8001414:	f7ff f8a8 	bl	8000568 <__aeabi_dmul>
 8001418:	4603      	mov	r3, r0
 800141a:	460c      	mov	r4, r1
 800141c:	4618      	mov	r0, r3
 800141e:	4621      	mov	r1, r4
 8001420:	f7ff fb64 	bl	8000aec <__aeabi_d2uiz>
 8001424:	4601      	mov	r1, r0
 8001426:	4a1f      	ldr	r2, [pc, #124]	; (80014a4 <get_sineval+0x104>)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 800142e:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <get_sineval+0x108>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f82e 	bl	8000494 <__aeabi_i2d>
 8001438:	4605      	mov	r5, r0
 800143a:	460e      	mov	r6, r1
 800143c:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <get_sineval+0x104>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001444:	4618      	mov	r0, r3
 8001446:	f7ff f815 	bl	8000474 <__aeabi_ui2d>
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <get_sineval+0x10c>)
 800144c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001450:	461a      	mov	r2, r3
 8001452:	4623      	mov	r3, r4
 8001454:	f7ff f888 	bl	8000568 <__aeabi_dmul>
 8001458:	4603      	mov	r3, r0
 800145a:	460c      	mov	r4, r1
 800145c:	461a      	mov	r2, r3
 800145e:	4623      	mov	r3, r4
 8001460:	4628      	mov	r0, r5
 8001462:	4631      	mov	r1, r6
 8001464:	f7fe feca 	bl	80001fc <__adddf3>
 8001468:	4603      	mov	r3, r0
 800146a:	460c      	mov	r4, r1
 800146c:	4618      	mov	r0, r3
 800146e:	4621      	mov	r1, r4
 8001470:	f7ff fb3c 	bl	8000aec <__aeabi_d2uiz>
 8001474:	4601      	mov	r1, r0
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <get_sineval+0x104>)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	3301      	adds	r3, #1
 8001482:	607b      	str	r3, [r7, #4]
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2b63      	cmp	r3, #99	; 0x63
 8001488:	dd90      	ble.n	80013ac <get_sineval+0xc>
	}
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001492:	bf00      	nop
 8001494:	f3af 8000 	nop.w
 8001498:	40590000 	.word	0x40590000
 800149c:	3ff00000 	.word	0x3ff00000
 80014a0:	20000000 	.word	0x20000000
 80014a4:	200003a4 	.word	0x200003a4
 80014a8:	20000010 	.word	0x20000010
 80014ac:	20000008 	.word	0x20000008
 80014b0:	4d12d84a 	.word	0x4d12d84a
 80014b4:	400921fb 	.word	0x400921fb

080014b8 <set_clock>:


void set_clock(void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Fsine*(Period + 1) ) - 1;
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <set_clock+0x5c>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a15      	ldr	r2, [pc, #84]	; (8001518 <set_clock+0x60>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	095b      	lsrs	r3, r3, #5
 80014c8:	4a14      	ldr	r2, [pc, #80]	; (800151c <set_clock+0x64>)
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	3201      	adds	r2, #1
 80014ce:	4914      	ldr	r1, [pc, #80]	; (8001520 <set_clock+0x68>)
 80014d0:	6809      	ldr	r1, [r1, #0]
 80014d2:	fb01 f202 	mul.w	r2, r1, r2
 80014d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80014da:	3b01      	subs	r3, #1
 80014dc:	461a      	mov	r2, r3
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <set_clock+0x6c>)
 80014e0:	601a      	str	r2, [r3, #0]

	  htim2.Instance = TIM2;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <set_clock+0x70>)
 80014e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e8:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 80014ea:	4b0c      	ldr	r3, [pc, #48]	; (800151c <set_clock+0x64>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <set_clock+0x70>)
 80014f2:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <set_clock+0x6c>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <set_clock+0x70>)
 80014fc:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <set_clock+0x70>)
 8001500:	f003 f970 	bl	80047e4 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <set_clock+0x56>
	  {
	    Error_Handler();
 800150a:	f000 f8b7 	bl	800167c <Error_Handler>
	  }

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000018 	.word	0x20000018
 8001518:	51eb851f 	.word	0x51eb851f
 800151c:	2000001c 	.word	0x2000001c
 8001520:	20000014 	.word	0x20000014
 8001524:	200003a0 	.word	0x200003a0
 8001528:	200005fc 	.word	0x200005fc

0800152c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001532:	f000 fced 	bl	8001f10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001536:	f000 f837 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153a:	f7ff fe17 	bl	800116c <MX_GPIO_Init>
  MX_DMA_Init();
 800153e:	f7ff fded 	bl	800111c <MX_DMA_Init>
  MX_DAC_Init();
 8001542:	f7ff fd09 	bl	8000f58 <MX_DAC_Init>
  MX_TIM2_Init();
 8001546:	f000 f9d1 	bl	80018ec <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800154a:	f000 fbc7 	bl	8001cdc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 800154e:	f7ff fc6d 	bl	8000e2c <MX_ADC1_Init>
  MX_I2C1_Init();
 8001552:	f7ff fe9d 	bl	8001290 <MX_I2C1_Init>
  MX_TIM3_Init();
 8001556:	f000 fa15 	bl	8001984 <MX_TIM3_Init>
  MX_TIM4_Init();
 800155a:	f000 fa6d 	bl	8001a38 <MX_TIM4_Init>
  MX_TIM1_Init();
 800155e:	f000 f941 	bl	80017e4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8001562:	f000 fbe5 	bl	8001d30 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8001566:	f005 ff7d 	bl	8007464 <MX_USB_DEVICE_Init>
	//  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
	//  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);


  /* Sine function */
  set_clock();							// Setting frequency of timer
 800156a:	f7ff ffa5 	bl	80014b8 <set_clock>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <main+0x70>)
 8001570:	f003 f963 	bl	800483a <HAL_TIM_Base_Start>
  get_sineval();						// Call get sineval function
 8001574:	f7ff ff14 	bl	80013a0 <get_sineval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 8001578:	2300      	movs	r3, #0
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	2364      	movs	r3, #100	; 0x64
 800157e:	4a08      	ldr	r2, [pc, #32]	; (80015a0 <main+0x74>)
 8001580:	2100      	movs	r1, #0
 8001582:	4808      	ldr	r0, [pc, #32]	; (80015a4 <main+0x78>)
 8001584:	f001 f8fe 	bl	8002784 <HAL_DAC_Start_DMA>

  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 8001588:	2300      	movs	r3, #0
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2364      	movs	r3, #100	; 0x64
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <main+0x74>)
 8001590:	2110      	movs	r1, #16
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <main+0x78>)
 8001594:	f001 f8f6 	bl	8002784 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001598:	e7fe      	b.n	8001598 <main+0x6c>
 800159a:	bf00      	nop
 800159c:	200005fc 	.word	0x200005fc
 80015a0:	200003a4 	.word	0x200003a4
 80015a4:	200002d4 	.word	0x200002d4

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0320 	add.w	r3, r7, #32
 80015b2:	2230      	movs	r2, #48	; 0x30
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f006 fb04 	bl	8007bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	f107 030c 	add.w	r3, r7, #12
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	4b28      	ldr	r3, [pc, #160]	; (8001674 <SystemClock_Config+0xcc>)
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	4a27      	ldr	r2, [pc, #156]	; (8001674 <SystemClock_Config+0xcc>)
 80015d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015da:	6413      	str	r3, [r2, #64]	; 0x40
 80015dc:	4b25      	ldr	r3, [pc, #148]	; (8001674 <SystemClock_Config+0xcc>)
 80015de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80015e8:	2300      	movs	r3, #0
 80015ea:	607b      	str	r3, [r7, #4]
 80015ec:	4b22      	ldr	r3, [pc, #136]	; (8001678 <SystemClock_Config+0xd0>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015f4:	4a20      	ldr	r2, [pc, #128]	; (8001678 <SystemClock_Config+0xd0>)
 80015f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015fa:	6013      	str	r3, [r2, #0]
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <SystemClock_Config+0xd0>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001608:	2301      	movs	r3, #1
 800160a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800160c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001612:	2302      	movs	r3, #2
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001616:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800161a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 800161c:	230d      	movs	r3, #13
 800161e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001620:	2348      	movs	r3, #72	; 0x48
 8001622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001624:	2302      	movs	r3, #2
 8001626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001628:	2303      	movs	r3, #3
 800162a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fc9b 	bl	8003f6c <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800163c:	f000 f81e 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001640:	230f      	movs	r3, #15
 8001642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001644:	2302      	movs	r3, #2
 8001646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800164c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001650:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001656:	f107 030c 	add.w	r3, r7, #12
 800165a:	2102      	movs	r1, #2
 800165c:	4618      	mov	r0, r3
 800165e:	f002 fef5 	bl	800444c <HAL_RCC_ClockConfig>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001668:	f000 f808 	bl	800167c <Error_Handler>
  }
}
 800166c:	bf00      	nop
 800166e:	3750      	adds	r7, #80	; 0x50
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40023800 	.word	0x40023800
 8001678:	40007000 	.word	0x40007000

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <HAL_MspInit+0x4c>)
 8001698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169a:	4a0f      	ldr	r2, [pc, #60]	; (80016d8 <HAL_MspInit+0x4c>)
 800169c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a0:	6453      	str	r3, [r2, #68]	; 0x44
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <HAL_MspInit+0x4c>)
 80016a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016aa:	607b      	str	r3, [r7, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	603b      	str	r3, [r7, #0]
 80016b2:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <HAL_MspInit+0x4c>)
 80016b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b6:	4a08      	ldr	r2, [pc, #32]	; (80016d8 <HAL_MspInit+0x4c>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016bc:	6413      	str	r3, [r2, #64]	; 0x40
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_MspInit+0x4c>)
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016c6:	603b      	str	r3, [r7, #0]
 80016c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800

080016dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016dc:	b480      	push	{r7}
 80016de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <HardFault_Handler+0x4>

080016f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <MemManage_Handler+0x4>

080016f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016fa:	e7fe      	b.n	80016fa <BusFault_Handler+0x4>

080016fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <UsageFault_Handler+0x4>

08001702 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001714:	bf00      	nop
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800171e:	b480      	push	{r7}
 8001720:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001722:	bf00      	nop
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001730:	f000 fc40 	bl	8001fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}

08001738 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <DMA1_Stream5_IRQHandler+0x10>)
 800173e:	f001 facb 	bl	8002cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000274 	.word	0x20000274

0800174c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <DMA1_Stream6_IRQHandler+0x10>)
 8001752:	f001 fac1 	bl	8002cd8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	200002e8 	.word	0x200002e8

08001760 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001768:	4b11      	ldr	r3, [pc, #68]	; (80017b0 <_sbrk+0x50>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d102      	bne.n	8001776 <_sbrk+0x16>
		heap_end = &end;
 8001770:	4b0f      	ldr	r3, [pc, #60]	; (80017b0 <_sbrk+0x50>)
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <_sbrk+0x54>)
 8001774:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001776:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <_sbrk+0x50>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800177c:	4b0c      	ldr	r3, [pc, #48]	; (80017b0 <_sbrk+0x50>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	4413      	add	r3, r2
 8001784:	466a      	mov	r2, sp
 8001786:	4293      	cmp	r3, r2
 8001788:	d907      	bls.n	800179a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800178a:	f006 f9e1 	bl	8007b50 <__errno>
 800178e:	4602      	mov	r2, r0
 8001790:	230c      	movs	r3, #12
 8001792:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001794:	f04f 33ff 	mov.w	r3, #4294967295
 8001798:	e006      	b.n	80017a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800179a:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <_sbrk+0x50>)
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	4a03      	ldr	r2, [pc, #12]	; (80017b0 <_sbrk+0x50>)
 80017a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	20000220 	.word	0x20000220
 80017b4:	20001fa0 	.word	0x20001fa0

080017b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	4b08      	ldr	r3, [pc, #32]	; (80017e0 <SystemInit+0x28>)
 80017be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017c2:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <SystemInit+0x28>)
 80017c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017cc:	4b04      	ldr	r3, [pc, #16]	; (80017e0 <SystemInit+0x28>)
 80017ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017d2:	609a      	str	r2, [r3, #8]
#endif
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b092      	sub	sp, #72	; 0x48
 80017e8:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]
 8001804:	615a      	str	r2, [r3, #20]
 8001806:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2220      	movs	r2, #32
 800180c:	2100      	movs	r1, #0
 800180e:	4618      	mov	r0, r3
 8001810:	f006 f9d8 	bl	8007bc4 <memset>

  htim1.Instance = TIM1;
 8001814:	4b33      	ldr	r3, [pc, #204]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001816:	4a34      	ldr	r2, [pc, #208]	; (80018e8 <MX_TIM1_Init+0x104>)
 8001818:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <MX_TIM1_Init+0x100>)
 800181c:	2200      	movs	r2, #0
 800181e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001828:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800182c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800182e:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001836:	2200      	movs	r2, #0
 8001838:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <MX_TIM1_Init+0x100>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001840:	4828      	ldr	r0, [pc, #160]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001842:	f003 f81e 	bl	8004882 <HAL_TIM_PWM_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800184c:	f7ff ff16 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001858:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800185c:	4619      	mov	r1, r3
 800185e:	4821      	ldr	r0, [pc, #132]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001860:	f003 fca2 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800186a:	f7ff ff07 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186e:	2360      	movs	r3, #96	; 0x60
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001876:	2300      	movs	r3, #0
 8001878:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001882:	2300      	movs	r3, #0
 8001884:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	2200      	movs	r2, #0
 8001890:	4619      	mov	r1, r3
 8001892:	4814      	ldr	r0, [pc, #80]	; (80018e4 <MX_TIM1_Init+0x100>)
 8001894:	f003 f820 	bl	80048d8 <HAL_TIM_PWM_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800189e:	f7ff feed 	bl	800167c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018a2:	2300      	movs	r3, #0
 80018a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	4619      	mov	r1, r3
 80018c4:	4807      	ldr	r0, [pc, #28]	; (80018e4 <MX_TIM1_Init+0x100>)
 80018c6:	f003 fceb 	bl	80052a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80018d0:	f7ff fed4 	bl	800167c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80018d4:	4803      	ldr	r0, [pc, #12]	; (80018e4 <MX_TIM1_Init+0x100>)
 80018d6:	f000 f977 	bl	8001bc8 <HAL_TIM_MspPostInit>

}
 80018da:	bf00      	nop
 80018dc:	3748      	adds	r7, #72	; 0x48
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	200005bc 	.word	0x200005bc
 80018e8:	40010000 	.word	0x40010000

080018ec <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018f2:	f107 0308 	add.w	r3, r7, #8
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
 80018fc:	609a      	str	r2, [r3, #8]
 80018fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001900:	463b      	mov	r3, r7
 8001902:	2200      	movs	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001908:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM2_Init+0x94>)
 800190a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800190e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_TIM2_Init+0x94>)
 8001912:	2201      	movs	r2, #1
 8001914:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM2_Init+0x94>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_TIM2_Init+0x94>)
 800191e:	2201      	movs	r2, #1
 8001920:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001922:	4b17      	ldr	r3, [pc, #92]	; (8001980 <MX_TIM2_Init+0x94>)
 8001924:	2200      	movs	r2, #0
 8001926:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001928:	4b15      	ldr	r3, [pc, #84]	; (8001980 <MX_TIM2_Init+0x94>)
 800192a:	2280      	movs	r2, #128	; 0x80
 800192c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800192e:	4814      	ldr	r0, [pc, #80]	; (8001980 <MX_TIM2_Init+0x94>)
 8001930:	f002 ff58 	bl	80047e4 <HAL_TIM_Base_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800193a:	f7ff fe9f 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800193e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001942:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001944:	f107 0308 	add.w	r3, r7, #8
 8001948:	4619      	mov	r1, r3
 800194a:	480d      	ldr	r0, [pc, #52]	; (8001980 <MX_TIM2_Init+0x94>)
 800194c:	f003 f88a 	bl	8004a64 <HAL_TIM_ConfigClockSource>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001956:	f7ff fe91 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800195a:	2320      	movs	r3, #32
 800195c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001962:	463b      	mov	r3, r7
 8001964:	4619      	mov	r1, r3
 8001966:	4806      	ldr	r0, [pc, #24]	; (8001980 <MX_TIM2_Init+0x94>)
 8001968:	f003 fc1e 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001972:	f7ff fe83 	bl	800167c <Error_Handler>
  }

}
 8001976:	bf00      	nop
 8001978:	3718      	adds	r7, #24
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200005fc 	.word	0x200005fc

08001984 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	; 0x28
 8001988:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001994:	1d3b      	adds	r3, r7, #4
 8001996:	2200      	movs	r2, #0
 8001998:	601a      	str	r2, [r3, #0]
 800199a:	605a      	str	r2, [r3, #4]
 800199c:	609a      	str	r2, [r3, #8]
 800199e:	60da      	str	r2, [r3, #12]
 80019a0:	611a      	str	r2, [r3, #16]
 80019a2:	615a      	str	r2, [r3, #20]
 80019a4:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <MX_TIM3_Init+0xac>)
 80019a8:	4a22      	ldr	r2, [pc, #136]	; (8001a34 <MX_TIM3_Init+0xb0>)
 80019aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <MX_TIM3_Init+0xac>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <MX_TIM3_Init+0xac>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019b8:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <MX_TIM3_Init+0xac>)
 80019ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019c0:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <MX_TIM3_Init+0xac>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019c6:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <MX_TIM3_Init+0xac>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019cc:	4818      	ldr	r0, [pc, #96]	; (8001a30 <MX_TIM3_Init+0xac>)
 80019ce:	f002 ff58 	bl	8004882 <HAL_TIM_PWM_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80019d8:	f7ff fe50 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019e0:	2300      	movs	r3, #0
 80019e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019e4:	f107 0320 	add.w	r3, r7, #32
 80019e8:	4619      	mov	r1, r3
 80019ea:	4811      	ldr	r0, [pc, #68]	; (8001a30 <MX_TIM3_Init+0xac>)
 80019ec:	f003 fbdc 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80019f6:	f7ff fe41 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019fa:	2360      	movs	r3, #96	; 0x60
 80019fc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019fe:	2300      	movs	r3, #0
 8001a00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4807      	ldr	r0, [pc, #28]	; (8001a30 <MX_TIM3_Init+0xac>)
 8001a12:	f002 ff61 	bl	80048d8 <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001a1c:	f7ff fe2e 	bl	800167c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_TIM3_Init+0xac>)
 8001a22:	f000 f8d1 	bl	8001bc8 <HAL_TIM_MspPostInit>

}
 8001a26:	bf00      	nop
 8001a28:	3728      	adds	r7, #40	; 0x28
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000057c 	.word	0x2000057c
 8001a34:	40000400 	.word	0x40000400

08001a38 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	; 0x28
 8001a3c:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a3e:	f107 0320 	add.w	r3, r7, #32
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a48:	1d3b      	adds	r3, r7, #4
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	601a      	str	r2, [r3, #0]
 8001a4e:	605a      	str	r2, [r3, #4]
 8001a50:	609a      	str	r2, [r3, #8]
 8001a52:	60da      	str	r2, [r3, #12]
 8001a54:	611a      	str	r2, [r3, #16]
 8001a56:	615a      	str	r2, [r3, #20]
 8001a58:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 8001a5a:	4b22      	ldr	r3, [pc, #136]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001a5c:	4a22      	ldr	r2, [pc, #136]	; (8001ae8 <MX_TIM4_Init+0xb0>)
 8001a5e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a66:	4b1f      	ldr	r3, [pc, #124]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001a80:	4818      	ldr	r0, [pc, #96]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001a82:	f002 fefe 	bl	8004882 <HAL_TIM_PWM_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001a8c:	f7ff fdf6 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a90:	2300      	movs	r3, #0
 8001a92:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a94:	2300      	movs	r3, #0
 8001a96:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001a98:	f107 0320 	add.w	r3, r7, #32
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4811      	ldr	r0, [pc, #68]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001aa0:	f003 fb82 	bl	80051a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001aaa:	f7ff fde7 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001aae:	2360      	movs	r3, #96	; 0x60
 8001ab0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001abe:	1d3b      	adds	r3, r7, #4
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4807      	ldr	r0, [pc, #28]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001ac6:	f002 ff07 	bl	80048d8 <HAL_TIM_PWM_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001ad0:	f7ff fdd4 	bl	800167c <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <MX_TIM4_Init+0xac>)
 8001ad6:	f000 f877 	bl	8001bc8 <HAL_TIM_MspPostInit>

}
 8001ada:	bf00      	nop
 8001adc:	3728      	adds	r7, #40	; 0x28
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	2000053c 	.word	0x2000053c
 8001ae8:	40000800 	.word	0x40000800

08001aec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a1f      	ldr	r2, [pc, #124]	; (8001b78 <HAL_TIM_PWM_MspInit+0x8c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d10e      	bne.n	8001b1c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
 8001b18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b1a:	e026      	b.n	8001b6a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a17      	ldr	r2, [pc, #92]	; (8001b80 <HAL_TIM_PWM_MspInit+0x94>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d10e      	bne.n	8001b44 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b26:	2300      	movs	r3, #0
 8001b28:	613b      	str	r3, [r7, #16]
 8001b2a:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	4a13      	ldr	r2, [pc, #76]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b30:	f043 0302 	orr.w	r3, r3, #2
 8001b34:	6413      	str	r3, [r2, #64]	; 0x40
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3a:	f003 0302 	and.w	r3, r3, #2
 8001b3e:	613b      	str	r3, [r7, #16]
 8001b40:	693b      	ldr	r3, [r7, #16]
}
 8001b42:	e012      	b.n	8001b6a <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM4)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_TIM_PWM_MspInit+0x98>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10d      	bne.n	8001b6a <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b56:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5e:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <HAL_TIM_PWM_MspInit+0x90>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40010000 	.word	0x40010000
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800

08001b88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b98:	d10d      	bne.n	8001bb6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	4b09      	ldr	r3, [pc, #36]	; (8001bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	4a08      	ldr	r2, [pc, #32]	; (8001bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8001baa:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	60fb      	str	r3, [r7, #12]
 8001bb4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	3714      	adds	r7, #20
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800

08001bc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b08a      	sub	sp, #40	; 0x28
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd0:	f107 0314 	add.w	r3, r7, #20
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a37      	ldr	r2, [pc, #220]	; (8001cc4 <HAL_TIM_MspPostInit+0xfc>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d11f      	bne.n	8001c2a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	613b      	str	r3, [r7, #16]
 8001bee:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a35      	ldr	r2, [pc, #212]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001c06:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c14:	2300      	movs	r3, #0
 8001c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c1c:	f107 0314 	add.w	r3, r7, #20
 8001c20:	4619      	mov	r1, r3
 8001c22:	482a      	ldr	r0, [pc, #168]	; (8001ccc <HAL_TIM_MspPostInit+0x104>)
 8001c24:	f001 fac0 	bl	80031a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001c28:	e047      	b.n	8001cba <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a28      	ldr	r2, [pc, #160]	; (8001cd0 <HAL_TIM_MspPostInit+0x108>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d11e      	bne.n	8001c72 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	2300      	movs	r3, #0
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3c:	4a22      	ldr	r2, [pc, #136]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6313      	str	r3, [r2, #48]	; 0x30
 8001c44:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c50:	2340      	movs	r3, #64	; 0x40
 8001c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c60:	2302      	movs	r3, #2
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 0314 	add.w	r3, r7, #20
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4818      	ldr	r0, [pc, #96]	; (8001ccc <HAL_TIM_MspPostInit+0x104>)
 8001c6c:	f001 fa9c 	bl	80031a8 <HAL_GPIO_Init>
}
 8001c70:	e023      	b.n	8001cba <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM4)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_TIM_MspPostInit+0x10c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d11e      	bne.n	8001cba <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
 8001c80:	4b11      	ldr	r3, [pc, #68]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001c86:	f043 0308 	orr.w	r3, r3, #8
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8c:	4b0e      	ldr	r3, [pc, #56]	; (8001cc8 <HAL_TIM_MspPostInit+0x100>)
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001caa:	2302      	movs	r3, #2
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4808      	ldr	r0, [pc, #32]	; (8001cd8 <HAL_TIM_MspPostInit+0x110>)
 8001cb6:	f001 fa77 	bl	80031a8 <HAL_GPIO_Init>
}
 8001cba:	bf00      	nop
 8001cbc:	3728      	adds	r7, #40	; 0x28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40010000 	.word	0x40010000
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40000400 	.word	0x40000400
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	40020c00 	.word	0x40020c00

08001cdc <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	4a12      	ldr	r2, [pc, #72]	; (8001d2c <MX_USART1_UART_Init+0x50>)
 8001ce4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cec:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cee:	4b0e      	ldr	r3, [pc, #56]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001d02:	220c      	movs	r2, #12
 8001d04:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_USART1_UART_Init+0x4c>)
 8001d14:	f003 fb16 	bl	8005344 <HAL_UART_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d1e:	f7ff fcad 	bl	800167c <Error_Handler>
  }

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	2000063c 	.word	0x2000063c
 8001d2c:	40011000 	.word	0x40011000

08001d30 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001d34:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d36:	4a12      	ldr	r2, [pc, #72]	; (8001d80 <MX_USART2_UART_Init+0x50>)
 8001d38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d3a:	4b10      	ldr	r3, [pc, #64]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d3c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d56:	220c      	movs	r2, #12
 8001d58:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_USART2_UART_Init+0x4c>)
 8001d68:	f003 faec 	bl	8005344 <HAL_UART_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d72:	f7ff fc83 	bl	800167c <Error_Handler>
  }

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000067c 	.word	0x2000067c
 8001d80:	40004400 	.word	0x40004400

08001d84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b08c      	sub	sp, #48	; 0x30
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a41      	ldr	r2, [pc, #260]	; (8001ea8 <HAL_UART_MspInit+0x124>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d14b      	bne.n	8001e3e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	4b40      	ldr	r3, [pc, #256]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4a3f      	ldr	r2, [pc, #252]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001db0:	f043 0310 	orr.w	r3, r3, #16
 8001db4:	6453      	str	r3, [r2, #68]	; 0x44
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dca:	4a38      	ldr	r2, [pc, #224]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	f003 0301 	and.w	r3, r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dde:	2300      	movs	r3, #0
 8001de0:	613b      	str	r3, [r7, #16]
 8001de2:	4b32      	ldr	r3, [pc, #200]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de6:	4a31      	ldr	r2, [pc, #196]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001de8:	f043 0302 	orr.w	r3, r3, #2
 8001dec:	6313      	str	r3, [r2, #48]	; 0x30
 8001dee:	4b2f      	ldr	r3, [pc, #188]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e00:	2302      	movs	r3, #2
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e0c:	2307      	movs	r3, #7
 8001e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4826      	ldr	r0, [pc, #152]	; (8001eb0 <HAL_UART_MspInit+0x12c>)
 8001e18:	f001 f9c6 	bl	80031a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e20:	2302      	movs	r3, #2
 8001e22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e24:	2300      	movs	r3, #0
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e28:	2303      	movs	r3, #3
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e30:	f107 031c 	add.w	r3, r7, #28
 8001e34:	4619      	mov	r1, r3
 8001e36:	481f      	ldr	r0, [pc, #124]	; (8001eb4 <HAL_UART_MspInit+0x130>)
 8001e38:	f001 f9b6 	bl	80031a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e3c:	e030      	b.n	8001ea0 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1d      	ldr	r2, [pc, #116]	; (8001eb8 <HAL_UART_MspInit+0x134>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d12b      	bne.n	8001ea0 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	4b17      	ldr	r3, [pc, #92]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	4a16      	ldr	r2, [pc, #88]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001e52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e56:	6413      	str	r3, [r2, #64]	; 0x40
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001e5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	60fb      	str	r3, [r7, #12]
 8001e62:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e64:	2300      	movs	r3, #0
 8001e66:	60bb      	str	r3, [r7, #8]
 8001e68:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6c:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001e6e:	f043 0301 	orr.w	r3, r3, #1
 8001e72:	6313      	str	r3, [r2, #48]	; 0x30
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <HAL_UART_MspInit+0x128>)
 8001e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	60bb      	str	r3, [r7, #8]
 8001e7e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e80:	230c      	movs	r3, #12
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e84:	2302      	movs	r3, #2
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e90:	2307      	movs	r3, #7
 8001e92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4805      	ldr	r0, [pc, #20]	; (8001eb0 <HAL_UART_MspInit+0x12c>)
 8001e9c:	f001 f984 	bl	80031a8 <HAL_GPIO_Init>
}
 8001ea0:	bf00      	nop
 8001ea2:	3730      	adds	r7, #48	; 0x30
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40011000 	.word	0x40011000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40004400 	.word	0x40004400

08001ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ebc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ef4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ec0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ec2:	e003      	b.n	8001ecc <LoopCopyDataInit>

08001ec4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ec4:	4b0c      	ldr	r3, [pc, #48]	; (8001ef8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ec6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ec8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001eca:	3104      	adds	r1, #4

08001ecc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ecc:	480b      	ldr	r0, [pc, #44]	; (8001efc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ed0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ed2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ed4:	d3f6      	bcc.n	8001ec4 <CopyDataInit>
  ldr  r2, =_sbss
 8001ed6:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001ed8:	e002      	b.n	8001ee0 <LoopFillZerobss>

08001eda <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eda:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001edc:	f842 3b04 	str.w	r3, [r2], #4

08001ee0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ee0:	4b09      	ldr	r3, [pc, #36]	; (8001f08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ee2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ee4:	d3f9      	bcc.n	8001eda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ee6:	f7ff fc67 	bl	80017b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eea:	f005 fe37 	bl	8007b5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eee:	f7ff fb1d 	bl	800152c <main>
  bx  lr    
 8001ef2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ef4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001ef8:	08008fd8 	.word	0x08008fd8
  ldr  r0, =_sdata
 8001efc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f00:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 8001f04:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 8001f08:	20001f9c 	.word	0x20001f9c

08001f0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f0c:	e7fe      	b.n	8001f0c <ADC_IRQHandler>
	...

08001f10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f14:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <HAL_Init+0x40>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a0d      	ldr	r2, [pc, #52]	; (8001f50 <HAL_Init+0x40>)
 8001f1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_Init+0x40>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a0a      	ldr	r2, [pc, #40]	; (8001f50 <HAL_Init+0x40>)
 8001f26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f2c:	4b08      	ldr	r3, [pc, #32]	; (8001f50 <HAL_Init+0x40>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_Init+0x40>)
 8001f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f000 fbbf 	bl	80026bc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f3e:	2000      	movs	r0, #0
 8001f40:	f000 f808 	bl	8001f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f44:	f7ff fba2 	bl	800168c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f48:	2300      	movs	r3, #0
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023c00 	.word	0x40023c00

08001f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f5c:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <HAL_InitTick+0x54>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b12      	ldr	r3, [pc, #72]	; (8001fac <HAL_InitTick+0x58>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	4619      	mov	r1, r3
 8001f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	f000 fbd7 	bl	8002726 <HAL_SYSTICK_Config>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d001      	beq.n	8001f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e00e      	b.n	8001fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b0f      	cmp	r3, #15
 8001f86:	d80a      	bhi.n	8001f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	6879      	ldr	r1, [r7, #4]
 8001f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f90:	f000 fb9f 	bl	80026d2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f94:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <HAL_InitTick+0x5c>)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	e000      	b.n	8001fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3708      	adds	r7, #8
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	20000020 	.word	0x20000020
 8001fac:	20000028 	.word	0x20000028
 8001fb0:	20000024 	.word	0x20000024

08001fb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fb8:	4b06      	ldr	r3, [pc, #24]	; (8001fd4 <HAL_IncTick+0x20>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a04      	ldr	r2, [pc, #16]	; (8001fd8 <HAL_IncTick+0x24>)
 8001fc6:	6013      	str	r3, [r2, #0]
}
 8001fc8:	bf00      	nop
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	20000028 	.word	0x20000028
 8001fd8:	200006bc 	.word	0x200006bc

08001fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	; (8001ff0 <HAL_GetTick+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	200006bc 	.word	0x200006bc

08001ff4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ffc:	f7ff ffee 	bl	8001fdc <HAL_GetTick>
 8002000:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800200c:	d005      	beq.n	800201a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800200e:	4b09      	ldr	r3, [pc, #36]	; (8002034 <HAL_Delay+0x40>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	4413      	add	r3, r2
 8002018:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800201a:	bf00      	nop
 800201c:	f7ff ffde 	bl	8001fdc <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	429a      	cmp	r2, r3
 800202a:	d8f7      	bhi.n	800201c <HAL_Delay+0x28>
  {
  }
}
 800202c:	bf00      	nop
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	20000028 	.word	0x20000028

08002038 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e033      	b.n	80020b6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002052:	2b00      	cmp	r3, #0
 8002054:	d109      	bne.n	800206a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7fe ff3a 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	d118      	bne.n	80020a8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800207e:	f023 0302 	bic.w	r3, r3, #2
 8002082:	f043 0202 	orr.w	r2, r3, #2
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 f94a 	bl	8002324 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f023 0303 	bic.w	r3, r3, #3
 800209e:	f043 0201 	orr.w	r2, r3, #1
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	641a      	str	r2, [r3, #64]	; 0x40
 80020a6:	e001      	b.n	80020ac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
	...

080020c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020ca:	2300      	movs	r3, #0
 80020cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_ADC_ConfigChannel+0x1c>
 80020d8:	2302      	movs	r3, #2
 80020da:	e113      	b.n	8002304 <HAL_ADC_ConfigChannel+0x244>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2201      	movs	r2, #1
 80020e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2b09      	cmp	r3, #9
 80020ea:	d925      	bls.n	8002138 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68d9      	ldr	r1, [r3, #12]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	3b1e      	subs	r3, #30
 8002102:	2207      	movs	r2, #7
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43da      	mvns	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	400a      	ands	r2, r1
 8002110:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68d9      	ldr	r1, [r3, #12]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	689a      	ldr	r2, [r3, #8]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	b29b      	uxth	r3, r3
 8002122:	4618      	mov	r0, r3
 8002124:	4603      	mov	r3, r0
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	4403      	add	r3, r0
 800212a:	3b1e      	subs	r3, #30
 800212c:	409a      	lsls	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	430a      	orrs	r2, r1
 8002134:	60da      	str	r2, [r3, #12]
 8002136:	e022      	b.n	800217e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6919      	ldr	r1, [r3, #16]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	b29b      	uxth	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	4613      	mov	r3, r2
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4413      	add	r3, r2
 800214c:	2207      	movs	r2, #7
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43da      	mvns	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	400a      	ands	r2, r1
 800215a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6919      	ldr	r1, [r3, #16]
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	689a      	ldr	r2, [r3, #8]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	b29b      	uxth	r3, r3
 800216c:	4618      	mov	r0, r3
 800216e:	4603      	mov	r3, r0
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	4403      	add	r3, r0
 8002174:	409a      	lsls	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b06      	cmp	r3, #6
 8002184:	d824      	bhi.n	80021d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	4413      	add	r3, r2
 8002196:	3b05      	subs	r3, #5
 8002198:	221f      	movs	r2, #31
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	400a      	ands	r2, r1
 80021a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	4618      	mov	r0, r3
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	3b05      	subs	r3, #5
 80021c2:	fa00 f203 	lsl.w	r2, r0, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	430a      	orrs	r2, r1
 80021cc:	635a      	str	r2, [r3, #52]	; 0x34
 80021ce:	e04c      	b.n	800226a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	2b0c      	cmp	r3, #12
 80021d6:	d824      	bhi.n	8002222 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685a      	ldr	r2, [r3, #4]
 80021e2:	4613      	mov	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	4413      	add	r3, r2
 80021e8:	3b23      	subs	r3, #35	; 0x23
 80021ea:	221f      	movs	r2, #31
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	43da      	mvns	r2, r3
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	400a      	ands	r2, r1
 80021f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	b29b      	uxth	r3, r3
 8002206:	4618      	mov	r0, r3
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	3b23      	subs	r3, #35	; 0x23
 8002214:	fa00 f203 	lsl.w	r2, r0, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	631a      	str	r2, [r3, #48]	; 0x30
 8002220:	e023      	b.n	800226a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685a      	ldr	r2, [r3, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	3b41      	subs	r3, #65	; 0x41
 8002234:	221f      	movs	r2, #31
 8002236:	fa02 f303 	lsl.w	r3, r2, r3
 800223a:	43da      	mvns	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	400a      	ands	r2, r1
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	b29b      	uxth	r3, r3
 8002250:	4618      	mov	r0, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685a      	ldr	r2, [r3, #4]
 8002256:	4613      	mov	r3, r2
 8002258:	009b      	lsls	r3, r3, #2
 800225a:	4413      	add	r3, r2
 800225c:	3b41      	subs	r3, #65	; 0x41
 800225e:	fa00 f203 	lsl.w	r2, r0, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	430a      	orrs	r2, r1
 8002268:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800226a:	4b29      	ldr	r3, [pc, #164]	; (8002310 <HAL_ADC_ConfigChannel+0x250>)
 800226c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a28      	ldr	r2, [pc, #160]	; (8002314 <HAL_ADC_ConfigChannel+0x254>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d10f      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1d8>
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b12      	cmp	r3, #18
 800227e:	d10b      	bne.n	8002298 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <HAL_ADC_ConfigChannel+0x254>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d12b      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x23a>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_ADC_ConfigChannel+0x258>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d003      	beq.n	80022b4 <HAL_ADC_ConfigChannel+0x1f4>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b11      	cmp	r3, #17
 80022b2:	d122      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a11      	ldr	r2, [pc, #68]	; (8002318 <HAL_ADC_ConfigChannel+0x258>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d111      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_ADC_ConfigChannel+0x25c>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_ADC_ConfigChannel+0x260>)
 80022dc:	fba2 2303 	umull	r2, r3, r2, r3
 80022e0:	0c9a      	lsrs	r2, r3, #18
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022ec:	e002      	b.n	80022f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	3b01      	subs	r3, #1
 80022f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1f9      	bne.n	80022ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40012300 	.word	0x40012300
 8002314:	40012000 	.word	0x40012000
 8002318:	10000012 	.word	0x10000012
 800231c:	20000020 	.word	0x20000020
 8002320:	431bde83 	.word	0x431bde83

08002324 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800232c:	4b79      	ldr	r3, [pc, #484]	; (8002514 <ADC_Init+0x1f0>)
 800232e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	431a      	orrs	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002358:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6859      	ldr	r1, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	021a      	lsls	r2, r3, #8
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	685a      	ldr	r2, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800237c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6859      	ldr	r1, [r3, #4]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689a      	ldr	r2, [r3, #8]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689a      	ldr	r2, [r3, #8]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	6899      	ldr	r1, [r3, #8]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	430a      	orrs	r2, r1
 80023b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b6:	4a58      	ldr	r2, [pc, #352]	; (8002518 <ADC_Init+0x1f4>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d022      	beq.n	8002402 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6899      	ldr	r1, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6899      	ldr	r1, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	e00f      	b.n	8002422 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002410:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	689a      	ldr	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002420:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	689a      	ldr	r2, [r3, #8]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0202 	bic.w	r2, r2, #2
 8002430:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	6899      	ldr	r1, [r3, #8]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	7e1b      	ldrb	r3, [r3, #24]
 800243c:	005a      	lsls	r2, r3, #1
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3020 	ldrb.w	r3, [r3, #32]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01b      	beq.n	8002488 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800245e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800246e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6859      	ldr	r1, [r3, #4]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	3b01      	subs	r3, #1
 800247c:	035a      	lsls	r2, r3, #13
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	e007      	b.n	8002498 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002496:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	051a      	lsls	r2, r3, #20
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6899      	ldr	r1, [r3, #8]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024da:	025a      	lsls	r2, r3, #9
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	430a      	orrs	r2, r1
 80024e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6899      	ldr	r1, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	695b      	ldr	r3, [r3, #20]
 80024fe:	029a      	lsls	r2, r3, #10
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	609a      	str	r2, [r3, #8]
}
 8002508:	bf00      	nop
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	40012300 	.word	0x40012300
 8002518:	0f000001 	.word	0x0f000001

0800251c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800251c:	b480      	push	{r7}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f003 0307 	and.w	r3, r3, #7
 800252a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800252c:	4b0c      	ldr	r3, [pc, #48]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002538:	4013      	ands	r3, r2
 800253a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <__NVIC_SetPriorityGrouping+0x44>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00

08002564 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <__NVIC_GetPriorityGrouping+0x18>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 0307 	and.w	r3, r3, #7
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	e000ed00 	.word	0xe000ed00

08002580 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	4603      	mov	r3, r0
 8002588:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258e:	2b00      	cmp	r3, #0
 8002590:	db0b      	blt.n	80025aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	f003 021f 	and.w	r2, r3, #31
 8002598:	4907      	ldr	r1, [pc, #28]	; (80025b8 <__NVIC_EnableIRQ+0x38>)
 800259a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	2001      	movs	r0, #1
 80025a2:	fa00 f202 	lsl.w	r2, r0, r2
 80025a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000e100 	.word	0xe000e100

080025bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	6039      	str	r1, [r7, #0]
 80025c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db0a      	blt.n	80025e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	490c      	ldr	r1, [pc, #48]	; (8002608 <__NVIC_SetPriority+0x4c>)
 80025d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025da:	0112      	lsls	r2, r2, #4
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	440b      	add	r3, r1
 80025e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e4:	e00a      	b.n	80025fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	b2da      	uxtb	r2, r3
 80025ea:	4908      	ldr	r1, [pc, #32]	; (800260c <__NVIC_SetPriority+0x50>)
 80025ec:	79fb      	ldrb	r3, [r7, #7]
 80025ee:	f003 030f 	and.w	r3, r3, #15
 80025f2:	3b04      	subs	r3, #4
 80025f4:	0112      	lsls	r2, r2, #4
 80025f6:	b2d2      	uxtb	r2, r2
 80025f8:	440b      	add	r3, r1
 80025fa:	761a      	strb	r2, [r3, #24]
}
 80025fc:	bf00      	nop
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000e100 	.word	0xe000e100
 800260c:	e000ed00 	.word	0xe000ed00

08002610 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002610:	b480      	push	{r7}
 8002612:	b089      	sub	sp, #36	; 0x24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	60b9      	str	r1, [r7, #8]
 800261a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f1c3 0307 	rsb	r3, r3, #7
 800262a:	2b04      	cmp	r3, #4
 800262c:	bf28      	it	cs
 800262e:	2304      	movcs	r3, #4
 8002630:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	3304      	adds	r3, #4
 8002636:	2b06      	cmp	r3, #6
 8002638:	d902      	bls.n	8002640 <NVIC_EncodePriority+0x30>
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3b03      	subs	r3, #3
 800263e:	e000      	b.n	8002642 <NVIC_EncodePriority+0x32>
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	f04f 32ff 	mov.w	r2, #4294967295
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	43da      	mvns	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	401a      	ands	r2, r3
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002658:	f04f 31ff 	mov.w	r1, #4294967295
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	fa01 f303 	lsl.w	r3, r1, r3
 8002662:	43d9      	mvns	r1, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002668:	4313      	orrs	r3, r2
         );
}
 800266a:	4618      	mov	r0, r3
 800266c:	3724      	adds	r7, #36	; 0x24
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002688:	d301      	bcc.n	800268e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268e:	4a0a      	ldr	r2, [pc, #40]	; (80026b8 <SysTick_Config+0x40>)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3b01      	subs	r3, #1
 8002694:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002696:	210f      	movs	r1, #15
 8002698:	f04f 30ff 	mov.w	r0, #4294967295
 800269c:	f7ff ff8e 	bl	80025bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <SysTick_Config+0x40>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a6:	4b04      	ldr	r3, [pc, #16]	; (80026b8 <SysTick_Config+0x40>)
 80026a8:	2207      	movs	r2, #7
 80026aa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	e000e010 	.word	0xe000e010

080026bc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f7ff ff29 	bl	800251c <__NVIC_SetPriorityGrouping>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b086      	sub	sp, #24
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	4603      	mov	r3, r0
 80026da:	60b9      	str	r1, [r7, #8]
 80026dc:	607a      	str	r2, [r7, #4]
 80026de:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026e0:	2300      	movs	r3, #0
 80026e2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e4:	f7ff ff3e 	bl	8002564 <__NVIC_GetPriorityGrouping>
 80026e8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	68b9      	ldr	r1, [r7, #8]
 80026ee:	6978      	ldr	r0, [r7, #20]
 80026f0:	f7ff ff8e 	bl	8002610 <NVIC_EncodePriority>
 80026f4:	4602      	mov	r2, r0
 80026f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fa:	4611      	mov	r1, r2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7ff ff5d 	bl	80025bc <__NVIC_SetPriority>
}
 8002702:	bf00      	nop
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270a:	b580      	push	{r7, lr}
 800270c:	b082      	sub	sp, #8
 800270e:	af00      	add	r7, sp, #0
 8002710:	4603      	mov	r3, r0
 8002712:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff31 	bl	8002580 <__NVIC_EnableIRQ>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272e:	6878      	ldr	r0, [r7, #4]
 8002730:	f7ff ffa2 	bl	8002678 <SysTick_Config>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800273e:	b580      	push	{r7, lr}
 8002740:	b082      	sub	sp, #8
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d101      	bne.n	8002750 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e014      	b.n	800277a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	791b      	ldrb	r3, [r3, #4]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d105      	bne.n	8002766 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002760:	6878      	ldr	r0, [r7, #4]
 8002762:	f7fe fc2d 	bl	8000fc0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2202      	movs	r2, #2
 800276a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2201      	movs	r2, #1
 8002776:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3708      	adds	r7, #8
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
	...

08002784 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	795b      	ldrb	r3, [r3, #5]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d101      	bne.n	80027a2 <HAL_DAC_Start_DMA+0x1e>
 800279e:	2302      	movs	r3, #2
 80027a0:	e08e      	b.n	80028c0 <HAL_DAC_Start_DMA+0x13c>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2201      	movs	r2, #1
 80027a6:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2202      	movs	r2, #2
 80027ac:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d12a      	bne.n	800280a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	4a43      	ldr	r2, [pc, #268]	; (80028c8 <HAL_DAC_Start_DMA+0x144>)
 80027ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	4a42      	ldr	r2, [pc, #264]	; (80028cc <HAL_DAC_Start_DMA+0x148>)
 80027c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	689b      	ldr	r3, [r3, #8]
 80027c8:	4a41      	ldr	r2, [pc, #260]	; (80028d0 <HAL_DAC_Start_DMA+0x14c>)
 80027ca:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027da:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d009      	beq.n	80027f6 <HAL_DAC_Start_DMA+0x72>
 80027e2:	2b08      	cmp	r3, #8
 80027e4:	d00c      	beq.n	8002800 <HAL_DAC_Start_DMA+0x7c>
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d000      	beq.n	80027ec <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80027ea:	e039      	b.n	8002860 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3308      	adds	r3, #8
 80027f2:	617b      	str	r3, [r7, #20]
        break;
 80027f4:	e034      	b.n	8002860 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	330c      	adds	r3, #12
 80027fc:	617b      	str	r3, [r7, #20]
        break;
 80027fe:	e02f      	b.n	8002860 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3310      	adds	r3, #16
 8002806:	617b      	str	r3, [r7, #20]
        break;
 8002808:	e02a      	b.n	8002860 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	4a31      	ldr	r2, [pc, #196]	; (80028d4 <HAL_DAC_Start_DMA+0x150>)
 8002810:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	4a30      	ldr	r2, [pc, #192]	; (80028d8 <HAL_DAC_Start_DMA+0x154>)
 8002818:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	4a2f      	ldr	r2, [pc, #188]	; (80028dc <HAL_DAC_Start_DMA+0x158>)
 8002820:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002830:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2b04      	cmp	r3, #4
 8002836:	d009      	beq.n	800284c <HAL_DAC_Start_DMA+0xc8>
 8002838:	2b08      	cmp	r3, #8
 800283a:	d00c      	beq.n	8002856 <HAL_DAC_Start_DMA+0xd2>
 800283c:	2b00      	cmp	r3, #0
 800283e:	d000      	beq.n	8002842 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8002840:	e00e      	b.n	8002860 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	3314      	adds	r3, #20
 8002848:	617b      	str	r3, [r7, #20]
        break;
 800284a:	e009      	b.n	8002860 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	3318      	adds	r3, #24
 8002852:	617b      	str	r3, [r7, #20]
        break;
 8002854:	e004      	b.n	8002860 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	331c      	adds	r3, #28
 800285c:	617b      	str	r3, [r7, #20]
        break;
 800285e:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002860:	68bb      	ldr	r3, [r7, #8]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002874:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6898      	ldr	r0, [r3, #8]
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	697a      	ldr	r2, [r7, #20]
 8002880:	f000 f9d2 	bl	8002c28 <HAL_DMA_Start_IT>
 8002884:	e00e      	b.n	80028a4 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002894:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	68d8      	ldr	r0, [r3, #12]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	697a      	ldr	r2, [r7, #20]
 80028a0:	f000 f9c2 	bl	8002c28 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	6819      	ldr	r1, [r3, #0]
 80028aa:	2201      	movs	r2, #1
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	409a      	lsls	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	430a      	orrs	r2, r1
 80028b6:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2200      	movs	r2, #0
 80028bc:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	080029b7 	.word	0x080029b7
 80028cc:	080029d9 	.word	0x080029d9
 80028d0:	080029f5 	.word	0x080029f5
 80028d4:	08002a5f 	.word	0x08002a5f
 80028d8:	08002a81 	.word	0x08002a81
 80028dc:	08002a9d 	.word	0x08002a9d

080028e0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800291c:	b480      	push	{r7}
 800291e:	b087      	sub	sp, #28
 8002920:	af00      	add	r7, sp, #0
 8002922:	60f8      	str	r0, [r7, #12]
 8002924:	60b9      	str	r1, [r7, #8]
 8002926:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	2300      	movs	r3, #0
 800292e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	795b      	ldrb	r3, [r3, #5]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d101      	bne.n	800293c <HAL_DAC_ConfigChannel+0x20>
 8002938:	2302      	movs	r3, #2
 800293a:	e036      	b.n	80029aa <HAL_DAC_ConfigChannel+0x8e>
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	2201      	movs	r2, #1
 8002940:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2202      	movs	r2, #2
 8002946:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002950:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	fa02 f303 	lsl.w	r3, r2, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	697a      	ldr	r2, [r7, #20]
 800295e:	4013      	ands	r3, r2
 8002960:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	4313      	orrs	r3, r2
 800296c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	fa02 f303 	lsl.w	r3, r2, r3
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	697a      	ldr	r2, [r7, #20]
 8002982:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	6819      	ldr	r1, [r3, #0]
 800298a:	22c0      	movs	r2, #192	; 0xc0
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	400a      	ands	r2, r1
 800299a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	371c      	adds	r7, #28
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 80029c4:	68f8      	ldr	r0, [r7, #12]
 80029c6:	f7ff ff8b 	bl	80028e0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	711a      	strb	r2, [r3, #4]
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80029e6:	68f8      	ldr	r0, [r7, #12]
 80029e8:	f7ff ff84 	bl	80028f4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029ec:	bf00      	nop
 80029ee:	3710      	adds	r7, #16
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}

080029f4 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b084      	sub	sp, #16
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a00:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	691b      	ldr	r3, [r3, #16]
 8002a06:	f043 0204 	orr.w	r2, r3, #4
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f7ff ff7a 	bl	8002908 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	711a      	strb	r2, [r3, #4]
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002a2a:	bf00      	nop
 8002a2c:	370c      	adds	r7, #12
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr

08002a36 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002a36:	b480      	push	{r7}
 8002a38:	b083      	sub	sp, #12
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002a3e:	bf00      	nop
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002a52:	bf00      	nop
 8002a54:	370c      	adds	r7, #12
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr

08002a5e <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002a5e:	b580      	push	{r7, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
 8002a64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff ffd8 	bl	8002a22 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2201      	movs	r2, #1
 8002a76:	711a      	strb	r2, [r3, #4]
}
 8002a78:	bf00      	nop
 8002a7a:	3710      	adds	r7, #16
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff ffd1 	bl	8002a36 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	691b      	ldr	r3, [r3, #16]
 8002aae:	f043 0204 	orr.w	r2, r3, #4
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f7ff ffc7 	bl	8002a4a <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	711a      	strb	r2, [r3, #4]
}
 8002ac2:	bf00      	nop
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ad8:	f7ff fa80 	bl	8001fdc <HAL_GetTick>
 8002adc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e099      	b.n	8002c1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b08:	e00f      	b.n	8002b2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b0a:	f7ff fa67 	bl	8001fdc <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b05      	cmp	r3, #5
 8002b16:	d908      	bls.n	8002b2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2203      	movs	r2, #3
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e078      	b.n	8002c1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1e8      	bne.n	8002b0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b40:	697a      	ldr	r2, [r7, #20]
 8002b42:	4b38      	ldr	r3, [pc, #224]	; (8002c24 <HAL_DMA_Init+0x158>)
 8002b44:	4013      	ands	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	699b      	ldr	r3, [r3, #24]
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	2b04      	cmp	r3, #4
 8002b82:	d107      	bne.n	8002b94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f023 0307 	bic.w	r3, r3, #7
 8002baa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d117      	bne.n	8002bee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00e      	beq.n	8002bee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f000 fa6f 	bl	80030b4 <DMA_CheckFifoParam>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2240      	movs	r2, #64	; 0x40
 8002be0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002bea:	2301      	movs	r3, #1
 8002bec:	e016      	b.n	8002c1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 fa26 	bl	8003048 <DMA_CalcBaseAndBitshift>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	223f      	movs	r2, #63	; 0x3f
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c1a:	2300      	movs	r3, #0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3718      	adds	r7, #24
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}
 8002c24:	f010803f 	.word	0xf010803f

08002c28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
 8002c34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d101      	bne.n	8002c4e <HAL_DMA_Start_IT+0x26>
 8002c4a:	2302      	movs	r3, #2
 8002c4c:	e040      	b.n	8002cd0 <HAL_DMA_Start_IT+0xa8>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d12f      	bne.n	8002cc2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68b9      	ldr	r1, [r7, #8]
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f000 f9b8 	bl	8002fec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	223f      	movs	r2, #63	; 0x3f
 8002c82:	409a      	lsls	r2, r3
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f042 0216 	orr.w	r2, r2, #22
 8002c96:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0208 	orr.w	r2, r2, #8
 8002cae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0201 	orr.w	r2, r2, #1
 8002cbe:	601a      	str	r2, [r3, #0]
 8002cc0:	e005      	b.n	8002cce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cca:	2302      	movs	r3, #2
 8002ccc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002ce4:	4b92      	ldr	r3, [pc, #584]	; (8002f30 <HAL_DMA_IRQHandler+0x258>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a92      	ldr	r2, [pc, #584]	; (8002f34 <HAL_DMA_IRQHandler+0x25c>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	0a9b      	lsrs	r3, r3, #10
 8002cf0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cf6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002cf8:	693b      	ldr	r3, [r7, #16]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d02:	2208      	movs	r2, #8
 8002d04:	409a      	lsls	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d01a      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f022 0204 	bic.w	r2, r2, #4
 8002d2a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d30:	2208      	movs	r2, #8
 8002d32:	409a      	lsls	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3c:	f043 0201 	orr.w	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	2201      	movs	r2, #1
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4013      	ands	r3, r2
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d012      	beq.n	8002d7a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00b      	beq.n	8002d7a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d66:	2201      	movs	r2, #1
 8002d68:	409a      	lsls	r2, r3
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d72:	f043 0202 	orr.w	r2, r3, #2
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7e:	2204      	movs	r2, #4
 8002d80:	409a      	lsls	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d012      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9c:	2204      	movs	r2, #4
 8002d9e:	409a      	lsls	r2, r3
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da8:	f043 0204 	orr.w	r2, r3, #4
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	2210      	movs	r2, #16
 8002db6:	409a      	lsls	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	4013      	ands	r3, r2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d043      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0308 	and.w	r3, r3, #8
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d03c      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	2210      	movs	r2, #16
 8002dd4:	409a      	lsls	r2, r3
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d018      	beq.n	8002e1a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d108      	bne.n	8002e08 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d024      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	4798      	blx	r3
 8002e06:	e01f      	b.n	8002e48 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	4798      	blx	r3
 8002e18:	e016      	b.n	8002e48 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d107      	bne.n	8002e38 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	681a      	ldr	r2, [r3, #0]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0208 	bic.w	r2, r2, #8
 8002e36:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	2220      	movs	r2, #32
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 808e 	beq.w	8002f76 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0310 	and.w	r3, r3, #16
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	f000 8086 	beq.w	8002f76 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e6e:	2220      	movs	r2, #32
 8002e70:	409a      	lsls	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	2b05      	cmp	r3, #5
 8002e80:	d136      	bne.n	8002ef0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f022 0216 	bic.w	r2, r2, #22
 8002e90:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	695a      	ldr	r2, [r3, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ea0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <HAL_DMA_IRQHandler+0x1da>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 0208 	bic.w	r2, r2, #8
 8002ec0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	223f      	movs	r2, #63	; 0x3f
 8002ec8:	409a      	lsls	r2, r3
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d07d      	beq.n	8002fe2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4798      	blx	r3
        }
        return;
 8002eee:	e078      	b.n	8002fe2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01c      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d108      	bne.n	8002f1e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d030      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4798      	blx	r3
 8002f1c:	e02b      	b.n	8002f76 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d027      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	4798      	blx	r3
 8002f2e:	e022      	b.n	8002f76 <HAL_DMA_IRQHandler+0x29e>
 8002f30:	20000020 	.word	0x20000020
 8002f34:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d10f      	bne.n	8002f66 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0210 	bic.w	r2, r2, #16
 8002f54:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d032      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d022      	beq.n	8002fd0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2205      	movs	r2, #5
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 0201 	bic.w	r2, r2, #1
 8002fa0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	60bb      	str	r3, [r7, #8]
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d307      	bcc.n	8002fbe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1f2      	bne.n	8002fa2 <HAL_DMA_IRQHandler+0x2ca>
 8002fbc:	e000      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002fbe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	4798      	blx	r3
 8002fe0:	e000      	b.n	8002fe4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002fe2:	bf00      	nop
    }
  }
}
 8002fe4:	3718      	adds	r7, #24
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop

08002fec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
 8002ff8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003008:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	683a      	ldr	r2, [r7, #0]
 8003010:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	2b40      	cmp	r3, #64	; 0x40
 8003018:	d108      	bne.n	800302c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68ba      	ldr	r2, [r7, #8]
 8003028:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800302a:	e007      	b.n	800303c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68ba      	ldr	r2, [r7, #8]
 8003032:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	60da      	str	r2, [r3, #12]
}
 800303c:	bf00      	nop
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	3b10      	subs	r3, #16
 8003058:	4a14      	ldr	r2, [pc, #80]	; (80030ac <DMA_CalcBaseAndBitshift+0x64>)
 800305a:	fba2 2303 	umull	r2, r3, r2, r3
 800305e:	091b      	lsrs	r3, r3, #4
 8003060:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003062:	4a13      	ldr	r2, [pc, #76]	; (80030b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	4413      	add	r3, r2
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2b03      	cmp	r3, #3
 8003074:	d909      	bls.n	800308a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800307e:	f023 0303 	bic.w	r3, r3, #3
 8003082:	1d1a      	adds	r2, r3, #4
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	659a      	str	r2, [r3, #88]	; 0x58
 8003088:	e007      	b.n	800309a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003092:	f023 0303 	bic.w	r3, r3, #3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3714      	adds	r7, #20
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	aaaaaaab 	.word	0xaaaaaaab
 80030b0:	08008de8 	.word	0x08008de8

080030b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d11f      	bne.n	800310e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	2b03      	cmp	r3, #3
 80030d2:	d855      	bhi.n	8003180 <DMA_CheckFifoParam+0xcc>
 80030d4:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <DMA_CheckFifoParam+0x28>)
 80030d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030da:	bf00      	nop
 80030dc:	080030ed 	.word	0x080030ed
 80030e0:	080030ff 	.word	0x080030ff
 80030e4:	080030ed 	.word	0x080030ed
 80030e8:	08003181 	.word	0x08003181
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d045      	beq.n	8003184 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030fc:	e042      	b.n	8003184 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003102:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003106:	d13f      	bne.n	8003188 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800310c:	e03c      	b.n	8003188 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003116:	d121      	bne.n	800315c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	2b03      	cmp	r3, #3
 800311c:	d836      	bhi.n	800318c <DMA_CheckFifoParam+0xd8>
 800311e:	a201      	add	r2, pc, #4	; (adr r2, 8003124 <DMA_CheckFifoParam+0x70>)
 8003120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003124:	08003135 	.word	0x08003135
 8003128:	0800313b 	.word	0x0800313b
 800312c:	08003135 	.word	0x08003135
 8003130:	0800314d 	.word	0x0800314d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	73fb      	strb	r3, [r7, #15]
      break;
 8003138:	e02f      	b.n	800319a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800313e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d024      	beq.n	8003190 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314a:	e021      	b.n	8003190 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003154:	d11e      	bne.n	8003194 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800315a:	e01b      	b.n	8003194 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d902      	bls.n	8003168 <DMA_CheckFifoParam+0xb4>
 8003162:	2b03      	cmp	r3, #3
 8003164:	d003      	beq.n	800316e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003166:	e018      	b.n	800319a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	73fb      	strb	r3, [r7, #15]
      break;
 800316c:	e015      	b.n	800319a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003172:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00e      	beq.n	8003198 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
      break;
 800317e:	e00b      	b.n	8003198 <DMA_CheckFifoParam+0xe4>
      break;
 8003180:	bf00      	nop
 8003182:	e00a      	b.n	800319a <DMA_CheckFifoParam+0xe6>
      break;
 8003184:	bf00      	nop
 8003186:	e008      	b.n	800319a <DMA_CheckFifoParam+0xe6>
      break;
 8003188:	bf00      	nop
 800318a:	e006      	b.n	800319a <DMA_CheckFifoParam+0xe6>
      break;
 800318c:	bf00      	nop
 800318e:	e004      	b.n	800319a <DMA_CheckFifoParam+0xe6>
      break;
 8003190:	bf00      	nop
 8003192:	e002      	b.n	800319a <DMA_CheckFifoParam+0xe6>
      break;   
 8003194:	bf00      	nop
 8003196:	e000      	b.n	800319a <DMA_CheckFifoParam+0xe6>
      break;
 8003198:	bf00      	nop
    }
  } 
  
  return status; 
 800319a:	7bfb      	ldrb	r3, [r7, #15]
}
 800319c:	4618      	mov	r0, r3
 800319e:	3714      	adds	r7, #20
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b089      	sub	sp, #36	; 0x24
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031b6:	2300      	movs	r3, #0
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031ba:	2300      	movs	r3, #0
 80031bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
 80031c2:	e177      	b.n	80034b4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031c4:	2201      	movs	r2, #1
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	4013      	ands	r3, r2
 80031d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031d8:	693a      	ldr	r2, [r7, #16]
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	f040 8166 	bne.w	80034ae <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d00b      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80031f6:	2b11      	cmp	r3, #17
 80031f8:	d003      	beq.n	8003202 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b12      	cmp	r3, #18
 8003200:	d130      	bne.n	8003264 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	005b      	lsls	r3, r3, #1
 800320c:	2203      	movs	r2, #3
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43db      	mvns	r3, r3
 8003214:	69ba      	ldr	r2, [r7, #24]
 8003216:	4013      	ands	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800321a:	683b      	ldr	r3, [r7, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	fa02 f303 	lsl.w	r3, r2, r3
 8003226:	69ba      	ldr	r2, [r7, #24]
 8003228:	4313      	orrs	r3, r2
 800322a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003238:	2201      	movs	r2, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0201 	and.w	r2, r3, #1
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	2203      	movs	r2, #3
 8003270:	fa02 f303 	lsl.w	r3, r2, r3
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	005b      	lsls	r3, r3, #1
 8003284:	fa02 f303 	lsl.w	r3, r2, r3
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	4313      	orrs	r3, r2
 800328c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	2b02      	cmp	r3, #2
 800329a:	d003      	beq.n	80032a4 <HAL_GPIO_Init+0xfc>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	2b12      	cmp	r3, #18
 80032a2:	d123      	bne.n	80032ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	08da      	lsrs	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3208      	adds	r2, #8
 80032ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	f003 0307 	and.w	r3, r3, #7
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	220f      	movs	r2, #15
 80032bc:	fa02 f303 	lsl.w	r3, r2, r3
 80032c0:	43db      	mvns	r3, r3
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	4013      	ands	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	691a      	ldr	r2, [r3, #16]
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	f003 0307 	and.w	r3, r3, #7
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	fa02 f303 	lsl.w	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4313      	orrs	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	08da      	lsrs	r2, r3, #3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3208      	adds	r2, #8
 80032e6:	69b9      	ldr	r1, [r7, #24]
 80032e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	2203      	movs	r2, #3
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4013      	ands	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f003 0203 	and.w	r2, r3, #3
 800330c:	69fb      	ldr	r3, [r7, #28]
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4313      	orrs	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	f000 80c0 	beq.w	80034ae <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b65      	ldr	r3, [pc, #404]	; (80034c8 <HAL_GPIO_Init+0x320>)
 8003334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003336:	4a64      	ldr	r2, [pc, #400]	; (80034c8 <HAL_GPIO_Init+0x320>)
 8003338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800333c:	6453      	str	r3, [r2, #68]	; 0x44
 800333e:	4b62      	ldr	r3, [pc, #392]	; (80034c8 <HAL_GPIO_Init+0x320>)
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800334a:	4a60      	ldr	r2, [pc, #384]	; (80034cc <HAL_GPIO_Init+0x324>)
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	089b      	lsrs	r3, r3, #2
 8003350:	3302      	adds	r3, #2
 8003352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003356:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 0303 	and.w	r3, r3, #3
 800335e:	009b      	lsls	r3, r3, #2
 8003360:	220f      	movs	r2, #15
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a57      	ldr	r2, [pc, #348]	; (80034d0 <HAL_GPIO_Init+0x328>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d037      	beq.n	80033e6 <HAL_GPIO_Init+0x23e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a56      	ldr	r2, [pc, #344]	; (80034d4 <HAL_GPIO_Init+0x32c>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d031      	beq.n	80033e2 <HAL_GPIO_Init+0x23a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a55      	ldr	r2, [pc, #340]	; (80034d8 <HAL_GPIO_Init+0x330>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d02b      	beq.n	80033de <HAL_GPIO_Init+0x236>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a54      	ldr	r2, [pc, #336]	; (80034dc <HAL_GPIO_Init+0x334>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d025      	beq.n	80033da <HAL_GPIO_Init+0x232>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a53      	ldr	r2, [pc, #332]	; (80034e0 <HAL_GPIO_Init+0x338>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d01f      	beq.n	80033d6 <HAL_GPIO_Init+0x22e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a52      	ldr	r2, [pc, #328]	; (80034e4 <HAL_GPIO_Init+0x33c>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d019      	beq.n	80033d2 <HAL_GPIO_Init+0x22a>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	4a51      	ldr	r2, [pc, #324]	; (80034e8 <HAL_GPIO_Init+0x340>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d013      	beq.n	80033ce <HAL_GPIO_Init+0x226>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	4a50      	ldr	r2, [pc, #320]	; (80034ec <HAL_GPIO_Init+0x344>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00d      	beq.n	80033ca <HAL_GPIO_Init+0x222>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	4a4f      	ldr	r2, [pc, #316]	; (80034f0 <HAL_GPIO_Init+0x348>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d007      	beq.n	80033c6 <HAL_GPIO_Init+0x21e>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a4e      	ldr	r2, [pc, #312]	; (80034f4 <HAL_GPIO_Init+0x34c>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <HAL_GPIO_Init+0x21a>
 80033be:	2309      	movs	r3, #9
 80033c0:	e012      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033c2:	230a      	movs	r3, #10
 80033c4:	e010      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033c6:	2308      	movs	r3, #8
 80033c8:	e00e      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033ca:	2307      	movs	r3, #7
 80033cc:	e00c      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033ce:	2306      	movs	r3, #6
 80033d0:	e00a      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033d2:	2305      	movs	r3, #5
 80033d4:	e008      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033d6:	2304      	movs	r3, #4
 80033d8:	e006      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033da:	2303      	movs	r3, #3
 80033dc:	e004      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033de:	2302      	movs	r3, #2
 80033e0:	e002      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_GPIO_Init+0x240>
 80033e6:	2300      	movs	r3, #0
 80033e8:	69fa      	ldr	r2, [r7, #28]
 80033ea:	f002 0203 	and.w	r2, r2, #3
 80033ee:	0092      	lsls	r2, r2, #2
 80033f0:	4093      	lsls	r3, r2
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033f8:	4934      	ldr	r1, [pc, #208]	; (80034cc <HAL_GPIO_Init+0x324>)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	089b      	lsrs	r3, r3, #2
 80033fe:	3302      	adds	r3, #2
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003406:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <HAL_GPIO_Init+0x350>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	43db      	mvns	r3, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4013      	ands	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800342a:	4a33      	ldr	r2, [pc, #204]	; (80034f8 <HAL_GPIO_Init+0x350>)
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003430:	4b31      	ldr	r3, [pc, #196]	; (80034f8 <HAL_GPIO_Init+0x350>)
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	43db      	mvns	r3, r3
 800343a:	69ba      	ldr	r2, [r7, #24]
 800343c:	4013      	ands	r3, r2
 800343e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d003      	beq.n	8003454 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4313      	orrs	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003454:	4a28      	ldr	r2, [pc, #160]	; (80034f8 <HAL_GPIO_Init+0x350>)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800345a:	4b27      	ldr	r3, [pc, #156]	; (80034f8 <HAL_GPIO_Init+0x350>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	4313      	orrs	r3, r2
 800347c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800347e:	4a1e      	ldr	r2, [pc, #120]	; (80034f8 <HAL_GPIO_Init+0x350>)
 8003480:	69bb      	ldr	r3, [r7, #24]
 8003482:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <HAL_GPIO_Init+0x350>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	43db      	mvns	r3, r3
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	4013      	ands	r3, r2
 8003492:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d003      	beq.n	80034a8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034a8:	4a13      	ldr	r2, [pc, #76]	; (80034f8 <HAL_GPIO_Init+0x350>)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3301      	adds	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	2b0f      	cmp	r3, #15
 80034b8:	f67f ae84 	bls.w	80031c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034bc:	bf00      	nop
 80034be:	3724      	adds	r7, #36	; 0x24
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	40023800 	.word	0x40023800
 80034cc:	40013800 	.word	0x40013800
 80034d0:	40020000 	.word	0x40020000
 80034d4:	40020400 	.word	0x40020400
 80034d8:	40020800 	.word	0x40020800
 80034dc:	40020c00 	.word	0x40020c00
 80034e0:	40021000 	.word	0x40021000
 80034e4:	40021400 	.word	0x40021400
 80034e8:	40021800 	.word	0x40021800
 80034ec:	40021c00 	.word	0x40021c00
 80034f0:	40022000 	.word	0x40022000
 80034f4:	40022400 	.word	0x40022400
 80034f8:	40013c00 	.word	0x40013c00

080034fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	460b      	mov	r3, r1
 8003506:	807b      	strh	r3, [r7, #2]
 8003508:	4613      	mov	r3, r2
 800350a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800350c:	787b      	ldrb	r3, [r7, #1]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d003      	beq.n	800351a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003512:	887a      	ldrh	r2, [r7, #2]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003518:	e003      	b.n	8003522 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800351a:	887b      	ldrh	r3, [r7, #2]
 800351c:	041a      	lsls	r2, r3, #16
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	619a      	str	r2, [r3, #24]
}
 8003522:	bf00      	nop
 8003524:	370c      	adds	r7, #12
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
	...

08003530 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d101      	bne.n	8003542 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e11f      	b.n	8003782 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003548:	b2db      	uxtb	r3, r3
 800354a:	2b00      	cmp	r3, #0
 800354c:	d106      	bne.n	800355c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7fd feda 	bl	8001310 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2224      	movs	r2, #36	; 0x24
 8003560:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f022 0201 	bic.w	r2, r2, #1
 8003572:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003582:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003592:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003594:	f001 f8fe 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8003598:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	4a7b      	ldr	r2, [pc, #492]	; (800378c <HAL_I2C_Init+0x25c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d807      	bhi.n	80035b4 <HAL_I2C_Init+0x84>
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a7a      	ldr	r2, [pc, #488]	; (8003790 <HAL_I2C_Init+0x260>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	bf94      	ite	ls
 80035ac:	2301      	movls	r3, #1
 80035ae:	2300      	movhi	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e006      	b.n	80035c2 <HAL_I2C_Init+0x92>
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	4a77      	ldr	r2, [pc, #476]	; (8003794 <HAL_I2C_Init+0x264>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	bf94      	ite	ls
 80035bc:	2301      	movls	r3, #1
 80035be:	2300      	movhi	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e0db      	b.n	8003782 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	4a72      	ldr	r2, [pc, #456]	; (8003798 <HAL_I2C_Init+0x268>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	0c9b      	lsrs	r3, r3, #18
 80035d4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	68ba      	ldr	r2, [r7, #8]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4a64      	ldr	r2, [pc, #400]	; (800378c <HAL_I2C_Init+0x25c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d802      	bhi.n	8003604 <HAL_I2C_Init+0xd4>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	3301      	adds	r3, #1
 8003602:	e009      	b.n	8003618 <HAL_I2C_Init+0xe8>
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	4a63      	ldr	r2, [pc, #396]	; (800379c <HAL_I2C_Init+0x26c>)
 8003610:	fba2 2303 	umull	r2, r3, r2, r3
 8003614:	099b      	lsrs	r3, r3, #6
 8003616:	3301      	adds	r3, #1
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	430b      	orrs	r3, r1
 800361e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800362a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4956      	ldr	r1, [pc, #344]	; (800378c <HAL_I2C_Init+0x25c>)
 8003634:	428b      	cmp	r3, r1
 8003636:	d80d      	bhi.n	8003654 <HAL_I2C_Init+0x124>
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	1e59      	subs	r1, r3, #1
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	005b      	lsls	r3, r3, #1
 8003642:	fbb1 f3f3 	udiv	r3, r1, r3
 8003646:	3301      	adds	r3, #1
 8003648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800364c:	2b04      	cmp	r3, #4
 800364e:	bf38      	it	cc
 8003650:	2304      	movcc	r3, #4
 8003652:	e04f      	b.n	80036f4 <HAL_I2C_Init+0x1c4>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d111      	bne.n	8003680 <HAL_I2C_Init+0x150>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	1e58      	subs	r0, r3, #1
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6859      	ldr	r1, [r3, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	440b      	add	r3, r1
 800366a:	fbb0 f3f3 	udiv	r3, r0, r3
 800366e:	3301      	adds	r3, #1
 8003670:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003674:	2b00      	cmp	r3, #0
 8003676:	bf0c      	ite	eq
 8003678:	2301      	moveq	r3, #1
 800367a:	2300      	movne	r3, #0
 800367c:	b2db      	uxtb	r3, r3
 800367e:	e012      	b.n	80036a6 <HAL_I2C_Init+0x176>
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1e58      	subs	r0, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6859      	ldr	r1, [r3, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	0099      	lsls	r1, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	fbb0 f3f3 	udiv	r3, r0, r3
 8003696:	3301      	adds	r3, #1
 8003698:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800369c:	2b00      	cmp	r3, #0
 800369e:	bf0c      	ite	eq
 80036a0:	2301      	moveq	r3, #1
 80036a2:	2300      	movne	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_I2C_Init+0x17e>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e022      	b.n	80036f4 <HAL_I2C_Init+0x1c4>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10e      	bne.n	80036d4 <HAL_I2C_Init+0x1a4>
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	1e58      	subs	r0, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6859      	ldr	r1, [r3, #4]
 80036be:	460b      	mov	r3, r1
 80036c0:	005b      	lsls	r3, r3, #1
 80036c2:	440b      	add	r3, r1
 80036c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80036c8:	3301      	adds	r3, #1
 80036ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036d2:	e00f      	b.n	80036f4 <HAL_I2C_Init+0x1c4>
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	1e58      	subs	r0, r3, #1
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6859      	ldr	r1, [r3, #4]
 80036dc:	460b      	mov	r3, r1
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	440b      	add	r3, r1
 80036e2:	0099      	lsls	r1, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80036ea:	3301      	adds	r3, #1
 80036ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	6809      	ldr	r1, [r1, #0]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	69da      	ldr	r2, [r3, #28]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a1b      	ldr	r3, [r3, #32]
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003722:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003726:	687a      	ldr	r2, [r7, #4]
 8003728:	6911      	ldr	r1, [r2, #16]
 800372a:	687a      	ldr	r2, [r7, #4]
 800372c:	68d2      	ldr	r2, [r2, #12]
 800372e:	4311      	orrs	r1, r2
 8003730:	687a      	ldr	r2, [r7, #4]
 8003732:	6812      	ldr	r2, [r2, #0]
 8003734:	430b      	orrs	r3, r1
 8003736:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695a      	ldr	r2, [r3, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0201 	orr.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	000186a0 	.word	0x000186a0
 8003790:	001e847f 	.word	0x001e847f
 8003794:	003d08ff 	.word	0x003d08ff
 8003798:	431bde83 	.word	0x431bde83
 800379c:	10624dd3 	.word	0x10624dd3

080037a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b20      	cmp	r3, #32
 80037b4:	d129      	bne.n	800380a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2224      	movs	r2, #36	; 0x24
 80037ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0210 	bic.w	r2, r2, #16
 80037dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	683a      	ldr	r2, [r7, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f042 0201 	orr.w	r2, r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003806:	2300      	movs	r3, #0
 8003808:	e000      	b.n	800380c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800380a:	2302      	movs	r3, #2
  }
}
 800380c:	4618      	mov	r0, r3
 800380e:	370c      	adds	r7, #12
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b085      	sub	sp, #20
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003822:	2300      	movs	r3, #0
 8003824:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800382c:	b2db      	uxtb	r3, r3
 800382e:	2b20      	cmp	r3, #32
 8003830:	d12a      	bne.n	8003888 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2224      	movs	r2, #36	; 0x24
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0201 	bic.w	r2, r2, #1
 8003848:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003852:	89fb      	ldrh	r3, [r7, #14]
 8003854:	f023 030f 	bic.w	r3, r3, #15
 8003858:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	b29a      	uxth	r2, r3
 800385e:	89fb      	ldrh	r3, [r7, #14]
 8003860:	4313      	orrs	r3, r2
 8003862:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	89fa      	ldrh	r2, [r7, #14]
 800386a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2220      	movs	r2, #32
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003884:	2300      	movs	r3, #0
 8003886:	e000      	b.n	800388a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003888:	2302      	movs	r3, #2
  }
}
 800388a:	4618      	mov	r0, r3
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr

08003896 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003896:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003898:	b08f      	sub	sp, #60	; 0x3c
 800389a:	af0a      	add	r7, sp, #40	; 0x28
 800389c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e10f      	b.n	8003ac8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d106      	bne.n	80038c8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f003 ffac 	bl	8007820 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2203      	movs	r2, #3
 80038cc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d102      	bne.n	80038e2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f002 f968 	bl	8005bbc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	603b      	str	r3, [r7, #0]
 80038f2:	687e      	ldr	r6, [r7, #4]
 80038f4:	466d      	mov	r5, sp
 80038f6:	f106 0410 	add.w	r4, r6, #16
 80038fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80038fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80038fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003900:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003902:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003906:	e885 0003 	stmia.w	r5, {r0, r1}
 800390a:	1d33      	adds	r3, r6, #4
 800390c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800390e:	6838      	ldr	r0, [r7, #0]
 8003910:	f002 f8e2 	bl	8005ad8 <USB_CoreInit>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d005      	beq.n	8003926 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2202      	movs	r2, #2
 800391e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e0d0      	b.n	8003ac8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f002 f956 	bl	8005bde <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003932:	2300      	movs	r3, #0
 8003934:	73fb      	strb	r3, [r7, #15]
 8003936:	e04a      	b.n	80039ce <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003938:	7bfa      	ldrb	r2, [r7, #15]
 800393a:	6879      	ldr	r1, [r7, #4]
 800393c:	4613      	mov	r3, r2
 800393e:	00db      	lsls	r3, r3, #3
 8003940:	1a9b      	subs	r3, r3, r2
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	333d      	adds	r3, #61	; 0x3d
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800394c:	7bfa      	ldrb	r2, [r7, #15]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	00db      	lsls	r3, r3, #3
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	333c      	adds	r3, #60	; 0x3c
 800395c:	7bfa      	ldrb	r2, [r7, #15]
 800395e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003960:	7bfa      	ldrb	r2, [r7, #15]
 8003962:	7bfb      	ldrb	r3, [r7, #15]
 8003964:	b298      	uxth	r0, r3
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	00db      	lsls	r3, r3, #3
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	3342      	adds	r3, #66	; 0x42
 8003974:	4602      	mov	r2, r0
 8003976:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003978:	7bfa      	ldrb	r2, [r7, #15]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	333f      	adds	r3, #63	; 0x3f
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800398c:	7bfa      	ldrb	r2, [r7, #15]
 800398e:	6879      	ldr	r1, [r7, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	3344      	adds	r3, #68	; 0x44
 800399c:	2200      	movs	r2, #0
 800399e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80039a0:	7bfa      	ldrb	r2, [r7, #15]
 80039a2:	6879      	ldr	r1, [r7, #4]
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	1a9b      	subs	r3, r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	440b      	add	r3, r1
 80039ae:	3348      	adds	r3, #72	; 0x48
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	6879      	ldr	r1, [r7, #4]
 80039b8:	4613      	mov	r3, r2
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	1a9b      	subs	r3, r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	3350      	adds	r3, #80	; 0x50
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039c8:	7bfb      	ldrb	r3, [r7, #15]
 80039ca:	3301      	adds	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
 80039ce:	7bfa      	ldrb	r2, [r7, #15]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d3af      	bcc.n	8003938 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039d8:	2300      	movs	r3, #0
 80039da:	73fb      	strb	r3, [r7, #15]
 80039dc:	e044      	b.n	8003a68 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80039de:	7bfa      	ldrb	r2, [r7, #15]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	00db      	lsls	r3, r3, #3
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80039f4:	7bfa      	ldrb	r2, [r7, #15]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	00db      	lsls	r3, r3, #3
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003a06:	7bfa      	ldrb	r2, [r7, #15]
 8003a08:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003a0a:	7bfa      	ldrb	r2, [r7, #15]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	00db      	lsls	r3, r3, #3
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003a20:	7bfa      	ldrb	r2, [r7, #15]
 8003a22:	6879      	ldr	r1, [r7, #4]
 8003a24:	4613      	mov	r3, r2
 8003a26:	00db      	lsls	r3, r3, #3
 8003a28:	1a9b      	subs	r3, r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003a32:	2200      	movs	r2, #0
 8003a34:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003a36:	7bfa      	ldrb	r2, [r7, #15]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003a48:	2200      	movs	r2, #0
 8003a4a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003a4c:	7bfa      	ldrb	r2, [r7, #15]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003a5e:	2200      	movs	r2, #0
 8003a60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a62:	7bfb      	ldrb	r3, [r7, #15]
 8003a64:	3301      	adds	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3b5      	bcc.n	80039de <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	603b      	str	r3, [r7, #0]
 8003a78:	687e      	ldr	r6, [r7, #4]
 8003a7a:	466d      	mov	r5, sp
 8003a7c:	f106 0410 	add.w	r4, r6, #16
 8003a80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a84:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a86:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a88:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a8c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a90:	1d33      	adds	r3, r6, #4
 8003a92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a94:	6838      	ldr	r0, [r7, #0]
 8003a96:	f002 f8cd 	bl	8005c34 <USB_DevInit>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d005      	beq.n	8003aac <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e00d      	b.n	8003ac8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f003 f83a 	bl	8006b3a <USB_DevDisconnect>

  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3714      	adds	r7, #20
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ad0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_PCD_Start+0x1c>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e020      	b.n	8003b2e <HAL_PCD_Start+0x5e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d109      	bne.n	8003b10 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d005      	beq.n	8003b10 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b08:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f002 f840 	bl	8005b9a <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f002 ffea 	bl	8006af8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b084      	sub	sp, #16
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	4608      	mov	r0, r1
 8003b40:	4611      	mov	r1, r2
 8003b42:	461a      	mov	r2, r3
 8003b44:	4603      	mov	r3, r0
 8003b46:	70fb      	strb	r3, [r7, #3]
 8003b48:	460b      	mov	r3, r1
 8003b4a:	803b      	strh	r3, [r7, #0]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003b50:	2300      	movs	r3, #0
 8003b52:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003b54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	da0f      	bge.n	8003b7c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b5c:	78fb      	ldrb	r3, [r7, #3]
 8003b5e:	f003 020f 	and.w	r2, r3, #15
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	3338      	adds	r3, #56	; 0x38
 8003b6c:	687a      	ldr	r2, [r7, #4]
 8003b6e:	4413      	add	r3, r2
 8003b70:	3304      	adds	r3, #4
 8003b72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2201      	movs	r2, #1
 8003b78:	705a      	strb	r2, [r3, #1]
 8003b7a:	e00f      	b.n	8003b9c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003b7c:	78fb      	ldrb	r3, [r7, #3]
 8003b7e:	f003 020f 	and.w	r2, r3, #15
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	4413      	add	r3, r2
 8003b92:	3304      	adds	r3, #4
 8003b94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003b9c:	78fb      	ldrb	r3, [r7, #3]
 8003b9e:	f003 030f 	and.w	r3, r3, #15
 8003ba2:	b2da      	uxtb	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003ba8:	883a      	ldrh	r2, [r7, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	78ba      	ldrb	r2, [r7, #2]
 8003bb2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d004      	beq.n	8003bc6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003bc6:	78bb      	ldrb	r3, [r7, #2]
 8003bc8:	2b02      	cmp	r3, #2
 8003bca:	d102      	bne.n	8003bd2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d101      	bne.n	8003be0 <HAL_PCD_EP_Open+0xaa>
 8003bdc:	2302      	movs	r3, #2
 8003bde:	e00e      	b.n	8003bfe <HAL_PCD_EP_Open+0xc8>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68f9      	ldr	r1, [r7, #12]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 f9e5 	bl	8005fbe <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003bfc:	7afb      	ldrb	r3, [r7, #11]
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}

08003c06 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b084      	sub	sp, #16
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	460b      	mov	r3, r1
 8003c10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	da0f      	bge.n	8003c3a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	f003 020f 	and.w	r2, r3, #15
 8003c20:	4613      	mov	r3, r2
 8003c22:	00db      	lsls	r3, r3, #3
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	3338      	adds	r3, #56	; 0x38
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	3304      	adds	r3, #4
 8003c30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2201      	movs	r2, #1
 8003c36:	705a      	strb	r2, [r3, #1]
 8003c38:	e00f      	b.n	8003c5a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c3a:	78fb      	ldrb	r3, [r7, #3]
 8003c3c:	f003 020f 	and.w	r2, r3, #15
 8003c40:	4613      	mov	r3, r2
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	1a9b      	subs	r3, r3, r2
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	4413      	add	r3, r2
 8003c50:	3304      	adds	r3, #4
 8003c52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2200      	movs	r2, #0
 8003c58:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003c5a:	78fb      	ldrb	r3, [r7, #3]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c6c:	2b01      	cmp	r3, #1
 8003c6e:	d101      	bne.n	8003c74 <HAL_PCD_EP_Close+0x6e>
 8003c70:	2302      	movs	r3, #2
 8003c72:	e00e      	b.n	8003c92 <HAL_PCD_EP_Close+0x8c>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68f9      	ldr	r1, [r7, #12]
 8003c82:	4618      	mov	r0, r3
 8003c84:	f002 fa22 	bl	80060cc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3710      	adds	r7, #16
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b086      	sub	sp, #24
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003caa:	7afb      	ldrb	r3, [r7, #11]
 8003cac:	f003 020f 	and.w	r2, r3, #15
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	00db      	lsls	r3, r3, #3
 8003cb4:	1a9b      	subs	r3, r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4413      	add	r3, r2
 8003cc0:	3304      	adds	r3, #4
 8003cc2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003cdc:	7afb      	ldrb	r3, [r7, #11]
 8003cde:	f003 030f 	and.w	r3, r3, #15
 8003ce2:	b2da      	uxtb	r2, r3
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d102      	bne.n	8003cf6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003cf0:	687a      	ldr	r2, [r7, #4]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003cf6:	7afb      	ldrb	r3, [r7, #11]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d109      	bne.n	8003d14 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	6979      	ldr	r1, [r7, #20]
 8003d0e:	f002 fcfd 	bl	800670c <USB_EP0StartXfer>
 8003d12:	e008      	b.n	8003d26 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6818      	ldr	r0, [r3, #0]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	b2db      	uxtb	r3, r3
 8003d1e:	461a      	mov	r2, r3
 8003d20:	6979      	ldr	r1, [r7, #20]
 8003d22:	f002 faaf 	bl	8006284 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	460b      	mov	r3, r1
 8003d3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003d3c:	78fb      	ldrb	r3, [r7, #3]
 8003d3e:	f003 020f 	and.w	r2, r3, #15
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	370c      	adds	r7, #12
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b086      	sub	sp, #24
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	60f8      	str	r0, [r7, #12]
 8003d68:	607a      	str	r2, [r7, #4]
 8003d6a:	603b      	str	r3, [r7, #0]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d70:	7afb      	ldrb	r3, [r7, #11]
 8003d72:	f003 020f 	and.w	r2, r3, #15
 8003d76:	4613      	mov	r3, r2
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	1a9b      	subs	r3, r3, r2
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	3338      	adds	r3, #56	; 0x38
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	3304      	adds	r3, #4
 8003d86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	683a      	ldr	r2, [r7, #0]
 8003d92:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	2200      	movs	r2, #0
 8003d98:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	f003 030f 	and.w	r3, r3, #15
 8003da6:	b2da      	uxtb	r2, r3
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d102      	bne.n	8003dba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dba:	7afb      	ldrb	r3, [r7, #11]
 8003dbc:	f003 030f 	and.w	r3, r3, #15
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d109      	bne.n	8003dd8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	691b      	ldr	r3, [r3, #16]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	461a      	mov	r2, r3
 8003dd0:	6979      	ldr	r1, [r7, #20]
 8003dd2:	f002 fc9b 	bl	800670c <USB_EP0StartXfer>
 8003dd6:	e008      	b.n	8003dea <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6818      	ldr	r0, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	6979      	ldr	r1, [r7, #20]
 8003de6:	f002 fa4d 	bl	8006284 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3718      	adds	r7, #24
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}

08003df4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
 8003dfc:	460b      	mov	r3, r1
 8003dfe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003e00:	78fb      	ldrb	r3, [r7, #3]
 8003e02:	f003 020f 	and.w	r2, r3, #15
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d901      	bls.n	8003e12 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e050      	b.n	8003eb4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003e12:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	da0f      	bge.n	8003e3a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e1a:	78fb      	ldrb	r3, [r7, #3]
 8003e1c:	f003 020f 	and.w	r2, r3, #15
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	3338      	adds	r3, #56	; 0x38
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3304      	adds	r3, #4
 8003e30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2201      	movs	r2, #1
 8003e36:	705a      	strb	r2, [r3, #1]
 8003e38:	e00d      	b.n	8003e56 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003e3a:	78fa      	ldrb	r2, [r7, #3]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	00db      	lsls	r3, r3, #3
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	3304      	adds	r3, #4
 8003e4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003e5c:	78fb      	ldrb	r3, [r7, #3]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d101      	bne.n	8003e76 <HAL_PCD_EP_SetStall+0x82>
 8003e72:	2302      	movs	r3, #2
 8003e74:	e01e      	b.n	8003eb4 <HAL_PCD_EP_SetStall+0xc0>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68f9      	ldr	r1, [r7, #12]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f002 fdc9 	bl	8006a1c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003e8a:	78fb      	ldrb	r3, [r7, #3]
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d10a      	bne.n	8003eaa <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6818      	ldr	r0, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	b2d9      	uxtb	r1, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ea4:	461a      	mov	r2, r3
 8003ea6:	f002 fe69 	bl	8006b7c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b085      	sub	sp, #20
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	70fb      	strb	r3, [r7, #3]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ed4:	78fb      	ldrb	r3, [r7, #3]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d107      	bne.n	8003eea <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eda:	883b      	ldrh	r3, [r7, #0]
 8003edc:	0419      	lsls	r1, r3, #16
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	430a      	orrs	r2, r1
 8003ee6:	629a      	str	r2, [r3, #40]	; 0x28
 8003ee8:	e028      	b.n	8003f3c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef0:	0c1b      	lsrs	r3, r3, #16
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	73fb      	strb	r3, [r7, #15]
 8003efc:	e00d      	b.n	8003f1a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	7bfb      	ldrb	r3, [r7, #15]
 8003f04:	3340      	adds	r3, #64	; 0x40
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4413      	add	r3, r2
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	0c1b      	lsrs	r3, r3, #16
 8003f0e:	68ba      	ldr	r2, [r7, #8]
 8003f10:	4413      	add	r3, r2
 8003f12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003f14:	7bfb      	ldrb	r3, [r7, #15]
 8003f16:	3301      	adds	r3, #1
 8003f18:	73fb      	strb	r3, [r7, #15]
 8003f1a:	7bfa      	ldrb	r2, [r7, #15]
 8003f1c:	78fb      	ldrb	r3, [r7, #3]
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	429a      	cmp	r2, r3
 8003f22:	d3ec      	bcc.n	8003efe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003f24:	883b      	ldrh	r3, [r7, #0]
 8003f26:	0418      	lsls	r0, r3, #16
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6819      	ldr	r1, [r3, #0]
 8003f2c:	78fb      	ldrb	r3, [r7, #3]
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	68ba      	ldr	r2, [r7, #8]
 8003f32:	4302      	orrs	r2, r0
 8003f34:	3340      	adds	r3, #64	; 0x40
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	440b      	add	r3, r1
 8003f3a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
 8003f52:	460b      	mov	r3, r1
 8003f54:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	887a      	ldrh	r2, [r7, #2]
 8003f5c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f5e:	2300      	movs	r3, #0
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	370c      	adds	r7, #12
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d101      	bne.n	8003f7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e25b      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d075      	beq.n	8004076 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f8a:	4ba3      	ldr	r3, [pc, #652]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f003 030c 	and.w	r3, r3, #12
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d00c      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f96:	4ba0      	ldr	r3, [pc, #640]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9e:	2b08      	cmp	r3, #8
 8003fa0:	d112      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fa2:	4b9d      	ldr	r3, [pc, #628]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003faa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fae:	d10b      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb0:	4b99      	ldr	r3, [pc, #612]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d05b      	beq.n	8004074 <HAL_RCC_OscConfig+0x108>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d157      	bne.n	8004074 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e236      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd0:	d106      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x74>
 8003fd2:	4b91      	ldr	r3, [pc, #580]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a90      	ldr	r2, [pc, #576]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e01d      	b.n	800401c <HAL_RCC_OscConfig+0xb0>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fe8:	d10c      	bne.n	8004004 <HAL_RCC_OscConfig+0x98>
 8003fea:	4b8b      	ldr	r3, [pc, #556]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a8a      	ldr	r2, [pc, #552]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003ff0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	4b88      	ldr	r3, [pc, #544]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a87      	ldr	r2, [pc, #540]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8003ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e00b      	b.n	800401c <HAL_RCC_OscConfig+0xb0>
 8004004:	4b84      	ldr	r3, [pc, #528]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a83      	ldr	r2, [pc, #524]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 800400a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800400e:	6013      	str	r3, [r2, #0]
 8004010:	4b81      	ldr	r3, [pc, #516]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a80      	ldr	r2, [pc, #512]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004016:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800401a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004024:	f7fd ffda 	bl	8001fdc <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800402c:	f7fd ffd6 	bl	8001fdc <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b64      	cmp	r3, #100	; 0x64
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e1fb      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	4b76      	ldr	r3, [pc, #472]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0xc0>
 800404a:	e014      	b.n	8004076 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fd ffc6 	bl	8001fdc <HAL_GetTick>
 8004050:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004052:	e008      	b.n	8004066 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004054:	f7fd ffc2 	bl	8001fdc <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	2b64      	cmp	r3, #100	; 0x64
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e1e7      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	4b6c      	ldr	r3, [pc, #432]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d1f0      	bne.n	8004054 <HAL_RCC_OscConfig+0xe8>
 8004072:	e000      	b.n	8004076 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004074:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b00      	cmp	r3, #0
 8004080:	d063      	beq.n	800414a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004082:	4b65      	ldr	r3, [pc, #404]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f003 030c 	and.w	r3, r3, #12
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00b      	beq.n	80040a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800408e:	4b62      	ldr	r3, [pc, #392]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004096:	2b08      	cmp	r3, #8
 8004098:	d11c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800409a:	4b5f      	ldr	r3, [pc, #380]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d116      	bne.n	80040d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040a6:	4b5c      	ldr	r3, [pc, #368]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f003 0302 	and.w	r3, r3, #2
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_RCC_OscConfig+0x152>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d001      	beq.n	80040be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e1bb      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040be:	4b56      	ldr	r3, [pc, #344]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4952      	ldr	r1, [pc, #328]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040d2:	e03a      	b.n	800414a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d020      	beq.n	800411e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040dc:	4b4f      	ldr	r3, [pc, #316]	; (800421c <HAL_RCC_OscConfig+0x2b0>)
 80040de:	2201      	movs	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e2:	f7fd ff7b 	bl	8001fdc <HAL_GetTick>
 80040e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e8:	e008      	b.n	80040fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040ea:	f7fd ff77 	bl	8001fdc <HAL_GetTick>
 80040ee:	4602      	mov	r2, r0
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1ad3      	subs	r3, r2, r3
 80040f4:	2b02      	cmp	r3, #2
 80040f6:	d901      	bls.n	80040fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040f8:	2303      	movs	r3, #3
 80040fa:	e19c      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	4b46      	ldr	r3, [pc, #280]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d0f0      	beq.n	80040ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004108:	4b43      	ldr	r3, [pc, #268]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	691b      	ldr	r3, [r3, #16]
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4940      	ldr	r1, [pc, #256]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004118:	4313      	orrs	r3, r2
 800411a:	600b      	str	r3, [r1, #0]
 800411c:	e015      	b.n	800414a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800411e:	4b3f      	ldr	r3, [pc, #252]	; (800421c <HAL_RCC_OscConfig+0x2b0>)
 8004120:	2200      	movs	r2, #0
 8004122:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004124:	f7fd ff5a 	bl	8001fdc <HAL_GetTick>
 8004128:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800412a:	e008      	b.n	800413e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800412c:	f7fd ff56 	bl	8001fdc <HAL_GetTick>
 8004130:	4602      	mov	r2, r0
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	1ad3      	subs	r3, r2, r3
 8004136:	2b02      	cmp	r3, #2
 8004138:	d901      	bls.n	800413e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e17b      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	4b36      	ldr	r3, [pc, #216]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0302 	and.w	r3, r3, #2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f0      	bne.n	800412c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0308 	and.w	r3, r3, #8
 8004152:	2b00      	cmp	r3, #0
 8004154:	d030      	beq.n	80041b8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d016      	beq.n	800418c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800415e:	4b30      	ldr	r3, [pc, #192]	; (8004220 <HAL_RCC_OscConfig+0x2b4>)
 8004160:	2201      	movs	r2, #1
 8004162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fd ff3a 	bl	8001fdc <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800416a:	e008      	b.n	800417e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800416c:	f7fd ff36 	bl	8001fdc <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	2b02      	cmp	r3, #2
 8004178:	d901      	bls.n	800417e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e15b      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	4b26      	ldr	r3, [pc, #152]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 8004180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0f0      	beq.n	800416c <HAL_RCC_OscConfig+0x200>
 800418a:	e015      	b.n	80041b8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800418c:	4b24      	ldr	r3, [pc, #144]	; (8004220 <HAL_RCC_OscConfig+0x2b4>)
 800418e:	2200      	movs	r2, #0
 8004190:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004192:	f7fd ff23 	bl	8001fdc <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004198:	e008      	b.n	80041ac <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800419a:	f7fd ff1f 	bl	8001fdc <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	2b02      	cmp	r3, #2
 80041a6:	d901      	bls.n	80041ac <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e144      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	4b1a      	ldr	r3, [pc, #104]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d1f0      	bne.n	800419a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f000 80a0 	beq.w	8004306 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041c6:	2300      	movs	r3, #0
 80041c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ca:	4b13      	ldr	r3, [pc, #76]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d10f      	bne.n	80041f6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	2300      	movs	r3, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	4b0f      	ldr	r3, [pc, #60]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6413      	str	r3, [r2, #64]	; 0x40
 80041e6:	4b0c      	ldr	r3, [pc, #48]	; (8004218 <HAL_RCC_OscConfig+0x2ac>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ee:	60bb      	str	r3, [r7, #8]
 80041f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041f2:	2301      	movs	r3, #1
 80041f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041f6:	4b0b      	ldr	r3, [pc, #44]	; (8004224 <HAL_RCC_OscConfig+0x2b8>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d121      	bne.n	8004246 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004202:	4b08      	ldr	r3, [pc, #32]	; (8004224 <HAL_RCC_OscConfig+0x2b8>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a07      	ldr	r2, [pc, #28]	; (8004224 <HAL_RCC_OscConfig+0x2b8>)
 8004208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800420c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420e:	f7fd fee5 	bl	8001fdc <HAL_GetTick>
 8004212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004214:	e011      	b.n	800423a <HAL_RCC_OscConfig+0x2ce>
 8004216:	bf00      	nop
 8004218:	40023800 	.word	0x40023800
 800421c:	42470000 	.word	0x42470000
 8004220:	42470e80 	.word	0x42470e80
 8004224:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004228:	f7fd fed8 	bl	8001fdc <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b02      	cmp	r3, #2
 8004234:	d901      	bls.n	800423a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004236:	2303      	movs	r3, #3
 8004238:	e0fd      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423a:	4b81      	ldr	r3, [pc, #516]	; (8004440 <HAL_RCC_OscConfig+0x4d4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004242:	2b00      	cmp	r3, #0
 8004244:	d0f0      	beq.n	8004228 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	689b      	ldr	r3, [r3, #8]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d106      	bne.n	800425c <HAL_RCC_OscConfig+0x2f0>
 800424e:	4b7d      	ldr	r3, [pc, #500]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004252:	4a7c      	ldr	r2, [pc, #496]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004254:	f043 0301 	orr.w	r3, r3, #1
 8004258:	6713      	str	r3, [r2, #112]	; 0x70
 800425a:	e01c      	b.n	8004296 <HAL_RCC_OscConfig+0x32a>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	2b05      	cmp	r3, #5
 8004262:	d10c      	bne.n	800427e <HAL_RCC_OscConfig+0x312>
 8004264:	4b77      	ldr	r3, [pc, #476]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004268:	4a76      	ldr	r2, [pc, #472]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 800426a:	f043 0304 	orr.w	r3, r3, #4
 800426e:	6713      	str	r3, [r2, #112]	; 0x70
 8004270:	4b74      	ldr	r3, [pc, #464]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004274:	4a73      	ldr	r2, [pc, #460]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	6713      	str	r3, [r2, #112]	; 0x70
 800427c:	e00b      	b.n	8004296 <HAL_RCC_OscConfig+0x32a>
 800427e:	4b71      	ldr	r3, [pc, #452]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a70      	ldr	r2, [pc, #448]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004284:	f023 0301 	bic.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	4b6e      	ldr	r3, [pc, #440]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a6d      	ldr	r2, [pc, #436]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004290:	f023 0304 	bic.w	r3, r3, #4
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	2b00      	cmp	r3, #0
 800429c:	d015      	beq.n	80042ca <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429e:	f7fd fe9d 	bl	8001fdc <HAL_GetTick>
 80042a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a4:	e00a      	b.n	80042bc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a6:	f7fd fe99 	bl	8001fdc <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d901      	bls.n	80042bc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e0bc      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042bc:	4b61      	ldr	r3, [pc, #388]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 80042be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ee      	beq.n	80042a6 <HAL_RCC_OscConfig+0x33a>
 80042c8:	e014      	b.n	80042f4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ca:	f7fd fe87 	bl	8001fdc <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd fe83 	bl	8001fdc <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e0a6      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042e8:	4b56      	ldr	r3, [pc, #344]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ec:	f003 0302 	and.w	r3, r3, #2
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d1ee      	bne.n	80042d2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f4:	7dfb      	ldrb	r3, [r7, #23]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d105      	bne.n	8004306 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fa:	4b52      	ldr	r3, [pc, #328]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a51      	ldr	r2, [pc, #324]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 8092 	beq.w	8004434 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004310:	4b4c      	ldr	r3, [pc, #304]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 030c 	and.w	r3, r3, #12
 8004318:	2b08      	cmp	r3, #8
 800431a:	d05c      	beq.n	80043d6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	699b      	ldr	r3, [r3, #24]
 8004320:	2b02      	cmp	r3, #2
 8004322:	d141      	bne.n	80043a8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004324:	4b48      	ldr	r3, [pc, #288]	; (8004448 <HAL_RCC_OscConfig+0x4dc>)
 8004326:	2200      	movs	r2, #0
 8004328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432a:	f7fd fe57 	bl	8001fdc <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004332:	f7fd fe53 	bl	8001fdc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d901      	bls.n	8004344 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e078      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004344:	4b3f      	ldr	r3, [pc, #252]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f0      	bne.n	8004332 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	69da      	ldr	r2, [r3, #28]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	431a      	orrs	r2, r3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800435e:	019b      	lsls	r3, r3, #6
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004366:	085b      	lsrs	r3, r3, #1
 8004368:	3b01      	subs	r3, #1
 800436a:	041b      	lsls	r3, r3, #16
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004372:	061b      	lsls	r3, r3, #24
 8004374:	4933      	ldr	r1, [pc, #204]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 8004376:	4313      	orrs	r3, r2
 8004378:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800437a:	4b33      	ldr	r3, [pc, #204]	; (8004448 <HAL_RCC_OscConfig+0x4dc>)
 800437c:	2201      	movs	r2, #1
 800437e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004380:	f7fd fe2c 	bl	8001fdc <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004388:	f7fd fe28 	bl	8001fdc <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e04d      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d0f0      	beq.n	8004388 <HAL_RCC_OscConfig+0x41c>
 80043a6:	e045      	b.n	8004434 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043a8:	4b27      	ldr	r3, [pc, #156]	; (8004448 <HAL_RCC_OscConfig+0x4dc>)
 80043aa:	2200      	movs	r2, #0
 80043ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ae:	f7fd fe15 	bl	8001fdc <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b6:	f7fd fe11 	bl	8001fdc <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e036      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c8:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1f0      	bne.n	80043b6 <HAL_RCC_OscConfig+0x44a>
 80043d4:	e02e      	b.n	8004434 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d101      	bne.n	80043e2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e029      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043e2:	4b18      	ldr	r3, [pc, #96]	; (8004444 <HAL_RCC_OscConfig+0x4d8>)
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d11c      	bne.n	8004430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004400:	429a      	cmp	r2, r3
 8004402:	d115      	bne.n	8004430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800440a:	4013      	ands	r3, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004410:	4293      	cmp	r3, r2
 8004412:	d10d      	bne.n	8004430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800441e:	429a      	cmp	r2, r3
 8004420:	d106      	bne.n	8004430 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40007000 	.word	0x40007000
 8004444:	40023800 	.word	0x40023800
 8004448:	42470060 	.word	0x42470060

0800444c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0cc      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004460:	4b68      	ldr	r3, [pc, #416]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 030f 	and.w	r3, r3, #15
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	429a      	cmp	r2, r3
 800446c:	d90c      	bls.n	8004488 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800446e:	4b65      	ldr	r3, [pc, #404]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	683a      	ldr	r2, [r7, #0]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004476:	4b63      	ldr	r3, [pc, #396]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f003 030f 	and.w	r3, r3, #15
 800447e:	683a      	ldr	r2, [r7, #0]
 8004480:	429a      	cmp	r2, r3
 8004482:	d001      	beq.n	8004488 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0b8      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f003 0302 	and.w	r3, r3, #2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0304 	and.w	r3, r3, #4
 800449c:	2b00      	cmp	r3, #0
 800449e:	d005      	beq.n	80044ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044a0:	4b59      	ldr	r3, [pc, #356]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	4a58      	ldr	r2, [pc, #352]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0308 	and.w	r3, r3, #8
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b8:	4b53      	ldr	r3, [pc, #332]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a52      	ldr	r2, [pc, #328]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044c4:	4b50      	ldr	r3, [pc, #320]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	494d      	ldr	r1, [pc, #308]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d044      	beq.n	800456c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d107      	bne.n	80044fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044ea:	4b47      	ldr	r3, [pc, #284]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d119      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e07f      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b02      	cmp	r3, #2
 8004500:	d003      	beq.n	800450a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004506:	2b03      	cmp	r3, #3
 8004508:	d107      	bne.n	800451a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b3f      	ldr	r3, [pc, #252]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d109      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e06f      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800451a:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e067      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800452a:	4b37      	ldr	r3, [pc, #220]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	f023 0203 	bic.w	r2, r3, #3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	4934      	ldr	r1, [pc, #208]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 8004538:	4313      	orrs	r3, r2
 800453a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800453c:	f7fd fd4e 	bl	8001fdc <HAL_GetTick>
 8004540:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004542:	e00a      	b.n	800455a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004544:	f7fd fd4a 	bl	8001fdc <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004552:	4293      	cmp	r3, r2
 8004554:	d901      	bls.n	800455a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004556:	2303      	movs	r3, #3
 8004558:	e04f      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	4b2b      	ldr	r3, [pc, #172]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f003 020c 	and.w	r2, r3, #12
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	009b      	lsls	r3, r3, #2
 8004568:	429a      	cmp	r2, r3
 800456a:	d1eb      	bne.n	8004544 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800456c:	4b25      	ldr	r3, [pc, #148]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	429a      	cmp	r2, r3
 8004578:	d20c      	bcs.n	8004594 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800457a:	4b22      	ldr	r3, [pc, #136]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	b2d2      	uxtb	r2, r2
 8004580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b20      	ldr	r3, [pc, #128]	; (8004604 <HAL_RCC_ClockConfig+0x1b8>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e032      	b.n	80045fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0304 	and.w	r3, r3, #4
 800459c:	2b00      	cmp	r3, #0
 800459e:	d008      	beq.n	80045b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045a0:	4b19      	ldr	r3, [pc, #100]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	4916      	ldr	r1, [pc, #88]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d009      	beq.n	80045d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045be:	4b12      	ldr	r3, [pc, #72]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	490e      	ldr	r1, [pc, #56]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045d2:	f000 f821 	bl	8004618 <HAL_RCC_GetSysClockFreq>
 80045d6:	4601      	mov	r1, r0
 80045d8:	4b0b      	ldr	r3, [pc, #44]	; (8004608 <HAL_RCC_ClockConfig+0x1bc>)
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	091b      	lsrs	r3, r3, #4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	4a0a      	ldr	r2, [pc, #40]	; (800460c <HAL_RCC_ClockConfig+0x1c0>)
 80045e4:	5cd3      	ldrb	r3, [r2, r3]
 80045e6:	fa21 f303 	lsr.w	r3, r1, r3
 80045ea:	4a09      	ldr	r2, [pc, #36]	; (8004610 <HAL_RCC_ClockConfig+0x1c4>)
 80045ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_RCC_ClockConfig+0x1c8>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fd fcae 	bl	8001f54 <HAL_InitTick>

  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40023c00 	.word	0x40023c00
 8004608:	40023800 	.word	0x40023800
 800460c:	08008dd0 	.word	0x08008dd0
 8004610:	20000020 	.word	0x20000020
 8004614:	20000024 	.word	0x20000024

08004618 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004618:	b5f0      	push	{r4, r5, r6, r7, lr}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800461e:	2300      	movs	r3, #0
 8004620:	607b      	str	r3, [r7, #4]
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
 8004626:	2300      	movs	r3, #0
 8004628:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800462a:	2300      	movs	r3, #0
 800462c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800462e:	4b50      	ldr	r3, [pc, #320]	; (8004770 <HAL_RCC_GetSysClockFreq+0x158>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 030c 	and.w	r3, r3, #12
 8004636:	2b04      	cmp	r3, #4
 8004638:	d007      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x32>
 800463a:	2b08      	cmp	r3, #8
 800463c:	d008      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x38>
 800463e:	2b00      	cmp	r3, #0
 8004640:	f040 808d 	bne.w	800475e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b4b      	ldr	r3, [pc, #300]	; (8004774 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004646:	60bb      	str	r3, [r7, #8]
       break;
 8004648:	e08c      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464a:	4b4b      	ldr	r3, [pc, #300]	; (8004778 <HAL_RCC_GetSysClockFreq+0x160>)
 800464c:	60bb      	str	r3, [r7, #8]
      break;
 800464e:	e089      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004650:	4b47      	ldr	r3, [pc, #284]	; (8004770 <HAL_RCC_GetSysClockFreq+0x158>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004658:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465a:	4b45      	ldr	r3, [pc, #276]	; (8004770 <HAL_RCC_GetSysClockFreq+0x158>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d023      	beq.n	80046ae <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004666:	4b42      	ldr	r3, [pc, #264]	; (8004770 <HAL_RCC_GetSysClockFreq+0x158>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	099b      	lsrs	r3, r3, #6
 800466c:	f04f 0400 	mov.w	r4, #0
 8004670:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004674:	f04f 0200 	mov.w	r2, #0
 8004678:	ea03 0501 	and.w	r5, r3, r1
 800467c:	ea04 0602 	and.w	r6, r4, r2
 8004680:	4a3d      	ldr	r2, [pc, #244]	; (8004778 <HAL_RCC_GetSysClockFreq+0x160>)
 8004682:	fb02 f106 	mul.w	r1, r2, r6
 8004686:	2200      	movs	r2, #0
 8004688:	fb02 f205 	mul.w	r2, r2, r5
 800468c:	440a      	add	r2, r1
 800468e:	493a      	ldr	r1, [pc, #232]	; (8004778 <HAL_RCC_GetSysClockFreq+0x160>)
 8004690:	fba5 0101 	umull	r0, r1, r5, r1
 8004694:	1853      	adds	r3, r2, r1
 8004696:	4619      	mov	r1, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f04f 0400 	mov.w	r4, #0
 800469e:	461a      	mov	r2, r3
 80046a0:	4623      	mov	r3, r4
 80046a2:	f7fc fa43 	bl	8000b2c <__aeabi_uldivmod>
 80046a6:	4603      	mov	r3, r0
 80046a8:	460c      	mov	r4, r1
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e049      	b.n	8004742 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046ae:	4b30      	ldr	r3, [pc, #192]	; (8004770 <HAL_RCC_GetSysClockFreq+0x158>)
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	099b      	lsrs	r3, r3, #6
 80046b4:	f04f 0400 	mov.w	r4, #0
 80046b8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	ea03 0501 	and.w	r5, r3, r1
 80046c4:	ea04 0602 	and.w	r6, r4, r2
 80046c8:	4629      	mov	r1, r5
 80046ca:	4632      	mov	r2, r6
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	f04f 0400 	mov.w	r4, #0
 80046d4:	0154      	lsls	r4, r2, #5
 80046d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046da:	014b      	lsls	r3, r1, #5
 80046dc:	4619      	mov	r1, r3
 80046de:	4622      	mov	r2, r4
 80046e0:	1b49      	subs	r1, r1, r5
 80046e2:	eb62 0206 	sbc.w	r2, r2, r6
 80046e6:	f04f 0300 	mov.w	r3, #0
 80046ea:	f04f 0400 	mov.w	r4, #0
 80046ee:	0194      	lsls	r4, r2, #6
 80046f0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046f4:	018b      	lsls	r3, r1, #6
 80046f6:	1a5b      	subs	r3, r3, r1
 80046f8:	eb64 0402 	sbc.w	r4, r4, r2
 80046fc:	f04f 0100 	mov.w	r1, #0
 8004700:	f04f 0200 	mov.w	r2, #0
 8004704:	00e2      	lsls	r2, r4, #3
 8004706:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800470a:	00d9      	lsls	r1, r3, #3
 800470c:	460b      	mov	r3, r1
 800470e:	4614      	mov	r4, r2
 8004710:	195b      	adds	r3, r3, r5
 8004712:	eb44 0406 	adc.w	r4, r4, r6
 8004716:	f04f 0100 	mov.w	r1, #0
 800471a:	f04f 0200 	mov.w	r2, #0
 800471e:	02a2      	lsls	r2, r4, #10
 8004720:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004724:	0299      	lsls	r1, r3, #10
 8004726:	460b      	mov	r3, r1
 8004728:	4614      	mov	r4, r2
 800472a:	4618      	mov	r0, r3
 800472c:	4621      	mov	r1, r4
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f04f 0400 	mov.w	r4, #0
 8004734:	461a      	mov	r2, r3
 8004736:	4623      	mov	r3, r4
 8004738:	f7fc f9f8 	bl	8000b2c <__aeabi_uldivmod>
 800473c:	4603      	mov	r3, r0
 800473e:	460c      	mov	r4, r1
 8004740:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004742:	4b0b      	ldr	r3, [pc, #44]	; (8004770 <HAL_RCC_GetSysClockFreq+0x158>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	0c1b      	lsrs	r3, r3, #16
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	3301      	adds	r3, #1
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004752:	68fa      	ldr	r2, [r7, #12]
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	60bb      	str	r3, [r7, #8]
      break;
 800475c:	e002      	b.n	8004764 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800475e:	4b05      	ldr	r3, [pc, #20]	; (8004774 <HAL_RCC_GetSysClockFreq+0x15c>)
 8004760:	60bb      	str	r3, [r7, #8]
      break;
 8004762:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004764:	68bb      	ldr	r3, [r7, #8]
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
 8004774:	00f42400 	.word	0x00f42400
 8004778:	018cba80 	.word	0x018cba80

0800477c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800477c:	b480      	push	{r7}
 800477e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004780:	4b03      	ldr	r3, [pc, #12]	; (8004790 <HAL_RCC_GetHCLKFreq+0x14>)
 8004782:	681b      	ldr	r3, [r3, #0]
}
 8004784:	4618      	mov	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
 800478e:	bf00      	nop
 8004790:	20000020 	.word	0x20000020

08004794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004798:	f7ff fff0 	bl	800477c <HAL_RCC_GetHCLKFreq>
 800479c:	4601      	mov	r1, r0
 800479e:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	0a9b      	lsrs	r3, r3, #10
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	4a03      	ldr	r2, [pc, #12]	; (80047b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80047aa:	5cd3      	ldrb	r3, [r2, r3]
 80047ac:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40023800 	.word	0x40023800
 80047b8:	08008de0 	.word	0x08008de0

080047bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80047c0:	f7ff ffdc 	bl	800477c <HAL_RCC_GetHCLKFreq>
 80047c4:	4601      	mov	r1, r0
 80047c6:	4b05      	ldr	r3, [pc, #20]	; (80047dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	0b5b      	lsrs	r3, r3, #13
 80047cc:	f003 0307 	and.w	r3, r3, #7
 80047d0:	4a03      	ldr	r2, [pc, #12]	; (80047e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80047d2:	5cd3      	ldrb	r3, [r2, r3]
 80047d4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80047d8:	4618      	mov	r0, r3
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	40023800 	.word	0x40023800
 80047e0:	08008de0 	.word	0x08008de0

080047e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e01d      	b.n	8004832 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fd f9bc 	bl	8001b88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	4610      	mov	r0, r2
 8004824:	f000 f9d6 	bl	8004bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004830:	2300      	movs	r3, #0
}
 8004832:	4618      	mov	r0, r3
 8004834:	3708      	adds	r7, #8
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800483a:	b480      	push	{r7}
 800483c:	b085      	sub	sp, #20
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f003 0307 	and.w	r3, r3, #7
 8004854:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b06      	cmp	r3, #6
 800485a:	d007      	beq.n	800486c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b082      	sub	sp, #8
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d101      	bne.n	8004894 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	e01d      	b.n	80048d0 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b00      	cmp	r3, #0
 800489e:	d106      	bne.n	80048ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2200      	movs	r2, #0
 80048a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fd f91f 	bl	8001aec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3304      	adds	r3, #4
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f000 f987 	bl	8004bd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b084      	sub	sp, #16
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80048ee:	2302      	movs	r3, #2
 80048f0:	e0b4      	b.n	8004a5c <HAL_TIM_PWM_ConfigChannel+0x184>
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2202      	movs	r2, #2
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2b0c      	cmp	r3, #12
 8004906:	f200 809f 	bhi.w	8004a48 <HAL_TIM_PWM_ConfigChannel+0x170>
 800490a:	a201      	add	r2, pc, #4	; (adr r2, 8004910 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800490c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004910:	08004945 	.word	0x08004945
 8004914:	08004a49 	.word	0x08004a49
 8004918:	08004a49 	.word	0x08004a49
 800491c:	08004a49 	.word	0x08004a49
 8004920:	08004985 	.word	0x08004985
 8004924:	08004a49 	.word	0x08004a49
 8004928:	08004a49 	.word	0x08004a49
 800492c:	08004a49 	.word	0x08004a49
 8004930:	080049c7 	.word	0x080049c7
 8004934:	08004a49 	.word	0x08004a49
 8004938:	08004a49 	.word	0x08004a49
 800493c:	08004a49 	.word	0x08004a49
 8004940:	08004a07 	.word	0x08004a07
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68b9      	ldr	r1, [r7, #8]
 800494a:	4618      	mov	r0, r3
 800494c:	f000 f9e2 	bl	8004d14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699a      	ldr	r2, [r3, #24]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0208 	orr.w	r2, r2, #8
 800495e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699a      	ldr	r2, [r3, #24]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0204 	bic.w	r2, r2, #4
 800496e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6999      	ldr	r1, [r3, #24]
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	691a      	ldr	r2, [r3, #16]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	619a      	str	r2, [r3, #24]
      break;
 8004982:	e062      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	4618      	mov	r0, r3
 800498c:	f000 fa32 	bl	8004df4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800499e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699a      	ldr	r2, [r3, #24]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	6999      	ldr	r1, [r3, #24]
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	691b      	ldr	r3, [r3, #16]
 80049ba:	021a      	lsls	r2, r3, #8
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	619a      	str	r2, [r3, #24]
      break;
 80049c4:	e041      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68b9      	ldr	r1, [r7, #8]
 80049cc:	4618      	mov	r0, r3
 80049ce:	f000 fa87 	bl	8004ee0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69da      	ldr	r2, [r3, #28]
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0208 	orr.w	r2, r2, #8
 80049e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	69da      	ldr	r2, [r3, #28]
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f022 0204 	bic.w	r2, r2, #4
 80049f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	69d9      	ldr	r1, [r3, #28]
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	691a      	ldr	r2, [r3, #16]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	430a      	orrs	r2, r1
 8004a02:	61da      	str	r2, [r3, #28]
      break;
 8004a04:	e021      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68b9      	ldr	r1, [r7, #8]
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 fadb 	bl	8004fc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	69da      	ldr	r2, [r3, #28]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69d9      	ldr	r1, [r3, #28]
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	021a      	lsls	r2, r3, #8
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	430a      	orrs	r2, r1
 8004a44:	61da      	str	r2, [r3, #28]
      break;
 8004a46:	e000      	b.n	8004a4a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004a48:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d101      	bne.n	8004a7c <HAL_TIM_ConfigClockSource+0x18>
 8004a78:	2302      	movs	r3, #2
 8004a7a:	e0a6      	b.n	8004bca <HAL_TIM_ConfigClockSource+0x166>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004a9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004aa2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b40      	cmp	r3, #64	; 0x40
 8004ab2:	d067      	beq.n	8004b84 <HAL_TIM_ConfigClockSource+0x120>
 8004ab4:	2b40      	cmp	r3, #64	; 0x40
 8004ab6:	d80b      	bhi.n	8004ad0 <HAL_TIM_ConfigClockSource+0x6c>
 8004ab8:	2b10      	cmp	r3, #16
 8004aba:	d073      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0x140>
 8004abc:	2b10      	cmp	r3, #16
 8004abe:	d802      	bhi.n	8004ac6 <HAL_TIM_ConfigClockSource+0x62>
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d06f      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004ac4:	e078      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ac6:	2b20      	cmp	r3, #32
 8004ac8:	d06c      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0x140>
 8004aca:	2b30      	cmp	r3, #48	; 0x30
 8004acc:	d06a      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004ace:	e073      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ad0:	2b70      	cmp	r3, #112	; 0x70
 8004ad2:	d00d      	beq.n	8004af0 <HAL_TIM_ConfigClockSource+0x8c>
 8004ad4:	2b70      	cmp	r3, #112	; 0x70
 8004ad6:	d804      	bhi.n	8004ae2 <HAL_TIM_ConfigClockSource+0x7e>
 8004ad8:	2b50      	cmp	r3, #80	; 0x50
 8004ada:	d033      	beq.n	8004b44 <HAL_TIM_ConfigClockSource+0xe0>
 8004adc:	2b60      	cmp	r3, #96	; 0x60
 8004ade:	d041      	beq.n	8004b64 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004ae0:	e06a      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	d066      	beq.n	8004bb6 <HAL_TIM_ConfigClockSource+0x152>
 8004ae8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aec:	d017      	beq.n	8004b1e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004aee:	e063      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6818      	ldr	r0, [r3, #0]
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	6899      	ldr	r1, [r3, #8]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	685a      	ldr	r2, [r3, #4]
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f000 fb32 	bl	8005168 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b12:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68fa      	ldr	r2, [r7, #12]
 8004b1a:	609a      	str	r2, [r3, #8]
      break;
 8004b1c:	e04c      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6818      	ldr	r0, [r3, #0]
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6899      	ldr	r1, [r3, #8]
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685a      	ldr	r2, [r3, #4]
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f000 fb1b 	bl	8005168 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	689a      	ldr	r2, [r3, #8]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b40:	609a      	str	r2, [r3, #8]
      break;
 8004b42:	e039      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6818      	ldr	r0, [r3, #0]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	6859      	ldr	r1, [r3, #4]
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	461a      	mov	r2, r3
 8004b52:	f000 fa8f 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2150      	movs	r1, #80	; 0x50
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f000 fae8 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004b62:	e029      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6818      	ldr	r0, [r3, #0]
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	6859      	ldr	r1, [r3, #4]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	461a      	mov	r2, r3
 8004b72:	f000 faae 	bl	80050d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2160      	movs	r1, #96	; 0x60
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fad8 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004b82:	e019      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	6859      	ldr	r1, [r3, #4]
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	461a      	mov	r2, r3
 8004b92:	f000 fa6f 	bl	8005074 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2140      	movs	r1, #64	; 0x40
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fac8 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004ba2:	e009      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f000 fabf 	bl	8005132 <TIM_ITRx_SetConfig>
      break;
 8004bb4:	e000      	b.n	8004bb8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2201      	movs	r2, #1
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004bc8:	2300      	movs	r3, #0
}
 8004bca:	4618      	mov	r0, r3
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
	...

08004bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	4a40      	ldr	r2, [pc, #256]	; (8004ce8 <TIM_Base_SetConfig+0x114>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d013      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf2:	d00f      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	4a3d      	ldr	r2, [pc, #244]	; (8004cec <TIM_Base_SetConfig+0x118>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d00b      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	4a3c      	ldr	r2, [pc, #240]	; (8004cf0 <TIM_Base_SetConfig+0x11c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d007      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	4a3b      	ldr	r2, [pc, #236]	; (8004cf4 <TIM_Base_SetConfig+0x120>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d003      	beq.n	8004c14 <TIM_Base_SetConfig+0x40>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	4a3a      	ldr	r2, [pc, #232]	; (8004cf8 <TIM_Base_SetConfig+0x124>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d108      	bne.n	8004c26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	68fa      	ldr	r2, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	4a2f      	ldr	r2, [pc, #188]	; (8004ce8 <TIM_Base_SetConfig+0x114>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d02b      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c34:	d027      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <TIM_Base_SetConfig+0x118>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d023      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	4a2b      	ldr	r2, [pc, #172]	; (8004cf0 <TIM_Base_SetConfig+0x11c>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d01f      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a2a      	ldr	r2, [pc, #168]	; (8004cf4 <TIM_Base_SetConfig+0x120>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d01b      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a29      	ldr	r2, [pc, #164]	; (8004cf8 <TIM_Base_SetConfig+0x124>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d017      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a28      	ldr	r2, [pc, #160]	; (8004cfc <TIM_Base_SetConfig+0x128>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d013      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a27      	ldr	r2, [pc, #156]	; (8004d00 <TIM_Base_SetConfig+0x12c>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d00f      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a26      	ldr	r2, [pc, #152]	; (8004d04 <TIM_Base_SetConfig+0x130>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d00b      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	4a25      	ldr	r2, [pc, #148]	; (8004d08 <TIM_Base_SetConfig+0x134>)
 8004c72:	4293      	cmp	r3, r2
 8004c74:	d007      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a24      	ldr	r2, [pc, #144]	; (8004d0c <TIM_Base_SetConfig+0x138>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d003      	beq.n	8004c86 <TIM_Base_SetConfig+0xb2>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	4a23      	ldr	r2, [pc, #140]	; (8004d10 <TIM_Base_SetConfig+0x13c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d108      	bne.n	8004c98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4313      	orrs	r3, r2
 8004c96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	4a0a      	ldr	r2, [pc, #40]	; (8004ce8 <TIM_Base_SetConfig+0x114>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d003      	beq.n	8004ccc <TIM_Base_SetConfig+0xf8>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	4a0c      	ldr	r2, [pc, #48]	; (8004cf8 <TIM_Base_SetConfig+0x124>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d103      	bne.n	8004cd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	615a      	str	r2, [r3, #20]
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	40010000 	.word	0x40010000
 8004cec:	40000400 	.word	0x40000400
 8004cf0:	40000800 	.word	0x40000800
 8004cf4:	40000c00 	.word	0x40000c00
 8004cf8:	40010400 	.word	0x40010400
 8004cfc:	40014000 	.word	0x40014000
 8004d00:	40014400 	.word	0x40014400
 8004d04:	40014800 	.word	0x40014800
 8004d08:	40001800 	.word	0x40001800
 8004d0c:	40001c00 	.word	0x40001c00
 8004d10:	40002000 	.word	0x40002000

08004d14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b087      	sub	sp, #28
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6a1b      	ldr	r3, [r3, #32]
 8004d22:	f023 0201 	bic.w	r2, r3, #1
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	699b      	ldr	r3, [r3, #24]
 8004d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f023 0303 	bic.w	r3, r3, #3
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f023 0302 	bic.w	r3, r3, #2
 8004d5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a20      	ldr	r2, [pc, #128]	; (8004dec <TIM_OC1_SetConfig+0xd8>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_OC1_SetConfig+0x64>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <TIM_OC1_SetConfig+0xdc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d10c      	bne.n	8004d92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	f023 0308 	bic.w	r3, r3, #8
 8004d7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	697a      	ldr	r2, [r7, #20]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	f023 0304 	bic.w	r3, r3, #4
 8004d90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a15      	ldr	r2, [pc, #84]	; (8004dec <TIM_OC1_SetConfig+0xd8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d003      	beq.n	8004da2 <TIM_OC1_SetConfig+0x8e>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a14      	ldr	r2, [pc, #80]	; (8004df0 <TIM_OC1_SetConfig+0xdc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d111      	bne.n	8004dc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004db0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	4313      	orrs	r3, r2
 8004dba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	621a      	str	r2, [r3, #32]
}
 8004de0:	bf00      	nop
 8004de2:	371c      	adds	r7, #28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr
 8004dec:	40010000 	.word	0x40010000
 8004df0:	40010400 	.word	0x40010400

08004df4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b087      	sub	sp, #28
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
 8004dfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a1b      	ldr	r3, [r3, #32]
 8004e02:	f023 0210 	bic.w	r2, r3, #16
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	021b      	lsls	r3, r3, #8
 8004e32:	68fa      	ldr	r2, [r7, #12]
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	f023 0320 	bic.w	r3, r3, #32
 8004e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	011b      	lsls	r3, r3, #4
 8004e46:	697a      	ldr	r2, [r7, #20]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a22      	ldr	r2, [pc, #136]	; (8004ed8 <TIM_OC2_SetConfig+0xe4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d003      	beq.n	8004e5c <TIM_OC2_SetConfig+0x68>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a21      	ldr	r2, [pc, #132]	; (8004edc <TIM_OC2_SetConfig+0xe8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d10d      	bne.n	8004e78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <TIM_OC2_SetConfig+0xe4>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_OC2_SetConfig+0x94>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a16      	ldr	r2, [pc, #88]	; (8004edc <TIM_OC2_SetConfig+0xe8>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d113      	bne.n	8004eb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	695b      	ldr	r3, [r3, #20]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	693a      	ldr	r2, [r7, #16]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	685a      	ldr	r2, [r3, #4]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	621a      	str	r2, [r3, #32]
}
 8004eca:	bf00      	nop
 8004ecc:	371c      	adds	r7, #28
 8004ece:	46bd      	mov	sp, r7
 8004ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	40010000 	.word	0x40010000
 8004edc:	40010400 	.word	0x40010400

08004ee0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b087      	sub	sp, #28
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6a1b      	ldr	r3, [r3, #32]
 8004eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6a1b      	ldr	r3, [r3, #32]
 8004efa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f023 0303 	bic.w	r3, r3, #3
 8004f16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	021b      	lsls	r3, r3, #8
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	4313      	orrs	r3, r2
 8004f34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a21      	ldr	r2, [pc, #132]	; (8004fc0 <TIM_OC3_SetConfig+0xe0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d003      	beq.n	8004f46 <TIM_OC3_SetConfig+0x66>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a20      	ldr	r2, [pc, #128]	; (8004fc4 <TIM_OC3_SetConfig+0xe4>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d10d      	bne.n	8004f62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	021b      	lsls	r3, r3, #8
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <TIM_OC3_SetConfig+0xe0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_OC3_SetConfig+0x92>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a15      	ldr	r2, [pc, #84]	; (8004fc4 <TIM_OC3_SetConfig+0xe4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d113      	bne.n	8004f9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f72:	693b      	ldr	r3, [r7, #16]
 8004f74:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	695b      	ldr	r3, [r3, #20]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	011b      	lsls	r3, r3, #4
 8004f94:	693a      	ldr	r2, [r7, #16]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	685a      	ldr	r2, [r3, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	697a      	ldr	r2, [r7, #20]
 8004fb2:	621a      	str	r2, [r3, #32]
}
 8004fb4:	bf00      	nop
 8004fb6:	371c      	adds	r7, #28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	40010000 	.word	0x40010000
 8004fc4:	40010400 	.word	0x40010400

08004fc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a1b      	ldr	r3, [r3, #32]
 8004fe2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69db      	ldr	r3, [r3, #28]
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ff6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	4313      	orrs	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005012:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	031b      	lsls	r3, r3, #12
 800501a:	693a      	ldr	r2, [r7, #16]
 800501c:	4313      	orrs	r3, r2
 800501e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	4a12      	ldr	r2, [pc, #72]	; (800506c <TIM_OC4_SetConfig+0xa4>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d003      	beq.n	8005030 <TIM_OC4_SetConfig+0x68>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a11      	ldr	r2, [pc, #68]	; (8005070 <TIM_OC4_SetConfig+0xa8>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d109      	bne.n	8005044 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005030:	697b      	ldr	r3, [r7, #20]
 8005032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	019b      	lsls	r3, r3, #6
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	68fa      	ldr	r2, [r7, #12]
 800504e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685a      	ldr	r2, [r3, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	693a      	ldr	r2, [r7, #16]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
 800506a:	bf00      	nop
 800506c:	40010000 	.word	0x40010000
 8005070:	40010400 	.word	0x40010400

08005074 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a1b      	ldr	r3, [r3, #32]
 8005084:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6a1b      	ldr	r3, [r3, #32]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	699b      	ldr	r3, [r3, #24]
 8005096:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005098:	693b      	ldr	r3, [r7, #16]
 800509a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800509e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	011b      	lsls	r3, r3, #4
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	4313      	orrs	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	f023 030a 	bic.w	r3, r3, #10
 80050b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	693a      	ldr	r2, [r7, #16]
 80050be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	697a      	ldr	r2, [r7, #20]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b087      	sub	sp, #28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6a1b      	ldr	r3, [r3, #32]
 80050e2:	f023 0210 	bic.w	r2, r3, #16
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	699b      	ldr	r3, [r3, #24]
 80050ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	031b      	lsls	r3, r3, #12
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	4313      	orrs	r3, r2
 8005106:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800510e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4313      	orrs	r3, r2
 8005118:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	697a      	ldr	r2, [r7, #20]
 800511e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005132:	b480      	push	{r7}
 8005134:	b085      	sub	sp, #20
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005148:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4313      	orrs	r3, r2
 8005150:	f043 0307 	orr.w	r3, r3, #7
 8005154:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	609a      	str	r2, [r3, #8]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr

08005168 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
 8005174:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	689b      	ldr	r3, [r3, #8]
 800517a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005182:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	021a      	lsls	r2, r3, #8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	431a      	orrs	r2, r3
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	4313      	orrs	r3, r2
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	4313      	orrs	r3, r2
 8005194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	697a      	ldr	r2, [r7, #20]
 800519a:	609a      	str	r2, [r3, #8]
}
 800519c:	bf00      	nop
 800519e:	371c      	adds	r7, #28
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d101      	bne.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051bc:	2302      	movs	r3, #2
 80051be:	e05a      	b.n	8005276 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2202      	movs	r2, #2
 80051cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4a21      	ldr	r2, [pc, #132]	; (8005284 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d022      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800520c:	d01d      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	4a1d      	ldr	r2, [pc, #116]	; (8005288 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d018      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1b      	ldr	r2, [pc, #108]	; (800528c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d013      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1a      	ldr	r2, [pc, #104]	; (8005290 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00e      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4a18      	ldr	r2, [pc, #96]	; (8005294 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d009      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	4a17      	ldr	r2, [pc, #92]	; (8005298 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800523c:	4293      	cmp	r3, r2
 800523e:	d004      	beq.n	800524a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a15      	ldr	r2, [pc, #84]	; (800529c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d10c      	bne.n	8005264 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005250:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4313      	orrs	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2201      	movs	r2, #1
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005274:	2300      	movs	r3, #0
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
 8005282:	bf00      	nop
 8005284:	40010000 	.word	0x40010000
 8005288:	40000400 	.word	0x40000400
 800528c:	40000800 	.word	0x40000800
 8005290:	40000c00 	.word	0x40000c00
 8005294:	40010400 	.word	0x40010400
 8005298:	40014000 	.word	0x40014000
 800529c:	40001800 	.word	0x40001800

080052a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b085      	sub	sp, #20
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052aa:	2300      	movs	r3, #0
 80052ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052b4:	2b01      	cmp	r3, #1
 80052b6:	d101      	bne.n	80052bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052b8:	2302      	movs	r3, #2
 80052ba:	e03d      	b.n	8005338 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2201      	movs	r2, #1
 80052c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	689b      	ldr	r3, [r3, #8]
 80052dc:	4313      	orrs	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	695b      	ldr	r3, [r3, #20]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	69db      	ldr	r3, [r3, #28]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68fa      	ldr	r2, [r7, #12]
 800532c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005336:	2300      	movs	r3, #0
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e03f      	b.n	80053d6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc fd0a 	bl	8001d84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2224      	movs	r2, #36	; 0x24
 8005374:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005386:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 f829 	bl	80053e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800539c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053bc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2220      	movs	r2, #32
 80053c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e4:	b085      	sub	sp, #20
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	691b      	ldr	r3, [r3, #16]
 80053f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68da      	ldr	r2, [r3, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	430a      	orrs	r2, r1
 80053fe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	689a      	ldr	r2, [r3, #8]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	431a      	orrs	r2, r3
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	431a      	orrs	r2, r3
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	69db      	ldr	r3, [r3, #28]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005422:	f023 030c 	bic.w	r3, r3, #12
 8005426:	687a      	ldr	r2, [r7, #4]
 8005428:	6812      	ldr	r2, [r2, #0]
 800542a:	68f9      	ldr	r1, [r7, #12]
 800542c:	430b      	orrs	r3, r1
 800542e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	695b      	ldr	r3, [r3, #20]
 8005436:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	699a      	ldr	r2, [r3, #24]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800544e:	f040 818b 	bne.w	8005768 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4ac1      	ldr	r2, [pc, #772]	; (800575c <UART_SetConfig+0x37c>)
 8005458:	4293      	cmp	r3, r2
 800545a:	d005      	beq.n	8005468 <UART_SetConfig+0x88>
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4abf      	ldr	r2, [pc, #764]	; (8005760 <UART_SetConfig+0x380>)
 8005462:	4293      	cmp	r3, r2
 8005464:	f040 80bd 	bne.w	80055e2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005468:	f7ff f9a8 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 800546c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	461d      	mov	r5, r3
 8005472:	f04f 0600 	mov.w	r6, #0
 8005476:	46a8      	mov	r8, r5
 8005478:	46b1      	mov	r9, r6
 800547a:	eb18 0308 	adds.w	r3, r8, r8
 800547e:	eb49 0409 	adc.w	r4, r9, r9
 8005482:	4698      	mov	r8, r3
 8005484:	46a1      	mov	r9, r4
 8005486:	eb18 0805 	adds.w	r8, r8, r5
 800548a:	eb49 0906 	adc.w	r9, r9, r6
 800548e:	f04f 0100 	mov.w	r1, #0
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800549a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800549e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80054a2:	4688      	mov	r8, r1
 80054a4:	4691      	mov	r9, r2
 80054a6:	eb18 0005 	adds.w	r0, r8, r5
 80054aa:	eb49 0106 	adc.w	r1, r9, r6
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	461d      	mov	r5, r3
 80054b4:	f04f 0600 	mov.w	r6, #0
 80054b8:	196b      	adds	r3, r5, r5
 80054ba:	eb46 0406 	adc.w	r4, r6, r6
 80054be:	461a      	mov	r2, r3
 80054c0:	4623      	mov	r3, r4
 80054c2:	f7fb fb33 	bl	8000b2c <__aeabi_uldivmod>
 80054c6:	4603      	mov	r3, r0
 80054c8:	460c      	mov	r4, r1
 80054ca:	461a      	mov	r2, r3
 80054cc:	4ba5      	ldr	r3, [pc, #660]	; (8005764 <UART_SetConfig+0x384>)
 80054ce:	fba3 2302 	umull	r2, r3, r3, r2
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	461d      	mov	r5, r3
 80054dc:	f04f 0600 	mov.w	r6, #0
 80054e0:	46a9      	mov	r9, r5
 80054e2:	46b2      	mov	sl, r6
 80054e4:	eb19 0309 	adds.w	r3, r9, r9
 80054e8:	eb4a 040a 	adc.w	r4, sl, sl
 80054ec:	4699      	mov	r9, r3
 80054ee:	46a2      	mov	sl, r4
 80054f0:	eb19 0905 	adds.w	r9, r9, r5
 80054f4:	eb4a 0a06 	adc.w	sl, sl, r6
 80054f8:	f04f 0100 	mov.w	r1, #0
 80054fc:	f04f 0200 	mov.w	r2, #0
 8005500:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005504:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005508:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800550c:	4689      	mov	r9, r1
 800550e:	4692      	mov	sl, r2
 8005510:	eb19 0005 	adds.w	r0, r9, r5
 8005514:	eb4a 0106 	adc.w	r1, sl, r6
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	461d      	mov	r5, r3
 800551e:	f04f 0600 	mov.w	r6, #0
 8005522:	196b      	adds	r3, r5, r5
 8005524:	eb46 0406 	adc.w	r4, r6, r6
 8005528:	461a      	mov	r2, r3
 800552a:	4623      	mov	r3, r4
 800552c:	f7fb fafe 	bl	8000b2c <__aeabi_uldivmod>
 8005530:	4603      	mov	r3, r0
 8005532:	460c      	mov	r4, r1
 8005534:	461a      	mov	r2, r3
 8005536:	4b8b      	ldr	r3, [pc, #556]	; (8005764 <UART_SetConfig+0x384>)
 8005538:	fba3 1302 	umull	r1, r3, r3, r2
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	2164      	movs	r1, #100	; 0x64
 8005540:	fb01 f303 	mul.w	r3, r1, r3
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	3332      	adds	r3, #50	; 0x32
 800554a:	4a86      	ldr	r2, [pc, #536]	; (8005764 <UART_SetConfig+0x384>)
 800554c:	fba2 2303 	umull	r2, r3, r2, r3
 8005550:	095b      	lsrs	r3, r3, #5
 8005552:	005b      	lsls	r3, r3, #1
 8005554:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005558:	4498      	add	r8, r3
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	461d      	mov	r5, r3
 800555e:	f04f 0600 	mov.w	r6, #0
 8005562:	46a9      	mov	r9, r5
 8005564:	46b2      	mov	sl, r6
 8005566:	eb19 0309 	adds.w	r3, r9, r9
 800556a:	eb4a 040a 	adc.w	r4, sl, sl
 800556e:	4699      	mov	r9, r3
 8005570:	46a2      	mov	sl, r4
 8005572:	eb19 0905 	adds.w	r9, r9, r5
 8005576:	eb4a 0a06 	adc.w	sl, sl, r6
 800557a:	f04f 0100 	mov.w	r1, #0
 800557e:	f04f 0200 	mov.w	r2, #0
 8005582:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005586:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800558a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800558e:	4689      	mov	r9, r1
 8005590:	4692      	mov	sl, r2
 8005592:	eb19 0005 	adds.w	r0, r9, r5
 8005596:	eb4a 0106 	adc.w	r1, sl, r6
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	461d      	mov	r5, r3
 80055a0:	f04f 0600 	mov.w	r6, #0
 80055a4:	196b      	adds	r3, r5, r5
 80055a6:	eb46 0406 	adc.w	r4, r6, r6
 80055aa:	461a      	mov	r2, r3
 80055ac:	4623      	mov	r3, r4
 80055ae:	f7fb fabd 	bl	8000b2c <__aeabi_uldivmod>
 80055b2:	4603      	mov	r3, r0
 80055b4:	460c      	mov	r4, r1
 80055b6:	461a      	mov	r2, r3
 80055b8:	4b6a      	ldr	r3, [pc, #424]	; (8005764 <UART_SetConfig+0x384>)
 80055ba:	fba3 1302 	umull	r1, r3, r3, r2
 80055be:	095b      	lsrs	r3, r3, #5
 80055c0:	2164      	movs	r1, #100	; 0x64
 80055c2:	fb01 f303 	mul.w	r3, r1, r3
 80055c6:	1ad3      	subs	r3, r2, r3
 80055c8:	00db      	lsls	r3, r3, #3
 80055ca:	3332      	adds	r3, #50	; 0x32
 80055cc:	4a65      	ldr	r2, [pc, #404]	; (8005764 <UART_SetConfig+0x384>)
 80055ce:	fba2 2303 	umull	r2, r3, r2, r3
 80055d2:	095b      	lsrs	r3, r3, #5
 80055d4:	f003 0207 	and.w	r2, r3, #7
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4442      	add	r2, r8
 80055de:	609a      	str	r2, [r3, #8]
 80055e0:	e26f      	b.n	8005ac2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80055e2:	f7ff f8d7 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 80055e6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e8:	68bb      	ldr	r3, [r7, #8]
 80055ea:	461d      	mov	r5, r3
 80055ec:	f04f 0600 	mov.w	r6, #0
 80055f0:	46a8      	mov	r8, r5
 80055f2:	46b1      	mov	r9, r6
 80055f4:	eb18 0308 	adds.w	r3, r8, r8
 80055f8:	eb49 0409 	adc.w	r4, r9, r9
 80055fc:	4698      	mov	r8, r3
 80055fe:	46a1      	mov	r9, r4
 8005600:	eb18 0805 	adds.w	r8, r8, r5
 8005604:	eb49 0906 	adc.w	r9, r9, r6
 8005608:	f04f 0100 	mov.w	r1, #0
 800560c:	f04f 0200 	mov.w	r2, #0
 8005610:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005614:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005618:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800561c:	4688      	mov	r8, r1
 800561e:	4691      	mov	r9, r2
 8005620:	eb18 0005 	adds.w	r0, r8, r5
 8005624:	eb49 0106 	adc.w	r1, r9, r6
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	461d      	mov	r5, r3
 800562e:	f04f 0600 	mov.w	r6, #0
 8005632:	196b      	adds	r3, r5, r5
 8005634:	eb46 0406 	adc.w	r4, r6, r6
 8005638:	461a      	mov	r2, r3
 800563a:	4623      	mov	r3, r4
 800563c:	f7fb fa76 	bl	8000b2c <__aeabi_uldivmod>
 8005640:	4603      	mov	r3, r0
 8005642:	460c      	mov	r4, r1
 8005644:	461a      	mov	r2, r3
 8005646:	4b47      	ldr	r3, [pc, #284]	; (8005764 <UART_SetConfig+0x384>)
 8005648:	fba3 2302 	umull	r2, r3, r3, r2
 800564c:	095b      	lsrs	r3, r3, #5
 800564e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	461d      	mov	r5, r3
 8005656:	f04f 0600 	mov.w	r6, #0
 800565a:	46a9      	mov	r9, r5
 800565c:	46b2      	mov	sl, r6
 800565e:	eb19 0309 	adds.w	r3, r9, r9
 8005662:	eb4a 040a 	adc.w	r4, sl, sl
 8005666:	4699      	mov	r9, r3
 8005668:	46a2      	mov	sl, r4
 800566a:	eb19 0905 	adds.w	r9, r9, r5
 800566e:	eb4a 0a06 	adc.w	sl, sl, r6
 8005672:	f04f 0100 	mov.w	r1, #0
 8005676:	f04f 0200 	mov.w	r2, #0
 800567a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800567e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005682:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005686:	4689      	mov	r9, r1
 8005688:	4692      	mov	sl, r2
 800568a:	eb19 0005 	adds.w	r0, r9, r5
 800568e:	eb4a 0106 	adc.w	r1, sl, r6
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	461d      	mov	r5, r3
 8005698:	f04f 0600 	mov.w	r6, #0
 800569c:	196b      	adds	r3, r5, r5
 800569e:	eb46 0406 	adc.w	r4, r6, r6
 80056a2:	461a      	mov	r2, r3
 80056a4:	4623      	mov	r3, r4
 80056a6:	f7fb fa41 	bl	8000b2c <__aeabi_uldivmod>
 80056aa:	4603      	mov	r3, r0
 80056ac:	460c      	mov	r4, r1
 80056ae:	461a      	mov	r2, r3
 80056b0:	4b2c      	ldr	r3, [pc, #176]	; (8005764 <UART_SetConfig+0x384>)
 80056b2:	fba3 1302 	umull	r1, r3, r3, r2
 80056b6:	095b      	lsrs	r3, r3, #5
 80056b8:	2164      	movs	r1, #100	; 0x64
 80056ba:	fb01 f303 	mul.w	r3, r1, r3
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	3332      	adds	r3, #50	; 0x32
 80056c4:	4a27      	ldr	r2, [pc, #156]	; (8005764 <UART_SetConfig+0x384>)
 80056c6:	fba2 2303 	umull	r2, r3, r2, r3
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	005b      	lsls	r3, r3, #1
 80056ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80056d2:	4498      	add	r8, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	461d      	mov	r5, r3
 80056d8:	f04f 0600 	mov.w	r6, #0
 80056dc:	46a9      	mov	r9, r5
 80056de:	46b2      	mov	sl, r6
 80056e0:	eb19 0309 	adds.w	r3, r9, r9
 80056e4:	eb4a 040a 	adc.w	r4, sl, sl
 80056e8:	4699      	mov	r9, r3
 80056ea:	46a2      	mov	sl, r4
 80056ec:	eb19 0905 	adds.w	r9, r9, r5
 80056f0:	eb4a 0a06 	adc.w	sl, sl, r6
 80056f4:	f04f 0100 	mov.w	r1, #0
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005700:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005704:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005708:	4689      	mov	r9, r1
 800570a:	4692      	mov	sl, r2
 800570c:	eb19 0005 	adds.w	r0, r9, r5
 8005710:	eb4a 0106 	adc.w	r1, sl, r6
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	461d      	mov	r5, r3
 800571a:	f04f 0600 	mov.w	r6, #0
 800571e:	196b      	adds	r3, r5, r5
 8005720:	eb46 0406 	adc.w	r4, r6, r6
 8005724:	461a      	mov	r2, r3
 8005726:	4623      	mov	r3, r4
 8005728:	f7fb fa00 	bl	8000b2c <__aeabi_uldivmod>
 800572c:	4603      	mov	r3, r0
 800572e:	460c      	mov	r4, r1
 8005730:	461a      	mov	r2, r3
 8005732:	4b0c      	ldr	r3, [pc, #48]	; (8005764 <UART_SetConfig+0x384>)
 8005734:	fba3 1302 	umull	r1, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	2164      	movs	r1, #100	; 0x64
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	00db      	lsls	r3, r3, #3
 8005744:	3332      	adds	r3, #50	; 0x32
 8005746:	4a07      	ldr	r2, [pc, #28]	; (8005764 <UART_SetConfig+0x384>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	f003 0207 	and.w	r2, r3, #7
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4442      	add	r2, r8
 8005758:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800575a:	e1b2      	b.n	8005ac2 <UART_SetConfig+0x6e2>
 800575c:	40011000 	.word	0x40011000
 8005760:	40011400 	.word	0x40011400
 8005764:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4ad7      	ldr	r2, [pc, #860]	; (8005acc <UART_SetConfig+0x6ec>)
 800576e:	4293      	cmp	r3, r2
 8005770:	d005      	beq.n	800577e <UART_SetConfig+0x39e>
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	4ad6      	ldr	r2, [pc, #856]	; (8005ad0 <UART_SetConfig+0x6f0>)
 8005778:	4293      	cmp	r3, r2
 800577a:	f040 80d1 	bne.w	8005920 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800577e:	f7ff f81d 	bl	80047bc <HAL_RCC_GetPCLK2Freq>
 8005782:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	469a      	mov	sl, r3
 8005788:	f04f 0b00 	mov.w	fp, #0
 800578c:	46d0      	mov	r8, sl
 800578e:	46d9      	mov	r9, fp
 8005790:	eb18 0308 	adds.w	r3, r8, r8
 8005794:	eb49 0409 	adc.w	r4, r9, r9
 8005798:	4698      	mov	r8, r3
 800579a:	46a1      	mov	r9, r4
 800579c:	eb18 080a 	adds.w	r8, r8, sl
 80057a0:	eb49 090b 	adc.w	r9, r9, fp
 80057a4:	f04f 0100 	mov.w	r1, #0
 80057a8:	f04f 0200 	mov.w	r2, #0
 80057ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80057b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80057b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80057b8:	4688      	mov	r8, r1
 80057ba:	4691      	mov	r9, r2
 80057bc:	eb1a 0508 	adds.w	r5, sl, r8
 80057c0:	eb4b 0609 	adc.w	r6, fp, r9
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	4619      	mov	r1, r3
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	f04f 0400 	mov.w	r4, #0
 80057d6:	0094      	lsls	r4, r2, #2
 80057d8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80057dc:	008b      	lsls	r3, r1, #2
 80057de:	461a      	mov	r2, r3
 80057e0:	4623      	mov	r3, r4
 80057e2:	4628      	mov	r0, r5
 80057e4:	4631      	mov	r1, r6
 80057e6:	f7fb f9a1 	bl	8000b2c <__aeabi_uldivmod>
 80057ea:	4603      	mov	r3, r0
 80057ec:	460c      	mov	r4, r1
 80057ee:	461a      	mov	r2, r3
 80057f0:	4bb8      	ldr	r3, [pc, #736]	; (8005ad4 <UART_SetConfig+0x6f4>)
 80057f2:	fba3 2302 	umull	r2, r3, r3, r2
 80057f6:	095b      	lsrs	r3, r3, #5
 80057f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	469b      	mov	fp, r3
 8005800:	f04f 0c00 	mov.w	ip, #0
 8005804:	46d9      	mov	r9, fp
 8005806:	46e2      	mov	sl, ip
 8005808:	eb19 0309 	adds.w	r3, r9, r9
 800580c:	eb4a 040a 	adc.w	r4, sl, sl
 8005810:	4699      	mov	r9, r3
 8005812:	46a2      	mov	sl, r4
 8005814:	eb19 090b 	adds.w	r9, r9, fp
 8005818:	eb4a 0a0c 	adc.w	sl, sl, ip
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	f04f 0200 	mov.w	r2, #0
 8005824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005828:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800582c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005830:	4689      	mov	r9, r1
 8005832:	4692      	mov	sl, r2
 8005834:	eb1b 0509 	adds.w	r5, fp, r9
 8005838:	eb4c 060a 	adc.w	r6, ip, sl
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	685b      	ldr	r3, [r3, #4]
 8005840:	4619      	mov	r1, r3
 8005842:	f04f 0200 	mov.w	r2, #0
 8005846:	f04f 0300 	mov.w	r3, #0
 800584a:	f04f 0400 	mov.w	r4, #0
 800584e:	0094      	lsls	r4, r2, #2
 8005850:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005854:	008b      	lsls	r3, r1, #2
 8005856:	461a      	mov	r2, r3
 8005858:	4623      	mov	r3, r4
 800585a:	4628      	mov	r0, r5
 800585c:	4631      	mov	r1, r6
 800585e:	f7fb f965 	bl	8000b2c <__aeabi_uldivmod>
 8005862:	4603      	mov	r3, r0
 8005864:	460c      	mov	r4, r1
 8005866:	461a      	mov	r2, r3
 8005868:	4b9a      	ldr	r3, [pc, #616]	; (8005ad4 <UART_SetConfig+0x6f4>)
 800586a:	fba3 1302 	umull	r1, r3, r3, r2
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	2164      	movs	r1, #100	; 0x64
 8005872:	fb01 f303 	mul.w	r3, r1, r3
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	011b      	lsls	r3, r3, #4
 800587a:	3332      	adds	r3, #50	; 0x32
 800587c:	4a95      	ldr	r2, [pc, #596]	; (8005ad4 <UART_SetConfig+0x6f4>)
 800587e:	fba2 2303 	umull	r2, r3, r2, r3
 8005882:	095b      	lsrs	r3, r3, #5
 8005884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005888:	4498      	add	r8, r3
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	469b      	mov	fp, r3
 800588e:	f04f 0c00 	mov.w	ip, #0
 8005892:	46d9      	mov	r9, fp
 8005894:	46e2      	mov	sl, ip
 8005896:	eb19 0309 	adds.w	r3, r9, r9
 800589a:	eb4a 040a 	adc.w	r4, sl, sl
 800589e:	4699      	mov	r9, r3
 80058a0:	46a2      	mov	sl, r4
 80058a2:	eb19 090b 	adds.w	r9, r9, fp
 80058a6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80058aa:	f04f 0100 	mov.w	r1, #0
 80058ae:	f04f 0200 	mov.w	r2, #0
 80058b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80058b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80058ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80058be:	4689      	mov	r9, r1
 80058c0:	4692      	mov	sl, r2
 80058c2:	eb1b 0509 	adds.w	r5, fp, r9
 80058c6:	eb4c 060a 	adc.w	r6, ip, sl
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	4619      	mov	r1, r3
 80058d0:	f04f 0200 	mov.w	r2, #0
 80058d4:	f04f 0300 	mov.w	r3, #0
 80058d8:	f04f 0400 	mov.w	r4, #0
 80058dc:	0094      	lsls	r4, r2, #2
 80058de:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80058e2:	008b      	lsls	r3, r1, #2
 80058e4:	461a      	mov	r2, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	4628      	mov	r0, r5
 80058ea:	4631      	mov	r1, r6
 80058ec:	f7fb f91e 	bl	8000b2c <__aeabi_uldivmod>
 80058f0:	4603      	mov	r3, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	461a      	mov	r2, r3
 80058f6:	4b77      	ldr	r3, [pc, #476]	; (8005ad4 <UART_SetConfig+0x6f4>)
 80058f8:	fba3 1302 	umull	r1, r3, r3, r2
 80058fc:	095b      	lsrs	r3, r3, #5
 80058fe:	2164      	movs	r1, #100	; 0x64
 8005900:	fb01 f303 	mul.w	r3, r1, r3
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	011b      	lsls	r3, r3, #4
 8005908:	3332      	adds	r3, #50	; 0x32
 800590a:	4a72      	ldr	r2, [pc, #456]	; (8005ad4 <UART_SetConfig+0x6f4>)
 800590c:	fba2 2303 	umull	r2, r3, r2, r3
 8005910:	095b      	lsrs	r3, r3, #5
 8005912:	f003 020f 	and.w	r2, r3, #15
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4442      	add	r2, r8
 800591c:	609a      	str	r2, [r3, #8]
 800591e:	e0d0      	b.n	8005ac2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005920:	f7fe ff38 	bl	8004794 <HAL_RCC_GetPCLK1Freq>
 8005924:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	469a      	mov	sl, r3
 800592a:	f04f 0b00 	mov.w	fp, #0
 800592e:	46d0      	mov	r8, sl
 8005930:	46d9      	mov	r9, fp
 8005932:	eb18 0308 	adds.w	r3, r8, r8
 8005936:	eb49 0409 	adc.w	r4, r9, r9
 800593a:	4698      	mov	r8, r3
 800593c:	46a1      	mov	r9, r4
 800593e:	eb18 080a 	adds.w	r8, r8, sl
 8005942:	eb49 090b 	adc.w	r9, r9, fp
 8005946:	f04f 0100 	mov.w	r1, #0
 800594a:	f04f 0200 	mov.w	r2, #0
 800594e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005952:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005956:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800595a:	4688      	mov	r8, r1
 800595c:	4691      	mov	r9, r2
 800595e:	eb1a 0508 	adds.w	r5, sl, r8
 8005962:	eb4b 0609 	adc.w	r6, fp, r9
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	4619      	mov	r1, r3
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	f04f 0400 	mov.w	r4, #0
 8005978:	0094      	lsls	r4, r2, #2
 800597a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800597e:	008b      	lsls	r3, r1, #2
 8005980:	461a      	mov	r2, r3
 8005982:	4623      	mov	r3, r4
 8005984:	4628      	mov	r0, r5
 8005986:	4631      	mov	r1, r6
 8005988:	f7fb f8d0 	bl	8000b2c <__aeabi_uldivmod>
 800598c:	4603      	mov	r3, r0
 800598e:	460c      	mov	r4, r1
 8005990:	461a      	mov	r2, r3
 8005992:	4b50      	ldr	r3, [pc, #320]	; (8005ad4 <UART_SetConfig+0x6f4>)
 8005994:	fba3 2302 	umull	r2, r3, r3, r2
 8005998:	095b      	lsrs	r3, r3, #5
 800599a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	469b      	mov	fp, r3
 80059a2:	f04f 0c00 	mov.w	ip, #0
 80059a6:	46d9      	mov	r9, fp
 80059a8:	46e2      	mov	sl, ip
 80059aa:	eb19 0309 	adds.w	r3, r9, r9
 80059ae:	eb4a 040a 	adc.w	r4, sl, sl
 80059b2:	4699      	mov	r9, r3
 80059b4:	46a2      	mov	sl, r4
 80059b6:	eb19 090b 	adds.w	r9, r9, fp
 80059ba:	eb4a 0a0c 	adc.w	sl, sl, ip
 80059be:	f04f 0100 	mov.w	r1, #0
 80059c2:	f04f 0200 	mov.w	r2, #0
 80059c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80059ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80059d2:	4689      	mov	r9, r1
 80059d4:	4692      	mov	sl, r2
 80059d6:	eb1b 0509 	adds.w	r5, fp, r9
 80059da:	eb4c 060a 	adc.w	r6, ip, sl
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	4619      	mov	r1, r3
 80059e4:	f04f 0200 	mov.w	r2, #0
 80059e8:	f04f 0300 	mov.w	r3, #0
 80059ec:	f04f 0400 	mov.w	r4, #0
 80059f0:	0094      	lsls	r4, r2, #2
 80059f2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80059f6:	008b      	lsls	r3, r1, #2
 80059f8:	461a      	mov	r2, r3
 80059fa:	4623      	mov	r3, r4
 80059fc:	4628      	mov	r0, r5
 80059fe:	4631      	mov	r1, r6
 8005a00:	f7fb f894 	bl	8000b2c <__aeabi_uldivmod>
 8005a04:	4603      	mov	r3, r0
 8005a06:	460c      	mov	r4, r1
 8005a08:	461a      	mov	r2, r3
 8005a0a:	4b32      	ldr	r3, [pc, #200]	; (8005ad4 <UART_SetConfig+0x6f4>)
 8005a0c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a10:	095b      	lsrs	r3, r3, #5
 8005a12:	2164      	movs	r1, #100	; 0x64
 8005a14:	fb01 f303 	mul.w	r3, r1, r3
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	3332      	adds	r3, #50	; 0x32
 8005a1e:	4a2d      	ldr	r2, [pc, #180]	; (8005ad4 <UART_SetConfig+0x6f4>)
 8005a20:	fba2 2303 	umull	r2, r3, r2, r3
 8005a24:	095b      	lsrs	r3, r3, #5
 8005a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a2a:	4498      	add	r8, r3
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	469b      	mov	fp, r3
 8005a30:	f04f 0c00 	mov.w	ip, #0
 8005a34:	46d9      	mov	r9, fp
 8005a36:	46e2      	mov	sl, ip
 8005a38:	eb19 0309 	adds.w	r3, r9, r9
 8005a3c:	eb4a 040a 	adc.w	r4, sl, sl
 8005a40:	4699      	mov	r9, r3
 8005a42:	46a2      	mov	sl, r4
 8005a44:	eb19 090b 	adds.w	r9, r9, fp
 8005a48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005a4c:	f04f 0100 	mov.w	r1, #0
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005a58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005a5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005a60:	4689      	mov	r9, r1
 8005a62:	4692      	mov	sl, r2
 8005a64:	eb1b 0509 	adds.w	r5, fp, r9
 8005a68:	eb4c 060a 	adc.w	r6, ip, sl
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	4619      	mov	r1, r3
 8005a72:	f04f 0200 	mov.w	r2, #0
 8005a76:	f04f 0300 	mov.w	r3, #0
 8005a7a:	f04f 0400 	mov.w	r4, #0
 8005a7e:	0094      	lsls	r4, r2, #2
 8005a80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005a84:	008b      	lsls	r3, r1, #2
 8005a86:	461a      	mov	r2, r3
 8005a88:	4623      	mov	r3, r4
 8005a8a:	4628      	mov	r0, r5
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	f7fb f84d 	bl	8000b2c <__aeabi_uldivmod>
 8005a92:	4603      	mov	r3, r0
 8005a94:	460c      	mov	r4, r1
 8005a96:	461a      	mov	r2, r3
 8005a98:	4b0e      	ldr	r3, [pc, #56]	; (8005ad4 <UART_SetConfig+0x6f4>)
 8005a9a:	fba3 1302 	umull	r1, r3, r3, r2
 8005a9e:	095b      	lsrs	r3, r3, #5
 8005aa0:	2164      	movs	r1, #100	; 0x64
 8005aa2:	fb01 f303 	mul.w	r3, r1, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	3332      	adds	r3, #50	; 0x32
 8005aac:	4a09      	ldr	r2, [pc, #36]	; (8005ad4 <UART_SetConfig+0x6f4>)
 8005aae:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab2:	095b      	lsrs	r3, r3, #5
 8005ab4:	f003 020f 	and.w	r2, r3, #15
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4442      	add	r2, r8
 8005abe:	609a      	str	r2, [r3, #8]
}
 8005ac0:	e7ff      	b.n	8005ac2 <UART_SetConfig+0x6e2>
 8005ac2:	bf00      	nop
 8005ac4:	3714      	adds	r7, #20
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005acc:	40011000 	.word	0x40011000
 8005ad0:	40011400 	.word	0x40011400
 8005ad4:	51eb851f 	.word	0x51eb851f

08005ad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad8:	b084      	sub	sp, #16
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	f107 001c 	add.w	r0, r7, #28
 8005ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d122      	bne.n	8005b36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d105      	bne.n	8005b2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f001 f884 	bl	8006c38 <USB_CoreReset>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	e01a      	b.n	8005b6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f001 f878 	bl	8006c38 <USB_CoreReset>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8005b5e:	e005      	b.n	8005b6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d10b      	bne.n	8005b8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f043 0206 	orr.w	r2, r3, #6
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b96:	b004      	add	sp, #16
 8005b98:	4770      	bx	lr

08005b9a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f043 0201 	orr.w	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	f023 0201 	bic.w	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bde:	b580      	push	{r7, lr}
 8005be0:	b082      	sub	sp, #8
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bf6:	78fb      	ldrb	r3, [r7, #3]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d106      	bne.n	8005c0a <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	60da      	str	r2, [r3, #12]
 8005c08:	e00b      	b.n	8005c22 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d106      	bne.n	8005c1e <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60da      	str	r2, [r3, #12]
 8005c1c:	e001      	b.n	8005c22 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e003      	b.n	8005c2a <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005c22:	2032      	movs	r0, #50	; 0x32
 8005c24:	f7fc f9e6 	bl	8001ff4 <HAL_Delay>

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
	...

08005c34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c34:	b084      	sub	sp, #16
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b086      	sub	sp, #24
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c4e:	2300      	movs	r3, #0
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	e009      	b.n	8005c68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3340      	adds	r3, #64	; 0x40
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	4413      	add	r3, r2
 8005c5e:	2200      	movs	r2, #0
 8005c60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	3301      	adds	r3, #1
 8005c66:	613b      	str	r3, [r7, #16]
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	2b0e      	cmp	r3, #14
 8005c6c:	d9f2      	bls.n	8005c54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d11c      	bne.n	8005cae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c82:	f043 0302 	orr.w	r3, r3, #2
 8005c86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	639a      	str	r2, [r3, #56]	; 0x38
 8005cac:	e00b      	b.n	8005cc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ccc:	461a      	mov	r2, r3
 8005cce:	2300      	movs	r3, #0
 8005cd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	4619      	mov	r1, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	680b      	ldr	r3, [r1, #0]
 8005ce4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d10c      	bne.n	8005d06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d104      	bne.n	8005cfc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005cf2:	2100      	movs	r1, #0
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 f949 	bl	8005f8c <USB_SetDevSpeed>
 8005cfa:	e008      	b.n	8005d0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cfc:	2101      	movs	r1, #1
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f944 	bl	8005f8c <USB_SetDevSpeed>
 8005d04:	e003      	b.n	8005d0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d06:	2103      	movs	r1, #3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 f93f 	bl	8005f8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d0e:	2110      	movs	r1, #16
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f8f3 	bl	8005efc <USB_FlushTxFifo>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d001      	beq.n	8005d20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f000 f911 	bl	8005f48 <USB_FlushRxFifo>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d001      	beq.n	8005d30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	461a      	mov	r2, r3
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d42:	461a      	mov	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d4e:	461a      	mov	r2, r3
 8005d50:	2300      	movs	r3, #0
 8005d52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d54:	2300      	movs	r3, #0
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	e043      	b.n	8005de2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d5a:	693b      	ldr	r3, [r7, #16]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d70:	d118      	bne.n	8005da4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10a      	bne.n	8005d8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	015a      	lsls	r2, r3, #5
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4413      	add	r3, r2
 8005d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d84:	461a      	mov	r2, r3
 8005d86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d8a:	6013      	str	r3, [r2, #0]
 8005d8c:	e013      	b.n	8005db6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d8e:	693b      	ldr	r3, [r7, #16]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005da0:	6013      	str	r3, [r2, #0]
 8005da2:	e008      	b.n	8005db6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db0:	461a      	mov	r2, r3
 8005db2:	2300      	movs	r3, #0
 8005db4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd4:	461a      	mov	r2, r3
 8005dd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	3301      	adds	r3, #1
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d3b7      	bcc.n	8005d5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dea:	2300      	movs	r3, #0
 8005dec:	613b      	str	r3, [r7, #16]
 8005dee:	e043      	b.n	8005e78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	015a      	lsls	r2, r3, #5
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4413      	add	r3, r2
 8005df8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e06:	d118      	bne.n	8005e3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e08:	693b      	ldr	r3, [r7, #16]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10a      	bne.n	8005e24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	e013      	b.n	8005e4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e30:	461a      	mov	r2, r3
 8005e32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e36:	6013      	str	r3, [r2, #0]
 8005e38:	e008      	b.n	8005e4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	015a      	lsls	r2, r3, #5
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	4413      	add	r3, r2
 8005e42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e46:	461a      	mov	r2, r3
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	015a      	lsls	r2, r3, #5
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	4413      	add	r3, r2
 8005e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e58:	461a      	mov	r2, r3
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	3301      	adds	r3, #1
 8005e76:	613b      	str	r3, [r7, #16]
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d3b7      	bcc.n	8005df0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	68fa      	ldr	r2, [r7, #12]
 8005e8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ea0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d105      	bne.n	8005eb4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	f043 0210 	orr.w	r2, r3, #16
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699a      	ldr	r2, [r3, #24]
 8005eb8:	4b0f      	ldr	r3, [pc, #60]	; (8005ef8 <USB_DevInit+0x2c4>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d005      	beq.n	8005ed2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	f043 0208 	orr.w	r2, r3, #8
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ed2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d107      	bne.n	8005ee8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ee0:	f043 0304 	orr.w	r3, r3, #4
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005ee8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	3718      	adds	r7, #24
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ef4:	b004      	add	sp, #16
 8005ef6:	4770      	bx	lr
 8005ef8:	803c3800 	.word	0x803c3800

08005efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	019b      	lsls	r3, r3, #6
 8005f0e:	f043 0220 	orr.w	r2, r3, #32
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	60fb      	str	r3, [r7, #12]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4a09      	ldr	r2, [pc, #36]	; (8005f44 <USB_FlushTxFifo+0x48>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d901      	bls.n	8005f28 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005f24:	2303      	movs	r3, #3
 8005f26:	e006      	b.n	8005f36 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f003 0320 	and.w	r3, r3, #32
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d0f0      	beq.n	8005f16 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	00030d40 	.word	0x00030d40

08005f48 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b085      	sub	sp, #20
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005f50:	2300      	movs	r3, #0
 8005f52:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2210      	movs	r2, #16
 8005f58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	60fb      	str	r3, [r7, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4a09      	ldr	r2, [pc, #36]	; (8005f88 <USB_FlushRxFifo+0x40>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d901      	bls.n	8005f6c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005f68:	2303      	movs	r3, #3
 8005f6a:	e006      	b.n	8005f7a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	f003 0310 	and.w	r3, r3, #16
 8005f74:	2b10      	cmp	r3, #16
 8005f76:	d0f0      	beq.n	8005f5a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	00030d40 	.word	0x00030d40

08005f8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	460b      	mov	r3, r1
 8005f96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	78fb      	ldrb	r3, [r7, #3]
 8005fa6:	68f9      	ldr	r1, [r7, #12]
 8005fa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fac:	4313      	orrs	r3, r2
 8005fae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fb0:	2300      	movs	r3, #0
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3714      	adds	r7, #20
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b085      	sub	sp, #20
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	785b      	ldrb	r3, [r3, #1]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d13a      	bne.n	8006050 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe0:	69da      	ldr	r2, [r3, #28]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	f003 030f 	and.w	r3, r3, #15
 8005fea:	2101      	movs	r1, #1
 8005fec:	fa01 f303 	lsl.w	r3, r1, r3
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d155      	bne.n	80060be <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	015a      	lsls	r2, r3, #5
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	78db      	ldrb	r3, [r3, #3]
 800602c:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800602e:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	059b      	lsls	r3, r3, #22
 8006034:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006036:	4313      	orrs	r3, r2
 8006038:	68ba      	ldr	r2, [r7, #8]
 800603a:	0151      	lsls	r1, r2, #5
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	440a      	add	r2, r1
 8006040:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006048:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e036      	b.n	80060be <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	f003 030f 	and.w	r3, r3, #15
 8006060:	2101      	movs	r1, #1
 8006062:	fa01 f303 	lsl.w	r3, r1, r3
 8006066:	041b      	lsls	r3, r3, #16
 8006068:	68f9      	ldr	r1, [r7, #12]
 800606a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800606e:	4313      	orrs	r3, r2
 8006070:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	015a      	lsls	r2, r3, #5
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4413      	add	r3, r2
 800607a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d11a      	bne.n	80060be <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	689b      	ldr	r3, [r3, #8]
 800609a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800609e:	683b      	ldr	r3, [r7, #0]
 80060a0:	78db      	ldrb	r3, [r3, #3]
 80060a2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80060a4:	430b      	orrs	r3, r1
 80060a6:	4313      	orrs	r3, r2
 80060a8:	68ba      	ldr	r2, [r7, #8]
 80060aa:	0151      	lsls	r1, r2, #5
 80060ac:	68fa      	ldr	r2, [r7, #12]
 80060ae:	440a      	add	r2, r1
 80060b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060bc:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3714      	adds	r7, #20
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr

080060cc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	785b      	ldrb	r3, [r3, #1]
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d161      	bne.n	80061ac <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060fe:	d11f      	bne.n	8006140 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800611a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800611e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	68ba      	ldr	r2, [r7, #8]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	68fa      	ldr	r2, [r7, #12]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800613a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800613e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	781b      	ldrb	r3, [r3, #0]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	2101      	movs	r1, #1
 8006152:	fa01 f303 	lsl.w	r3, r1, r3
 8006156:	b29b      	uxth	r3, r3
 8006158:	43db      	mvns	r3, r3
 800615a:	68f9      	ldr	r1, [r7, #12]
 800615c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006160:	4013      	ands	r3, r2
 8006162:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	781b      	ldrb	r3, [r3, #0]
 8006170:	f003 030f 	and.w	r3, r3, #15
 8006174:	2101      	movs	r1, #1
 8006176:	fa01 f303 	lsl.w	r3, r1, r3
 800617a:	b29b      	uxth	r3, r3
 800617c:	43db      	mvns	r3, r3
 800617e:	68f9      	ldr	r1, [r7, #12]
 8006180:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006184:	4013      	ands	r3, r2
 8006186:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006188:	68bb      	ldr	r3, [r7, #8]
 800618a:	015a      	lsls	r2, r3, #5
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4413      	add	r3, r2
 8006190:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	0159      	lsls	r1, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	440b      	add	r3, r1
 800619e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a2:	4619      	mov	r1, r3
 80061a4:	4b35      	ldr	r3, [pc, #212]	; (800627c <USB_DeactivateEndpoint+0x1b0>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	600b      	str	r3, [r1, #0]
 80061aa:	e060      	b.n	800626e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061c2:	d11f      	bne.n	8006204 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	015a      	lsls	r2, r3, #5
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	0151      	lsls	r1, r2, #5
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	440a      	add	r2, r1
 80061da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80061e2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	015a      	lsls	r2, r3, #5
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	4413      	add	r3, r2
 80061ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	0151      	lsls	r1, r2, #5
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	440a      	add	r2, r1
 80061fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061fe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006202:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	781b      	ldrb	r3, [r3, #0]
 8006210:	f003 030f 	and.w	r3, r3, #15
 8006214:	2101      	movs	r1, #1
 8006216:	fa01 f303 	lsl.w	r3, r1, r3
 800621a:	041b      	lsls	r3, r3, #16
 800621c:	43db      	mvns	r3, r3
 800621e:	68f9      	ldr	r1, [r7, #12]
 8006220:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006224:	4013      	ands	r3, r2
 8006226:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800622e:	69da      	ldr	r2, [r3, #28]
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	f003 030f 	and.w	r3, r3, #15
 8006238:	2101      	movs	r1, #1
 800623a:	fa01 f303 	lsl.w	r3, r1, r3
 800623e:	041b      	lsls	r3, r3, #16
 8006240:	43db      	mvns	r3, r3
 8006242:	68f9      	ldr	r1, [r7, #12]
 8006244:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006248:	4013      	ands	r3, r2
 800624a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	015a      	lsls	r2, r3, #5
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	0159      	lsls	r1, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	440b      	add	r3, r1
 8006262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006266:	4619      	mov	r1, r3
 8006268:	4b05      	ldr	r3, [pc, #20]	; (8006280 <USB_DeactivateEndpoint+0x1b4>)
 800626a:	4013      	ands	r3, r2
 800626c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800626e:	2300      	movs	r3, #0
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	ec337800 	.word	0xec337800
 8006280:	eff37800 	.word	0xeff37800

08006284 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b08a      	sub	sp, #40	; 0x28
 8006288:	af02      	add	r7, sp, #8
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	4613      	mov	r3, r2
 8006290:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006296:	68bb      	ldr	r3, [r7, #8]
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800629c:	68bb      	ldr	r3, [r7, #8]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	f040 815c 	bne.w	800655e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	695b      	ldr	r3, [r3, #20]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d132      	bne.n	8006314 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	015a      	lsls	r2, r3, #5
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	4413      	add	r3, r2
 80062da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	0151      	lsls	r1, r2, #5
 80062e4:	69fa      	ldr	r2, [r7, #28]
 80062e6:	440a      	add	r2, r1
 80062e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80062f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fe:	691b      	ldr	r3, [r3, #16]
 8006300:	69ba      	ldr	r2, [r7, #24]
 8006302:	0151      	lsls	r1, r2, #5
 8006304:	69fa      	ldr	r2, [r7, #28]
 8006306:	440a      	add	r2, r1
 8006308:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800630c:	0cdb      	lsrs	r3, r3, #19
 800630e:	04db      	lsls	r3, r3, #19
 8006310:	6113      	str	r3, [r2, #16]
 8006312:	e074      	b.n	80063fe <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006314:	69bb      	ldr	r3, [r7, #24]
 8006316:	015a      	lsls	r2, r3, #5
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	4413      	add	r3, r2
 800631c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	0151      	lsls	r1, r2, #5
 8006326:	69fa      	ldr	r2, [r7, #28]
 8006328:	440a      	add	r2, r1
 800632a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800632e:	0cdb      	lsrs	r3, r3, #19
 8006330:	04db      	lsls	r3, r3, #19
 8006332:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69fb      	ldr	r3, [r7, #28]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006340:	691b      	ldr	r3, [r3, #16]
 8006342:	69ba      	ldr	r2, [r7, #24]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	69fa      	ldr	r2, [r7, #28]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800634e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006352:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006356:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	015a      	lsls	r2, r3, #5
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	4413      	add	r3, r2
 8006360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006364:	691a      	ldr	r2, [r3, #16]
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6959      	ldr	r1, [r3, #20]
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	440b      	add	r3, r1
 8006370:	1e59      	subs	r1, r3, #1
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	fbb1 f3f3 	udiv	r3, r1, r3
 800637a:	04d9      	lsls	r1, r3, #19
 800637c:	4b9d      	ldr	r3, [pc, #628]	; (80065f4 <USB_EPStartXfer+0x370>)
 800637e:	400b      	ands	r3, r1
 8006380:	69b9      	ldr	r1, [r7, #24]
 8006382:	0148      	lsls	r0, r1, #5
 8006384:	69f9      	ldr	r1, [r7, #28]
 8006386:	4401      	add	r1, r0
 8006388:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800638c:	4313      	orrs	r3, r2
 800638e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	691a      	ldr	r2, [r3, #16]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	695b      	ldr	r3, [r3, #20]
 80063a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063a6:	69b9      	ldr	r1, [r7, #24]
 80063a8:	0148      	lsls	r0, r1, #5
 80063aa:	69f9      	ldr	r1, [r7, #28]
 80063ac:	4401      	add	r1, r0
 80063ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80063b2:	4313      	orrs	r3, r2
 80063b4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	78db      	ldrb	r3, [r3, #3]
 80063ba:	2b01      	cmp	r3, #1
 80063bc:	d11f      	bne.n	80063fe <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	69ba      	ldr	r2, [r7, #24]
 80063ce:	0151      	lsls	r1, r2, #5
 80063d0:	69fa      	ldr	r2, [r7, #28]
 80063d2:	440a      	add	r2, r1
 80063d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063d8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80063dc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	015a      	lsls	r2, r3, #5
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	4413      	add	r3, r2
 80063e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063ea:	691b      	ldr	r3, [r3, #16]
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	0151      	lsls	r1, r2, #5
 80063f0:	69fa      	ldr	r2, [r7, #28]
 80063f2:	440a      	add	r2, r1
 80063f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063fc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80063fe:	79fb      	ldrb	r3, [r7, #7]
 8006400:	2b01      	cmp	r3, #1
 8006402:	d14b      	bne.n	800649c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d009      	beq.n	8006420 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69fb      	ldr	r3, [r7, #28]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006418:	461a      	mov	r2, r3
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	78db      	ldrb	r3, [r3, #3]
 8006424:	2b01      	cmp	r3, #1
 8006426:	d128      	bne.n	800647a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d110      	bne.n	800645a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	015a      	lsls	r2, r3, #5
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	4413      	add	r3, r2
 8006440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	0151      	lsls	r1, r2, #5
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	440a      	add	r2, r1
 800644e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006452:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006456:	6013      	str	r3, [r2, #0]
 8006458:	e00f      	b.n	800647a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800645a:	69bb      	ldr	r3, [r7, #24]
 800645c:	015a      	lsls	r2, r3, #5
 800645e:	69fb      	ldr	r3, [r7, #28]
 8006460:	4413      	add	r3, r2
 8006462:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	0151      	lsls	r1, r2, #5
 800646c:	69fa      	ldr	r2, [r7, #28]
 800646e:	440a      	add	r2, r1
 8006470:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006478:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006498:	6013      	str	r3, [r2, #0]
 800649a:	e12f      	b.n	80066fc <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800649c:	69bb      	ldr	r3, [r7, #24]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	69fb      	ldr	r3, [r7, #28]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	69ba      	ldr	r2, [r7, #24]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	69fa      	ldr	r2, [r7, #28]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80064ba:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	78db      	ldrb	r3, [r3, #3]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d015      	beq.n	80064f0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	695b      	ldr	r3, [r3, #20]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 8117 	beq.w	80066fc <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	2101      	movs	r1, #1
 80064e0:	fa01 f303 	lsl.w	r3, r1, r3
 80064e4:	69f9      	ldr	r1, [r7, #28]
 80064e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064ea:	4313      	orrs	r3, r2
 80064ec:	634b      	str	r3, [r1, #52]	; 0x34
 80064ee:	e105      	b.n	80066fc <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064f0:	69fb      	ldr	r3, [r7, #28]
 80064f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d110      	bne.n	8006522 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	015a      	lsls	r2, r3, #5
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	4413      	add	r3, r2
 8006508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	0151      	lsls	r1, r2, #5
 8006512:	69fa      	ldr	r2, [r7, #28]
 8006514:	440a      	add	r2, r1
 8006516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800651a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800651e:	6013      	str	r3, [r2, #0]
 8006520:	e00f      	b.n	8006542 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006522:	69bb      	ldr	r3, [r7, #24]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	0151      	lsls	r1, r2, #5
 8006534:	69fa      	ldr	r2, [r7, #28]
 8006536:	440a      	add	r2, r1
 8006538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800653c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006540:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	68d9      	ldr	r1, [r3, #12]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	781a      	ldrb	r2, [r3, #0]
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	b298      	uxth	r0, r3
 8006550:	79fb      	ldrb	r3, [r7, #7]
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	4603      	mov	r3, r0
 8006556:	68f8      	ldr	r0, [r7, #12]
 8006558:	f000 fa2b 	bl	80069b2 <USB_WritePacket>
 800655c:	e0ce      	b.n	80066fc <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	015a      	lsls	r2, r3, #5
 8006562:	69fb      	ldr	r3, [r7, #28]
 8006564:	4413      	add	r3, r2
 8006566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656a:	691b      	ldr	r3, [r3, #16]
 800656c:	69ba      	ldr	r2, [r7, #24]
 800656e:	0151      	lsls	r1, r2, #5
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	440a      	add	r2, r1
 8006574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006578:	0cdb      	lsrs	r3, r3, #19
 800657a:	04db      	lsls	r3, r3, #19
 800657c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	015a      	lsls	r2, r3, #5
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	4413      	add	r3, r2
 8006586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	69ba      	ldr	r2, [r7, #24]
 800658e:	0151      	lsls	r1, r2, #5
 8006590:	69fa      	ldr	r2, [r7, #28]
 8006592:	440a      	add	r2, r1
 8006594:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006598:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800659c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80065a0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	695b      	ldr	r3, [r3, #20]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d126      	bne.n	80065f8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	015a      	lsls	r2, r3, #5
 80065ae:	69fb      	ldr	r3, [r7, #28]
 80065b0:	4413      	add	r3, r2
 80065b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b6:	691a      	ldr	r2, [r3, #16]
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	689b      	ldr	r3, [r3, #8]
 80065bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c0:	69b9      	ldr	r1, [r7, #24]
 80065c2:	0148      	lsls	r0, r1, #5
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	4401      	add	r1, r0
 80065c8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065cc:	4313      	orrs	r3, r2
 80065ce:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	015a      	lsls	r2, r3, #5
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	4413      	add	r3, r2
 80065d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	0151      	lsls	r1, r2, #5
 80065e2:	69fa      	ldr	r2, [r7, #28]
 80065e4:	440a      	add	r2, r1
 80065e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065ee:	6113      	str	r3, [r2, #16]
 80065f0:	e036      	b.n	8006660 <USB_EPStartXfer+0x3dc>
 80065f2:	bf00      	nop
 80065f4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	695a      	ldr	r2, [r3, #20]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	4413      	add	r3, r2
 8006602:	1e5a      	subs	r2, r3, #1
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	689b      	ldr	r3, [r3, #8]
 8006608:	fbb2 f3f3 	udiv	r3, r2, r3
 800660c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	69fb      	ldr	r3, [r7, #28]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800661a:	691a      	ldr	r2, [r3, #16]
 800661c:	8afb      	ldrh	r3, [r7, #22]
 800661e:	04d9      	lsls	r1, r3, #19
 8006620:	4b39      	ldr	r3, [pc, #228]	; (8006708 <USB_EPStartXfer+0x484>)
 8006622:	400b      	ands	r3, r1
 8006624:	69b9      	ldr	r1, [r7, #24]
 8006626:	0148      	lsls	r0, r1, #5
 8006628:	69f9      	ldr	r1, [r7, #28]
 800662a:	4401      	add	r1, r0
 800662c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006630:	4313      	orrs	r3, r2
 8006632:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	691a      	ldr	r2, [r3, #16]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	8af9      	ldrh	r1, [r7, #22]
 8006648:	fb01 f303 	mul.w	r3, r1, r3
 800664c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006650:	69b9      	ldr	r1, [r7, #24]
 8006652:	0148      	lsls	r0, r1, #5
 8006654:	69f9      	ldr	r1, [r7, #28]
 8006656:	4401      	add	r1, r0
 8006658:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800665c:	4313      	orrs	r3, r2
 800665e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006660:	79fb      	ldrb	r3, [r7, #7]
 8006662:	2b01      	cmp	r3, #1
 8006664:	d10d      	bne.n	8006682 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d009      	beq.n	8006682 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	68d9      	ldr	r1, [r3, #12]
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	69fb      	ldr	r3, [r7, #28]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800667e:	460a      	mov	r2, r1
 8006680:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	78db      	ldrb	r3, [r3, #3]
 8006686:	2b01      	cmp	r3, #1
 8006688:	d128      	bne.n	80066dc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800668a:	69fb      	ldr	r3, [r7, #28]
 800668c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006696:	2b00      	cmp	r3, #0
 8006698:	d110      	bne.n	80066bc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800669a:	69bb      	ldr	r3, [r7, #24]
 800669c:	015a      	lsls	r2, r3, #5
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	4413      	add	r3, r2
 80066a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	0151      	lsls	r1, r2, #5
 80066ac:	69fa      	ldr	r2, [r7, #28]
 80066ae:	440a      	add	r2, r1
 80066b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80066b8:	6013      	str	r3, [r2, #0]
 80066ba:	e00f      	b.n	80066dc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	015a      	lsls	r2, r3, #5
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	4413      	add	r3, r2
 80066c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	0151      	lsls	r1, r2, #5
 80066ce:	69fa      	ldr	r2, [r7, #28]
 80066d0:	440a      	add	r2, r1
 80066d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066da:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80066dc:	69bb      	ldr	r3, [r7, #24]
 80066de:	015a      	lsls	r2, r3, #5
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	4413      	add	r3, r2
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	69ba      	ldr	r2, [r7, #24]
 80066ec:	0151      	lsls	r1, r2, #5
 80066ee:	69fa      	ldr	r2, [r7, #28]
 80066f0:	440a      	add	r2, r1
 80066f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80066fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80066fc:	2300      	movs	r3, #0
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	1ff80000 	.word	0x1ff80000

0800670c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800670c:	b480      	push	{r7}
 800670e:	b087      	sub	sp, #28
 8006710:	af00      	add	r7, sp, #0
 8006712:	60f8      	str	r0, [r7, #12]
 8006714:	60b9      	str	r1, [r7, #8]
 8006716:	4613      	mov	r3, r2
 8006718:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006724:	68bb      	ldr	r3, [r7, #8]
 8006726:	785b      	ldrb	r3, [r3, #1]
 8006728:	2b01      	cmp	r3, #1
 800672a:	f040 80cd 	bne.w	80068c8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d132      	bne.n	800679c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	015a      	lsls	r2, r3, #5
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	4413      	add	r3, r2
 800673e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	693a      	ldr	r2, [r7, #16]
 8006746:	0151      	lsls	r1, r2, #5
 8006748:	697a      	ldr	r2, [r7, #20]
 800674a:	440a      	add	r2, r1
 800674c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006750:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006754:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006758:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	4413      	add	r3, r2
 8006762:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	693a      	ldr	r2, [r7, #16]
 800676a:	0151      	lsls	r1, r2, #5
 800676c:	697a      	ldr	r2, [r7, #20]
 800676e:	440a      	add	r2, r1
 8006770:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006778:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	693a      	ldr	r2, [r7, #16]
 800678a:	0151      	lsls	r1, r2, #5
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	440a      	add	r2, r1
 8006790:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006794:	0cdb      	lsrs	r3, r3, #19
 8006796:	04db      	lsls	r3, r3, #19
 8006798:	6113      	str	r3, [r2, #16]
 800679a:	e04e      	b.n	800683a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	015a      	lsls	r2, r3, #5
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	0151      	lsls	r1, r2, #5
 80067ae:	697a      	ldr	r2, [r7, #20]
 80067b0:	440a      	add	r2, r1
 80067b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067b6:	0cdb      	lsrs	r3, r3, #19
 80067b8:	04db      	lsls	r3, r3, #19
 80067ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	693a      	ldr	r2, [r7, #16]
 80067cc:	0151      	lsls	r1, r2, #5
 80067ce:	697a      	ldr	r2, [r7, #20]
 80067d0:	440a      	add	r2, r1
 80067d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067da:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067de:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	695a      	ldr	r2, [r3, #20]
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d903      	bls.n	80067f4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	689a      	ldr	r2, [r3, #8]
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006800:	691b      	ldr	r3, [r3, #16]
 8006802:	693a      	ldr	r2, [r7, #16]
 8006804:	0151      	lsls	r1, r2, #5
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	440a      	add	r2, r1
 800680a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006812:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	015a      	lsls	r2, r3, #5
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	4413      	add	r3, r2
 800681c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006820:	691a      	ldr	r2, [r3, #16]
 8006822:	68bb      	ldr	r3, [r7, #8]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800682a:	6939      	ldr	r1, [r7, #16]
 800682c:	0148      	lsls	r0, r1, #5
 800682e:	6979      	ldr	r1, [r7, #20]
 8006830:	4401      	add	r1, r0
 8006832:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006836:	4313      	orrs	r3, r2
 8006838:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d11e      	bne.n	800687e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	691b      	ldr	r3, [r3, #16]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d009      	beq.n	800685c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006848:	693b      	ldr	r3, [r7, #16]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006854:	461a      	mov	r2, r3
 8006856:	68bb      	ldr	r3, [r7, #8]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	015a      	lsls	r2, r3, #5
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4413      	add	r3, r2
 8006864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	693a      	ldr	r2, [r7, #16]
 800686c:	0151      	lsls	r1, r2, #5
 800686e:	697a      	ldr	r2, [r7, #20]
 8006870:	440a      	add	r2, r1
 8006872:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006876:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	e092      	b.n	80069a4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	015a      	lsls	r2, r3, #5
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	4413      	add	r3, r2
 8006886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	693a      	ldr	r2, [r7, #16]
 800688e:	0151      	lsls	r1, r2, #5
 8006890:	697a      	ldr	r2, [r7, #20]
 8006892:	440a      	add	r2, r1
 8006894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006898:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800689c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d07e      	beq.n	80069a4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80068a6:	697b      	ldr	r3, [r7, #20]
 80068a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	2101      	movs	r1, #1
 80068b8:	fa01 f303 	lsl.w	r3, r1, r3
 80068bc:	6979      	ldr	r1, [r7, #20]
 80068be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80068c2:	4313      	orrs	r3, r2
 80068c4:	634b      	str	r3, [r1, #52]	; 0x34
 80068c6:	e06d      	b.n	80069a4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d4:	691b      	ldr	r3, [r3, #16]
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	697a      	ldr	r2, [r7, #20]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068e2:	0cdb      	lsrs	r3, r3, #19
 80068e4:	04db      	lsls	r3, r3, #19
 80068e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006902:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006906:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800690a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	695b      	ldr	r3, [r3, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d003      	beq.n	800691c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006928:	691b      	ldr	r3, [r3, #16]
 800692a:	693a      	ldr	r2, [r7, #16]
 800692c:	0151      	lsls	r1, r2, #5
 800692e:	697a      	ldr	r2, [r7, #20]
 8006930:	440a      	add	r2, r1
 8006932:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006936:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800693a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	015a      	lsls	r2, r3, #5
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	4413      	add	r3, r2
 8006944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006948:	691a      	ldr	r2, [r3, #16]
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006952:	6939      	ldr	r1, [r7, #16]
 8006954:	0148      	lsls	r0, r1, #5
 8006956:	6979      	ldr	r1, [r7, #20]
 8006958:	4401      	add	r1, r0
 800695a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800695e:	4313      	orrs	r3, r2
 8006960:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006962:	79fb      	ldrb	r3, [r7, #7]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d10d      	bne.n	8006984 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d009      	beq.n	8006984 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	68d9      	ldr	r1, [r3, #12]
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	015a      	lsls	r2, r3, #5
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	4413      	add	r3, r2
 800697c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006980:	460a      	mov	r2, r1
 8006982:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	693a      	ldr	r2, [r7, #16]
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80069a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	371c      	adds	r7, #28
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069b2:	b480      	push	{r7}
 80069b4:	b089      	sub	sp, #36	; 0x24
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	4611      	mov	r1, r2
 80069be:	461a      	mov	r2, r3
 80069c0:	460b      	mov	r3, r1
 80069c2:	71fb      	strb	r3, [r7, #7]
 80069c4:	4613      	mov	r3, r2
 80069c6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 80069d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d11a      	bne.n	8006a0e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069d8:	88bb      	ldrh	r3, [r7, #4]
 80069da:	3303      	adds	r3, #3
 80069dc:	089b      	lsrs	r3, r3, #2
 80069de:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069e0:	2300      	movs	r3, #0
 80069e2:	61bb      	str	r3, [r7, #24]
 80069e4:	e00f      	b.n	8006a06 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069e6:	79fb      	ldrb	r3, [r7, #7]
 80069e8:	031a      	lsls	r2, r3, #12
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069f2:	461a      	mov	r2, r3
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	6013      	str	r3, [r2, #0]
      pSrc++;
 80069fa:	69fb      	ldr	r3, [r7, #28]
 80069fc:	3304      	adds	r3, #4
 80069fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	3301      	adds	r3, #1
 8006a04:	61bb      	str	r3, [r7, #24]
 8006a06:	69ba      	ldr	r2, [r7, #24]
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d3eb      	bcc.n	80069e6 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3724      	adds	r7, #36	; 0x24
 8006a14:	46bd      	mov	sp, r7
 8006a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1a:	4770      	bx	lr

08006a1c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006a1c:	b480      	push	{r7}
 8006a1e:	b085      	sub	sp, #20
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
 8006a24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	785b      	ldrb	r3, [r3, #1]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d12c      	bne.n	8006a92 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	4413      	add	r3, r2
 8006a40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	db12      	blt.n	8006a70 <USB_EPSetStall+0x54>
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00f      	beq.n	8006a70 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	015a      	lsls	r2, r3, #5
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	4413      	add	r3, r2
 8006a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	68ba      	ldr	r2, [r7, #8]
 8006a60:	0151      	lsls	r1, r2, #5
 8006a62:	68fa      	ldr	r2, [r7, #12]
 8006a64:	440a      	add	r2, r1
 8006a66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a6e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	015a      	lsls	r2, r3, #5
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	4413      	add	r3, r2
 8006a78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68ba      	ldr	r2, [r7, #8]
 8006a80:	0151      	lsls	r1, r2, #5
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	440a      	add	r2, r1
 8006a86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	e02b      	b.n	8006aea <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a92:	68bb      	ldr	r3, [r7, #8]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	db12      	blt.n	8006aca <USB_EPSetStall+0xae>
 8006aa4:	68bb      	ldr	r3, [r7, #8]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00f      	beq.n	8006aca <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	015a      	lsls	r2, r3, #5
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4413      	add	r3, r2
 8006ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	0151      	lsls	r1, r2, #5
 8006abc:	68fa      	ldr	r2, [r7, #12]
 8006abe:	440a      	add	r2, r1
 8006ac0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ac4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006ac8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	015a      	lsls	r2, r3, #5
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	0151      	lsls	r1, r2, #5
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	440a      	add	r2, r1
 8006ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ae4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ae8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aea:	2300      	movs	r3, #0
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b12:	f023 0303 	bic.w	r3, r3, #3
 8006b16:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b1e:	685b      	ldr	r3, [r3, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b26:	f023 0302 	bic.w	r3, r3, #2
 8006b2a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3714      	adds	r7, #20
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr

08006b3a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006b3a:	b480      	push	{r7}
 8006b3c:	b085      	sub	sp, #20
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b54:	f023 0303 	bic.w	r3, r3, #3
 8006b58:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b68:	f043 0302 	orr.w	r3, r3, #2
 8006b6c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	460b      	mov	r3, r1
 8006b86:	607a      	str	r2, [r7, #4]
 8006b88:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	333c      	adds	r3, #60	; 0x3c
 8006b92:	3304      	adds	r3, #4
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	4a26      	ldr	r2, [pc, #152]	; (8006c34 <USB_EP0_OutStart+0xb8>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d90a      	bls.n	8006bb6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bb0:	d101      	bne.n	8006bb6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	e037      	b.n	8006c26 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	697a      	ldr	r2, [r7, #20]
 8006bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006bd4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	697a      	ldr	r2, [r7, #20]
 8006be0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006be4:	f043 0318 	orr.w	r3, r3, #24
 8006be8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006bea:	697b      	ldr	r3, [r7, #20]
 8006bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bf0:	691b      	ldr	r3, [r3, #16]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bf8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006bfc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006bfe:	7afb      	ldrb	r3, [r7, #11]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d10f      	bne.n	8006c24 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	697a      	ldr	r2, [r7, #20]
 8006c1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006c22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	371c      	adds	r7, #28
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c30:	4770      	bx	lr
 8006c32:	bf00      	nop
 8006c34:	4f54300a 	.word	0x4f54300a

08006c38 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b085      	sub	sp, #20
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006c40:	2300      	movs	r3, #0
 8006c42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	3301      	adds	r3, #1
 8006c48:	60fb      	str	r3, [r7, #12]
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4a13      	ldr	r2, [pc, #76]	; (8006c9c <USB_CoreReset+0x64>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d901      	bls.n	8006c56 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e01b      	b.n	8006c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	daf2      	bge.n	8006c44 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	f043 0201 	orr.w	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	4a09      	ldr	r2, [pc, #36]	; (8006c9c <USB_CoreReset+0x64>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d901      	bls.n	8006c80 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006c7c:	2303      	movs	r3, #3
 8006c7e:	e006      	b.n	8006c8e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0301 	and.w	r3, r3, #1
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d0f0      	beq.n	8006c6e <USB_CoreReset+0x36>

  return HAL_OK;
 8006c8c:	2300      	movs	r3, #0
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3714      	adds	r7, #20
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	00030d40 	.word	0x00030d40

08006ca0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b084      	sub	sp, #16
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	460b      	mov	r3, r1
 8006caa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006cb0:	f000 ff78 	bl	8007ba4 <malloc>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d105      	bne.n	8006cca <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8006cc6:	2302      	movs	r3, #2
 8006cc8:	e066      	b.n	8006d98 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	68fa      	ldr	r2, [r7, #12]
 8006cce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	7c1b      	ldrb	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d119      	bne.n	8006d0e <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006cda:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cde:	2202      	movs	r2, #2
 8006ce0:	2181      	movs	r1, #129	; 0x81
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fe4f 	bl	8007986 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cf2:	2202      	movs	r2, #2
 8006cf4:	2101      	movs	r1, #1
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f000 fe45 	bl	8007986 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2201      	movs	r2, #1
 8006d00:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2210      	movs	r2, #16
 8006d08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8006d0c:	e016      	b.n	8006d3c <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	2202      	movs	r2, #2
 8006d12:	2181      	movs	r1, #129	; 0x81
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fe36 	bl	8007986 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006d20:	2340      	movs	r3, #64	; 0x40
 8006d22:	2202      	movs	r2, #2
 8006d24:	2101      	movs	r1, #1
 8006d26:	6878      	ldr	r0, [r7, #4]
 8006d28:	f000 fe2d 	bl	8007986 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	2201      	movs	r2, #1
 8006d30:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	2210      	movs	r2, #16
 8006d38:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006d3c:	2308      	movs	r3, #8
 8006d3e:	2203      	movs	r2, #3
 8006d40:	2182      	movs	r1, #130	; 0x82
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 fe1f 	bl	8007986 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	7c1b      	ldrb	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d7c:	2101      	movs	r1, #1
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 fe86 	bl	8007a90 <USBD_LL_PrepareReceive>
 8006d84:	e007      	b.n	8006d96 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d8c:	2340      	movs	r3, #64	; 0x40
 8006d8e:	2101      	movs	r1, #1
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f000 fe7d 	bl	8007a90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8006dac:	2300      	movs	r3, #0
 8006dae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006db0:	2181      	movs	r1, #129	; 0x81
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 fe0d 	bl	80079d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fe06 	bl	80079d2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006dce:	2182      	movs	r1, #130	; 0x82
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fdfe 	bl	80079d2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2200      	movs	r2, #0
 8006dda:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2200      	movs	r2, #0
 8006de2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00e      	beq.n	8006e0e <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fed7 	bl	8007bb4 <free>
    pdev->pClassData = NULL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e10:	4618      	mov	r0, r3
 8006e12:	3710      	adds	r7, #16
 8006e14:	46bd      	mov	sp, r7
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b086      	sub	sp, #24
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006e28:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d03a      	beq.n	8006eb8 <USBD_CDC_Setup+0xa0>
 8006e42:	2b20      	cmp	r3, #32
 8006e44:	f040 8097 	bne.w	8006f76 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	88db      	ldrh	r3, [r3, #6]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d029      	beq.n	8006ea4 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	b25b      	sxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	da11      	bge.n	8006e7e <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	683a      	ldr	r2, [r7, #0]
 8006e64:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8006e66:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006e68:	683a      	ldr	r2, [r7, #0]
 8006e6a:	88d2      	ldrh	r2, [r2, #6]
 8006e6c:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e6e:	6939      	ldr	r1, [r7, #16]
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	88db      	ldrh	r3, [r3, #6]
 8006e74:	461a      	mov	r2, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fabc 	bl	80073f4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8006e7c:	e082      	b.n	8006f84 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	785a      	ldrb	r2, [r3, #1]
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	88db      	ldrh	r3, [r3, #6]
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8006e94:	6939      	ldr	r1, [r7, #16]
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	88db      	ldrh	r3, [r3, #6]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fac4 	bl	800742a <USBD_CtlPrepareRx>
    break;
 8006ea2:	e06f      	b.n	8006f84 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	683a      	ldr	r2, [r7, #0]
 8006eae:	7850      	ldrb	r0, [r2, #1]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	4798      	blx	r3
    break;
 8006eb6:	e065      	b.n	8006f84 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	785b      	ldrb	r3, [r3, #1]
 8006ebc:	2b0b      	cmp	r3, #11
 8006ebe:	d84f      	bhi.n	8006f60 <USBD_CDC_Setup+0x148>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <USBD_CDC_Setup+0xb0>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006ef9 	.word	0x08006ef9
 8006ecc:	08006f6f 	.word	0x08006f6f
 8006ed0:	08006f61 	.word	0x08006f61
 8006ed4:	08006f61 	.word	0x08006f61
 8006ed8:	08006f61 	.word	0x08006f61
 8006edc:	08006f61 	.word	0x08006f61
 8006ee0:	08006f61 	.word	0x08006f61
 8006ee4:	08006f61 	.word	0x08006f61
 8006ee8:	08006f61 	.word	0x08006f61
 8006eec:	08006f61 	.word	0x08006f61
 8006ef0:	08006f21 	.word	0x08006f21
 8006ef4:	08006f49 	.word	0x08006f49
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d107      	bne.n	8006f12 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006f02:	f107 030c 	add.w	r3, r7, #12
 8006f06:	2202      	movs	r2, #2
 8006f08:	4619      	mov	r1, r3
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 fa72 	bl	80073f4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f10:	e030      	b.n	8006f74 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006f12:	6839      	ldr	r1, [r7, #0]
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	f000 f9fc 	bl	8007312 <USBD_CtlError>
        ret = USBD_FAIL;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8006f1e:	e029      	b.n	8006f74 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f26:	2b03      	cmp	r3, #3
 8006f28:	d107      	bne.n	8006f3a <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8006f2a:	f107 030f 	add.w	r3, r7, #15
 8006f2e:	2201      	movs	r2, #1
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa5e 	bl	80073f4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8006f38:	e01c      	b.n	8006f74 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8006f3a:	6839      	ldr	r1, [r7, #0]
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f9e8 	bl	8007312 <USBD_CtlError>
        ret = USBD_FAIL;
 8006f42:	2303      	movs	r3, #3
 8006f44:	75fb      	strb	r3, [r7, #23]
      break;
 8006f46:	e015      	b.n	8006f74 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d00f      	beq.n	8006f72 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 f9dc 	bl	8007312 <USBD_CtlError>
        ret = USBD_FAIL;
 8006f5a:	2303      	movs	r3, #3
 8006f5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8006f5e:	e008      	b.n	8006f72 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9d5 	bl	8007312 <USBD_CtlError>
      ret = USBD_FAIL;
 8006f68:	2303      	movs	r3, #3
 8006f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f6c:	e002      	b.n	8006f74 <USBD_CDC_Setup+0x15c>
      break;
 8006f6e:	bf00      	nop
 8006f70:	e008      	b.n	8006f84 <USBD_CDC_Setup+0x16c>
      break;
 8006f72:	bf00      	nop
    }
    break;
 8006f74:	e006      	b.n	8006f84 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8006f76:	6839      	ldr	r1, [r7, #0]
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f000 f9ca 	bl	8007312 <USBD_CtlError>
    ret = USBD_FAIL;
 8006f7e:	2303      	movs	r3, #3
 8006f80:	75fb      	strb	r3, [r7, #23]
    break;
 8006f82:	bf00      	nop
  }

  return (uint8_t)ret;
 8006f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3718      	adds	r7, #24
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop

08006f90 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fa2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d101      	bne.n	8006fb2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e049      	b.n	8007046 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006fb8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006fba:	78fa      	ldrb	r2, [r7, #3]
 8006fbc:	6879      	ldr	r1, [r7, #4]
 8006fbe:	4613      	mov	r3, r2
 8006fc0:	009b      	lsls	r3, r3, #2
 8006fc2:	4413      	add	r3, r2
 8006fc4:	009b      	lsls	r3, r3, #2
 8006fc6:	440b      	add	r3, r1
 8006fc8:	3318      	adds	r3, #24
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d029      	beq.n	8007024 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006fd0:	78fa      	ldrb	r2, [r7, #3]
 8006fd2:	6879      	ldr	r1, [r7, #4]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	3318      	adds	r3, #24
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	78f9      	ldrb	r1, [r7, #3]
 8006fe4:	68f8      	ldr	r0, [r7, #12]
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	00db      	lsls	r3, r3, #3
 8006fea:	1a5b      	subs	r3, r3, r1
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4403      	add	r3, r0
 8006ff0:	3344      	adds	r3, #68	; 0x44
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	fbb2 f1f3 	udiv	r1, r2, r3
 8006ff8:	fb03 f301 	mul.w	r3, r3, r1
 8006ffc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d110      	bne.n	8007024 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8007002:	78fa      	ldrb	r2, [r7, #3]
 8007004:	6879      	ldr	r1, [r7, #4]
 8007006:	4613      	mov	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	440b      	add	r3, r1
 8007010:	3318      	adds	r3, #24
 8007012:	2200      	movs	r2, #0
 8007014:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007016:	78f9      	ldrb	r1, [r7, #3]
 8007018:	2300      	movs	r3, #0
 800701a:	2200      	movs	r2, #0
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 fd16 	bl	8007a4e <USBD_LL_Transmit>
 8007022:	e00f      	b.n	8007044 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007040:	78fa      	ldrb	r2, [r7, #3]
 8007042:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3710      	adds	r7, #16
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b084      	sub	sp, #16
 8007052:	af00      	add	r7, sp, #0
 8007054:	6078      	str	r0, [r7, #4]
 8007056:	460b      	mov	r3, r1
 8007058:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007060:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800706c:	2303      	movs	r3, #3
 800706e:	e015      	b.n	800709c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	4619      	mov	r1, r3
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 fd2c 	bl	8007ad2 <USBD_LL_GetRxDataSize>
 800707a:	4602      	mov	r2, r0
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007088:	68db      	ldr	r3, [r3, #12]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007096:	4611      	mov	r1, r2
 8007098:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b084      	sub	sp, #16
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070b2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d015      	beq.n	80070ea <USBD_CDC_EP0_RxReady+0x46>
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80070c4:	2bff      	cmp	r3, #255	; 0xff
 80070c6:	d010      	beq.n	80070ea <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80070ce:	689b      	ldr	r3, [r3, #8]
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80070d6:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80070d8:	68fa      	ldr	r2, [r7, #12]
 80070da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80070de:	b292      	uxth	r2, r2
 80070e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	22ff      	movs	r2, #255	; 0xff
 80070e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80070ea:	2300      	movs	r3, #0
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3710      	adds	r7, #16
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2243      	movs	r2, #67	; 0x43
 8007100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8007102:	4b03      	ldr	r3, [pc, #12]	; (8007110 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007104:	4618      	mov	r0, r3
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	200000b4 	.word	0x200000b4

08007114 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2243      	movs	r2, #67	; 0x43
 8007120:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8007122:	4b03      	ldr	r3, [pc, #12]	; (8007130 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr
 8007130:	20000070 	.word	0x20000070

08007134 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007134:	b480      	push	{r7}
 8007136:	b083      	sub	sp, #12
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2243      	movs	r2, #67	; 0x43
 8007140:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8007142:	4b03      	ldr	r3, [pc, #12]	; (8007150 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007144:	4618      	mov	r0, r3
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	200000f8 	.word	0x200000f8

08007154 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	220a      	movs	r2, #10
 8007160:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007162:	4b03      	ldr	r3, [pc, #12]	; (8007170 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	2000002c 	.word	0x2000002c

08007174 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d101      	bne.n	8007188 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007184:	2303      	movs	r3, #3
 8007186:	e004      	b.n	8007192 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	683a      	ldr	r2, [r7, #0]
 800718c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	370c      	adds	r7, #12
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr

0800719e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800719e:	b480      	push	{r7}
 80071a0:	b087      	sub	sp, #28
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	60f8      	str	r0, [r7, #12]
 80071a6:	60b9      	str	r1, [r7, #8]
 80071a8:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071b0:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	68ba      	ldr	r2, [r7, #8]
 80071b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b085      	sub	sp, #20
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071e0:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	683a      	ldr	r2, [r7, #0]
 80071e6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3714      	adds	r7, #20
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	b084      	sub	sp, #16
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007206:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800720e:	2b00      	cmp	r3, #0
 8007210:	d101      	bne.n	8007216 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8007212:	2303      	movs	r3, #3
 8007214:	e016      	b.n	8007244 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	7c1b      	ldrb	r3, [r3, #16]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007224:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007228:	2101      	movs	r1, #1
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fc30 	bl	8007a90 <USBD_LL_PrepareReceive>
 8007230:	e007      	b.n	8007242 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007238:	2340      	movs	r3, #64	; 0x40
 800723a:	2101      	movs	r1, #1
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f000 fc27 	bl	8007a90 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007242:	2300      	movs	r3, #0
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}

0800724c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b086      	sub	sp, #24
 8007250:	af00      	add	r7, sp, #0
 8007252:	60f8      	str	r0, [r7, #12]
 8007254:	60b9      	str	r1, [r7, #8]
 8007256:	4613      	mov	r3, r2
 8007258:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007260:	2303      	movs	r3, #3
 8007262:	e025      	b.n	80072b0 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800726a:	2b00      	cmp	r3, #0
 800726c:	d003      	beq.n	8007276 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2200      	movs	r2, #0
 8007284:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d003      	beq.n	8007296 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2201      	movs	r2, #1
 800729a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	79fa      	ldrb	r2, [r7, #7]
 80072a2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 fb07 	bl	80078b8 <USBD_LL_Init>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75fb      	strb	r3, [r7, #23]

  return ret;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3718      	adds	r7, #24
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}

080072b8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b084      	sub	sp, #16
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e010      	b.n	80072f2 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	f107 020e 	add.w	r2, r7, #14
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	4602      	mov	r2, r0
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80072f0:	2300      	movs	r3, #0
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3710      	adds	r7, #16
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b082      	sub	sp, #8
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fb24 	bl	8007950 <USBD_LL_Start>
 8007308:	4603      	mov	r3, r0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3708      	adds	r7, #8
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b082      	sub	sp, #8
 8007316:	af00      	add	r7, sp, #0
 8007318:	6078      	str	r0, [r7, #4]
 800731a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800731c:	2180      	movs	r1, #128	; 0x80
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 fb76 	bl	8007a10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007324:	2100      	movs	r1, #0
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 fb72 	bl	8007a10 <USBD_LL_StallEP>
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b086      	sub	sp, #24
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007340:	2300      	movs	r3, #0
 8007342:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d036      	beq.n	80073b8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800734e:	6938      	ldr	r0, [r7, #16]
 8007350:	f000 f836 	bl	80073c0 <USBD_GetLen>
 8007354:	4603      	mov	r3, r0
 8007356:	3301      	adds	r3, #1
 8007358:	b29b      	uxth	r3, r3
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007362:	7dfb      	ldrb	r3, [r7, #23]
 8007364:	68ba      	ldr	r2, [r7, #8]
 8007366:	4413      	add	r3, r2
 8007368:	687a      	ldr	r2, [r7, #4]
 800736a:	7812      	ldrb	r2, [r2, #0]
 800736c:	701a      	strb	r2, [r3, #0]
  idx++;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
 8007370:	3301      	adds	r3, #1
 8007372:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	4413      	add	r3, r2
 800737a:	2203      	movs	r2, #3
 800737c:	701a      	strb	r2, [r3, #0]
  idx++;
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	3301      	adds	r3, #1
 8007382:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007384:	e013      	b.n	80073ae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	4413      	add	r3, r2
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	7812      	ldrb	r2, [r2, #0]
 8007390:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	3301      	adds	r3, #1
 8007396:	613b      	str	r3, [r7, #16]
    idx++;
 8007398:	7dfb      	ldrb	r3, [r7, #23]
 800739a:	3301      	adds	r3, #1
 800739c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	4413      	add	r3, r2
 80073a4:	2200      	movs	r2, #0
 80073a6:	701a      	strb	r2, [r3, #0]
    idx++;
 80073a8:	7dfb      	ldrb	r3, [r7, #23]
 80073aa:	3301      	adds	r3, #1
 80073ac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d1e7      	bne.n	8007386 <USBD_GetString+0x52>
 80073b6:	e000      	b.n	80073ba <USBD_GetString+0x86>
    return;
 80073b8:	bf00      	nop
  }
}
 80073ba:	3718      	adds	r7, #24
 80073bc:	46bd      	mov	sp, r7
 80073be:	bd80      	pop	{r7, pc}

080073c0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073d0:	e005      	b.n	80073de <USBD_GetLen+0x1e>
  {
    len++;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	3301      	adds	r3, #1
 80073d6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	3301      	adds	r3, #1
 80073dc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	781b      	ldrb	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1f5      	bne.n	80073d2 <USBD_GetLen+0x12>
  }

  return len;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e8:	4618      	mov	r0, r3
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr

080073f4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	60f8      	str	r0, [r7, #12]
 80073fc:	60b9      	str	r1, [r7, #8]
 80073fe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2202      	movs	r2, #2
 8007404:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	68ba      	ldr	r2, [r7, #8]
 8007418:	2100      	movs	r1, #0
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 fb17 	bl	8007a4e <USBD_LL_Transmit>

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b084      	sub	sp, #16
 800742e:	af00      	add	r7, sp, #0
 8007430:	60f8      	str	r0, [r7, #12]
 8007432:	60b9      	str	r1, [r7, #8]
 8007434:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	2203      	movs	r2, #3
 800743a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	2100      	movs	r1, #0
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 fb1b 	bl	8007a90 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800745a:	2300      	movs	r3, #0
}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}

08007464 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007464:	b580      	push	{r7, lr}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007468:	2200      	movs	r2, #0
 800746a:	4912      	ldr	r1, [pc, #72]	; (80074b4 <MX_USB_DEVICE_Init+0x50>)
 800746c:	4812      	ldr	r0, [pc, #72]	; (80074b8 <MX_USB_DEVICE_Init+0x54>)
 800746e:	f7ff feed 	bl	800724c <USBD_Init>
 8007472:	4603      	mov	r3, r0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d001      	beq.n	800747c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007478:	f7fa f900 	bl	800167c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800747c:	490f      	ldr	r1, [pc, #60]	; (80074bc <MX_USB_DEVICE_Init+0x58>)
 800747e:	480e      	ldr	r0, [pc, #56]	; (80074b8 <MX_USB_DEVICE_Init+0x54>)
 8007480:	f7ff ff1a 	bl	80072b8 <USBD_RegisterClass>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800748a:	f7fa f8f7 	bl	800167c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800748e:	490c      	ldr	r1, [pc, #48]	; (80074c0 <MX_USB_DEVICE_Init+0x5c>)
 8007490:	4809      	ldr	r0, [pc, #36]	; (80074b8 <MX_USB_DEVICE_Init+0x54>)
 8007492:	f7ff fe6f 	bl	8007174 <USBD_CDC_RegisterInterface>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d001      	beq.n	80074a0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800749c:	f7fa f8ee 	bl	800167c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074a0:	4805      	ldr	r0, [pc, #20]	; (80074b8 <MX_USB_DEVICE_Init+0x54>)
 80074a2:	f7ff ff2a 	bl	80072fa <USBD_Start>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80074ac:	f7fa f8e6 	bl	800167c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80074b0:	bf00      	nop
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000150 	.word	0x20000150
 80074b8:	200006c0 	.word	0x200006c0
 80074bc:	20000038 	.word	0x20000038
 80074c0:	2000013c 	.word	0x2000013c

080074c4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80074c8:	2200      	movs	r2, #0
 80074ca:	4905      	ldr	r1, [pc, #20]	; (80074e0 <CDC_Init_FS+0x1c>)
 80074cc:	4805      	ldr	r0, [pc, #20]	; (80074e4 <CDC_Init_FS+0x20>)
 80074ce:	f7ff fe66 	bl	800719e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80074d2:	4905      	ldr	r1, [pc, #20]	; (80074e8 <CDC_Init_FS+0x24>)
 80074d4:	4803      	ldr	r0, [pc, #12]	; (80074e4 <CDC_Init_FS+0x20>)
 80074d6:	f7ff fe7b 	bl	80071d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80074da:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80074dc:	4618      	mov	r0, r3
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20001190 	.word	0x20001190
 80074e4:	200006c0 	.word	0x200006c0
 80074e8:	20000990 	.word	0x20000990

080074ec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074f0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074f2:	4618      	mov	r0, r3
 80074f4:	46bd      	mov	sp, r7
 80074f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fa:	4770      	bx	lr

080074fc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074fc:	b480      	push	{r7}
 80074fe:	b083      	sub	sp, #12
 8007500:	af00      	add	r7, sp, #0
 8007502:	4603      	mov	r3, r0
 8007504:	6039      	str	r1, [r7, #0]
 8007506:	71fb      	strb	r3, [r7, #7]
 8007508:	4613      	mov	r3, r2
 800750a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800750c:	79fb      	ldrb	r3, [r7, #7]
 800750e:	2b23      	cmp	r3, #35	; 0x23
 8007510:	d84a      	bhi.n	80075a8 <CDC_Control_FS+0xac>
 8007512:	a201      	add	r2, pc, #4	; (adr r2, 8007518 <CDC_Control_FS+0x1c>)
 8007514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007518:	080075a9 	.word	0x080075a9
 800751c:	080075a9 	.word	0x080075a9
 8007520:	080075a9 	.word	0x080075a9
 8007524:	080075a9 	.word	0x080075a9
 8007528:	080075a9 	.word	0x080075a9
 800752c:	080075a9 	.word	0x080075a9
 8007530:	080075a9 	.word	0x080075a9
 8007534:	080075a9 	.word	0x080075a9
 8007538:	080075a9 	.word	0x080075a9
 800753c:	080075a9 	.word	0x080075a9
 8007540:	080075a9 	.word	0x080075a9
 8007544:	080075a9 	.word	0x080075a9
 8007548:	080075a9 	.word	0x080075a9
 800754c:	080075a9 	.word	0x080075a9
 8007550:	080075a9 	.word	0x080075a9
 8007554:	080075a9 	.word	0x080075a9
 8007558:	080075a9 	.word	0x080075a9
 800755c:	080075a9 	.word	0x080075a9
 8007560:	080075a9 	.word	0x080075a9
 8007564:	080075a9 	.word	0x080075a9
 8007568:	080075a9 	.word	0x080075a9
 800756c:	080075a9 	.word	0x080075a9
 8007570:	080075a9 	.word	0x080075a9
 8007574:	080075a9 	.word	0x080075a9
 8007578:	080075a9 	.word	0x080075a9
 800757c:	080075a9 	.word	0x080075a9
 8007580:	080075a9 	.word	0x080075a9
 8007584:	080075a9 	.word	0x080075a9
 8007588:	080075a9 	.word	0x080075a9
 800758c:	080075a9 	.word	0x080075a9
 8007590:	080075a9 	.word	0x080075a9
 8007594:	080075a9 	.word	0x080075a9
 8007598:	080075a9 	.word	0x080075a9
 800759c:	080075a9 	.word	0x080075a9
 80075a0:	080075a9 	.word	0x080075a9
 80075a4:	080075a9 	.word	0x080075a9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80075a8:	bf00      	nop
  }

  return (USBD_OK);
 80075aa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b6:	4770      	bx	lr

080075b8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b082      	sub	sp, #8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80075c2:	6879      	ldr	r1, [r7, #4]
 80075c4:	4805      	ldr	r0, [pc, #20]	; (80075dc <CDC_Receive_FS+0x24>)
 80075c6:	f7ff fe03 	bl	80071d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80075ca:	4804      	ldr	r0, [pc, #16]	; (80075dc <CDC_Receive_FS+0x24>)
 80075cc:	f7ff fe14 	bl	80071f8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80075d0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3708      	adds	r7, #8
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	200006c0 	.word	0x200006c0

080075e0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80075f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	371c      	adds	r7, #28
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
	...

08007604 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	4603      	mov	r3, r0
 800760c:	6039      	str	r1, [r7, #0]
 800760e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	2212      	movs	r2, #18
 8007614:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007616:	4b03      	ldr	r3, [pc, #12]	; (8007624 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007618:	4618      	mov	r0, r3
 800761a:	370c      	adds	r7, #12
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr
 8007624:	2000016c 	.word	0x2000016c

08007628 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b480      	push	{r7}
 800762a:	b083      	sub	sp, #12
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2204      	movs	r2, #4
 8007638:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800763a:	4b03      	ldr	r3, [pc, #12]	; (8007648 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800763c:	4618      	mov	r0, r3
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	20000180 	.word	0x20000180

0800764c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	4603      	mov	r3, r0
 8007654:	6039      	str	r1, [r7, #0]
 8007656:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007658:	79fb      	ldrb	r3, [r7, #7]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d105      	bne.n	800766a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800765e:	683a      	ldr	r2, [r7, #0]
 8007660:	4907      	ldr	r1, [pc, #28]	; (8007680 <USBD_FS_ProductStrDescriptor+0x34>)
 8007662:	4808      	ldr	r0, [pc, #32]	; (8007684 <USBD_FS_ProductStrDescriptor+0x38>)
 8007664:	f7ff fe66 	bl	8007334 <USBD_GetString>
 8007668:	e004      	b.n	8007674 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800766a:	683a      	ldr	r2, [r7, #0]
 800766c:	4904      	ldr	r1, [pc, #16]	; (8007680 <USBD_FS_ProductStrDescriptor+0x34>)
 800766e:	4805      	ldr	r0, [pc, #20]	; (8007684 <USBD_FS_ProductStrDescriptor+0x38>)
 8007670:	f7ff fe60 	bl	8007334 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007674:	4b02      	ldr	r3, [pc, #8]	; (8007680 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007676:	4618      	mov	r0, r3
 8007678:	3708      	adds	r7, #8
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	20001990 	.word	0x20001990
 8007684:	08008d88 	.word	0x08008d88

08007688 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	4603      	mov	r3, r0
 8007690:	6039      	str	r1, [r7, #0]
 8007692:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007694:	683a      	ldr	r2, [r7, #0]
 8007696:	4904      	ldr	r1, [pc, #16]	; (80076a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007698:	4804      	ldr	r0, [pc, #16]	; (80076ac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800769a:	f7ff fe4b 	bl	8007334 <USBD_GetString>
  return USBD_StrDesc;
 800769e:	4b02      	ldr	r3, [pc, #8]	; (80076a8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20001990 	.word	0x20001990
 80076ac:	08008da0 	.word	0x08008da0

080076b0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	4603      	mov	r3, r0
 80076b8:	6039      	str	r1, [r7, #0]
 80076ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	221a      	movs	r2, #26
 80076c0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80076c2:	f000 f843 	bl	800774c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80076c6:	4b02      	ldr	r3, [pc, #8]	; (80076d0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3708      	adds	r7, #8
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	20000184 	.word	0x20000184

080076d4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b082      	sub	sp, #8
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	6039      	str	r1, [r7, #0]
 80076de:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80076e0:	79fb      	ldrb	r3, [r7, #7]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d105      	bne.n	80076f2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076e6:	683a      	ldr	r2, [r7, #0]
 80076e8:	4907      	ldr	r1, [pc, #28]	; (8007708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076ea:	4808      	ldr	r0, [pc, #32]	; (800770c <USBD_FS_ConfigStrDescriptor+0x38>)
 80076ec:	f7ff fe22 	bl	8007334 <USBD_GetString>
 80076f0:	e004      	b.n	80076fc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	4904      	ldr	r1, [pc, #16]	; (8007708 <USBD_FS_ConfigStrDescriptor+0x34>)
 80076f6:	4805      	ldr	r0, [pc, #20]	; (800770c <USBD_FS_ConfigStrDescriptor+0x38>)
 80076f8:	f7ff fe1c 	bl	8007334 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076fc:	4b02      	ldr	r3, [pc, #8]	; (8007708 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80076fe:	4618      	mov	r0, r3
 8007700:	3708      	adds	r7, #8
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
 8007706:	bf00      	nop
 8007708:	20001990 	.word	0x20001990
 800770c:	08008db4 	.word	0x08008db4

08007710 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	4603      	mov	r3, r0
 8007718:	6039      	str	r1, [r7, #0]
 800771a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800771c:	79fb      	ldrb	r3, [r7, #7]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d105      	bne.n	800772e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007722:	683a      	ldr	r2, [r7, #0]
 8007724:	4907      	ldr	r1, [pc, #28]	; (8007744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007726:	4808      	ldr	r0, [pc, #32]	; (8007748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007728:	f7ff fe04 	bl	8007334 <USBD_GetString>
 800772c:	e004      	b.n	8007738 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800772e:	683a      	ldr	r2, [r7, #0]
 8007730:	4904      	ldr	r1, [pc, #16]	; (8007744 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007732:	4805      	ldr	r0, [pc, #20]	; (8007748 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007734:	f7ff fdfe 	bl	8007334 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007738:	4b02      	ldr	r3, [pc, #8]	; (8007744 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800773a:	4618      	mov	r0, r3
 800773c:	3708      	adds	r7, #8
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}
 8007742:	bf00      	nop
 8007744:	20001990 	.word	0x20001990
 8007748:	08008dc0 	.word	0x08008dc0

0800774c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800774c:	b580      	push	{r7, lr}
 800774e:	b084      	sub	sp, #16
 8007750:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007752:	4b0f      	ldr	r3, [pc, #60]	; (8007790 <Get_SerialNum+0x44>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007758:	4b0e      	ldr	r3, [pc, #56]	; (8007794 <Get_SerialNum+0x48>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800775e:	4b0e      	ldr	r3, [pc, #56]	; (8007798 <Get_SerialNum+0x4c>)
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007764:	68fa      	ldr	r2, [r7, #12]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4413      	add	r3, r2
 800776a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d009      	beq.n	8007786 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007772:	2208      	movs	r2, #8
 8007774:	4909      	ldr	r1, [pc, #36]	; (800779c <Get_SerialNum+0x50>)
 8007776:	68f8      	ldr	r0, [r7, #12]
 8007778:	f000 f814 	bl	80077a4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800777c:	2204      	movs	r2, #4
 800777e:	4908      	ldr	r1, [pc, #32]	; (80077a0 <Get_SerialNum+0x54>)
 8007780:	68b8      	ldr	r0, [r7, #8]
 8007782:	f000 f80f 	bl	80077a4 <IntToUnicode>
  }
}
 8007786:	bf00      	nop
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	1fff7a10 	.word	0x1fff7a10
 8007794:	1fff7a14 	.word	0x1fff7a14
 8007798:	1fff7a18 	.word	0x1fff7a18
 800779c:	20000186 	.word	0x20000186
 80077a0:	20000196 	.word	0x20000196

080077a4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b087      	sub	sp, #28
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	60f8      	str	r0, [r7, #12]
 80077ac:	60b9      	str	r1, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80077b2:	2300      	movs	r3, #0
 80077b4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80077b6:	2300      	movs	r3, #0
 80077b8:	75fb      	strb	r3, [r7, #23]
 80077ba:	e027      	b.n	800780c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	0f1b      	lsrs	r3, r3, #28
 80077c0:	2b09      	cmp	r3, #9
 80077c2:	d80b      	bhi.n	80077dc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	0f1b      	lsrs	r3, r3, #28
 80077c8:	b2da      	uxtb	r2, r3
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4619      	mov	r1, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	440b      	add	r3, r1
 80077d4:	3230      	adds	r2, #48	; 0x30
 80077d6:	b2d2      	uxtb	r2, r2
 80077d8:	701a      	strb	r2, [r3, #0]
 80077da:	e00a      	b.n	80077f2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	0f1b      	lsrs	r3, r3, #28
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	4619      	mov	r1, r3
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	440b      	add	r3, r1
 80077ec:	3237      	adds	r2, #55	; 0x37
 80077ee:	b2d2      	uxtb	r2, r2
 80077f0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	3301      	adds	r3, #1
 80077fe:	68ba      	ldr	r2, [r7, #8]
 8007800:	4413      	add	r3, r2
 8007802:	2200      	movs	r2, #0
 8007804:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007806:	7dfb      	ldrb	r3, [r7, #23]
 8007808:	3301      	adds	r3, #1
 800780a:	75fb      	strb	r3, [r7, #23]
 800780c:	7dfa      	ldrb	r2, [r7, #23]
 800780e:	79fb      	ldrb	r3, [r7, #7]
 8007810:	429a      	cmp	r2, r3
 8007812:	d3d3      	bcc.n	80077bc <IntToUnicode+0x18>
  }
}
 8007814:	bf00      	nop
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b08a      	sub	sp, #40	; 0x28
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007828:	f107 0314 	add.w	r3, r7, #20
 800782c:	2200      	movs	r2, #0
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	605a      	str	r2, [r3, #4]
 8007832:	609a      	str	r2, [r3, #8]
 8007834:	60da      	str	r2, [r3, #12]
 8007836:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007840:	d132      	bne.n	80078a8 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007842:	2300      	movs	r3, #0
 8007844:	613b      	str	r3, [r7, #16]
 8007846:	4b1a      	ldr	r3, [pc, #104]	; (80078b0 <HAL_PCD_MspInit+0x90>)
 8007848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784a:	4a19      	ldr	r2, [pc, #100]	; (80078b0 <HAL_PCD_MspInit+0x90>)
 800784c:	f043 0301 	orr.w	r3, r3, #1
 8007850:	6313      	str	r3, [r2, #48]	; 0x30
 8007852:	4b17      	ldr	r3, [pc, #92]	; (80078b0 <HAL_PCD_MspInit+0x90>)
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	f003 0301 	and.w	r3, r3, #1
 800785a:	613b      	str	r3, [r7, #16]
 800785c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800785e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007864:	2302      	movs	r3, #2
 8007866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007868:	2300      	movs	r3, #0
 800786a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800786c:	2303      	movs	r3, #3
 800786e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007870:	230a      	movs	r3, #10
 8007872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007874:	f107 0314 	add.w	r3, r7, #20
 8007878:	4619      	mov	r1, r3
 800787a:	480e      	ldr	r0, [pc, #56]	; (80078b4 <HAL_PCD_MspInit+0x94>)
 800787c:	f7fb fc94 	bl	80031a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007880:	4b0b      	ldr	r3, [pc, #44]	; (80078b0 <HAL_PCD_MspInit+0x90>)
 8007882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007884:	4a0a      	ldr	r2, [pc, #40]	; (80078b0 <HAL_PCD_MspInit+0x90>)
 8007886:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800788a:	6353      	str	r3, [r2, #52]	; 0x34
 800788c:	2300      	movs	r3, #0
 800788e:	60fb      	str	r3, [r7, #12]
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <HAL_PCD_MspInit+0x90>)
 8007892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007894:	4a06      	ldr	r2, [pc, #24]	; (80078b0 <HAL_PCD_MspInit+0x90>)
 8007896:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800789a:	6453      	str	r3, [r2, #68]	; 0x44
 800789c:	4b04      	ldr	r3, [pc, #16]	; (80078b0 <HAL_PCD_MspInit+0x90>)
 800789e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078a4:	60fb      	str	r3, [r7, #12]
 80078a6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80078a8:	bf00      	nop
 80078aa:	3728      	adds	r7, #40	; 0x28
 80078ac:	46bd      	mov	sp, r7
 80078ae:	bd80      	pop	{r7, pc}
 80078b0:	40023800 	.word	0x40023800
 80078b4:	40020000 	.word	0x40020000

080078b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d13c      	bne.n	8007942 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80078c8:	4a20      	ldr	r2, [pc, #128]	; (800794c <USBD_LL_Init+0x94>)
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a1e      	ldr	r2, [pc, #120]	; (800794c <USBD_LL_Init+0x94>)
 80078d4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80078d8:	4b1c      	ldr	r3, [pc, #112]	; (800794c <USBD_LL_Init+0x94>)
 80078da:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80078de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80078e0:	4b1a      	ldr	r3, [pc, #104]	; (800794c <USBD_LL_Init+0x94>)
 80078e2:	2204      	movs	r2, #4
 80078e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80078e6:	4b19      	ldr	r3, [pc, #100]	; (800794c <USBD_LL_Init+0x94>)
 80078e8:	2202      	movs	r2, #2
 80078ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80078ec:	4b17      	ldr	r3, [pc, #92]	; (800794c <USBD_LL_Init+0x94>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80078f2:	4b16      	ldr	r3, [pc, #88]	; (800794c <USBD_LL_Init+0x94>)
 80078f4:	2202      	movs	r2, #2
 80078f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80078f8:	4b14      	ldr	r3, [pc, #80]	; (800794c <USBD_LL_Init+0x94>)
 80078fa:	2200      	movs	r2, #0
 80078fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80078fe:	4b13      	ldr	r3, [pc, #76]	; (800794c <USBD_LL_Init+0x94>)
 8007900:	2200      	movs	r2, #0
 8007902:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007904:	4b11      	ldr	r3, [pc, #68]	; (800794c <USBD_LL_Init+0x94>)
 8007906:	2200      	movs	r2, #0
 8007908:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800790a:	4b10      	ldr	r3, [pc, #64]	; (800794c <USBD_LL_Init+0x94>)
 800790c:	2200      	movs	r2, #0
 800790e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007910:	4b0e      	ldr	r3, [pc, #56]	; (800794c <USBD_LL_Init+0x94>)
 8007912:	2200      	movs	r2, #0
 8007914:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007916:	480d      	ldr	r0, [pc, #52]	; (800794c <USBD_LL_Init+0x94>)
 8007918:	f7fb ffbd 	bl	8003896 <HAL_PCD_Init>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007922:	f7f9 feab 	bl	800167c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007926:	2180      	movs	r1, #128	; 0x80
 8007928:	4808      	ldr	r0, [pc, #32]	; (800794c <USBD_LL_Init+0x94>)
 800792a:	f7fc fb0e 	bl	8003f4a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800792e:	2240      	movs	r2, #64	; 0x40
 8007930:	2100      	movs	r1, #0
 8007932:	4806      	ldr	r0, [pc, #24]	; (800794c <USBD_LL_Init+0x94>)
 8007934:	f7fc fac2 	bl	8003ebc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007938:	2280      	movs	r2, #128	; 0x80
 800793a:	2101      	movs	r1, #1
 800793c:	4803      	ldr	r0, [pc, #12]	; (800794c <USBD_LL_Init+0x94>)
 800793e:	f7fc fabd 	bl	8003ebc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20001b90 	.word	0x20001b90

08007950 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b084      	sub	sp, #16
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800795c:	2300      	movs	r3, #0
 800795e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007966:	4618      	mov	r0, r3
 8007968:	f7fc f8b2 	bl	8003ad0 <HAL_PCD_Start>
 800796c:	4603      	mov	r3, r0
 800796e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	4618      	mov	r0, r3
 8007974:	f000 f8c0 	bl	8007af8 <USBD_Get_USB_Status>
 8007978:	4603      	mov	r3, r0
 800797a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800797c:	7bbb      	ldrb	r3, [r7, #14]
}
 800797e:	4618      	mov	r0, r3
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b084      	sub	sp, #16
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	4608      	mov	r0, r1
 8007990:	4611      	mov	r1, r2
 8007992:	461a      	mov	r2, r3
 8007994:	4603      	mov	r3, r0
 8007996:	70fb      	strb	r3, [r7, #3]
 8007998:	460b      	mov	r3, r1
 800799a:	70bb      	strb	r3, [r7, #2]
 800799c:	4613      	mov	r3, r2
 800799e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079a0:	2300      	movs	r3, #0
 80079a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80079ae:	78bb      	ldrb	r3, [r7, #2]
 80079b0:	883a      	ldrh	r2, [r7, #0]
 80079b2:	78f9      	ldrb	r1, [r7, #3]
 80079b4:	f7fc f8bf 	bl	8003b36 <HAL_PCD_EP_Open>
 80079b8:	4603      	mov	r3, r0
 80079ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 f89a 	bl	8007af8 <USBD_Get_USB_Status>
 80079c4:	4603      	mov	r3, r0
 80079c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80079c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3710      	adds	r7, #16
 80079ce:	46bd      	mov	sp, r7
 80079d0:	bd80      	pop	{r7, pc}

080079d2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80079d2:	b580      	push	{r7, lr}
 80079d4:	b084      	sub	sp, #16
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
 80079da:	460b      	mov	r3, r1
 80079dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80079de:	2300      	movs	r3, #0
 80079e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80079ec:	78fa      	ldrb	r2, [r7, #3]
 80079ee:	4611      	mov	r1, r2
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fc f908 	bl	8003c06 <HAL_PCD_EP_Close>
 80079f6:	4603      	mov	r3, r0
 80079f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80079fa:	7bfb      	ldrb	r3, [r7, #15]
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 f87b 	bl	8007af8 <USBD_Get_USB_Status>
 8007a02:	4603      	mov	r3, r0
 8007a04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a06:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a08:	4618      	mov	r0, r3
 8007a0a:	3710      	adds	r7, #16
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	bd80      	pop	{r7, pc}

08007a10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b084      	sub	sp, #16
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	460b      	mov	r3, r1
 8007a1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007a2a:	78fa      	ldrb	r2, [r7, #3]
 8007a2c:	4611      	mov	r1, r2
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fc f9e0 	bl	8003df4 <HAL_PCD_EP_SetStall>
 8007a34:	4603      	mov	r3, r0
 8007a36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a38:	7bfb      	ldrb	r3, [r7, #15]
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f000 f85c 	bl	8007af8 <USBD_Get_USB_Status>
 8007a40:	4603      	mov	r3, r0
 8007a42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a44:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a4e:	b580      	push	{r7, lr}
 8007a50:	b086      	sub	sp, #24
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	60f8      	str	r0, [r7, #12]
 8007a56:	607a      	str	r2, [r7, #4]
 8007a58:	603b      	str	r3, [r7, #0]
 8007a5a:	460b      	mov	r3, r1
 8007a5c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007a6c:	7af9      	ldrb	r1, [r7, #11]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	f7fc f975 	bl	8003d60 <HAL_PCD_EP_Transmit>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a7a:	7dfb      	ldrb	r3, [r7, #23]
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	f000 f83b 	bl	8007af8 <USBD_Get_USB_Status>
 8007a82:	4603      	mov	r3, r0
 8007a84:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007a86:	7dbb      	ldrb	r3, [r7, #22]
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	607a      	str	r2, [r7, #4]
 8007a9a:	603b      	str	r3, [r7, #0]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007aae:	7af9      	ldrb	r1, [r7, #11]
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	f7fc f8f1 	bl	8003c9a <HAL_PCD_EP_Receive>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	4618      	mov	r0, r3
 8007ac0:	f000 f81a 	bl	8007af8 <USBD_Get_USB_Status>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ac8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b082      	sub	sp, #8
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	6078      	str	r0, [r7, #4]
 8007ada:	460b      	mov	r3, r1
 8007adc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007ae4:	78fa      	ldrb	r2, [r7, #3]
 8007ae6:	4611      	mov	r1, r2
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fc f921 	bl	8003d30 <HAL_PCD_EP_GetRxCount>
 8007aee:	4603      	mov	r3, r0
}
 8007af0:	4618      	mov	r0, r3
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007af8:	b480      	push	{r7}
 8007afa:	b085      	sub	sp, #20
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	4603      	mov	r3, r0
 8007b00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b02:	2300      	movs	r3, #0
 8007b04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d817      	bhi.n	8007b3c <USBD_Get_USB_Status+0x44>
 8007b0c:	a201      	add	r2, pc, #4	; (adr r2, 8007b14 <USBD_Get_USB_Status+0x1c>)
 8007b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b12:	bf00      	nop
 8007b14:	08007b25 	.word	0x08007b25
 8007b18:	08007b2b 	.word	0x08007b2b
 8007b1c:	08007b31 	.word	0x08007b31
 8007b20:	08007b37 	.word	0x08007b37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
    break;
 8007b28:	e00b      	b.n	8007b42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8007b2e:	e008      	b.n	8007b42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007b30:	2301      	movs	r3, #1
 8007b32:	73fb      	strb	r3, [r7, #15]
    break;
 8007b34:	e005      	b.n	8007b42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007b36:	2303      	movs	r3, #3
 8007b38:	73fb      	strb	r3, [r7, #15]
    break;
 8007b3a:	e002      	b.n	8007b42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007b3c:	2303      	movs	r3, #3
 8007b3e:	73fb      	strb	r3, [r7, #15]
    break;
 8007b40:	bf00      	nop
  }
  return usb_status;
 8007b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <__errno>:
 8007b50:	4b01      	ldr	r3, [pc, #4]	; (8007b58 <__errno+0x8>)
 8007b52:	6818      	ldr	r0, [r3, #0]
 8007b54:	4770      	bx	lr
 8007b56:	bf00      	nop
 8007b58:	200001a0 	.word	0x200001a0

08007b5c <__libc_init_array>:
 8007b5c:	b570      	push	{r4, r5, r6, lr}
 8007b5e:	4e0d      	ldr	r6, [pc, #52]	; (8007b94 <__libc_init_array+0x38>)
 8007b60:	4c0d      	ldr	r4, [pc, #52]	; (8007b98 <__libc_init_array+0x3c>)
 8007b62:	1ba4      	subs	r4, r4, r6
 8007b64:	10a4      	asrs	r4, r4, #2
 8007b66:	2500      	movs	r5, #0
 8007b68:	42a5      	cmp	r5, r4
 8007b6a:	d109      	bne.n	8007b80 <__libc_init_array+0x24>
 8007b6c:	4e0b      	ldr	r6, [pc, #44]	; (8007b9c <__libc_init_array+0x40>)
 8007b6e:	4c0c      	ldr	r4, [pc, #48]	; (8007ba0 <__libc_init_array+0x44>)
 8007b70:	f001 f8fc 	bl	8008d6c <_init>
 8007b74:	1ba4      	subs	r4, r4, r6
 8007b76:	10a4      	asrs	r4, r4, #2
 8007b78:	2500      	movs	r5, #0
 8007b7a:	42a5      	cmp	r5, r4
 8007b7c:	d105      	bne.n	8007b8a <__libc_init_array+0x2e>
 8007b7e:	bd70      	pop	{r4, r5, r6, pc}
 8007b80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b84:	4798      	blx	r3
 8007b86:	3501      	adds	r5, #1
 8007b88:	e7ee      	b.n	8007b68 <__libc_init_array+0xc>
 8007b8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007b8e:	4798      	blx	r3
 8007b90:	3501      	adds	r5, #1
 8007b92:	e7f2      	b.n	8007b7a <__libc_init_array+0x1e>
 8007b94:	08008fd0 	.word	0x08008fd0
 8007b98:	08008fd0 	.word	0x08008fd0
 8007b9c:	08008fd0 	.word	0x08008fd0
 8007ba0:	08008fd4 	.word	0x08008fd4

08007ba4 <malloc>:
 8007ba4:	4b02      	ldr	r3, [pc, #8]	; (8007bb0 <malloc+0xc>)
 8007ba6:	4601      	mov	r1, r0
 8007ba8:	6818      	ldr	r0, [r3, #0]
 8007baa:	f000 b861 	b.w	8007c70 <_malloc_r>
 8007bae:	bf00      	nop
 8007bb0:	200001a0 	.word	0x200001a0

08007bb4 <free>:
 8007bb4:	4b02      	ldr	r3, [pc, #8]	; (8007bc0 <free+0xc>)
 8007bb6:	4601      	mov	r1, r0
 8007bb8:	6818      	ldr	r0, [r3, #0]
 8007bba:	f000 b80b 	b.w	8007bd4 <_free_r>
 8007bbe:	bf00      	nop
 8007bc0:	200001a0 	.word	0x200001a0

08007bc4 <memset>:
 8007bc4:	4402      	add	r2, r0
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d100      	bne.n	8007bce <memset+0xa>
 8007bcc:	4770      	bx	lr
 8007bce:	f803 1b01 	strb.w	r1, [r3], #1
 8007bd2:	e7f9      	b.n	8007bc8 <memset+0x4>

08007bd4 <_free_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	2900      	cmp	r1, #0
 8007bda:	d045      	beq.n	8007c68 <_free_r+0x94>
 8007bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007be0:	1f0c      	subs	r4, r1, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	bfb8      	it	lt
 8007be6:	18e4      	addlt	r4, r4, r3
 8007be8:	f000 f8ac 	bl	8007d44 <__malloc_lock>
 8007bec:	4a1f      	ldr	r2, [pc, #124]	; (8007c6c <_free_r+0x98>)
 8007bee:	6813      	ldr	r3, [r2, #0]
 8007bf0:	4610      	mov	r0, r2
 8007bf2:	b933      	cbnz	r3, 8007c02 <_free_r+0x2e>
 8007bf4:	6063      	str	r3, [r4, #4]
 8007bf6:	6014      	str	r4, [r2, #0]
 8007bf8:	4628      	mov	r0, r5
 8007bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bfe:	f000 b8a2 	b.w	8007d46 <__malloc_unlock>
 8007c02:	42a3      	cmp	r3, r4
 8007c04:	d90c      	bls.n	8007c20 <_free_r+0x4c>
 8007c06:	6821      	ldr	r1, [r4, #0]
 8007c08:	1862      	adds	r2, r4, r1
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	bf04      	itt	eq
 8007c0e:	681a      	ldreq	r2, [r3, #0]
 8007c10:	685b      	ldreq	r3, [r3, #4]
 8007c12:	6063      	str	r3, [r4, #4]
 8007c14:	bf04      	itt	eq
 8007c16:	1852      	addeq	r2, r2, r1
 8007c18:	6022      	streq	r2, [r4, #0]
 8007c1a:	6004      	str	r4, [r0, #0]
 8007c1c:	e7ec      	b.n	8007bf8 <_free_r+0x24>
 8007c1e:	4613      	mov	r3, r2
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	b10a      	cbz	r2, 8007c28 <_free_r+0x54>
 8007c24:	42a2      	cmp	r2, r4
 8007c26:	d9fa      	bls.n	8007c1e <_free_r+0x4a>
 8007c28:	6819      	ldr	r1, [r3, #0]
 8007c2a:	1858      	adds	r0, r3, r1
 8007c2c:	42a0      	cmp	r0, r4
 8007c2e:	d10b      	bne.n	8007c48 <_free_r+0x74>
 8007c30:	6820      	ldr	r0, [r4, #0]
 8007c32:	4401      	add	r1, r0
 8007c34:	1858      	adds	r0, r3, r1
 8007c36:	4282      	cmp	r2, r0
 8007c38:	6019      	str	r1, [r3, #0]
 8007c3a:	d1dd      	bne.n	8007bf8 <_free_r+0x24>
 8007c3c:	6810      	ldr	r0, [r2, #0]
 8007c3e:	6852      	ldr	r2, [r2, #4]
 8007c40:	605a      	str	r2, [r3, #4]
 8007c42:	4401      	add	r1, r0
 8007c44:	6019      	str	r1, [r3, #0]
 8007c46:	e7d7      	b.n	8007bf8 <_free_r+0x24>
 8007c48:	d902      	bls.n	8007c50 <_free_r+0x7c>
 8007c4a:	230c      	movs	r3, #12
 8007c4c:	602b      	str	r3, [r5, #0]
 8007c4e:	e7d3      	b.n	8007bf8 <_free_r+0x24>
 8007c50:	6820      	ldr	r0, [r4, #0]
 8007c52:	1821      	adds	r1, r4, r0
 8007c54:	428a      	cmp	r2, r1
 8007c56:	bf04      	itt	eq
 8007c58:	6811      	ldreq	r1, [r2, #0]
 8007c5a:	6852      	ldreq	r2, [r2, #4]
 8007c5c:	6062      	str	r2, [r4, #4]
 8007c5e:	bf04      	itt	eq
 8007c60:	1809      	addeq	r1, r1, r0
 8007c62:	6021      	streq	r1, [r4, #0]
 8007c64:	605c      	str	r4, [r3, #4]
 8007c66:	e7c7      	b.n	8007bf8 <_free_r+0x24>
 8007c68:	bd38      	pop	{r3, r4, r5, pc}
 8007c6a:	bf00      	nop
 8007c6c:	20000224 	.word	0x20000224

08007c70 <_malloc_r>:
 8007c70:	b570      	push	{r4, r5, r6, lr}
 8007c72:	1ccd      	adds	r5, r1, #3
 8007c74:	f025 0503 	bic.w	r5, r5, #3
 8007c78:	3508      	adds	r5, #8
 8007c7a:	2d0c      	cmp	r5, #12
 8007c7c:	bf38      	it	cc
 8007c7e:	250c      	movcc	r5, #12
 8007c80:	2d00      	cmp	r5, #0
 8007c82:	4606      	mov	r6, r0
 8007c84:	db01      	blt.n	8007c8a <_malloc_r+0x1a>
 8007c86:	42a9      	cmp	r1, r5
 8007c88:	d903      	bls.n	8007c92 <_malloc_r+0x22>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	6033      	str	r3, [r6, #0]
 8007c8e:	2000      	movs	r0, #0
 8007c90:	bd70      	pop	{r4, r5, r6, pc}
 8007c92:	f000 f857 	bl	8007d44 <__malloc_lock>
 8007c96:	4a21      	ldr	r2, [pc, #132]	; (8007d1c <_malloc_r+0xac>)
 8007c98:	6814      	ldr	r4, [r2, #0]
 8007c9a:	4621      	mov	r1, r4
 8007c9c:	b991      	cbnz	r1, 8007cc4 <_malloc_r+0x54>
 8007c9e:	4c20      	ldr	r4, [pc, #128]	; (8007d20 <_malloc_r+0xb0>)
 8007ca0:	6823      	ldr	r3, [r4, #0]
 8007ca2:	b91b      	cbnz	r3, 8007cac <_malloc_r+0x3c>
 8007ca4:	4630      	mov	r0, r6
 8007ca6:	f000 f83d 	bl	8007d24 <_sbrk_r>
 8007caa:	6020      	str	r0, [r4, #0]
 8007cac:	4629      	mov	r1, r5
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f000 f838 	bl	8007d24 <_sbrk_r>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d124      	bne.n	8007d02 <_malloc_r+0x92>
 8007cb8:	230c      	movs	r3, #12
 8007cba:	6033      	str	r3, [r6, #0]
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f000 f842 	bl	8007d46 <__malloc_unlock>
 8007cc2:	e7e4      	b.n	8007c8e <_malloc_r+0x1e>
 8007cc4:	680b      	ldr	r3, [r1, #0]
 8007cc6:	1b5b      	subs	r3, r3, r5
 8007cc8:	d418      	bmi.n	8007cfc <_malloc_r+0x8c>
 8007cca:	2b0b      	cmp	r3, #11
 8007ccc:	d90f      	bls.n	8007cee <_malloc_r+0x7e>
 8007cce:	600b      	str	r3, [r1, #0]
 8007cd0:	50cd      	str	r5, [r1, r3]
 8007cd2:	18cc      	adds	r4, r1, r3
 8007cd4:	4630      	mov	r0, r6
 8007cd6:	f000 f836 	bl	8007d46 <__malloc_unlock>
 8007cda:	f104 000b 	add.w	r0, r4, #11
 8007cde:	1d23      	adds	r3, r4, #4
 8007ce0:	f020 0007 	bic.w	r0, r0, #7
 8007ce4:	1ac3      	subs	r3, r0, r3
 8007ce6:	d0d3      	beq.n	8007c90 <_malloc_r+0x20>
 8007ce8:	425a      	negs	r2, r3
 8007cea:	50e2      	str	r2, [r4, r3]
 8007cec:	e7d0      	b.n	8007c90 <_malloc_r+0x20>
 8007cee:	428c      	cmp	r4, r1
 8007cf0:	684b      	ldr	r3, [r1, #4]
 8007cf2:	bf16      	itet	ne
 8007cf4:	6063      	strne	r3, [r4, #4]
 8007cf6:	6013      	streq	r3, [r2, #0]
 8007cf8:	460c      	movne	r4, r1
 8007cfa:	e7eb      	b.n	8007cd4 <_malloc_r+0x64>
 8007cfc:	460c      	mov	r4, r1
 8007cfe:	6849      	ldr	r1, [r1, #4]
 8007d00:	e7cc      	b.n	8007c9c <_malloc_r+0x2c>
 8007d02:	1cc4      	adds	r4, r0, #3
 8007d04:	f024 0403 	bic.w	r4, r4, #3
 8007d08:	42a0      	cmp	r0, r4
 8007d0a:	d005      	beq.n	8007d18 <_malloc_r+0xa8>
 8007d0c:	1a21      	subs	r1, r4, r0
 8007d0e:	4630      	mov	r0, r6
 8007d10:	f000 f808 	bl	8007d24 <_sbrk_r>
 8007d14:	3001      	adds	r0, #1
 8007d16:	d0cf      	beq.n	8007cb8 <_malloc_r+0x48>
 8007d18:	6025      	str	r5, [r4, #0]
 8007d1a:	e7db      	b.n	8007cd4 <_malloc_r+0x64>
 8007d1c:	20000224 	.word	0x20000224
 8007d20:	20000228 	.word	0x20000228

08007d24 <_sbrk_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4c06      	ldr	r4, [pc, #24]	; (8007d40 <_sbrk_r+0x1c>)
 8007d28:	2300      	movs	r3, #0
 8007d2a:	4605      	mov	r5, r0
 8007d2c:	4608      	mov	r0, r1
 8007d2e:	6023      	str	r3, [r4, #0]
 8007d30:	f7f9 fd16 	bl	8001760 <_sbrk>
 8007d34:	1c43      	adds	r3, r0, #1
 8007d36:	d102      	bne.n	8007d3e <_sbrk_r+0x1a>
 8007d38:	6823      	ldr	r3, [r4, #0]
 8007d3a:	b103      	cbz	r3, 8007d3e <_sbrk_r+0x1a>
 8007d3c:	602b      	str	r3, [r5, #0]
 8007d3e:	bd38      	pop	{r3, r4, r5, pc}
 8007d40:	20001f98 	.word	0x20001f98

08007d44 <__malloc_lock>:
 8007d44:	4770      	bx	lr

08007d46 <__malloc_unlock>:
 8007d46:	4770      	bx	lr

08007d48 <sin>:
 8007d48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007d4a:	ec51 0b10 	vmov	r0, r1, d0
 8007d4e:	4a20      	ldr	r2, [pc, #128]	; (8007dd0 <sin+0x88>)
 8007d50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d54:	4293      	cmp	r3, r2
 8007d56:	dc07      	bgt.n	8007d68 <sin+0x20>
 8007d58:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8007dc8 <sin+0x80>
 8007d5c:	2000      	movs	r0, #0
 8007d5e:	f000 fe37 	bl	80089d0 <__kernel_sin>
 8007d62:	ec51 0b10 	vmov	r0, r1, d0
 8007d66:	e007      	b.n	8007d78 <sin+0x30>
 8007d68:	4a1a      	ldr	r2, [pc, #104]	; (8007dd4 <sin+0x8c>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	dd09      	ble.n	8007d82 <sin+0x3a>
 8007d6e:	ee10 2a10 	vmov	r2, s0
 8007d72:	460b      	mov	r3, r1
 8007d74:	f7f8 fa40 	bl	80001f8 <__aeabi_dsub>
 8007d78:	ec41 0b10 	vmov	d0, r0, r1
 8007d7c:	b005      	add	sp, #20
 8007d7e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007d82:	4668      	mov	r0, sp
 8007d84:	f000 f828 	bl	8007dd8 <__ieee754_rem_pio2>
 8007d88:	f000 0003 	and.w	r0, r0, #3
 8007d8c:	2801      	cmp	r0, #1
 8007d8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007d92:	ed9d 0b00 	vldr	d0, [sp]
 8007d96:	d004      	beq.n	8007da2 <sin+0x5a>
 8007d98:	2802      	cmp	r0, #2
 8007d9a:	d005      	beq.n	8007da8 <sin+0x60>
 8007d9c:	b970      	cbnz	r0, 8007dbc <sin+0x74>
 8007d9e:	2001      	movs	r0, #1
 8007da0:	e7dd      	b.n	8007d5e <sin+0x16>
 8007da2:	f000 fa0d 	bl	80081c0 <__kernel_cos>
 8007da6:	e7dc      	b.n	8007d62 <sin+0x1a>
 8007da8:	2001      	movs	r0, #1
 8007daa:	f000 fe11 	bl	80089d0 <__kernel_sin>
 8007dae:	ec53 2b10 	vmov	r2, r3, d0
 8007db2:	ee10 0a10 	vmov	r0, s0
 8007db6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007dba:	e7dd      	b.n	8007d78 <sin+0x30>
 8007dbc:	f000 fa00 	bl	80081c0 <__kernel_cos>
 8007dc0:	e7f5      	b.n	8007dae <sin+0x66>
 8007dc2:	bf00      	nop
 8007dc4:	f3af 8000 	nop.w
	...
 8007dd0:	3fe921fb 	.word	0x3fe921fb
 8007dd4:	7fefffff 	.word	0x7fefffff

08007dd8 <__ieee754_rem_pio2>:
 8007dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ddc:	ec57 6b10 	vmov	r6, r7, d0
 8007de0:	4bc3      	ldr	r3, [pc, #780]	; (80080f0 <__ieee754_rem_pio2+0x318>)
 8007de2:	b08d      	sub	sp, #52	; 0x34
 8007de4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007de8:	4598      	cmp	r8, r3
 8007dea:	4604      	mov	r4, r0
 8007dec:	9704      	str	r7, [sp, #16]
 8007dee:	dc07      	bgt.n	8007e00 <__ieee754_rem_pio2+0x28>
 8007df0:	2200      	movs	r2, #0
 8007df2:	2300      	movs	r3, #0
 8007df4:	ed84 0b00 	vstr	d0, [r4]
 8007df8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8007dfc:	2500      	movs	r5, #0
 8007dfe:	e027      	b.n	8007e50 <__ieee754_rem_pio2+0x78>
 8007e00:	4bbc      	ldr	r3, [pc, #752]	; (80080f4 <__ieee754_rem_pio2+0x31c>)
 8007e02:	4598      	cmp	r8, r3
 8007e04:	dc75      	bgt.n	8007ef2 <__ieee754_rem_pio2+0x11a>
 8007e06:	9b04      	ldr	r3, [sp, #16]
 8007e08:	4dbb      	ldr	r5, [pc, #748]	; (80080f8 <__ieee754_rem_pio2+0x320>)
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	ee10 0a10 	vmov	r0, s0
 8007e10:	a3a9      	add	r3, pc, #676	; (adr r3, 80080b8 <__ieee754_rem_pio2+0x2e0>)
 8007e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e16:	4639      	mov	r1, r7
 8007e18:	dd36      	ble.n	8007e88 <__ieee754_rem_pio2+0xb0>
 8007e1a:	f7f8 f9ed 	bl	80001f8 <__aeabi_dsub>
 8007e1e:	45a8      	cmp	r8, r5
 8007e20:	4606      	mov	r6, r0
 8007e22:	460f      	mov	r7, r1
 8007e24:	d018      	beq.n	8007e58 <__ieee754_rem_pio2+0x80>
 8007e26:	a3a6      	add	r3, pc, #664	; (adr r3, 80080c0 <__ieee754_rem_pio2+0x2e8>)
 8007e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e2c:	f7f8 f9e4 	bl	80001f8 <__aeabi_dsub>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	e9c4 2300 	strd	r2, r3, [r4]
 8007e38:	4630      	mov	r0, r6
 8007e3a:	4639      	mov	r1, r7
 8007e3c:	f7f8 f9dc 	bl	80001f8 <__aeabi_dsub>
 8007e40:	a39f      	add	r3, pc, #636	; (adr r3, 80080c0 <__ieee754_rem_pio2+0x2e8>)
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	f7f8 f9d7 	bl	80001f8 <__aeabi_dsub>
 8007e4a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007e4e:	2501      	movs	r5, #1
 8007e50:	4628      	mov	r0, r5
 8007e52:	b00d      	add	sp, #52	; 0x34
 8007e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e58:	a39b      	add	r3, pc, #620	; (adr r3, 80080c8 <__ieee754_rem_pio2+0x2f0>)
 8007e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e5e:	f7f8 f9cb 	bl	80001f8 <__aeabi_dsub>
 8007e62:	a39b      	add	r3, pc, #620	; (adr r3, 80080d0 <__ieee754_rem_pio2+0x2f8>)
 8007e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e68:	4606      	mov	r6, r0
 8007e6a:	460f      	mov	r7, r1
 8007e6c:	f7f8 f9c4 	bl	80001f8 <__aeabi_dsub>
 8007e70:	4602      	mov	r2, r0
 8007e72:	460b      	mov	r3, r1
 8007e74:	e9c4 2300 	strd	r2, r3, [r4]
 8007e78:	4630      	mov	r0, r6
 8007e7a:	4639      	mov	r1, r7
 8007e7c:	f7f8 f9bc 	bl	80001f8 <__aeabi_dsub>
 8007e80:	a393      	add	r3, pc, #588	; (adr r3, 80080d0 <__ieee754_rem_pio2+0x2f8>)
 8007e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e86:	e7de      	b.n	8007e46 <__ieee754_rem_pio2+0x6e>
 8007e88:	f7f8 f9b8 	bl	80001fc <__adddf3>
 8007e8c:	45a8      	cmp	r8, r5
 8007e8e:	4606      	mov	r6, r0
 8007e90:	460f      	mov	r7, r1
 8007e92:	d016      	beq.n	8007ec2 <__ieee754_rem_pio2+0xea>
 8007e94:	a38a      	add	r3, pc, #552	; (adr r3, 80080c0 <__ieee754_rem_pio2+0x2e8>)
 8007e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e9a:	f7f8 f9af 	bl	80001fc <__adddf3>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	e9c4 2300 	strd	r2, r3, [r4]
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	4639      	mov	r1, r7
 8007eaa:	f7f8 f9a5 	bl	80001f8 <__aeabi_dsub>
 8007eae:	a384      	add	r3, pc, #528	; (adr r3, 80080c0 <__ieee754_rem_pio2+0x2e8>)
 8007eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eb4:	f7f8 f9a2 	bl	80001fc <__adddf3>
 8007eb8:	f04f 35ff 	mov.w	r5, #4294967295
 8007ebc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007ec0:	e7c6      	b.n	8007e50 <__ieee754_rem_pio2+0x78>
 8007ec2:	a381      	add	r3, pc, #516	; (adr r3, 80080c8 <__ieee754_rem_pio2+0x2f0>)
 8007ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ec8:	f7f8 f998 	bl	80001fc <__adddf3>
 8007ecc:	a380      	add	r3, pc, #512	; (adr r3, 80080d0 <__ieee754_rem_pio2+0x2f8>)
 8007ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ed2:	4606      	mov	r6, r0
 8007ed4:	460f      	mov	r7, r1
 8007ed6:	f7f8 f991 	bl	80001fc <__adddf3>
 8007eda:	4602      	mov	r2, r0
 8007edc:	460b      	mov	r3, r1
 8007ede:	e9c4 2300 	strd	r2, r3, [r4]
 8007ee2:	4630      	mov	r0, r6
 8007ee4:	4639      	mov	r1, r7
 8007ee6:	f7f8 f987 	bl	80001f8 <__aeabi_dsub>
 8007eea:	a379      	add	r3, pc, #484	; (adr r3, 80080d0 <__ieee754_rem_pio2+0x2f8>)
 8007eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef0:	e7e0      	b.n	8007eb4 <__ieee754_rem_pio2+0xdc>
 8007ef2:	4b82      	ldr	r3, [pc, #520]	; (80080fc <__ieee754_rem_pio2+0x324>)
 8007ef4:	4598      	cmp	r8, r3
 8007ef6:	f300 80d0 	bgt.w	800809a <__ieee754_rem_pio2+0x2c2>
 8007efa:	f000 fe23 	bl	8008b44 <fabs>
 8007efe:	ec57 6b10 	vmov	r6, r7, d0
 8007f02:	ee10 0a10 	vmov	r0, s0
 8007f06:	a374      	add	r3, pc, #464	; (adr r3, 80080d8 <__ieee754_rem_pio2+0x300>)
 8007f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0c:	4639      	mov	r1, r7
 8007f0e:	f7f8 fb2b 	bl	8000568 <__aeabi_dmul>
 8007f12:	2200      	movs	r2, #0
 8007f14:	4b7a      	ldr	r3, [pc, #488]	; (8008100 <__ieee754_rem_pio2+0x328>)
 8007f16:	f7f8 f971 	bl	80001fc <__adddf3>
 8007f1a:	f7f8 fdbf 	bl	8000a9c <__aeabi_d2iz>
 8007f1e:	4605      	mov	r5, r0
 8007f20:	f7f8 fab8 	bl	8000494 <__aeabi_i2d>
 8007f24:	a364      	add	r3, pc, #400	; (adr r3, 80080b8 <__ieee754_rem_pio2+0x2e0>)
 8007f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f2e:	f7f8 fb1b 	bl	8000568 <__aeabi_dmul>
 8007f32:	4602      	mov	r2, r0
 8007f34:	460b      	mov	r3, r1
 8007f36:	4630      	mov	r0, r6
 8007f38:	4639      	mov	r1, r7
 8007f3a:	f7f8 f95d 	bl	80001f8 <__aeabi_dsub>
 8007f3e:	a360      	add	r3, pc, #384	; (adr r3, 80080c0 <__ieee754_rem_pio2+0x2e8>)
 8007f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f44:	4682      	mov	sl, r0
 8007f46:	468b      	mov	fp, r1
 8007f48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f4c:	f7f8 fb0c 	bl	8000568 <__aeabi_dmul>
 8007f50:	2d1f      	cmp	r5, #31
 8007f52:	4606      	mov	r6, r0
 8007f54:	460f      	mov	r7, r1
 8007f56:	dc0c      	bgt.n	8007f72 <__ieee754_rem_pio2+0x19a>
 8007f58:	1e6a      	subs	r2, r5, #1
 8007f5a:	4b6a      	ldr	r3, [pc, #424]	; (8008104 <__ieee754_rem_pio2+0x32c>)
 8007f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f60:	4543      	cmp	r3, r8
 8007f62:	d006      	beq.n	8007f72 <__ieee754_rem_pio2+0x19a>
 8007f64:	4632      	mov	r2, r6
 8007f66:	463b      	mov	r3, r7
 8007f68:	4650      	mov	r0, sl
 8007f6a:	4659      	mov	r1, fp
 8007f6c:	f7f8 f944 	bl	80001f8 <__aeabi_dsub>
 8007f70:	e00e      	b.n	8007f90 <__ieee754_rem_pio2+0x1b8>
 8007f72:	4632      	mov	r2, r6
 8007f74:	463b      	mov	r3, r7
 8007f76:	4650      	mov	r0, sl
 8007f78:	4659      	mov	r1, fp
 8007f7a:	f7f8 f93d 	bl	80001f8 <__aeabi_dsub>
 8007f7e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8007f82:	9305      	str	r3, [sp, #20]
 8007f84:	9a05      	ldr	r2, [sp, #20]
 8007f86:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007f8a:	1ad3      	subs	r3, r2, r3
 8007f8c:	2b10      	cmp	r3, #16
 8007f8e:	dc02      	bgt.n	8007f96 <__ieee754_rem_pio2+0x1be>
 8007f90:	e9c4 0100 	strd	r0, r1, [r4]
 8007f94:	e039      	b.n	800800a <__ieee754_rem_pio2+0x232>
 8007f96:	a34c      	add	r3, pc, #304	; (adr r3, 80080c8 <__ieee754_rem_pio2+0x2f0>)
 8007f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fa0:	f7f8 fae2 	bl	8000568 <__aeabi_dmul>
 8007fa4:	4606      	mov	r6, r0
 8007fa6:	460f      	mov	r7, r1
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4650      	mov	r0, sl
 8007fae:	4659      	mov	r1, fp
 8007fb0:	f7f8 f922 	bl	80001f8 <__aeabi_dsub>
 8007fb4:	4602      	mov	r2, r0
 8007fb6:	460b      	mov	r3, r1
 8007fb8:	4680      	mov	r8, r0
 8007fba:	4689      	mov	r9, r1
 8007fbc:	4650      	mov	r0, sl
 8007fbe:	4659      	mov	r1, fp
 8007fc0:	f7f8 f91a 	bl	80001f8 <__aeabi_dsub>
 8007fc4:	4632      	mov	r2, r6
 8007fc6:	463b      	mov	r3, r7
 8007fc8:	f7f8 f916 	bl	80001f8 <__aeabi_dsub>
 8007fcc:	a340      	add	r3, pc, #256	; (adr r3, 80080d0 <__ieee754_rem_pio2+0x2f8>)
 8007fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fd2:	4606      	mov	r6, r0
 8007fd4:	460f      	mov	r7, r1
 8007fd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fda:	f7f8 fac5 	bl	8000568 <__aeabi_dmul>
 8007fde:	4632      	mov	r2, r6
 8007fe0:	463b      	mov	r3, r7
 8007fe2:	f7f8 f909 	bl	80001f8 <__aeabi_dsub>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	460b      	mov	r3, r1
 8007fea:	4606      	mov	r6, r0
 8007fec:	460f      	mov	r7, r1
 8007fee:	4640      	mov	r0, r8
 8007ff0:	4649      	mov	r1, r9
 8007ff2:	f7f8 f901 	bl	80001f8 <__aeabi_dsub>
 8007ff6:	9a05      	ldr	r2, [sp, #20]
 8007ff8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007ffc:	1ad3      	subs	r3, r2, r3
 8007ffe:	2b31      	cmp	r3, #49	; 0x31
 8008000:	dc20      	bgt.n	8008044 <__ieee754_rem_pio2+0x26c>
 8008002:	e9c4 0100 	strd	r0, r1, [r4]
 8008006:	46c2      	mov	sl, r8
 8008008:	46cb      	mov	fp, r9
 800800a:	e9d4 8900 	ldrd	r8, r9, [r4]
 800800e:	4650      	mov	r0, sl
 8008010:	4642      	mov	r2, r8
 8008012:	464b      	mov	r3, r9
 8008014:	4659      	mov	r1, fp
 8008016:	f7f8 f8ef 	bl	80001f8 <__aeabi_dsub>
 800801a:	463b      	mov	r3, r7
 800801c:	4632      	mov	r2, r6
 800801e:	f7f8 f8eb 	bl	80001f8 <__aeabi_dsub>
 8008022:	9b04      	ldr	r3, [sp, #16]
 8008024:	2b00      	cmp	r3, #0
 8008026:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800802a:	f6bf af11 	bge.w	8007e50 <__ieee754_rem_pio2+0x78>
 800802e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008032:	6063      	str	r3, [r4, #4]
 8008034:	f8c4 8000 	str.w	r8, [r4]
 8008038:	60a0      	str	r0, [r4, #8]
 800803a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800803e:	60e3      	str	r3, [r4, #12]
 8008040:	426d      	negs	r5, r5
 8008042:	e705      	b.n	8007e50 <__ieee754_rem_pio2+0x78>
 8008044:	a326      	add	r3, pc, #152	; (adr r3, 80080e0 <__ieee754_rem_pio2+0x308>)
 8008046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800804a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800804e:	f7f8 fa8b 	bl	8000568 <__aeabi_dmul>
 8008052:	4606      	mov	r6, r0
 8008054:	460f      	mov	r7, r1
 8008056:	4602      	mov	r2, r0
 8008058:	460b      	mov	r3, r1
 800805a:	4640      	mov	r0, r8
 800805c:	4649      	mov	r1, r9
 800805e:	f7f8 f8cb 	bl	80001f8 <__aeabi_dsub>
 8008062:	4602      	mov	r2, r0
 8008064:	460b      	mov	r3, r1
 8008066:	4682      	mov	sl, r0
 8008068:	468b      	mov	fp, r1
 800806a:	4640      	mov	r0, r8
 800806c:	4649      	mov	r1, r9
 800806e:	f7f8 f8c3 	bl	80001f8 <__aeabi_dsub>
 8008072:	4632      	mov	r2, r6
 8008074:	463b      	mov	r3, r7
 8008076:	f7f8 f8bf 	bl	80001f8 <__aeabi_dsub>
 800807a:	a31b      	add	r3, pc, #108	; (adr r3, 80080e8 <__ieee754_rem_pio2+0x310>)
 800807c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008080:	4606      	mov	r6, r0
 8008082:	460f      	mov	r7, r1
 8008084:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008088:	f7f8 fa6e 	bl	8000568 <__aeabi_dmul>
 800808c:	4632      	mov	r2, r6
 800808e:	463b      	mov	r3, r7
 8008090:	f7f8 f8b2 	bl	80001f8 <__aeabi_dsub>
 8008094:	4606      	mov	r6, r0
 8008096:	460f      	mov	r7, r1
 8008098:	e764      	b.n	8007f64 <__ieee754_rem_pio2+0x18c>
 800809a:	4b1b      	ldr	r3, [pc, #108]	; (8008108 <__ieee754_rem_pio2+0x330>)
 800809c:	4598      	cmp	r8, r3
 800809e:	dd35      	ble.n	800810c <__ieee754_rem_pio2+0x334>
 80080a0:	ee10 2a10 	vmov	r2, s0
 80080a4:	463b      	mov	r3, r7
 80080a6:	4630      	mov	r0, r6
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 f8a5 	bl	80001f8 <__aeabi_dsub>
 80080ae:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80080b2:	e9c4 0100 	strd	r0, r1, [r4]
 80080b6:	e6a1      	b.n	8007dfc <__ieee754_rem_pio2+0x24>
 80080b8:	54400000 	.word	0x54400000
 80080bc:	3ff921fb 	.word	0x3ff921fb
 80080c0:	1a626331 	.word	0x1a626331
 80080c4:	3dd0b461 	.word	0x3dd0b461
 80080c8:	1a600000 	.word	0x1a600000
 80080cc:	3dd0b461 	.word	0x3dd0b461
 80080d0:	2e037073 	.word	0x2e037073
 80080d4:	3ba3198a 	.word	0x3ba3198a
 80080d8:	6dc9c883 	.word	0x6dc9c883
 80080dc:	3fe45f30 	.word	0x3fe45f30
 80080e0:	2e000000 	.word	0x2e000000
 80080e4:	3ba3198a 	.word	0x3ba3198a
 80080e8:	252049c1 	.word	0x252049c1
 80080ec:	397b839a 	.word	0x397b839a
 80080f0:	3fe921fb 	.word	0x3fe921fb
 80080f4:	4002d97b 	.word	0x4002d97b
 80080f8:	3ff921fb 	.word	0x3ff921fb
 80080fc:	413921fb 	.word	0x413921fb
 8008100:	3fe00000 	.word	0x3fe00000
 8008104:	08008df0 	.word	0x08008df0
 8008108:	7fefffff 	.word	0x7fefffff
 800810c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008110:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008114:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008118:	4630      	mov	r0, r6
 800811a:	460f      	mov	r7, r1
 800811c:	f7f8 fcbe 	bl	8000a9c <__aeabi_d2iz>
 8008120:	f7f8 f9b8 	bl	8000494 <__aeabi_i2d>
 8008124:	4602      	mov	r2, r0
 8008126:	460b      	mov	r3, r1
 8008128:	4630      	mov	r0, r6
 800812a:	4639      	mov	r1, r7
 800812c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008130:	f7f8 f862 	bl	80001f8 <__aeabi_dsub>
 8008134:	2200      	movs	r2, #0
 8008136:	4b1f      	ldr	r3, [pc, #124]	; (80081b4 <__ieee754_rem_pio2+0x3dc>)
 8008138:	f7f8 fa16 	bl	8000568 <__aeabi_dmul>
 800813c:	460f      	mov	r7, r1
 800813e:	4606      	mov	r6, r0
 8008140:	f7f8 fcac 	bl	8000a9c <__aeabi_d2iz>
 8008144:	f7f8 f9a6 	bl	8000494 <__aeabi_i2d>
 8008148:	4602      	mov	r2, r0
 800814a:	460b      	mov	r3, r1
 800814c:	4630      	mov	r0, r6
 800814e:	4639      	mov	r1, r7
 8008150:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008154:	f7f8 f850 	bl	80001f8 <__aeabi_dsub>
 8008158:	2200      	movs	r2, #0
 800815a:	4b16      	ldr	r3, [pc, #88]	; (80081b4 <__ieee754_rem_pio2+0x3dc>)
 800815c:	f7f8 fa04 	bl	8000568 <__aeabi_dmul>
 8008160:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008164:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008168:	f04f 0803 	mov.w	r8, #3
 800816c:	2600      	movs	r6, #0
 800816e:	2700      	movs	r7, #0
 8008170:	4632      	mov	r2, r6
 8008172:	463b      	mov	r3, r7
 8008174:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008178:	f108 3aff 	add.w	sl, r8, #4294967295
 800817c:	f7f8 fc5c 	bl	8000a38 <__aeabi_dcmpeq>
 8008180:	b9b0      	cbnz	r0, 80081b0 <__ieee754_rem_pio2+0x3d8>
 8008182:	4b0d      	ldr	r3, [pc, #52]	; (80081b8 <__ieee754_rem_pio2+0x3e0>)
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	2302      	movs	r3, #2
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	462a      	mov	r2, r5
 800818c:	4643      	mov	r3, r8
 800818e:	4621      	mov	r1, r4
 8008190:	a806      	add	r0, sp, #24
 8008192:	f000 f8dd 	bl	8008350 <__kernel_rem_pio2>
 8008196:	9b04      	ldr	r3, [sp, #16]
 8008198:	2b00      	cmp	r3, #0
 800819a:	4605      	mov	r5, r0
 800819c:	f6bf ae58 	bge.w	8007e50 <__ieee754_rem_pio2+0x78>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80081a6:	6063      	str	r3, [r4, #4]
 80081a8:	68e3      	ldr	r3, [r4, #12]
 80081aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80081ae:	e746      	b.n	800803e <__ieee754_rem_pio2+0x266>
 80081b0:	46d0      	mov	r8, sl
 80081b2:	e7dd      	b.n	8008170 <__ieee754_rem_pio2+0x398>
 80081b4:	41700000 	.word	0x41700000
 80081b8:	08008e70 	.word	0x08008e70
 80081bc:	00000000 	.word	0x00000000

080081c0 <__kernel_cos>:
 80081c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c4:	ec59 8b10 	vmov	r8, r9, d0
 80081c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80081cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80081d0:	ed2d 8b02 	vpush	{d8}
 80081d4:	eeb0 8a41 	vmov.f32	s16, s2
 80081d8:	eef0 8a61 	vmov.f32	s17, s3
 80081dc:	da07      	bge.n	80081ee <__kernel_cos+0x2e>
 80081de:	ee10 0a10 	vmov	r0, s0
 80081e2:	4649      	mov	r1, r9
 80081e4:	f7f8 fc5a 	bl	8000a9c <__aeabi_d2iz>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	f000 8089 	beq.w	8008300 <__kernel_cos+0x140>
 80081ee:	4642      	mov	r2, r8
 80081f0:	464b      	mov	r3, r9
 80081f2:	4640      	mov	r0, r8
 80081f4:	4649      	mov	r1, r9
 80081f6:	f7f8 f9b7 	bl	8000568 <__aeabi_dmul>
 80081fa:	2200      	movs	r2, #0
 80081fc:	4b4e      	ldr	r3, [pc, #312]	; (8008338 <__kernel_cos+0x178>)
 80081fe:	4604      	mov	r4, r0
 8008200:	460d      	mov	r5, r1
 8008202:	f7f8 f9b1 	bl	8000568 <__aeabi_dmul>
 8008206:	a340      	add	r3, pc, #256	; (adr r3, 8008308 <__kernel_cos+0x148>)
 8008208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800820c:	4682      	mov	sl, r0
 800820e:	468b      	mov	fp, r1
 8008210:	4620      	mov	r0, r4
 8008212:	4629      	mov	r1, r5
 8008214:	f7f8 f9a8 	bl	8000568 <__aeabi_dmul>
 8008218:	a33d      	add	r3, pc, #244	; (adr r3, 8008310 <__kernel_cos+0x150>)
 800821a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821e:	f7f7 ffed 	bl	80001fc <__adddf3>
 8008222:	4622      	mov	r2, r4
 8008224:	462b      	mov	r3, r5
 8008226:	f7f8 f99f 	bl	8000568 <__aeabi_dmul>
 800822a:	a33b      	add	r3, pc, #236	; (adr r3, 8008318 <__kernel_cos+0x158>)
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f7f7 ffe2 	bl	80001f8 <__aeabi_dsub>
 8008234:	4622      	mov	r2, r4
 8008236:	462b      	mov	r3, r5
 8008238:	f7f8 f996 	bl	8000568 <__aeabi_dmul>
 800823c:	a338      	add	r3, pc, #224	; (adr r3, 8008320 <__kernel_cos+0x160>)
 800823e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008242:	f7f7 ffdb 	bl	80001fc <__adddf3>
 8008246:	4622      	mov	r2, r4
 8008248:	462b      	mov	r3, r5
 800824a:	f7f8 f98d 	bl	8000568 <__aeabi_dmul>
 800824e:	a336      	add	r3, pc, #216	; (adr r3, 8008328 <__kernel_cos+0x168>)
 8008250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008254:	f7f7 ffd0 	bl	80001f8 <__aeabi_dsub>
 8008258:	4622      	mov	r2, r4
 800825a:	462b      	mov	r3, r5
 800825c:	f7f8 f984 	bl	8000568 <__aeabi_dmul>
 8008260:	a333      	add	r3, pc, #204	; (adr r3, 8008330 <__kernel_cos+0x170>)
 8008262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008266:	f7f7 ffc9 	bl	80001fc <__adddf3>
 800826a:	4622      	mov	r2, r4
 800826c:	462b      	mov	r3, r5
 800826e:	f7f8 f97b 	bl	8000568 <__aeabi_dmul>
 8008272:	4622      	mov	r2, r4
 8008274:	462b      	mov	r3, r5
 8008276:	f7f8 f977 	bl	8000568 <__aeabi_dmul>
 800827a:	ec53 2b18 	vmov	r2, r3, d8
 800827e:	4604      	mov	r4, r0
 8008280:	460d      	mov	r5, r1
 8008282:	4640      	mov	r0, r8
 8008284:	4649      	mov	r1, r9
 8008286:	f7f8 f96f 	bl	8000568 <__aeabi_dmul>
 800828a:	460b      	mov	r3, r1
 800828c:	4602      	mov	r2, r0
 800828e:	4629      	mov	r1, r5
 8008290:	4620      	mov	r0, r4
 8008292:	f7f7 ffb1 	bl	80001f8 <__aeabi_dsub>
 8008296:	4b29      	ldr	r3, [pc, #164]	; (800833c <__kernel_cos+0x17c>)
 8008298:	429e      	cmp	r6, r3
 800829a:	4680      	mov	r8, r0
 800829c:	4689      	mov	r9, r1
 800829e:	dc11      	bgt.n	80082c4 <__kernel_cos+0x104>
 80082a0:	4602      	mov	r2, r0
 80082a2:	460b      	mov	r3, r1
 80082a4:	4650      	mov	r0, sl
 80082a6:	4659      	mov	r1, fp
 80082a8:	f7f7 ffa6 	bl	80001f8 <__aeabi_dsub>
 80082ac:	460b      	mov	r3, r1
 80082ae:	4924      	ldr	r1, [pc, #144]	; (8008340 <__kernel_cos+0x180>)
 80082b0:	4602      	mov	r2, r0
 80082b2:	2000      	movs	r0, #0
 80082b4:	f7f7 ffa0 	bl	80001f8 <__aeabi_dsub>
 80082b8:	ecbd 8b02 	vpop	{d8}
 80082bc:	ec41 0b10 	vmov	d0, r0, r1
 80082c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082c4:	4b1f      	ldr	r3, [pc, #124]	; (8008344 <__kernel_cos+0x184>)
 80082c6:	491e      	ldr	r1, [pc, #120]	; (8008340 <__kernel_cos+0x180>)
 80082c8:	429e      	cmp	r6, r3
 80082ca:	bfcc      	ite	gt
 80082cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8008348 <__kernel_cos+0x188>)
 80082ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80082d2:	2400      	movs	r4, #0
 80082d4:	4622      	mov	r2, r4
 80082d6:	462b      	mov	r3, r5
 80082d8:	2000      	movs	r0, #0
 80082da:	f7f7 ff8d 	bl	80001f8 <__aeabi_dsub>
 80082de:	4622      	mov	r2, r4
 80082e0:	4606      	mov	r6, r0
 80082e2:	460f      	mov	r7, r1
 80082e4:	462b      	mov	r3, r5
 80082e6:	4650      	mov	r0, sl
 80082e8:	4659      	mov	r1, fp
 80082ea:	f7f7 ff85 	bl	80001f8 <__aeabi_dsub>
 80082ee:	4642      	mov	r2, r8
 80082f0:	464b      	mov	r3, r9
 80082f2:	f7f7 ff81 	bl	80001f8 <__aeabi_dsub>
 80082f6:	4602      	mov	r2, r0
 80082f8:	460b      	mov	r3, r1
 80082fa:	4630      	mov	r0, r6
 80082fc:	4639      	mov	r1, r7
 80082fe:	e7d9      	b.n	80082b4 <__kernel_cos+0xf4>
 8008300:	2000      	movs	r0, #0
 8008302:	490f      	ldr	r1, [pc, #60]	; (8008340 <__kernel_cos+0x180>)
 8008304:	e7d8      	b.n	80082b8 <__kernel_cos+0xf8>
 8008306:	bf00      	nop
 8008308:	be8838d4 	.word	0xbe8838d4
 800830c:	bda8fae9 	.word	0xbda8fae9
 8008310:	bdb4b1c4 	.word	0xbdb4b1c4
 8008314:	3e21ee9e 	.word	0x3e21ee9e
 8008318:	809c52ad 	.word	0x809c52ad
 800831c:	3e927e4f 	.word	0x3e927e4f
 8008320:	19cb1590 	.word	0x19cb1590
 8008324:	3efa01a0 	.word	0x3efa01a0
 8008328:	16c15177 	.word	0x16c15177
 800832c:	3f56c16c 	.word	0x3f56c16c
 8008330:	5555554c 	.word	0x5555554c
 8008334:	3fa55555 	.word	0x3fa55555
 8008338:	3fe00000 	.word	0x3fe00000
 800833c:	3fd33332 	.word	0x3fd33332
 8008340:	3ff00000 	.word	0x3ff00000
 8008344:	3fe90000 	.word	0x3fe90000
 8008348:	3fd20000 	.word	0x3fd20000
 800834c:	00000000 	.word	0x00000000

08008350 <__kernel_rem_pio2>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	ed2d 8b02 	vpush	{d8}
 8008358:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800835c:	1ed4      	subs	r4, r2, #3
 800835e:	9308      	str	r3, [sp, #32]
 8008360:	9101      	str	r1, [sp, #4]
 8008362:	4bc5      	ldr	r3, [pc, #788]	; (8008678 <__kernel_rem_pio2+0x328>)
 8008364:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8008366:	9009      	str	r0, [sp, #36]	; 0x24
 8008368:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800836c:	9304      	str	r3, [sp, #16]
 800836e:	9b08      	ldr	r3, [sp, #32]
 8008370:	3b01      	subs	r3, #1
 8008372:	9307      	str	r3, [sp, #28]
 8008374:	2318      	movs	r3, #24
 8008376:	fb94 f4f3 	sdiv	r4, r4, r3
 800837a:	f06f 0317 	mvn.w	r3, #23
 800837e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008382:	fb04 3303 	mla	r3, r4, r3, r3
 8008386:	eb03 0a02 	add.w	sl, r3, r2
 800838a:	9b04      	ldr	r3, [sp, #16]
 800838c:	9a07      	ldr	r2, [sp, #28]
 800838e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8008668 <__kernel_rem_pio2+0x318>
 8008392:	eb03 0802 	add.w	r8, r3, r2
 8008396:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008398:	1aa7      	subs	r7, r4, r2
 800839a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800839e:	ae22      	add	r6, sp, #136	; 0x88
 80083a0:	2500      	movs	r5, #0
 80083a2:	4545      	cmp	r5, r8
 80083a4:	dd13      	ble.n	80083ce <__kernel_rem_pio2+0x7e>
 80083a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8008668 <__kernel_rem_pio2+0x318>
 80083aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80083ae:	2600      	movs	r6, #0
 80083b0:	9b04      	ldr	r3, [sp, #16]
 80083b2:	429e      	cmp	r6, r3
 80083b4:	dc32      	bgt.n	800841c <__kernel_rem_pio2+0xcc>
 80083b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083b8:	9302      	str	r3, [sp, #8]
 80083ba:	9b08      	ldr	r3, [sp, #32]
 80083bc:	199d      	adds	r5, r3, r6
 80083be:	ab22      	add	r3, sp, #136	; 0x88
 80083c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80083c4:	9306      	str	r3, [sp, #24]
 80083c6:	ec59 8b18 	vmov	r8, r9, d8
 80083ca:	2700      	movs	r7, #0
 80083cc:	e01f      	b.n	800840e <__kernel_rem_pio2+0xbe>
 80083ce:	42ef      	cmn	r7, r5
 80083d0:	d407      	bmi.n	80083e2 <__kernel_rem_pio2+0x92>
 80083d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80083d6:	f7f8 f85d 	bl	8000494 <__aeabi_i2d>
 80083da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80083de:	3501      	adds	r5, #1
 80083e0:	e7df      	b.n	80083a2 <__kernel_rem_pio2+0x52>
 80083e2:	ec51 0b18 	vmov	r0, r1, d8
 80083e6:	e7f8      	b.n	80083da <__kernel_rem_pio2+0x8a>
 80083e8:	9906      	ldr	r1, [sp, #24]
 80083ea:	9d02      	ldr	r5, [sp, #8]
 80083ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80083f0:	9106      	str	r1, [sp, #24]
 80083f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80083f6:	9502      	str	r5, [sp, #8]
 80083f8:	f7f8 f8b6 	bl	8000568 <__aeabi_dmul>
 80083fc:	4602      	mov	r2, r0
 80083fe:	460b      	mov	r3, r1
 8008400:	4640      	mov	r0, r8
 8008402:	4649      	mov	r1, r9
 8008404:	f7f7 fefa 	bl	80001fc <__adddf3>
 8008408:	3701      	adds	r7, #1
 800840a:	4680      	mov	r8, r0
 800840c:	4689      	mov	r9, r1
 800840e:	9b07      	ldr	r3, [sp, #28]
 8008410:	429f      	cmp	r7, r3
 8008412:	dde9      	ble.n	80083e8 <__kernel_rem_pio2+0x98>
 8008414:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008418:	3601      	adds	r6, #1
 800841a:	e7c9      	b.n	80083b0 <__kernel_rem_pio2+0x60>
 800841c:	9b04      	ldr	r3, [sp, #16]
 800841e:	aa0e      	add	r2, sp, #56	; 0x38
 8008420:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008424:	930c      	str	r3, [sp, #48]	; 0x30
 8008426:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8008428:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800842c:	9c04      	ldr	r4, [sp, #16]
 800842e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008430:	ab9a      	add	r3, sp, #616	; 0x268
 8008432:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8008436:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800843a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800843e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008442:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8008446:	ab9a      	add	r3, sp, #616	; 0x268
 8008448:	445b      	add	r3, fp
 800844a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800844e:	2500      	movs	r5, #0
 8008450:	1b63      	subs	r3, r4, r5
 8008452:	2b00      	cmp	r3, #0
 8008454:	dc78      	bgt.n	8008548 <__kernel_rem_pio2+0x1f8>
 8008456:	4650      	mov	r0, sl
 8008458:	ec49 8b10 	vmov	d0, r8, r9
 800845c:	f000 fc00 	bl	8008c60 <scalbn>
 8008460:	ec57 6b10 	vmov	r6, r7, d0
 8008464:	2200      	movs	r2, #0
 8008466:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800846a:	ee10 0a10 	vmov	r0, s0
 800846e:	4639      	mov	r1, r7
 8008470:	f7f8 f87a 	bl	8000568 <__aeabi_dmul>
 8008474:	ec41 0b10 	vmov	d0, r0, r1
 8008478:	f000 fb6e 	bl	8008b58 <floor>
 800847c:	2200      	movs	r2, #0
 800847e:	ec51 0b10 	vmov	r0, r1, d0
 8008482:	4b7e      	ldr	r3, [pc, #504]	; (800867c <__kernel_rem_pio2+0x32c>)
 8008484:	f7f8 f870 	bl	8000568 <__aeabi_dmul>
 8008488:	4602      	mov	r2, r0
 800848a:	460b      	mov	r3, r1
 800848c:	4630      	mov	r0, r6
 800848e:	4639      	mov	r1, r7
 8008490:	f7f7 feb2 	bl	80001f8 <__aeabi_dsub>
 8008494:	460f      	mov	r7, r1
 8008496:	4606      	mov	r6, r0
 8008498:	f7f8 fb00 	bl	8000a9c <__aeabi_d2iz>
 800849c:	9006      	str	r0, [sp, #24]
 800849e:	f7f7 fff9 	bl	8000494 <__aeabi_i2d>
 80084a2:	4602      	mov	r2, r0
 80084a4:	460b      	mov	r3, r1
 80084a6:	4630      	mov	r0, r6
 80084a8:	4639      	mov	r1, r7
 80084aa:	f7f7 fea5 	bl	80001f8 <__aeabi_dsub>
 80084ae:	f1ba 0f00 	cmp.w	sl, #0
 80084b2:	4606      	mov	r6, r0
 80084b4:	460f      	mov	r7, r1
 80084b6:	dd6c      	ble.n	8008592 <__kernel_rem_pio2+0x242>
 80084b8:	1e62      	subs	r2, r4, #1
 80084ba:	ab0e      	add	r3, sp, #56	; 0x38
 80084bc:	f1ca 0118 	rsb	r1, sl, #24
 80084c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80084c4:	9d06      	ldr	r5, [sp, #24]
 80084c6:	fa40 f301 	asr.w	r3, r0, r1
 80084ca:	441d      	add	r5, r3
 80084cc:	408b      	lsls	r3, r1
 80084ce:	1ac0      	subs	r0, r0, r3
 80084d0:	ab0e      	add	r3, sp, #56	; 0x38
 80084d2:	9506      	str	r5, [sp, #24]
 80084d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80084d8:	f1ca 0317 	rsb	r3, sl, #23
 80084dc:	fa40 f303 	asr.w	r3, r0, r3
 80084e0:	9302      	str	r3, [sp, #8]
 80084e2:	9b02      	ldr	r3, [sp, #8]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	dd62      	ble.n	80085ae <__kernel_rem_pio2+0x25e>
 80084e8:	9b06      	ldr	r3, [sp, #24]
 80084ea:	2200      	movs	r2, #0
 80084ec:	3301      	adds	r3, #1
 80084ee:	9306      	str	r3, [sp, #24]
 80084f0:	4615      	mov	r5, r2
 80084f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80084f6:	4294      	cmp	r4, r2
 80084f8:	f300 8095 	bgt.w	8008626 <__kernel_rem_pio2+0x2d6>
 80084fc:	f1ba 0f00 	cmp.w	sl, #0
 8008500:	dd07      	ble.n	8008512 <__kernel_rem_pio2+0x1c2>
 8008502:	f1ba 0f01 	cmp.w	sl, #1
 8008506:	f000 80a2 	beq.w	800864e <__kernel_rem_pio2+0x2fe>
 800850a:	f1ba 0f02 	cmp.w	sl, #2
 800850e:	f000 80c1 	beq.w	8008694 <__kernel_rem_pio2+0x344>
 8008512:	9b02      	ldr	r3, [sp, #8]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d14a      	bne.n	80085ae <__kernel_rem_pio2+0x25e>
 8008518:	4632      	mov	r2, r6
 800851a:	463b      	mov	r3, r7
 800851c:	2000      	movs	r0, #0
 800851e:	4958      	ldr	r1, [pc, #352]	; (8008680 <__kernel_rem_pio2+0x330>)
 8008520:	f7f7 fe6a 	bl	80001f8 <__aeabi_dsub>
 8008524:	4606      	mov	r6, r0
 8008526:	460f      	mov	r7, r1
 8008528:	2d00      	cmp	r5, #0
 800852a:	d040      	beq.n	80085ae <__kernel_rem_pio2+0x25e>
 800852c:	4650      	mov	r0, sl
 800852e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8008670 <__kernel_rem_pio2+0x320>
 8008532:	f000 fb95 	bl	8008c60 <scalbn>
 8008536:	4630      	mov	r0, r6
 8008538:	4639      	mov	r1, r7
 800853a:	ec53 2b10 	vmov	r2, r3, d0
 800853e:	f7f7 fe5b 	bl	80001f8 <__aeabi_dsub>
 8008542:	4606      	mov	r6, r0
 8008544:	460f      	mov	r7, r1
 8008546:	e032      	b.n	80085ae <__kernel_rem_pio2+0x25e>
 8008548:	2200      	movs	r2, #0
 800854a:	4b4e      	ldr	r3, [pc, #312]	; (8008684 <__kernel_rem_pio2+0x334>)
 800854c:	4640      	mov	r0, r8
 800854e:	4649      	mov	r1, r9
 8008550:	f7f8 f80a 	bl	8000568 <__aeabi_dmul>
 8008554:	f7f8 faa2 	bl	8000a9c <__aeabi_d2iz>
 8008558:	f7f7 ff9c 	bl	8000494 <__aeabi_i2d>
 800855c:	2200      	movs	r2, #0
 800855e:	4b4a      	ldr	r3, [pc, #296]	; (8008688 <__kernel_rem_pio2+0x338>)
 8008560:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008564:	f7f8 f800 	bl	8000568 <__aeabi_dmul>
 8008568:	4602      	mov	r2, r0
 800856a:	460b      	mov	r3, r1
 800856c:	4640      	mov	r0, r8
 800856e:	4649      	mov	r1, r9
 8008570:	f7f7 fe42 	bl	80001f8 <__aeabi_dsub>
 8008574:	f7f8 fa92 	bl	8000a9c <__aeabi_d2iz>
 8008578:	ab0e      	add	r3, sp, #56	; 0x38
 800857a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800857e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8008582:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008586:	f7f7 fe39 	bl	80001fc <__adddf3>
 800858a:	3501      	adds	r5, #1
 800858c:	4680      	mov	r8, r0
 800858e:	4689      	mov	r9, r1
 8008590:	e75e      	b.n	8008450 <__kernel_rem_pio2+0x100>
 8008592:	d105      	bne.n	80085a0 <__kernel_rem_pio2+0x250>
 8008594:	1e63      	subs	r3, r4, #1
 8008596:	aa0e      	add	r2, sp, #56	; 0x38
 8008598:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800859c:	15c3      	asrs	r3, r0, #23
 800859e:	e79f      	b.n	80084e0 <__kernel_rem_pio2+0x190>
 80085a0:	2200      	movs	r2, #0
 80085a2:	4b3a      	ldr	r3, [pc, #232]	; (800868c <__kernel_rem_pio2+0x33c>)
 80085a4:	f7f8 fa66 	bl	8000a74 <__aeabi_dcmpge>
 80085a8:	2800      	cmp	r0, #0
 80085aa:	d139      	bne.n	8008620 <__kernel_rem_pio2+0x2d0>
 80085ac:	9002      	str	r0, [sp, #8]
 80085ae:	2200      	movs	r2, #0
 80085b0:	2300      	movs	r3, #0
 80085b2:	4630      	mov	r0, r6
 80085b4:	4639      	mov	r1, r7
 80085b6:	f7f8 fa3f 	bl	8000a38 <__aeabi_dcmpeq>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	f000 80c7 	beq.w	800874e <__kernel_rem_pio2+0x3fe>
 80085c0:	1e65      	subs	r5, r4, #1
 80085c2:	462b      	mov	r3, r5
 80085c4:	2200      	movs	r2, #0
 80085c6:	9904      	ldr	r1, [sp, #16]
 80085c8:	428b      	cmp	r3, r1
 80085ca:	da6a      	bge.n	80086a2 <__kernel_rem_pio2+0x352>
 80085cc:	2a00      	cmp	r2, #0
 80085ce:	f000 8088 	beq.w	80086e2 <__kernel_rem_pio2+0x392>
 80085d2:	ab0e      	add	r3, sp, #56	; 0x38
 80085d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80085d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	f000 80b4 	beq.w	800874a <__kernel_rem_pio2+0x3fa>
 80085e2:	4650      	mov	r0, sl
 80085e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008670 <__kernel_rem_pio2+0x320>
 80085e8:	f000 fb3a 	bl	8008c60 <scalbn>
 80085ec:	00ec      	lsls	r4, r5, #3
 80085ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80085f0:	191e      	adds	r6, r3, r4
 80085f2:	ec59 8b10 	vmov	r8, r9, d0
 80085f6:	f106 0a08 	add.w	sl, r6, #8
 80085fa:	462f      	mov	r7, r5
 80085fc:	2f00      	cmp	r7, #0
 80085fe:	f280 80df 	bge.w	80087c0 <__kernel_rem_pio2+0x470>
 8008602:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8008668 <__kernel_rem_pio2+0x318>
 8008606:	f04f 0a00 	mov.w	sl, #0
 800860a:	eba5 030a 	sub.w	r3, r5, sl
 800860e:	2b00      	cmp	r3, #0
 8008610:	f2c0 810a 	blt.w	8008828 <__kernel_rem_pio2+0x4d8>
 8008614:	f8df b078 	ldr.w	fp, [pc, #120]	; 8008690 <__kernel_rem_pio2+0x340>
 8008618:	ec59 8b18 	vmov	r8, r9, d8
 800861c:	2700      	movs	r7, #0
 800861e:	e0f5      	b.n	800880c <__kernel_rem_pio2+0x4bc>
 8008620:	2302      	movs	r3, #2
 8008622:	9302      	str	r3, [sp, #8]
 8008624:	e760      	b.n	80084e8 <__kernel_rem_pio2+0x198>
 8008626:	ab0e      	add	r3, sp, #56	; 0x38
 8008628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800862c:	b94d      	cbnz	r5, 8008642 <__kernel_rem_pio2+0x2f2>
 800862e:	b12b      	cbz	r3, 800863c <__kernel_rem_pio2+0x2ec>
 8008630:	a80e      	add	r0, sp, #56	; 0x38
 8008632:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008636:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800863a:	2301      	movs	r3, #1
 800863c:	3201      	adds	r2, #1
 800863e:	461d      	mov	r5, r3
 8008640:	e759      	b.n	80084f6 <__kernel_rem_pio2+0x1a6>
 8008642:	a80e      	add	r0, sp, #56	; 0x38
 8008644:	1acb      	subs	r3, r1, r3
 8008646:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800864a:	462b      	mov	r3, r5
 800864c:	e7f6      	b.n	800863c <__kernel_rem_pio2+0x2ec>
 800864e:	1e62      	subs	r2, r4, #1
 8008650:	ab0e      	add	r3, sp, #56	; 0x38
 8008652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008656:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800865a:	a90e      	add	r1, sp, #56	; 0x38
 800865c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8008660:	e757      	b.n	8008512 <__kernel_rem_pio2+0x1c2>
 8008662:	bf00      	nop
 8008664:	f3af 8000 	nop.w
	...
 8008674:	3ff00000 	.word	0x3ff00000
 8008678:	08008fb8 	.word	0x08008fb8
 800867c:	40200000 	.word	0x40200000
 8008680:	3ff00000 	.word	0x3ff00000
 8008684:	3e700000 	.word	0x3e700000
 8008688:	41700000 	.word	0x41700000
 800868c:	3fe00000 	.word	0x3fe00000
 8008690:	08008f78 	.word	0x08008f78
 8008694:	1e62      	subs	r2, r4, #1
 8008696:	ab0e      	add	r3, sp, #56	; 0x38
 8008698:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800869c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80086a0:	e7db      	b.n	800865a <__kernel_rem_pio2+0x30a>
 80086a2:	a90e      	add	r1, sp, #56	; 0x38
 80086a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80086a8:	3b01      	subs	r3, #1
 80086aa:	430a      	orrs	r2, r1
 80086ac:	e78b      	b.n	80085c6 <__kernel_rem_pio2+0x276>
 80086ae:	3301      	adds	r3, #1
 80086b0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80086b4:	2900      	cmp	r1, #0
 80086b6:	d0fa      	beq.n	80086ae <__kernel_rem_pio2+0x35e>
 80086b8:	9a08      	ldr	r2, [sp, #32]
 80086ba:	4422      	add	r2, r4
 80086bc:	00d2      	lsls	r2, r2, #3
 80086be:	a922      	add	r1, sp, #136	; 0x88
 80086c0:	18e3      	adds	r3, r4, r3
 80086c2:	9206      	str	r2, [sp, #24]
 80086c4:	440a      	add	r2, r1
 80086c6:	9302      	str	r3, [sp, #8]
 80086c8:	f10b 0108 	add.w	r1, fp, #8
 80086cc:	f102 0308 	add.w	r3, r2, #8
 80086d0:	1c66      	adds	r6, r4, #1
 80086d2:	910a      	str	r1, [sp, #40]	; 0x28
 80086d4:	2500      	movs	r5, #0
 80086d6:	930d      	str	r3, [sp, #52]	; 0x34
 80086d8:	9b02      	ldr	r3, [sp, #8]
 80086da:	42b3      	cmp	r3, r6
 80086dc:	da04      	bge.n	80086e8 <__kernel_rem_pio2+0x398>
 80086de:	461c      	mov	r4, r3
 80086e0:	e6a6      	b.n	8008430 <__kernel_rem_pio2+0xe0>
 80086e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80086e4:	2301      	movs	r3, #1
 80086e6:	e7e3      	b.n	80086b0 <__kernel_rem_pio2+0x360>
 80086e8:	9b06      	ldr	r3, [sp, #24]
 80086ea:	18ef      	adds	r7, r5, r3
 80086ec:	ab22      	add	r3, sp, #136	; 0x88
 80086ee:	441f      	add	r7, r3
 80086f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086f2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80086f6:	f7f7 fecd 	bl	8000494 <__aeabi_i2d>
 80086fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086fc:	461c      	mov	r4, r3
 80086fe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008700:	e9c7 0100 	strd	r0, r1, [r7]
 8008704:	eb03 0b05 	add.w	fp, r3, r5
 8008708:	2700      	movs	r7, #0
 800870a:	f04f 0800 	mov.w	r8, #0
 800870e:	f04f 0900 	mov.w	r9, #0
 8008712:	9b07      	ldr	r3, [sp, #28]
 8008714:	429f      	cmp	r7, r3
 8008716:	dd08      	ble.n	800872a <__kernel_rem_pio2+0x3da>
 8008718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800871a:	aa72      	add	r2, sp, #456	; 0x1c8
 800871c:	18eb      	adds	r3, r5, r3
 800871e:	4413      	add	r3, r2
 8008720:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8008724:	3601      	adds	r6, #1
 8008726:	3508      	adds	r5, #8
 8008728:	e7d6      	b.n	80086d8 <__kernel_rem_pio2+0x388>
 800872a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800872e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8008732:	f7f7 ff19 	bl	8000568 <__aeabi_dmul>
 8008736:	4602      	mov	r2, r0
 8008738:	460b      	mov	r3, r1
 800873a:	4640      	mov	r0, r8
 800873c:	4649      	mov	r1, r9
 800873e:	f7f7 fd5d 	bl	80001fc <__adddf3>
 8008742:	3701      	adds	r7, #1
 8008744:	4680      	mov	r8, r0
 8008746:	4689      	mov	r9, r1
 8008748:	e7e3      	b.n	8008712 <__kernel_rem_pio2+0x3c2>
 800874a:	3d01      	subs	r5, #1
 800874c:	e741      	b.n	80085d2 <__kernel_rem_pio2+0x282>
 800874e:	f1ca 0000 	rsb	r0, sl, #0
 8008752:	ec47 6b10 	vmov	d0, r6, r7
 8008756:	f000 fa83 	bl	8008c60 <scalbn>
 800875a:	ec57 6b10 	vmov	r6, r7, d0
 800875e:	2200      	movs	r2, #0
 8008760:	4b99      	ldr	r3, [pc, #612]	; (80089c8 <__kernel_rem_pio2+0x678>)
 8008762:	ee10 0a10 	vmov	r0, s0
 8008766:	4639      	mov	r1, r7
 8008768:	f7f8 f984 	bl	8000a74 <__aeabi_dcmpge>
 800876c:	b1f8      	cbz	r0, 80087ae <__kernel_rem_pio2+0x45e>
 800876e:	2200      	movs	r2, #0
 8008770:	4b96      	ldr	r3, [pc, #600]	; (80089cc <__kernel_rem_pio2+0x67c>)
 8008772:	4630      	mov	r0, r6
 8008774:	4639      	mov	r1, r7
 8008776:	f7f7 fef7 	bl	8000568 <__aeabi_dmul>
 800877a:	f7f8 f98f 	bl	8000a9c <__aeabi_d2iz>
 800877e:	4680      	mov	r8, r0
 8008780:	f7f7 fe88 	bl	8000494 <__aeabi_i2d>
 8008784:	2200      	movs	r2, #0
 8008786:	4b90      	ldr	r3, [pc, #576]	; (80089c8 <__kernel_rem_pio2+0x678>)
 8008788:	f7f7 feee 	bl	8000568 <__aeabi_dmul>
 800878c:	460b      	mov	r3, r1
 800878e:	4602      	mov	r2, r0
 8008790:	4639      	mov	r1, r7
 8008792:	4630      	mov	r0, r6
 8008794:	f7f7 fd30 	bl	80001f8 <__aeabi_dsub>
 8008798:	f7f8 f980 	bl	8000a9c <__aeabi_d2iz>
 800879c:	1c65      	adds	r5, r4, #1
 800879e:	ab0e      	add	r3, sp, #56	; 0x38
 80087a0:	f10a 0a18 	add.w	sl, sl, #24
 80087a4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80087a8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80087ac:	e719      	b.n	80085e2 <__kernel_rem_pio2+0x292>
 80087ae:	4630      	mov	r0, r6
 80087b0:	4639      	mov	r1, r7
 80087b2:	f7f8 f973 	bl	8000a9c <__aeabi_d2iz>
 80087b6:	ab0e      	add	r3, sp, #56	; 0x38
 80087b8:	4625      	mov	r5, r4
 80087ba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80087be:	e710      	b.n	80085e2 <__kernel_rem_pio2+0x292>
 80087c0:	ab0e      	add	r3, sp, #56	; 0x38
 80087c2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80087c6:	f7f7 fe65 	bl	8000494 <__aeabi_i2d>
 80087ca:	4642      	mov	r2, r8
 80087cc:	464b      	mov	r3, r9
 80087ce:	f7f7 fecb 	bl	8000568 <__aeabi_dmul>
 80087d2:	2200      	movs	r2, #0
 80087d4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80087d8:	4b7c      	ldr	r3, [pc, #496]	; (80089cc <__kernel_rem_pio2+0x67c>)
 80087da:	4640      	mov	r0, r8
 80087dc:	4649      	mov	r1, r9
 80087de:	f7f7 fec3 	bl	8000568 <__aeabi_dmul>
 80087e2:	3f01      	subs	r7, #1
 80087e4:	4680      	mov	r8, r0
 80087e6:	4689      	mov	r9, r1
 80087e8:	e708      	b.n	80085fc <__kernel_rem_pio2+0x2ac>
 80087ea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80087ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087f2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80087f6:	f7f7 feb7 	bl	8000568 <__aeabi_dmul>
 80087fa:	4602      	mov	r2, r0
 80087fc:	460b      	mov	r3, r1
 80087fe:	4640      	mov	r0, r8
 8008800:	4649      	mov	r1, r9
 8008802:	f7f7 fcfb 	bl	80001fc <__adddf3>
 8008806:	3701      	adds	r7, #1
 8008808:	4680      	mov	r8, r0
 800880a:	4689      	mov	r9, r1
 800880c:	9b04      	ldr	r3, [sp, #16]
 800880e:	429f      	cmp	r7, r3
 8008810:	dc01      	bgt.n	8008816 <__kernel_rem_pio2+0x4c6>
 8008812:	45ba      	cmp	sl, r7
 8008814:	dae9      	bge.n	80087ea <__kernel_rem_pio2+0x49a>
 8008816:	ab4a      	add	r3, sp, #296	; 0x128
 8008818:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800881c:	e9c3 8900 	strd	r8, r9, [r3]
 8008820:	f10a 0a01 	add.w	sl, sl, #1
 8008824:	3e08      	subs	r6, #8
 8008826:	e6f0      	b.n	800860a <__kernel_rem_pio2+0x2ba>
 8008828:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800882a:	2b03      	cmp	r3, #3
 800882c:	d85b      	bhi.n	80088e6 <__kernel_rem_pio2+0x596>
 800882e:	e8df f003 	tbb	[pc, r3]
 8008832:	264a      	.short	0x264a
 8008834:	0226      	.short	0x0226
 8008836:	ab9a      	add	r3, sp, #616	; 0x268
 8008838:	441c      	add	r4, r3
 800883a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800883e:	46a2      	mov	sl, r4
 8008840:	46ab      	mov	fp, r5
 8008842:	f1bb 0f00 	cmp.w	fp, #0
 8008846:	dc6c      	bgt.n	8008922 <__kernel_rem_pio2+0x5d2>
 8008848:	46a2      	mov	sl, r4
 800884a:	46ab      	mov	fp, r5
 800884c:	f1bb 0f01 	cmp.w	fp, #1
 8008850:	f300 8086 	bgt.w	8008960 <__kernel_rem_pio2+0x610>
 8008854:	2000      	movs	r0, #0
 8008856:	2100      	movs	r1, #0
 8008858:	2d01      	cmp	r5, #1
 800885a:	f300 80a0 	bgt.w	800899e <__kernel_rem_pio2+0x64e>
 800885e:	9b02      	ldr	r3, [sp, #8]
 8008860:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8008864:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8008868:	2b00      	cmp	r3, #0
 800886a:	f040 809e 	bne.w	80089aa <__kernel_rem_pio2+0x65a>
 800886e:	9b01      	ldr	r3, [sp, #4]
 8008870:	e9c3 7800 	strd	r7, r8, [r3]
 8008874:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8008878:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800887c:	e033      	b.n	80088e6 <__kernel_rem_pio2+0x596>
 800887e:	3408      	adds	r4, #8
 8008880:	ab4a      	add	r3, sp, #296	; 0x128
 8008882:	441c      	add	r4, r3
 8008884:	462e      	mov	r6, r5
 8008886:	2000      	movs	r0, #0
 8008888:	2100      	movs	r1, #0
 800888a:	2e00      	cmp	r6, #0
 800888c:	da3a      	bge.n	8008904 <__kernel_rem_pio2+0x5b4>
 800888e:	9b02      	ldr	r3, [sp, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d03d      	beq.n	8008910 <__kernel_rem_pio2+0x5c0>
 8008894:	4602      	mov	r2, r0
 8008896:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800889a:	9c01      	ldr	r4, [sp, #4]
 800889c:	e9c4 2300 	strd	r2, r3, [r4]
 80088a0:	4602      	mov	r2, r0
 80088a2:	460b      	mov	r3, r1
 80088a4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80088a8:	f7f7 fca6 	bl	80001f8 <__aeabi_dsub>
 80088ac:	ae4c      	add	r6, sp, #304	; 0x130
 80088ae:	2401      	movs	r4, #1
 80088b0:	42a5      	cmp	r5, r4
 80088b2:	da30      	bge.n	8008916 <__kernel_rem_pio2+0x5c6>
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	b113      	cbz	r3, 80088be <__kernel_rem_pio2+0x56e>
 80088b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088bc:	4619      	mov	r1, r3
 80088be:	9b01      	ldr	r3, [sp, #4]
 80088c0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80088c4:	e00f      	b.n	80088e6 <__kernel_rem_pio2+0x596>
 80088c6:	ab9a      	add	r3, sp, #616	; 0x268
 80088c8:	441c      	add	r4, r3
 80088ca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80088ce:	2000      	movs	r0, #0
 80088d0:	2100      	movs	r1, #0
 80088d2:	2d00      	cmp	r5, #0
 80088d4:	da10      	bge.n	80088f8 <__kernel_rem_pio2+0x5a8>
 80088d6:	9b02      	ldr	r3, [sp, #8]
 80088d8:	b113      	cbz	r3, 80088e0 <__kernel_rem_pio2+0x590>
 80088da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80088de:	4619      	mov	r1, r3
 80088e0:	9b01      	ldr	r3, [sp, #4]
 80088e2:	e9c3 0100 	strd	r0, r1, [r3]
 80088e6:	9b06      	ldr	r3, [sp, #24]
 80088e8:	f003 0007 	and.w	r0, r3, #7
 80088ec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80088f0:	ecbd 8b02 	vpop	{d8}
 80088f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80088fc:	f7f7 fc7e 	bl	80001fc <__adddf3>
 8008900:	3d01      	subs	r5, #1
 8008902:	e7e6      	b.n	80088d2 <__kernel_rem_pio2+0x582>
 8008904:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8008908:	f7f7 fc78 	bl	80001fc <__adddf3>
 800890c:	3e01      	subs	r6, #1
 800890e:	e7bc      	b.n	800888a <__kernel_rem_pio2+0x53a>
 8008910:	4602      	mov	r2, r0
 8008912:	460b      	mov	r3, r1
 8008914:	e7c1      	b.n	800889a <__kernel_rem_pio2+0x54a>
 8008916:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800891a:	f7f7 fc6f 	bl	80001fc <__adddf3>
 800891e:	3401      	adds	r4, #1
 8008920:	e7c6      	b.n	80088b0 <__kernel_rem_pio2+0x560>
 8008922:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8008926:	ed3a 7b02 	vldmdb	sl!, {d7}
 800892a:	4640      	mov	r0, r8
 800892c:	ec53 2b17 	vmov	r2, r3, d7
 8008930:	4649      	mov	r1, r9
 8008932:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008936:	f7f7 fc61 	bl	80001fc <__adddf3>
 800893a:	4602      	mov	r2, r0
 800893c:	460b      	mov	r3, r1
 800893e:	4606      	mov	r6, r0
 8008940:	460f      	mov	r7, r1
 8008942:	4640      	mov	r0, r8
 8008944:	4649      	mov	r1, r9
 8008946:	f7f7 fc57 	bl	80001f8 <__aeabi_dsub>
 800894a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800894e:	f7f7 fc55 	bl	80001fc <__adddf3>
 8008952:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008956:	e9ca 0100 	strd	r0, r1, [sl]
 800895a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800895e:	e770      	b.n	8008842 <__kernel_rem_pio2+0x4f2>
 8008960:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8008964:	ed3a 7b02 	vldmdb	sl!, {d7}
 8008968:	4630      	mov	r0, r6
 800896a:	ec53 2b17 	vmov	r2, r3, d7
 800896e:	4639      	mov	r1, r7
 8008970:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008974:	f7f7 fc42 	bl	80001fc <__adddf3>
 8008978:	4602      	mov	r2, r0
 800897a:	460b      	mov	r3, r1
 800897c:	4680      	mov	r8, r0
 800897e:	4689      	mov	r9, r1
 8008980:	4630      	mov	r0, r6
 8008982:	4639      	mov	r1, r7
 8008984:	f7f7 fc38 	bl	80001f8 <__aeabi_dsub>
 8008988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800898c:	f7f7 fc36 	bl	80001fc <__adddf3>
 8008990:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008994:	e9ca 0100 	strd	r0, r1, [sl]
 8008998:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800899c:	e756      	b.n	800884c <__kernel_rem_pio2+0x4fc>
 800899e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80089a2:	f7f7 fc2b 	bl	80001fc <__adddf3>
 80089a6:	3d01      	subs	r5, #1
 80089a8:	e756      	b.n	8008858 <__kernel_rem_pio2+0x508>
 80089aa:	9b01      	ldr	r3, [sp, #4]
 80089ac:	9a01      	ldr	r2, [sp, #4]
 80089ae:	601f      	str	r7, [r3, #0]
 80089b0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80089b4:	605c      	str	r4, [r3, #4]
 80089b6:	609d      	str	r5, [r3, #8]
 80089b8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80089bc:	60d3      	str	r3, [r2, #12]
 80089be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80089c2:	6110      	str	r0, [r2, #16]
 80089c4:	6153      	str	r3, [r2, #20]
 80089c6:	e78e      	b.n	80088e6 <__kernel_rem_pio2+0x596>
 80089c8:	41700000 	.word	0x41700000
 80089cc:	3e700000 	.word	0x3e700000

080089d0 <__kernel_sin>:
 80089d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089d4:	ec55 4b10 	vmov	r4, r5, d0
 80089d8:	b085      	sub	sp, #20
 80089da:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80089de:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80089e2:	ed8d 1b00 	vstr	d1, [sp]
 80089e6:	9002      	str	r0, [sp, #8]
 80089e8:	da06      	bge.n	80089f8 <__kernel_sin+0x28>
 80089ea:	ee10 0a10 	vmov	r0, s0
 80089ee:	4629      	mov	r1, r5
 80089f0:	f7f8 f854 	bl	8000a9c <__aeabi_d2iz>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d051      	beq.n	8008a9c <__kernel_sin+0xcc>
 80089f8:	4622      	mov	r2, r4
 80089fa:	462b      	mov	r3, r5
 80089fc:	4620      	mov	r0, r4
 80089fe:	4629      	mov	r1, r5
 8008a00:	f7f7 fdb2 	bl	8000568 <__aeabi_dmul>
 8008a04:	4682      	mov	sl, r0
 8008a06:	468b      	mov	fp, r1
 8008a08:	4602      	mov	r2, r0
 8008a0a:	460b      	mov	r3, r1
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	4629      	mov	r1, r5
 8008a10:	f7f7 fdaa 	bl	8000568 <__aeabi_dmul>
 8008a14:	a341      	add	r3, pc, #260	; (adr r3, 8008b1c <__kernel_sin+0x14c>)
 8008a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a1a:	4680      	mov	r8, r0
 8008a1c:	4689      	mov	r9, r1
 8008a1e:	4650      	mov	r0, sl
 8008a20:	4659      	mov	r1, fp
 8008a22:	f7f7 fda1 	bl	8000568 <__aeabi_dmul>
 8008a26:	a33f      	add	r3, pc, #252	; (adr r3, 8008b24 <__kernel_sin+0x154>)
 8008a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2c:	f7f7 fbe4 	bl	80001f8 <__aeabi_dsub>
 8008a30:	4652      	mov	r2, sl
 8008a32:	465b      	mov	r3, fp
 8008a34:	f7f7 fd98 	bl	8000568 <__aeabi_dmul>
 8008a38:	a33c      	add	r3, pc, #240	; (adr r3, 8008b2c <__kernel_sin+0x15c>)
 8008a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3e:	f7f7 fbdd 	bl	80001fc <__adddf3>
 8008a42:	4652      	mov	r2, sl
 8008a44:	465b      	mov	r3, fp
 8008a46:	f7f7 fd8f 	bl	8000568 <__aeabi_dmul>
 8008a4a:	a33a      	add	r3, pc, #232	; (adr r3, 8008b34 <__kernel_sin+0x164>)
 8008a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a50:	f7f7 fbd2 	bl	80001f8 <__aeabi_dsub>
 8008a54:	4652      	mov	r2, sl
 8008a56:	465b      	mov	r3, fp
 8008a58:	f7f7 fd86 	bl	8000568 <__aeabi_dmul>
 8008a5c:	a337      	add	r3, pc, #220	; (adr r3, 8008b3c <__kernel_sin+0x16c>)
 8008a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a62:	f7f7 fbcb 	bl	80001fc <__adddf3>
 8008a66:	9b02      	ldr	r3, [sp, #8]
 8008a68:	4606      	mov	r6, r0
 8008a6a:	460f      	mov	r7, r1
 8008a6c:	b9db      	cbnz	r3, 8008aa6 <__kernel_sin+0xd6>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	460b      	mov	r3, r1
 8008a72:	4650      	mov	r0, sl
 8008a74:	4659      	mov	r1, fp
 8008a76:	f7f7 fd77 	bl	8000568 <__aeabi_dmul>
 8008a7a:	a325      	add	r3, pc, #148	; (adr r3, 8008b10 <__kernel_sin+0x140>)
 8008a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a80:	f7f7 fbba 	bl	80001f8 <__aeabi_dsub>
 8008a84:	4642      	mov	r2, r8
 8008a86:	464b      	mov	r3, r9
 8008a88:	f7f7 fd6e 	bl	8000568 <__aeabi_dmul>
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	460b      	mov	r3, r1
 8008a90:	4620      	mov	r0, r4
 8008a92:	4629      	mov	r1, r5
 8008a94:	f7f7 fbb2 	bl	80001fc <__adddf3>
 8008a98:	4604      	mov	r4, r0
 8008a9a:	460d      	mov	r5, r1
 8008a9c:	ec45 4b10 	vmov	d0, r4, r5
 8008aa0:	b005      	add	sp, #20
 8008aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	4b1b      	ldr	r3, [pc, #108]	; (8008b18 <__kernel_sin+0x148>)
 8008aaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008aae:	f7f7 fd5b 	bl	8000568 <__aeabi_dmul>
 8008ab2:	4632      	mov	r2, r6
 8008ab4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ab8:	463b      	mov	r3, r7
 8008aba:	4640      	mov	r0, r8
 8008abc:	4649      	mov	r1, r9
 8008abe:	f7f7 fd53 	bl	8000568 <__aeabi_dmul>
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aca:	f7f7 fb95 	bl	80001f8 <__aeabi_dsub>
 8008ace:	4652      	mov	r2, sl
 8008ad0:	465b      	mov	r3, fp
 8008ad2:	f7f7 fd49 	bl	8000568 <__aeabi_dmul>
 8008ad6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008ada:	f7f7 fb8d 	bl	80001f8 <__aeabi_dsub>
 8008ade:	a30c      	add	r3, pc, #48	; (adr r3, 8008b10 <__kernel_sin+0x140>)
 8008ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	460f      	mov	r7, r1
 8008ae8:	4640      	mov	r0, r8
 8008aea:	4649      	mov	r1, r9
 8008aec:	f7f7 fd3c 	bl	8000568 <__aeabi_dmul>
 8008af0:	4602      	mov	r2, r0
 8008af2:	460b      	mov	r3, r1
 8008af4:	4630      	mov	r0, r6
 8008af6:	4639      	mov	r1, r7
 8008af8:	f7f7 fb80 	bl	80001fc <__adddf3>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4620      	mov	r0, r4
 8008b02:	4629      	mov	r1, r5
 8008b04:	f7f7 fb78 	bl	80001f8 <__aeabi_dsub>
 8008b08:	e7c6      	b.n	8008a98 <__kernel_sin+0xc8>
 8008b0a:	bf00      	nop
 8008b0c:	f3af 8000 	nop.w
 8008b10:	55555549 	.word	0x55555549
 8008b14:	3fc55555 	.word	0x3fc55555
 8008b18:	3fe00000 	.word	0x3fe00000
 8008b1c:	5acfd57c 	.word	0x5acfd57c
 8008b20:	3de5d93a 	.word	0x3de5d93a
 8008b24:	8a2b9ceb 	.word	0x8a2b9ceb
 8008b28:	3e5ae5e6 	.word	0x3e5ae5e6
 8008b2c:	57b1fe7d 	.word	0x57b1fe7d
 8008b30:	3ec71de3 	.word	0x3ec71de3
 8008b34:	19c161d5 	.word	0x19c161d5
 8008b38:	3f2a01a0 	.word	0x3f2a01a0
 8008b3c:	1110f8a6 	.word	0x1110f8a6
 8008b40:	3f811111 	.word	0x3f811111

08008b44 <fabs>:
 8008b44:	ec51 0b10 	vmov	r0, r1, d0
 8008b48:	ee10 2a10 	vmov	r2, s0
 8008b4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008b50:	ec43 2b10 	vmov	d0, r2, r3
 8008b54:	4770      	bx	lr
	...

08008b58 <floor>:
 8008b58:	ec51 0b10 	vmov	r0, r1, d0
 8008b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008b64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008b68:	2e13      	cmp	r6, #19
 8008b6a:	460c      	mov	r4, r1
 8008b6c:	ee10 5a10 	vmov	r5, s0
 8008b70:	4680      	mov	r8, r0
 8008b72:	dc34      	bgt.n	8008bde <floor+0x86>
 8008b74:	2e00      	cmp	r6, #0
 8008b76:	da16      	bge.n	8008ba6 <floor+0x4e>
 8008b78:	a335      	add	r3, pc, #212	; (adr r3, 8008c50 <floor+0xf8>)
 8008b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b7e:	f7f7 fb3d 	bl	80001fc <__adddf3>
 8008b82:	2200      	movs	r2, #0
 8008b84:	2300      	movs	r3, #0
 8008b86:	f7f7 ff7f 	bl	8000a88 <__aeabi_dcmpgt>
 8008b8a:	b148      	cbz	r0, 8008ba0 <floor+0x48>
 8008b8c:	2c00      	cmp	r4, #0
 8008b8e:	da59      	bge.n	8008c44 <floor+0xec>
 8008b90:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008b94:	4a30      	ldr	r2, [pc, #192]	; (8008c58 <floor+0x100>)
 8008b96:	432b      	orrs	r3, r5
 8008b98:	2500      	movs	r5, #0
 8008b9a:	42ab      	cmp	r3, r5
 8008b9c:	bf18      	it	ne
 8008b9e:	4614      	movne	r4, r2
 8008ba0:	4621      	mov	r1, r4
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	e025      	b.n	8008bf2 <floor+0x9a>
 8008ba6:	4f2d      	ldr	r7, [pc, #180]	; (8008c5c <floor+0x104>)
 8008ba8:	4137      	asrs	r7, r6
 8008baa:	ea01 0307 	and.w	r3, r1, r7
 8008bae:	4303      	orrs	r3, r0
 8008bb0:	d01f      	beq.n	8008bf2 <floor+0x9a>
 8008bb2:	a327      	add	r3, pc, #156	; (adr r3, 8008c50 <floor+0xf8>)
 8008bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb8:	f7f7 fb20 	bl	80001fc <__adddf3>
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	f7f7 ff62 	bl	8000a88 <__aeabi_dcmpgt>
 8008bc4:	2800      	cmp	r0, #0
 8008bc6:	d0eb      	beq.n	8008ba0 <floor+0x48>
 8008bc8:	2c00      	cmp	r4, #0
 8008bca:	bfbe      	ittt	lt
 8008bcc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008bd0:	fa43 f606 	asrlt.w	r6, r3, r6
 8008bd4:	19a4      	addlt	r4, r4, r6
 8008bd6:	ea24 0407 	bic.w	r4, r4, r7
 8008bda:	2500      	movs	r5, #0
 8008bdc:	e7e0      	b.n	8008ba0 <floor+0x48>
 8008bde:	2e33      	cmp	r6, #51	; 0x33
 8008be0:	dd0b      	ble.n	8008bfa <floor+0xa2>
 8008be2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008be6:	d104      	bne.n	8008bf2 <floor+0x9a>
 8008be8:	ee10 2a10 	vmov	r2, s0
 8008bec:	460b      	mov	r3, r1
 8008bee:	f7f7 fb05 	bl	80001fc <__adddf3>
 8008bf2:	ec41 0b10 	vmov	d0, r0, r1
 8008bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8008c02:	fa23 f707 	lsr.w	r7, r3, r7
 8008c06:	4207      	tst	r7, r0
 8008c08:	d0f3      	beq.n	8008bf2 <floor+0x9a>
 8008c0a:	a311      	add	r3, pc, #68	; (adr r3, 8008c50 <floor+0xf8>)
 8008c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c10:	f7f7 faf4 	bl	80001fc <__adddf3>
 8008c14:	2200      	movs	r2, #0
 8008c16:	2300      	movs	r3, #0
 8008c18:	f7f7 ff36 	bl	8000a88 <__aeabi_dcmpgt>
 8008c1c:	2800      	cmp	r0, #0
 8008c1e:	d0bf      	beq.n	8008ba0 <floor+0x48>
 8008c20:	2c00      	cmp	r4, #0
 8008c22:	da02      	bge.n	8008c2a <floor+0xd2>
 8008c24:	2e14      	cmp	r6, #20
 8008c26:	d103      	bne.n	8008c30 <floor+0xd8>
 8008c28:	3401      	adds	r4, #1
 8008c2a:	ea25 0507 	bic.w	r5, r5, r7
 8008c2e:	e7b7      	b.n	8008ba0 <floor+0x48>
 8008c30:	2301      	movs	r3, #1
 8008c32:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008c36:	fa03 f606 	lsl.w	r6, r3, r6
 8008c3a:	4435      	add	r5, r6
 8008c3c:	4545      	cmp	r5, r8
 8008c3e:	bf38      	it	cc
 8008c40:	18e4      	addcc	r4, r4, r3
 8008c42:	e7f2      	b.n	8008c2a <floor+0xd2>
 8008c44:	2500      	movs	r5, #0
 8008c46:	462c      	mov	r4, r5
 8008c48:	e7aa      	b.n	8008ba0 <floor+0x48>
 8008c4a:	bf00      	nop
 8008c4c:	f3af 8000 	nop.w
 8008c50:	8800759c 	.word	0x8800759c
 8008c54:	7e37e43c 	.word	0x7e37e43c
 8008c58:	bff00000 	.word	0xbff00000
 8008c5c:	000fffff 	.word	0x000fffff

08008c60 <scalbn>:
 8008c60:	b570      	push	{r4, r5, r6, lr}
 8008c62:	ec55 4b10 	vmov	r4, r5, d0
 8008c66:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008c6a:	4606      	mov	r6, r0
 8008c6c:	462b      	mov	r3, r5
 8008c6e:	b9aa      	cbnz	r2, 8008c9c <scalbn+0x3c>
 8008c70:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008c74:	4323      	orrs	r3, r4
 8008c76:	d03b      	beq.n	8008cf0 <scalbn+0x90>
 8008c78:	4b31      	ldr	r3, [pc, #196]	; (8008d40 <scalbn+0xe0>)
 8008c7a:	4629      	mov	r1, r5
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	ee10 0a10 	vmov	r0, s0
 8008c82:	f7f7 fc71 	bl	8000568 <__aeabi_dmul>
 8008c86:	4b2f      	ldr	r3, [pc, #188]	; (8008d44 <scalbn+0xe4>)
 8008c88:	429e      	cmp	r6, r3
 8008c8a:	4604      	mov	r4, r0
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	da12      	bge.n	8008cb6 <scalbn+0x56>
 8008c90:	a327      	add	r3, pc, #156	; (adr r3, 8008d30 <scalbn+0xd0>)
 8008c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c96:	f7f7 fc67 	bl	8000568 <__aeabi_dmul>
 8008c9a:	e009      	b.n	8008cb0 <scalbn+0x50>
 8008c9c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008ca0:	428a      	cmp	r2, r1
 8008ca2:	d10c      	bne.n	8008cbe <scalbn+0x5e>
 8008ca4:	ee10 2a10 	vmov	r2, s0
 8008ca8:	4620      	mov	r0, r4
 8008caa:	4629      	mov	r1, r5
 8008cac:	f7f7 faa6 	bl	80001fc <__adddf3>
 8008cb0:	4604      	mov	r4, r0
 8008cb2:	460d      	mov	r5, r1
 8008cb4:	e01c      	b.n	8008cf0 <scalbn+0x90>
 8008cb6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008cba:	460b      	mov	r3, r1
 8008cbc:	3a36      	subs	r2, #54	; 0x36
 8008cbe:	4432      	add	r2, r6
 8008cc0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008cc4:	428a      	cmp	r2, r1
 8008cc6:	dd0b      	ble.n	8008ce0 <scalbn+0x80>
 8008cc8:	ec45 4b11 	vmov	d1, r4, r5
 8008ccc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8008d38 <scalbn+0xd8>
 8008cd0:	f000 f83c 	bl	8008d4c <copysign>
 8008cd4:	a318      	add	r3, pc, #96	; (adr r3, 8008d38 <scalbn+0xd8>)
 8008cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cda:	ec51 0b10 	vmov	r0, r1, d0
 8008cde:	e7da      	b.n	8008c96 <scalbn+0x36>
 8008ce0:	2a00      	cmp	r2, #0
 8008ce2:	dd08      	ble.n	8008cf6 <scalbn+0x96>
 8008ce4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008ce8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008cec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008cf0:	ec45 4b10 	vmov	d0, r4, r5
 8008cf4:	bd70      	pop	{r4, r5, r6, pc}
 8008cf6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8008cfa:	da0d      	bge.n	8008d18 <scalbn+0xb8>
 8008cfc:	f24c 3350 	movw	r3, #50000	; 0xc350
 8008d00:	429e      	cmp	r6, r3
 8008d02:	ec45 4b11 	vmov	d1, r4, r5
 8008d06:	dce1      	bgt.n	8008ccc <scalbn+0x6c>
 8008d08:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8008d30 <scalbn+0xd0>
 8008d0c:	f000 f81e 	bl	8008d4c <copysign>
 8008d10:	a307      	add	r3, pc, #28	; (adr r3, 8008d30 <scalbn+0xd0>)
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	e7e0      	b.n	8008cda <scalbn+0x7a>
 8008d18:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8008d1c:	3236      	adds	r2, #54	; 0x36
 8008d1e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008d22:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008d26:	4620      	mov	r0, r4
 8008d28:	4629      	mov	r1, r5
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	4b06      	ldr	r3, [pc, #24]	; (8008d48 <scalbn+0xe8>)
 8008d2e:	e7b2      	b.n	8008c96 <scalbn+0x36>
 8008d30:	c2f8f359 	.word	0xc2f8f359
 8008d34:	01a56e1f 	.word	0x01a56e1f
 8008d38:	8800759c 	.word	0x8800759c
 8008d3c:	7e37e43c 	.word	0x7e37e43c
 8008d40:	43500000 	.word	0x43500000
 8008d44:	ffff3cb0 	.word	0xffff3cb0
 8008d48:	3c900000 	.word	0x3c900000

08008d4c <copysign>:
 8008d4c:	ec51 0b10 	vmov	r0, r1, d0
 8008d50:	ee11 0a90 	vmov	r0, s3
 8008d54:	ee10 2a10 	vmov	r2, s0
 8008d58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008d5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8008d60:	ea41 0300 	orr.w	r3, r1, r0
 8008d64:	ec43 2b10 	vmov	d0, r2, r3
 8008d68:	4770      	bx	lr
	...

08008d6c <_init>:
 8008d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6e:	bf00      	nop
 8008d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d72:	bc08      	pop	{r3}
 8008d74:	469e      	mov	lr, r3
 8008d76:	4770      	bx	lr

08008d78 <_fini>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	bf00      	nop
 8008d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d7e:	bc08      	pop	{r3}
 8008d80:	469e      	mov	lr, r3
 8008d82:	4770      	bx	lr
