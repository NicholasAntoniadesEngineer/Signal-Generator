
STM32F439ZIT6U waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b43c  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  0800b5f0  0800b5f0  0001b5f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b830  0800b830  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800b830  0800b830  0001b830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b838  0800b838  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b838  0800b838  0001b838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b83c  0800b83c  0001b83c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800b840  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ddc  20000204  0800ba44  00020204  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fe0  0800ba44  00021fe0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 12 .debug_info   000215af  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000048b3  00000000  00000000  000417e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001910  00000000  00000000  00046098  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016f0  00000000  00000000  000479a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a1dd  00000000  00000000  00049098  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019281  00000000  00000000  00073275  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e88a2  00000000  00000000  0008c4f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00174d98  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ce0  00000000  00000000  00174e14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000204 	.word	0x20000204
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b5d4 	.word	0x0800b5d4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000208 	.word	0x20000208
 80001ec:	0800b5d4 	.word	0x0800b5d4

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_ADC1_Init+0x9c>)
 8000e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e6c:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <MX_ADC1_Init+0xa0>)
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e8c:	f001 f9a4 	bl	80021d8 <HAL_ADC_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 fc3f 	bl	8001718 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000eac:	f001 f9d8 	bl	8002260 <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eb6:	f000 fc2f 	bl	8001718 <Error_Handler>
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000230 	.word	0x20000230
 8000ec8:	40012000 	.word	0x40012000
 8000ecc:	0f000001 	.word	0x0f000001

08000ed0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_ADC_MspInit+0x7c>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d127      	bne.n	8000f42 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b16      	ldr	r3, [pc, #88]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	4a15      	ldr	r2, [pc, #84]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f00:	6453      	str	r3, [r2, #68]	; 0x44
 8000f02:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f18:	f043 0301 	orr.w	r3, r3, #1
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <HAL_ADC_MspInit+0x80>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0301 	and.w	r3, r3, #1
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f2e:	2303      	movs	r3, #3
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 0314 	add.w	r3, r7, #20
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	4805      	ldr	r0, [pc, #20]	; (8000f54 <HAL_ADC_MspInit+0x84>)
 8000f3e:	f002 fa61 	bl	8003404 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	; 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40012000 	.word	0x40012000
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020000 	.word	0x40020000

08000f58 <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f5e:	463b      	mov	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f66:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <MX_DAC_Init+0x64>)
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <MX_DAC_Init+0x68>)
 8000f6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f6c:	4813      	ldr	r0, [pc, #76]	; (8000fbc <MX_DAC_Init+0x64>)
 8000f6e:	f001 fcb6 	bl	80028de <HAL_DAC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f78:	f000 fbce 	bl	8001718 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000f7c:	2324      	movs	r3, #36	; 0x24
 8000f7e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480c      	ldr	r0, [pc, #48]	; (8000fbc <MX_DAC_Init+0x64>)
 8000f8c:	f001 fdea 	bl	8002b64 <HAL_DAC_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f96:	f000 fbbf 	bl	8001718 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8000f9a:	232c      	movs	r3, #44	; 0x2c
 8000f9c:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f9e:	463b      	mov	r3, r7
 8000fa0:	2210      	movs	r2, #16
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4805      	ldr	r0, [pc, #20]	; (8000fbc <MX_DAC_Init+0x64>)
 8000fa6:	f001 fddd 	bl	8002b64 <HAL_DAC_ConfigChannel>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8000fb0:	f000 fbb2 	bl	8001718 <Error_Handler>
  }

}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	200002d8 	.word	0x200002d8
 8000fc0:	40007400 	.word	0x40007400

08000fc4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08a      	sub	sp, #40	; 0x28
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	601a      	str	r2, [r3, #0]
 8000fd4:	605a      	str	r2, [r3, #4]
 8000fd6:	609a      	str	r2, [r3, #8]
 8000fd8:	60da      	str	r2, [r3, #12]
 8000fda:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a4c      	ldr	r2, [pc, #304]	; (8001114 <HAL_DAC_MspInit+0x150>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	f040 8092 	bne.w	800110c <HAL_DAC_MspInit+0x148>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000fe8:	2300      	movs	r3, #0
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	4b4a      	ldr	r3, [pc, #296]	; (8001118 <HAL_DAC_MspInit+0x154>)
 8000fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_DAC_MspInit+0x154>)
 8000ff2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff8:	4b47      	ldr	r3, [pc, #284]	; (8001118 <HAL_DAC_MspInit+0x154>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_DAC_MspInit+0x154>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	4a42      	ldr	r2, [pc, #264]	; (8001118 <HAL_DAC_MspInit+0x154>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	6313      	str	r3, [r2, #48]	; 0x30
 8001014:	4b40      	ldr	r3, [pc, #256]	; (8001118 <HAL_DAC_MspInit+0x154>)
 8001016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001020:	2330      	movs	r3, #48	; 0x30
 8001022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001024:	2303      	movs	r3, #3
 8001026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	4619      	mov	r1, r3
 8001032:	483a      	ldr	r0, [pc, #232]	; (800111c <HAL_DAC_MspInit+0x158>)
 8001034:	f002 f9e6 	bl	8003404 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 8001038:	4b39      	ldr	r3, [pc, #228]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800103a:	4a3a      	ldr	r2, [pc, #232]	; (8001124 <HAL_DAC_MspInit+0x160>)
 800103c:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 800103e:	4b38      	ldr	r3, [pc, #224]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001040:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001044:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001046:	4b36      	ldr	r3, [pc, #216]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001048:	2240      	movs	r2, #64	; 0x40
 800104a:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800104c:	4b34      	ldr	r3, [pc, #208]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800104e:	2200      	movs	r2, #0
 8001050:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001052:	4b33      	ldr	r3, [pc, #204]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001054:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001058:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800105a:	4b31      	ldr	r3, [pc, #196]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800105c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001060:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001062:	4b2f      	ldr	r3, [pc, #188]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001064:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001068:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800106a:	4b2d      	ldr	r3, [pc, #180]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800106c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001070:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001072:	4b2b      	ldr	r3, [pc, #172]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001074:	2200      	movs	r2, #0
 8001076:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 800107a:	2200      	movs	r2, #0
 800107c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 800107e:	4828      	ldr	r0, [pc, #160]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001080:	f001 fe52 	bl	8002d28 <HAL_DMA_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800108a:	f000 fb45 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a23      	ldr	r2, [pc, #140]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	4a22      	ldr	r2, [pc, #136]	; (8001120 <HAL_DAC_MspInit+0x15c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800109a:	4b23      	ldr	r3, [pc, #140]	; (8001128 <HAL_DAC_MspInit+0x164>)
 800109c:	4a23      	ldr	r2, [pc, #140]	; (800112c <HAL_DAC_MspInit+0x168>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010a2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80010a6:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a8:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010aa:	2240      	movs	r2, #64	; 0x40
 80010ac:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80010b4:	4b1c      	ldr	r3, [pc, #112]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010ba:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c2:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010ca:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80010cc:	4b16      	ldr	r3, [pc, #88]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010d2:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010da:	4b13      	ldr	r3, [pc, #76]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010dc:	2200      	movs	r2, #0
 80010de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80010e0:	4811      	ldr	r0, [pc, #68]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010e2:	f001 fe21 	bl	8002d28 <HAL_DMA_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80010ec:	f000 fb14 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	4a0c      	ldr	r2, [pc, #48]	; (8001128 <HAL_DAC_MspInit+0x164>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010fc:	2200      	movs	r2, #0
 80010fe:	2100      	movs	r1, #0
 8001100:	2036      	movs	r0, #54	; 0x36
 8001102:	f001 fbb6 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001106:	2036      	movs	r0, #54	; 0x36
 8001108:	f001 fbcf 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800110c:	bf00      	nop
 800110e:	3728      	adds	r7, #40	; 0x28
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40007400 	.word	0x40007400
 8001118:	40023800 	.word	0x40023800
 800111c:	40020000 	.word	0x40020000
 8001120:	20000278 	.word	0x20000278
 8001124:	40026088 	.word	0x40026088
 8001128:	200002ec 	.word	0x200002ec
 800112c:	400260a0 	.word	0x400260a0

08001130 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_DMA_Init+0x4c>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	4a0f      	ldr	r2, [pc, #60]	; (800117c <MX_DMA_Init+0x4c>)
 8001140:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001144:	6313      	str	r3, [r2, #48]	; 0x30
 8001146:	4b0d      	ldr	r3, [pc, #52]	; (800117c <MX_DMA_Init+0x4c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001152:	2200      	movs	r2, #0
 8001154:	2100      	movs	r1, #0
 8001156:	2010      	movs	r0, #16
 8001158:	f001 fb8b 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800115c:	2010      	movs	r0, #16
 800115e:	f001 fba4 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001162:	2200      	movs	r2, #0
 8001164:	2100      	movs	r1, #0
 8001166:	2011      	movs	r0, #17
 8001168:	f001 fb83 	bl	8002872 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800116c:	2011      	movs	r0, #17
 800116e:	f001 fb9c 	bl	80028aa <HAL_NVIC_EnableIRQ>

}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	40023800 	.word	0x40023800

08001180 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b08a      	sub	sp, #40	; 0x28
 8001184:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	2300      	movs	r3, #0
 8001198:	613b      	str	r3, [r7, #16]
 800119a:	4b3e      	ldr	r3, [pc, #248]	; (8001294 <MX_GPIO_Init+0x114>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	4a3d      	ldr	r2, [pc, #244]	; (8001294 <MX_GPIO_Init+0x114>)
 80011a0:	f043 0310 	orr.w	r3, r3, #16
 80011a4:	6313      	str	r3, [r2, #48]	; 0x30
 80011a6:	4b3b      	ldr	r3, [pc, #236]	; (8001294 <MX_GPIO_Init+0x114>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	613b      	str	r3, [r7, #16]
 80011b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b37      	ldr	r3, [pc, #220]	; (8001294 <MX_GPIO_Init+0x114>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	4a36      	ldr	r2, [pc, #216]	; (8001294 <MX_GPIO_Init+0x114>)
 80011bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011c0:	6313      	str	r3, [r2, #48]	; 0x30
 80011c2:	4b34      	ldr	r3, [pc, #208]	; (8001294 <MX_GPIO_Init+0x114>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b30      	ldr	r3, [pc, #192]	; (8001294 <MX_GPIO_Init+0x114>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	4a2f      	ldr	r2, [pc, #188]	; (8001294 <MX_GPIO_Init+0x114>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6313      	str	r3, [r2, #48]	; 0x30
 80011de:	4b2d      	ldr	r3, [pc, #180]	; (8001294 <MX_GPIO_Init+0x114>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b29      	ldr	r3, [pc, #164]	; (8001294 <MX_GPIO_Init+0x114>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	4a28      	ldr	r2, [pc, #160]	; (8001294 <MX_GPIO_Init+0x114>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	6313      	str	r3, [r2, #48]	; 0x30
 80011fa:	4b26      	ldr	r3, [pc, #152]	; (8001294 <MX_GPIO_Init+0x114>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b22      	ldr	r3, [pc, #136]	; (8001294 <MX_GPIO_Init+0x114>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a21      	ldr	r2, [pc, #132]	; (8001294 <MX_GPIO_Init+0x114>)
 8001210:	f043 0302 	orr.w	r3, r3, #2
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b1f      	ldr	r3, [pc, #124]	; (8001294 <MX_GPIO_Init+0x114>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0302 	and.w	r3, r3, #2
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MAX485_PWR_Pin|MAX485_DE_Pin, GPIO_PIN_RESET);
 8001222:	2200      	movs	r2, #0
 8001224:	2103      	movs	r1, #3
 8001226:	481c      	ldr	r0, [pc, #112]	; (8001298 <MX_GPIO_Init+0x118>)
 8001228:	f002 fa96 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800122c:	2200      	movs	r2, #0
 800122e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001232:	481a      	ldr	r0, [pc, #104]	; (800129c <MX_GPIO_Init+0x11c>)
 8001234:	f002 fa90 	bl	8003758 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = MAX485_PWR_Pin|MAX485_DE_Pin;
 8001238:	2303      	movs	r3, #3
 800123a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800123c:	2301      	movs	r3, #1
 800123e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001244:	2300      	movs	r3, #0
 8001246:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4619      	mov	r1, r3
 800124e:	4812      	ldr	r0, [pc, #72]	; (8001298 <MX_GPIO_Init+0x118>)
 8001250:	f002 f8d8 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8001254:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	2301      	movs	r3, #1
 800125c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	480b      	ldr	r0, [pc, #44]	; (800129c <MX_GPIO_Init+0x11c>)
 800126e:	f002 f8c9 	bl	8003404 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Btn3_Input_Pin|Btn2_Input_Pin|Btn1_Input_Pin;
 8001272:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8001276:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_GPIO_Init+0x120>)
 800127a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800127c:	2301      	movs	r3, #1
 800127e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001280:	f107 0314 	add.w	r3, r7, #20
 8001284:	4619      	mov	r1, r3
 8001286:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_GPIO_Init+0x118>)
 8001288:	f002 f8bc 	bl	8003404 <HAL_GPIO_Init>

}
 800128c:	bf00      	nop
 800128e:	3728      	adds	r7, #40	; 0x28
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	40023800 	.word	0x40023800
 8001298:	40020800 	.word	0x40020800
 800129c:	40020400 	.word	0x40020400
 80012a0:	10110000 	.word	0x10110000

080012a4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_I2C1_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_I2C1_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_I2C1_Init+0x74>)
 80012b0:	4a1b      	ldr	r2, [pc, #108]	; (8001320 <MX_I2C1_Init+0x7c>)
 80012b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_I2C1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_I2C1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_I2C1_Init+0x74>)
 80012c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012c6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_I2C1_Init+0x74>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012ce:	4b12      	ldr	r3, [pc, #72]	; (8001318 <MX_I2C1_Init+0x74>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012d4:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_I2C1_Init+0x74>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <MX_I2C1_Init+0x74>)
 80012dc:	2200      	movs	r2, #0
 80012de:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <MX_I2C1_Init+0x74>)
 80012e2:	f002 fa53 	bl	800378c <HAL_I2C_Init>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ec:	f000 fa14 	bl	8001718 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80012f0:	2100      	movs	r1, #0
 80012f2:	4809      	ldr	r0, [pc, #36]	; (8001318 <MX_I2C1_Init+0x74>)
 80012f4:	f002 fb82 	bl	80039fc <HAL_I2CEx_ConfigAnalogFilter>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80012fe:	f000 fa0b 	bl	8001718 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001302:	2100      	movs	r1, #0
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_I2C1_Init+0x74>)
 8001306:	f002 fbb5 	bl	8003a74 <HAL_I2CEx_ConfigDigitalFilter>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001310:	f000 fa02 	bl	8001718 <Error_Handler>
  }

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000034c 	.word	0x2000034c
 800131c:	40005400 	.word	0x40005400
 8001320:	000186a0 	.word	0x000186a0

08001324 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b08a      	sub	sp, #40	; 0x28
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800132c:	f107 0314 	add.w	r3, r7, #20
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
 800133a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a19      	ldr	r2, [pc, #100]	; (80013a8 <HAL_I2C_MspInit+0x84>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d12c      	bne.n	80013a0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	2300      	movs	r3, #0
 8001348:	613b      	str	r3, [r7, #16]
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_I2C_MspInit+0x88>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_I2C_MspInit+0x88>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	6313      	str	r3, [r2, #48]	; 0x30
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_I2C_MspInit+0x88>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	613b      	str	r3, [r7, #16]
 8001360:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001362:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001368:	2312      	movs	r3, #18
 800136a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800136c:	2301      	movs	r3, #1
 800136e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001370:	2303      	movs	r3, #3
 8001372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001374:	2304      	movs	r3, #4
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	480c      	ldr	r0, [pc, #48]	; (80013b0 <HAL_I2C_MspInit+0x8c>)
 8001380:	f002 f840 	bl	8003404 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001384:	2300      	movs	r3, #0
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	4b08      	ldr	r3, [pc, #32]	; (80013ac <HAL_I2C_MspInit+0x88>)
 800138a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138c:	4a07      	ldr	r2, [pc, #28]	; (80013ac <HAL_I2C_MspInit+0x88>)
 800138e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <HAL_I2C_MspInit+0x88>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013a0:	bf00      	nop
 80013a2:	3728      	adds	r7, #40	; 0x28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40005400 	.word	0x40005400
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020400 	.word	0x40020400
 80013b4:	00000000 	.word	0x00000000

080013b8 <get_sineval>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 90000000;	// Tim2 Clock Frequency
int Period = 1;				// Tim2 Period


void get_sineval(void){
 80013b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	e06b      	b.n	800149c <get_sineval+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4618      	mov	r0, r3
 80013ca:	f7ff f863 	bl	8000494 <__aeabi_i2d>
 80013ce:	a33e      	add	r3, pc, #248	; (adr r3, 80014c8 <get_sineval+0x110>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff f8c8 	bl	8000568 <__aeabi_dmul>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	4618      	mov	r0, r3
 80013de:	4621      	mov	r1, r4
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b32      	ldr	r3, [pc, #200]	; (80014b0 <get_sineval+0xf8>)
 80013e6:	f7ff f9e9 	bl	80007bc <__aeabi_ddiv>
 80013ea:	4603      	mov	r3, r0
 80013ec:	460c      	mov	r4, r1
 80013ee:	ec44 3b17 	vmov	d7, r3, r4
 80013f2:	eeb0 0a47 	vmov.f32	s0, s14
 80013f6:	eef0 0a67 	vmov.f32	s1, s15
 80013fa:	f009 f8d9 	bl	800a5b0 <sin>
 80013fe:	ec51 0b10 	vmov	r0, r1, d0
 8001402:	f04f 0200 	mov.w	r2, #0
 8001406:	4b2b      	ldr	r3, [pc, #172]	; (80014b4 <get_sineval+0xfc>)
 8001408:	f7fe fef8 	bl	80001fc <__adddf3>
 800140c:	4603      	mov	r3, r0
 800140e:	460c      	mov	r4, r1
 8001410:	4625      	mov	r5, r4
 8001412:	461c      	mov	r4, r3
 8001414:	4b28      	ldr	r3, [pc, #160]	; (80014b8 <get_sineval+0x100>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	0fda      	lsrs	r2, r3, #31
 800141a:	4413      	add	r3, r2
 800141c:	105b      	asrs	r3, r3, #1
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f838 	bl	8000494 <__aeabi_i2d>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4620      	mov	r0, r4
 800142a:	4629      	mov	r1, r5
 800142c:	f7ff f89c 	bl	8000568 <__aeabi_dmul>
 8001430:	4603      	mov	r3, r0
 8001432:	460c      	mov	r4, r1
 8001434:	4618      	mov	r0, r3
 8001436:	4621      	mov	r1, r4
 8001438:	f7ff fb58 	bl	8000aec <__aeabi_d2uiz>
 800143c:	4601      	mov	r1, r0
 800143e:	4a1f      	ldr	r2, [pc, #124]	; (80014bc <get_sineval+0x104>)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <get_sineval+0x108>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff f822 	bl	8000494 <__aeabi_i2d>
 8001450:	4605      	mov	r5, r0
 8001452:	460e      	mov	r6, r1
 8001454:	4a19      	ldr	r2, [pc, #100]	; (80014bc <get_sineval+0x104>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f809 	bl	8000474 <__aeabi_ui2d>
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <get_sineval+0x10c>)
 8001464:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001468:	461a      	mov	r2, r3
 800146a:	4623      	mov	r3, r4
 800146c:	f7ff f87c 	bl	8000568 <__aeabi_dmul>
 8001470:	4603      	mov	r3, r0
 8001472:	460c      	mov	r4, r1
 8001474:	461a      	mov	r2, r3
 8001476:	4623      	mov	r3, r4
 8001478:	4628      	mov	r0, r5
 800147a:	4631      	mov	r1, r6
 800147c:	f7fe febe 	bl	80001fc <__adddf3>
 8001480:	4603      	mov	r3, r0
 8001482:	460c      	mov	r4, r1
 8001484:	4618      	mov	r0, r3
 8001486:	4621      	mov	r1, r4
 8001488:	f7ff fb30 	bl	8000aec <__aeabi_d2uiz>
 800148c:	4601      	mov	r1, r0
 800148e:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <get_sineval+0x104>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	3301      	adds	r3, #1
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b63      	cmp	r3, #99	; 0x63
 80014a0:	dd90      	ble.n	80013c4 <get_sineval+0xc>
	}
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014aa:	bf00      	nop
 80014ac:	f3af 8000 	nop.w
 80014b0:	40590000 	.word	0x40590000
 80014b4:	3ff00000 	.word	0x3ff00000
 80014b8:	20000000 	.word	0x20000000
 80014bc:	200003a8 	.word	0x200003a8
 80014c0:	20000010 	.word	0x20000010
 80014c4:	20000008 	.word	0x20000008
 80014c8:	4d12d84a 	.word	0x4d12d84a
 80014cc:	400921fb 	.word	0x400921fb

080014d0 <set_clock_TIM2>:


void set_clock_TIM2(void){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Fsine*(Period + 1) ) - 1;
 80014d4:	4b15      	ldr	r3, [pc, #84]	; (800152c <set_clock_TIM2+0x5c>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a15      	ldr	r2, [pc, #84]	; (8001530 <set_clock_TIM2+0x60>)
 80014da:	fba2 2303 	umull	r2, r3, r2, r3
 80014de:	095b      	lsrs	r3, r3, #5
 80014e0:	4a14      	ldr	r2, [pc, #80]	; (8001534 <set_clock_TIM2+0x64>)
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	3201      	adds	r2, #1
 80014e6:	4914      	ldr	r1, [pc, #80]	; (8001538 <set_clock_TIM2+0x68>)
 80014e8:	6809      	ldr	r1, [r1, #0]
 80014ea:	fb01 f202 	mul.w	r2, r1, r2
 80014ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80014f2:	3b01      	subs	r3, #1
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b11      	ldr	r3, [pc, #68]	; (800153c <set_clock_TIM2+0x6c>)
 80014f8:	601a      	str	r2, [r3, #0]

	  htim2.Instance = TIM2;
 80014fa:	4b11      	ldr	r3, [pc, #68]	; (8001540 <set_clock_TIM2+0x70>)
 80014fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001500:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 8001502:	4b0c      	ldr	r3, [pc, #48]	; (8001534 <set_clock_TIM2+0x64>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	461a      	mov	r2, r3
 8001508:	4b0d      	ldr	r3, [pc, #52]	; (8001540 <set_clock_TIM2+0x70>)
 800150a:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <set_clock_TIM2+0x6c>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	461a      	mov	r2, r3
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <set_clock_TIM2+0x70>)
 8001514:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001516:	480a      	ldr	r0, [pc, #40]	; (8001540 <set_clock_TIM2+0x70>)
 8001518:	f004 f8aa 	bl	8005670 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <set_clock_TIM2+0x56>
	  {
	    Error_Handler();
 8001522:	f000 f8f9 	bl	8001718 <Error_Handler>
	  }
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000018 	.word	0x20000018
 8001530:	51eb851f 	.word	0x51eb851f
 8001534:	2000001c 	.word	0x2000001c
 8001538:	20000014 	.word	0x20000014
 800153c:	200003a4 	.word	0x200003a4
 8001540:	20000640 	.word	0x20000640

08001544 <set_clock_TIM4>:

void set_clock_TIM4(void){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Fsine*(Period + 1) ) - 1;
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <set_clock_TIM4+0x58>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a14      	ldr	r2, [pc, #80]	; (80015a0 <set_clock_TIM4+0x5c>)
 800154e:	fba2 2303 	umull	r2, r3, r2, r3
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	4a13      	ldr	r2, [pc, #76]	; (80015a4 <set_clock_TIM4+0x60>)
 8001556:	6812      	ldr	r2, [r2, #0]
 8001558:	3201      	adds	r2, #1
 800155a:	4913      	ldr	r1, [pc, #76]	; (80015a8 <set_clock_TIM4+0x64>)
 800155c:	6809      	ldr	r1, [r1, #0]
 800155e:	fb01 f202 	mul.w	r2, r1, r2
 8001562:	fbb3 f3f2 	udiv	r3, r3, r2
 8001566:	3b01      	subs	r3, #1
 8001568:	461a      	mov	r2, r3
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <set_clock_TIM4+0x68>)
 800156c:	601a      	str	r2, [r3, #0]

	  htim4.Instance = TIM4;
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <set_clock_TIM4+0x6c>)
 8001570:	4a10      	ldr	r2, [pc, #64]	; (80015b4 <set_clock_TIM4+0x70>)
 8001572:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period = Period; //+1
 8001574:	4b0b      	ldr	r3, [pc, #44]	; (80015a4 <set_clock_TIM4+0x60>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b0d      	ldr	r3, [pc, #52]	; (80015b0 <set_clock_TIM4+0x6c>)
 800157c:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <set_clock_TIM4+0x68>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	461a      	mov	r2, r3
 8001584:	4b0a      	ldr	r3, [pc, #40]	; (80015b0 <set_clock_TIM4+0x6c>)
 8001586:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001588:	4809      	ldr	r0, [pc, #36]	; (80015b0 <set_clock_TIM4+0x6c>)
 800158a:	f004 f871 	bl	8005670 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <set_clock_TIM4+0x54>
	  {
	    Error_Handler();
 8001594:	f000 f8c0 	bl	8001718 <Error_Handler>
	  }
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}
 800159c:	20000018 	.word	0x20000018
 80015a0:	51eb851f 	.word	0x51eb851f
 80015a4:	2000001c 	.word	0x2000001c
 80015a8:	20000014 	.word	0x20000014
 80015ac:	200003a4 	.word	0x200003a4
 80015b0:	20000540 	.word	0x20000540
 80015b4:	40000800 	.word	0x40000800

080015b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015be:	f000 fd77 	bl	80020b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015c2:	f000 f83f 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015c6:	f7ff fddb 	bl	8001180 <MX_GPIO_Init>
  MX_DMA_Init();
 80015ca:	f7ff fdb1 	bl	8001130 <MX_DMA_Init>
  MX_DAC_Init();
 80015ce:	f7ff fcc3 	bl	8000f58 <MX_DAC_Init>
  MX_TIM2_Init();
 80015d2:	f000 fa01 	bl	80019d8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80015d6:	f000 fc51 	bl	8001e7c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80015da:	f7ff fc27 	bl	8000e2c <MX_ADC1_Init>
  MX_I2C1_Init();
 80015de:	f7ff fe61 	bl	80012a4 <MX_I2C1_Init>
  MX_TIM3_Init();
 80015e2:	f000 fa45 	bl	8001a70 <MX_TIM3_Init>
  MX_TIM4_Init();
 80015e6:	f000 fa9d 	bl	8001b24 <MX_TIM4_Init>
  MX_TIM1_Init();
 80015ea:	f000 f971 	bl	80018d0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80015ee:	f000 fc6f 	bl	8001ed0 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 80015f2:	f008 fa07 	bl	8009a04 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 80015f6:	f000 fae1 	bl	8001bbc <MX_TIM9_Init>
	//  HAL_DAC_Start(&hdac,DAC_CHANNEL_1);
	//  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, value_dac);


  /* Sine function */
  set_clock_TIM2();							// Setting frequency of timer
 80015fa:	f7ff ff69 	bl	80014d0 <set_clock_TIM2>
  set_clock_TIM4();
 80015fe:	f7ff ffa1 	bl	8001544 <set_clock_TIM4>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 8001602:	480c      	ldr	r0, [pc, #48]	; (8001634 <main+0x7c>)
 8001604:	f004 f85f 	bl	80056c6 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);			// Start timer 2
 8001608:	480b      	ldr	r0, [pc, #44]	; (8001638 <main+0x80>)
 800160a:	f004 f85c 	bl	80056c6 <HAL_TIM_Base_Start>
  get_sineval();						// Call get sineval function
 800160e:	f7ff fed3 	bl	80013b8 <get_sineval>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 8001612:	2300      	movs	r3, #0
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2364      	movs	r3, #100	; 0x64
 8001618:	4a08      	ldr	r2, [pc, #32]	; (800163c <main+0x84>)
 800161a:	2100      	movs	r1, #0
 800161c:	4808      	ldr	r0, [pc, #32]	; (8001640 <main+0x88>)
 800161e:	f001 f981 	bl	8002924 <HAL_DAC_Start_DMA>

  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 8001622:	2300      	movs	r3, #0
 8001624:	9300      	str	r3, [sp, #0]
 8001626:	2364      	movs	r3, #100	; 0x64
 8001628:	4a04      	ldr	r2, [pc, #16]	; (800163c <main+0x84>)
 800162a:	2110      	movs	r1, #16
 800162c:	4804      	ldr	r0, [pc, #16]	; (8001640 <main+0x88>)
 800162e:	f001 f979 	bl	8002924 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001632:	e7fe      	b.n	8001632 <main+0x7a>
 8001634:	20000640 	.word	0x20000640
 8001638:	20000540 	.word	0x20000540
 800163c:	200003a8 	.word	0x200003a8
 8001640:	200002d8 	.word	0x200002d8

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b094      	sub	sp, #80	; 0x50
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0320 	add.w	r3, r7, #32
 800164e:	2230      	movs	r2, #48	; 0x30
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f008 feea 	bl	800a42c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]
 8001660:	605a      	str	r2, [r3, #4]
 8001662:	609a      	str	r2, [r3, #8]
 8001664:	60da      	str	r2, [r3, #12]
 8001666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001668:	2300      	movs	r3, #0
 800166a:	60bb      	str	r3, [r7, #8]
 800166c:	4b28      	ldr	r3, [pc, #160]	; (8001710 <SystemClock_Config+0xcc>)
 800166e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001670:	4a27      	ldr	r2, [pc, #156]	; (8001710 <SystemClock_Config+0xcc>)
 8001672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001676:	6413      	str	r3, [r2, #64]	; 0x40
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <SystemClock_Config+0xcc>)
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001684:	2300      	movs	r3, #0
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <SystemClock_Config+0xd0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001690:	4a20      	ldr	r2, [pc, #128]	; (8001714 <SystemClock_Config+0xd0>)
 8001692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <SystemClock_Config+0xd0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016a4:	2301      	movs	r3, #1
 80016a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ae:	2302      	movs	r3, #2
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80016b8:	230d      	movs	r3, #13
 80016ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80016bc:	2348      	movs	r3, #72	; 0x48
 80016be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80016c4:	2303      	movs	r3, #3
 80016c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	4618      	mov	r0, r3
 80016ce:	f003 fb93 	bl	8004df8 <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80016d8:	f000 f81e 	bl	8001718 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	2102      	movs	r1, #2
 80016f8:	4618      	mov	r0, r3
 80016fa:	f003 fded 	bl	80052d8 <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001704:	f000 f808 	bl	8001718 <Error_Handler>
  }
}
 8001708:	bf00      	nop
 800170a:	3750      	adds	r7, #80	; 0x50
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40023800 	.word	0x40023800
 8001714:	40007000 	.word	0x40007000

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <HAL_MspInit+0x4c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a0f      	ldr	r2, [pc, #60]	; (8001774 <HAL_MspInit+0x4c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b0d      	ldr	r3, [pc, #52]	; (8001774 <HAL_MspInit+0x4c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	603b      	str	r3, [r7, #0]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x4c>)
 8001750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_MspInit+0x4c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6413      	str	r3, [r2, #64]	; 0x40
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MspInit+0x4c>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40023800 	.word	0x40023800

08001778 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	b480      	push	{r7}
 8001788:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800178a:	e7fe      	b.n	800178a <HardFault_Handler+0x4>

0800178c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001790:	e7fe      	b.n	8001790 <MemManage_Handler+0x4>

08001792 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001792:	b480      	push	{r7}
 8001794:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001796:	e7fe      	b.n	8001796 <BusFault_Handler+0x4>

08001798 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800179c:	e7fe      	b.n	800179c <UsageFault_Handler+0x4>

0800179e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800179e:	b480      	push	{r7}
 80017a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr

080017ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017cc:	f000 fcc2 	bl	8002154 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}

080017d4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80017d8:	4802      	ldr	r0, [pc, #8]	; (80017e4 <DMA1_Stream5_IRQHandler+0x10>)
 80017da:	f001 fbab 	bl	8002f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000278 	.word	0x20000278

080017e8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80017ec:	4802      	ldr	r0, [pc, #8]	; (80017f8 <DMA1_Stream6_IRQHandler+0x10>)
 80017ee:	f001 fba1 	bl	8002f34 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	200002ec 	.word	0x200002ec

080017fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001800:	4802      	ldr	r0, [pc, #8]	; (800180c <TIM2_IRQHandler+0x10>)
 8001802:	f003 ffaf 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20000640 	.word	0x20000640

08001810 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <TIM4_IRQHandler+0x10>)
 8001816:	f003 ffa5 	bl	8005764 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20000540 	.word	0x20000540

08001824 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001828:	4802      	ldr	r0, [pc, #8]	; (8001834 <TIM6_DAC_IRQHandler+0x10>)
 800182a:	f001 f929 	bl	8002a80 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200002d8 	.word	0x200002d8

08001838 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800183c:	4802      	ldr	r0, [pc, #8]	; (8001848 <OTG_FS_IRQHandler+0x10>)
 800183e:	f002 faa8 	bl	8003d92 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20001bd4 	.word	0x20001bd4

0800184c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <_sbrk+0x50>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <_sbrk+0x16>
		heap_end = &end;
 800185c:	4b0f      	ldr	r3, [pc, #60]	; (800189c <_sbrk+0x50>)
 800185e:	4a10      	ldr	r2, [pc, #64]	; (80018a0 <_sbrk+0x54>)
 8001860:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <_sbrk+0x50>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <_sbrk+0x50>)
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4413      	add	r3, r2
 8001870:	466a      	mov	r2, sp
 8001872:	4293      	cmp	r3, r2
 8001874:	d907      	bls.n	8001886 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001876:	f008 fd9f 	bl	800a3b8 <__errno>
 800187a:	4602      	mov	r2, r0
 800187c:	230c      	movs	r3, #12
 800187e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001880:	f04f 33ff 	mov.w	r3, #4294967295
 8001884:	e006      	b.n	8001894 <_sbrk+0x48>
	}

	heap_end += incr;
 8001886:	4b05      	ldr	r3, [pc, #20]	; (800189c <_sbrk+0x50>)
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	4a03      	ldr	r2, [pc, #12]	; (800189c <_sbrk+0x50>)
 8001890:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001892:	68fb      	ldr	r3, [r7, #12]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000220 	.word	0x20000220
 80018a0:	20001fe0 	.word	0x20001fe0

080018a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a8:	4b08      	ldr	r3, [pc, #32]	; (80018cc <SystemInit+0x28>)
 80018aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ae:	4a07      	ldr	r2, [pc, #28]	; (80018cc <SystemInit+0x28>)
 80018b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018b8:	4b04      	ldr	r3, [pc, #16]	; (80018cc <SystemInit+0x28>)
 80018ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018be:	609a      	str	r2, [r3, #8]
#endif
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000ed00 	.word	0xe000ed00

080018d0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b092      	sub	sp, #72	; 0x48
 80018d4:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018d6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018e4:	2200      	movs	r2, #0
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	605a      	str	r2, [r3, #4]
 80018ea:	609a      	str	r2, [r3, #8]
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	611a      	str	r2, [r3, #16]
 80018f0:	615a      	str	r2, [r3, #20]
 80018f2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f4:	1d3b      	adds	r3, r7, #4
 80018f6:	2220      	movs	r2, #32
 80018f8:	2100      	movs	r1, #0
 80018fa:	4618      	mov	r0, r3
 80018fc:	f008 fd96 	bl	800a42c <memset>

  htim1.Instance = TIM1;
 8001900:	4b33      	ldr	r3, [pc, #204]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001902:	4a34      	ldr	r2, [pc, #208]	; (80019d4 <MX_TIM1_Init+0x104>)
 8001904:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001906:	4b32      	ldr	r3, [pc, #200]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001908:	2200      	movs	r2, #0
 800190a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800190c:	4b30      	ldr	r3, [pc, #192]	; (80019d0 <MX_TIM1_Init+0x100>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001918:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191a:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <MX_TIM1_Init+0x100>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001920:	4b2b      	ldr	r3, [pc, #172]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001922:	2200      	movs	r2, #0
 8001924:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001926:	4b2a      	ldr	r3, [pc, #168]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001928:	2200      	movs	r2, #0
 800192a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800192c:	4828      	ldr	r0, [pc, #160]	; (80019d0 <MX_TIM1_Init+0x100>)
 800192e:	f003 feee 	bl	800570e <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001938:	f7ff feee 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001944:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001948:	4619      	mov	r1, r3
 800194a:	4821      	ldr	r0, [pc, #132]	; (80019d0 <MX_TIM1_Init+0x100>)
 800194c:	f004 fcac 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001956:	f7ff fedf 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	; 0x60
 800195c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800195e:	2300      	movs	r3, #0
 8001960:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001962:	2300      	movs	r3, #0
 8001964:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001966:	2300      	movs	r3, #0
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800196e:	2300      	movs	r3, #0
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001976:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800197a:	2200      	movs	r2, #0
 800197c:	4619      	mov	r1, r3
 800197e:	4814      	ldr	r0, [pc, #80]	; (80019d0 <MX_TIM1_Init+0x100>)
 8001980:	f003 fff8 	bl	8005974 <HAL_TIM_PWM_ConfigChannel>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800198a:	f7ff fec5 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001996:	2300      	movs	r3, #0
 8001998:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	4619      	mov	r1, r3
 80019b0:	4807      	ldr	r0, [pc, #28]	; (80019d0 <MX_TIM1_Init+0x100>)
 80019b2:	f004 fcf5 	bl	80063a0 <HAL_TIMEx_ConfigBreakDeadTime>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80019bc:	f7ff feac 	bl	8001718 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim1);
 80019c0:	4803      	ldr	r0, [pc, #12]	; (80019d0 <MX_TIM1_Init+0x100>)
 80019c2:	f000 f9d3 	bl	8001d6c <HAL_TIM_MspPostInit>

}
 80019c6:	bf00      	nop
 80019c8:	3748      	adds	r7, #72	; 0x48
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200005c0 	.word	0x200005c0
 80019d4:	40010000 	.word	0x40010000

080019d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019de:	f107 0308 	add.w	r3, r7, #8
 80019e2:	2200      	movs	r2, #0
 80019e4:	601a      	str	r2, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019ec:	463b      	mov	r3, r7
 80019ee:	2200      	movs	r2, #0
 80019f0:	601a      	str	r2, [r3, #0]
 80019f2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <MX_TIM2_Init+0x94>)
 80019f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <MX_TIM2_Init+0x94>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001a08:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a14:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a16:	2280      	movs	r2, #128	; 0x80
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a1a:	4814      	ldr	r0, [pc, #80]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a1c:	f003 fe28 	bl	8005670 <HAL_TIM_Base_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a26:	f7ff fe77 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a30:	f107 0308 	add.w	r3, r7, #8
 8001a34:	4619      	mov	r1, r3
 8001a36:	480d      	ldr	r0, [pc, #52]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a38:	f004 f862 	bl	8005b00 <HAL_TIM_ConfigClockSource>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001a42:	f7ff fe69 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a46:	2320      	movs	r3, #32
 8001a48:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a4e:	463b      	mov	r3, r7
 8001a50:	4619      	mov	r1, r3
 8001a52:	4806      	ldr	r0, [pc, #24]	; (8001a6c <MX_TIM2_Init+0x94>)
 8001a54:	f004 fc28 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a5e:	f7ff fe5b 	bl	8001718 <Error_Handler>
  }

}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	20000640 	.word	0x20000640

08001a70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08a      	sub	sp, #40	; 0x28
 8001a74:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a76:	f107 0320 	add.w	r3, r7, #32
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]
 8001a88:	609a      	str	r2, [r3, #8]
 8001a8a:	60da      	str	r2, [r3, #12]
 8001a8c:	611a      	str	r2, [r3, #16]
 8001a8e:	615a      	str	r2, [r3, #20]
 8001a90:	619a      	str	r2, [r3, #24]

  htim3.Instance = TIM3;
 8001a92:	4b22      	ldr	r3, [pc, #136]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <MX_TIM3_Init+0xb0>)
 8001a96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001aa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aaa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b1b      	ldr	r3, [pc, #108]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001ab8:	4818      	ldr	r0, [pc, #96]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001aba:	f003 fe28 	bl	800570e <HAL_TIM_PWM_Init>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8001ac4:	f7ff fe28 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ad0:	f107 0320 	add.w	r3, r7, #32
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4811      	ldr	r0, [pc, #68]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001ad8:	f004 fbe6 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001ae2:	f7ff fe19 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae6:	2360      	movs	r3, #96	; 0x60
 8001ae8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2200      	movs	r2, #0
 8001afa:	4619      	mov	r1, r3
 8001afc:	4807      	ldr	r0, [pc, #28]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001afe:	f003 ff39 	bl	8005974 <HAL_TIM_PWM_ConfigChannel>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8001b08:	f7ff fe06 	bl	8001718 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim3);
 8001b0c:	4803      	ldr	r0, [pc, #12]	; (8001b1c <MX_TIM3_Init+0xac>)
 8001b0e:	f000 f92d 	bl	8001d6c <HAL_TIM_MspPostInit>

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000580 	.word	0x20000580
 8001b20:	40000400 	.word	0x40000400

08001b24 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	463b      	mov	r3, r7
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b42:	4a1d      	ldr	r2, [pc, #116]	; (8001bb8 <MX_TIM4_Init+0x94>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001b46:	4b1b      	ldr	r3, [pc, #108]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4c:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8001b52:	4b18      	ldr	r3, [pc, #96]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b54:	2201      	movs	r2, #1
 8001b56:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b58:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b5e:	4b15      	ldr	r3, [pc, #84]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b60:	2280      	movs	r2, #128	; 0x80
 8001b62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b64:	4813      	ldr	r0, [pc, #76]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b66:	f003 fd83 	bl	8005670 <HAL_TIM_Base_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001b70:	f7ff fdd2 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b7a:	f107 0308 	add.w	r3, r7, #8
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480c      	ldr	r0, [pc, #48]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b82:	f003 ffbd 	bl	8005b00 <HAL_TIM_ConfigClockSource>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001b8c:	f7ff fdc4 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b90:	2320      	movs	r3, #32
 8001b92:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_TIM4_Init+0x90>)
 8001b9e:	f004 fb83 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001ba8:	f7ff fdb6 	bl	8001718 <Error_Handler>
  }

}
 8001bac:	bf00      	nop
 8001bae:	3718      	adds	r7, #24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	20000540 	.word	0x20000540
 8001bb8:	40000800 	.word	0x40000800

08001bbc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	619a      	str	r2, [r3, #24]

  htim9.Instance = TIM9;
 8001bd4:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001bd6:	4a1b      	ldr	r2, [pc, #108]	; (8001c44 <MX_TIM9_Init+0x88>)
 8001bd8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001bda:	4b19      	ldr	r3, [pc, #100]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be0:	4b17      	ldr	r3, [pc, #92]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001be6:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001be8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bec:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bee:	4b14      	ldr	r3, [pc, #80]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001bfa:	4811      	ldr	r0, [pc, #68]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001bfc:	f003 fd87 	bl	800570e <HAL_TIM_PWM_Init>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001c06:	f7ff fd87 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c0a:	2360      	movs	r3, #96	; 0x60
 8001c0c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c16:	2300      	movs	r3, #0
 8001c18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4807      	ldr	r0, [pc, #28]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001c22:	f003 fea7 	bl	8005974 <HAL_TIM_PWM_ConfigChannel>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001c2c:	f7ff fd74 	bl	8001718 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim9);
 8001c30:	4803      	ldr	r0, [pc, #12]	; (8001c40 <MX_TIM9_Init+0x84>)
 8001c32:	f000 f89b 	bl	8001d6c <HAL_TIM_MspPostInit>

}
 8001c36:	bf00      	nop
 8001c38:	3720      	adds	r7, #32
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000600 	.word	0x20000600
 8001c44:	40014000 	.word	0x40014000

08001c48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b087      	sub	sp, #28
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	; (8001cd4 <HAL_TIM_PWM_MspInit+0x8c>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	4b1e      	ldr	r3, [pc, #120]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	4a1d      	ldr	r2, [pc, #116]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6453      	str	r3, [r2, #68]	; 0x44
 8001c6a:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001c76:	e026      	b.n	8001cc6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM3)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a17      	ldr	r2, [pc, #92]	; (8001cdc <HAL_TIM_PWM_MspInit+0x94>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d10e      	bne.n	8001ca0 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	613b      	str	r3, [r7, #16]
 8001c86:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8a:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001c8c:	f043 0302 	orr.w	r3, r3, #2
 8001c90:	6413      	str	r3, [r2, #64]	; 0x40
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c96:	f003 0302 	and.w	r3, r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]
 8001c9c:	693b      	ldr	r3, [r7, #16]
}
 8001c9e:	e012      	b.n	8001cc6 <HAL_TIM_PWM_MspInit+0x7e>
  else if(tim_pwmHandle->Instance==TIM9)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a0e      	ldr	r2, [pc, #56]	; (8001ce0 <HAL_TIM_PWM_MspInit+0x98>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d10d      	bne.n	8001cc6 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001caa:	2300      	movs	r3, #0
 8001cac:	60fb      	str	r3, [r7, #12]
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	4a09      	ldr	r2, [pc, #36]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_TIM_PWM_MspInit+0x90>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cc2:	60fb      	str	r3, [r7, #12]
 8001cc4:	68fb      	ldr	r3, [r7, #12]
}
 8001cc6:	bf00      	nop
 8001cc8:	371c      	adds	r7, #28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40000400 	.word	0x40000400
 8001ce0:	40014000 	.word	0x40014000

08001ce4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cf4:	d116      	bne.n	8001d24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_TIM_Base_MspInit+0x80>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	4a19      	ldr	r2, [pc, #100]	; (8001d64 <HAL_TIM_Base_MspInit+0x80>)
 8001d00:	f043 0301 	orr.w	r3, r3, #1
 8001d04:	6413      	str	r3, [r2, #64]	; 0x40
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_TIM_Base_MspInit+0x80>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	60fb      	str	r3, [r7, #12]
 8001d10:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d12:	2200      	movs	r2, #0
 8001d14:	2100      	movs	r1, #0
 8001d16:	201c      	movs	r0, #28
 8001d18:	f000 fdab 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d1c:	201c      	movs	r0, #28
 8001d1e:	f000 fdc4 	bl	80028aa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001d22:	e01a      	b.n	8001d5a <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM4)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0f      	ldr	r2, [pc, #60]	; (8001d68 <HAL_TIM_Base_MspInit+0x84>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d115      	bne.n	8001d5a <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <HAL_TIM_Base_MspInit+0x80>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	4a0b      	ldr	r2, [pc, #44]	; (8001d64 <HAL_TIM_Base_MspInit+0x80>)
 8001d38:	f043 0304 	orr.w	r3, r3, #4
 8001d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d3e:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <HAL_TIM_Base_MspInit+0x80>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d42:	f003 0304 	and.w	r3, r3, #4
 8001d46:	60bb      	str	r3, [r7, #8]
 8001d48:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	201e      	movs	r0, #30
 8001d50:	f000 fd8f 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d54:	201e      	movs	r0, #30
 8001d56:	f000 fda8 	bl	80028aa <HAL_NVIC_EnableIRQ>
}
 8001d5a:	bf00      	nop
 8001d5c:	3710      	adds	r7, #16
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	40023800 	.word	0x40023800
 8001d68:	40000800 	.word	0x40000800

08001d6c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b08a      	sub	sp, #40	; 0x28
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d74:	f107 0314 	add.w	r3, r7, #20
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a36      	ldr	r2, [pc, #216]	; (8001e64 <HAL_TIM_MspPostInit+0xf8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d11f      	bne.n	8001dce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	4b35      	ldr	r3, [pc, #212]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	4a34      	ldr	r2, [pc, #208]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001d98:	f043 0301 	orr.w	r3, r3, #1
 8001d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d9e:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	613b      	str	r3, [r7, #16]
 8001da8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001daa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db0:	2302      	movs	r3, #2
 8001db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db4:	2300      	movs	r3, #0
 8001db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db8:	2300      	movs	r3, #0
 8001dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4829      	ldr	r0, [pc, #164]	; (8001e6c <HAL_TIM_MspPostInit+0x100>)
 8001dc8:	f001 fb1c 	bl	8003404 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001dcc:	e046      	b.n	8001e5c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM3)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a27      	ldr	r2, [pc, #156]	; (8001e70 <HAL_TIM_MspPostInit+0x104>)
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d11e      	bne.n	8001e16 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b22      	ldr	r3, [pc, #136]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de0:	4a21      	ldr	r2, [pc, #132]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6313      	str	r3, [r2, #48]	; 0x30
 8001de8:	4b1f      	ldr	r3, [pc, #124]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001df4:	2340      	movs	r3, #64	; 0x40
 8001df6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e00:	2300      	movs	r3, #0
 8001e02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e04:	2302      	movs	r3, #2
 8001e06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	4817      	ldr	r0, [pc, #92]	; (8001e6c <HAL_TIM_MspPostInit+0x100>)
 8001e10:	f001 faf8 	bl	8003404 <HAL_GPIO_Init>
}
 8001e14:	e022      	b.n	8001e5c <HAL_TIM_MspPostInit+0xf0>
  else if(timHandle->Instance==TIM9)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a16      	ldr	r2, [pc, #88]	; (8001e74 <HAL_TIM_MspPostInit+0x108>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d11d      	bne.n	8001e5c <HAL_TIM_MspPostInit+0xf0>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e28:	4a0f      	ldr	r2, [pc, #60]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	6313      	str	r3, [r2, #48]	; 0x30
 8001e30:	4b0d      	ldr	r3, [pc, #52]	; (8001e68 <HAL_TIM_MspPostInit+0xfc>)
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	60bb      	str	r3, [r7, #8]
 8001e3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e50:	f107 0314 	add.w	r3, r7, #20
 8001e54:	4619      	mov	r1, r3
 8001e56:	4808      	ldr	r0, [pc, #32]	; (8001e78 <HAL_TIM_MspPostInit+0x10c>)
 8001e58:	f001 fad4 	bl	8003404 <HAL_GPIO_Init>
}
 8001e5c:	bf00      	nop
 8001e5e:	3728      	adds	r7, #40	; 0x28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40010000 	.word	0x40010000
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020000 	.word	0x40020000
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40014000 	.word	0x40014000
 8001e78:	40021000 	.word	0x40021000

08001e7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <MX_USART1_UART_Init+0x50>)
 8001e84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e94:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e9a:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ea0:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001ea2:	220c      	movs	r2, #12
 8001ea4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea6:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eac:	4b06      	ldr	r3, [pc, #24]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001eb2:	4805      	ldr	r0, [pc, #20]	; (8001ec8 <MX_USART1_UART_Init+0x4c>)
 8001eb4:	f004 fada 	bl	800646c <HAL_UART_Init>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001ebe:	f7ff fc2b 	bl	8001718 <Error_Handler>
  }

}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000680 	.word	0x20000680
 8001ecc:	40011000 	.word	0x40011000

08001ed0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ed6:	4a12      	ldr	r2, [pc, #72]	; (8001f20 <MX_USART2_UART_Init+0x50>)
 8001ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ee2:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ee8:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eee:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001ef6:	220c      	movs	r2, #12
 8001ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001efa:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f06:	4805      	ldr	r0, [pc, #20]	; (8001f1c <MX_USART2_UART_Init+0x4c>)
 8001f08:	f004 fab0 	bl	800646c <HAL_UART_Init>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f12:	f7ff fc01 	bl	8001718 <Error_Handler>
  }

}
 8001f16:	bf00      	nop
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200006c0 	.word	0x200006c0
 8001f20:	40004400 	.word	0x40004400

08001f24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08c      	sub	sp, #48	; 0x30
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 031c 	add.w	r3, r7, #28
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a41      	ldr	r2, [pc, #260]	; (8002048 <HAL_UART_MspInit+0x124>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d14b      	bne.n	8001fde <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	4b40      	ldr	r3, [pc, #256]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4e:	4a3f      	ldr	r2, [pc, #252]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f50:	f043 0310 	orr.w	r3, r3, #16
 8001f54:	6453      	str	r3, [r2, #68]	; 0x44
 8001f56:	4b3d      	ldr	r3, [pc, #244]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	f003 0310 	and.w	r3, r3, #16
 8001f5e:	61bb      	str	r3, [r7, #24]
 8001f60:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	4b39      	ldr	r3, [pc, #228]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a38      	ldr	r2, [pc, #224]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f6c:	f043 0301 	orr.w	r3, r3, #1
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b36      	ldr	r3, [pc, #216]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	613b      	str	r3, [r7, #16]
 8001f82:	4b32      	ldr	r3, [pc, #200]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a31      	ldr	r2, [pc, #196]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f88:	f043 0302 	orr.w	r3, r3, #2
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b2f      	ldr	r3, [pc, #188]	; (800204c <HAL_UART_MspInit+0x128>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fac:	2307      	movs	r3, #7
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 031c 	add.w	r3, r7, #28
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4826      	ldr	r0, [pc, #152]	; (8002050 <HAL_UART_MspInit+0x12c>)
 8001fb8:	f001 fa24 	bl	8003404 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001fbc:	2380      	movs	r3, #128	; 0x80
 8001fbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001fcc:	2307      	movs	r3, #7
 8001fce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	481f      	ldr	r0, [pc, #124]	; (8002054 <HAL_UART_MspInit+0x130>)
 8001fd8:	f001 fa14 	bl	8003404 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fdc:	e030      	b.n	8002040 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART2)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1d      	ldr	r2, [pc, #116]	; (8002058 <HAL_UART_MspInit+0x134>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d12b      	bne.n	8002040 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001fe8:	2300      	movs	r3, #0
 8001fea:	60fb      	str	r3, [r7, #12]
 8001fec:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_UART_MspInit+0x128>)
 8001fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff0:	4a16      	ldr	r2, [pc, #88]	; (800204c <HAL_UART_MspInit+0x128>)
 8001ff2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ff6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff8:	4b14      	ldr	r3, [pc, #80]	; (800204c <HAL_UART_MspInit+0x128>)
 8001ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002004:	2300      	movs	r3, #0
 8002006:	60bb      	str	r3, [r7, #8]
 8002008:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_UART_MspInit+0x128>)
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4a0f      	ldr	r2, [pc, #60]	; (800204c <HAL_UART_MspInit+0x128>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6313      	str	r3, [r2, #48]	; 0x30
 8002014:	4b0d      	ldr	r3, [pc, #52]	; (800204c <HAL_UART_MspInit+0x128>)
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	60bb      	str	r3, [r7, #8]
 800201e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002020:	230c      	movs	r3, #12
 8002022:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002024:	2302      	movs	r3, #2
 8002026:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002028:	2300      	movs	r3, #0
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202c:	2303      	movs	r3, #3
 800202e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002030:	2307      	movs	r3, #7
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <HAL_UART_MspInit+0x12c>)
 800203c:	f001 f9e2 	bl	8003404 <HAL_GPIO_Init>
}
 8002040:	bf00      	nop
 8002042:	3730      	adds	r7, #48	; 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40011000 	.word	0x40011000
 800204c:	40023800 	.word	0x40023800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40004400 	.word	0x40004400

0800205c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800205c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002094 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002060:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002062:	e003      	b.n	800206c <LoopCopyDataInit>

08002064 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002066:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002068:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800206a:	3104      	adds	r1, #4

0800206c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800206c:	480b      	ldr	r0, [pc, #44]	; (800209c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800206e:	4b0c      	ldr	r3, [pc, #48]	; (80020a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002070:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002072:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002074:	d3f6      	bcc.n	8002064 <CopyDataInit>
  ldr  r2, =_sbss
 8002076:	4a0b      	ldr	r2, [pc, #44]	; (80020a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002078:	e002      	b.n	8002080 <LoopFillZerobss>

0800207a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800207a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800207c:	f842 3b04 	str.w	r3, [r2], #4

08002080 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002082:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002084:	d3f9      	bcc.n	800207a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002086:	f7ff fc0d 	bl	80018a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800208a:	f008 f99b 	bl	800a3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800208e:	f7ff fa93 	bl	80015b8 <main>
  bx  lr    
 8002092:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002094:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002098:	0800b840 	.word	0x0800b840
  ldr  r0, =_sdata
 800209c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020a0:	20000204 	.word	0x20000204
  ldr  r2, =_sbss
 80020a4:	20000204 	.word	0x20000204
  ldr  r3, = _ebss
 80020a8:	20001fe0 	.word	0x20001fe0

080020ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ac:	e7fe      	b.n	80020ac <ADC_IRQHandler>
	...

080020b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0d      	ldr	r2, [pc, #52]	; (80020f0 <HAL_Init+0x40>)
 80020ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <HAL_Init+0x40>)
 80020c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020cc:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <HAL_Init+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a07      	ldr	r2, [pc, #28]	; (80020f0 <HAL_Init+0x40>)
 80020d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d8:	2003      	movs	r0, #3
 80020da:	f000 fbbf 	bl	800285c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020de:	2000      	movs	r0, #0
 80020e0:	f000 f808 	bl	80020f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020e4:	f7ff fb20 	bl	8001728 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023c00 	.word	0x40023c00

080020f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020fc:	4b12      	ldr	r3, [pc, #72]	; (8002148 <HAL_InitTick+0x54>)
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_InitTick+0x58>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	4619      	mov	r1, r3
 8002106:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800210a:	fbb3 f3f1 	udiv	r3, r3, r1
 800210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fbd7 	bl	80028c6 <HAL_SYSTICK_Config>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e00e      	b.n	8002140 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b0f      	cmp	r3, #15
 8002126:	d80a      	bhi.n	800213e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002128:	2200      	movs	r2, #0
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	f04f 30ff 	mov.w	r0, #4294967295
 8002130:	f000 fb9f 	bl	8002872 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002134:	4a06      	ldr	r2, [pc, #24]	; (8002150 <HAL_InitTick+0x5c>)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800213a:	2300      	movs	r3, #0
 800213c:	e000      	b.n	8002140 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
}
 8002140:	4618      	mov	r0, r3
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	20000020 	.word	0x20000020
 800214c:	20000028 	.word	0x20000028
 8002150:	20000024 	.word	0x20000024

08002154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <HAL_IncTick+0x20>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_IncTick+0x24>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4413      	add	r3, r2
 8002164:	4a04      	ldr	r2, [pc, #16]	; (8002178 <HAL_IncTick+0x24>)
 8002166:	6013      	str	r3, [r2, #0]
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	20000028 	.word	0x20000028
 8002178:	20000700 	.word	0x20000700

0800217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return uwTick;
 8002180:	4b03      	ldr	r3, [pc, #12]	; (8002190 <HAL_GetTick+0x14>)
 8002182:	681b      	ldr	r3, [r3, #0]
}
 8002184:	4618      	mov	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	20000700 	.word	0x20000700

08002194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800219c:	f7ff ffee 	bl	800217c <HAL_GetTick>
 80021a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ac:	d005      	beq.n	80021ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_Delay+0x40>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	4413      	add	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ba:	bf00      	nop
 80021bc:	f7ff ffde 	bl	800217c <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	68fa      	ldr	r2, [r7, #12]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d8f7      	bhi.n	80021bc <HAL_Delay+0x28>
  {
  }
}
 80021cc:	bf00      	nop
 80021ce:	3710      	adds	r7, #16
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000028 	.word	0x20000028

080021d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b084      	sub	sp, #16
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021e0:	2300      	movs	r3, #0
 80021e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e033      	b.n	8002256 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d109      	bne.n	800220a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f6:	6878      	ldr	r0, [r7, #4]
 80021f8:	f7fe fe6a 	bl	8000ed0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2200      	movs	r2, #0
 8002200:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	f003 0310 	and.w	r3, r3, #16
 8002212:	2b00      	cmp	r3, #0
 8002214:	d118      	bne.n	8002248 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800221e:	f023 0302 	bic.w	r3, r3, #2
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800222a:	6878      	ldr	r0, [r7, #4]
 800222c:	f000 f94a 	bl	80024c4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	f043 0201 	orr.w	r2, r3, #1
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	641a      	str	r2, [r3, #64]	; 0x40
 8002246:	e001      	b.n	800224c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002254:	7bfb      	ldrb	r3, [r7, #15]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
	...

08002260 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002274:	2b01      	cmp	r3, #1
 8002276:	d101      	bne.n	800227c <HAL_ADC_ConfigChannel+0x1c>
 8002278:	2302      	movs	r3, #2
 800227a:	e113      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x244>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b09      	cmp	r3, #9
 800228a:	d925      	bls.n	80022d8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68d9      	ldr	r1, [r3, #12]
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	4613      	mov	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4413      	add	r3, r2
 80022a0:	3b1e      	subs	r3, #30
 80022a2:	2207      	movs	r2, #7
 80022a4:	fa02 f303 	lsl.w	r3, r2, r3
 80022a8:	43da      	mvns	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	400a      	ands	r2, r1
 80022b0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	68d9      	ldr	r1, [r3, #12]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	689a      	ldr	r2, [r3, #8]
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	4603      	mov	r3, r0
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	4403      	add	r3, r0
 80022ca:	3b1e      	subs	r3, #30
 80022cc:	409a      	lsls	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	e022      	b.n	800231e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6919      	ldr	r1, [r3, #16]
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	4613      	mov	r3, r2
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	4413      	add	r3, r2
 80022ec:	2207      	movs	r2, #7
 80022ee:	fa02 f303 	lsl.w	r3, r2, r3
 80022f2:	43da      	mvns	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	400a      	ands	r2, r1
 80022fa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6919      	ldr	r1, [r3, #16]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	689a      	ldr	r2, [r3, #8]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	b29b      	uxth	r3, r3
 800230c:	4618      	mov	r0, r3
 800230e:	4603      	mov	r3, r0
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4403      	add	r3, r0
 8002314:	409a      	lsls	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	2b06      	cmp	r3, #6
 8002324:	d824      	bhi.n	8002370 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685a      	ldr	r2, [r3, #4]
 8002330:	4613      	mov	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	3b05      	subs	r3, #5
 8002338:	221f      	movs	r2, #31
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	400a      	ands	r2, r1
 8002346:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	4618      	mov	r0, r3
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	4613      	mov	r3, r2
 800235c:	009b      	lsls	r3, r3, #2
 800235e:	4413      	add	r3, r2
 8002360:	3b05      	subs	r3, #5
 8002362:	fa00 f203 	lsl.w	r2, r0, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	430a      	orrs	r2, r1
 800236c:	635a      	str	r2, [r3, #52]	; 0x34
 800236e:	e04c      	b.n	800240a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b0c      	cmp	r3, #12
 8002376:	d824      	bhi.n	80023c2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	3b23      	subs	r3, #35	; 0x23
 800238a:	221f      	movs	r2, #31
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43da      	mvns	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	400a      	ands	r2, r1
 8002398:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	4618      	mov	r0, r3
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	3b23      	subs	r3, #35	; 0x23
 80023b4:	fa00 f203 	lsl.w	r2, r0, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	631a      	str	r2, [r3, #48]	; 0x30
 80023c0:	e023      	b.n	800240a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b41      	subs	r3, #65	; 0x41
 80023d4:	221f      	movs	r2, #31
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43da      	mvns	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	400a      	ands	r2, r1
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	b29b      	uxth	r3, r3
 80023f0:	4618      	mov	r0, r3
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	4413      	add	r3, r2
 80023fc:	3b41      	subs	r3, #65	; 0x41
 80023fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	430a      	orrs	r2, r1
 8002408:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800240a:	4b29      	ldr	r3, [pc, #164]	; (80024b0 <HAL_ADC_ConfigChannel+0x250>)
 800240c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a28      	ldr	r2, [pc, #160]	; (80024b4 <HAL_ADC_ConfigChannel+0x254>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d10f      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1d8>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b12      	cmp	r3, #18
 800241e:	d10b      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1d      	ldr	r2, [pc, #116]	; (80024b4 <HAL_ADC_ConfigChannel+0x254>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d12b      	bne.n	800249a <HAL_ADC_ConfigChannel+0x23a>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1c      	ldr	r2, [pc, #112]	; (80024b8 <HAL_ADC_ConfigChannel+0x258>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d003      	beq.n	8002454 <HAL_ADC_ConfigChannel+0x1f4>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b11      	cmp	r3, #17
 8002452:	d122      	bne.n	800249a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a11      	ldr	r2, [pc, #68]	; (80024b8 <HAL_ADC_ConfigChannel+0x258>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d111      	bne.n	800249a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <HAL_ADC_ConfigChannel+0x25c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a11      	ldr	r2, [pc, #68]	; (80024c0 <HAL_ADC_ConfigChannel+0x260>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	0c9a      	lsrs	r2, r3, #18
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800248c:	e002      	b.n	8002494 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	3b01      	subs	r3, #1
 8002492:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f9      	bne.n	800248e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40012300 	.word	0x40012300
 80024b4:	40012000 	.word	0x40012000
 80024b8:	10000012 	.word	0x10000012
 80024bc:	20000020 	.word	0x20000020
 80024c0:	431bde83 	.word	0x431bde83

080024c4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024cc:	4b79      	ldr	r3, [pc, #484]	; (80026b4 <ADC_Init+0x1f0>)
 80024ce:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	431a      	orrs	r2, r3
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	6859      	ldr	r1, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	021a      	lsls	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	430a      	orrs	r2, r1
 800250c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800251c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	6859      	ldr	r1, [r3, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689a      	ldr	r2, [r3, #8]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800253e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	6899      	ldr	r1, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	68da      	ldr	r2, [r3, #12]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002556:	4a58      	ldr	r2, [pc, #352]	; (80026b8 <ADC_Init+0x1f4>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d022      	beq.n	80025a2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689a      	ldr	r2, [r3, #8]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800256a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	6899      	ldr	r1, [r3, #8]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	430a      	orrs	r2, r1
 800257c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689a      	ldr	r2, [r3, #8]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800258c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	e00f      	b.n	80025c2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	689a      	ldr	r2, [r3, #8]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	689a      	ldr	r2, [r3, #8]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 0202 	bic.w	r2, r2, #2
 80025d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	6899      	ldr	r1, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	7e1b      	ldrb	r3, [r3, #24]
 80025dc:	005a      	lsls	r2, r3, #1
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d01b      	beq.n	8002628 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	685a      	ldr	r2, [r3, #4]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	685a      	ldr	r2, [r3, #4]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800260e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800261a:	3b01      	subs	r3, #1
 800261c:	035a      	lsls	r2, r3, #13
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	430a      	orrs	r2, r1
 8002624:	605a      	str	r2, [r3, #4]
 8002626:	e007      	b.n	8002638 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002636:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002646:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	3b01      	subs	r3, #1
 8002654:	051a      	lsls	r2, r3, #20
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800266c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	6899      	ldr	r1, [r3, #8]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800267a:	025a      	lsls	r2, r3, #9
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	430a      	orrs	r2, r1
 8002682:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	689a      	ldr	r2, [r3, #8]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002692:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6899      	ldr	r1, [r3, #8]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	029a      	lsls	r2, r3, #10
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	609a      	str	r2, [r3, #8]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b2:	4770      	bx	lr
 80026b4:	40012300 	.word	0x40012300
 80026b8:	0f000001 	.word	0x0f000001

080026bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026cc:	4b0c      	ldr	r3, [pc, #48]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026d2:	68ba      	ldr	r2, [r7, #8]
 80026d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026d8:	4013      	ands	r3, r2
 80026da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026ee:	4a04      	ldr	r2, [pc, #16]	; (8002700 <__NVIC_SetPriorityGrouping+0x44>)
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	60d3      	str	r3, [r2, #12]
}
 80026f4:	bf00      	nop
 80026f6:	3714      	adds	r7, #20
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	e000ed00 	.word	0xe000ed00

08002704 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002708:	4b04      	ldr	r3, [pc, #16]	; (800271c <__NVIC_GetPriorityGrouping+0x18>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	0a1b      	lsrs	r3, r3, #8
 800270e:	f003 0307 	and.w	r3, r3, #7
}
 8002712:	4618      	mov	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr
 800271c:	e000ed00 	.word	0xe000ed00

08002720 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272e:	2b00      	cmp	r3, #0
 8002730:	db0b      	blt.n	800274a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002732:	79fb      	ldrb	r3, [r7, #7]
 8002734:	f003 021f 	and.w	r2, r3, #31
 8002738:	4907      	ldr	r1, [pc, #28]	; (8002758 <__NVIC_EnableIRQ+0x38>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	095b      	lsrs	r3, r3, #5
 8002740:	2001      	movs	r0, #1
 8002742:	fa00 f202 	lsl.w	r2, r0, r2
 8002746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800274a:	bf00      	nop
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr
 8002756:	bf00      	nop
 8002758:	e000e100 	.word	0xe000e100

0800275c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	4603      	mov	r3, r0
 8002764:	6039      	str	r1, [r7, #0]
 8002766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	2b00      	cmp	r3, #0
 800276e:	db0a      	blt.n	8002786 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	490c      	ldr	r1, [pc, #48]	; (80027a8 <__NVIC_SetPriority+0x4c>)
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	0112      	lsls	r2, r2, #4
 800277c:	b2d2      	uxtb	r2, r2
 800277e:	440b      	add	r3, r1
 8002780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002784:	e00a      	b.n	800279c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	b2da      	uxtb	r2, r3
 800278a:	4908      	ldr	r1, [pc, #32]	; (80027ac <__NVIC_SetPriority+0x50>)
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	3b04      	subs	r3, #4
 8002794:	0112      	lsls	r2, r2, #4
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	440b      	add	r3, r1
 800279a:	761a      	strb	r2, [r3, #24]
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr
 80027a8:	e000e100 	.word	0xe000e100
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b089      	sub	sp, #36	; 0x24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	60b9      	str	r1, [r7, #8]
 80027ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	f1c3 0307 	rsb	r3, r3, #7
 80027ca:	2b04      	cmp	r3, #4
 80027cc:	bf28      	it	cs
 80027ce:	2304      	movcs	r3, #4
 80027d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2b06      	cmp	r3, #6
 80027d8:	d902      	bls.n	80027e0 <NVIC_EncodePriority+0x30>
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	3b03      	subs	r3, #3
 80027de:	e000      	b.n	80027e2 <NVIC_EncodePriority+0x32>
 80027e0:	2300      	movs	r3, #0
 80027e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027e4:	f04f 32ff 	mov.w	r2, #4294967295
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	401a      	ands	r2, r3
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027f8:	f04f 31ff 	mov.w	r1, #4294967295
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002802:	43d9      	mvns	r1, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002808:	4313      	orrs	r3, r2
         );
}
 800280a:	4618      	mov	r0, r3
 800280c:	3724      	adds	r7, #36	; 0x24
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
	...

08002818 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b082      	sub	sp, #8
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3b01      	subs	r3, #1
 8002824:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002828:	d301      	bcc.n	800282e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800282a:	2301      	movs	r3, #1
 800282c:	e00f      	b.n	800284e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800282e:	4a0a      	ldr	r2, [pc, #40]	; (8002858 <SysTick_Config+0x40>)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3b01      	subs	r3, #1
 8002834:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002836:	210f      	movs	r1, #15
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f7ff ff8e 	bl	800275c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <SysTick_Config+0x40>)
 8002842:	2200      	movs	r2, #0
 8002844:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002846:	4b04      	ldr	r3, [pc, #16]	; (8002858 <SysTick_Config+0x40>)
 8002848:	2207      	movs	r2, #7
 800284a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	e000e010 	.word	0xe000e010

0800285c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f7ff ff29 	bl	80026bc <__NVIC_SetPriorityGrouping>
}
 800286a:	bf00      	nop
 800286c:	3708      	adds	r7, #8
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}

08002872 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002872:	b580      	push	{r7, lr}
 8002874:	b086      	sub	sp, #24
 8002876:	af00      	add	r7, sp, #0
 8002878:	4603      	mov	r3, r0
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002884:	f7ff ff3e 	bl	8002704 <__NVIC_GetPriorityGrouping>
 8002888:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	68b9      	ldr	r1, [r7, #8]
 800288e:	6978      	ldr	r0, [r7, #20]
 8002890:	f7ff ff8e 	bl	80027b0 <NVIC_EncodePriority>
 8002894:	4602      	mov	r2, r0
 8002896:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800289a:	4611      	mov	r1, r2
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff ff5d 	bl	800275c <__NVIC_SetPriority>
}
 80028a2:	bf00      	nop
 80028a4:	3718      	adds	r7, #24
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}

080028aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028aa:	b580      	push	{r7, lr}
 80028ac:	b082      	sub	sp, #8
 80028ae:	af00      	add	r7, sp, #0
 80028b0:	4603      	mov	r3, r0
 80028b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80028b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ff31 	bl	8002720 <__NVIC_EnableIRQ>
}
 80028be:	bf00      	nop
 80028c0:	3708      	adds	r7, #8
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80028c6:	b580      	push	{r7, lr}
 80028c8:	b082      	sub	sp, #8
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f7ff ffa2 	bl	8002818 <SysTick_Config>
 80028d4:	4603      	mov	r3, r0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}

080028de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80028de:	b580      	push	{r7, lr}
 80028e0:	b082      	sub	sp, #8
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e014      	b.n	800291a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	791b      	ldrb	r3, [r3, #4]
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002900:	6878      	ldr	r0, [r7, #4]
 8002902:	f7fe fb5f 	bl	8000fc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	2202      	movs	r2, #2
 800290a:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
	...

08002924 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	795b      	ldrb	r3, [r3, #5]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d101      	bne.n	8002942 <HAL_DAC_Start_DMA+0x1e>
 800293e:	2302      	movs	r3, #2
 8002940:	e08e      	b.n	8002a60 <HAL_DAC_Start_DMA+0x13c>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2201      	movs	r2, #1
 8002946:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2202      	movs	r2, #2
 800294c:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d12a      	bne.n	80029aa <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a43      	ldr	r2, [pc, #268]	; (8002a68 <HAL_DAC_Start_DMA+0x144>)
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	4a42      	ldr	r2, [pc, #264]	; (8002a6c <HAL_DAC_Start_DMA+0x148>)
 8002962:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	4a41      	ldr	r2, [pc, #260]	; (8002a70 <HAL_DAC_Start_DMA+0x14c>)
 800296a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800297a:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 800297c:	6a3b      	ldr	r3, [r7, #32]
 800297e:	2b04      	cmp	r3, #4
 8002980:	d009      	beq.n	8002996 <HAL_DAC_Start_DMA+0x72>
 8002982:	2b08      	cmp	r3, #8
 8002984:	d00c      	beq.n	80029a0 <HAL_DAC_Start_DMA+0x7c>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d000      	beq.n	800298c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800298a:	e039      	b.n	8002a00 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	3308      	adds	r3, #8
 8002992:	617b      	str	r3, [r7, #20]
        break;
 8002994:	e034      	b.n	8002a00 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	330c      	adds	r3, #12
 800299c:	617b      	str	r3, [r7, #20]
        break;
 800299e:	e02f      	b.n	8002a00 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3310      	adds	r3, #16
 80029a6:	617b      	str	r3, [r7, #20]
        break;
 80029a8:	e02a      	b.n	8002a00 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	4a31      	ldr	r2, [pc, #196]	; (8002a74 <HAL_DAC_Start_DMA+0x150>)
 80029b0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	4a30      	ldr	r2, [pc, #192]	; (8002a78 <HAL_DAC_Start_DMA+0x154>)
 80029b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <HAL_DAC_Start_DMA+0x158>)
 80029c0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80029d0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	2b04      	cmp	r3, #4
 80029d6:	d009      	beq.n	80029ec <HAL_DAC_Start_DMA+0xc8>
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d00c      	beq.n	80029f6 <HAL_DAC_Start_DMA+0xd2>
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d000      	beq.n	80029e2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80029e0:	e00e      	b.n	8002a00 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3314      	adds	r3, #20
 80029e8:	617b      	str	r3, [r7, #20]
        break;
 80029ea:	e009      	b.n	8002a00 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	3318      	adds	r3, #24
 80029f2:	617b      	str	r3, [r7, #20]
        break;
 80029f4:	e004      	b.n	8002a00 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	331c      	adds	r3, #28
 80029fc:	617b      	str	r3, [r7, #20]
        break;
 80029fe:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10f      	bne.n	8002a26 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002a14:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	6898      	ldr	r0, [r3, #8]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	f000 fa30 	bl	8002e84 <HAL_DMA_Start_IT>
 8002a24:	e00e      	b.n	8002a44 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002a34:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	68d8      	ldr	r0, [r3, #12]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	f000 fa20 	bl	8002e84 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	409a      	lsls	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	430a      	orrs	r2, r1
 8002a56:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3718      	adds	r7, #24
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	08002bff 	.word	0x08002bff
 8002a6c:	08002c21 	.word	0x08002c21
 8002a70:	08002c3d 	.word	0x08002c3d
 8002a74:	08002cbb 	.word	0x08002cbb
 8002a78:	08002cdd 	.word	0x08002cdd
 8002a7c:	08002cf9 	.word	0x08002cf9

08002a80 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a96:	d118      	bne.n	8002aca <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2204      	movs	r2, #4
 8002a9c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f043 0201 	orr.w	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ab2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002ac2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002ac4:	6878      	ldr	r0, [r7, #4]
 8002ac6:	f000 f843 	bl	8002b50 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ad8:	d118      	bne.n	8002b0c <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2204      	movs	r2, #4
 8002ade:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f043 0202 	orr.w	r2, r3, #2
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002af4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	681a      	ldr	r2, [r3, #0]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002b04:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8cd 	bl	8002ca6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b087      	sub	sp, #28
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	795b      	ldrb	r3, [r3, #5]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <HAL_DAC_ConfigChannel+0x20>
 8002b80:	2302      	movs	r3, #2
 8002b82:	e036      	b.n	8002bf2 <HAL_DAC_ConfigChannel+0x8e>
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002b98:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	697a      	ldr	r2, [r7, #20]
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	697a      	ldr	r2, [r7, #20]
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6819      	ldr	r1, [r3, #0]
 8002bd2:	22c0      	movs	r2, #192	; 0xc0
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	400a      	ands	r2, r1
 8002be2:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	371c      	adds	r7, #28
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b084      	sub	sp, #16
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0a:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff ff81 	bl	8002b14 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2201      	movs	r2, #1
 8002c16:	711a      	strb	r2, [r3, #4]
}
 8002c18:	bf00      	nop
 8002c1a:	3710      	adds	r7, #16
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2c:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002c2e:	68f8      	ldr	r0, [r7, #12]
 8002c30:	f7ff ff7a 	bl	8002b28 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002c34:	bf00      	nop
 8002c36:	3710      	adds	r7, #16
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f043 0204 	orr.w	r2, r3, #4
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8002c56:	68f8      	ldr	r0, [r7, #12]
 8002c58:	f7ff ff70 	bl	8002b3c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	711a      	strb	r2, [r3, #4]
}
 8002c62:	bf00      	nop
 8002c64:	3710      	adds	r7, #16
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	b083      	sub	sp, #12
 8002c6e:	af00      	add	r7, sp, #0
 8002c70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002c72:	bf00      	nop
 8002c74:	370c      	adds	r7, #12
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr

08002c7e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002c7e:	b480      	push	{r7}
 8002c80:	b083      	sub	sp, #12
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8002cae:	bf00      	nop
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b084      	sub	sp, #16
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f7ff ffce 	bl	8002c6a <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	711a      	strb	r2, [r3, #4]
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff ffc7 	bl	8002c7e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d04:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f043 0204 	orr.w	r2, r3, #4
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8002d12:	68f8      	ldr	r0, [r7, #12]
 8002d14:	f7ff ffbd 	bl	8002c92 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	711a      	strb	r2, [r3, #4]
}
 8002d1e:	bf00      	nop
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
	...

08002d28 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d34:	f7ff fa22 	bl	800217c <HAL_GetTick>
 8002d38:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e099      	b.n	8002e78 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2200      	movs	r2, #0
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d64:	e00f      	b.n	8002d86 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d66:	f7ff fa09 	bl	800217c <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d908      	bls.n	8002d86 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e078      	b.n	8002e78 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0301 	and.w	r3, r3, #1
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1e8      	bne.n	8002d66 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	4b38      	ldr	r3, [pc, #224]	; (8002e80 <HAL_DMA_Init+0x158>)
 8002da0:	4013      	ands	r3, r2
 8002da2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dbe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1b      	ldr	r3, [r3, #32]
 8002dd0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d107      	bne.n	8002df0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de8:	4313      	orrs	r3, r2
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	697a      	ldr	r2, [r7, #20]
 8002df6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	f023 0307 	bic.w	r3, r3, #7
 8002e06:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0c:	697a      	ldr	r2, [r7, #20]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	2b04      	cmp	r3, #4
 8002e18:	d117      	bne.n	8002e4a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d00e      	beq.n	8002e4a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 fa6f 	bl	8003310 <DMA_CheckFifoParam>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d008      	beq.n	8002e4a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2240      	movs	r2, #64	; 0x40
 8002e3c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2201      	movs	r2, #1
 8002e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e46:	2301      	movs	r3, #1
 8002e48:	e016      	b.n	8002e78 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 fa26 	bl	80032a4 <DMA_CalcBaseAndBitshift>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e60:	223f      	movs	r2, #63	; 0x3f
 8002e62:	409a      	lsls	r2, r3
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2201      	movs	r2, #1
 8002e72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3718      	adds	r7, #24
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	f010803f 	.word	0xf010803f

08002e84 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
 8002e90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e92:	2300      	movs	r3, #0
 8002e94:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_DMA_Start_IT+0x26>
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	e040      	b.n	8002f2c <HAL_DMA_Start_IT+0xa8>
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2201      	movs	r2, #1
 8002eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d12f      	bne.n	8002f1e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68b9      	ldr	r1, [r7, #8]
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f9b8 	bl	8003248 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002edc:	223f      	movs	r2, #63	; 0x3f
 8002ede:	409a      	lsls	r2, r3
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f042 0216 	orr.w	r2, r2, #22
 8002ef2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d007      	beq.n	8002f0c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0208 	orr.w	r2, r2, #8
 8002f0a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0201 	orr.w	r2, r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e005      	b.n	8002f2a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f26:	2302      	movs	r3, #2
 8002f28:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3718      	adds	r7, #24
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b086      	sub	sp, #24
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f40:	4b92      	ldr	r3, [pc, #584]	; (800318c <HAL_DMA_IRQHandler+0x258>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a92      	ldr	r2, [pc, #584]	; (8003190 <HAL_DMA_IRQHandler+0x25c>)
 8002f46:	fba2 2303 	umull	r2, r3, r2, r3
 8002f4a:	0a9b      	lsrs	r3, r3, #10
 8002f4c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5e:	2208      	movs	r2, #8
 8002f60:	409a      	lsls	r2, r3
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d01a      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d013      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0204 	bic.w	r2, r2, #4
 8002f86:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8c:	2208      	movs	r2, #8
 8002f8e:	409a      	lsls	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f98:	f043 0201 	orr.w	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	409a      	lsls	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4013      	ands	r3, r2
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d012      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	409a      	lsls	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	2204      	movs	r2, #4
 8002fdc:	409a      	lsls	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d012      	beq.n	800300c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00b      	beq.n	800300c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	2204      	movs	r2, #4
 8002ffa:	409a      	lsls	r2, r3
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003010:	2210      	movs	r2, #16
 8003012:	409a      	lsls	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	4013      	ands	r3, r2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d043      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d03c      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800302e:	2210      	movs	r2, #16
 8003030:	409a      	lsls	r2, r3
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d018      	beq.n	8003076 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d108      	bne.n	8003064 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	2b00      	cmp	r3, #0
 8003058:	d024      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	4798      	blx	r3
 8003062:	e01f      	b.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003068:	2b00      	cmp	r3, #0
 800306a:	d01b      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	4798      	blx	r3
 8003074:	e016      	b.n	80030a4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003080:	2b00      	cmp	r3, #0
 8003082:	d107      	bne.n	8003094 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f022 0208 	bic.w	r2, r2, #8
 8003092:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030a8:	2220      	movs	r2, #32
 80030aa:	409a      	lsls	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4013      	ands	r3, r2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 808e 	beq.w	80031d2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0310 	and.w	r3, r3, #16
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f000 8086 	beq.w	80031d2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030ca:	2220      	movs	r2, #32
 80030cc:	409a      	lsls	r2, r3
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b05      	cmp	r3, #5
 80030dc:	d136      	bne.n	800314c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0216 	bic.w	r2, r2, #22
 80030ec:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030fc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003102:	2b00      	cmp	r3, #0
 8003104:	d103      	bne.n	800310e <HAL_DMA_IRQHandler+0x1da>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310a:	2b00      	cmp	r3, #0
 800310c:	d007      	beq.n	800311e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0208 	bic.w	r2, r2, #8
 800311c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003122:	223f      	movs	r2, #63	; 0x3f
 8003124:	409a      	lsls	r2, r3
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2201      	movs	r2, #1
 8003136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800313e:	2b00      	cmp	r3, #0
 8003140:	d07d      	beq.n	800323e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
        }
        return;
 800314a:	e078      	b.n	800323e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d01c      	beq.n	8003194 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d108      	bne.n	800317a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316c:	2b00      	cmp	r3, #0
 800316e:	d030      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	4798      	blx	r3
 8003178:	e02b      	b.n	80031d2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800317e:	2b00      	cmp	r3, #0
 8003180:	d027      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	4798      	blx	r3
 800318a:	e022      	b.n	80031d2 <HAL_DMA_IRQHandler+0x29e>
 800318c:	20000020 	.word	0x20000020
 8003190:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d10f      	bne.n	80031c2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0210 	bic.w	r2, r2, #16
 80031b0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d032      	beq.n	8003240 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d022      	beq.n	800322c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2205      	movs	r2, #5
 80031ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	681a      	ldr	r2, [r3, #0]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f022 0201 	bic.w	r2, r2, #1
 80031fc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	3301      	adds	r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	429a      	cmp	r2, r3
 8003208:	d307      	bcc.n	800321a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1f2      	bne.n	80031fe <HAL_DMA_IRQHandler+0x2ca>
 8003218:	e000      	b.n	800321c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800321a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	4798      	blx	r3
 800323c:	e000      	b.n	8003240 <HAL_DMA_IRQHandler+0x30c>
        return;
 800323e:	bf00      	nop
    }
  }
}
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop

08003248 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
 8003254:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003264:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	683a      	ldr	r2, [r7, #0]
 800326c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b40      	cmp	r3, #64	; 0x40
 8003274:	d108      	bne.n	8003288 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003286:	e007      	b.n	8003298 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68ba      	ldr	r2, [r7, #8]
 800328e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]
}
 8003298:	bf00      	nop
 800329a:	3714      	adds	r7, #20
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	3b10      	subs	r3, #16
 80032b4:	4a14      	ldr	r2, [pc, #80]	; (8003308 <DMA_CalcBaseAndBitshift+0x64>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	091b      	lsrs	r3, r3, #4
 80032bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032be:	4a13      	ldr	r2, [pc, #76]	; (800330c <DMA_CalcBaseAndBitshift+0x68>)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	461a      	mov	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b03      	cmp	r3, #3
 80032d0:	d909      	bls.n	80032e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032da:	f023 0303 	bic.w	r3, r3, #3
 80032de:	1d1a      	adds	r2, r3, #4
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	659a      	str	r2, [r3, #88]	; 0x58
 80032e4:	e007      	b.n	80032f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3714      	adds	r7, #20
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	aaaaaaab 	.word	0xaaaaaaab
 800330c:	0800b650 	.word	0x0800b650

08003310 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003310:	b480      	push	{r7}
 8003312:	b085      	sub	sp, #20
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003320:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d11f      	bne.n	800336a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d855      	bhi.n	80033dc <DMA_CheckFifoParam+0xcc>
 8003330:	a201      	add	r2, pc, #4	; (adr r2, 8003338 <DMA_CheckFifoParam+0x28>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	08003349 	.word	0x08003349
 800333c:	0800335b 	.word	0x0800335b
 8003340:	08003349 	.word	0x08003349
 8003344:	080033dd 	.word	0x080033dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003350:	2b00      	cmp	r3, #0
 8003352:	d045      	beq.n	80033e0 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003354:	2301      	movs	r3, #1
 8003356:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003358:	e042      	b.n	80033e0 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003362:	d13f      	bne.n	80033e4 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003368:	e03c      	b.n	80033e4 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003372:	d121      	bne.n	80033b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	2b03      	cmp	r3, #3
 8003378:	d836      	bhi.n	80033e8 <DMA_CheckFifoParam+0xd8>
 800337a:	a201      	add	r2, pc, #4	; (adr r2, 8003380 <DMA_CheckFifoParam+0x70>)
 800337c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003380:	08003391 	.word	0x08003391
 8003384:	08003397 	.word	0x08003397
 8003388:	08003391 	.word	0x08003391
 800338c:	080033a9 	.word	0x080033a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	73fb      	strb	r3, [r7, #15]
      break;
 8003394:	e02f      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800339a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d024      	beq.n	80033ec <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033a6:	e021      	b.n	80033ec <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033b0:	d11e      	bne.n	80033f0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033b6:	e01b      	b.n	80033f0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d902      	bls.n	80033c4 <DMA_CheckFifoParam+0xb4>
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d003      	beq.n	80033ca <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033c2:	e018      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	73fb      	strb	r3, [r7, #15]
      break;
 80033c8:	e015      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	73fb      	strb	r3, [r7, #15]
      break;
 80033da:	e00b      	b.n	80033f4 <DMA_CheckFifoParam+0xe4>
      break;
 80033dc:	bf00      	nop
 80033de:	e00a      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033e0:	bf00      	nop
 80033e2:	e008      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033e4:	bf00      	nop
 80033e6:	e006      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033e8:	bf00      	nop
 80033ea:	e004      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033ec:	bf00      	nop
 80033ee:	e002      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;   
 80033f0:	bf00      	nop
 80033f2:	e000      	b.n	80033f6 <DMA_CheckFifoParam+0xe6>
      break;
 80033f4:	bf00      	nop
    }
  } 
  
  return status; 
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003404:	b480      	push	{r7}
 8003406:	b089      	sub	sp, #36	; 0x24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003416:	2300      	movs	r3, #0
 8003418:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800341a:	2300      	movs	r3, #0
 800341c:	61fb      	str	r3, [r7, #28]
 800341e:	e177      	b.n	8003710 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003420:	2201      	movs	r2, #1
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	697a      	ldr	r2, [r7, #20]
 8003430:	4013      	ands	r3, r2
 8003432:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003434:	693a      	ldr	r2, [r7, #16]
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	429a      	cmp	r2, r3
 800343a:	f040 8166 	bne.w	800370a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	2b01      	cmp	r3, #1
 8003444:	d00b      	beq.n	800345e <HAL_GPIO_Init+0x5a>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b02      	cmp	r3, #2
 800344c:	d007      	beq.n	800345e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003452:	2b11      	cmp	r3, #17
 8003454:	d003      	beq.n	800345e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b12      	cmp	r3, #18
 800345c:	d130      	bne.n	80034c0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	005b      	lsls	r3, r3, #1
 8003468:	2203      	movs	r2, #3
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43db      	mvns	r3, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4013      	ands	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68da      	ldr	r2, [r3, #12]
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	fa02 f303 	lsl.w	r3, r2, r3
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69ba      	ldr	r2, [r7, #24]
 800348c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003494:	2201      	movs	r2, #1
 8003496:	69fb      	ldr	r3, [r7, #28]
 8003498:	fa02 f303 	lsl.w	r3, r2, r3
 800349c:	43db      	mvns	r3, r3
 800349e:	69ba      	ldr	r2, [r7, #24]
 80034a0:	4013      	ands	r3, r2
 80034a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	091b      	lsrs	r3, r3, #4
 80034aa:	f003 0201 	and.w	r2, r3, #1
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	fa02 f303 	lsl.w	r3, r2, r3
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d003      	beq.n	8003500 <HAL_GPIO_Init+0xfc>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	2b12      	cmp	r3, #18
 80034fe:	d123      	bne.n	8003548 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	08da      	lsrs	r2, r3, #3
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3208      	adds	r2, #8
 8003508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800350c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0307 	and.w	r3, r3, #7
 8003514:	009b      	lsls	r3, r3, #2
 8003516:	220f      	movs	r2, #15
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f003 0307 	and.w	r3, r3, #7
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4313      	orrs	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	08da      	lsrs	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	3208      	adds	r2, #8
 8003542:	69b9      	ldr	r1, [r7, #24]
 8003544:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f003 0203 	and.w	r2, r3, #3
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	f000 80c0 	beq.w	800370a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800358a:	2300      	movs	r3, #0
 800358c:	60fb      	str	r3, [r7, #12]
 800358e:	4b65      	ldr	r3, [pc, #404]	; (8003724 <HAL_GPIO_Init+0x320>)
 8003590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003592:	4a64      	ldr	r2, [pc, #400]	; (8003724 <HAL_GPIO_Init+0x320>)
 8003594:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003598:	6453      	str	r3, [r2, #68]	; 0x44
 800359a:	4b62      	ldr	r3, [pc, #392]	; (8003724 <HAL_GPIO_Init+0x320>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035a6:	4a60      	ldr	r2, [pc, #384]	; (8003728 <HAL_GPIO_Init+0x324>)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	089b      	lsrs	r3, r3, #2
 80035ac:	3302      	adds	r3, #2
 80035ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f003 0303 	and.w	r3, r3, #3
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	220f      	movs	r2, #15
 80035be:	fa02 f303 	lsl.w	r3, r2, r3
 80035c2:	43db      	mvns	r3, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4013      	ands	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a57      	ldr	r2, [pc, #348]	; (800372c <HAL_GPIO_Init+0x328>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d037      	beq.n	8003642 <HAL_GPIO_Init+0x23e>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a56      	ldr	r2, [pc, #344]	; (8003730 <HAL_GPIO_Init+0x32c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d031      	beq.n	800363e <HAL_GPIO_Init+0x23a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a55      	ldr	r2, [pc, #340]	; (8003734 <HAL_GPIO_Init+0x330>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d02b      	beq.n	800363a <HAL_GPIO_Init+0x236>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a54      	ldr	r2, [pc, #336]	; (8003738 <HAL_GPIO_Init+0x334>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d025      	beq.n	8003636 <HAL_GPIO_Init+0x232>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a53      	ldr	r2, [pc, #332]	; (800373c <HAL_GPIO_Init+0x338>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <HAL_GPIO_Init+0x22e>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a52      	ldr	r2, [pc, #328]	; (8003740 <HAL_GPIO_Init+0x33c>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d019      	beq.n	800362e <HAL_GPIO_Init+0x22a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a51      	ldr	r2, [pc, #324]	; (8003744 <HAL_GPIO_Init+0x340>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <HAL_GPIO_Init+0x226>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a50      	ldr	r2, [pc, #320]	; (8003748 <HAL_GPIO_Init+0x344>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00d      	beq.n	8003626 <HAL_GPIO_Init+0x222>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4f      	ldr	r2, [pc, #316]	; (800374c <HAL_GPIO_Init+0x348>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <HAL_GPIO_Init+0x21e>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4e      	ldr	r2, [pc, #312]	; (8003750 <HAL_GPIO_Init+0x34c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d101      	bne.n	800361e <HAL_GPIO_Init+0x21a>
 800361a:	2309      	movs	r3, #9
 800361c:	e012      	b.n	8003644 <HAL_GPIO_Init+0x240>
 800361e:	230a      	movs	r3, #10
 8003620:	e010      	b.n	8003644 <HAL_GPIO_Init+0x240>
 8003622:	2308      	movs	r3, #8
 8003624:	e00e      	b.n	8003644 <HAL_GPIO_Init+0x240>
 8003626:	2307      	movs	r3, #7
 8003628:	e00c      	b.n	8003644 <HAL_GPIO_Init+0x240>
 800362a:	2306      	movs	r3, #6
 800362c:	e00a      	b.n	8003644 <HAL_GPIO_Init+0x240>
 800362e:	2305      	movs	r3, #5
 8003630:	e008      	b.n	8003644 <HAL_GPIO_Init+0x240>
 8003632:	2304      	movs	r3, #4
 8003634:	e006      	b.n	8003644 <HAL_GPIO_Init+0x240>
 8003636:	2303      	movs	r3, #3
 8003638:	e004      	b.n	8003644 <HAL_GPIO_Init+0x240>
 800363a:	2302      	movs	r3, #2
 800363c:	e002      	b.n	8003644 <HAL_GPIO_Init+0x240>
 800363e:	2301      	movs	r3, #1
 8003640:	e000      	b.n	8003644 <HAL_GPIO_Init+0x240>
 8003642:	2300      	movs	r3, #0
 8003644:	69fa      	ldr	r2, [r7, #28]
 8003646:	f002 0203 	and.w	r2, r2, #3
 800364a:	0092      	lsls	r2, r2, #2
 800364c:	4093      	lsls	r3, r2
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	4313      	orrs	r3, r2
 8003652:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003654:	4934      	ldr	r1, [pc, #208]	; (8003728 <HAL_GPIO_Init+0x324>)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	089b      	lsrs	r3, r3, #2
 800365a:	3302      	adds	r3, #2
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003662:	4b3c      	ldr	r3, [pc, #240]	; (8003754 <HAL_GPIO_Init+0x350>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	43db      	mvns	r3, r3
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	4013      	ands	r3, r2
 8003670:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4313      	orrs	r3, r2
 8003684:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003686:	4a33      	ldr	r2, [pc, #204]	; (8003754 <HAL_GPIO_Init+0x350>)
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800368c:	4b31      	ldr	r3, [pc, #196]	; (8003754 <HAL_GPIO_Init+0x350>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	43db      	mvns	r3, r3
 8003696:	69ba      	ldr	r2, [r7, #24]
 8003698:	4013      	ands	r3, r2
 800369a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80036a8:	69ba      	ldr	r2, [r7, #24]
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b0:	4a28      	ldr	r2, [pc, #160]	; (8003754 <HAL_GPIO_Init+0x350>)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036b6:	4b27      	ldr	r3, [pc, #156]	; (8003754 <HAL_GPIO_Init+0x350>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	43db      	mvns	r3, r3
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	4013      	ands	r3, r2
 80036c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d003      	beq.n	80036da <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036da:	4a1e      	ldr	r2, [pc, #120]	; (8003754 <HAL_GPIO_Init+0x350>)
 80036dc:	69bb      	ldr	r3, [r7, #24]
 80036de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036e0:	4b1c      	ldr	r3, [pc, #112]	; (8003754 <HAL_GPIO_Init+0x350>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	43db      	mvns	r3, r3
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	4013      	ands	r3, r2
 80036ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d003      	beq.n	8003704 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	4313      	orrs	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003704:	4a13      	ldr	r2, [pc, #76]	; (8003754 <HAL_GPIO_Init+0x350>)
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3301      	adds	r3, #1
 800370e:	61fb      	str	r3, [r7, #28]
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	2b0f      	cmp	r3, #15
 8003714:	f67f ae84 	bls.w	8003420 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003718:	bf00      	nop
 800371a:	3724      	adds	r7, #36	; 0x24
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40023800 	.word	0x40023800
 8003728:	40013800 	.word	0x40013800
 800372c:	40020000 	.word	0x40020000
 8003730:	40020400 	.word	0x40020400
 8003734:	40020800 	.word	0x40020800
 8003738:	40020c00 	.word	0x40020c00
 800373c:	40021000 	.word	0x40021000
 8003740:	40021400 	.word	0x40021400
 8003744:	40021800 	.word	0x40021800
 8003748:	40021c00 	.word	0x40021c00
 800374c:	40022000 	.word	0x40022000
 8003750:	40022400 	.word	0x40022400
 8003754:	40013c00 	.word	0x40013c00

08003758 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003758:	b480      	push	{r7}
 800375a:	b083      	sub	sp, #12
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
 8003760:	460b      	mov	r3, r1
 8003762:	807b      	strh	r3, [r7, #2]
 8003764:	4613      	mov	r3, r2
 8003766:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003768:	787b      	ldrb	r3, [r7, #1]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003774:	e003      	b.n	800377e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003776:	887b      	ldrh	r3, [r7, #2]
 8003778:	041a      	lsls	r2, r3, #16
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	619a      	str	r2, [r3, #24]
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
	...

0800378c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e11f      	b.n	80039de <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f7fd fdb6 	bl	8001324 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2224      	movs	r2, #36	; 0x24
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 0201 	bic.w	r2, r2, #1
 80037ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037f0:	f001 ff16 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 80037f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	4a7b      	ldr	r2, [pc, #492]	; (80039e8 <HAL_I2C_Init+0x25c>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d807      	bhi.n	8003810 <HAL_I2C_Init+0x84>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a7a      	ldr	r2, [pc, #488]	; (80039ec <HAL_I2C_Init+0x260>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	e006      	b.n	800381e <HAL_I2C_Init+0x92>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	4a77      	ldr	r2, [pc, #476]	; (80039f0 <HAL_I2C_Init+0x264>)
 8003814:	4293      	cmp	r3, r2
 8003816:	bf94      	ite	ls
 8003818:	2301      	movls	r3, #1
 800381a:	2300      	movhi	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0db      	b.n	80039de <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	4a72      	ldr	r2, [pc, #456]	; (80039f4 <HAL_I2C_Init+0x268>)
 800382a:	fba2 2303 	umull	r2, r3, r2, r3
 800382e:	0c9b      	lsrs	r3, r3, #18
 8003830:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	4a64      	ldr	r2, [pc, #400]	; (80039e8 <HAL_I2C_Init+0x25c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d802      	bhi.n	8003860 <HAL_I2C_Init+0xd4>
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3301      	adds	r3, #1
 800385e:	e009      	b.n	8003874 <HAL_I2C_Init+0xe8>
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003866:	fb02 f303 	mul.w	r3, r2, r3
 800386a:	4a63      	ldr	r2, [pc, #396]	; (80039f8 <HAL_I2C_Init+0x26c>)
 800386c:	fba2 2303 	umull	r2, r3, r2, r3
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	3301      	adds	r3, #1
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	69db      	ldr	r3, [r3, #28]
 8003882:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003886:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	4956      	ldr	r1, [pc, #344]	; (80039e8 <HAL_I2C_Init+0x25c>)
 8003890:	428b      	cmp	r3, r1
 8003892:	d80d      	bhi.n	80038b0 <HAL_I2C_Init+0x124>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1e59      	subs	r1, r3, #1
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fbb1 f3f3 	udiv	r3, r1, r3
 80038a2:	3301      	adds	r3, #1
 80038a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	bf38      	it	cc
 80038ac:	2304      	movcc	r3, #4
 80038ae:	e04f      	b.n	8003950 <HAL_I2C_Init+0x1c4>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d111      	bne.n	80038dc <HAL_I2C_Init+0x150>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	1e58      	subs	r0, r3, #1
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6859      	ldr	r1, [r3, #4]
 80038c0:	460b      	mov	r3, r1
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	440b      	add	r3, r1
 80038c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ca:	3301      	adds	r3, #1
 80038cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	bf0c      	ite	eq
 80038d4:	2301      	moveq	r3, #1
 80038d6:	2300      	movne	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	e012      	b.n	8003902 <HAL_I2C_Init+0x176>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bf0c      	ite	eq
 80038fc:	2301      	moveq	r3, #1
 80038fe:	2300      	movne	r3, #0
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <HAL_I2C_Init+0x17e>
 8003906:	2301      	movs	r3, #1
 8003908:	e022      	b.n	8003950 <HAL_I2C_Init+0x1c4>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10e      	bne.n	8003930 <HAL_I2C_Init+0x1a4>
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	1e58      	subs	r0, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	460b      	mov	r3, r1
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	440b      	add	r3, r1
 8003920:	fbb0 f3f3 	udiv	r3, r0, r3
 8003924:	3301      	adds	r3, #1
 8003926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800392e:	e00f      	b.n	8003950 <HAL_I2C_Init+0x1c4>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1e58      	subs	r0, r3, #1
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6859      	ldr	r1, [r3, #4]
 8003938:	460b      	mov	r3, r1
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	0099      	lsls	r1, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	fbb0 f3f3 	udiv	r3, r0, r3
 8003946:	3301      	adds	r3, #1
 8003948:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800394c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003950:	6879      	ldr	r1, [r7, #4]
 8003952:	6809      	ldr	r1, [r1, #0]
 8003954:	4313      	orrs	r3, r2
 8003956:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	431a      	orrs	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	430a      	orrs	r2, r1
 8003972:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800397e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6911      	ldr	r1, [r2, #16]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	4311      	orrs	r1, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	430b      	orrs	r3, r1
 8003992:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695a      	ldr	r2, [r3, #20]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	699b      	ldr	r3, [r3, #24]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f042 0201 	orr.w	r2, r2, #1
 80039be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	000186a0 	.word	0x000186a0
 80039ec:	001e847f 	.word	0x001e847f
 80039f0:	003d08ff 	.word	0x003d08ff
 80039f4:	431bde83 	.word	0x431bde83
 80039f8:	10624dd3 	.word	0x10624dd3

080039fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
 8003a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b20      	cmp	r3, #32
 8003a10:	d129      	bne.n	8003a66 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2224      	movs	r2, #36	; 0x24
 8003a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0201 	bic.w	r2, r2, #1
 8003a28:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0210 	bic.w	r2, r2, #16
 8003a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	683a      	ldr	r2, [r7, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f042 0201 	orr.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2220      	movs	r2, #32
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e000      	b.n	8003a68 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a66:	2302      	movs	r3, #2
  }
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b085      	sub	sp, #20
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b20      	cmp	r3, #32
 8003a8c:	d12a      	bne.n	8003ae4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2224      	movs	r2, #36	; 0x24
 8003a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f022 0201 	bic.w	r2, r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003aae:	89fb      	ldrh	r3, [r7, #14]
 8003ab0:	f023 030f 	bic.w	r3, r3, #15
 8003ab4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	89fb      	ldrh	r3, [r7, #14]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	89fa      	ldrh	r2, [r7, #14]
 8003ac6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f042 0201 	orr.w	r2, r2, #1
 8003ad6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2220      	movs	r2, #32
 8003adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	e000      	b.n	8003ae6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003ae4:	2302      	movs	r3, #2
  }
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003af2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af4:	b08f      	sub	sp, #60	; 0x3c
 8003af6:	af0a      	add	r7, sp, #40	; 0x28
 8003af8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d101      	bne.n	8003b04 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e10f      	b.n	8003d24 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d106      	bne.n	8003b24 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f006 f94e 	bl	8009dc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2203      	movs	r2, #3
 8003b28:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d102      	bne.n	8003b3e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 f971 	bl	8006e2a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	603b      	str	r3, [r7, #0]
 8003b4e:	687e      	ldr	r6, [r7, #4]
 8003b50:	466d      	mov	r5, sp
 8003b52:	f106 0410 	add.w	r4, r6, #16
 8003b56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b62:	e885 0003 	stmia.w	r5, {r0, r1}
 8003b66:	1d33      	adds	r3, r6, #4
 8003b68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b6a:	6838      	ldr	r0, [r7, #0]
 8003b6c:	f003 f848 	bl	8006c00 <USB_CoreInit>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2202      	movs	r2, #2
 8003b7a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e0d0      	b.n	8003d24 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f003 f95f 	bl	8006e4c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b8e:	2300      	movs	r3, #0
 8003b90:	73fb      	strb	r3, [r7, #15]
 8003b92:	e04a      	b.n	8003c2a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003b94:	7bfa      	ldrb	r2, [r7, #15]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	333d      	adds	r3, #61	; 0x3d
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003ba8:	7bfa      	ldrb	r2, [r7, #15]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	00db      	lsls	r3, r3, #3
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	333c      	adds	r3, #60	; 0x3c
 8003bb8:	7bfa      	ldrb	r2, [r7, #15]
 8003bba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003bbc:	7bfa      	ldrb	r2, [r7, #15]
 8003bbe:	7bfb      	ldrb	r3, [r7, #15]
 8003bc0:	b298      	uxth	r0, r3
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	3342      	adds	r3, #66	; 0x42
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003bd4:	7bfa      	ldrb	r2, [r7, #15]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	00db      	lsls	r3, r3, #3
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	333f      	adds	r3, #63	; 0x3f
 8003be4:	2200      	movs	r2, #0
 8003be6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003be8:	7bfa      	ldrb	r2, [r7, #15]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	00db      	lsls	r3, r3, #3
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	3344      	adds	r3, #68	; 0x44
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003bfc:	7bfa      	ldrb	r2, [r7, #15]
 8003bfe:	6879      	ldr	r1, [r7, #4]
 8003c00:	4613      	mov	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	1a9b      	subs	r3, r3, r2
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	440b      	add	r3, r1
 8003c0a:	3348      	adds	r3, #72	; 0x48
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c10:	7bfa      	ldrb	r2, [r7, #15]
 8003c12:	6879      	ldr	r1, [r7, #4]
 8003c14:	4613      	mov	r3, r2
 8003c16:	00db      	lsls	r3, r3, #3
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	440b      	add	r3, r1
 8003c1e:	3350      	adds	r3, #80	; 0x50
 8003c20:	2200      	movs	r2, #0
 8003c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c24:	7bfb      	ldrb	r3, [r7, #15]
 8003c26:	3301      	adds	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
 8003c2a:	7bfa      	ldrb	r2, [r7, #15]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d3af      	bcc.n	8003b94 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
 8003c38:	e044      	b.n	8003cc4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003c3a:	7bfa      	ldrb	r2, [r7, #15]
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	1a9b      	subs	r3, r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003c50:	7bfa      	ldrb	r2, [r7, #15]
 8003c52:	6879      	ldr	r1, [r7, #4]
 8003c54:	4613      	mov	r3, r2
 8003c56:	00db      	lsls	r3, r3, #3
 8003c58:	1a9b      	subs	r3, r3, r2
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	440b      	add	r3, r1
 8003c5e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003c66:	7bfa      	ldrb	r2, [r7, #15]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003c78:	2200      	movs	r2, #0
 8003c7a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003c7c:	7bfa      	ldrb	r2, [r7, #15]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	00db      	lsls	r3, r3, #3
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003c92:	7bfa      	ldrb	r2, [r7, #15]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	00db      	lsls	r3, r3, #3
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ca8:	7bfa      	ldrb	r2, [r7, #15]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	00db      	lsls	r3, r3, #3
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cbe:	7bfb      	ldrb	r3, [r7, #15]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	73fb      	strb	r3, [r7, #15]
 8003cc4:	7bfa      	ldrb	r2, [r7, #15]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d3b5      	bcc.n	8003c3a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	603b      	str	r3, [r7, #0]
 8003cd4:	687e      	ldr	r6, [r7, #4]
 8003cd6:	466d      	mov	r5, sp
 8003cd8:	f106 0410 	add.w	r4, r6, #16
 8003cdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003ce4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003ce8:	e885 0003 	stmia.w	r5, {r0, r1}
 8003cec:	1d33      	adds	r3, r6, #4
 8003cee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003cf0:	6838      	ldr	r0, [r7, #0]
 8003cf2:	f003 f8d5 	bl	8006ea0 <USB_DevInit>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d005      	beq.n	8003d08 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e00d      	b.n	8003d24 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f004 f91d 	bl	8007f5c <USB_DevDisconnect>

  return HAL_OK;
 8003d22:	2300      	movs	r3, #0
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	3714      	adds	r7, #20
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d2c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d101      	bne.n	8003d48 <HAL_PCD_Start+0x1c>
 8003d44:	2302      	movs	r3, #2
 8003d46:	e020      	b.n	8003d8a <HAL_PCD_Start+0x5e>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	d109      	bne.n	8003d6c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d005      	beq.n	8003d6c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f003 f849 	bl	8006e08 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f004 f8cd 	bl	8007f1a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003d88:	2300      	movs	r3, #0
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3710      	adds	r7, #16
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003d92:	b590      	push	{r4, r7, lr}
 8003d94:	b08d      	sub	sp, #52	; 0x34
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da0:	6a3b      	ldr	r3, [r7, #32]
 8003da2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f004 f98b 	bl	80080c4 <USB_GetMode>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	f040 839d 	bne.w	80044f0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f004 f8ef 	bl	8007f9e <USB_ReadInterrupts>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8393 	beq.w	80044ee <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f004 f8e6 	bl	8007f9e <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d107      	bne.n	8003dec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695a      	ldr	r2, [r3, #20]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f002 0202 	and.w	r2, r2, #2
 8003dea:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f004 f8d4 	bl	8007f9e <USB_ReadInterrupts>
 8003df6:	4603      	mov	r3, r0
 8003df8:	f003 0310 	and.w	r3, r3, #16
 8003dfc:	2b10      	cmp	r3, #16
 8003dfe:	d161      	bne.n	8003ec4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	699a      	ldr	r2, [r3, #24]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f022 0210 	bic.w	r2, r2, #16
 8003e0e:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f003 020f 	and.w	r2, r3, #15
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003e28:	687a      	ldr	r2, [r7, #4]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3304      	adds	r3, #4
 8003e2e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	0c5b      	lsrs	r3, r3, #17
 8003e34:	f003 030f 	and.w	r3, r3, #15
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d124      	bne.n	8003e86 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d035      	beq.n	8003eb4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	091b      	lsrs	r3, r3, #4
 8003e50:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003e52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	6a38      	ldr	r0, [r7, #32]
 8003e5c:	f003 ff3a 	bl	8007cd4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	091b      	lsrs	r3, r3, #4
 8003e68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e6c:	441a      	add	r2, r3
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	699a      	ldr	r2, [r3, #24]
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	091b      	lsrs	r3, r3, #4
 8003e7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003e7e:	441a      	add	r2, r3
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	619a      	str	r2, [r3, #24]
 8003e84:	e016      	b.n	8003eb4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003e86:	69bb      	ldr	r3, [r7, #24]
 8003e88:	0c5b      	lsrs	r3, r3, #17
 8003e8a:	f003 030f 	and.w	r3, r3, #15
 8003e8e:	2b06      	cmp	r3, #6
 8003e90:	d110      	bne.n	8003eb4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003e98:	2208      	movs	r2, #8
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	6a38      	ldr	r0, [r7, #32]
 8003e9e:	f003 ff19 	bl	8007cd4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	699a      	ldr	r2, [r3, #24]
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	091b      	lsrs	r3, r3, #4
 8003eaa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003eae:	441a      	add	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	699a      	ldr	r2, [r3, #24]
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0210 	orr.w	r2, r2, #16
 8003ec2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f004 f868 	bl	8007f9e <USB_ReadInterrupts>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ed4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ed8:	d16e      	bne.n	8003fb8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003eda:	2300      	movs	r3, #0
 8003edc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f004 f86e 	bl	8007fc4 <USB_ReadDevAllOutEpInterrupt>
 8003ee8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003eea:	e062      	b.n	8003fb2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	f003 0301 	and.w	r3, r3, #1
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d057      	beq.n	8003fa6 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003efc:	b2d2      	uxtb	r2, r2
 8003efe:	4611      	mov	r1, r2
 8003f00:	4618      	mov	r0, r3
 8003f02:	f004 f893 	bl	800802c <USB_ReadDevOutEPInterrupt>
 8003f06:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00c      	beq.n	8003f2c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	69fb      	ldr	r3, [r7, #28]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2301      	movs	r3, #1
 8003f22:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003f24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fdb0 	bl	8004a8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f003 0308 	and.w	r3, r3, #8
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d00c      	beq.n	8003f50 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f38:	015a      	lsls	r2, r3, #5
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f42:	461a      	mov	r2, r3
 8003f44:	2308      	movs	r3, #8
 8003f46:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003f48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003f4a:	6878      	ldr	r0, [r7, #4]
 8003f4c:	f000 feaa 	bl	8004ca4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d008      	beq.n	8003f6c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f66:	461a      	mov	r2, r3
 8003f68:	2310      	movs	r3, #16
 8003f6a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d008      	beq.n	8003f88 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f82:	461a      	mov	r2, r3
 8003f84:	2320      	movs	r3, #32
 8003f86:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f94:	015a      	lsls	r2, r3, #5
 8003f96:	69fb      	ldr	r3, [r7, #28]
 8003f98:	4413      	add	r3, r2
 8003f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003fa4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa8:	3301      	adds	r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d199      	bne.n	8003eec <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f003 ffee 	bl	8007f9e <USB_ReadInterrupts>
 8003fc2:	4603      	mov	r3, r0
 8003fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003fcc:	f040 80c0 	bne.w	8004150 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f004 f80f 	bl	8007ff8 <USB_ReadDevAllInEpInterrupt>
 8003fda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003fe0:	e0b2      	b.n	8004148 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80a7 	beq.w	800413c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f004 f835 	bl	8008068 <USB_ReadDevInEPInterrupt>
 8003ffe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d057      	beq.n	80040ba <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	f003 030f 	and.w	r3, r3, #15
 8004010:	2201      	movs	r2, #1
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	43db      	mvns	r3, r3
 8004024:	69f9      	ldr	r1, [r7, #28]
 8004026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800402a:	4013      	ands	r3, r2
 800402c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004030:	015a      	lsls	r2, r3, #5
 8004032:	69fb      	ldr	r3, [r7, #28]
 8004034:	4413      	add	r3, r2
 8004036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403a:	461a      	mov	r2, r3
 800403c:	2301      	movs	r3, #1
 800403e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	691b      	ldr	r3, [r3, #16]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d132      	bne.n	80040ae <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404c:	4613      	mov	r3, r2
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	1a9b      	subs	r3, r3, r2
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	440b      	add	r3, r1
 8004056:	3348      	adds	r3, #72	; 0x48
 8004058:	6819      	ldr	r1, [r3, #0]
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	1a9b      	subs	r3, r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	4403      	add	r3, r0
 8004068:	3344      	adds	r3, #68	; 0x44
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4419      	add	r1, r3
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004072:	4613      	mov	r3, r2
 8004074:	00db      	lsls	r3, r3, #3
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	4403      	add	r3, r0
 800407c:	3348      	adds	r3, #72	; 0x48
 800407e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	2b00      	cmp	r3, #0
 8004084:	d113      	bne.n	80040ae <HAL_PCD_IRQHandler+0x31c>
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800408a:	4613      	mov	r3, r2
 800408c:	00db      	lsls	r3, r3, #3
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	3350      	adds	r3, #80	; 0x50
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d108      	bne.n	80040ae <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80040a6:	461a      	mov	r2, r3
 80040a8:	2101      	movs	r1, #1
 80040aa:	f004 f83d 	bl	8008128 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	4619      	mov	r1, r3
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f005 ff04 	bl	8009ec2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	f003 0308 	and.w	r3, r3, #8
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	015a      	lsls	r2, r3, #5
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	4413      	add	r3, r2
 80040cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040d0:	461a      	mov	r2, r3
 80040d2:	2308      	movs	r3, #8
 80040d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d008      	beq.n	80040f2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80040e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	69fb      	ldr	r3, [r7, #28]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ec:	461a      	mov	r2, r3
 80040ee:	2310      	movs	r3, #16
 80040f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d008      	beq.n	800410e <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	015a      	lsls	r2, r3, #5
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	4413      	add	r3, r2
 8004104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004108:	461a      	mov	r2, r3
 800410a:	2340      	movs	r3, #64	; 0x40
 800410c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d008      	beq.n	800412a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411a:	015a      	lsls	r2, r3, #5
 800411c:	69fb      	ldr	r3, [r7, #28]
 800411e:	4413      	add	r3, r2
 8004120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004124:	461a      	mov	r2, r3
 8004126:	2302      	movs	r3, #2
 8004128:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004130:	2b00      	cmp	r3, #0
 8004132:	d003      	beq.n	800413c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 fc1b 	bl	8004972 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800413c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413e:	3301      	adds	r3, #1
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004144:	085b      	lsrs	r3, r3, #1
 8004146:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800414a:	2b00      	cmp	r3, #0
 800414c:	f47f af49 	bne.w	8003fe2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4618      	mov	r0, r3
 8004156:	f003 ff22 	bl	8007f9e <USB_ReadInterrupts>
 800415a:	4603      	mov	r3, r0
 800415c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004164:	d122      	bne.n	80041ac <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004166:	69fb      	ldr	r3, [r7, #28]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	69fa      	ldr	r2, [r7, #28]
 8004170:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004180:	2b01      	cmp	r3, #1
 8004182:	d108      	bne.n	8004196 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800418c:	2100      	movs	r1, #0
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 fe26 	bl	8004de0 <HAL_PCDEx_LPM_Callback>
 8004194:	e002      	b.n	800419c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f005 ff0a 	bl	8009fb0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695a      	ldr	r2, [r3, #20]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80041aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f003 fef4 	bl	8007f9e <USB_ReadInterrupts>
 80041b6:	4603      	mov	r3, r0
 80041b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041c0:	d112      	bne.n	80041e8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d102      	bne.n	80041d8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f005 fec6 	bl	8009f64 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695a      	ldr	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80041e6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f003 fed6 	bl	8007f9e <USB_ReadInterrupts>
 80041f2:	4603      	mov	r3, r0
 80041f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041fc:	f040 80c7 	bne.w	800438e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	69fa      	ldr	r2, [r7, #28]
 800420a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	2110      	movs	r1, #16
 800421a:	4618      	mov	r0, r3
 800421c:	f002 ffa4 	bl	8007168 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004220:	2300      	movs	r3, #0
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004224:	e056      	b.n	80042d4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	015a      	lsls	r2, r3, #5
 800422a:	69fb      	ldr	r3, [r7, #28]
 800422c:	4413      	add	r3, r2
 800422e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004232:	461a      	mov	r2, r3
 8004234:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004238:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424a:	0151      	lsls	r1, r2, #5
 800424c:	69fa      	ldr	r2, [r7, #28]
 800424e:	440a      	add	r2, r1
 8004250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004254:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004258:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	015a      	lsls	r2, r3, #5
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	4413      	add	r3, r2
 8004262:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800426a:	0151      	lsls	r1, r2, #5
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	440a      	add	r2, r1
 8004270:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004274:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004278:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800427a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004286:	461a      	mov	r2, r3
 8004288:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800428c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800428e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004290:	015a      	lsls	r2, r3, #5
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	4413      	add	r3, r2
 8004296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800429e:	0151      	lsls	r1, r2, #5
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	440a      	add	r2, r1
 80042a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80042ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b0:	015a      	lsls	r2, r3, #5
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	4413      	add	r3, r2
 80042b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042be:	0151      	lsls	r1, r2, #5
 80042c0:	69fa      	ldr	r2, [r7, #28]
 80042c2:	440a      	add	r2, r1
 80042c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042cc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80042ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d0:	3301      	adds	r3, #1
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042da:	429a      	cmp	r2, r3
 80042dc:	d3a3      	bcc.n	8004226 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e4:	69db      	ldr	r3, [r3, #28]
 80042e6:	69fa      	ldr	r2, [r7, #28]
 80042e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042ec:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80042f0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d016      	beq.n	8004328 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004300:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800430a:	f043 030b 	orr.w	r3, r3, #11
 800430e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800431a:	69fa      	ldr	r2, [r7, #28]
 800431c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004320:	f043 030b 	orr.w	r3, r3, #11
 8004324:	6453      	str	r3, [r2, #68]	; 0x44
 8004326:	e015      	b.n	8004354 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432e:	695b      	ldr	r3, [r3, #20]
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004336:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800433a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800433e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800434e:	f043 030b 	orr.w	r3, r3, #11
 8004352:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004362:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004366:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6818      	ldr	r0, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004378:	461a      	mov	r2, r3
 800437a:	f003 fed5 	bl	8008128 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	695a      	ldr	r2, [r3, #20]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800438c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f003 fe03 	bl	8007f9e <USB_ReadInterrupts>
 8004398:	4603      	mov	r3, r0
 800439a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800439e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043a2:	d124      	bne.n	80043ee <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4618      	mov	r0, r3
 80043aa:	f003 fe99 	bl	80080e0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f002 ff39 	bl	800722a <USB_GetDevSpeed>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681c      	ldr	r4, [r3, #0]
 80043c4:	f001 f920 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 80043c8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	461a      	mov	r2, r3
 80043d2:	4620      	mov	r0, r4
 80043d4:	f002 fc76 	bl	8006cc4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f005 fd9a 	bl	8009f12 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	695a      	ldr	r2, [r3, #20]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80043ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4618      	mov	r0, r3
 80043f4:	f003 fdd3 	bl	8007f9e <USB_ReadInterrupts>
 80043f8:	4603      	mov	r3, r0
 80043fa:	f003 0308 	and.w	r3, r3, #8
 80043fe:	2b08      	cmp	r3, #8
 8004400:	d10a      	bne.n	8004418 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004402:	6878      	ldr	r0, [r7, #4]
 8004404:	f005 fd77 	bl	8009ef6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f002 0208 	and.w	r2, r2, #8
 8004416:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f003 fdbe 	bl	8007f9e <USB_ReadInterrupts>
 8004422:	4603      	mov	r3, r0
 8004424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800442c:	d10f      	bne.n	800444e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800442e:	2300      	movs	r3, #0
 8004430:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	b2db      	uxtb	r3, r3
 8004436:	4619      	mov	r1, r3
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f005 fdd9 	bl	8009ff0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800444c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4618      	mov	r0, r3
 8004454:	f003 fda3 	bl	8007f9e <USB_ReadInterrupts>
 8004458:	4603      	mov	r3, r0
 800445a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800445e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004462:	d10f      	bne.n	8004484 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f005 fdac 	bl	8009fcc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	695a      	ldr	r2, [r3, #20]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004482:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4618      	mov	r0, r3
 800448a:	f003 fd88 	bl	8007f9e <USB_ReadInterrupts>
 800448e:	4603      	mov	r3, r0
 8004490:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004498:	d10a      	bne.n	80044b0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f005 fdba 	bl	800a014 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	695a      	ldr	r2, [r3, #20]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80044ae:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f003 fd72 	bl	8007f9e <USB_ReadInterrupts>
 80044ba:	4603      	mov	r3, r0
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b04      	cmp	r3, #4
 80044c2:	d115      	bne.n	80044f0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f003 0304 	and.w	r3, r3, #4
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f005 fdaa 	bl	800a030 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6859      	ldr	r1, [r3, #4]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
 80044ec:	e000      	b.n	80044f0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80044ee:	bf00      	nop
    }
  }
}
 80044f0:	3734      	adds	r7, #52	; 0x34
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd90      	pop	{r4, r7, pc}

080044f6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004508:	2b01      	cmp	r3, #1
 800450a:	d101      	bne.n	8004510 <HAL_PCD_SetAddress+0x1a>
 800450c:	2302      	movs	r3, #2
 800450e:	e013      	b.n	8004538 <HAL_PCD_SetAddress+0x42>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	78fa      	ldrb	r2, [r7, #3]
 800451c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	78fa      	ldrb	r2, [r7, #3]
 8004526:	4611      	mov	r1, r2
 8004528:	4618      	mov	r0, r3
 800452a:	f003 fcd0 	bl	8007ece <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	2200      	movs	r2, #0
 8004532:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3708      	adds	r7, #8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
 8004548:	4608      	mov	r0, r1
 800454a:	4611      	mov	r1, r2
 800454c:	461a      	mov	r2, r3
 800454e:	4603      	mov	r3, r0
 8004550:	70fb      	strb	r3, [r7, #3]
 8004552:	460b      	mov	r3, r1
 8004554:	803b      	strh	r3, [r7, #0]
 8004556:	4613      	mov	r3, r2
 8004558:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800455e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004562:	2b00      	cmp	r3, #0
 8004564:	da0f      	bge.n	8004586 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004566:	78fb      	ldrb	r3, [r7, #3]
 8004568:	f003 020f 	and.w	r2, r3, #15
 800456c:	4613      	mov	r3, r2
 800456e:	00db      	lsls	r3, r3, #3
 8004570:	1a9b      	subs	r3, r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	3338      	adds	r3, #56	; 0x38
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	4413      	add	r3, r2
 800457a:	3304      	adds	r3, #4
 800457c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2201      	movs	r2, #1
 8004582:	705a      	strb	r2, [r3, #1]
 8004584:	e00f      	b.n	80045a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004586:	78fb      	ldrb	r3, [r7, #3]
 8004588:	f003 020f 	and.w	r2, r3, #15
 800458c:	4613      	mov	r3, r2
 800458e:	00db      	lsls	r3, r3, #3
 8004590:	1a9b      	subs	r3, r3, r2
 8004592:	009b      	lsls	r3, r3, #2
 8004594:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	4413      	add	r3, r2
 800459c:	3304      	adds	r3, #4
 800459e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2200      	movs	r2, #0
 80045a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80045a6:	78fb      	ldrb	r3, [r7, #3]
 80045a8:	f003 030f 	and.w	r3, r3, #15
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80045b2:	883a      	ldrh	r2, [r7, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	78ba      	ldrb	r2, [r7, #2]
 80045bc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	785b      	ldrb	r3, [r3, #1]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d004      	beq.n	80045d0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	b29a      	uxth	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80045d0:	78bb      	ldrb	r3, [r7, #2]
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d102      	bne.n	80045dc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2200      	movs	r2, #0
 80045da:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d101      	bne.n	80045ea <HAL_PCD_EP_Open+0xaa>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e00e      	b.n	8004608 <HAL_PCD_EP_Open+0xc8>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	68f9      	ldr	r1, [r7, #12]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f002 fe3b 	bl	8007274 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004606:	7afb      	ldrb	r3, [r7, #11]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800461c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004620:	2b00      	cmp	r3, #0
 8004622:	da0f      	bge.n	8004644 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004624:	78fb      	ldrb	r3, [r7, #3]
 8004626:	f003 020f 	and.w	r2, r3, #15
 800462a:	4613      	mov	r3, r2
 800462c:	00db      	lsls	r3, r3, #3
 800462e:	1a9b      	subs	r3, r3, r2
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	3338      	adds	r3, #56	; 0x38
 8004634:	687a      	ldr	r2, [r7, #4]
 8004636:	4413      	add	r3, r2
 8004638:	3304      	adds	r3, #4
 800463a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	2201      	movs	r2, #1
 8004640:	705a      	strb	r2, [r3, #1]
 8004642:	e00f      	b.n	8004664 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	f003 020f 	and.w	r2, r3, #15
 800464a:	4613      	mov	r3, r2
 800464c:	00db      	lsls	r3, r3, #3
 800464e:	1a9b      	subs	r3, r3, r2
 8004650:	009b      	lsls	r3, r3, #2
 8004652:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	4413      	add	r3, r2
 800465a:	3304      	adds	r3, #4
 800465c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	b2da      	uxtb	r2, r3
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_PCD_EP_Close+0x6e>
 800467a:	2302      	movs	r3, #2
 800467c:	e00e      	b.n	800469c <HAL_PCD_EP_Close+0x8c>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	68f9      	ldr	r1, [r7, #12]
 800468c:	4618      	mov	r0, r3
 800468e:	f002 fe79 	bl	8007384 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	607a      	str	r2, [r7, #4]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	460b      	mov	r3, r1
 80046b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046b4:	7afb      	ldrb	r3, [r7, #11]
 80046b6:	f003 020f 	and.w	r2, r3, #15
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	1a9b      	subs	r3, r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	4413      	add	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2200      	movs	r2, #0
 80046de:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80046e6:	7afb      	ldrb	r3, [r7, #11]
 80046e8:	f003 030f 	and.w	r3, r3, #15
 80046ec:	b2da      	uxtb	r2, r3
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d102      	bne.n	8004700 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004700:	7afb      	ldrb	r3, [r7, #11]
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	2b00      	cmp	r3, #0
 8004708:	d109      	bne.n	800471e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	461a      	mov	r2, r3
 8004716:	6979      	ldr	r1, [r7, #20]
 8004718:	f003 f954 	bl	80079c4 <USB_EP0StartXfer>
 800471c:	e008      	b.n	8004730 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	b2db      	uxtb	r3, r3
 8004728:	461a      	mov	r2, r3
 800472a:	6979      	ldr	r1, [r7, #20]
 800472c:	f002 ff06 	bl	800753c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	3718      	adds	r7, #24
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800473a:	b480      	push	{r7}
 800473c:	b083      	sub	sp, #12
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
 8004742:	460b      	mov	r3, r1
 8004744:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004746:	78fb      	ldrb	r3, [r7, #3]
 8004748:	f003 020f 	and.w	r2, r3, #15
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	00db      	lsls	r3, r3, #3
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800475c:	681b      	ldr	r3, [r3, #0]
}
 800475e:	4618      	mov	r0, r3
 8004760:	370c      	adds	r7, #12
 8004762:	46bd      	mov	sp, r7
 8004764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004768:	4770      	bx	lr

0800476a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800476a:	b580      	push	{r7, lr}
 800476c:	b086      	sub	sp, #24
 800476e:	af00      	add	r7, sp, #0
 8004770:	60f8      	str	r0, [r7, #12]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
 8004776:	460b      	mov	r3, r1
 8004778:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800477a:	7afb      	ldrb	r3, [r7, #11]
 800477c:	f003 020f 	and.w	r2, r3, #15
 8004780:	4613      	mov	r3, r2
 8004782:	00db      	lsls	r3, r3, #3
 8004784:	1a9b      	subs	r3, r3, r2
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	3338      	adds	r3, #56	; 0x38
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	3304      	adds	r3, #4
 8004790:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2201      	movs	r2, #1
 80047a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047aa:	7afb      	ldrb	r3, [r7, #11]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d102      	bne.n	80047c4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047c4:	7afb      	ldrb	r3, [r7, #11]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6979      	ldr	r1, [r7, #20]
 80047dc:	f003 f8f2 	bl	80079c4 <USB_EP0StartXfer>
 80047e0:	e008      	b.n	80047f4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	6979      	ldr	r1, [r7, #20]
 80047f0:	f002 fea4 	bl	800753c <USB_EPStartXfer>
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b084      	sub	sp, #16
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	460b      	mov	r3, r1
 8004808:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 020f 	and.w	r2, r3, #15
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	429a      	cmp	r2, r3
 8004816:	d901      	bls.n	800481c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004818:	2301      	movs	r3, #1
 800481a:	e050      	b.n	80048be <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800481c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004820:	2b00      	cmp	r3, #0
 8004822:	da0f      	bge.n	8004844 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004824:	78fb      	ldrb	r3, [r7, #3]
 8004826:	f003 020f 	and.w	r2, r3, #15
 800482a:	4613      	mov	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	1a9b      	subs	r3, r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	3338      	adds	r3, #56	; 0x38
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	4413      	add	r3, r2
 8004838:	3304      	adds	r3, #4
 800483a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	2201      	movs	r2, #1
 8004840:	705a      	strb	r2, [r3, #1]
 8004842:	e00d      	b.n	8004860 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	4613      	mov	r3, r2
 8004848:	00db      	lsls	r3, r3, #3
 800484a:	1a9b      	subs	r3, r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	4413      	add	r3, r2
 8004856:	3304      	adds	r3, #4
 8004858:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004866:	78fb      	ldrb	r3, [r7, #3]
 8004868:	f003 030f 	and.w	r3, r3, #15
 800486c:	b2da      	uxtb	r2, r3
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004878:	2b01      	cmp	r3, #1
 800487a:	d101      	bne.n	8004880 <HAL_PCD_EP_SetStall+0x82>
 800487c:	2302      	movs	r3, #2
 800487e:	e01e      	b.n	80048be <HAL_PCD_EP_SetStall+0xc0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68f9      	ldr	r1, [r7, #12]
 800488e:	4618      	mov	r0, r3
 8004890:	f003 fa49 	bl	8007d26 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	f003 030f 	and.w	r3, r3, #15
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10a      	bne.n	80048b4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6818      	ldr	r0, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	b2d9      	uxtb	r1, r3
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048ae:	461a      	mov	r2, r3
 80048b0:	f003 fc3a 	bl	8008128 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b084      	sub	sp, #16
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	460b      	mov	r3, r1
 80048d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80048d2:	78fb      	ldrb	r3, [r7, #3]
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d901      	bls.n	80048e4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e042      	b.n	800496a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	da0f      	bge.n	800490c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048ec:	78fb      	ldrb	r3, [r7, #3]
 80048ee:	f003 020f 	and.w	r2, r3, #15
 80048f2:	4613      	mov	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	1a9b      	subs	r3, r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	3338      	adds	r3, #56	; 0x38
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	4413      	add	r3, r2
 8004900:	3304      	adds	r3, #4
 8004902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	705a      	strb	r2, [r3, #1]
 800490a:	e00f      	b.n	800492c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800490c:	78fb      	ldrb	r3, [r7, #3]
 800490e:	f003 020f 	and.w	r2, r3, #15
 8004912:	4613      	mov	r3, r2
 8004914:	00db      	lsls	r3, r3, #3
 8004916:	1a9b      	subs	r3, r3, r2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4413      	add	r3, r2
 8004922:	3304      	adds	r3, #4
 8004924:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2200      	movs	r2, #0
 8004930:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004932:	78fb      	ldrb	r3, [r7, #3]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	b2da      	uxtb	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004944:	2b01      	cmp	r3, #1
 8004946:	d101      	bne.n	800494c <HAL_PCD_EP_ClrStall+0x86>
 8004948:	2302      	movs	r3, #2
 800494a:	e00e      	b.n	800496a <HAL_PCD_EP_ClrStall+0xa4>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	4618      	mov	r0, r3
 800495c:	f003 fa51 	bl	8007e02 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004968:	2300      	movs	r3, #0
}
 800496a:	4618      	mov	r0, r3
 800496c:	3710      	adds	r7, #16
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}

08004972 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004972:	b580      	push	{r7, lr}
 8004974:	b08a      	sub	sp, #40	; 0x28
 8004976:	af02      	add	r7, sp, #8
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004986:	683a      	ldr	r2, [r7, #0]
 8004988:	4613      	mov	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	3338      	adds	r3, #56	; 0x38
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	4413      	add	r3, r2
 8004996:	3304      	adds	r3, #4
 8004998:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d901      	bls.n	80049aa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e06c      	b.n	8004a84 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d902      	bls.n	80049c6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	3303      	adds	r3, #3
 80049ca:	089b      	lsrs	r3, r3, #2
 80049cc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80049ce:	e02b      	b.n	8004a28 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	695a      	ldr	r2, [r3, #20]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d902      	bls.n	80049ec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	3303      	adds	r3, #3
 80049f0:	089b      	lsrs	r3, r3, #2
 80049f2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	68d9      	ldr	r1, [r3, #12]
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	9300      	str	r3, [sp, #0]
 8004a08:	4603      	mov	r3, r0
 8004a0a:	6978      	ldr	r0, [r7, #20]
 8004a0c:	f003 f92d 	bl	8007c6a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68da      	ldr	r2, [r3, #12]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	441a      	add	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	699a      	ldr	r2, [r3, #24]
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	441a      	add	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	69ba      	ldr	r2, [r7, #24]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d809      	bhi.n	8004a52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	699a      	ldr	r2, [r3, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d203      	bcs.n	8004a52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	695b      	ldr	r3, [r3, #20]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d1be      	bne.n	80049d0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	695a      	ldr	r2, [r3, #20]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d811      	bhi.n	8004a82 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	f003 030f 	and.w	r3, r3, #15
 8004a64:	2201      	movs	r2, #1
 8004a66:	fa02 f303 	lsl.w	r3, r2, r3
 8004a6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	43db      	mvns	r3, r3
 8004a78:	6939      	ldr	r1, [r7, #16]
 8004a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a7e:	4013      	ands	r3, r2
 8004a80:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3720      	adds	r7, #32
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b086      	sub	sp, #24
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	333c      	adds	r3, #60	; 0x3c
 8004aa4:	3304      	adds	r3, #4
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	015a      	lsls	r2, r3, #5
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4413      	add	r3, r2
 8004ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	f040 80a0 	bne.w	8004c04 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d015      	beq.n	8004afa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	4a72      	ldr	r2, [pc, #456]	; (8004c9c <PCD_EP_OutXfrComplete_int+0x210>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	f240 80dd 	bls.w	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f000 80d7 	beq.w	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	015a      	lsls	r2, r3, #5
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	4413      	add	r3, r2
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004af6:	6093      	str	r3, [r2, #8]
 8004af8:	e0cb      	b.n	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d009      	beq.n	8004b18 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	461a      	mov	r2, r3
 8004b12:	2320      	movs	r3, #32
 8004b14:	6093      	str	r3, [r2, #8]
 8004b16:	e0bc      	b.n	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	f040 80b7 	bne.w	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4a5d      	ldr	r2, [pc, #372]	; (8004c9c <PCD_EP_OutXfrComplete_int+0x210>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d90f      	bls.n	8004b4c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00a      	beq.n	8004b4c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	015a      	lsls	r2, r3, #5
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b42:	461a      	mov	r2, r3
 8004b44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b48:	6093      	str	r3, [r2, #8]
 8004b4a:	e0a2      	b.n	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004b4c:	6879      	ldr	r1, [r7, #4]
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	440b      	add	r3, r1
 8004b5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004b5e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	0159      	lsls	r1, r3, #5
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	440b      	add	r3, r1
 8004b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004b72:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	1a9b      	subs	r3, r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4403      	add	r3, r0
 8004b82:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004b86:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004b88:	6879      	ldr	r1, [r7, #4]
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	4613      	mov	r3, r2
 8004b8e:	00db      	lsls	r3, r3, #3
 8004b90:	1a9b      	subs	r3, r3, r2
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	440b      	add	r3, r1
 8004b96:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b9a:	6819      	ldr	r1, [r3, #0]
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	683a      	ldr	r2, [r7, #0]
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	00db      	lsls	r3, r3, #3
 8004ba4:	1a9b      	subs	r3, r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4403      	add	r3, r0
 8004baa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4419      	add	r1, r3
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4403      	add	r3, r0
 8004bc0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004bc4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d114      	bne.n	8004bf6 <PCD_EP_OutXfrComplete_int+0x16a>
 8004bcc:	6879      	ldr	r1, [r7, #4]
 8004bce:	683a      	ldr	r2, [r7, #0]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d108      	bne.n	8004bf6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004bee:	461a      	mov	r2, r3
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	f003 fa99 	bl	8008128 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	4619      	mov	r1, r3
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f005 f945 	bl	8009e8c <HAL_PCD_DataOutStageCallback>
 8004c02:	e046      	b.n	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <PCD_EP_OutXfrComplete_int+0x214>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d124      	bne.n	8004c56 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00a      	beq.n	8004c2c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c22:	461a      	mov	r2, r3
 8004c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c28:	6093      	str	r3, [r2, #8]
 8004c2a:	e032      	b.n	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	015a      	lsls	r2, r3, #5
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	4413      	add	r3, r2
 8004c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c42:	461a      	mov	r2, r3
 8004c44:	2320      	movs	r3, #32
 8004c46:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	4619      	mov	r1, r3
 8004c4e:	6878      	ldr	r0, [r7, #4]
 8004c50:	f005 f91c 	bl	8009e8c <HAL_PCD_DataOutStageCallback>
 8004c54:	e01d      	b.n	8004c92 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d114      	bne.n	8004c86 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	683a      	ldr	r2, [r7, #0]
 8004c60:	4613      	mov	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d108      	bne.n	8004c86 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6818      	ldr	r0, [r3, #0]
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c7e:	461a      	mov	r2, r3
 8004c80:	2100      	movs	r1, #0
 8004c82:	f003 fa51 	bl	8008128 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	4619      	mov	r1, r3
 8004c8c:	6878      	ldr	r0, [r7, #4]
 8004c8e:	f005 f8fd 	bl	8009e8c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	4f54300a 	.word	0x4f54300a
 8004ca0:	4f54310a 	.word	0x4f54310a

08004ca4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b086      	sub	sp, #24
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	333c      	adds	r3, #60	; 0x3c
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	015a      	lsls	r2, r3, #5
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	4413      	add	r3, r2
 8004cca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a15      	ldr	r2, [pc, #84]	; (8004d2c <PCD_EP_OutSetupPacket_int+0x88>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d90e      	bls.n	8004cf8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d009      	beq.n	8004cf8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cf6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f005 f8b5 	bl	8009e68 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <PCD_EP_OutSetupPacket_int+0x88>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d90c      	bls.n	8004d20 <PCD_EP_OutSetupPacket_int+0x7c>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d108      	bne.n	8004d20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004d18:	461a      	mov	r2, r3
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	f003 fa04 	bl	8008128 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	4f54300a 	.word	0x4f54300a

08004d30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b085      	sub	sp, #20
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004d48:	78fb      	ldrb	r3, [r7, #3]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d107      	bne.n	8004d5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004d4e:	883b      	ldrh	r3, [r7, #0]
 8004d50:	0419      	lsls	r1, r3, #16
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d5c:	e028      	b.n	8004db0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d64:	0c1b      	lsrs	r3, r3, #16
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	4413      	add	r3, r2
 8004d6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	73fb      	strb	r3, [r7, #15]
 8004d70:	e00d      	b.n	8004d8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	7bfb      	ldrb	r3, [r7, #15]
 8004d78:	3340      	adds	r3, #64	; 0x40
 8004d7a:	009b      	lsls	r3, r3, #2
 8004d7c:	4413      	add	r3, r2
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	4413      	add	r3, r2
 8004d86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004d88:	7bfb      	ldrb	r3, [r7, #15]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	73fb      	strb	r3, [r7, #15]
 8004d8e:	7bfa      	ldrb	r2, [r7, #15]
 8004d90:	78fb      	ldrb	r3, [r7, #3]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d3ec      	bcc.n	8004d72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004d98:	883b      	ldrh	r3, [r7, #0]
 8004d9a:	0418      	lsls	r0, r3, #16
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	3b01      	subs	r3, #1
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	4302      	orrs	r2, r0
 8004da8:	3340      	adds	r3, #64	; 0x40
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	440b      	add	r3, r1
 8004dae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004db0:	2300      	movs	r3, #0
}
 8004db2:	4618      	mov	r0, r3
 8004db4:	3714      	adds	r7, #20
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
 8004dc6:	460b      	mov	r3, r1
 8004dc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	887a      	ldrh	r2, [r7, #2]
 8004dd0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	370c      	adds	r7, #12
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b083      	sub	sp, #12
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	460b      	mov	r3, r1
 8004dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004dec:	bf00      	nop
 8004dee:	370c      	adds	r7, #12
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr

08004df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d101      	bne.n	8004e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e25b      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d075      	beq.n	8004f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e16:	4ba3      	ldr	r3, [pc, #652]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d00c      	beq.n	8004e3c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e22:	4ba0      	ldr	r3, [pc, #640]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d112      	bne.n	8004e54 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e2e:	4b9d      	ldr	r3, [pc, #628]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3a:	d10b      	bne.n	8004e54 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e3c:	4b99      	ldr	r3, [pc, #612]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d05b      	beq.n	8004f00 <HAL_RCC_OscConfig+0x108>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d157      	bne.n	8004f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e236      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e5c:	d106      	bne.n	8004e6c <HAL_RCC_OscConfig+0x74>
 8004e5e:	4b91      	ldr	r3, [pc, #580]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a90      	ldr	r2, [pc, #576]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e68:	6013      	str	r3, [r2, #0]
 8004e6a:	e01d      	b.n	8004ea8 <HAL_RCC_OscConfig+0xb0>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e74:	d10c      	bne.n	8004e90 <HAL_RCC_OscConfig+0x98>
 8004e76:	4b8b      	ldr	r3, [pc, #556]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a8a      	ldr	r2, [pc, #552]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e80:	6013      	str	r3, [r2, #0]
 8004e82:	4b88      	ldr	r3, [pc, #544]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4a87      	ldr	r2, [pc, #540]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	e00b      	b.n	8004ea8 <HAL_RCC_OscConfig+0xb0>
 8004e90:	4b84      	ldr	r3, [pc, #528]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a83      	ldr	r2, [pc, #524]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	4b81      	ldr	r3, [pc, #516]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	4a80      	ldr	r2, [pc, #512]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004ea2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d013      	beq.n	8004ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fd f964 	bl	800217c <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb8:	f7fd f960 	bl	800217c <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b64      	cmp	r3, #100	; 0x64
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e1fb      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	4b76      	ldr	r3, [pc, #472]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d0f0      	beq.n	8004eb8 <HAL_RCC_OscConfig+0xc0>
 8004ed6:	e014      	b.n	8004f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ed8:	f7fd f950 	bl	800217c <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ee0:	f7fd f94c 	bl	800217c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b64      	cmp	r3, #100	; 0x64
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e1e7      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ef2:	4b6c      	ldr	r3, [pc, #432]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0xe8>
 8004efe:	e000      	b.n	8004f02 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d063      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f0e:	4b65      	ldr	r3, [pc, #404]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f1a:	4b62      	ldr	r3, [pc, #392]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f22:	2b08      	cmp	r3, #8
 8004f24:	d11c      	bne.n	8004f60 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f26:	4b5f      	ldr	r3, [pc, #380]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d116      	bne.n	8004f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f32:	4b5c      	ldr	r3, [pc, #368]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_RCC_OscConfig+0x152>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	2b01      	cmp	r3, #1
 8004f44:	d001      	beq.n	8004f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e1bb      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f4a:	4b56      	ldr	r3, [pc, #344]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4952      	ldr	r1, [pc, #328]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f5e:	e03a      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d020      	beq.n	8004faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f68:	4b4f      	ldr	r3, [pc, #316]	; (80050a8 <HAL_RCC_OscConfig+0x2b0>)
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f6e:	f7fd f905 	bl	800217c <HAL_GetTick>
 8004f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f74:	e008      	b.n	8004f88 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f76:	f7fd f901 	bl	800217c <HAL_GetTick>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	1ad3      	subs	r3, r2, r3
 8004f80:	2b02      	cmp	r3, #2
 8004f82:	d901      	bls.n	8004f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e19c      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f88:	4b46      	ldr	r3, [pc, #280]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d0f0      	beq.n	8004f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f94:	4b43      	ldr	r3, [pc, #268]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4940      	ldr	r1, [pc, #256]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
 8004fa8:	e015      	b.n	8004fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004faa:	4b3f      	ldr	r3, [pc, #252]	; (80050a8 <HAL_RCC_OscConfig+0x2b0>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fb0:	f7fd f8e4 	bl	800217c <HAL_GetTick>
 8004fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fb6:	e008      	b.n	8004fca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fb8:	f7fd f8e0 	bl	800217c <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d901      	bls.n	8004fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	e17b      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004fca:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0302 	and.w	r3, r3, #2
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1f0      	bne.n	8004fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0308 	and.w	r3, r3, #8
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d030      	beq.n	8005044 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	695b      	ldr	r3, [r3, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d016      	beq.n	8005018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fea:	4b30      	ldr	r3, [pc, #192]	; (80050ac <HAL_RCC_OscConfig+0x2b4>)
 8004fec:	2201      	movs	r2, #1
 8004fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ff0:	f7fd f8c4 	bl	800217c <HAL_GetTick>
 8004ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ff6:	e008      	b.n	800500a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff8:	f7fd f8c0 	bl	800217c <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b02      	cmp	r3, #2
 8005004:	d901      	bls.n	800500a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005006:	2303      	movs	r3, #3
 8005008:	e15b      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800500a:	4b26      	ldr	r3, [pc, #152]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	f003 0302 	and.w	r3, r3, #2
 8005012:	2b00      	cmp	r3, #0
 8005014:	d0f0      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x200>
 8005016:	e015      	b.n	8005044 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005018:	4b24      	ldr	r3, [pc, #144]	; (80050ac <HAL_RCC_OscConfig+0x2b4>)
 800501a:	2200      	movs	r2, #0
 800501c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800501e:	f7fd f8ad 	bl	800217c <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005026:	f7fd f8a9 	bl	800217c <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e144      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005038:	4b1a      	ldr	r3, [pc, #104]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 800503a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1f0      	bne.n	8005026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	f000 80a0 	beq.w	8005192 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005052:	2300      	movs	r3, #0
 8005054:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005056:	4b13      	ldr	r3, [pc, #76]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10f      	bne.n	8005082 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005062:	2300      	movs	r3, #0
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	4b0f      	ldr	r3, [pc, #60]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	4a0e      	ldr	r2, [pc, #56]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 800506c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005070:	6413      	str	r3, [r2, #64]	; 0x40
 8005072:	4b0c      	ldr	r3, [pc, #48]	; (80050a4 <HAL_RCC_OscConfig+0x2ac>)
 8005074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800507a:	60bb      	str	r3, [r7, #8]
 800507c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800507e:	2301      	movs	r3, #1
 8005080:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005082:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_OscConfig+0x2b8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508a:	2b00      	cmp	r3, #0
 800508c:	d121      	bne.n	80050d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800508e:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <HAL_RCC_OscConfig+0x2b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a07      	ldr	r2, [pc, #28]	; (80050b0 <HAL_RCC_OscConfig+0x2b8>)
 8005094:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005098:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800509a:	f7fd f86f 	bl	800217c <HAL_GetTick>
 800509e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050a0:	e011      	b.n	80050c6 <HAL_RCC_OscConfig+0x2ce>
 80050a2:	bf00      	nop
 80050a4:	40023800 	.word	0x40023800
 80050a8:	42470000 	.word	0x42470000
 80050ac:	42470e80 	.word	0x42470e80
 80050b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050b4:	f7fd f862 	bl	800217c <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e0fd      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050c6:	4b81      	ldr	r3, [pc, #516]	; (80052cc <HAL_RCC_OscConfig+0x4d4>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d0f0      	beq.n	80050b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d106      	bne.n	80050e8 <HAL_RCC_OscConfig+0x2f0>
 80050da:	4b7d      	ldr	r3, [pc, #500]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	4a7c      	ldr	r2, [pc, #496]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 80050e0:	f043 0301 	orr.w	r3, r3, #1
 80050e4:	6713      	str	r3, [r2, #112]	; 0x70
 80050e6:	e01c      	b.n	8005122 <HAL_RCC_OscConfig+0x32a>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	2b05      	cmp	r3, #5
 80050ee:	d10c      	bne.n	800510a <HAL_RCC_OscConfig+0x312>
 80050f0:	4b77      	ldr	r3, [pc, #476]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 80050f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f4:	4a76      	ldr	r2, [pc, #472]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 80050f6:	f043 0304 	orr.w	r3, r3, #4
 80050fa:	6713      	str	r3, [r2, #112]	; 0x70
 80050fc:	4b74      	ldr	r3, [pc, #464]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 80050fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005100:	4a73      	ldr	r2, [pc, #460]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005102:	f043 0301 	orr.w	r3, r3, #1
 8005106:	6713      	str	r3, [r2, #112]	; 0x70
 8005108:	e00b      	b.n	8005122 <HAL_RCC_OscConfig+0x32a>
 800510a:	4b71      	ldr	r3, [pc, #452]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 800510c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800510e:	4a70      	ldr	r2, [pc, #448]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005110:	f023 0301 	bic.w	r3, r3, #1
 8005114:	6713      	str	r3, [r2, #112]	; 0x70
 8005116:	4b6e      	ldr	r3, [pc, #440]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511a:	4a6d      	ldr	r2, [pc, #436]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 800511c:	f023 0304 	bic.w	r3, r3, #4
 8005120:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d015      	beq.n	8005156 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800512a:	f7fd f827 	bl	800217c <HAL_GetTick>
 800512e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005130:	e00a      	b.n	8005148 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005132:	f7fd f823 	bl	800217c <HAL_GetTick>
 8005136:	4602      	mov	r2, r0
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1ad3      	subs	r3, r2, r3
 800513c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005140:	4293      	cmp	r3, r2
 8005142:	d901      	bls.n	8005148 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005144:	2303      	movs	r3, #3
 8005146:	e0bc      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005148:	4b61      	ldr	r3, [pc, #388]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 800514a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b00      	cmp	r3, #0
 8005152:	d0ee      	beq.n	8005132 <HAL_RCC_OscConfig+0x33a>
 8005154:	e014      	b.n	8005180 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005156:	f7fd f811 	bl	800217c <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800515c:	e00a      	b.n	8005174 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800515e:	f7fd f80d 	bl	800217c <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	f241 3288 	movw	r2, #5000	; 0x1388
 800516c:	4293      	cmp	r3, r2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005170:	2303      	movs	r3, #3
 8005172:	e0a6      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005174:	4b56      	ldr	r3, [pc, #344]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1ee      	bne.n	800515e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005180:	7dfb      	ldrb	r3, [r7, #23]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d105      	bne.n	8005192 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005186:	4b52      	ldr	r3, [pc, #328]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	4a51      	ldr	r2, [pc, #324]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 800518c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005190:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 8092 	beq.w	80052c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800519c:	4b4c      	ldr	r3, [pc, #304]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f003 030c 	and.w	r3, r3, #12
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d05c      	beq.n	8005262 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	2b02      	cmp	r3, #2
 80051ae:	d141      	bne.n	8005234 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051b0:	4b48      	ldr	r3, [pc, #288]	; (80052d4 <HAL_RCC_OscConfig+0x4dc>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b6:	f7fc ffe1 	bl	800217c <HAL_GetTick>
 80051ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051bc:	e008      	b.n	80051d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051be:	f7fc ffdd 	bl	800217c <HAL_GetTick>
 80051c2:	4602      	mov	r2, r0
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	1ad3      	subs	r3, r2, r3
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d901      	bls.n	80051d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e078      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051d0:	4b3f      	ldr	r3, [pc, #252]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1f0      	bne.n	80051be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69da      	ldr	r2, [r3, #28]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	019b      	lsls	r3, r3, #6
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	3b01      	subs	r3, #1
 80051f6:	041b      	lsls	r3, r3, #16
 80051f8:	431a      	orrs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	4933      	ldr	r1, [pc, #204]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005206:	4b33      	ldr	r3, [pc, #204]	; (80052d4 <HAL_RCC_OscConfig+0x4dc>)
 8005208:	2201      	movs	r2, #1
 800520a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fc ffb6 	bl	800217c <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005214:	f7fc ffb2 	bl	800217c <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e04d      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005226:	4b2a      	ldr	r3, [pc, #168]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0x41c>
 8005232:	e045      	b.n	80052c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005234:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_RCC_OscConfig+0x4dc>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800523a:	f7fc ff9f 	bl	800217c <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005242:	f7fc ff9b 	bl	800217c <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e036      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005254:	4b1e      	ldr	r3, [pc, #120]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1f0      	bne.n	8005242 <HAL_RCC_OscConfig+0x44a>
 8005260:	e02e      	b.n	80052c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e029      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800526e:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <HAL_RCC_OscConfig+0x4d8>)
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	429a      	cmp	r2, r3
 8005280:	d11c      	bne.n	80052bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800528c:	429a      	cmp	r2, r3
 800528e:	d115      	bne.n	80052bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005296:	4013      	ands	r3, r2
 8005298:	687a      	ldr	r2, [r7, #4]
 800529a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800529c:	4293      	cmp	r3, r2
 800529e:	d10d      	bne.n	80052bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80052aa:	429a      	cmp	r2, r3
 80052ac:	d106      	bne.n	80052bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d001      	beq.n	80052c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e000      	b.n	80052c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3718      	adds	r7, #24
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	40007000 	.word	0x40007000
 80052d0:	40023800 	.word	0x40023800
 80052d4:	42470060 	.word	0x42470060

080052d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b084      	sub	sp, #16
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d101      	bne.n	80052ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e0cc      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052ec:	4b68      	ldr	r3, [pc, #416]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	683a      	ldr	r2, [r7, #0]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d90c      	bls.n	8005314 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052fa:	4b65      	ldr	r3, [pc, #404]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80052fc:	683a      	ldr	r2, [r7, #0]
 80052fe:	b2d2      	uxtb	r2, r2
 8005300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005302:	4b63      	ldr	r3, [pc, #396]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 030f 	and.w	r3, r3, #15
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	429a      	cmp	r2, r3
 800530e:	d001      	beq.n	8005314 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e0b8      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f003 0302 	and.w	r3, r3, #2
 800531c:	2b00      	cmp	r3, #0
 800531e:	d020      	beq.n	8005362 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d005      	beq.n	8005338 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800532c:	4b59      	ldr	r3, [pc, #356]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	4a58      	ldr	r2, [pc, #352]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005332:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005336:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0308 	and.w	r3, r3, #8
 8005340:	2b00      	cmp	r3, #0
 8005342:	d005      	beq.n	8005350 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005344:	4b53      	ldr	r3, [pc, #332]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	4a52      	ldr	r2, [pc, #328]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800534a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800534e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005350:	4b50      	ldr	r3, [pc, #320]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	494d      	ldr	r1, [pc, #308]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800535e:	4313      	orrs	r3, r2
 8005360:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d044      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d107      	bne.n	8005386 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005376:	4b47      	ldr	r3, [pc, #284]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d119      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e07f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	2b02      	cmp	r3, #2
 800538c:	d003      	beq.n	8005396 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005392:	2b03      	cmp	r3, #3
 8005394:	d107      	bne.n	80053a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005396:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d109      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e06f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80053a6:	4b3b      	ldr	r3, [pc, #236]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f003 0302 	and.w	r3, r3, #2
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e067      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80053b6:	4b37      	ldr	r3, [pc, #220]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f023 0203 	bic.w	r2, r3, #3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	4934      	ldr	r1, [pc, #208]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053c4:	4313      	orrs	r3, r2
 80053c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80053c8:	f7fc fed8 	bl	800217c <HAL_GetTick>
 80053cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053ce:	e00a      	b.n	80053e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053d0:	f7fc fed4 	bl	800217c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	f241 3288 	movw	r2, #5000	; 0x1388
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e04f      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053e6:	4b2b      	ldr	r3, [pc, #172]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f003 020c 	and.w	r2, r3, #12
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d1eb      	bne.n	80053d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053f8:	4b25      	ldr	r3, [pc, #148]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d20c      	bcs.n	8005420 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b22      	ldr	r3, [pc, #136]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	b2d2      	uxtb	r2, r2
 800540c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800540e:	4b20      	ldr	r3, [pc, #128]	; (8005490 <HAL_RCC_ClockConfig+0x1b8>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 030f 	and.w	r3, r3, #15
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	429a      	cmp	r2, r3
 800541a:	d001      	beq.n	8005420 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e032      	b.n	8005486 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f003 0304 	and.w	r3, r3, #4
 8005428:	2b00      	cmp	r3, #0
 800542a:	d008      	beq.n	800543e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800542c:	4b19      	ldr	r3, [pc, #100]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	4916      	ldr	r1, [pc, #88]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	4313      	orrs	r3, r2
 800543c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0308 	and.w	r3, r3, #8
 8005446:	2b00      	cmp	r3, #0
 8005448:	d009      	beq.n	800545e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800544a:	4b12      	ldr	r3, [pc, #72]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	00db      	lsls	r3, r3, #3
 8005458:	490e      	ldr	r1, [pc, #56]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 800545a:	4313      	orrs	r3, r2
 800545c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800545e:	f000 f821 	bl	80054a4 <HAL_RCC_GetSysClockFreq>
 8005462:	4601      	mov	r1, r0
 8005464:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCC_ClockConfig+0x1bc>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	091b      	lsrs	r3, r3, #4
 800546a:	f003 030f 	and.w	r3, r3, #15
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <HAL_RCC_ClockConfig+0x1c0>)
 8005470:	5cd3      	ldrb	r3, [r2, r3]
 8005472:	fa21 f303 	lsr.w	r3, r1, r3
 8005476:	4a09      	ldr	r2, [pc, #36]	; (800549c <HAL_RCC_ClockConfig+0x1c4>)
 8005478:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800547a:	4b09      	ldr	r3, [pc, #36]	; (80054a0 <HAL_RCC_ClockConfig+0x1c8>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4618      	mov	r0, r3
 8005480:	f7fc fe38 	bl	80020f4 <HAL_InitTick>

  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3710      	adds	r7, #16
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40023c00 	.word	0x40023c00
 8005494:	40023800 	.word	0x40023800
 8005498:	0800b638 	.word	0x0800b638
 800549c:	20000020 	.word	0x20000020
 80054a0:	20000024 	.word	0x20000024

080054a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80054aa:	2300      	movs	r3, #0
 80054ac:	607b      	str	r3, [r7, #4]
 80054ae:	2300      	movs	r3, #0
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	2300      	movs	r3, #0
 80054b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80054b6:	2300      	movs	r3, #0
 80054b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80054ba:	4b50      	ldr	r3, [pc, #320]	; (80055fc <HAL_RCC_GetSysClockFreq+0x158>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	2b04      	cmp	r3, #4
 80054c4:	d007      	beq.n	80054d6 <HAL_RCC_GetSysClockFreq+0x32>
 80054c6:	2b08      	cmp	r3, #8
 80054c8:	d008      	beq.n	80054dc <HAL_RCC_GetSysClockFreq+0x38>
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f040 808d 	bne.w	80055ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054d0:	4b4b      	ldr	r3, [pc, #300]	; (8005600 <HAL_RCC_GetSysClockFreq+0x15c>)
 80054d2:	60bb      	str	r3, [r7, #8]
       break;
 80054d4:	e08c      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054d6:	4b4b      	ldr	r3, [pc, #300]	; (8005604 <HAL_RCC_GetSysClockFreq+0x160>)
 80054d8:	60bb      	str	r3, [r7, #8]
      break;
 80054da:	e089      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054dc:	4b47      	ldr	r3, [pc, #284]	; (80055fc <HAL_RCC_GetSysClockFreq+0x158>)
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054e6:	4b45      	ldr	r3, [pc, #276]	; (80055fc <HAL_RCC_GetSysClockFreq+0x158>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d023      	beq.n	800553a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054f2:	4b42      	ldr	r3, [pc, #264]	; (80055fc <HAL_RCC_GetSysClockFreq+0x158>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	099b      	lsrs	r3, r3, #6
 80054f8:	f04f 0400 	mov.w	r4, #0
 80054fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	ea03 0501 	and.w	r5, r3, r1
 8005508:	ea04 0602 	and.w	r6, r4, r2
 800550c:	4a3d      	ldr	r2, [pc, #244]	; (8005604 <HAL_RCC_GetSysClockFreq+0x160>)
 800550e:	fb02 f106 	mul.w	r1, r2, r6
 8005512:	2200      	movs	r2, #0
 8005514:	fb02 f205 	mul.w	r2, r2, r5
 8005518:	440a      	add	r2, r1
 800551a:	493a      	ldr	r1, [pc, #232]	; (8005604 <HAL_RCC_GetSysClockFreq+0x160>)
 800551c:	fba5 0101 	umull	r0, r1, r5, r1
 8005520:	1853      	adds	r3, r2, r1
 8005522:	4619      	mov	r1, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f04f 0400 	mov.w	r4, #0
 800552a:	461a      	mov	r2, r3
 800552c:	4623      	mov	r3, r4
 800552e:	f7fb fafd 	bl	8000b2c <__aeabi_uldivmod>
 8005532:	4603      	mov	r3, r0
 8005534:	460c      	mov	r4, r1
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e049      	b.n	80055ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800553a:	4b30      	ldr	r3, [pc, #192]	; (80055fc <HAL_RCC_GetSysClockFreq+0x158>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	099b      	lsrs	r3, r3, #6
 8005540:	f04f 0400 	mov.w	r4, #0
 8005544:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005548:	f04f 0200 	mov.w	r2, #0
 800554c:	ea03 0501 	and.w	r5, r3, r1
 8005550:	ea04 0602 	and.w	r6, r4, r2
 8005554:	4629      	mov	r1, r5
 8005556:	4632      	mov	r2, r6
 8005558:	f04f 0300 	mov.w	r3, #0
 800555c:	f04f 0400 	mov.w	r4, #0
 8005560:	0154      	lsls	r4, r2, #5
 8005562:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005566:	014b      	lsls	r3, r1, #5
 8005568:	4619      	mov	r1, r3
 800556a:	4622      	mov	r2, r4
 800556c:	1b49      	subs	r1, r1, r5
 800556e:	eb62 0206 	sbc.w	r2, r2, r6
 8005572:	f04f 0300 	mov.w	r3, #0
 8005576:	f04f 0400 	mov.w	r4, #0
 800557a:	0194      	lsls	r4, r2, #6
 800557c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005580:	018b      	lsls	r3, r1, #6
 8005582:	1a5b      	subs	r3, r3, r1
 8005584:	eb64 0402 	sbc.w	r4, r4, r2
 8005588:	f04f 0100 	mov.w	r1, #0
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	00e2      	lsls	r2, r4, #3
 8005592:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005596:	00d9      	lsls	r1, r3, #3
 8005598:	460b      	mov	r3, r1
 800559a:	4614      	mov	r4, r2
 800559c:	195b      	adds	r3, r3, r5
 800559e:	eb44 0406 	adc.w	r4, r4, r6
 80055a2:	f04f 0100 	mov.w	r1, #0
 80055a6:	f04f 0200 	mov.w	r2, #0
 80055aa:	02a2      	lsls	r2, r4, #10
 80055ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80055b0:	0299      	lsls	r1, r3, #10
 80055b2:	460b      	mov	r3, r1
 80055b4:	4614      	mov	r4, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	4621      	mov	r1, r4
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f04f 0400 	mov.w	r4, #0
 80055c0:	461a      	mov	r2, r3
 80055c2:	4623      	mov	r3, r4
 80055c4:	f7fb fab2 	bl	8000b2c <__aeabi_uldivmod>
 80055c8:	4603      	mov	r3, r0
 80055ca:	460c      	mov	r4, r1
 80055cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCC_GetSysClockFreq+0x158>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	0c1b      	lsrs	r3, r3, #16
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	3301      	adds	r3, #1
 80055da:	005b      	lsls	r3, r3, #1
 80055dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	60bb      	str	r3, [r7, #8]
      break;
 80055e8:	e002      	b.n	80055f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055ea:	4b05      	ldr	r3, [pc, #20]	; (8005600 <HAL_RCC_GetSysClockFreq+0x15c>)
 80055ec:	60bb      	str	r3, [r7, #8]
      break;
 80055ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055f0:	68bb      	ldr	r3, [r7, #8]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3714      	adds	r7, #20
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055fa:	bf00      	nop
 80055fc:	40023800 	.word	0x40023800
 8005600:	00f42400 	.word	0x00f42400
 8005604:	018cba80 	.word	0x018cba80

08005608 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005608:	b480      	push	{r7}
 800560a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800560c:	4b03      	ldr	r3, [pc, #12]	; (800561c <HAL_RCC_GetHCLKFreq+0x14>)
 800560e:	681b      	ldr	r3, [r3, #0]
}
 8005610:	4618      	mov	r0, r3
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	20000020 	.word	0x20000020

08005620 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005624:	f7ff fff0 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005628:	4601      	mov	r1, r0
 800562a:	4b05      	ldr	r3, [pc, #20]	; (8005640 <HAL_RCC_GetPCLK1Freq+0x20>)
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	0a9b      	lsrs	r3, r3, #10
 8005630:	f003 0307 	and.w	r3, r3, #7
 8005634:	4a03      	ldr	r2, [pc, #12]	; (8005644 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005636:	5cd3      	ldrb	r3, [r2, r3]
 8005638:	fa21 f303 	lsr.w	r3, r1, r3
}
 800563c:	4618      	mov	r0, r3
 800563e:	bd80      	pop	{r7, pc}
 8005640:	40023800 	.word	0x40023800
 8005644:	0800b648 	.word	0x0800b648

08005648 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800564c:	f7ff ffdc 	bl	8005608 <HAL_RCC_GetHCLKFreq>
 8005650:	4601      	mov	r1, r0
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	0b5b      	lsrs	r3, r3, #13
 8005658:	f003 0307 	and.w	r3, r3, #7
 800565c:	4a03      	ldr	r2, [pc, #12]	; (800566c <HAL_RCC_GetPCLK2Freq+0x24>)
 800565e:	5cd3      	ldrb	r3, [r2, r3]
 8005660:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005664:	4618      	mov	r0, r3
 8005666:	bd80      	pop	{r7, pc}
 8005668:	40023800 	.word	0x40023800
 800566c:	0800b648 	.word	0x0800b648

08005670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b082      	sub	sp, #8
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e01d      	b.n	80056be <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005688:	b2db      	uxtb	r3, r3
 800568a:	2b00      	cmp	r3, #0
 800568c:	d106      	bne.n	800569c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7fc fb24 	bl	8001ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2202      	movs	r2, #2
 80056a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3304      	adds	r3, #4
 80056ac:	4619      	mov	r1, r3
 80056ae:	4610      	mov	r0, r2
 80056b0:	f000 fb10 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056bc:	2300      	movs	r3, #0
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3708      	adds	r7, #8
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}

080056c6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056c6:	b480      	push	{r7}
 80056c8:	b085      	sub	sp, #20
 80056ca:	af00      	add	r7, sp, #0
 80056cc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f003 0307 	and.w	r3, r3, #7
 80056e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f042 0201 	orr.w	r2, r2, #1
 80056f6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	3714      	adds	r7, #20
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr

0800570e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b082      	sub	sp, #8
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d101      	bne.n	8005720 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800571c:	2301      	movs	r3, #1
 800571e:	e01d      	b.n	800575c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005726:	b2db      	uxtb	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d106      	bne.n	800573a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f7fc fa87 	bl	8001c48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2202      	movs	r2, #2
 800573e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	3304      	adds	r3, #4
 800574a:	4619      	mov	r1, r3
 800574c:	4610      	mov	r0, r2
 800574e:	f000 fac1 	bl	8005cd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2201      	movs	r2, #1
 8005756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b02      	cmp	r3, #2
 8005778:	d122      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68db      	ldr	r3, [r3, #12]
 8005780:	f003 0302 	and.w	r3, r3, #2
 8005784:	2b02      	cmp	r3, #2
 8005786:	d11b      	bne.n	80057c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f06f 0202 	mvn.w	r2, #2
 8005790:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2201      	movs	r2, #1
 8005796:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d003      	beq.n	80057ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f000 fa75 	bl	8005c96 <HAL_TIM_IC_CaptureCallback>
 80057ac:	e005      	b.n	80057ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 fa67 	bl	8005c82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f000 fa78 	bl	8005caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	691b      	ldr	r3, [r3, #16]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b04      	cmp	r3, #4
 80057cc:	d122      	bne.n	8005814 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d11b      	bne.n	8005814 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f06f 0204 	mvn.w	r2, #4
 80057e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2202      	movs	r2, #2
 80057ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	699b      	ldr	r3, [r3, #24]
 80057f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d003      	beq.n	8005802 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 fa4b 	bl	8005c96 <HAL_TIM_IC_CaptureCallback>
 8005800:	e005      	b.n	800580e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fa3d 	bl	8005c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	f000 fa4e 	bl	8005caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691b      	ldr	r3, [r3, #16]
 800581a:	f003 0308 	and.w	r3, r3, #8
 800581e:	2b08      	cmp	r3, #8
 8005820:	d122      	bne.n	8005868 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f003 0308 	and.w	r3, r3, #8
 800582c:	2b08      	cmp	r3, #8
 800582e:	d11b      	bne.n	8005868 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f06f 0208 	mvn.w	r2, #8
 8005838:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2204      	movs	r2, #4
 800583e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	f003 0303 	and.w	r3, r3, #3
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 fa21 	bl	8005c96 <HAL_TIM_IC_CaptureCallback>
 8005854:	e005      	b.n	8005862 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fa13 	bl	8005c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	6878      	ldr	r0, [r7, #4]
 800585e:	f000 fa24 	bl	8005caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0310 	and.w	r3, r3, #16
 8005872:	2b10      	cmp	r3, #16
 8005874:	d122      	bne.n	80058bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b10      	cmp	r3, #16
 8005882:	d11b      	bne.n	80058bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0210 	mvn.w	r2, #16
 800588c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2208      	movs	r2, #8
 8005892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	69db      	ldr	r3, [r3, #28]
 800589a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f9f7 	bl	8005c96 <HAL_TIM_IC_CaptureCallback>
 80058a8:	e005      	b.n	80058b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f9e9 	bl	8005c82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f9fa 	bl	8005caa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d10e      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	f003 0301 	and.w	r3, r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d107      	bne.n	80058e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f06f 0201 	mvn.w	r2, #1
 80058e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f9c3 	bl	8005c6e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	691b      	ldr	r3, [r3, #16]
 80058ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058f2:	2b80      	cmp	r3, #128	; 0x80
 80058f4:	d10e      	bne.n	8005914 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005900:	2b80      	cmp	r3, #128	; 0x80
 8005902:	d107      	bne.n	8005914 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800590c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fda2 	bl	8006458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591e:	2b40      	cmp	r3, #64	; 0x40
 8005920:	d10e      	bne.n	8005940 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800592c:	2b40      	cmp	r3, #64	; 0x40
 800592e:	d107      	bne.n	8005940 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800593a:	6878      	ldr	r0, [r7, #4]
 800593c:	f000 f9bf 	bl	8005cbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b20      	cmp	r3, #32
 800594c:	d10e      	bne.n	800596c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	f003 0320 	and.w	r3, r3, #32
 8005958:	2b20      	cmp	r3, #32
 800595a:	d107      	bne.n	800596c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f06f 0220 	mvn.w	r2, #32
 8005964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fd6c 	bl	8006444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800596c:	bf00      	nop
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800598a:	2302      	movs	r3, #2
 800598c:	e0b4      	b.n	8005af8 <HAL_TIM_PWM_ConfigChannel+0x184>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	2202      	movs	r2, #2
 800599a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b0c      	cmp	r3, #12
 80059a2:	f200 809f 	bhi.w	8005ae4 <HAL_TIM_PWM_ConfigChannel+0x170>
 80059a6:	a201      	add	r2, pc, #4	; (adr r2, 80059ac <HAL_TIM_PWM_ConfigChannel+0x38>)
 80059a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059ac:	080059e1 	.word	0x080059e1
 80059b0:	08005ae5 	.word	0x08005ae5
 80059b4:	08005ae5 	.word	0x08005ae5
 80059b8:	08005ae5 	.word	0x08005ae5
 80059bc:	08005a21 	.word	0x08005a21
 80059c0:	08005ae5 	.word	0x08005ae5
 80059c4:	08005ae5 	.word	0x08005ae5
 80059c8:	08005ae5 	.word	0x08005ae5
 80059cc:	08005a63 	.word	0x08005a63
 80059d0:	08005ae5 	.word	0x08005ae5
 80059d4:	08005ae5 	.word	0x08005ae5
 80059d8:	08005ae5 	.word	0x08005ae5
 80059dc:	08005aa3 	.word	0x08005aa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fa14 	bl	8005e14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	699a      	ldr	r2, [r3, #24]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f042 0208 	orr.w	r2, r2, #8
 80059fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0204 	bic.w	r2, r2, #4
 8005a0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6999      	ldr	r1, [r3, #24]
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	691a      	ldr	r2, [r3, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	619a      	str	r2, [r3, #24]
      break;
 8005a1e:	e062      	b.n	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68b9      	ldr	r1, [r7, #8]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f000 fa64 	bl	8005ef4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	699a      	ldr	r2, [r3, #24]
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6999      	ldr	r1, [r3, #24]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	691b      	ldr	r3, [r3, #16]
 8005a56:	021a      	lsls	r2, r3, #8
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	619a      	str	r2, [r3, #24]
      break;
 8005a60:	e041      	b.n	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68b9      	ldr	r1, [r7, #8]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fab9 	bl	8005fe0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69da      	ldr	r2, [r3, #28]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0208 	orr.w	r2, r2, #8
 8005a7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0204 	bic.w	r2, r2, #4
 8005a8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69d9      	ldr	r1, [r3, #28]
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	430a      	orrs	r2, r1
 8005a9e:	61da      	str	r2, [r3, #28]
      break;
 8005aa0:	e021      	b.n	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f000 fb0d 	bl	80060c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005abc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005acc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69d9      	ldr	r1, [r3, #28]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	021a      	lsls	r2, r3, #8
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	430a      	orrs	r2, r1
 8005ae0:	61da      	str	r2, [r3, #28]
      break;
 8005ae2:	e000      	b.n	8005ae6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005ae4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2201      	movs	r2, #1
 8005aea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3710      	adds	r7, #16
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d101      	bne.n	8005b18 <HAL_TIM_ConfigClockSource+0x18>
 8005b14:	2302      	movs	r3, #2
 8005b16:	e0a6      	b.n	8005c66 <HAL_TIM_ConfigClockSource+0x166>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b36:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b3e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2b40      	cmp	r3, #64	; 0x40
 8005b4e:	d067      	beq.n	8005c20 <HAL_TIM_ConfigClockSource+0x120>
 8005b50:	2b40      	cmp	r3, #64	; 0x40
 8005b52:	d80b      	bhi.n	8005b6c <HAL_TIM_ConfigClockSource+0x6c>
 8005b54:	2b10      	cmp	r3, #16
 8005b56:	d073      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0x140>
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d802      	bhi.n	8005b62 <HAL_TIM_ConfigClockSource+0x62>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d06f      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005b60:	e078      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d06c      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0x140>
 8005b66:	2b30      	cmp	r3, #48	; 0x30
 8005b68:	d06a      	beq.n	8005c40 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005b6a:	e073      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b6c:	2b70      	cmp	r3, #112	; 0x70
 8005b6e:	d00d      	beq.n	8005b8c <HAL_TIM_ConfigClockSource+0x8c>
 8005b70:	2b70      	cmp	r3, #112	; 0x70
 8005b72:	d804      	bhi.n	8005b7e <HAL_TIM_ConfigClockSource+0x7e>
 8005b74:	2b50      	cmp	r3, #80	; 0x50
 8005b76:	d033      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0xe0>
 8005b78:	2b60      	cmp	r3, #96	; 0x60
 8005b7a:	d041      	beq.n	8005c00 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005b7c:	e06a      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b82:	d066      	beq.n	8005c52 <HAL_TIM_ConfigClockSource+0x152>
 8005b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b88:	d017      	beq.n	8005bba <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005b8a:	e063      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	6899      	ldr	r1, [r3, #8]
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f000 fb64 	bl	8006268 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68fa      	ldr	r2, [r7, #12]
 8005bb6:	609a      	str	r2, [r3, #8]
      break;
 8005bb8:	e04c      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6818      	ldr	r0, [r3, #0]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	6899      	ldr	r1, [r3, #8]
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f000 fb4d 	bl	8006268 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bdc:	609a      	str	r2, [r3, #8]
      break;
 8005bde:	e039      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6859      	ldr	r1, [r3, #4]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	461a      	mov	r2, r3
 8005bee:	f000 fac1 	bl	8006174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2150      	movs	r1, #80	; 0x50
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f000 fb1a 	bl	8006232 <TIM_ITRx_SetConfig>
      break;
 8005bfe:	e029      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6818      	ldr	r0, [r3, #0]
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	68db      	ldr	r3, [r3, #12]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	f000 fae0 	bl	80061d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2160      	movs	r1, #96	; 0x60
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f000 fb0a 	bl	8006232 <TIM_ITRx_SetConfig>
      break;
 8005c1e:	e019      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6818      	ldr	r0, [r3, #0]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	6859      	ldr	r1, [r3, #4]
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	f000 faa1 	bl	8006174 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	2140      	movs	r1, #64	; 0x40
 8005c38:	4618      	mov	r0, r3
 8005c3a:	f000 fafa 	bl	8006232 <TIM_ITRx_SetConfig>
      break;
 8005c3e:	e009      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4619      	mov	r1, r3
 8005c4a:	4610      	mov	r0, r2
 8005c4c:	f000 faf1 	bl	8006232 <TIM_ITRx_SetConfig>
      break;
 8005c50:	e000      	b.n	8005c54 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8005c52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3710      	adds	r7, #16
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}

08005c6e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c6e:	b480      	push	{r7}
 8005c70:	b083      	sub	sp, #12
 8005c72:	af00      	add	r7, sp, #0
 8005c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005c76:	bf00      	nop
 8005c78:	370c      	adds	r7, #12
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr

08005c82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c82:	b480      	push	{r7}
 8005c84:	b083      	sub	sp, #12
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c8a:	bf00      	nop
 8005c8c:	370c      	adds	r7, #12
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr

08005c96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005c9e:	bf00      	nop
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005caa:	b480      	push	{r7}
 8005cac:	b083      	sub	sp, #12
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cb2:	bf00      	nop
 8005cb4:	370c      	adds	r7, #12
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbc:	4770      	bx	lr

08005cbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cbe:	b480      	push	{r7}
 8005cc0:	b083      	sub	sp, #12
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cc6:	bf00      	nop
 8005cc8:	370c      	adds	r7, #12
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd0:	4770      	bx	lr
	...

08005cd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
 8005cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a40      	ldr	r2, [pc, #256]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d013      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf2:	d00f      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a3d      	ldr	r2, [pc, #244]	; (8005dec <TIM_Base_SetConfig+0x118>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00b      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a3c      	ldr	r2, [pc, #240]	; (8005df0 <TIM_Base_SetConfig+0x11c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d007      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a3b      	ldr	r2, [pc, #236]	; (8005df4 <TIM_Base_SetConfig+0x120>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d003      	beq.n	8005d14 <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a3a      	ldr	r2, [pc, #232]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d108      	bne.n	8005d26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	68fa      	ldr	r2, [r7, #12]
 8005d22:	4313      	orrs	r3, r2
 8005d24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	4a2f      	ldr	r2, [pc, #188]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d02b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d027      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a2c      	ldr	r2, [pc, #176]	; (8005dec <TIM_Base_SetConfig+0x118>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d023      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	4a2b      	ldr	r2, [pc, #172]	; (8005df0 <TIM_Base_SetConfig+0x11c>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d01f      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a2a      	ldr	r2, [pc, #168]	; (8005df4 <TIM_Base_SetConfig+0x120>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d01b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a29      	ldr	r2, [pc, #164]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d017      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a28      	ldr	r2, [pc, #160]	; (8005dfc <TIM_Base_SetConfig+0x128>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a27      	ldr	r2, [pc, #156]	; (8005e00 <TIM_Base_SetConfig+0x12c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00f      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a26      	ldr	r2, [pc, #152]	; (8005e04 <TIM_Base_SetConfig+0x130>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d00b      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a25      	ldr	r2, [pc, #148]	; (8005e08 <TIM_Base_SetConfig+0x134>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d007      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a24      	ldr	r2, [pc, #144]	; (8005e0c <TIM_Base_SetConfig+0x138>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d003      	beq.n	8005d86 <TIM_Base_SetConfig+0xb2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a23      	ldr	r2, [pc, #140]	; (8005e10 <TIM_Base_SetConfig+0x13c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d108      	bne.n	8005d98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	68fa      	ldr	r2, [r7, #12]
 8005d94:	4313      	orrs	r3, r2
 8005d96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	68fa      	ldr	r2, [r7, #12]
 8005daa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <TIM_Base_SetConfig+0x114>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d003      	beq.n	8005dcc <TIM_Base_SetConfig+0xf8>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	4a0c      	ldr	r2, [pc, #48]	; (8005df8 <TIM_Base_SetConfig+0x124>)
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d103      	bne.n	8005dd4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	691a      	ldr	r2, [r3, #16]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	615a      	str	r2, [r3, #20]
}
 8005dda:	bf00      	nop
 8005ddc:	3714      	adds	r7, #20
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40000400 	.word	0x40000400
 8005df0:	40000800 	.word	0x40000800
 8005df4:	40000c00 	.word	0x40000c00
 8005df8:	40010400 	.word	0x40010400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800
 8005e08:	40001800 	.word	0x40001800
 8005e0c:	40001c00 	.word	0x40001c00
 8005e10:	40002000 	.word	0x40002000

08005e14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b087      	sub	sp, #28
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	6a1b      	ldr	r3, [r3, #32]
 8005e22:	f023 0201 	bic.w	r2, r3, #1
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0303 	bic.w	r3, r3, #3
 8005e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68fa      	ldr	r2, [r7, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f023 0302 	bic.w	r3, r3, #2
 8005e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	689b      	ldr	r3, [r3, #8]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a20      	ldr	r2, [pc, #128]	; (8005eec <TIM_OC1_SetConfig+0xd8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d003      	beq.n	8005e78 <TIM_OC1_SetConfig+0x64>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a1f      	ldr	r2, [pc, #124]	; (8005ef0 <TIM_OC1_SetConfig+0xdc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d10c      	bne.n	8005e92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	f023 0308 	bic.w	r3, r3, #8
 8005e7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	68db      	ldr	r3, [r3, #12]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	4313      	orrs	r3, r2
 8005e88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	f023 0304 	bic.w	r3, r3, #4
 8005e90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a15      	ldr	r2, [pc, #84]	; (8005eec <TIM_OC1_SetConfig+0xd8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d003      	beq.n	8005ea2 <TIM_OC1_SetConfig+0x8e>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	4a14      	ldr	r2, [pc, #80]	; (8005ef0 <TIM_OC1_SetConfig+0xdc>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d111      	bne.n	8005ec6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005eb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	693a      	ldr	r2, [r7, #16]
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68fa      	ldr	r2, [r7, #12]
 8005ed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	685a      	ldr	r2, [r3, #4]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	621a      	str	r2, [r3, #32]
}
 8005ee0:	bf00      	nop
 8005ee2:	371c      	adds	r7, #28
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	40010000 	.word	0x40010000
 8005ef0:	40010400 	.word	0x40010400

08005ef4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b087      	sub	sp, #28
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f023 0210 	bic.w	r2, r3, #16
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6a1b      	ldr	r3, [r3, #32]
 8005f0e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	699b      	ldr	r3, [r3, #24]
 8005f1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	021b      	lsls	r3, r3, #8
 8005f32:	68fa      	ldr	r2, [r7, #12]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	f023 0320 	bic.w	r3, r3, #32
 8005f3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	011b      	lsls	r3, r3, #4
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	4a22      	ldr	r2, [pc, #136]	; (8005fd8 <TIM_OC2_SetConfig+0xe4>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d003      	beq.n	8005f5c <TIM_OC2_SetConfig+0x68>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	4a21      	ldr	r2, [pc, #132]	; (8005fdc <TIM_OC2_SetConfig+0xe8>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d10d      	bne.n	8005f78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	4a17      	ldr	r2, [pc, #92]	; (8005fd8 <TIM_OC2_SetConfig+0xe4>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d003      	beq.n	8005f88 <TIM_OC2_SetConfig+0x94>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4a16      	ldr	r2, [pc, #88]	; (8005fdc <TIM_OC2_SetConfig+0xe8>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d113      	bne.n	8005fb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	695b      	ldr	r3, [r3, #20]
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	693a      	ldr	r2, [r7, #16]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	009b      	lsls	r3, r3, #2
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	693a      	ldr	r2, [r7, #16]
 8005fb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	621a      	str	r2, [r3, #32]
}
 8005fca:	bf00      	nop
 8005fcc:	371c      	adds	r7, #28
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd4:	4770      	bx	lr
 8005fd6:	bf00      	nop
 8005fd8:	40010000 	.word	0x40010000
 8005fdc:	40010400 	.word	0x40010400

08005fe0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b087      	sub	sp, #28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a1b      	ldr	r3, [r3, #32]
 8005fee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a1b      	ldr	r3, [r3, #32]
 8005ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	69db      	ldr	r3, [r3, #28]
 8006006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800600e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f023 0303 	bic.w	r3, r3, #3
 8006016:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006028:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	4313      	orrs	r3, r2
 8006034:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a21      	ldr	r2, [pc, #132]	; (80060c0 <TIM_OC3_SetConfig+0xe0>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_OC3_SetConfig+0x66>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a20      	ldr	r2, [pc, #128]	; (80060c4 <TIM_OC3_SetConfig+0xe4>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d10d      	bne.n	8006062 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006046:	697b      	ldr	r3, [r7, #20]
 8006048:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800604c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	021b      	lsls	r3, r3, #8
 8006054:	697a      	ldr	r2, [r7, #20]
 8006056:	4313      	orrs	r3, r2
 8006058:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006060:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a16      	ldr	r2, [pc, #88]	; (80060c0 <TIM_OC3_SetConfig+0xe0>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d003      	beq.n	8006072 <TIM_OC3_SetConfig+0x92>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <TIM_OC3_SetConfig+0xe4>)
 800606e:	4293      	cmp	r3, r2
 8006070:	d113      	bne.n	800609a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006078:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006080:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	695b      	ldr	r3, [r3, #20]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	699b      	ldr	r3, [r3, #24]
 8006092:	011b      	lsls	r3, r3, #4
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	697a      	ldr	r2, [r7, #20]
 80060b2:	621a      	str	r2, [r3, #32]
}
 80060b4:	bf00      	nop
 80060b6:	371c      	adds	r7, #28
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	40010000 	.word	0x40010000
 80060c4:	40010400 	.word	0x40010400

080060c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
 80060e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
 80060ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	021b      	lsls	r3, r3, #8
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	4313      	orrs	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800610c:	693b      	ldr	r3, [r7, #16]
 800610e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006112:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	031b      	lsls	r3, r3, #12
 800611a:	693a      	ldr	r2, [r7, #16]
 800611c:	4313      	orrs	r3, r2
 800611e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	4a12      	ldr	r2, [pc, #72]	; (800616c <TIM_OC4_SetConfig+0xa4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d003      	beq.n	8006130 <TIM_OC4_SetConfig+0x68>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4a11      	ldr	r2, [pc, #68]	; (8006170 <TIM_OC4_SetConfig+0xa8>)
 800612c:	4293      	cmp	r3, r2
 800612e:	d109      	bne.n	8006144 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	019b      	lsls	r3, r3, #6
 800613e:	697a      	ldr	r2, [r7, #20]
 8006140:	4313      	orrs	r3, r2
 8006142:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	697a      	ldr	r2, [r7, #20]
 8006148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68fa      	ldr	r2, [r7, #12]
 800614e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	693a      	ldr	r2, [r7, #16]
 800615c:	621a      	str	r2, [r3, #32]
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	40010000 	.word	0x40010000
 8006170:	40010400 	.word	0x40010400

08006174 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006174:	b480      	push	{r7}
 8006176:	b087      	sub	sp, #28
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6a1b      	ldr	r3, [r3, #32]
 8006184:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	6a1b      	ldr	r3, [r3, #32]
 800618a:	f023 0201 	bic.w	r2, r3, #1
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	699b      	ldr	r3, [r3, #24]
 8006196:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800619e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	011b      	lsls	r3, r3, #4
 80061a4:	693a      	ldr	r2, [r7, #16]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	f023 030a 	bic.w	r3, r3, #10
 80061b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80061b2:	697a      	ldr	r2, [r7, #20]
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	697a      	ldr	r2, [r7, #20]
 80061c4:	621a      	str	r2, [r3, #32]
}
 80061c6:	bf00      	nop
 80061c8:	371c      	adds	r7, #28
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d2:	b480      	push	{r7}
 80061d4:	b087      	sub	sp, #28
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	60f8      	str	r0, [r7, #12]
 80061da:	60b9      	str	r1, [r7, #8]
 80061dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	f023 0210 	bic.w	r2, r3, #16
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	699b      	ldr	r3, [r3, #24]
 80061ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a1b      	ldr	r3, [r3, #32]
 80061f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	031b      	lsls	r3, r3, #12
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006208:	693b      	ldr	r3, [r7, #16]
 800620a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800620e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	693a      	ldr	r2, [r7, #16]
 8006216:	4313      	orrs	r3, r2
 8006218:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	697a      	ldr	r2, [r7, #20]
 800621e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	693a      	ldr	r2, [r7, #16]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006232:	b480      	push	{r7}
 8006234:	b085      	sub	sp, #20
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006248:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4313      	orrs	r3, r2
 8006250:	f043 0307 	orr.w	r3, r3, #7
 8006254:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	609a      	str	r2, [r3, #8]
}
 800625c:	bf00      	nop
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	689b      	ldr	r3, [r3, #8]
 800627a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006282:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	021a      	lsls	r2, r3, #8
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	431a      	orrs	r2, r3
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	4313      	orrs	r3, r2
 8006294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	697a      	ldr	r2, [r7, #20]
 800629a:	609a      	str	r2, [r3, #8]
}
 800629c:	bf00      	nop
 800629e:	371c      	adds	r7, #28
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062bc:	2302      	movs	r3, #2
 80062be:	e05a      	b.n	8006376 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80062e8:	683b      	ldr	r3, [r7, #0]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68fa      	ldr	r2, [r7, #12]
 80062f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a21      	ldr	r2, [pc, #132]	; (8006384 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d022      	beq.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800630c:	d01d      	beq.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a1d      	ldr	r2, [pc, #116]	; (8006388 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d018      	beq.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a1b      	ldr	r2, [pc, #108]	; (800638c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d013      	beq.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a1a      	ldr	r2, [pc, #104]	; (8006390 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d00e      	beq.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a18      	ldr	r2, [pc, #96]	; (8006394 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d009      	beq.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a17      	ldr	r2, [pc, #92]	; (8006398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d004      	beq.n	800634a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a15      	ldr	r2, [pc, #84]	; (800639c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d10c      	bne.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006350:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	4313      	orrs	r3, r2
 800635a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68ba      	ldr	r2, [r7, #8]
 8006362:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	40010000 	.word	0x40010000
 8006388:	40000400 	.word	0x40000400
 800638c:	40000800 	.word	0x40000800
 8006390:	40000c00 	.word	0x40000c00
 8006394:	40010400 	.word	0x40010400
 8006398:	40014000 	.word	0x40014000
 800639c:	40001800 	.word	0x40001800

080063a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b085      	sub	sp, #20
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063aa:	2300      	movs	r3, #0
 80063ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e03d      	b.n	8006438 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	4313      	orrs	r3, r2
 80063d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4313      	orrs	r3, r2
 80063de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4313      	orrs	r3, r2
 80063fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	691b      	ldr	r3, [r3, #16]
 8006406:	4313      	orrs	r3, r2
 8006408:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	4313      	orrs	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	69db      	ldr	r3, [r3, #28]
 8006422:	4313      	orrs	r3, r2
 8006424:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e03f      	b.n	80064fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fb fd46 	bl	8001f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2224      	movs	r2, #36	; 0x24
 800649c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f829 	bl	8006508 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80064c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695a      	ldr	r2, [r3, #20]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80064d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3708      	adds	r7, #8
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	691b      	ldr	r3, [r3, #16]
 8006518:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68da      	ldr	r2, [r3, #12]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	689a      	ldr	r2, [r3, #8]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	431a      	orrs	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	695b      	ldr	r3, [r3, #20]
 8006536:	431a      	orrs	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	4313      	orrs	r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800654a:	f023 030c 	bic.w	r3, r3, #12
 800654e:	687a      	ldr	r2, [r7, #4]
 8006550:	6812      	ldr	r2, [r2, #0]
 8006552:	68f9      	ldr	r1, [r7, #12]
 8006554:	430b      	orrs	r3, r1
 8006556:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	695b      	ldr	r3, [r3, #20]
 800655e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006576:	f040 818b 	bne.w	8006890 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4ac1      	ldr	r2, [pc, #772]	; (8006884 <UART_SetConfig+0x37c>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d005      	beq.n	8006590 <UART_SetConfig+0x88>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4abf      	ldr	r2, [pc, #764]	; (8006888 <UART_SetConfig+0x380>)
 800658a:	4293      	cmp	r3, r2
 800658c:	f040 80bd 	bne.w	800670a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006590:	f7ff f85a 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 8006594:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	461d      	mov	r5, r3
 800659a:	f04f 0600 	mov.w	r6, #0
 800659e:	46a8      	mov	r8, r5
 80065a0:	46b1      	mov	r9, r6
 80065a2:	eb18 0308 	adds.w	r3, r8, r8
 80065a6:	eb49 0409 	adc.w	r4, r9, r9
 80065aa:	4698      	mov	r8, r3
 80065ac:	46a1      	mov	r9, r4
 80065ae:	eb18 0805 	adds.w	r8, r8, r5
 80065b2:	eb49 0906 	adc.w	r9, r9, r6
 80065b6:	f04f 0100 	mov.w	r1, #0
 80065ba:	f04f 0200 	mov.w	r2, #0
 80065be:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065c2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065c6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065ca:	4688      	mov	r8, r1
 80065cc:	4691      	mov	r9, r2
 80065ce:	eb18 0005 	adds.w	r0, r8, r5
 80065d2:	eb49 0106 	adc.w	r1, r9, r6
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	461d      	mov	r5, r3
 80065dc:	f04f 0600 	mov.w	r6, #0
 80065e0:	196b      	adds	r3, r5, r5
 80065e2:	eb46 0406 	adc.w	r4, r6, r6
 80065e6:	461a      	mov	r2, r3
 80065e8:	4623      	mov	r3, r4
 80065ea:	f7fa fa9f 	bl	8000b2c <__aeabi_uldivmod>
 80065ee:	4603      	mov	r3, r0
 80065f0:	460c      	mov	r4, r1
 80065f2:	461a      	mov	r2, r3
 80065f4:	4ba5      	ldr	r3, [pc, #660]	; (800688c <UART_SetConfig+0x384>)
 80065f6:	fba3 2302 	umull	r2, r3, r3, r2
 80065fa:	095b      	lsrs	r3, r3, #5
 80065fc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	461d      	mov	r5, r3
 8006604:	f04f 0600 	mov.w	r6, #0
 8006608:	46a9      	mov	r9, r5
 800660a:	46b2      	mov	sl, r6
 800660c:	eb19 0309 	adds.w	r3, r9, r9
 8006610:	eb4a 040a 	adc.w	r4, sl, sl
 8006614:	4699      	mov	r9, r3
 8006616:	46a2      	mov	sl, r4
 8006618:	eb19 0905 	adds.w	r9, r9, r5
 800661c:	eb4a 0a06 	adc.w	sl, sl, r6
 8006620:	f04f 0100 	mov.w	r1, #0
 8006624:	f04f 0200 	mov.w	r2, #0
 8006628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800662c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006630:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006634:	4689      	mov	r9, r1
 8006636:	4692      	mov	sl, r2
 8006638:	eb19 0005 	adds.w	r0, r9, r5
 800663c:	eb4a 0106 	adc.w	r1, sl, r6
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	461d      	mov	r5, r3
 8006646:	f04f 0600 	mov.w	r6, #0
 800664a:	196b      	adds	r3, r5, r5
 800664c:	eb46 0406 	adc.w	r4, r6, r6
 8006650:	461a      	mov	r2, r3
 8006652:	4623      	mov	r3, r4
 8006654:	f7fa fa6a 	bl	8000b2c <__aeabi_uldivmod>
 8006658:	4603      	mov	r3, r0
 800665a:	460c      	mov	r4, r1
 800665c:	461a      	mov	r2, r3
 800665e:	4b8b      	ldr	r3, [pc, #556]	; (800688c <UART_SetConfig+0x384>)
 8006660:	fba3 1302 	umull	r1, r3, r3, r2
 8006664:	095b      	lsrs	r3, r3, #5
 8006666:	2164      	movs	r1, #100	; 0x64
 8006668:	fb01 f303 	mul.w	r3, r1, r3
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	3332      	adds	r3, #50	; 0x32
 8006672:	4a86      	ldr	r2, [pc, #536]	; (800688c <UART_SetConfig+0x384>)
 8006674:	fba2 2303 	umull	r2, r3, r2, r3
 8006678:	095b      	lsrs	r3, r3, #5
 800667a:	005b      	lsls	r3, r3, #1
 800667c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006680:	4498      	add	r8, r3
 8006682:	68bb      	ldr	r3, [r7, #8]
 8006684:	461d      	mov	r5, r3
 8006686:	f04f 0600 	mov.w	r6, #0
 800668a:	46a9      	mov	r9, r5
 800668c:	46b2      	mov	sl, r6
 800668e:	eb19 0309 	adds.w	r3, r9, r9
 8006692:	eb4a 040a 	adc.w	r4, sl, sl
 8006696:	4699      	mov	r9, r3
 8006698:	46a2      	mov	sl, r4
 800669a:	eb19 0905 	adds.w	r9, r9, r5
 800669e:	eb4a 0a06 	adc.w	sl, sl, r6
 80066a2:	f04f 0100 	mov.w	r1, #0
 80066a6:	f04f 0200 	mov.w	r2, #0
 80066aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066b6:	4689      	mov	r9, r1
 80066b8:	4692      	mov	sl, r2
 80066ba:	eb19 0005 	adds.w	r0, r9, r5
 80066be:	eb4a 0106 	adc.w	r1, sl, r6
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	461d      	mov	r5, r3
 80066c8:	f04f 0600 	mov.w	r6, #0
 80066cc:	196b      	adds	r3, r5, r5
 80066ce:	eb46 0406 	adc.w	r4, r6, r6
 80066d2:	461a      	mov	r2, r3
 80066d4:	4623      	mov	r3, r4
 80066d6:	f7fa fa29 	bl	8000b2c <__aeabi_uldivmod>
 80066da:	4603      	mov	r3, r0
 80066dc:	460c      	mov	r4, r1
 80066de:	461a      	mov	r2, r3
 80066e0:	4b6a      	ldr	r3, [pc, #424]	; (800688c <UART_SetConfig+0x384>)
 80066e2:	fba3 1302 	umull	r1, r3, r3, r2
 80066e6:	095b      	lsrs	r3, r3, #5
 80066e8:	2164      	movs	r1, #100	; 0x64
 80066ea:	fb01 f303 	mul.w	r3, r1, r3
 80066ee:	1ad3      	subs	r3, r2, r3
 80066f0:	00db      	lsls	r3, r3, #3
 80066f2:	3332      	adds	r3, #50	; 0x32
 80066f4:	4a65      	ldr	r2, [pc, #404]	; (800688c <UART_SetConfig+0x384>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	095b      	lsrs	r3, r3, #5
 80066fc:	f003 0207 	and.w	r2, r3, #7
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4442      	add	r2, r8
 8006706:	609a      	str	r2, [r3, #8]
 8006708:	e26f      	b.n	8006bea <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800670a:	f7fe ff89 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 800670e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	461d      	mov	r5, r3
 8006714:	f04f 0600 	mov.w	r6, #0
 8006718:	46a8      	mov	r8, r5
 800671a:	46b1      	mov	r9, r6
 800671c:	eb18 0308 	adds.w	r3, r8, r8
 8006720:	eb49 0409 	adc.w	r4, r9, r9
 8006724:	4698      	mov	r8, r3
 8006726:	46a1      	mov	r9, r4
 8006728:	eb18 0805 	adds.w	r8, r8, r5
 800672c:	eb49 0906 	adc.w	r9, r9, r6
 8006730:	f04f 0100 	mov.w	r1, #0
 8006734:	f04f 0200 	mov.w	r2, #0
 8006738:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800673c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006740:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006744:	4688      	mov	r8, r1
 8006746:	4691      	mov	r9, r2
 8006748:	eb18 0005 	adds.w	r0, r8, r5
 800674c:	eb49 0106 	adc.w	r1, r9, r6
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	461d      	mov	r5, r3
 8006756:	f04f 0600 	mov.w	r6, #0
 800675a:	196b      	adds	r3, r5, r5
 800675c:	eb46 0406 	adc.w	r4, r6, r6
 8006760:	461a      	mov	r2, r3
 8006762:	4623      	mov	r3, r4
 8006764:	f7fa f9e2 	bl	8000b2c <__aeabi_uldivmod>
 8006768:	4603      	mov	r3, r0
 800676a:	460c      	mov	r4, r1
 800676c:	461a      	mov	r2, r3
 800676e:	4b47      	ldr	r3, [pc, #284]	; (800688c <UART_SetConfig+0x384>)
 8006770:	fba3 2302 	umull	r2, r3, r3, r2
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	461d      	mov	r5, r3
 800677e:	f04f 0600 	mov.w	r6, #0
 8006782:	46a9      	mov	r9, r5
 8006784:	46b2      	mov	sl, r6
 8006786:	eb19 0309 	adds.w	r3, r9, r9
 800678a:	eb4a 040a 	adc.w	r4, sl, sl
 800678e:	4699      	mov	r9, r3
 8006790:	46a2      	mov	sl, r4
 8006792:	eb19 0905 	adds.w	r9, r9, r5
 8006796:	eb4a 0a06 	adc.w	sl, sl, r6
 800679a:	f04f 0100 	mov.w	r1, #0
 800679e:	f04f 0200 	mov.w	r2, #0
 80067a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067ae:	4689      	mov	r9, r1
 80067b0:	4692      	mov	sl, r2
 80067b2:	eb19 0005 	adds.w	r0, r9, r5
 80067b6:	eb4a 0106 	adc.w	r1, sl, r6
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	461d      	mov	r5, r3
 80067c0:	f04f 0600 	mov.w	r6, #0
 80067c4:	196b      	adds	r3, r5, r5
 80067c6:	eb46 0406 	adc.w	r4, r6, r6
 80067ca:	461a      	mov	r2, r3
 80067cc:	4623      	mov	r3, r4
 80067ce:	f7fa f9ad 	bl	8000b2c <__aeabi_uldivmod>
 80067d2:	4603      	mov	r3, r0
 80067d4:	460c      	mov	r4, r1
 80067d6:	461a      	mov	r2, r3
 80067d8:	4b2c      	ldr	r3, [pc, #176]	; (800688c <UART_SetConfig+0x384>)
 80067da:	fba3 1302 	umull	r1, r3, r3, r2
 80067de:	095b      	lsrs	r3, r3, #5
 80067e0:	2164      	movs	r1, #100	; 0x64
 80067e2:	fb01 f303 	mul.w	r3, r1, r3
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	3332      	adds	r3, #50	; 0x32
 80067ec:	4a27      	ldr	r2, [pc, #156]	; (800688c <UART_SetConfig+0x384>)
 80067ee:	fba2 2303 	umull	r2, r3, r2, r3
 80067f2:	095b      	lsrs	r3, r3, #5
 80067f4:	005b      	lsls	r3, r3, #1
 80067f6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067fa:	4498      	add	r8, r3
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	461d      	mov	r5, r3
 8006800:	f04f 0600 	mov.w	r6, #0
 8006804:	46a9      	mov	r9, r5
 8006806:	46b2      	mov	sl, r6
 8006808:	eb19 0309 	adds.w	r3, r9, r9
 800680c:	eb4a 040a 	adc.w	r4, sl, sl
 8006810:	4699      	mov	r9, r3
 8006812:	46a2      	mov	sl, r4
 8006814:	eb19 0905 	adds.w	r9, r9, r5
 8006818:	eb4a 0a06 	adc.w	sl, sl, r6
 800681c:	f04f 0100 	mov.w	r1, #0
 8006820:	f04f 0200 	mov.w	r2, #0
 8006824:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006828:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800682c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006830:	4689      	mov	r9, r1
 8006832:	4692      	mov	sl, r2
 8006834:	eb19 0005 	adds.w	r0, r9, r5
 8006838:	eb4a 0106 	adc.w	r1, sl, r6
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	461d      	mov	r5, r3
 8006842:	f04f 0600 	mov.w	r6, #0
 8006846:	196b      	adds	r3, r5, r5
 8006848:	eb46 0406 	adc.w	r4, r6, r6
 800684c:	461a      	mov	r2, r3
 800684e:	4623      	mov	r3, r4
 8006850:	f7fa f96c 	bl	8000b2c <__aeabi_uldivmod>
 8006854:	4603      	mov	r3, r0
 8006856:	460c      	mov	r4, r1
 8006858:	461a      	mov	r2, r3
 800685a:	4b0c      	ldr	r3, [pc, #48]	; (800688c <UART_SetConfig+0x384>)
 800685c:	fba3 1302 	umull	r1, r3, r3, r2
 8006860:	095b      	lsrs	r3, r3, #5
 8006862:	2164      	movs	r1, #100	; 0x64
 8006864:	fb01 f303 	mul.w	r3, r1, r3
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	3332      	adds	r3, #50	; 0x32
 800686e:	4a07      	ldr	r2, [pc, #28]	; (800688c <UART_SetConfig+0x384>)
 8006870:	fba2 2303 	umull	r2, r3, r2, r3
 8006874:	095b      	lsrs	r3, r3, #5
 8006876:	f003 0207 	and.w	r2, r3, #7
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4442      	add	r2, r8
 8006880:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006882:	e1b2      	b.n	8006bea <UART_SetConfig+0x6e2>
 8006884:	40011000 	.word	0x40011000
 8006888:	40011400 	.word	0x40011400
 800688c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4ad7      	ldr	r2, [pc, #860]	; (8006bf4 <UART_SetConfig+0x6ec>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d005      	beq.n	80068a6 <UART_SetConfig+0x39e>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4ad6      	ldr	r2, [pc, #856]	; (8006bf8 <UART_SetConfig+0x6f0>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	f040 80d1 	bne.w	8006a48 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068a6:	f7fe fecf 	bl	8005648 <HAL_RCC_GetPCLK2Freq>
 80068aa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	469a      	mov	sl, r3
 80068b0:	f04f 0b00 	mov.w	fp, #0
 80068b4:	46d0      	mov	r8, sl
 80068b6:	46d9      	mov	r9, fp
 80068b8:	eb18 0308 	adds.w	r3, r8, r8
 80068bc:	eb49 0409 	adc.w	r4, r9, r9
 80068c0:	4698      	mov	r8, r3
 80068c2:	46a1      	mov	r9, r4
 80068c4:	eb18 080a 	adds.w	r8, r8, sl
 80068c8:	eb49 090b 	adc.w	r9, r9, fp
 80068cc:	f04f 0100 	mov.w	r1, #0
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068d8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068dc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068e0:	4688      	mov	r8, r1
 80068e2:	4691      	mov	r9, r2
 80068e4:	eb1a 0508 	adds.w	r5, sl, r8
 80068e8:	eb4b 0609 	adc.w	r6, fp, r9
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4619      	mov	r1, r3
 80068f2:	f04f 0200 	mov.w	r2, #0
 80068f6:	f04f 0300 	mov.w	r3, #0
 80068fa:	f04f 0400 	mov.w	r4, #0
 80068fe:	0094      	lsls	r4, r2, #2
 8006900:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006904:	008b      	lsls	r3, r1, #2
 8006906:	461a      	mov	r2, r3
 8006908:	4623      	mov	r3, r4
 800690a:	4628      	mov	r0, r5
 800690c:	4631      	mov	r1, r6
 800690e:	f7fa f90d 	bl	8000b2c <__aeabi_uldivmod>
 8006912:	4603      	mov	r3, r0
 8006914:	460c      	mov	r4, r1
 8006916:	461a      	mov	r2, r3
 8006918:	4bb8      	ldr	r3, [pc, #736]	; (8006bfc <UART_SetConfig+0x6f4>)
 800691a:	fba3 2302 	umull	r2, r3, r3, r2
 800691e:	095b      	lsrs	r3, r3, #5
 8006920:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	469b      	mov	fp, r3
 8006928:	f04f 0c00 	mov.w	ip, #0
 800692c:	46d9      	mov	r9, fp
 800692e:	46e2      	mov	sl, ip
 8006930:	eb19 0309 	adds.w	r3, r9, r9
 8006934:	eb4a 040a 	adc.w	r4, sl, sl
 8006938:	4699      	mov	r9, r3
 800693a:	46a2      	mov	sl, r4
 800693c:	eb19 090b 	adds.w	r9, r9, fp
 8006940:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006944:	f04f 0100 	mov.w	r1, #0
 8006948:	f04f 0200 	mov.w	r2, #0
 800694c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006950:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006954:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006958:	4689      	mov	r9, r1
 800695a:	4692      	mov	sl, r2
 800695c:	eb1b 0509 	adds.w	r5, fp, r9
 8006960:	eb4c 060a 	adc.w	r6, ip, sl
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4619      	mov	r1, r3
 800696a:	f04f 0200 	mov.w	r2, #0
 800696e:	f04f 0300 	mov.w	r3, #0
 8006972:	f04f 0400 	mov.w	r4, #0
 8006976:	0094      	lsls	r4, r2, #2
 8006978:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800697c:	008b      	lsls	r3, r1, #2
 800697e:	461a      	mov	r2, r3
 8006980:	4623      	mov	r3, r4
 8006982:	4628      	mov	r0, r5
 8006984:	4631      	mov	r1, r6
 8006986:	f7fa f8d1 	bl	8000b2c <__aeabi_uldivmod>
 800698a:	4603      	mov	r3, r0
 800698c:	460c      	mov	r4, r1
 800698e:	461a      	mov	r2, r3
 8006990:	4b9a      	ldr	r3, [pc, #616]	; (8006bfc <UART_SetConfig+0x6f4>)
 8006992:	fba3 1302 	umull	r1, r3, r3, r2
 8006996:	095b      	lsrs	r3, r3, #5
 8006998:	2164      	movs	r1, #100	; 0x64
 800699a:	fb01 f303 	mul.w	r3, r1, r3
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	011b      	lsls	r3, r3, #4
 80069a2:	3332      	adds	r3, #50	; 0x32
 80069a4:	4a95      	ldr	r2, [pc, #596]	; (8006bfc <UART_SetConfig+0x6f4>)
 80069a6:	fba2 2303 	umull	r2, r3, r2, r3
 80069aa:	095b      	lsrs	r3, r3, #5
 80069ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069b0:	4498      	add	r8, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	469b      	mov	fp, r3
 80069b6:	f04f 0c00 	mov.w	ip, #0
 80069ba:	46d9      	mov	r9, fp
 80069bc:	46e2      	mov	sl, ip
 80069be:	eb19 0309 	adds.w	r3, r9, r9
 80069c2:	eb4a 040a 	adc.w	r4, sl, sl
 80069c6:	4699      	mov	r9, r3
 80069c8:	46a2      	mov	sl, r4
 80069ca:	eb19 090b 	adds.w	r9, r9, fp
 80069ce:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069d2:	f04f 0100 	mov.w	r1, #0
 80069d6:	f04f 0200 	mov.w	r2, #0
 80069da:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069de:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069e2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069e6:	4689      	mov	r9, r1
 80069e8:	4692      	mov	sl, r2
 80069ea:	eb1b 0509 	adds.w	r5, fp, r9
 80069ee:	eb4c 060a 	adc.w	r6, ip, sl
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	4619      	mov	r1, r3
 80069f8:	f04f 0200 	mov.w	r2, #0
 80069fc:	f04f 0300 	mov.w	r3, #0
 8006a00:	f04f 0400 	mov.w	r4, #0
 8006a04:	0094      	lsls	r4, r2, #2
 8006a06:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a0a:	008b      	lsls	r3, r1, #2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4623      	mov	r3, r4
 8006a10:	4628      	mov	r0, r5
 8006a12:	4631      	mov	r1, r6
 8006a14:	f7fa f88a 	bl	8000b2c <__aeabi_uldivmod>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	460c      	mov	r4, r1
 8006a1c:	461a      	mov	r2, r3
 8006a1e:	4b77      	ldr	r3, [pc, #476]	; (8006bfc <UART_SetConfig+0x6f4>)
 8006a20:	fba3 1302 	umull	r1, r3, r3, r2
 8006a24:	095b      	lsrs	r3, r3, #5
 8006a26:	2164      	movs	r1, #100	; 0x64
 8006a28:	fb01 f303 	mul.w	r3, r1, r3
 8006a2c:	1ad3      	subs	r3, r2, r3
 8006a2e:	011b      	lsls	r3, r3, #4
 8006a30:	3332      	adds	r3, #50	; 0x32
 8006a32:	4a72      	ldr	r2, [pc, #456]	; (8006bfc <UART_SetConfig+0x6f4>)
 8006a34:	fba2 2303 	umull	r2, r3, r2, r3
 8006a38:	095b      	lsrs	r3, r3, #5
 8006a3a:	f003 020f 	and.w	r2, r3, #15
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4442      	add	r2, r8
 8006a44:	609a      	str	r2, [r3, #8]
 8006a46:	e0d0      	b.n	8006bea <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a48:	f7fe fdea 	bl	8005620 <HAL_RCC_GetPCLK1Freq>
 8006a4c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	469a      	mov	sl, r3
 8006a52:	f04f 0b00 	mov.w	fp, #0
 8006a56:	46d0      	mov	r8, sl
 8006a58:	46d9      	mov	r9, fp
 8006a5a:	eb18 0308 	adds.w	r3, r8, r8
 8006a5e:	eb49 0409 	adc.w	r4, r9, r9
 8006a62:	4698      	mov	r8, r3
 8006a64:	46a1      	mov	r9, r4
 8006a66:	eb18 080a 	adds.w	r8, r8, sl
 8006a6a:	eb49 090b 	adc.w	r9, r9, fp
 8006a6e:	f04f 0100 	mov.w	r1, #0
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a7a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a7e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a82:	4688      	mov	r8, r1
 8006a84:	4691      	mov	r9, r2
 8006a86:	eb1a 0508 	adds.w	r5, sl, r8
 8006a8a:	eb4b 0609 	adc.w	r6, fp, r9
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	4619      	mov	r1, r3
 8006a94:	f04f 0200 	mov.w	r2, #0
 8006a98:	f04f 0300 	mov.w	r3, #0
 8006a9c:	f04f 0400 	mov.w	r4, #0
 8006aa0:	0094      	lsls	r4, r2, #2
 8006aa2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aa6:	008b      	lsls	r3, r1, #2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	4623      	mov	r3, r4
 8006aac:	4628      	mov	r0, r5
 8006aae:	4631      	mov	r1, r6
 8006ab0:	f7fa f83c 	bl	8000b2c <__aeabi_uldivmod>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	460c      	mov	r4, r1
 8006ab8:	461a      	mov	r2, r3
 8006aba:	4b50      	ldr	r3, [pc, #320]	; (8006bfc <UART_SetConfig+0x6f4>)
 8006abc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	469b      	mov	fp, r3
 8006aca:	f04f 0c00 	mov.w	ip, #0
 8006ace:	46d9      	mov	r9, fp
 8006ad0:	46e2      	mov	sl, ip
 8006ad2:	eb19 0309 	adds.w	r3, r9, r9
 8006ad6:	eb4a 040a 	adc.w	r4, sl, sl
 8006ada:	4699      	mov	r9, r3
 8006adc:	46a2      	mov	sl, r4
 8006ade:	eb19 090b 	adds.w	r9, r9, fp
 8006ae2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ae6:	f04f 0100 	mov.w	r1, #0
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006af2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006af6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006afa:	4689      	mov	r9, r1
 8006afc:	4692      	mov	sl, r2
 8006afe:	eb1b 0509 	adds.w	r5, fp, r9
 8006b02:	eb4c 060a 	adc.w	r6, ip, sl
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	685b      	ldr	r3, [r3, #4]
 8006b0a:	4619      	mov	r1, r3
 8006b0c:	f04f 0200 	mov.w	r2, #0
 8006b10:	f04f 0300 	mov.w	r3, #0
 8006b14:	f04f 0400 	mov.w	r4, #0
 8006b18:	0094      	lsls	r4, r2, #2
 8006b1a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b1e:	008b      	lsls	r3, r1, #2
 8006b20:	461a      	mov	r2, r3
 8006b22:	4623      	mov	r3, r4
 8006b24:	4628      	mov	r0, r5
 8006b26:	4631      	mov	r1, r6
 8006b28:	f7fa f800 	bl	8000b2c <__aeabi_uldivmod>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	460c      	mov	r4, r1
 8006b30:	461a      	mov	r2, r3
 8006b32:	4b32      	ldr	r3, [pc, #200]	; (8006bfc <UART_SetConfig+0x6f4>)
 8006b34:	fba3 1302 	umull	r1, r3, r3, r2
 8006b38:	095b      	lsrs	r3, r3, #5
 8006b3a:	2164      	movs	r1, #100	; 0x64
 8006b3c:	fb01 f303 	mul.w	r3, r1, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	011b      	lsls	r3, r3, #4
 8006b44:	3332      	adds	r3, #50	; 0x32
 8006b46:	4a2d      	ldr	r2, [pc, #180]	; (8006bfc <UART_SetConfig+0x6f4>)
 8006b48:	fba2 2303 	umull	r2, r3, r2, r3
 8006b4c:	095b      	lsrs	r3, r3, #5
 8006b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b52:	4498      	add	r8, r3
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	469b      	mov	fp, r3
 8006b58:	f04f 0c00 	mov.w	ip, #0
 8006b5c:	46d9      	mov	r9, fp
 8006b5e:	46e2      	mov	sl, ip
 8006b60:	eb19 0309 	adds.w	r3, r9, r9
 8006b64:	eb4a 040a 	adc.w	r4, sl, sl
 8006b68:	4699      	mov	r9, r3
 8006b6a:	46a2      	mov	sl, r4
 8006b6c:	eb19 090b 	adds.w	r9, r9, fp
 8006b70:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b74:	f04f 0100 	mov.w	r1, #0
 8006b78:	f04f 0200 	mov.w	r2, #0
 8006b7c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b80:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b84:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b88:	4689      	mov	r9, r1
 8006b8a:	4692      	mov	sl, r2
 8006b8c:	eb1b 0509 	adds.w	r5, fp, r9
 8006b90:	eb4c 060a 	adc.w	r6, ip, sl
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	4619      	mov	r1, r3
 8006b9a:	f04f 0200 	mov.w	r2, #0
 8006b9e:	f04f 0300 	mov.w	r3, #0
 8006ba2:	f04f 0400 	mov.w	r4, #0
 8006ba6:	0094      	lsls	r4, r2, #2
 8006ba8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006bac:	008b      	lsls	r3, r1, #2
 8006bae:	461a      	mov	r2, r3
 8006bb0:	4623      	mov	r3, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	4631      	mov	r1, r6
 8006bb6:	f7f9 ffb9 	bl	8000b2c <__aeabi_uldivmod>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	4b0e      	ldr	r3, [pc, #56]	; (8006bfc <UART_SetConfig+0x6f4>)
 8006bc2:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc6:	095b      	lsrs	r3, r3, #5
 8006bc8:	2164      	movs	r1, #100	; 0x64
 8006bca:	fb01 f303 	mul.w	r3, r1, r3
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	011b      	lsls	r3, r3, #4
 8006bd2:	3332      	adds	r3, #50	; 0x32
 8006bd4:	4a09      	ldr	r2, [pc, #36]	; (8006bfc <UART_SetConfig+0x6f4>)
 8006bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006bda:	095b      	lsrs	r3, r3, #5
 8006bdc:	f003 020f 	and.w	r2, r3, #15
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4442      	add	r2, r8
 8006be6:	609a      	str	r2, [r3, #8]
}
 8006be8:	e7ff      	b.n	8006bea <UART_SetConfig+0x6e2>
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf4:	40011000 	.word	0x40011000
 8006bf8:	40011400 	.word	0x40011400
 8006bfc:	51eb851f 	.word	0x51eb851f

08006c00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c00:	b084      	sub	sp, #16
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b084      	sub	sp, #16
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	f107 001c 	add.w	r0, r7, #28
 8006c0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d122      	bne.n	8006c5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d105      	bne.n	8006c52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f001 fac6 	bl	80081e4 <USB_CoreReset>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	73fb      	strb	r3, [r7, #15]
 8006c5c:	e01a      	b.n	8006c94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 faba 	bl	80081e4 <USB_CoreReset>
 8006c70:	4603      	mov	r3, r0
 8006c72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d106      	bne.n	8006c88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	639a      	str	r2, [r3, #56]	; 0x38
 8006c86:	e005      	b.n	8006c94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d10b      	bne.n	8006cb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	f043 0206 	orr.w	r2, r3, #6
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f043 0220 	orr.w	r2, r3, #32
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cbe:	b004      	add	sp, #16
 8006cc0:	4770      	bx	lr
	...

08006cc4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cd2:	79fb      	ldrb	r3, [r7, #7]
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d165      	bne.n	8006da4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	4a41      	ldr	r2, [pc, #260]	; (8006de0 <USB_SetTurnaroundTime+0x11c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d906      	bls.n	8006cee <USB_SetTurnaroundTime+0x2a>
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4a40      	ldr	r2, [pc, #256]	; (8006de4 <USB_SetTurnaroundTime+0x120>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d802      	bhi.n	8006cee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006ce8:	230f      	movs	r3, #15
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	e062      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	4a3c      	ldr	r2, [pc, #240]	; (8006de4 <USB_SetTurnaroundTime+0x120>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d906      	bls.n	8006d04 <USB_SetTurnaroundTime+0x40>
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4a3b      	ldr	r2, [pc, #236]	; (8006de8 <USB_SetTurnaroundTime+0x124>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d802      	bhi.n	8006d04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cfe:	230e      	movs	r3, #14
 8006d00:	617b      	str	r3, [r7, #20]
 8006d02:	e057      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	4a38      	ldr	r2, [pc, #224]	; (8006de8 <USB_SetTurnaroundTime+0x124>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d906      	bls.n	8006d1a <USB_SetTurnaroundTime+0x56>
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4a37      	ldr	r2, [pc, #220]	; (8006dec <USB_SetTurnaroundTime+0x128>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d802      	bhi.n	8006d1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006d14:	230d      	movs	r3, #13
 8006d16:	617b      	str	r3, [r7, #20]
 8006d18:	e04c      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	4a33      	ldr	r2, [pc, #204]	; (8006dec <USB_SetTurnaroundTime+0x128>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d906      	bls.n	8006d30 <USB_SetTurnaroundTime+0x6c>
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4a32      	ldr	r2, [pc, #200]	; (8006df0 <USB_SetTurnaroundTime+0x12c>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d802      	bhi.n	8006d30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d2a:	230c      	movs	r3, #12
 8006d2c:	617b      	str	r3, [r7, #20]
 8006d2e:	e041      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	4a2f      	ldr	r2, [pc, #188]	; (8006df0 <USB_SetTurnaroundTime+0x12c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d906      	bls.n	8006d46 <USB_SetTurnaroundTime+0x82>
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4a2e      	ldr	r2, [pc, #184]	; (8006df4 <USB_SetTurnaroundTime+0x130>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d802      	bhi.n	8006d46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d40:	230b      	movs	r3, #11
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e036      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	4a2a      	ldr	r2, [pc, #168]	; (8006df4 <USB_SetTurnaroundTime+0x130>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d906      	bls.n	8006d5c <USB_SetTurnaroundTime+0x98>
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4a29      	ldr	r2, [pc, #164]	; (8006df8 <USB_SetTurnaroundTime+0x134>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d802      	bhi.n	8006d5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d56:	230a      	movs	r3, #10
 8006d58:	617b      	str	r3, [r7, #20]
 8006d5a:	e02b      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4a26      	ldr	r2, [pc, #152]	; (8006df8 <USB_SetTurnaroundTime+0x134>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d906      	bls.n	8006d72 <USB_SetTurnaroundTime+0xae>
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4a25      	ldr	r2, [pc, #148]	; (8006dfc <USB_SetTurnaroundTime+0x138>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d802      	bhi.n	8006d72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d6c:	2309      	movs	r3, #9
 8006d6e:	617b      	str	r3, [r7, #20]
 8006d70:	e020      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	4a21      	ldr	r2, [pc, #132]	; (8006dfc <USB_SetTurnaroundTime+0x138>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d906      	bls.n	8006d88 <USB_SetTurnaroundTime+0xc4>
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <USB_SetTurnaroundTime+0x13c>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d802      	bhi.n	8006d88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d82:	2308      	movs	r3, #8
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e015      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	4a1d      	ldr	r2, [pc, #116]	; (8006e00 <USB_SetTurnaroundTime+0x13c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d906      	bls.n	8006d9e <USB_SetTurnaroundTime+0xda>
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	4a1c      	ldr	r2, [pc, #112]	; (8006e04 <USB_SetTurnaroundTime+0x140>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d802      	bhi.n	8006d9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d98:	2307      	movs	r3, #7
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e00a      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d9e:	2306      	movs	r3, #6
 8006da0:	617b      	str	r3, [r7, #20]
 8006da2:	e007      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006da4:	79fb      	ldrb	r3, [r7, #7]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d102      	bne.n	8006db0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006daa:	2309      	movs	r3, #9
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	e001      	b.n	8006db4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006db0:	2309      	movs	r3, #9
 8006db2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	68da      	ldr	r2, [r3, #12]
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	029b      	lsls	r3, r3, #10
 8006dc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006dcc:	431a      	orrs	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dd2:	2300      	movs	r3, #0
}
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	00d8acbf 	.word	0x00d8acbf
 8006de4:	00e4e1bf 	.word	0x00e4e1bf
 8006de8:	00f423ff 	.word	0x00f423ff
 8006dec:	0106737f 	.word	0x0106737f
 8006df0:	011a499f 	.word	0x011a499f
 8006df4:	01312cff 	.word	0x01312cff
 8006df8:	014ca43f 	.word	0x014ca43f
 8006dfc:	016e35ff 	.word	0x016e35ff
 8006e00:	01a6ab1f 	.word	0x01a6ab1f
 8006e04:	01e847ff 	.word	0x01e847ff

08006e08 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b083      	sub	sp, #12
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	f043 0201 	orr.w	r2, r3, #1
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	370c      	adds	r7, #12
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b083      	sub	sp, #12
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	f023 0201 	bic.w	r2, r3, #1
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e3e:	2300      	movs	r3, #0
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
 8006e54:	460b      	mov	r3, r1
 8006e56:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e64:	78fb      	ldrb	r3, [r7, #3]
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d106      	bne.n	8006e78 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	68db      	ldr	r3, [r3, #12]
 8006e6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	60da      	str	r2, [r3, #12]
 8006e76:	e00b      	b.n	8006e90 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e78:	78fb      	ldrb	r3, [r7, #3]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d106      	bne.n	8006e8c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	60da      	str	r2, [r3, #12]
 8006e8a:	e001      	b.n	8006e90 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006e8c:	2301      	movs	r3, #1
 8006e8e:	e003      	b.n	8006e98 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006e90:	2032      	movs	r0, #50	; 0x32
 8006e92:	f7fb f97f 	bl	8002194 <HAL_Delay>

  return HAL_OK;
 8006e96:	2300      	movs	r3, #0
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3708      	adds	r7, #8
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b086      	sub	sp, #24
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006eae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006eb2:	2300      	movs	r3, #0
 8006eb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eba:	2300      	movs	r3, #0
 8006ebc:	613b      	str	r3, [r7, #16]
 8006ebe:	e009      	b.n	8006ed4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	3340      	adds	r3, #64	; 0x40
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	2200      	movs	r2, #0
 8006ecc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	3301      	adds	r3, #1
 8006ed2:	613b      	str	r3, [r7, #16]
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	2b0e      	cmp	r3, #14
 8006ed8:	d9f2      	bls.n	8006ec0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006eda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d11c      	bne.n	8006f1a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	68fa      	ldr	r2, [r7, #12]
 8006eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eee:	f043 0302 	orr.w	r3, r3, #2
 8006ef2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f04:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	639a      	str	r2, [r3, #56]	; 0x38
 8006f18:	e00b      	b.n	8006f32 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f38:	461a      	mov	r2, r3
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f44:	4619      	mov	r1, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	680b      	ldr	r3, [r1, #0]
 8006f50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f54:	2b01      	cmp	r3, #1
 8006f56:	d10c      	bne.n	8006f72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d104      	bne.n	8006f68 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f5e:	2100      	movs	r1, #0
 8006f60:	6878      	ldr	r0, [r7, #4]
 8006f62:	f000 f949 	bl	80071f8 <USB_SetDevSpeed>
 8006f66:	e008      	b.n	8006f7a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f68:	2101      	movs	r1, #1
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f944 	bl	80071f8 <USB_SetDevSpeed>
 8006f70:	e003      	b.n	8006f7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f72:	2103      	movs	r1, #3
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f93f 	bl	80071f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f7a:	2110      	movs	r1, #16
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f8f3 	bl	8007168 <USB_FlushTxFifo>
 8006f82:	4603      	mov	r3, r0
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d001      	beq.n	8006f8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f911 	bl	80071b4 <USB_FlushRxFifo>
 8006f92:	4603      	mov	r3, r0
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d001      	beq.n	8006f9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fae:	461a      	mov	r2, r3
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fba:	461a      	mov	r2, r3
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fc0:	2300      	movs	r3, #0
 8006fc2:	613b      	str	r3, [r7, #16]
 8006fc4:	e043      	b.n	800704e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	015a      	lsls	r2, r3, #5
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	4413      	add	r3, r2
 8006fce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fdc:	d118      	bne.n	8007010 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d10a      	bne.n	8006ffa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ff6:	6013      	str	r3, [r2, #0]
 8006ff8:	e013      	b.n	8007022 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ffa:	693b      	ldr	r3, [r7, #16]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	461a      	mov	r2, r3
 8007008:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	e008      	b.n	8007022 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	015a      	lsls	r2, r3, #5
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	4413      	add	r3, r2
 8007018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701c:	461a      	mov	r2, r3
 800701e:	2300      	movs	r3, #0
 8007020:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	015a      	lsls	r2, r3, #5
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	4413      	add	r3, r2
 800702a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800702e:	461a      	mov	r2, r3
 8007030:	2300      	movs	r3, #0
 8007032:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007034:	693b      	ldr	r3, [r7, #16]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007040:	461a      	mov	r2, r3
 8007042:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007046:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	3301      	adds	r3, #1
 800704c:	613b      	str	r3, [r7, #16]
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	693a      	ldr	r2, [r7, #16]
 8007052:	429a      	cmp	r2, r3
 8007054:	d3b7      	bcc.n	8006fc6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007056:	2300      	movs	r3, #0
 8007058:	613b      	str	r3, [r7, #16]
 800705a:	e043      	b.n	80070e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	015a      	lsls	r2, r3, #5
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	4413      	add	r3, r2
 8007064:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800706e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007072:	d118      	bne.n	80070a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d10a      	bne.n	8007090 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	015a      	lsls	r2, r3, #5
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4413      	add	r3, r2
 8007082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007086:	461a      	mov	r2, r3
 8007088:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800708c:	6013      	str	r3, [r2, #0]
 800708e:	e013      	b.n	80070b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	461a      	mov	r2, r3
 800709e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070a2:	6013      	str	r3, [r2, #0]
 80070a4:	e008      	b.n	80070b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	015a      	lsls	r2, r3, #5
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070b2:	461a      	mov	r2, r3
 80070b4:	2300      	movs	r3, #0
 80070b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070b8:	693b      	ldr	r3, [r7, #16]
 80070ba:	015a      	lsls	r2, r3, #5
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	4413      	add	r3, r2
 80070c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c4:	461a      	mov	r2, r3
 80070c6:	2300      	movs	r3, #0
 80070c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	015a      	lsls	r2, r3, #5
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	4413      	add	r3, r2
 80070d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d6:	461a      	mov	r2, r3
 80070d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	3301      	adds	r3, #1
 80070e2:	613b      	str	r3, [r7, #16]
 80070e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e6:	693a      	ldr	r2, [r7, #16]
 80070e8:	429a      	cmp	r2, r3
 80070ea:	d3b7      	bcc.n	800705c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2200      	movs	r2, #0
 8007104:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800710c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800710e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007110:	2b00      	cmp	r3, #0
 8007112:	d105      	bne.n	8007120 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	f043 0210 	orr.w	r2, r3, #16
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	699a      	ldr	r2, [r3, #24]
 8007124:	4b0f      	ldr	r3, [pc, #60]	; (8007164 <USB_DevInit+0x2c4>)
 8007126:	4313      	orrs	r3, r2
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800712c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800712e:	2b00      	cmp	r3, #0
 8007130:	d005      	beq.n	800713e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	699b      	ldr	r3, [r3, #24]
 8007136:	f043 0208 	orr.w	r2, r3, #8
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800713e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007140:	2b01      	cmp	r3, #1
 8007142:	d107      	bne.n	8007154 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	699b      	ldr	r3, [r3, #24]
 8007148:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800714c:	f043 0304 	orr.w	r3, r3, #4
 8007150:	687a      	ldr	r2, [r7, #4]
 8007152:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007154:	7dfb      	ldrb	r3, [r7, #23]
}
 8007156:	4618      	mov	r0, r3
 8007158:	3718      	adds	r7, #24
 800715a:	46bd      	mov	sp, r7
 800715c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007160:	b004      	add	sp, #16
 8007162:	4770      	bx	lr
 8007164:	803c3800 	.word	0x803c3800

08007168 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007168:	b480      	push	{r7}
 800716a:	b085      	sub	sp, #20
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
 8007170:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8007172:	2300      	movs	r3, #0
 8007174:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	019b      	lsls	r3, r3, #6
 800717a:	f043 0220 	orr.w	r2, r3, #32
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	3301      	adds	r3, #1
 8007186:	60fb      	str	r3, [r7, #12]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4a09      	ldr	r2, [pc, #36]	; (80071b0 <USB_FlushTxFifo+0x48>)
 800718c:	4293      	cmp	r3, r2
 800718e:	d901      	bls.n	8007194 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e006      	b.n	80071a2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b20      	cmp	r3, #32
 800719e:	d0f0      	beq.n	8007182 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3714      	adds	r7, #20
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	00030d40 	.word	0x00030d40

080071b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b085      	sub	sp, #20
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80071bc:	2300      	movs	r3, #0
 80071be:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2210      	movs	r2, #16
 80071c4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	3301      	adds	r3, #1
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	4a09      	ldr	r2, [pc, #36]	; (80071f4 <USB_FlushRxFifo+0x40>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d901      	bls.n	80071d8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80071d4:	2303      	movs	r3, #3
 80071d6:	e006      	b.n	80071e6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	691b      	ldr	r3, [r3, #16]
 80071dc:	f003 0310 	and.w	r3, r3, #16
 80071e0:	2b10      	cmp	r3, #16
 80071e2:	d0f0      	beq.n	80071c6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3714      	adds	r7, #20
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	00030d40 	.word	0x00030d40

080071f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	460b      	mov	r3, r1
 8007202:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	78fb      	ldrb	r3, [r7, #3]
 8007212:	68f9      	ldr	r1, [r7, #12]
 8007214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007218:	4313      	orrs	r3, r2
 800721a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	3714      	adds	r7, #20
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800722a:	b480      	push	{r7}
 800722c:	b087      	sub	sp, #28
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 0306 	and.w	r3, r3, #6
 8007242:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d102      	bne.n	8007250 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]
 800724e:	e00a      	b.n	8007266 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2b02      	cmp	r3, #2
 8007254:	d002      	beq.n	800725c <USB_GetDevSpeed+0x32>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b06      	cmp	r3, #6
 800725a:	d102      	bne.n	8007262 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800725c:	2302      	movs	r3, #2
 800725e:	75fb      	strb	r3, [r7, #23]
 8007260:	e001      	b.n	8007266 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007262:	230f      	movs	r3, #15
 8007264:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
}
 8007268:	4618      	mov	r0, r3
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007274:	b480      	push	{r7}
 8007276:	b085      	sub	sp, #20
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	785b      	ldrb	r3, [r3, #1]
 800728c:	2b01      	cmp	r3, #1
 800728e:	d13a      	bne.n	8007306 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	69da      	ldr	r2, [r3, #28]
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	781b      	ldrb	r3, [r3, #0]
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	2101      	movs	r1, #1
 80072a2:	fa01 f303 	lsl.w	r3, r1, r3
 80072a6:	b29b      	uxth	r3, r3
 80072a8:	68f9      	ldr	r1, [r7, #12]
 80072aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072ae:	4313      	orrs	r3, r2
 80072b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d155      	bne.n	8007374 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	015a      	lsls	r2, r3, #5
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	4413      	add	r3, r2
 80072d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	78db      	ldrb	r3, [r3, #3]
 80072e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	059b      	lsls	r3, r3, #22
 80072ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80072ec:	4313      	orrs	r3, r2
 80072ee:	68ba      	ldr	r2, [r7, #8]
 80072f0:	0151      	lsls	r1, r2, #5
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	440a      	add	r2, r1
 80072f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	e036      	b.n	8007374 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800730c:	69da      	ldr	r2, [r3, #28]
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	f003 030f 	and.w	r3, r3, #15
 8007316:	2101      	movs	r1, #1
 8007318:	fa01 f303 	lsl.w	r3, r1, r3
 800731c:	041b      	lsls	r3, r3, #16
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007324:	4313      	orrs	r3, r2
 8007326:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	4413      	add	r3, r2
 8007330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d11a      	bne.n	8007374 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	015a      	lsls	r2, r3, #5
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	4413      	add	r3, r2
 8007346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	78db      	ldrb	r3, [r3, #3]
 8007358:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800735a:	430b      	orrs	r3, r1
 800735c:	4313      	orrs	r3, r2
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	0151      	lsls	r1, r2, #5
 8007362:	68fa      	ldr	r2, [r7, #12]
 8007364:	440a      	add	r2, r1
 8007366:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800736a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800736e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007372:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007384:	b480      	push	{r7}
 8007386:	b085      	sub	sp, #20
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	785b      	ldrb	r3, [r3, #1]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d161      	bne.n	8007464 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	015a      	lsls	r2, r3, #5
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	4413      	add	r3, r2
 80073a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80073b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80073b6:	d11f      	bne.n	80073f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	015a      	lsls	r2, r3, #5
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	4413      	add	r3, r2
 80073c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	0151      	lsls	r1, r2, #5
 80073ca:	68fa      	ldr	r2, [r7, #12]
 80073cc:	440a      	add	r2, r1
 80073ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	015a      	lsls	r2, r3, #5
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	4413      	add	r3, r2
 80073e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	68ba      	ldr	r2, [r7, #8]
 80073e8:	0151      	lsls	r1, r2, #5
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	440a      	add	r2, r1
 80073ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80073f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	781b      	ldrb	r3, [r3, #0]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	2101      	movs	r1, #1
 800740a:	fa01 f303 	lsl.w	r3, r1, r3
 800740e:	b29b      	uxth	r3, r3
 8007410:	43db      	mvns	r3, r3
 8007412:	68f9      	ldr	r1, [r7, #12]
 8007414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007418:	4013      	ands	r3, r2
 800741a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	f003 030f 	and.w	r3, r3, #15
 800742c:	2101      	movs	r1, #1
 800742e:	fa01 f303 	lsl.w	r3, r1, r3
 8007432:	b29b      	uxth	r3, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743c:	4013      	ands	r3, r2
 800743e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	015a      	lsls	r2, r3, #5
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4413      	add	r3, r2
 8007448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800744c:	681a      	ldr	r2, [r3, #0]
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	0159      	lsls	r1, r3, #5
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	440b      	add	r3, r1
 8007456:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800745a:	4619      	mov	r1, r3
 800745c:	4b35      	ldr	r3, [pc, #212]	; (8007534 <USB_DeactivateEndpoint+0x1b0>)
 800745e:	4013      	ands	r3, r2
 8007460:	600b      	str	r3, [r1, #0]
 8007462:	e060      	b.n	8007526 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007476:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800747a:	d11f      	bne.n	80074bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	68ba      	ldr	r2, [r7, #8]
 800748c:	0151      	lsls	r1, r2, #5
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	440a      	add	r2, r1
 8007492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007496:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800749a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	0151      	lsls	r1, r2, #5
 80074ae:	68fa      	ldr	r2, [r7, #12]
 80074b0:	440a      	add	r2, r1
 80074b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80074ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f003 030f 	and.w	r3, r3, #15
 80074cc:	2101      	movs	r1, #1
 80074ce:	fa01 f303 	lsl.w	r3, r1, r3
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	43db      	mvns	r3, r3
 80074d6:	68f9      	ldr	r1, [r7, #12]
 80074d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074dc:	4013      	ands	r3, r2
 80074de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074e6:	69da      	ldr	r2, [r3, #28]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	f003 030f 	and.w	r3, r3, #15
 80074f0:	2101      	movs	r1, #1
 80074f2:	fa01 f303 	lsl.w	r3, r1, r3
 80074f6:	041b      	lsls	r3, r3, #16
 80074f8:	43db      	mvns	r3, r3
 80074fa:	68f9      	ldr	r1, [r7, #12]
 80074fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007500:	4013      	ands	r3, r2
 8007502:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	68bb      	ldr	r3, [r7, #8]
 8007514:	0159      	lsls	r1, r3, #5
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	440b      	add	r3, r1
 800751a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751e:	4619      	mov	r1, r3
 8007520:	4b05      	ldr	r3, [pc, #20]	; (8007538 <USB_DeactivateEndpoint+0x1b4>)
 8007522:	4013      	ands	r3, r2
 8007524:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr
 8007534:	ec337800 	.word	0xec337800
 8007538:	eff37800 	.word	0xeff37800

0800753c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b08a      	sub	sp, #40	; 0x28
 8007540:	af02      	add	r7, sp, #8
 8007542:	60f8      	str	r0, [r7, #12]
 8007544:	60b9      	str	r1, [r7, #8]
 8007546:	4613      	mov	r3, r2
 8007548:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	781b      	ldrb	r3, [r3, #0]
 8007552:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	785b      	ldrb	r3, [r3, #1]
 8007558:	2b01      	cmp	r3, #1
 800755a:	f040 815c 	bne.w	8007816 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d132      	bne.n	80075cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	69fb      	ldr	r3, [r7, #28]
 800756c:	4413      	add	r3, r2
 800756e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	0151      	lsls	r1, r2, #5
 8007578:	69fa      	ldr	r2, [r7, #28]
 800757a:	440a      	add	r2, r1
 800757c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007580:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007584:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007588:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	015a      	lsls	r2, r3, #5
 800758e:	69fb      	ldr	r3, [r7, #28]
 8007590:	4413      	add	r3, r2
 8007592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	0151      	lsls	r1, r2, #5
 800759c:	69fa      	ldr	r2, [r7, #28]
 800759e:	440a      	add	r2, r1
 80075a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	015a      	lsls	r2, r3, #5
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	4413      	add	r3, r2
 80075b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075b6:	691b      	ldr	r3, [r3, #16]
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	0151      	lsls	r1, r2, #5
 80075bc:	69fa      	ldr	r2, [r7, #28]
 80075be:	440a      	add	r2, r1
 80075c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075c4:	0cdb      	lsrs	r3, r3, #19
 80075c6:	04db      	lsls	r3, r3, #19
 80075c8:	6113      	str	r3, [r2, #16]
 80075ca:	e074      	b.n	80076b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80075cc:	69bb      	ldr	r3, [r7, #24]
 80075ce:	015a      	lsls	r2, r3, #5
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4413      	add	r3, r2
 80075d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d8:	691b      	ldr	r3, [r3, #16]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	0151      	lsls	r1, r2, #5
 80075de:	69fa      	ldr	r2, [r7, #28]
 80075e0:	440a      	add	r2, r1
 80075e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075e6:	0cdb      	lsrs	r3, r3, #19
 80075e8:	04db      	lsls	r3, r3, #19
 80075ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075ec:	69bb      	ldr	r3, [r7, #24]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	69fb      	ldr	r3, [r7, #28]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	0151      	lsls	r1, r2, #5
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	440a      	add	r2, r1
 8007602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007606:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800760a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800760e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	015a      	lsls	r2, r3, #5
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	4413      	add	r3, r2
 8007618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800761c:	691a      	ldr	r2, [r3, #16]
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	6959      	ldr	r1, [r3, #20]
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	440b      	add	r3, r1
 8007628:	1e59      	subs	r1, r3, #1
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007632:	04d9      	lsls	r1, r3, #19
 8007634:	4b9d      	ldr	r3, [pc, #628]	; (80078ac <USB_EPStartXfer+0x370>)
 8007636:	400b      	ands	r3, r1
 8007638:	69b9      	ldr	r1, [r7, #24]
 800763a:	0148      	lsls	r0, r1, #5
 800763c:	69f9      	ldr	r1, [r7, #28]
 800763e:	4401      	add	r1, r0
 8007640:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007644:	4313      	orrs	r3, r2
 8007646:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007648:	69bb      	ldr	r3, [r7, #24]
 800764a:	015a      	lsls	r2, r3, #5
 800764c:	69fb      	ldr	r3, [r7, #28]
 800764e:	4413      	add	r3, r2
 8007650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007654:	691a      	ldr	r2, [r3, #16]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800765e:	69b9      	ldr	r1, [r7, #24]
 8007660:	0148      	lsls	r0, r1, #5
 8007662:	69f9      	ldr	r1, [r7, #28]
 8007664:	4401      	add	r1, r0
 8007666:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800766a:	4313      	orrs	r3, r2
 800766c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	78db      	ldrb	r3, [r3, #3]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d11f      	bne.n	80076b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007676:	69bb      	ldr	r3, [r7, #24]
 8007678:	015a      	lsls	r2, r3, #5
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	4413      	add	r3, r2
 800767e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	0151      	lsls	r1, r2, #5
 8007688:	69fa      	ldr	r2, [r7, #28]
 800768a:	440a      	add	r2, r1
 800768c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007690:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007694:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	015a      	lsls	r2, r3, #5
 800769a:	69fb      	ldr	r3, [r7, #28]
 800769c:	4413      	add	r3, r2
 800769e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	0151      	lsls	r1, r2, #5
 80076a8:	69fa      	ldr	r2, [r7, #28]
 80076aa:	440a      	add	r2, r1
 80076ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80076b6:	79fb      	ldrb	r3, [r7, #7]
 80076b8:	2b01      	cmp	r3, #1
 80076ba:	d14b      	bne.n	8007754 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d009      	beq.n	80076d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80076c4:	69bb      	ldr	r3, [r7, #24]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d0:	461a      	mov	r2, r3
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	78db      	ldrb	r3, [r3, #3]
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d128      	bne.n	8007732 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d110      	bne.n	8007712 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	69ba      	ldr	r2, [r7, #24]
 8007700:	0151      	lsls	r1, r2, #5
 8007702:	69fa      	ldr	r2, [r7, #28]
 8007704:	440a      	add	r2, r1
 8007706:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	e00f      	b.n	8007732 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007712:	69bb      	ldr	r3, [r7, #24]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69fb      	ldr	r3, [r7, #28]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	69ba      	ldr	r2, [r7, #24]
 8007722:	0151      	lsls	r1, r2, #5
 8007724:	69fa      	ldr	r2, [r7, #28]
 8007726:	440a      	add	r2, r1
 8007728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007730:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007732:	69bb      	ldr	r3, [r7, #24]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	0151      	lsls	r1, r2, #5
 8007744:	69fa      	ldr	r2, [r7, #28]
 8007746:	440a      	add	r2, r1
 8007748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007750:	6013      	str	r3, [r2, #0]
 8007752:	e12f      	b.n	80079b4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	69ba      	ldr	r2, [r7, #24]
 8007764:	0151      	lsls	r1, r2, #5
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	440a      	add	r2, r1
 800776a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800776e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007772:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	78db      	ldrb	r3, [r3, #3]
 8007778:	2b01      	cmp	r3, #1
 800777a:	d015      	beq.n	80077a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	f000 8117 	beq.w	80079b4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800778c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	f003 030f 	and.w	r3, r3, #15
 8007796:	2101      	movs	r1, #1
 8007798:	fa01 f303 	lsl.w	r3, r1, r3
 800779c:	69f9      	ldr	r1, [r7, #28]
 800779e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077a2:	4313      	orrs	r3, r2
 80077a4:	634b      	str	r3, [r1, #52]	; 0x34
 80077a6:	e105      	b.n	80079b4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d110      	bne.n	80077da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69ba      	ldr	r2, [r7, #24]
 80077c8:	0151      	lsls	r1, r2, #5
 80077ca:	69fa      	ldr	r2, [r7, #28]
 80077cc:	440a      	add	r2, r1
 80077ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80077d6:	6013      	str	r3, [r2, #0]
 80077d8:	e00f      	b.n	80077fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80077da:	69bb      	ldr	r3, [r7, #24]
 80077dc:	015a      	lsls	r2, r3, #5
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	4413      	add	r3, r2
 80077e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	0151      	lsls	r1, r2, #5
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	440a      	add	r2, r1
 80077f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	68d9      	ldr	r1, [r3, #12]
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	781a      	ldrb	r2, [r3, #0]
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	695b      	ldr	r3, [r3, #20]
 8007806:	b298      	uxth	r0, r3
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	9300      	str	r3, [sp, #0]
 800780c:	4603      	mov	r3, r0
 800780e:	68f8      	ldr	r0, [r7, #12]
 8007810:	f000 fa2b 	bl	8007c6a <USB_WritePacket>
 8007814:	e0ce      	b.n	80079b4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	69fb      	ldr	r3, [r7, #28]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007822:	691b      	ldr	r3, [r3, #16]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	0151      	lsls	r1, r2, #5
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	440a      	add	r2, r1
 800782c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007830:	0cdb      	lsrs	r3, r3, #19
 8007832:	04db      	lsls	r3, r3, #19
 8007834:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	015a      	lsls	r2, r3, #5
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	4413      	add	r3, r2
 800783e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007842:	691b      	ldr	r3, [r3, #16]
 8007844:	69ba      	ldr	r2, [r7, #24]
 8007846:	0151      	lsls	r1, r2, #5
 8007848:	69fa      	ldr	r2, [r7, #28]
 800784a:	440a      	add	r2, r1
 800784c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007850:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007854:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007858:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	695b      	ldr	r3, [r3, #20]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d126      	bne.n	80078b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	69fb      	ldr	r3, [r7, #28]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786e:	691a      	ldr	r2, [r3, #16]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007878:	69b9      	ldr	r1, [r7, #24]
 800787a:	0148      	lsls	r0, r1, #5
 800787c:	69f9      	ldr	r1, [r7, #28]
 800787e:	4401      	add	r1, r0
 8007880:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007884:	4313      	orrs	r3, r2
 8007886:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007888:	69bb      	ldr	r3, [r7, #24]
 800788a:	015a      	lsls	r2, r3, #5
 800788c:	69fb      	ldr	r3, [r7, #28]
 800788e:	4413      	add	r3, r2
 8007890:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007894:	691b      	ldr	r3, [r3, #16]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	0151      	lsls	r1, r2, #5
 800789a:	69fa      	ldr	r2, [r7, #28]
 800789c:	440a      	add	r2, r1
 800789e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078a6:	6113      	str	r3, [r2, #16]
 80078a8:	e036      	b.n	8007918 <USB_EPStartXfer+0x3dc>
 80078aa:	bf00      	nop
 80078ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80078b0:	68bb      	ldr	r3, [r7, #8]
 80078b2:	695a      	ldr	r2, [r3, #20]
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	689b      	ldr	r3, [r3, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	1e5a      	subs	r2, r3, #1
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80078c4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	69fb      	ldr	r3, [r7, #28]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078d2:	691a      	ldr	r2, [r3, #16]
 80078d4:	8afb      	ldrh	r3, [r7, #22]
 80078d6:	04d9      	lsls	r1, r3, #19
 80078d8:	4b39      	ldr	r3, [pc, #228]	; (80079c0 <USB_EPStartXfer+0x484>)
 80078da:	400b      	ands	r3, r1
 80078dc:	69b9      	ldr	r1, [r7, #24]
 80078de:	0148      	lsls	r0, r1, #5
 80078e0:	69f9      	ldr	r1, [r7, #28]
 80078e2:	4401      	add	r1, r0
 80078e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078e8:	4313      	orrs	r3, r2
 80078ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80078ec:	69bb      	ldr	r3, [r7, #24]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	69fb      	ldr	r3, [r7, #28]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	691a      	ldr	r2, [r3, #16]
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	689b      	ldr	r3, [r3, #8]
 80078fe:	8af9      	ldrh	r1, [r7, #22]
 8007900:	fb01 f303 	mul.w	r3, r1, r3
 8007904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007908:	69b9      	ldr	r1, [r7, #24]
 800790a:	0148      	lsls	r0, r1, #5
 800790c:	69f9      	ldr	r1, [r7, #28]
 800790e:	4401      	add	r1, r0
 8007910:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007914:	4313      	orrs	r3, r2
 8007916:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d10d      	bne.n	800793a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d009      	beq.n	800793a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	68d9      	ldr	r1, [r3, #12]
 800792a:	69bb      	ldr	r3, [r7, #24]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	69fb      	ldr	r3, [r7, #28]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007936:	460a      	mov	r2, r1
 8007938:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	78db      	ldrb	r3, [r3, #3]
 800793e:	2b01      	cmp	r3, #1
 8007940:	d128      	bne.n	8007994 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007948:	689b      	ldr	r3, [r3, #8]
 800794a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800794e:	2b00      	cmp	r3, #0
 8007950:	d110      	bne.n	8007974 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	69ba      	ldr	r2, [r7, #24]
 8007962:	0151      	lsls	r1, r2, #5
 8007964:	69fa      	ldr	r2, [r7, #28]
 8007966:	440a      	add	r2, r1
 8007968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800796c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007970:	6013      	str	r3, [r2, #0]
 8007972:	e00f      	b.n	8007994 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	015a      	lsls	r2, r3, #5
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	4413      	add	r3, r2
 800797c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	69ba      	ldr	r2, [r7, #24]
 8007984:	0151      	lsls	r1, r2, #5
 8007986:	69fa      	ldr	r2, [r7, #28]
 8007988:	440a      	add	r2, r1
 800798a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800798e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007992:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007994:	69bb      	ldr	r3, [r7, #24]
 8007996:	015a      	lsls	r2, r3, #5
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	4413      	add	r3, r2
 800799c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	69ba      	ldr	r2, [r7, #24]
 80079a4:	0151      	lsls	r1, r2, #5
 80079a6:	69fa      	ldr	r2, [r7, #28]
 80079a8:	440a      	add	r2, r1
 80079aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80079b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3720      	adds	r7, #32
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	1ff80000 	.word	0x1ff80000

080079c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	4613      	mov	r3, r2
 80079d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	785b      	ldrb	r3, [r3, #1]
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	f040 80cd 	bne.w	8007b80 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80079e6:	68bb      	ldr	r3, [r7, #8]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d132      	bne.n	8007a54 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	015a      	lsls	r2, r3, #5
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	4413      	add	r3, r2
 80079f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079fa:	691b      	ldr	r3, [r3, #16]
 80079fc:	693a      	ldr	r2, [r7, #16]
 80079fe:	0151      	lsls	r1, r2, #5
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	440a      	add	r2, r1
 8007a04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a08:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a0c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	015a      	lsls	r2, r3, #5
 8007a16:	697b      	ldr	r3, [r7, #20]
 8007a18:	4413      	add	r3, r2
 8007a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a1e:	691b      	ldr	r3, [r3, #16]
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	0151      	lsls	r1, r2, #5
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	440a      	add	r2, r1
 8007a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a30:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	015a      	lsls	r2, r3, #5
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	4413      	add	r3, r2
 8007a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	693a      	ldr	r2, [r7, #16]
 8007a42:	0151      	lsls	r1, r2, #5
 8007a44:	697a      	ldr	r2, [r7, #20]
 8007a46:	440a      	add	r2, r1
 8007a48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a4c:	0cdb      	lsrs	r3, r3, #19
 8007a4e:	04db      	lsls	r3, r3, #19
 8007a50:	6113      	str	r3, [r2, #16]
 8007a52:	e04e      	b.n	8007af2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a60:	691b      	ldr	r3, [r3, #16]
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	0151      	lsls	r1, r2, #5
 8007a66:	697a      	ldr	r2, [r7, #20]
 8007a68:	440a      	add	r2, r1
 8007a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a6e:	0cdb      	lsrs	r3, r3, #19
 8007a70:	04db      	lsls	r3, r3, #19
 8007a72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a74:	693b      	ldr	r3, [r7, #16]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	697b      	ldr	r3, [r7, #20]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	693a      	ldr	r2, [r7, #16]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	697a      	ldr	r2, [r7, #20]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a92:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a96:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	695a      	ldr	r2, [r3, #20]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d903      	bls.n	8007aac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	697b      	ldr	r3, [r7, #20]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	0151      	lsls	r1, r2, #5
 8007abe:	697a      	ldr	r2, [r7, #20]
 8007ac0:	440a      	add	r2, r1
 8007ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007acc:	693b      	ldr	r3, [r7, #16]
 8007ace:	015a      	lsls	r2, r3, #5
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ae2:	6939      	ldr	r1, [r7, #16]
 8007ae4:	0148      	lsls	r0, r1, #5
 8007ae6:	6979      	ldr	r1, [r7, #20]
 8007ae8:	4401      	add	r1, r0
 8007aea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007aee:	4313      	orrs	r3, r2
 8007af0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007af2:	79fb      	ldrb	r3, [r7, #7]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d11e      	bne.n	8007b36 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	691b      	ldr	r3, [r3, #16]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d009      	beq.n	8007b14 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	015a      	lsls	r2, r3, #5
 8007b04:	697b      	ldr	r3, [r7, #20]
 8007b06:	4413      	add	r3, r2
 8007b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	691b      	ldr	r3, [r3, #16]
 8007b12:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b14:	693b      	ldr	r3, [r7, #16]
 8007b16:	015a      	lsls	r2, r3, #5
 8007b18:	697b      	ldr	r3, [r7, #20]
 8007b1a:	4413      	add	r3, r2
 8007b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	693a      	ldr	r2, [r7, #16]
 8007b24:	0151      	lsls	r1, r2, #5
 8007b26:	697a      	ldr	r2, [r7, #20]
 8007b28:	440a      	add	r2, r1
 8007b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b32:	6013      	str	r3, [r2, #0]
 8007b34:	e092      	b.n	8007c5c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	015a      	lsls	r2, r3, #5
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	4413      	add	r3, r2
 8007b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	693a      	ldr	r2, [r7, #16]
 8007b46:	0151      	lsls	r1, r2, #5
 8007b48:	697a      	ldr	r2, [r7, #20]
 8007b4a:	440a      	add	r2, r1
 8007b4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b50:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b54:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007b56:	68bb      	ldr	r3, [r7, #8]
 8007b58:	695b      	ldr	r3, [r3, #20]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d07e      	beq.n	8007c5c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	781b      	ldrb	r3, [r3, #0]
 8007b6a:	f003 030f 	and.w	r3, r3, #15
 8007b6e:	2101      	movs	r1, #1
 8007b70:	fa01 f303 	lsl.w	r3, r1, r3
 8007b74:	6979      	ldr	r1, [r7, #20]
 8007b76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	634b      	str	r3, [r1, #52]	; 0x34
 8007b7e:	e06d      	b.n	8007c5c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8c:	691b      	ldr	r3, [r3, #16]
 8007b8e:	693a      	ldr	r2, [r7, #16]
 8007b90:	0151      	lsls	r1, r2, #5
 8007b92:	697a      	ldr	r2, [r7, #20]
 8007b94:	440a      	add	r2, r1
 8007b96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b9a:	0cdb      	lsrs	r3, r3, #19
 8007b9c:	04db      	lsls	r3, r3, #19
 8007b9e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	697b      	ldr	r3, [r7, #20]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	693a      	ldr	r2, [r7, #16]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	697a      	ldr	r2, [r7, #20]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007bbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007bc2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d003      	beq.n	8007bd4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	689a      	ldr	r2, [r3, #8]
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	015a      	lsls	r2, r3, #5
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	4413      	add	r3, r2
 8007bdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	0151      	lsls	r1, r2, #5
 8007be6:	697a      	ldr	r2, [r7, #20]
 8007be8:	440a      	add	r2, r1
 8007bea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bee:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bf2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	697b      	ldr	r3, [r7, #20]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c00:	691a      	ldr	r2, [r3, #16]
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c0a:	6939      	ldr	r1, [r7, #16]
 8007c0c:	0148      	lsls	r0, r1, #5
 8007c0e:	6979      	ldr	r1, [r7, #20]
 8007c10:	4401      	add	r1, r0
 8007c12:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c16:	4313      	orrs	r3, r2
 8007c18:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c1a:	79fb      	ldrb	r3, [r7, #7]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d10d      	bne.n	8007c3c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d009      	beq.n	8007c3c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	68d9      	ldr	r1, [r3, #12]
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	015a      	lsls	r2, r3, #5
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	4413      	add	r3, r2
 8007c34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c38:	460a      	mov	r2, r1
 8007c3a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007c3c:	693b      	ldr	r3, [r7, #16]
 8007c3e:	015a      	lsls	r2, r3, #5
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	4413      	add	r3, r2
 8007c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	693a      	ldr	r2, [r7, #16]
 8007c4c:	0151      	lsls	r1, r2, #5
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	440a      	add	r2, r1
 8007c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c56:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007c5a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007c5c:	2300      	movs	r3, #0
}
 8007c5e:	4618      	mov	r0, r3
 8007c60:	371c      	adds	r7, #28
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr

08007c6a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007c6a:	b480      	push	{r7}
 8007c6c:	b089      	sub	sp, #36	; 0x24
 8007c6e:	af00      	add	r7, sp, #0
 8007c70:	60f8      	str	r0, [r7, #12]
 8007c72:	60b9      	str	r1, [r7, #8]
 8007c74:	4611      	mov	r1, r2
 8007c76:	461a      	mov	r2, r3
 8007c78:	460b      	mov	r3, r1
 8007c7a:	71fb      	strb	r3, [r7, #7]
 8007c7c:	4613      	mov	r3, r2
 8007c7e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007c88:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d11a      	bne.n	8007cc6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007c90:	88bb      	ldrh	r3, [r7, #4]
 8007c92:	3303      	adds	r3, #3
 8007c94:	089b      	lsrs	r3, r3, #2
 8007c96:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007c98:	2300      	movs	r3, #0
 8007c9a:	61bb      	str	r3, [r7, #24]
 8007c9c:	e00f      	b.n	8007cbe <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007c9e:	79fb      	ldrb	r3, [r7, #7]
 8007ca0:	031a      	lsls	r2, r3, #12
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007caa:	461a      	mov	r2, r3
 8007cac:	69fb      	ldr	r3, [r7, #28]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	3304      	adds	r3, #4
 8007cb6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007cb8:	69bb      	ldr	r3, [r7, #24]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	61bb      	str	r3, [r7, #24]
 8007cbe:	69ba      	ldr	r2, [r7, #24]
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d3eb      	bcc.n	8007c9e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3724      	adds	r7, #36	; 0x24
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b089      	sub	sp, #36	; 0x24
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	4613      	mov	r3, r2
 8007ce0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8007cea:	88fb      	ldrh	r3, [r7, #6]
 8007cec:	3303      	adds	r3, #3
 8007cee:	089b      	lsrs	r3, r3, #2
 8007cf0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	61bb      	str	r3, [r7, #24]
 8007cf6:	e00b      	b.n	8007d10 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	601a      	str	r2, [r3, #0]
    pDest++;
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	3304      	adds	r3, #4
 8007d08:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	3301      	adds	r3, #1
 8007d0e:	61bb      	str	r3, [r7, #24]
 8007d10:	69ba      	ldr	r2, [r7, #24]
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d3ef      	bcc.n	8007cf8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007d18:	69fb      	ldr	r3, [r7, #28]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3724      	adds	r7, #36	; 0x24
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b085      	sub	sp, #20
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]
 8007d2e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007d3a:	683b      	ldr	r3, [r7, #0]
 8007d3c:	785b      	ldrb	r3, [r3, #1]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d12c      	bne.n	8007d9c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	db12      	blt.n	8007d7a <USB_EPSetStall+0x54>
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d00f      	beq.n	8007d7a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	015a      	lsls	r2, r3, #5
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	4413      	add	r3, r2
 8007d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	68ba      	ldr	r2, [r7, #8]
 8007d6a:	0151      	lsls	r1, r2, #5
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	440a      	add	r2, r1
 8007d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d74:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007d78:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	0151      	lsls	r1, r2, #5
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	440a      	add	r2, r1
 8007d90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d94:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007d98:	6013      	str	r3, [r2, #0]
 8007d9a:	e02b      	b.n	8007df4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	015a      	lsls	r2, r3, #5
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	4413      	add	r3, r2
 8007da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	db12      	blt.n	8007dd4 <USB_EPSetStall+0xae>
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00f      	beq.n	8007dd4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	68ba      	ldr	r2, [r7, #8]
 8007dc4:	0151      	lsls	r1, r2, #5
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	440a      	add	r2, r1
 8007dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007dd2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007dd4:	68bb      	ldr	r3, [r7, #8]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007e02:	b480      	push	{r7}
 8007e04:	b085      	sub	sp, #20
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	6078      	str	r0, [r7, #4]
 8007e0a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007e16:	683b      	ldr	r3, [r7, #0]
 8007e18:	785b      	ldrb	r3, [r3, #1]
 8007e1a:	2b01      	cmp	r3, #1
 8007e1c:	d128      	bne.n	8007e70 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	015a      	lsls	r2, r3, #5
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4413      	add	r3, r2
 8007e26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	0151      	lsls	r1, r2, #5
 8007e30:	68fa      	ldr	r2, [r7, #12]
 8007e32:	440a      	add	r2, r1
 8007e34:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	78db      	ldrb	r3, [r3, #3]
 8007e42:	2b03      	cmp	r3, #3
 8007e44:	d003      	beq.n	8007e4e <USB_EPClearStall+0x4c>
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	78db      	ldrb	r3, [r3, #3]
 8007e4a:	2b02      	cmp	r3, #2
 8007e4c:	d138      	bne.n	8007ec0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	0151      	lsls	r1, r2, #5
 8007e60:	68fa      	ldr	r2, [r7, #12]
 8007e62:	440a      	add	r2, r1
 8007e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007e6c:	6013      	str	r3, [r2, #0]
 8007e6e:	e027      	b.n	8007ec0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	68ba      	ldr	r2, [r7, #8]
 8007e80:	0151      	lsls	r1, r2, #5
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	440a      	add	r2, r1
 8007e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e8a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007e8e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	78db      	ldrb	r3, [r3, #3]
 8007e94:	2b03      	cmp	r3, #3
 8007e96:	d003      	beq.n	8007ea0 <USB_EPClearStall+0x9e>
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	78db      	ldrb	r3, [r3, #3]
 8007e9c:	2b02      	cmp	r3, #2
 8007e9e:	d10f      	bne.n	8007ec0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	015a      	lsls	r2, r3, #5
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	4413      	add	r3, r2
 8007ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	0151      	lsls	r1, r2, #5
 8007eb2:	68fa      	ldr	r2, [r7, #12]
 8007eb4:	440a      	add	r2, r1
 8007eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ebe:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ec0:	2300      	movs	r3, #0
}
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	3714      	adds	r7, #20
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ecc:	4770      	bx	lr

08007ece <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b085      	sub	sp, #20
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	460b      	mov	r3, r1
 8007ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007eec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007ef0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	78fb      	ldrb	r3, [r7, #3]
 8007efc:	011b      	lsls	r3, r3, #4
 8007efe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007f02:	68f9      	ldr	r1, [r7, #12]
 8007f04:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007f0c:	2300      	movs	r3, #0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3714      	adds	r7, #20
 8007f12:	46bd      	mov	sp, r7
 8007f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f18:	4770      	bx	lr

08007f1a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f1a:	b480      	push	{r7}
 8007f1c:	b085      	sub	sp, #20
 8007f1e:	af00      	add	r7, sp, #0
 8007f20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f34:	f023 0303 	bic.w	r3, r3, #3
 8007f38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	68fa      	ldr	r2, [r7, #12]
 8007f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f48:	f023 0302 	bic.w	r3, r3, #2
 8007f4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f4e:	2300      	movs	r3, #0
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	b085      	sub	sp, #20
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	68fa      	ldr	r2, [r7, #12]
 8007f72:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007f76:	f023 0303 	bic.w	r3, r3, #3
 8007f7a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	68fa      	ldr	r2, [r7, #12]
 8007f86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f8a:	f043 0302 	orr.w	r3, r3, #2
 8007f8e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3714      	adds	r7, #20
 8007f96:	46bd      	mov	sp, r7
 8007f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9c:	4770      	bx	lr

08007f9e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007f9e:	b480      	push	{r7}
 8007fa0:	b085      	sub	sp, #20
 8007fa2:	af00      	add	r7, sp, #0
 8007fa4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	695b      	ldr	r3, [r3, #20]
 8007faa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699b      	ldr	r3, [r3, #24]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007fe0:	69db      	ldr	r3, [r3, #28]
 8007fe2:	68ba      	ldr	r2, [r7, #8]
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	0c1b      	lsrs	r3, r3, #16
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3714      	adds	r7, #20
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff6:	4770      	bx	lr

08007ff8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008014:	69db      	ldr	r3, [r3, #28]
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	4013      	ands	r3, r2
 800801a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	b29b      	uxth	r3, r3
}
 8008020:	4618      	mov	r0, r3
 8008022:	3714      	adds	r7, #20
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	015a      	lsls	r2, r3, #5
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	4413      	add	r3, r2
 8008044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008048:	689b      	ldr	r3, [r3, #8]
 800804a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008052:	695b      	ldr	r3, [r3, #20]
 8008054:	68ba      	ldr	r2, [r7, #8]
 8008056:	4013      	ands	r3, r2
 8008058:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800805a:	68bb      	ldr	r3, [r7, #8]
}
 800805c:	4618      	mov	r0, r3
 800805e:	3714      	adds	r7, #20
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008068:	b480      	push	{r7}
 800806a:	b087      	sub	sp, #28
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	460b      	mov	r3, r1
 8008072:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008088:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800808a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	f003 030f 	and.w	r3, r3, #15
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	fa22 f303 	lsr.w	r3, r2, r3
 8008098:	01db      	lsls	r3, r3, #7
 800809a:	b2db      	uxtb	r3, r3
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4313      	orrs	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80080a2:	78fb      	ldrb	r3, [r7, #3]
 80080a4:	015a      	lsls	r2, r3, #5
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	4413      	add	r3, r2
 80080aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080ae:	689b      	ldr	r3, [r3, #8]
 80080b0:	693a      	ldr	r2, [r7, #16]
 80080b2:	4013      	ands	r3, r2
 80080b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80080b6:	68bb      	ldr	r3, [r7, #8]
}
 80080b8:	4618      	mov	r0, r3
 80080ba:	371c      	adds	r7, #28
 80080bc:	46bd      	mov	sp, r7
 80080be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c2:	4770      	bx	lr

080080c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80080c4:	b480      	push	{r7}
 80080c6:	b083      	sub	sp, #12
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	695b      	ldr	r3, [r3, #20]
 80080d0:	f003 0301 	and.w	r3, r3, #1
}
 80080d4:	4618      	mov	r0, r3
 80080d6:	370c      	adds	r7, #12
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr

080080e0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80080e0:	b480      	push	{r7}
 80080e2:	b085      	sub	sp, #20
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	68fa      	ldr	r2, [r7, #12]
 80080f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80080fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80080fe:	f023 0307 	bic.w	r3, r3, #7
 8008102:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008116:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008118:	2300      	movs	r3, #0
}
 800811a:	4618      	mov	r0, r3
 800811c:	3714      	adds	r7, #20
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr
	...

08008128 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008128:	b480      	push	{r7}
 800812a:	b087      	sub	sp, #28
 800812c:	af00      	add	r7, sp, #0
 800812e:	60f8      	str	r0, [r7, #12]
 8008130:	460b      	mov	r3, r1
 8008132:	607a      	str	r2, [r7, #4]
 8008134:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	333c      	adds	r3, #60	; 0x3c
 800813e:	3304      	adds	r3, #4
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	4a26      	ldr	r2, [pc, #152]	; (80081e0 <USB_EP0_OutStart+0xb8>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d90a      	bls.n	8008162 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800815c:	d101      	bne.n	8008162 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800815e:	2300      	movs	r3, #0
 8008160:	e037      	b.n	80081d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008168:	461a      	mov	r2, r3
 800816a:	2300      	movs	r3, #0
 800816c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008174:	691b      	ldr	r3, [r3, #16]
 8008176:	697a      	ldr	r2, [r7, #20]
 8008178:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800817c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008180:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008188:	691b      	ldr	r3, [r3, #16]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008190:	f043 0318 	orr.w	r3, r3, #24
 8008194:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800819c:	691b      	ldr	r3, [r3, #16]
 800819e:	697a      	ldr	r2, [r7, #20]
 80081a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80081a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80081aa:	7afb      	ldrb	r3, [r7, #11]
 80081ac:	2b01      	cmp	r3, #1
 80081ae:	d10f      	bne.n	80081d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081b6:	461a      	mov	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80081ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	371c      	adds	r7, #28
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	4f54300a 	.word	0x4f54300a

080081e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	4a13      	ldr	r2, [pc, #76]	; (8008248 <USB_CoreReset+0x64>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d901      	bls.n	8008202 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80081fe:	2303      	movs	r3, #3
 8008200:	e01b      	b.n	800823a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	daf2      	bge.n	80081f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f043 0201 	orr.w	r2, r3, #1
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	4a09      	ldr	r2, [pc, #36]	; (8008248 <USB_CoreReset+0x64>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d901      	bls.n	800822c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008228:	2303      	movs	r3, #3
 800822a:	e006      	b.n	800823a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b01      	cmp	r3, #1
 8008236:	d0f0      	beq.n	800821a <USB_CoreReset+0x36>

  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop
 8008248:	00030d40 	.word	0x00030d40

0800824c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
 8008254:	460b      	mov	r3, r1
 8008256:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008258:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800825c:	f002 f8d6 	bl	800a40c <malloc>
 8008260:	4603      	mov	r3, r0
 8008262:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8008272:	2302      	movs	r3, #2
 8008274:	e066      	b.n	8008344 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	68fa      	ldr	r2, [r7, #12]
 800827a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	7c1b      	ldrb	r3, [r3, #16]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d119      	bne.n	80082ba <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008286:	f44f 7300 	mov.w	r3, #512	; 0x200
 800828a:	2202      	movs	r2, #2
 800828c:	2181      	movs	r1, #129	; 0x81
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f001 ff43 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2201      	movs	r2, #1
 8008298:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800829a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800829e:	2202      	movs	r2, #2
 80082a0:	2101      	movs	r1, #1
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f001 ff39 	bl	800a11a <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2210      	movs	r2, #16
 80082b4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80082b8:	e016      	b.n	80082e8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80082ba:	2340      	movs	r3, #64	; 0x40
 80082bc:	2202      	movs	r2, #2
 80082be:	2181      	movs	r1, #129	; 0x81
 80082c0:	6878      	ldr	r0, [r7, #4]
 80082c2:	f001 ff2a 	bl	800a11a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80082cc:	2340      	movs	r3, #64	; 0x40
 80082ce:	2202      	movs	r2, #2
 80082d0:	2101      	movs	r1, #1
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 ff21 	bl	800a11a <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2210      	movs	r2, #16
 80082e4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80082e8:	2308      	movs	r3, #8
 80082ea:	2203      	movs	r2, #3
 80082ec:	2182      	movs	r1, #130	; 0x82
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f001 ff13 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2201      	movs	r2, #1
 80082f8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	2200      	movs	r2, #0
 8008312:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	7c1b      	ldrb	r3, [r3, #16]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008324:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008328:	2101      	movs	r1, #1
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f001 ffe4 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8008330:	e007      	b.n	8008342 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008338:	2340      	movs	r3, #64	; 0x40
 800833a:	2101      	movs	r1, #1
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f001 ffdb 	bl	800a2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	460b      	mov	r3, r1
 8008356:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800835c:	2181      	movs	r1, #129	; 0x81
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f001 ff01 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800836a:	2101      	movs	r1, #1
 800836c:	6878      	ldr	r0, [r7, #4]
 800836e:	f001 fefa 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800837a:	2182      	movs	r1, #130	; 0x82
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 fef2 	bl	800a166 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008398:	2b00      	cmp	r3, #0
 800839a:	d00e      	beq.n	80083ba <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083ac:	4618      	mov	r0, r3
 80083ae:	f002 f835 	bl	800a41c <free>
    pdev->pClassData = NULL;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80083ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3710      	adds	r7, #16
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}

080083c4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
 80083cc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80083d4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80083d6:	2300      	movs	r3, #0
 80083d8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80083da:	2300      	movs	r3, #0
 80083dc:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80083de:	2300      	movs	r3, #0
 80083e0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d03a      	beq.n	8008464 <USBD_CDC_Setup+0xa0>
 80083ee:	2b20      	cmp	r3, #32
 80083f0:	f040 8097 	bne.w	8008522 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	88db      	ldrh	r3, [r3, #6]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d029      	beq.n	8008450 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	781b      	ldrb	r3, [r3, #0]
 8008400:	b25b      	sxtb	r3, r3
 8008402:	2b00      	cmp	r3, #0
 8008404:	da11      	bge.n	800842a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8008412:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008414:	683a      	ldr	r2, [r7, #0]
 8008416:	88d2      	ldrh	r2, [r2, #6]
 8008418:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800841a:	6939      	ldr	r1, [r7, #16]
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	88db      	ldrh	r3, [r3, #6]
 8008420:	461a      	mov	r2, r3
 8008422:	6878      	ldr	r0, [r7, #4]
 8008424:	f001 fa6d 	bl	8009902 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8008428:	e082      	b.n	8008530 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800842a:	683b      	ldr	r3, [r7, #0]
 800842c:	785a      	ldrb	r2, [r3, #1]
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	88db      	ldrh	r3, [r3, #6]
 8008438:	b2da      	uxtb	r2, r3
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008440:	6939      	ldr	r1, [r7, #16]
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	88db      	ldrh	r3, [r3, #6]
 8008446:	461a      	mov	r2, r3
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f001 fa86 	bl	800995a <USBD_CtlPrepareRx>
    break;
 800844e:	e06f      	b.n	8008530 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	683a      	ldr	r2, [r7, #0]
 800845a:	7850      	ldrb	r0, [r2, #1]
 800845c:	2200      	movs	r2, #0
 800845e:	6839      	ldr	r1, [r7, #0]
 8008460:	4798      	blx	r3
    break;
 8008462:	e065      	b.n	8008530 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	785b      	ldrb	r3, [r3, #1]
 8008468:	2b0b      	cmp	r3, #11
 800846a:	d84f      	bhi.n	800850c <USBD_CDC_Setup+0x148>
 800846c:	a201      	add	r2, pc, #4	; (adr r2, 8008474 <USBD_CDC_Setup+0xb0>)
 800846e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008472:	bf00      	nop
 8008474:	080084a5 	.word	0x080084a5
 8008478:	0800851b 	.word	0x0800851b
 800847c:	0800850d 	.word	0x0800850d
 8008480:	0800850d 	.word	0x0800850d
 8008484:	0800850d 	.word	0x0800850d
 8008488:	0800850d 	.word	0x0800850d
 800848c:	0800850d 	.word	0x0800850d
 8008490:	0800850d 	.word	0x0800850d
 8008494:	0800850d 	.word	0x0800850d
 8008498:	0800850d 	.word	0x0800850d
 800849c:	080084cd 	.word	0x080084cd
 80084a0:	080084f5 	.word	0x080084f5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084aa:	2b03      	cmp	r3, #3
 80084ac:	d107      	bne.n	80084be <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80084ae:	f107 030c 	add.w	r3, r7, #12
 80084b2:	2202      	movs	r2, #2
 80084b4:	4619      	mov	r1, r3
 80084b6:	6878      	ldr	r0, [r7, #4]
 80084b8:	f001 fa23 	bl	8009902 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80084bc:	e030      	b.n	8008520 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80084be:	6839      	ldr	r1, [r7, #0]
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 f9ad 	bl	8009820 <USBD_CtlError>
        ret = USBD_FAIL;
 80084c6:	2303      	movs	r3, #3
 80084c8:	75fb      	strb	r3, [r7, #23]
      break;
 80084ca:	e029      	b.n	8008520 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084d2:	2b03      	cmp	r3, #3
 80084d4:	d107      	bne.n	80084e6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80084d6:	f107 030f 	add.w	r3, r7, #15
 80084da:	2201      	movs	r2, #1
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f001 fa0f 	bl	8009902 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80084e4:	e01c      	b.n	8008520 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80084e6:	6839      	ldr	r1, [r7, #0]
 80084e8:	6878      	ldr	r0, [r7, #4]
 80084ea:	f001 f999 	bl	8009820 <USBD_CtlError>
        ret = USBD_FAIL;
 80084ee:	2303      	movs	r3, #3
 80084f0:	75fb      	strb	r3, [r7, #23]
      break;
 80084f2:	e015      	b.n	8008520 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084fa:	2b03      	cmp	r3, #3
 80084fc:	d00f      	beq.n	800851e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80084fe:	6839      	ldr	r1, [r7, #0]
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f98d 	bl	8009820 <USBD_CtlError>
        ret = USBD_FAIL;
 8008506:	2303      	movs	r3, #3
 8008508:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800850a:	e008      	b.n	800851e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800850c:	6839      	ldr	r1, [r7, #0]
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f001 f986 	bl	8009820 <USBD_CtlError>
      ret = USBD_FAIL;
 8008514:	2303      	movs	r3, #3
 8008516:	75fb      	strb	r3, [r7, #23]
      break;
 8008518:	e002      	b.n	8008520 <USBD_CDC_Setup+0x15c>
      break;
 800851a:	bf00      	nop
 800851c:	e008      	b.n	8008530 <USBD_CDC_Setup+0x16c>
      break;
 800851e:	bf00      	nop
    }
    break;
 8008520:	e006      	b.n	8008530 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8008522:	6839      	ldr	r1, [r7, #0]
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f001 f97b 	bl	8009820 <USBD_CtlError>
    ret = USBD_FAIL;
 800852a:	2303      	movs	r3, #3
 800852c:	75fb      	strb	r3, [r7, #23]
    break;
 800852e:	bf00      	nop
  }

  return (uint8_t)ret;
 8008530:	7dfb      	ldrb	r3, [r7, #23]
}
 8008532:	4618      	mov	r0, r3
 8008534:	3718      	adds	r7, #24
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop

0800853c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800853c:	b580      	push	{r7, lr}
 800853e:	b084      	sub	sp, #16
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
 8008544:	460b      	mov	r3, r1
 8008546:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800854e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800855a:	2303      	movs	r3, #3
 800855c:	e049      	b.n	80085f2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008564:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008566:	78fa      	ldrb	r2, [r7, #3]
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	3318      	adds	r3, #24
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d029      	beq.n	80085d0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800857c:	78fa      	ldrb	r2, [r7, #3]
 800857e:	6879      	ldr	r1, [r7, #4]
 8008580:	4613      	mov	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	4413      	add	r3, r2
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	440b      	add	r3, r1
 800858a:	3318      	adds	r3, #24
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	78f9      	ldrb	r1, [r7, #3]
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	460b      	mov	r3, r1
 8008594:	00db      	lsls	r3, r3, #3
 8008596:	1a5b      	subs	r3, r3, r1
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	4403      	add	r3, r0
 800859c:	3344      	adds	r3, #68	; 0x44
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	fbb2 f1f3 	udiv	r1, r2, r3
 80085a4:	fb03 f301 	mul.w	r3, r3, r1
 80085a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d110      	bne.n	80085d0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80085ae:	78fa      	ldrb	r2, [r7, #3]
 80085b0:	6879      	ldr	r1, [r7, #4]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	440b      	add	r3, r1
 80085bc:	3318      	adds	r3, #24
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80085c2:	78f9      	ldrb	r1, [r7, #3]
 80085c4:	2300      	movs	r3, #0
 80085c6:	2200      	movs	r2, #0
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fe74 	bl	800a2b6 <USBD_LL_Transmit>
 80085ce:	e00f      	b.n	80085f0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	68ba      	ldr	r2, [r7, #8]
 80085e2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085ec:	78fa      	ldrb	r2, [r7, #3]
 80085ee:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3710      	adds	r7, #16
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}

080085fa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085fa:	b580      	push	{r7, lr}
 80085fc:	b084      	sub	sp, #16
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
 8008602:	460b      	mov	r3, r1
 8008604:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800860c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008614:	2b00      	cmp	r3, #0
 8008616:	d101      	bne.n	800861c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008618:	2303      	movs	r3, #3
 800861a:	e015      	b.n	8008648 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	4619      	mov	r1, r3
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f001 fe8a 	bl	800a33a <USBD_LL_GetRxDataSize>
 8008626:	4602      	mov	r2, r0
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008642:	4611      	mov	r1, r2
 8008644:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008646:	2300      	movs	r3, #0
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800865e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008666:	2b00      	cmp	r3, #0
 8008668:	d015      	beq.n	8008696 <USBD_CDC_EP0_RxReady+0x46>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008670:	2bff      	cmp	r3, #255	; 0xff
 8008672:	d010      	beq.n	8008696 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800867a:	689b      	ldr	r3, [r3, #8]
 800867c:	68fa      	ldr	r2, [r7, #12]
 800867e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008682:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800868a:	b292      	uxth	r2, r2
 800868c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	22ff      	movs	r2, #255	; 0xff
 8008692:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	3710      	adds	r7, #16
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2243      	movs	r2, #67	; 0x43
 80086ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80086ae:	4b03      	ldr	r3, [pc, #12]	; (80086bc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr
 80086bc:	200000b4 	.word	0x200000b4

080086c0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b083      	sub	sp, #12
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2243      	movs	r2, #67	; 0x43
 80086cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80086ce:	4b03      	ldr	r3, [pc, #12]	; (80086dc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr
 80086dc:	20000070 	.word	0x20000070

080086e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2243      	movs	r2, #67	; 0x43
 80086ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80086ee:	4b03      	ldr	r3, [pc, #12]	; (80086fc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr
 80086fc:	200000f8 	.word	0x200000f8

08008700 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008700:	b480      	push	{r7}
 8008702:	b083      	sub	sp, #12
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	220a      	movs	r2, #10
 800870c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800870e:	4b03      	ldr	r3, [pc, #12]	; (800871c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008710:	4618      	mov	r0, r3
 8008712:	370c      	adds	r7, #12
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	2000002c 	.word	0x2000002c

08008720 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
 8008728:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d101      	bne.n	8008734 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008730:	2303      	movs	r3, #3
 8008732:	e004      	b.n	800873e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	683a      	ldr	r2, [r7, #0]
 8008738:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800873c:	2300      	movs	r3, #0
}
 800873e:	4618      	mov	r0, r3
 8008740:	370c      	adds	r7, #12
 8008742:	46bd      	mov	sp, r7
 8008744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008748:	4770      	bx	lr

0800874a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800874a:	b480      	push	{r7}
 800874c:	b087      	sub	sp, #28
 800874e:	af00      	add	r7, sp, #0
 8008750:	60f8      	str	r0, [r7, #12]
 8008752:	60b9      	str	r1, [r7, #8]
 8008754:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800875c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800876e:	2300      	movs	r3, #0
}
 8008770:	4618      	mov	r0, r3
 8008772:	371c      	adds	r7, #28
 8008774:	46bd      	mov	sp, r7
 8008776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877a:	4770      	bx	lr

0800877c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800877c:	b480      	push	{r7}
 800877e:	b085      	sub	sp, #20
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800878c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	683a      	ldr	r2, [r7, #0]
 8008792:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008796:	2300      	movs	r3, #0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3714      	adds	r7, #20
 800879c:	46bd      	mov	sp, r7
 800879e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a2:	4770      	bx	lr

080087a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b084      	sub	sp, #16
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087b2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80087be:	2303      	movs	r3, #3
 80087c0:	e016      	b.n	80087f0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	7c1b      	ldrb	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d109      	bne.n	80087de <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087d4:	2101      	movs	r1, #1
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f001 fd8e 	bl	800a2f8 <USBD_LL_PrepareReceive>
 80087dc:	e007      	b.n	80087ee <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087e4:	2340      	movs	r3, #64	; 0x40
 80087e6:	2101      	movs	r1, #1
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f001 fd85 	bl	800a2f8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3710      	adds	r7, #16
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b086      	sub	sp, #24
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	4613      	mov	r3, r2
 8008804:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d101      	bne.n	8008810 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800880c:	2303      	movs	r3, #3
 800880e:	e025      	b.n	800885c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008816:	2b00      	cmp	r3, #0
 8008818:	d003      	beq.n	8008822 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2200      	movs	r2, #0
 800881e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	2200      	movs	r2, #0
 8008830:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	68ba      	ldr	r2, [r7, #8]
 800883e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	79fa      	ldrb	r2, [r7, #7]
 800884e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f001 fbfb 	bl	800a04c <USBD_LL_Init>
 8008856:	4603      	mov	r3, r0
 8008858:	75fb      	strb	r3, [r7, #23]

  return ret;
 800885a:	7dfb      	ldrb	r3, [r7, #23]
}
 800885c:	4618      	mov	r0, r3
 800885e:	3718      	adds	r7, #24
 8008860:	46bd      	mov	sp, r7
 8008862:	bd80      	pop	{r7, pc}

08008864 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800886e:	2300      	movs	r3, #0
 8008870:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d101      	bne.n	800887c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008878:	2303      	movs	r3, #3
 800887a:	e010      	b.n	800889e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	683a      	ldr	r2, [r7, #0]
 8008880:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800888a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800888c:	f107 020e 	add.w	r2, r7, #14
 8008890:	4610      	mov	r0, r2
 8008892:	4798      	blx	r3
 8008894:	4602      	mov	r2, r0
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800889c:	2300      	movs	r3, #0
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}

080088a6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088a6:	b580      	push	{r7, lr}
 80088a8:	b082      	sub	sp, #8
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f001 fc18 	bl	800a0e4 <USBD_LL_Start>
 80088b4:	4603      	mov	r3, r0
}
 80088b6:	4618      	mov	r0, r3
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}

080088be <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80088be:	b480      	push	{r7}
 80088c0:	b083      	sub	sp, #12
 80088c2:	af00      	add	r7, sp, #0
 80088c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80088c6:	2300      	movs	r3, #0
}
 80088c8:	4618      	mov	r0, r3
 80088ca:	370c      	adds	r7, #12
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	460b      	mov	r3, r1
 80088de:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80088e0:	2303      	movs	r3, #3
 80088e2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d009      	beq.n	8008902 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	78fa      	ldrb	r2, [r7, #3]
 80088f8:	4611      	mov	r1, r2
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	4798      	blx	r3
 80088fe:	4603      	mov	r3, r0
 8008900:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8008902:	7bfb      	ldrb	r3, [r7, #15]
}
 8008904:	4618      	mov	r0, r3
 8008906:	3710      	adds	r7, #16
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
 8008914:	460b      	mov	r3, r1
 8008916:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800891e:	2b00      	cmp	r3, #0
 8008920:	d007      	beq.n	8008932 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008928:	685b      	ldr	r3, [r3, #4]
 800892a:	78fa      	ldrb	r2, [r7, #3]
 800892c:	4611      	mov	r1, r2
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	4798      	blx	r3
  }

  return USBD_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3708      	adds	r7, #8
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800894c:	6839      	ldr	r1, [r7, #0]
 800894e:	4618      	mov	r0, r3
 8008950:	f000 ff2c 	bl	80097ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008962:	461a      	mov	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008970:	f003 031f 	and.w	r3, r3, #31
 8008974:	2b01      	cmp	r3, #1
 8008976:	d00e      	beq.n	8008996 <USBD_LL_SetupStage+0x5a>
 8008978:	2b01      	cmp	r3, #1
 800897a:	d302      	bcc.n	8008982 <USBD_LL_SetupStage+0x46>
 800897c:	2b02      	cmp	r3, #2
 800897e:	d014      	beq.n	80089aa <USBD_LL_SetupStage+0x6e>
 8008980:	e01d      	b.n	80089be <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008988:	4619      	mov	r1, r3
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 fa18 	bl	8008dc0 <USBD_StdDevReq>
 8008990:	4603      	mov	r3, r0
 8008992:	73fb      	strb	r3, [r7, #15]
      break;
 8008994:	e020      	b.n	80089d8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 fa7c 	bl	8008e9c <USBD_StdItfReq>
 80089a4:	4603      	mov	r3, r0
 80089a6:	73fb      	strb	r3, [r7, #15]
      break;
 80089a8:	e016      	b.n	80089d8 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 fab8 	bl	8008f28 <USBD_StdEPReq>
 80089b8:	4603      	mov	r3, r0
 80089ba:	73fb      	strb	r3, [r7, #15]
      break;
 80089bc:	e00c      	b.n	80089d8 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	4619      	mov	r1, r3
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 fbe9 	bl	800a1a4 <USBD_LL_StallEP>
 80089d2:	4603      	mov	r3, r0
 80089d4:	73fb      	strb	r3, [r7, #15]
      break;
 80089d6:	bf00      	nop
  }

  return ret;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80089e2:	b580      	push	{r7, lr}
 80089e4:	b086      	sub	sp, #24
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	60f8      	str	r0, [r7, #12]
 80089ea:	460b      	mov	r3, r1
 80089ec:	607a      	str	r2, [r7, #4]
 80089ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80089f0:	7afb      	ldrb	r3, [r7, #11]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d137      	bne.n	8008a66 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80089fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a04:	2b03      	cmp	r3, #3
 8008a06:	d14a      	bne.n	8008a9e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	689a      	ldr	r2, [r3, #8]
 8008a0c:	693b      	ldr	r3, [r7, #16]
 8008a0e:	68db      	ldr	r3, [r3, #12]
 8008a10:	429a      	cmp	r2, r3
 8008a12:	d913      	bls.n	8008a3c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	689a      	ldr	r2, [r3, #8]
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	68db      	ldr	r3, [r3, #12]
 8008a1c:	1ad2      	subs	r2, r2, r3
 8008a1e:	693b      	ldr	r3, [r7, #16]
 8008a20:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	68da      	ldr	r2, [r3, #12]
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	bf28      	it	cs
 8008a2e:	4613      	movcs	r3, r2
 8008a30:	461a      	mov	r2, r3
 8008a32:	6879      	ldr	r1, [r7, #4]
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f000 ffad 	bl	8009994 <USBD_CtlContinueRx>
 8008a3a:	e030      	b.n	8008a9e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d00a      	beq.n	8008a5e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008a4e:	2b03      	cmp	r3, #3
 8008a50:	d105      	bne.n	8008a5e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 ffa9 	bl	80099b6 <USBD_CtlSendStatus>
 8008a64:	e01b      	b.n	8008a9e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a6c:	699b      	ldr	r3, [r3, #24]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d013      	beq.n	8008a9a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d10e      	bne.n	8008a9a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a82:	699b      	ldr	r3, [r3, #24]
 8008a84:	7afa      	ldrb	r2, [r7, #11]
 8008a86:	4611      	mov	r1, r2
 8008a88:	68f8      	ldr	r0, [r7, #12]
 8008a8a:	4798      	blx	r3
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008a90:	7dfb      	ldrb	r3, [r7, #23]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008a96:	7dfb      	ldrb	r3, [r7, #23]
 8008a98:	e002      	b.n	8008aa0 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008a9a:	2303      	movs	r3, #3
 8008a9c:	e000      	b.n	8008aa0 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8008a9e:	2300      	movs	r3, #0
}
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	3718      	adds	r7, #24
 8008aa4:	46bd      	mov	sp, r7
 8008aa6:	bd80      	pop	{r7, pc}

08008aa8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b086      	sub	sp, #24
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	607a      	str	r2, [r7, #4]
 8008ab4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008ab6:	7afb      	ldrb	r3, [r7, #11]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d16a      	bne.n	8008b92 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	3314      	adds	r3, #20
 8008ac0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d155      	bne.n	8008b78 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	689a      	ldr	r2, [r3, #8]
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	68db      	ldr	r3, [r3, #12]
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d914      	bls.n	8008b02 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	689a      	ldr	r2, [r3, #8]
 8008adc:	693b      	ldr	r3, [r7, #16]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	1ad2      	subs	r2, r2, r3
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	461a      	mov	r2, r3
 8008aec:	6879      	ldr	r1, [r7, #4]
 8008aee:	68f8      	ldr	r0, [r7, #12]
 8008af0:	f000 ff22 	bl	8009938 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008af4:	2300      	movs	r3, #0
 8008af6:	2200      	movs	r2, #0
 8008af8:	2100      	movs	r1, #0
 8008afa:	68f8      	ldr	r0, [r7, #12]
 8008afc:	f001 fbfc 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8008b00:	e03a      	b.n	8008b78 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	68da      	ldr	r2, [r3, #12]
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d11c      	bne.n	8008b48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	685a      	ldr	r2, [r3, #4]
 8008b12:	693b      	ldr	r3, [r7, #16]
 8008b14:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d316      	bcc.n	8008b48 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d20f      	bcs.n	8008b48 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2100      	movs	r1, #0
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 ff03 	bl	8009938 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	2200      	movs	r2, #0
 8008b36:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	2100      	movs	r1, #0
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f001 fbd9 	bl	800a2f8 <USBD_LL_PrepareReceive>
 8008b46:	e017      	b.n	8008b78 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008b5a:	2b03      	cmp	r3, #3
 8008b5c:	d105      	bne.n	8008b6a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	68f8      	ldr	r0, [r7, #12]
 8008b68:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b6a:	2180      	movs	r1, #128	; 0x80
 8008b6c:	68f8      	ldr	r0, [r7, #12]
 8008b6e:	f001 fb19 	bl	800a1a4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 ff32 	bl	80099dc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d123      	bne.n	8008bca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008b82:	68f8      	ldr	r0, [r7, #12]
 8008b84:	f7ff fe9b 	bl	80088be <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008b90:	e01b      	b.n	8008bca <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d013      	beq.n	8008bc6 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d10e      	bne.n	8008bc6 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bae:	695b      	ldr	r3, [r3, #20]
 8008bb0:	7afa      	ldrb	r2, [r7, #11]
 8008bb2:	4611      	mov	r1, r2
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	4798      	blx	r3
 8008bb8:	4603      	mov	r3, r0
 8008bba:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008bbc:	7dfb      	ldrb	r3, [r7, #23]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d003      	beq.n	8008bca <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008bc2:	7dfb      	ldrb	r3, [r7, #23]
 8008bc4:	e002      	b.n	8008bcc <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e000      	b.n	8008bcc <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008bca:	2300      	movs	r3, #0
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b082      	sub	sp, #8
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2200      	movs	r2, #0
 8008be8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2200      	movs	r2, #0
 8008bf0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d009      	beq.n	8008c18 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c0a:	685b      	ldr	r3, [r3, #4]
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	6852      	ldr	r2, [r2, #4]
 8008c10:	b2d2      	uxtb	r2, r2
 8008c12:	4611      	mov	r1, r2
 8008c14:	6878      	ldr	r0, [r7, #4]
 8008c16:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c18:	2340      	movs	r3, #64	; 0x40
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	2100      	movs	r1, #0
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f001 fa7b 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2240      	movs	r2, #64	; 0x40
 8008c30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008c34:	2340      	movs	r3, #64	; 0x40
 8008c36:	2200      	movs	r2, #0
 8008c38:	2180      	movs	r1, #128	; 0x80
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f001 fa6d 	bl	800a11a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2201      	movs	r2, #1
 8008c44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2240      	movs	r2, #64	; 0x40
 8008c4a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008c4c:	2300      	movs	r3, #0
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3708      	adds	r7, #8
 8008c52:	46bd      	mov	sp, r7
 8008c54:	bd80      	pop	{r7, pc}

08008c56 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008c56:	b480      	push	{r7}
 8008c58:	b083      	sub	sp, #12
 8008c5a:	af00      	add	r7, sp, #0
 8008c5c:	6078      	str	r0, [r7, #4]
 8008c5e:	460b      	mov	r3, r1
 8008c60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	78fa      	ldrb	r2, [r7, #3]
 8008c66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	370c      	adds	r7, #12
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c74:	4770      	bx	lr

08008c76 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008c76:	b480      	push	{r7}
 8008c78:	b083      	sub	sp, #12
 8008c7a:	af00      	add	r7, sp, #0
 8008c7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2204      	movs	r2, #4
 8008c8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	370c      	adds	r7, #12
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr

08008ca0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008ca0:	b480      	push	{r7}
 8008ca2:	b083      	sub	sp, #12
 8008ca4:	af00      	add	r7, sp, #0
 8008ca6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cae:	2b04      	cmp	r3, #4
 8008cb0:	d105      	bne.n	8008cbe <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	370c      	adds	r7, #12
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr

08008ccc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008ccc:	b580      	push	{r7, lr}
 8008cce:	b082      	sub	sp, #8
 8008cd0:	af00      	add	r7, sp, #0
 8008cd2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cda:	2b03      	cmp	r3, #3
 8008cdc:	d10b      	bne.n	8008cf6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ce4:	69db      	ldr	r3, [r3, #28]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d005      	beq.n	8008cf6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008cf6:	2300      	movs	r3, #0
}
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	3708      	adds	r7, #8
 8008cfc:	46bd      	mov	sp, r7
 8008cfe:	bd80      	pop	{r7, pc}

08008d00 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	460b      	mov	r3, r1
 8008d0a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008d0c:	2300      	movs	r3, #0
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	370c      	adds	r7, #12
 8008d12:	46bd      	mov	sp, r7
 8008d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d18:	4770      	bx	lr

08008d1a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008d1a:	b480      	push	{r7}
 8008d1c:	b083      	sub	sp, #12
 8008d1e:	af00      	add	r7, sp, #0
 8008d20:	6078      	str	r0, [r7, #4]
 8008d22:	460b      	mov	r3, r1
 8008d24:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008d26:	2300      	movs	r3, #0
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2201      	movs	r2, #1
 8008d56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d009      	beq.n	8008d78 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	6852      	ldr	r2, [r2, #4]
 8008d70:	b2d2      	uxtb	r2, r2
 8008d72:	4611      	mov	r1, r2
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	4798      	blx	r3
  }

  return USBD_OK;
 8008d78:	2300      	movs	r3, #0
}
 8008d7a:	4618      	mov	r0, r3
 8008d7c:	3708      	adds	r7, #8
 8008d7e:	46bd      	mov	sp, r7
 8008d80:	bd80      	pop	{r7, pc}

08008d82 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008d82:	b480      	push	{r7}
 8008d84:	b087      	sub	sp, #28
 8008d86:	af00      	add	r7, sp, #0
 8008d88:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008d8e:	697b      	ldr	r3, [r7, #20]
 8008d90:	781b      	ldrb	r3, [r3, #0]
 8008d92:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	3301      	adds	r3, #1
 8008d98:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	781b      	ldrb	r3, [r3, #0]
 8008d9e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008da0:	8a3b      	ldrh	r3, [r7, #16]
 8008da2:	021b      	lsls	r3, r3, #8
 8008da4:	b21a      	sxth	r2, r3
 8008da6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008daa:	4313      	orrs	r3, r2
 8008dac:	b21b      	sxth	r3, r3
 8008dae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008db0:	89fb      	ldrh	r3, [r7, #14]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	371c      	adds	r7, #28
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr
	...

08008dc0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	781b      	ldrb	r3, [r3, #0]
 8008dd2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008dd6:	2b20      	cmp	r3, #32
 8008dd8:	d004      	beq.n	8008de4 <USBD_StdDevReq+0x24>
 8008dda:	2b40      	cmp	r3, #64	; 0x40
 8008ddc:	d002      	beq.n	8008de4 <USBD_StdDevReq+0x24>
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d00a      	beq.n	8008df8 <USBD_StdDevReq+0x38>
 8008de2:	e050      	b.n	8008e86 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	6839      	ldr	r1, [r7, #0]
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	4798      	blx	r3
 8008df2:	4603      	mov	r3, r0
 8008df4:	73fb      	strb	r3, [r7, #15]
    break;
 8008df6:	e04b      	b.n	8008e90 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	785b      	ldrb	r3, [r3, #1]
 8008dfc:	2b09      	cmp	r3, #9
 8008dfe:	d83c      	bhi.n	8008e7a <USBD_StdDevReq+0xba>
 8008e00:	a201      	add	r2, pc, #4	; (adr r2, 8008e08 <USBD_StdDevReq+0x48>)
 8008e02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e06:	bf00      	nop
 8008e08:	08008e5d 	.word	0x08008e5d
 8008e0c:	08008e71 	.word	0x08008e71
 8008e10:	08008e7b 	.word	0x08008e7b
 8008e14:	08008e67 	.word	0x08008e67
 8008e18:	08008e7b 	.word	0x08008e7b
 8008e1c:	08008e3b 	.word	0x08008e3b
 8008e20:	08008e31 	.word	0x08008e31
 8008e24:	08008e7b 	.word	0x08008e7b
 8008e28:	08008e53 	.word	0x08008e53
 8008e2c:	08008e45 	.word	0x08008e45
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008e30:	6839      	ldr	r1, [r7, #0]
 8008e32:	6878      	ldr	r0, [r7, #4]
 8008e34:	f000 f9ce 	bl	80091d4 <USBD_GetDescriptor>
      break;
 8008e38:	e024      	b.n	8008e84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008e3a:	6839      	ldr	r1, [r7, #0]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f000 fb33 	bl	80094a8 <USBD_SetAddress>
      break;
 8008e42:	e01f      	b.n	8008e84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008e44:	6839      	ldr	r1, [r7, #0]
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 fb70 	bl	800952c <USBD_SetConfig>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e50:	e018      	b.n	8008e84 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fc0d 	bl	8009674 <USBD_GetConfig>
      break;
 8008e5a:	e013      	b.n	8008e84 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fc3c 	bl	80096dc <USBD_GetStatus>
      break;
 8008e64:	e00e      	b.n	8008e84 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fc6a 	bl	8009742 <USBD_SetFeature>
      break;
 8008e6e:	e009      	b.n	8008e84 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008e70:	6839      	ldr	r1, [r7, #0]
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f000 fc79 	bl	800976a <USBD_ClrFeature>
      break;
 8008e78:	e004      	b.n	8008e84 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008e7a:	6839      	ldr	r1, [r7, #0]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 fccf 	bl	8009820 <USBD_CtlError>
      break;
 8008e82:	bf00      	nop
    }
    break;
 8008e84:	e004      	b.n	8008e90 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008e86:	6839      	ldr	r1, [r7, #0]
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 fcc9 	bl	8009820 <USBD_CtlError>
    break;
 8008e8e:	bf00      	nop
  }

  return ret;
 8008e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3710      	adds	r7, #16
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}
 8008e9a:	bf00      	nop

08008e9c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b084      	sub	sp, #16
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008eb2:	2b20      	cmp	r3, #32
 8008eb4:	d003      	beq.n	8008ebe <USBD_StdItfReq+0x22>
 8008eb6:	2b40      	cmp	r3, #64	; 0x40
 8008eb8:	d001      	beq.n	8008ebe <USBD_StdItfReq+0x22>
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d12a      	bne.n	8008f14 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ec4:	3b01      	subs	r3, #1
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d81d      	bhi.n	8008f06 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008eca:	683b      	ldr	r3, [r7, #0]
 8008ecc:	889b      	ldrh	r3, [r3, #4]
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d813      	bhi.n	8008efc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008eda:	689b      	ldr	r3, [r3, #8]
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	4798      	blx	r3
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ee6:	683b      	ldr	r3, [r7, #0]
 8008ee8:	88db      	ldrh	r3, [r3, #6]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d110      	bne.n	8008f10 <USBD_StdItfReq+0x74>
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d10d      	bne.n	8008f10 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008ef4:	6878      	ldr	r0, [r7, #4]
 8008ef6:	f000 fd5e 	bl	80099b6 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008efa:	e009      	b.n	8008f10 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008efc:	6839      	ldr	r1, [r7, #0]
 8008efe:	6878      	ldr	r0, [r7, #4]
 8008f00:	f000 fc8e 	bl	8009820 <USBD_CtlError>
      break;
 8008f04:	e004      	b.n	8008f10 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008f06:	6839      	ldr	r1, [r7, #0]
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 fc89 	bl	8009820 <USBD_CtlError>
      break;
 8008f0e:	e000      	b.n	8008f12 <USBD_StdItfReq+0x76>
      break;
 8008f10:	bf00      	nop
    }
    break;
 8008f12:	e004      	b.n	8008f1e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f000 fc82 	bl	8009820 <USBD_CtlError>
    break;
 8008f1c:	bf00      	nop
  }

  return ret;
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	6078      	str	r0, [r7, #4]
 8008f30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008f32:	2300      	movs	r3, #0
 8008f34:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	889b      	ldrh	r3, [r3, #4]
 8008f3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008f44:	2b20      	cmp	r3, #32
 8008f46:	d004      	beq.n	8008f52 <USBD_StdEPReq+0x2a>
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	d002      	beq.n	8008f52 <USBD_StdEPReq+0x2a>
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00a      	beq.n	8008f66 <USBD_StdEPReq+0x3e>
 8008f50:	e135      	b.n	80091be <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	6839      	ldr	r1, [r7, #0]
 8008f5c:	6878      	ldr	r0, [r7, #4]
 8008f5e:	4798      	blx	r3
 8008f60:	4603      	mov	r3, r0
 8008f62:	73fb      	strb	r3, [r7, #15]
    break;
 8008f64:	e130      	b.n	80091c8 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	785b      	ldrb	r3, [r3, #1]
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d03e      	beq.n	8008fec <USBD_StdEPReq+0xc4>
 8008f6e:	2b03      	cmp	r3, #3
 8008f70:	d002      	beq.n	8008f78 <USBD_StdEPReq+0x50>
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d077      	beq.n	8009066 <USBD_StdEPReq+0x13e>
 8008f76:	e11c      	b.n	80091b2 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f7e:	2b02      	cmp	r3, #2
 8008f80:	d002      	beq.n	8008f88 <USBD_StdEPReq+0x60>
 8008f82:	2b03      	cmp	r3, #3
 8008f84:	d015      	beq.n	8008fb2 <USBD_StdEPReq+0x8a>
 8008f86:	e02b      	b.n	8008fe0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008f88:	7bbb      	ldrb	r3, [r7, #14]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d00c      	beq.n	8008fa8 <USBD_StdEPReq+0x80>
 8008f8e:	7bbb      	ldrb	r3, [r7, #14]
 8008f90:	2b80      	cmp	r3, #128	; 0x80
 8008f92:	d009      	beq.n	8008fa8 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008f94:	7bbb      	ldrb	r3, [r7, #14]
 8008f96:	4619      	mov	r1, r3
 8008f98:	6878      	ldr	r0, [r7, #4]
 8008f9a:	f001 f903 	bl	800a1a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008f9e:	2180      	movs	r1, #128	; 0x80
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f001 f8ff 	bl	800a1a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008fa6:	e020      	b.n	8008fea <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008fa8:	6839      	ldr	r1, [r7, #0]
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f000 fc38 	bl	8009820 <USBD_CtlError>
        break;
 8008fb0:	e01b      	b.n	8008fea <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	885b      	ldrh	r3, [r3, #2]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d10e      	bne.n	8008fd8 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008fba:	7bbb      	ldrb	r3, [r7, #14]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d00b      	beq.n	8008fd8 <USBD_StdEPReq+0xb0>
 8008fc0:	7bbb      	ldrb	r3, [r7, #14]
 8008fc2:	2b80      	cmp	r3, #128	; 0x80
 8008fc4:	d008      	beq.n	8008fd8 <USBD_StdEPReq+0xb0>
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	88db      	ldrh	r3, [r3, #6]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d104      	bne.n	8008fd8 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	4619      	mov	r1, r3
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f001 f8e6 	bl	800a1a4 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fcec 	bl	80099b6 <USBD_CtlSendStatus>

        break;
 8008fde:	e004      	b.n	8008fea <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	f000 fc1c 	bl	8009820 <USBD_CtlError>
        break;
 8008fe8:	bf00      	nop
      }
      break;
 8008fea:	e0e7      	b.n	80091bc <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d002      	beq.n	8008ffc <USBD_StdEPReq+0xd4>
 8008ff6:	2b03      	cmp	r3, #3
 8008ff8:	d015      	beq.n	8009026 <USBD_StdEPReq+0xfe>
 8008ffa:	e02d      	b.n	8009058 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ffc:	7bbb      	ldrb	r3, [r7, #14]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d00c      	beq.n	800901c <USBD_StdEPReq+0xf4>
 8009002:	7bbb      	ldrb	r3, [r7, #14]
 8009004:	2b80      	cmp	r3, #128	; 0x80
 8009006:	d009      	beq.n	800901c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8009008:	7bbb      	ldrb	r3, [r7, #14]
 800900a:	4619      	mov	r1, r3
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	f001 f8c9 	bl	800a1a4 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009012:	2180      	movs	r1, #128	; 0x80
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f001 f8c5 	bl	800a1a4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800901a:	e023      	b.n	8009064 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800901c:	6839      	ldr	r1, [r7, #0]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f000 fbfe 	bl	8009820 <USBD_CtlError>
        break;
 8009024:	e01e      	b.n	8009064 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	885b      	ldrh	r3, [r3, #2]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d119      	bne.n	8009062 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800902e:	7bbb      	ldrb	r3, [r7, #14]
 8009030:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009034:	2b00      	cmp	r3, #0
 8009036:	d004      	beq.n	8009042 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 f8d0 	bl	800a1e2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fcb7 	bl	80099b6 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	6839      	ldr	r1, [r7, #0]
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	4798      	blx	r3
        }
        break;
 8009056:	e004      	b.n	8009062 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8009058:	6839      	ldr	r1, [r7, #0]
 800905a:	6878      	ldr	r0, [r7, #4]
 800905c:	f000 fbe0 	bl	8009820 <USBD_CtlError>
        break;
 8009060:	e000      	b.n	8009064 <USBD_StdEPReq+0x13c>
        break;
 8009062:	bf00      	nop
      }
      break;
 8009064:	e0aa      	b.n	80091bc <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800906c:	2b02      	cmp	r3, #2
 800906e:	d002      	beq.n	8009076 <USBD_StdEPReq+0x14e>
 8009070:	2b03      	cmp	r3, #3
 8009072:	d032      	beq.n	80090da <USBD_StdEPReq+0x1b2>
 8009074:	e097      	b.n	80091a6 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009076:	7bbb      	ldrb	r3, [r7, #14]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d007      	beq.n	800908c <USBD_StdEPReq+0x164>
 800907c:	7bbb      	ldrb	r3, [r7, #14]
 800907e:	2b80      	cmp	r3, #128	; 0x80
 8009080:	d004      	beq.n	800908c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8009082:	6839      	ldr	r1, [r7, #0]
 8009084:	6878      	ldr	r0, [r7, #4]
 8009086:	f000 fbcb 	bl	8009820 <USBD_CtlError>
          break;
 800908a:	e091      	b.n	80091b0 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800908c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009090:	2b00      	cmp	r3, #0
 8009092:	da0b      	bge.n	80090ac <USBD_StdEPReq+0x184>
 8009094:	7bbb      	ldrb	r3, [r7, #14]
 8009096:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800909a:	4613      	mov	r3, r2
 800909c:	009b      	lsls	r3, r3, #2
 800909e:	4413      	add	r3, r2
 80090a0:	009b      	lsls	r3, r3, #2
 80090a2:	3310      	adds	r3, #16
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	3304      	adds	r3, #4
 80090aa:	e00b      	b.n	80090c4 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80090ac:	7bbb      	ldrb	r3, [r7, #14]
 80090ae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80090b2:	4613      	mov	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4413      	add	r3, r2
 80090b8:	009b      	lsls	r3, r3, #2
 80090ba:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4413      	add	r3, r2
 80090c2:	3304      	adds	r3, #4
 80090c4:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	2200      	movs	r2, #0
 80090ca:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	2202      	movs	r2, #2
 80090d0:	4619      	mov	r1, r3
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fc15 	bl	8009902 <USBD_CtlSendData>
        break;
 80090d8:	e06a      	b.n	80091b0 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80090da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	da11      	bge.n	8009106 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	f003 020f 	and.w	r2, r3, #15
 80090e8:	6879      	ldr	r1, [r7, #4]
 80090ea:	4613      	mov	r3, r2
 80090ec:	009b      	lsls	r3, r3, #2
 80090ee:	4413      	add	r3, r2
 80090f0:	009b      	lsls	r3, r3, #2
 80090f2:	440b      	add	r3, r1
 80090f4:	3324      	adds	r3, #36	; 0x24
 80090f6:	881b      	ldrh	r3, [r3, #0]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d117      	bne.n	800912c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80090fc:	6839      	ldr	r1, [r7, #0]
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 fb8e 	bl	8009820 <USBD_CtlError>
            break;
 8009104:	e054      	b.n	80091b0 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009106:	7bbb      	ldrb	r3, [r7, #14]
 8009108:	f003 020f 	and.w	r2, r3, #15
 800910c:	6879      	ldr	r1, [r7, #4]
 800910e:	4613      	mov	r3, r2
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	4413      	add	r3, r2
 8009114:	009b      	lsls	r3, r3, #2
 8009116:	440b      	add	r3, r1
 8009118:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d104      	bne.n	800912c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8009122:	6839      	ldr	r1, [r7, #0]
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fb7b 	bl	8009820 <USBD_CtlError>
            break;
 800912a:	e041      	b.n	80091b0 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800912c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009130:	2b00      	cmp	r3, #0
 8009132:	da0b      	bge.n	800914c <USBD_StdEPReq+0x224>
 8009134:	7bbb      	ldrb	r3, [r7, #14]
 8009136:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800913a:	4613      	mov	r3, r2
 800913c:	009b      	lsls	r3, r3, #2
 800913e:	4413      	add	r3, r2
 8009140:	009b      	lsls	r3, r3, #2
 8009142:	3310      	adds	r3, #16
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	4413      	add	r3, r2
 8009148:	3304      	adds	r3, #4
 800914a:	e00b      	b.n	8009164 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800914c:	7bbb      	ldrb	r3, [r7, #14]
 800914e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009152:	4613      	mov	r3, r2
 8009154:	009b      	lsls	r3, r3, #2
 8009156:	4413      	add	r3, r2
 8009158:	009b      	lsls	r3, r3, #2
 800915a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800915e:	687a      	ldr	r2, [r7, #4]
 8009160:	4413      	add	r3, r2
 8009162:	3304      	adds	r3, #4
 8009164:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009166:	7bbb      	ldrb	r3, [r7, #14]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d002      	beq.n	8009172 <USBD_StdEPReq+0x24a>
 800916c:	7bbb      	ldrb	r3, [r7, #14]
 800916e:	2b80      	cmp	r3, #128	; 0x80
 8009170:	d103      	bne.n	800917a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	2200      	movs	r2, #0
 8009176:	601a      	str	r2, [r3, #0]
 8009178:	e00e      	b.n	8009198 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800917a:	7bbb      	ldrb	r3, [r7, #14]
 800917c:	4619      	mov	r1, r3
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f001 f84e 	bl	800a220 <USBD_LL_IsStallEP>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d003      	beq.n	8009192 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800918a:	68bb      	ldr	r3, [r7, #8]
 800918c:	2201      	movs	r2, #1
 800918e:	601a      	str	r2, [r3, #0]
 8009190:	e002      	b.n	8009198 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8009192:	68bb      	ldr	r3, [r7, #8]
 8009194:	2200      	movs	r2, #0
 8009196:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	2202      	movs	r2, #2
 800919c:	4619      	mov	r1, r3
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 fbaf 	bl	8009902 <USBD_CtlSendData>
          break;
 80091a4:	e004      	b.n	80091b0 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 80091a6:	6839      	ldr	r1, [r7, #0]
 80091a8:	6878      	ldr	r0, [r7, #4]
 80091aa:	f000 fb39 	bl	8009820 <USBD_CtlError>
        break;
 80091ae:	bf00      	nop
      }
      break;
 80091b0:	e004      	b.n	80091bc <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 80091b2:	6839      	ldr	r1, [r7, #0]
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fb33 	bl	8009820 <USBD_CtlError>
      break;
 80091ba:	bf00      	nop
    }
    break;
 80091bc:	e004      	b.n	80091c8 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 80091be:	6839      	ldr	r1, [r7, #0]
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f000 fb2d 	bl	8009820 <USBD_CtlError>
    break;
 80091c6:	bf00      	nop
  }

  return ret;
 80091c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3710      	adds	r7, #16
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80091de:	2300      	movs	r3, #0
 80091e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80091e2:	2300      	movs	r3, #0
 80091e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80091e6:	2300      	movs	r3, #0
 80091e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	885b      	ldrh	r3, [r3, #2]
 80091ee:	0a1b      	lsrs	r3, r3, #8
 80091f0:	b29b      	uxth	r3, r3
 80091f2:	3b01      	subs	r3, #1
 80091f4:	2b06      	cmp	r3, #6
 80091f6:	f200 8128 	bhi.w	800944a <USBD_GetDescriptor+0x276>
 80091fa:	a201      	add	r2, pc, #4	; (adr r2, 8009200 <USBD_GetDescriptor+0x2c>)
 80091fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009200:	0800921d 	.word	0x0800921d
 8009204:	08009235 	.word	0x08009235
 8009208:	08009275 	.word	0x08009275
 800920c:	0800944b 	.word	0x0800944b
 8009210:	0800944b 	.word	0x0800944b
 8009214:	080093eb 	.word	0x080093eb
 8009218:	08009417 	.word	0x08009417
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	687a      	ldr	r2, [r7, #4]
 8009226:	7c12      	ldrb	r2, [r2, #16]
 8009228:	f107 0108 	add.w	r1, r7, #8
 800922c:	4610      	mov	r0, r2
 800922e:	4798      	blx	r3
 8009230:	60f8      	str	r0, [r7, #12]
    break;
 8009232:	e112      	b.n	800945a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7c1b      	ldrb	r3, [r3, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d10d      	bne.n	8009258 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009244:	f107 0208 	add.w	r2, r7, #8
 8009248:	4610      	mov	r0, r2
 800924a:	4798      	blx	r3
 800924c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	3301      	adds	r3, #1
 8009252:	2202      	movs	r2, #2
 8009254:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8009256:	e100      	b.n	800945a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800925e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009260:	f107 0208 	add.w	r2, r7, #8
 8009264:	4610      	mov	r0, r2
 8009266:	4798      	blx	r3
 8009268:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	3301      	adds	r3, #1
 800926e:	2202      	movs	r2, #2
 8009270:	701a      	strb	r2, [r3, #0]
    break;
 8009272:	e0f2      	b.n	800945a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	885b      	ldrh	r3, [r3, #2]
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b05      	cmp	r3, #5
 800927c:	f200 80ac 	bhi.w	80093d8 <USBD_GetDescriptor+0x204>
 8009280:	a201      	add	r2, pc, #4	; (adr r2, 8009288 <USBD_GetDescriptor+0xb4>)
 8009282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009286:	bf00      	nop
 8009288:	080092a1 	.word	0x080092a1
 800928c:	080092d5 	.word	0x080092d5
 8009290:	08009309 	.word	0x08009309
 8009294:	0800933d 	.word	0x0800933d
 8009298:	08009371 	.word	0x08009371
 800929c:	080093a5 	.word	0x080093a5
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092a6:	685b      	ldr	r3, [r3, #4]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d00b      	beq.n	80092c4 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	687a      	ldr	r2, [r7, #4]
 80092b6:	7c12      	ldrb	r2, [r2, #16]
 80092b8:	f107 0108 	add.w	r1, r7, #8
 80092bc:	4610      	mov	r0, r2
 80092be:	4798      	blx	r3
 80092c0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092c2:	e091      	b.n	80093e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80092c4:	6839      	ldr	r1, [r7, #0]
 80092c6:	6878      	ldr	r0, [r7, #4]
 80092c8:	f000 faaa 	bl	8009820 <USBD_CtlError>
        err++;
 80092cc:	7afb      	ldrb	r3, [r7, #11]
 80092ce:	3301      	adds	r3, #1
 80092d0:	72fb      	strb	r3, [r7, #11]
      break;
 80092d2:	e089      	b.n	80093e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092da:	689b      	ldr	r3, [r3, #8]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d00b      	beq.n	80092f8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	687a      	ldr	r2, [r7, #4]
 80092ea:	7c12      	ldrb	r2, [r2, #16]
 80092ec:	f107 0108 	add.w	r1, r7, #8
 80092f0:	4610      	mov	r0, r2
 80092f2:	4798      	blx	r3
 80092f4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092f6:	e077      	b.n	80093e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80092f8:	6839      	ldr	r1, [r7, #0]
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f000 fa90 	bl	8009820 <USBD_CtlError>
        err++;
 8009300:	7afb      	ldrb	r3, [r7, #11]
 8009302:	3301      	adds	r3, #1
 8009304:	72fb      	strb	r3, [r7, #11]
      break;
 8009306:	e06f      	b.n	80093e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800930e:	68db      	ldr	r3, [r3, #12]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00b      	beq.n	800932c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	687a      	ldr	r2, [r7, #4]
 800931e:	7c12      	ldrb	r2, [r2, #16]
 8009320:	f107 0108 	add.w	r1, r7, #8
 8009324:	4610      	mov	r0, r2
 8009326:	4798      	blx	r3
 8009328:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800932a:	e05d      	b.n	80093e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 fa76 	bl	8009820 <USBD_CtlError>
        err++;
 8009334:	7afb      	ldrb	r3, [r7, #11]
 8009336:	3301      	adds	r3, #1
 8009338:	72fb      	strb	r3, [r7, #11]
      break;
 800933a:	e055      	b.n	80093e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009342:	691b      	ldr	r3, [r3, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800934e:	691b      	ldr	r3, [r3, #16]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	7c12      	ldrb	r2, [r2, #16]
 8009354:	f107 0108 	add.w	r1, r7, #8
 8009358:	4610      	mov	r0, r2
 800935a:	4798      	blx	r3
 800935c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800935e:	e043      	b.n	80093e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fa5c 	bl	8009820 <USBD_CtlError>
        err++;
 8009368:	7afb      	ldrb	r3, [r7, #11]
 800936a:	3301      	adds	r3, #1
 800936c:	72fb      	strb	r3, [r7, #11]
      break;
 800936e:	e03b      	b.n	80093e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009376:	695b      	ldr	r3, [r3, #20]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d00b      	beq.n	8009394 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009382:	695b      	ldr	r3, [r3, #20]
 8009384:	687a      	ldr	r2, [r7, #4]
 8009386:	7c12      	ldrb	r2, [r2, #16]
 8009388:	f107 0108 	add.w	r1, r7, #8
 800938c:	4610      	mov	r0, r2
 800938e:	4798      	blx	r3
 8009390:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009392:	e029      	b.n	80093e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009394:	6839      	ldr	r1, [r7, #0]
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 fa42 	bl	8009820 <USBD_CtlError>
        err++;
 800939c:	7afb      	ldrb	r3, [r7, #11]
 800939e:	3301      	adds	r3, #1
 80093a0:	72fb      	strb	r3, [r7, #11]
      break;
 80093a2:	e021      	b.n	80093e8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093aa:	699b      	ldr	r3, [r3, #24]
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d00b      	beq.n	80093c8 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	687a      	ldr	r2, [r7, #4]
 80093ba:	7c12      	ldrb	r2, [r2, #16]
 80093bc:	f107 0108 	add.w	r1, r7, #8
 80093c0:	4610      	mov	r0, r2
 80093c2:	4798      	blx	r3
 80093c4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80093c6:	e00f      	b.n	80093e8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80093c8:	6839      	ldr	r1, [r7, #0]
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fa28 	bl	8009820 <USBD_CtlError>
        err++;
 80093d0:	7afb      	ldrb	r3, [r7, #11]
 80093d2:	3301      	adds	r3, #1
 80093d4:	72fb      	strb	r3, [r7, #11]
      break;
 80093d6:	e007      	b.n	80093e8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80093d8:	6839      	ldr	r1, [r7, #0]
 80093da:	6878      	ldr	r0, [r7, #4]
 80093dc:	f000 fa20 	bl	8009820 <USBD_CtlError>
      err++;
 80093e0:	7afb      	ldrb	r3, [r7, #11]
 80093e2:	3301      	adds	r3, #1
 80093e4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80093e6:	bf00      	nop
    }
    break;
 80093e8:	e037      	b.n	800945a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7c1b      	ldrb	r3, [r3, #16]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d109      	bne.n	8009406 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80093f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093fa:	f107 0208 	add.w	r2, r7, #8
 80093fe:	4610      	mov	r0, r2
 8009400:	4798      	blx	r3
 8009402:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009404:	e029      	b.n	800945a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8009406:	6839      	ldr	r1, [r7, #0]
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f000 fa09 	bl	8009820 <USBD_CtlError>
      err++;
 800940e:	7afb      	ldrb	r3, [r7, #11]
 8009410:	3301      	adds	r3, #1
 8009412:	72fb      	strb	r3, [r7, #11]
    break;
 8009414:	e021      	b.n	800945a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7c1b      	ldrb	r3, [r3, #16]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10d      	bne.n	800943a <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009426:	f107 0208 	add.w	r2, r7, #8
 800942a:	4610      	mov	r0, r2
 800942c:	4798      	blx	r3
 800942e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	3301      	adds	r3, #1
 8009434:	2207      	movs	r2, #7
 8009436:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8009438:	e00f      	b.n	800945a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800943a:	6839      	ldr	r1, [r7, #0]
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f000 f9ef 	bl	8009820 <USBD_CtlError>
      err++;
 8009442:	7afb      	ldrb	r3, [r7, #11]
 8009444:	3301      	adds	r3, #1
 8009446:	72fb      	strb	r3, [r7, #11]
    break;
 8009448:	e007      	b.n	800945a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800944a:	6839      	ldr	r1, [r7, #0]
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f000 f9e7 	bl	8009820 <USBD_CtlError>
    err++;
 8009452:	7afb      	ldrb	r3, [r7, #11]
 8009454:	3301      	adds	r3, #1
 8009456:	72fb      	strb	r3, [r7, #11]
    break;
 8009458:	bf00      	nop
  }

  if (err != 0U)
 800945a:	7afb      	ldrb	r3, [r7, #11]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d11e      	bne.n	800949e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	88db      	ldrh	r3, [r3, #6]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d016      	beq.n	8009496 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009468:	893b      	ldrh	r3, [r7, #8]
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00e      	beq.n	800948c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	88da      	ldrh	r2, [r3, #6]
 8009472:	893b      	ldrh	r3, [r7, #8]
 8009474:	4293      	cmp	r3, r2
 8009476:	bf28      	it	cs
 8009478:	4613      	movcs	r3, r2
 800947a:	b29b      	uxth	r3, r3
 800947c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800947e:	893b      	ldrh	r3, [r7, #8]
 8009480:	461a      	mov	r2, r3
 8009482:	68f9      	ldr	r1, [r7, #12]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 fa3c 	bl	8009902 <USBD_CtlSendData>
 800948a:	e009      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f9c6 	bl	8009820 <USBD_CtlError>
 8009494:	e004      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f000 fa8d 	bl	80099b6 <USBD_CtlSendStatus>
 800949c:	e000      	b.n	80094a0 <USBD_GetDescriptor+0x2cc>
    return;
 800949e:	bf00      	nop
    }
  }
}
 80094a0:	3710      	adds	r7, #16
 80094a2:	46bd      	mov	sp, r7
 80094a4:	bd80      	pop	{r7, pc}
 80094a6:	bf00      	nop

080094a8 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094a8:	b580      	push	{r7, lr}
 80094aa:	b084      	sub	sp, #16
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
 80094b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80094b2:	683b      	ldr	r3, [r7, #0]
 80094b4:	889b      	ldrh	r3, [r3, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d130      	bne.n	800951c <USBD_SetAddress+0x74>
 80094ba:	683b      	ldr	r3, [r7, #0]
 80094bc:	88db      	ldrh	r3, [r3, #6]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d12c      	bne.n	800951c <USBD_SetAddress+0x74>
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	885b      	ldrh	r3, [r3, #2]
 80094c6:	2b7f      	cmp	r3, #127	; 0x7f
 80094c8:	d828      	bhi.n	800951c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	885b      	ldrh	r3, [r3, #2]
 80094ce:	b2db      	uxtb	r3, r3
 80094d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094dc:	2b03      	cmp	r3, #3
 80094de:	d104      	bne.n	80094ea <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80094e0:	6839      	ldr	r1, [r7, #0]
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f000 f99c 	bl	8009820 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e8:	e01c      	b.n	8009524 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	7bfa      	ldrb	r2, [r7, #15]
 80094ee:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	4619      	mov	r1, r3
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 febe 	bl	800a278 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 fa5a 	bl	80099b6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009502:	7bfb      	ldrb	r3, [r7, #15]
 8009504:	2b00      	cmp	r3, #0
 8009506:	d004      	beq.n	8009512 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009510:	e008      	b.n	8009524 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800951a:	e003      	b.n	8009524 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800951c:	6839      	ldr	r1, [r7, #0]
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f97e 	bl	8009820 <USBD_CtlError>
  }
}
 8009524:	bf00      	nop
 8009526:	3710      	adds	r7, #16
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b084      	sub	sp, #16
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009536:	2300      	movs	r3, #0
 8009538:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	885b      	ldrh	r3, [r3, #2]
 800953e:	b2da      	uxtb	r2, r3
 8009540:	4b4b      	ldr	r3, [pc, #300]	; (8009670 <USBD_SetConfig+0x144>)
 8009542:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009544:	4b4a      	ldr	r3, [pc, #296]	; (8009670 <USBD_SetConfig+0x144>)
 8009546:	781b      	ldrb	r3, [r3, #0]
 8009548:	2b01      	cmp	r3, #1
 800954a:	d905      	bls.n	8009558 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800954c:	6839      	ldr	r1, [r7, #0]
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f966 	bl	8009820 <USBD_CtlError>
    return USBD_FAIL;
 8009554:	2303      	movs	r3, #3
 8009556:	e087      	b.n	8009668 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800955e:	2b02      	cmp	r3, #2
 8009560:	d002      	beq.n	8009568 <USBD_SetConfig+0x3c>
 8009562:	2b03      	cmp	r3, #3
 8009564:	d025      	beq.n	80095b2 <USBD_SetConfig+0x86>
 8009566:	e071      	b.n	800964c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009568:	4b41      	ldr	r3, [pc, #260]	; (8009670 <USBD_SetConfig+0x144>)
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d01c      	beq.n	80095aa <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009570:	4b3f      	ldr	r3, [pc, #252]	; (8009670 <USBD_SetConfig+0x144>)
 8009572:	781b      	ldrb	r3, [r3, #0]
 8009574:	461a      	mov	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800957a:	4b3d      	ldr	r3, [pc, #244]	; (8009670 <USBD_SetConfig+0x144>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	4619      	mov	r1, r3
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7ff f9a7 	bl	80088d4 <USBD_SetClassConfig>
 8009586:	4603      	mov	r3, r0
 8009588:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800958a:	7bfb      	ldrb	r3, [r7, #15]
 800958c:	2b00      	cmp	r3, #0
 800958e:	d004      	beq.n	800959a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009590:	6839      	ldr	r1, [r7, #0]
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f000 f944 	bl	8009820 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009598:	e065      	b.n	8009666 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fa0b 	bl	80099b6 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2203      	movs	r2, #3
 80095a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80095a8:	e05d      	b.n	8009666 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80095aa:	6878      	ldr	r0, [r7, #4]
 80095ac:	f000 fa03 	bl	80099b6 <USBD_CtlSendStatus>
    break;
 80095b0:	e059      	b.n	8009666 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80095b2:	4b2f      	ldr	r3, [pc, #188]	; (8009670 <USBD_SetConfig+0x144>)
 80095b4:	781b      	ldrb	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d112      	bne.n	80095e0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	2202      	movs	r2, #2
 80095be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 80095c2:	4b2b      	ldr	r3, [pc, #172]	; (8009670 <USBD_SetConfig+0x144>)
 80095c4:	781b      	ldrb	r3, [r3, #0]
 80095c6:	461a      	mov	r2, r3
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80095cc:	4b28      	ldr	r3, [pc, #160]	; (8009670 <USBD_SetConfig+0x144>)
 80095ce:	781b      	ldrb	r3, [r3, #0]
 80095d0:	4619      	mov	r1, r3
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f7ff f99a 	bl	800890c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 f9ec 	bl	80099b6 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80095de:	e042      	b.n	8009666 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80095e0:	4b23      	ldr	r3, [pc, #140]	; (8009670 <USBD_SetConfig+0x144>)
 80095e2:	781b      	ldrb	r3, [r3, #0]
 80095e4:	461a      	mov	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	429a      	cmp	r2, r3
 80095ec:	d02a      	beq.n	8009644 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f7ff f988 	bl	800890c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80095fc:	4b1c      	ldr	r3, [pc, #112]	; (8009670 <USBD_SetConfig+0x144>)
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	461a      	mov	r2, r3
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8009606:	4b1a      	ldr	r3, [pc, #104]	; (8009670 <USBD_SetConfig+0x144>)
 8009608:	781b      	ldrb	r3, [r3, #0]
 800960a:	4619      	mov	r1, r3
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7ff f961 	bl	80088d4 <USBD_SetClassConfig>
 8009612:	4603      	mov	r3, r0
 8009614:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8009616:	7bfb      	ldrb	r3, [r7, #15]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d00f      	beq.n	800963c <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800961c:	6839      	ldr	r1, [r7, #0]
 800961e:	6878      	ldr	r0, [r7, #4]
 8009620:	f000 f8fe 	bl	8009820 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	b2db      	uxtb	r3, r3
 800962a:	4619      	mov	r1, r3
 800962c:	6878      	ldr	r0, [r7, #4]
 800962e:	f7ff f96d 	bl	800890c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2202      	movs	r2, #2
 8009636:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800963a:	e014      	b.n	8009666 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 f9ba 	bl	80099b6 <USBD_CtlSendStatus>
    break;
 8009642:	e010      	b.n	8009666 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009644:	6878      	ldr	r0, [r7, #4]
 8009646:	f000 f9b6 	bl	80099b6 <USBD_CtlSendStatus>
    break;
 800964a:	e00c      	b.n	8009666 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800964c:	6839      	ldr	r1, [r7, #0]
 800964e:	6878      	ldr	r0, [r7, #4]
 8009650:	f000 f8e6 	bl	8009820 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009654:	4b06      	ldr	r3, [pc, #24]	; (8009670 <USBD_SetConfig+0x144>)
 8009656:	781b      	ldrb	r3, [r3, #0]
 8009658:	4619      	mov	r1, r3
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f7ff f956 	bl	800890c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009660:	2303      	movs	r3, #3
 8009662:	73fb      	strb	r3, [r7, #15]
    break;
 8009664:	bf00      	nop
  }

  return ret;
 8009666:	7bfb      	ldrb	r3, [r7, #15]
}
 8009668:	4618      	mov	r0, r3
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}
 8009670:	20000224 	.word	0x20000224

08009674 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b082      	sub	sp, #8
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800967e:	683b      	ldr	r3, [r7, #0]
 8009680:	88db      	ldrh	r3, [r3, #6]
 8009682:	2b01      	cmp	r3, #1
 8009684:	d004      	beq.n	8009690 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009686:	6839      	ldr	r1, [r7, #0]
 8009688:	6878      	ldr	r0, [r7, #4]
 800968a:	f000 f8c9 	bl	8009820 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800968e:	e021      	b.n	80096d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009696:	2b01      	cmp	r3, #1
 8009698:	db17      	blt.n	80096ca <USBD_GetConfig+0x56>
 800969a:	2b02      	cmp	r3, #2
 800969c:	dd02      	ble.n	80096a4 <USBD_GetConfig+0x30>
 800969e:	2b03      	cmp	r3, #3
 80096a0:	d00b      	beq.n	80096ba <USBD_GetConfig+0x46>
 80096a2:	e012      	b.n	80096ca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	3308      	adds	r3, #8
 80096ae:	2201      	movs	r2, #1
 80096b0:	4619      	mov	r1, r3
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f925 	bl	8009902 <USBD_CtlSendData>
      break;
 80096b8:	e00c      	b.n	80096d4 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	3304      	adds	r3, #4
 80096be:	2201      	movs	r2, #1
 80096c0:	4619      	mov	r1, r3
 80096c2:	6878      	ldr	r0, [r7, #4]
 80096c4:	f000 f91d 	bl	8009902 <USBD_CtlSendData>
      break;
 80096c8:	e004      	b.n	80096d4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80096ca:	6839      	ldr	r1, [r7, #0]
 80096cc:	6878      	ldr	r0, [r7, #4]
 80096ce:	f000 f8a7 	bl	8009820 <USBD_CtlError>
      break;
 80096d2:	bf00      	nop
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096ec:	3b01      	subs	r3, #1
 80096ee:	2b02      	cmp	r3, #2
 80096f0:	d81e      	bhi.n	8009730 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	88db      	ldrh	r3, [r3, #6]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d004      	beq.n	8009704 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80096fa:	6839      	ldr	r1, [r7, #0]
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 f88f 	bl	8009820 <USBD_CtlError>
      break;
 8009702:	e01a      	b.n	800973a <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2201      	movs	r2, #1
 8009708:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009710:	2b00      	cmp	r3, #0
 8009712:	d005      	beq.n	8009720 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	f043 0202 	orr.w	r2, r3, #2
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	330c      	adds	r3, #12
 8009724:	2202      	movs	r2, #2
 8009726:	4619      	mov	r1, r3
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 f8ea 	bl	8009902 <USBD_CtlSendData>
    break;
 800972e:	e004      	b.n	800973a <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 f874 	bl	8009820 <USBD_CtlError>
    break;
 8009738:	bf00      	nop
  }
}
 800973a:	bf00      	nop
 800973c:	3708      	adds	r7, #8
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b082      	sub	sp, #8
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	885b      	ldrh	r3, [r3, #2]
 8009750:	2b01      	cmp	r3, #1
 8009752:	d106      	bne.n	8009762 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	2201      	movs	r2, #1
 8009758:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	f000 f92a 	bl	80099b6 <USBD_CtlSendStatus>
  }
}
 8009762:	bf00      	nop
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b082      	sub	sp, #8
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
 8009772:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800977a:	3b01      	subs	r3, #1
 800977c:	2b02      	cmp	r3, #2
 800977e:	d80b      	bhi.n	8009798 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	885b      	ldrh	r3, [r3, #2]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d10c      	bne.n	80097a2 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 f910 	bl	80099b6 <USBD_CtlSendStatus>
      }
      break;
 8009796:	e004      	b.n	80097a2 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f000 f840 	bl	8009820 <USBD_CtlError>
      break;
 80097a0:	e000      	b.n	80097a4 <USBD_ClrFeature+0x3a>
      break;
 80097a2:	bf00      	nop
  }
}
 80097a4:	bf00      	nop
 80097a6:	3708      	adds	r7, #8
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b084      	sub	sp, #16
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	6078      	str	r0, [r7, #4]
 80097b4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	781a      	ldrb	r2, [r3, #0]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	3301      	adds	r3, #1
 80097c6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	781a      	ldrb	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	3301      	adds	r3, #1
 80097d4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f7ff fad3 	bl	8008d82 <SWAPBYTE>
 80097dc:	4603      	mov	r3, r0
 80097de:	461a      	mov	r2, r3
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	3301      	adds	r3, #1
 80097e8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3301      	adds	r3, #1
 80097ee:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80097f0:	68f8      	ldr	r0, [r7, #12]
 80097f2:	f7ff fac6 	bl	8008d82 <SWAPBYTE>
 80097f6:	4603      	mov	r3, r0
 80097f8:	461a      	mov	r2, r3
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3301      	adds	r3, #1
 8009802:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	3301      	adds	r3, #1
 8009808:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f7ff fab9 	bl	8008d82 <SWAPBYTE>
 8009810:	4603      	mov	r3, r0
 8009812:	461a      	mov	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	80da      	strh	r2, [r3, #6]
}
 8009818:	bf00      	nop
 800981a:	3710      	adds	r7, #16
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b082      	sub	sp, #8
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
 8009828:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800982a:	2180      	movs	r1, #128	; 0x80
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fcb9 	bl	800a1a4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009832:	2100      	movs	r1, #0
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f000 fcb5 	bl	800a1a4 <USBD_LL_StallEP>
}
 800983a:	bf00      	nop
 800983c:	3708      	adds	r7, #8
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}

08009842 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009842:	b580      	push	{r7, lr}
 8009844:	b086      	sub	sp, #24
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d036      	beq.n	80098c6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800985c:	6938      	ldr	r0, [r7, #16]
 800985e:	f000 f836 	bl	80098ce <USBD_GetLen>
 8009862:	4603      	mov	r3, r0
 8009864:	3301      	adds	r3, #1
 8009866:	b29b      	uxth	r3, r3
 8009868:	005b      	lsls	r3, r3, #1
 800986a:	b29a      	uxth	r2, r3
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009870:	7dfb      	ldrb	r3, [r7, #23]
 8009872:	68ba      	ldr	r2, [r7, #8]
 8009874:	4413      	add	r3, r2
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	7812      	ldrb	r2, [r2, #0]
 800987a:	701a      	strb	r2, [r3, #0]
  idx++;
 800987c:	7dfb      	ldrb	r3, [r7, #23]
 800987e:	3301      	adds	r3, #1
 8009880:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009882:	7dfb      	ldrb	r3, [r7, #23]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	4413      	add	r3, r2
 8009888:	2203      	movs	r2, #3
 800988a:	701a      	strb	r2, [r3, #0]
  idx++;
 800988c:	7dfb      	ldrb	r3, [r7, #23]
 800988e:	3301      	adds	r3, #1
 8009890:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009892:	e013      	b.n	80098bc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009894:	7dfb      	ldrb	r3, [r7, #23]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	4413      	add	r3, r2
 800989a:	693a      	ldr	r2, [r7, #16]
 800989c:	7812      	ldrb	r2, [r2, #0]
 800989e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	3301      	adds	r3, #1
 80098a4:	613b      	str	r3, [r7, #16]
    idx++;
 80098a6:	7dfb      	ldrb	r3, [r7, #23]
 80098a8:	3301      	adds	r3, #1
 80098aa:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80098ac:	7dfb      	ldrb	r3, [r7, #23]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	4413      	add	r3, r2
 80098b2:	2200      	movs	r2, #0
 80098b4:	701a      	strb	r2, [r3, #0]
    idx++;
 80098b6:	7dfb      	ldrb	r3, [r7, #23]
 80098b8:	3301      	adds	r3, #1
 80098ba:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e7      	bne.n	8009894 <USBD_GetString+0x52>
 80098c4:	e000      	b.n	80098c8 <USBD_GetString+0x86>
    return;
 80098c6:	bf00      	nop
  }
}
 80098c8:	3718      	adds	r7, #24
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80098ce:	b480      	push	{r7}
 80098d0:	b085      	sub	sp, #20
 80098d2:	af00      	add	r7, sp, #0
 80098d4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80098de:	e005      	b.n	80098ec <USBD_GetLen+0x1e>
  {
    len++;
 80098e0:	7bfb      	ldrb	r3, [r7, #15]
 80098e2:	3301      	adds	r3, #1
 80098e4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	3301      	adds	r3, #1
 80098ea:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d1f5      	bne.n	80098e0 <USBD_GetLen+0x12>
  }

  return len;
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3714      	adds	r7, #20
 80098fa:	46bd      	mov	sp, r7
 80098fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009900:	4770      	bx	lr

08009902 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009902:	b580      	push	{r7, lr}
 8009904:	b084      	sub	sp, #16
 8009906:	af00      	add	r7, sp, #0
 8009908:	60f8      	str	r0, [r7, #12]
 800990a:	60b9      	str	r1, [r7, #8]
 800990c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	2202      	movs	r2, #2
 8009912:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	687a      	ldr	r2, [r7, #4]
 800991a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	68ba      	ldr	r2, [r7, #8]
 8009926:	2100      	movs	r1, #0
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f000 fcc4 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 800992e:	2300      	movs	r3, #0
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	68ba      	ldr	r2, [r7, #8]
 8009948:	2100      	movs	r1, #0
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f000 fcb3 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 8009950:	2300      	movs	r3, #0
}
 8009952:	4618      	mov	r0, r3
 8009954:	3710      	adds	r7, #16
 8009956:	46bd      	mov	sp, r7
 8009958:	bd80      	pop	{r7, pc}

0800995a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b084      	sub	sp, #16
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	2203      	movs	r2, #3
 800996a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	687a      	ldr	r2, [r7, #4]
 800997a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	68ba      	ldr	r2, [r7, #8]
 8009982:	2100      	movs	r1, #0
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 fcb7 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800998a:	2300      	movs	r3, #0
}
 800998c:	4618      	mov	r0, r3
 800998e:	3710      	adds	r7, #16
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}

08009994 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009994:	b580      	push	{r7, lr}
 8009996:	b084      	sub	sp, #16
 8009998:	af00      	add	r7, sp, #0
 800999a:	60f8      	str	r0, [r7, #12]
 800999c:	60b9      	str	r1, [r7, #8]
 800999e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	68ba      	ldr	r2, [r7, #8]
 80099a4:	2100      	movs	r1, #0
 80099a6:	68f8      	ldr	r0, [r7, #12]
 80099a8:	f000 fca6 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}

080099b6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80099b6:	b580      	push	{r7, lr}
 80099b8:	b082      	sub	sp, #8
 80099ba:	af00      	add	r7, sp, #0
 80099bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	2204      	movs	r2, #4
 80099c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80099c6:	2300      	movs	r3, #0
 80099c8:	2200      	movs	r2, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fc72 	bl	800a2b6 <USBD_LL_Transmit>

  return USBD_OK;
 80099d2:	2300      	movs	r3, #0
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b082      	sub	sp, #8
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2205      	movs	r2, #5
 80099e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80099ec:	2300      	movs	r3, #0
 80099ee:	2200      	movs	r2, #0
 80099f0:	2100      	movs	r1, #0
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fc80 	bl	800a2f8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80099f8:	2300      	movs	r3, #0
}
 80099fa:	4618      	mov	r0, r3
 80099fc:	3708      	adds	r7, #8
 80099fe:	46bd      	mov	sp, r7
 8009a00:	bd80      	pop	{r7, pc}
	...

08009a04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	4912      	ldr	r1, [pc, #72]	; (8009a54 <MX_USB_DEVICE_Init+0x50>)
 8009a0c:	4812      	ldr	r0, [pc, #72]	; (8009a58 <MX_USB_DEVICE_Init+0x54>)
 8009a0e:	f7fe fef3 	bl	80087f8 <USBD_Init>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009a18:	f7f7 fe7e 	bl	8001718 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009a1c:	490f      	ldr	r1, [pc, #60]	; (8009a5c <MX_USB_DEVICE_Init+0x58>)
 8009a1e:	480e      	ldr	r0, [pc, #56]	; (8009a58 <MX_USB_DEVICE_Init+0x54>)
 8009a20:	f7fe ff20 	bl	8008864 <USBD_RegisterClass>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d001      	beq.n	8009a2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009a2a:	f7f7 fe75 	bl	8001718 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009a2e:	490c      	ldr	r1, [pc, #48]	; (8009a60 <MX_USB_DEVICE_Init+0x5c>)
 8009a30:	4809      	ldr	r0, [pc, #36]	; (8009a58 <MX_USB_DEVICE_Init+0x54>)
 8009a32:	f7fe fe75 	bl	8008720 <USBD_CDC_RegisterInterface>
 8009a36:	4603      	mov	r3, r0
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d001      	beq.n	8009a40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009a3c:	f7f7 fe6c 	bl	8001718 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009a40:	4805      	ldr	r0, [pc, #20]	; (8009a58 <MX_USB_DEVICE_Init+0x54>)
 8009a42:	f7fe ff30 	bl	80088a6 <USBD_Start>
 8009a46:	4603      	mov	r3, r0
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d001      	beq.n	8009a50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009a4c:	f7f7 fe64 	bl	8001718 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009a50:	bf00      	nop
 8009a52:	bd80      	pop	{r7, pc}
 8009a54:	20000150 	.word	0x20000150
 8009a58:	20000704 	.word	0x20000704
 8009a5c:	20000038 	.word	0x20000038
 8009a60:	2000013c 	.word	0x2000013c

08009a64 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4905      	ldr	r1, [pc, #20]	; (8009a80 <CDC_Init_FS+0x1c>)
 8009a6c:	4805      	ldr	r0, [pc, #20]	; (8009a84 <CDC_Init_FS+0x20>)
 8009a6e:	f7fe fe6c 	bl	800874a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009a72:	4905      	ldr	r1, [pc, #20]	; (8009a88 <CDC_Init_FS+0x24>)
 8009a74:	4803      	ldr	r0, [pc, #12]	; (8009a84 <CDC_Init_FS+0x20>)
 8009a76:	f7fe fe81 	bl	800877c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009a7a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009a7c:	4618      	mov	r0, r3
 8009a7e:	bd80      	pop	{r7, pc}
 8009a80:	200011d4 	.word	0x200011d4
 8009a84:	20000704 	.word	0x20000704
 8009a88:	200009d4 	.word	0x200009d4

08009a8c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009a8c:	b480      	push	{r7}
 8009a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009a90:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	6039      	str	r1, [r7, #0]
 8009aa6:	71fb      	strb	r3, [r7, #7]
 8009aa8:	4613      	mov	r3, r2
 8009aaa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009aac:	79fb      	ldrb	r3, [r7, #7]
 8009aae:	2b23      	cmp	r3, #35	; 0x23
 8009ab0:	d84a      	bhi.n	8009b48 <CDC_Control_FS+0xac>
 8009ab2:	a201      	add	r2, pc, #4	; (adr r2, 8009ab8 <CDC_Control_FS+0x1c>)
 8009ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab8:	08009b49 	.word	0x08009b49
 8009abc:	08009b49 	.word	0x08009b49
 8009ac0:	08009b49 	.word	0x08009b49
 8009ac4:	08009b49 	.word	0x08009b49
 8009ac8:	08009b49 	.word	0x08009b49
 8009acc:	08009b49 	.word	0x08009b49
 8009ad0:	08009b49 	.word	0x08009b49
 8009ad4:	08009b49 	.word	0x08009b49
 8009ad8:	08009b49 	.word	0x08009b49
 8009adc:	08009b49 	.word	0x08009b49
 8009ae0:	08009b49 	.word	0x08009b49
 8009ae4:	08009b49 	.word	0x08009b49
 8009ae8:	08009b49 	.word	0x08009b49
 8009aec:	08009b49 	.word	0x08009b49
 8009af0:	08009b49 	.word	0x08009b49
 8009af4:	08009b49 	.word	0x08009b49
 8009af8:	08009b49 	.word	0x08009b49
 8009afc:	08009b49 	.word	0x08009b49
 8009b00:	08009b49 	.word	0x08009b49
 8009b04:	08009b49 	.word	0x08009b49
 8009b08:	08009b49 	.word	0x08009b49
 8009b0c:	08009b49 	.word	0x08009b49
 8009b10:	08009b49 	.word	0x08009b49
 8009b14:	08009b49 	.word	0x08009b49
 8009b18:	08009b49 	.word	0x08009b49
 8009b1c:	08009b49 	.word	0x08009b49
 8009b20:	08009b49 	.word	0x08009b49
 8009b24:	08009b49 	.word	0x08009b49
 8009b28:	08009b49 	.word	0x08009b49
 8009b2c:	08009b49 	.word	0x08009b49
 8009b30:	08009b49 	.word	0x08009b49
 8009b34:	08009b49 	.word	0x08009b49
 8009b38:	08009b49 	.word	0x08009b49
 8009b3c:	08009b49 	.word	0x08009b49
 8009b40:	08009b49 	.word	0x08009b49
 8009b44:	08009b49 	.word	0x08009b49
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009b48:	bf00      	nop
  }

  return (USBD_OK);
 8009b4a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	370c      	adds	r7, #12
 8009b50:	46bd      	mov	sp, r7
 8009b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b56:	4770      	bx	lr

08009b58 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009b58:	b580      	push	{r7, lr}
 8009b5a:	b082      	sub	sp, #8
 8009b5c:	af00      	add	r7, sp, #0
 8009b5e:	6078      	str	r0, [r7, #4]
 8009b60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009b62:	6879      	ldr	r1, [r7, #4]
 8009b64:	4805      	ldr	r0, [pc, #20]	; (8009b7c <CDC_Receive_FS+0x24>)
 8009b66:	f7fe fe09 	bl	800877c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009b6a:	4804      	ldr	r0, [pc, #16]	; (8009b7c <CDC_Receive_FS+0x24>)
 8009b6c:	f7fe fe1a 	bl	80087a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009b70:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20000704 	.word	0x20000704

08009b80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	4613      	mov	r3, r2
 8009b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009b92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009b96:	4618      	mov	r0, r3
 8009b98:	371c      	adds	r7, #28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
	...

08009ba4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	4603      	mov	r3, r0
 8009bac:	6039      	str	r1, [r7, #0]
 8009bae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	2212      	movs	r2, #18
 8009bb4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009bb6:	4b03      	ldr	r3, [pc, #12]	; (8009bc4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr
 8009bc4:	2000016c 	.word	0x2000016c

08009bc8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	4603      	mov	r3, r0
 8009bd0:	6039      	str	r1, [r7, #0]
 8009bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	2204      	movs	r2, #4
 8009bd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009bda:	4b03      	ldr	r3, [pc, #12]	; (8009be8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009bdc:	4618      	mov	r0, r3
 8009bde:	370c      	adds	r7, #12
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	20000180 	.word	0x20000180

08009bec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009bec:	b580      	push	{r7, lr}
 8009bee:	b082      	sub	sp, #8
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	4603      	mov	r3, r0
 8009bf4:	6039      	str	r1, [r7, #0]
 8009bf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bf8:	79fb      	ldrb	r3, [r7, #7]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d105      	bne.n	8009c0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009bfe:	683a      	ldr	r2, [r7, #0]
 8009c00:	4907      	ldr	r1, [pc, #28]	; (8009c20 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c02:	4808      	ldr	r0, [pc, #32]	; (8009c24 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c04:	f7ff fe1d 	bl	8009842 <USBD_GetString>
 8009c08:	e004      	b.n	8009c14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009c0a:	683a      	ldr	r2, [r7, #0]
 8009c0c:	4904      	ldr	r1, [pc, #16]	; (8009c20 <USBD_FS_ProductStrDescriptor+0x34>)
 8009c0e:	4805      	ldr	r0, [pc, #20]	; (8009c24 <USBD_FS_ProductStrDescriptor+0x38>)
 8009c10:	f7ff fe17 	bl	8009842 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c14:	4b02      	ldr	r3, [pc, #8]	; (8009c20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	3708      	adds	r7, #8
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}
 8009c1e:	bf00      	nop
 8009c20:	200019d4 	.word	0x200019d4
 8009c24:	0800b5f0 	.word	0x0800b5f0

08009c28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	4603      	mov	r3, r0
 8009c30:	6039      	str	r1, [r7, #0]
 8009c32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009c34:	683a      	ldr	r2, [r7, #0]
 8009c36:	4904      	ldr	r1, [pc, #16]	; (8009c48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009c38:	4804      	ldr	r0, [pc, #16]	; (8009c4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8009c3a:	f7ff fe02 	bl	8009842 <USBD_GetString>
  return USBD_StrDesc;
 8009c3e:	4b02      	ldr	r3, [pc, #8]	; (8009c48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009c40:	4618      	mov	r0, r3
 8009c42:	3708      	adds	r7, #8
 8009c44:	46bd      	mov	sp, r7
 8009c46:	bd80      	pop	{r7, pc}
 8009c48:	200019d4 	.word	0x200019d4
 8009c4c:	0800b608 	.word	0x0800b608

08009c50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	4603      	mov	r3, r0
 8009c58:	6039      	str	r1, [r7, #0]
 8009c5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009c5c:	683b      	ldr	r3, [r7, #0]
 8009c5e:	221a      	movs	r2, #26
 8009c60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009c62:	f000 f843 	bl	8009cec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009c66:	4b02      	ldr	r3, [pc, #8]	; (8009c70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}
 8009c70:	20000184 	.word	0x20000184

08009c74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b082      	sub	sp, #8
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	6039      	str	r1, [r7, #0]
 8009c7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009c80:	79fb      	ldrb	r3, [r7, #7]
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d105      	bne.n	8009c92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c86:	683a      	ldr	r2, [r7, #0]
 8009c88:	4907      	ldr	r1, [pc, #28]	; (8009ca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c8a:	4808      	ldr	r0, [pc, #32]	; (8009cac <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c8c:	f7ff fdd9 	bl	8009842 <USBD_GetString>
 8009c90:	e004      	b.n	8009c9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009c92:	683a      	ldr	r2, [r7, #0]
 8009c94:	4904      	ldr	r1, [pc, #16]	; (8009ca8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009c96:	4805      	ldr	r0, [pc, #20]	; (8009cac <USBD_FS_ConfigStrDescriptor+0x38>)
 8009c98:	f7ff fdd3 	bl	8009842 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c9c:	4b02      	ldr	r3, [pc, #8]	; (8009ca8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	3708      	adds	r7, #8
 8009ca2:	46bd      	mov	sp, r7
 8009ca4:	bd80      	pop	{r7, pc}
 8009ca6:	bf00      	nop
 8009ca8:	200019d4 	.word	0x200019d4
 8009cac:	0800b61c 	.word	0x0800b61c

08009cb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	4603      	mov	r3, r0
 8009cb8:	6039      	str	r1, [r7, #0]
 8009cba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009cbc:	79fb      	ldrb	r3, [r7, #7]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d105      	bne.n	8009cce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cc2:	683a      	ldr	r2, [r7, #0]
 8009cc4:	4907      	ldr	r1, [pc, #28]	; (8009ce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cc6:	4808      	ldr	r0, [pc, #32]	; (8009ce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cc8:	f7ff fdbb 	bl	8009842 <USBD_GetString>
 8009ccc:	e004      	b.n	8009cd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009cce:	683a      	ldr	r2, [r7, #0]
 8009cd0:	4904      	ldr	r1, [pc, #16]	; (8009ce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009cd2:	4805      	ldr	r0, [pc, #20]	; (8009ce8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009cd4:	f7ff fdb5 	bl	8009842 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009cd8:	4b02      	ldr	r3, [pc, #8]	; (8009ce4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
 8009ce2:	bf00      	nop
 8009ce4:	200019d4 	.word	0x200019d4
 8009ce8:	0800b628 	.word	0x0800b628

08009cec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b084      	sub	sp, #16
 8009cf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009cf2:	4b0f      	ldr	r3, [pc, #60]	; (8009d30 <Get_SerialNum+0x44>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009cf8:	4b0e      	ldr	r3, [pc, #56]	; (8009d34 <Get_SerialNum+0x48>)
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009cfe:	4b0e      	ldr	r3, [pc, #56]	; (8009d38 <Get_SerialNum+0x4c>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4413      	add	r3, r2
 8009d0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d009      	beq.n	8009d26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009d12:	2208      	movs	r2, #8
 8009d14:	4909      	ldr	r1, [pc, #36]	; (8009d3c <Get_SerialNum+0x50>)
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f814 	bl	8009d44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009d1c:	2204      	movs	r2, #4
 8009d1e:	4908      	ldr	r1, [pc, #32]	; (8009d40 <Get_SerialNum+0x54>)
 8009d20:	68b8      	ldr	r0, [r7, #8]
 8009d22:	f000 f80f 	bl	8009d44 <IntToUnicode>
  }
}
 8009d26:	bf00      	nop
 8009d28:	3710      	adds	r7, #16
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	bd80      	pop	{r7, pc}
 8009d2e:	bf00      	nop
 8009d30:	1fff7a10 	.word	0x1fff7a10
 8009d34:	1fff7a14 	.word	0x1fff7a14
 8009d38:	1fff7a18 	.word	0x1fff7a18
 8009d3c:	20000186 	.word	0x20000186
 8009d40:	20000196 	.word	0x20000196

08009d44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009d44:	b480      	push	{r7}
 8009d46:	b087      	sub	sp, #28
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	60f8      	str	r0, [r7, #12]
 8009d4c:	60b9      	str	r1, [r7, #8]
 8009d4e:	4613      	mov	r3, r2
 8009d50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009d52:	2300      	movs	r3, #0
 8009d54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009d56:	2300      	movs	r3, #0
 8009d58:	75fb      	strb	r3, [r7, #23]
 8009d5a:	e027      	b.n	8009dac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	0f1b      	lsrs	r3, r3, #28
 8009d60:	2b09      	cmp	r3, #9
 8009d62:	d80b      	bhi.n	8009d7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	0f1b      	lsrs	r3, r3, #28
 8009d68:	b2da      	uxtb	r2, r3
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	005b      	lsls	r3, r3, #1
 8009d6e:	4619      	mov	r1, r3
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	440b      	add	r3, r1
 8009d74:	3230      	adds	r2, #48	; 0x30
 8009d76:	b2d2      	uxtb	r2, r2
 8009d78:	701a      	strb	r2, [r3, #0]
 8009d7a:	e00a      	b.n	8009d92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	0f1b      	lsrs	r3, r3, #28
 8009d80:	b2da      	uxtb	r2, r3
 8009d82:	7dfb      	ldrb	r3, [r7, #23]
 8009d84:	005b      	lsls	r3, r3, #1
 8009d86:	4619      	mov	r1, r3
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	440b      	add	r3, r1
 8009d8c:	3237      	adds	r2, #55	; 0x37
 8009d8e:	b2d2      	uxtb	r2, r2
 8009d90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	011b      	lsls	r3, r3, #4
 8009d96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009d98:	7dfb      	ldrb	r3, [r7, #23]
 8009d9a:	005b      	lsls	r3, r3, #1
 8009d9c:	3301      	adds	r3, #1
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	4413      	add	r3, r2
 8009da2:	2200      	movs	r2, #0
 8009da4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	3301      	adds	r3, #1
 8009daa:	75fb      	strb	r3, [r7, #23]
 8009dac:	7dfa      	ldrb	r2, [r7, #23]
 8009dae:	79fb      	ldrb	r3, [r7, #7]
 8009db0:	429a      	cmp	r2, r3
 8009db2:	d3d3      	bcc.n	8009d5c <IntToUnicode+0x18>
  }
}
 8009db4:	bf00      	nop
 8009db6:	371c      	adds	r7, #28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr

08009dc0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b08a      	sub	sp, #40	; 0x28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009dc8:	f107 0314 	add.w	r3, r7, #20
 8009dcc:	2200      	movs	r2, #0
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	605a      	str	r2, [r3, #4]
 8009dd2:	609a      	str	r2, [r3, #8]
 8009dd4:	60da      	str	r2, [r3, #12]
 8009dd6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009de0:	d13a      	bne.n	8009e58 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009de2:	2300      	movs	r3, #0
 8009de4:	613b      	str	r3, [r7, #16]
 8009de6:	4b1e      	ldr	r3, [pc, #120]	; (8009e60 <HAL_PCD_MspInit+0xa0>)
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	4a1d      	ldr	r2, [pc, #116]	; (8009e60 <HAL_PCD_MspInit+0xa0>)
 8009dec:	f043 0301 	orr.w	r3, r3, #1
 8009df0:	6313      	str	r3, [r2, #48]	; 0x30
 8009df2:	4b1b      	ldr	r3, [pc, #108]	; (8009e60 <HAL_PCD_MspInit+0xa0>)
 8009df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009df6:	f003 0301 	and.w	r3, r3, #1
 8009dfa:	613b      	str	r3, [r7, #16]
 8009dfc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009dfe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009e04:	2302      	movs	r3, #2
 8009e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009e0c:	2303      	movs	r3, #3
 8009e0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009e10:	230a      	movs	r3, #10
 8009e12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009e14:	f107 0314 	add.w	r3, r7, #20
 8009e18:	4619      	mov	r1, r3
 8009e1a:	4812      	ldr	r0, [pc, #72]	; (8009e64 <HAL_PCD_MspInit+0xa4>)
 8009e1c:	f7f9 faf2 	bl	8003404 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009e20:	4b0f      	ldr	r3, [pc, #60]	; (8009e60 <HAL_PCD_MspInit+0xa0>)
 8009e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e24:	4a0e      	ldr	r2, [pc, #56]	; (8009e60 <HAL_PCD_MspInit+0xa0>)
 8009e26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e2a:	6353      	str	r3, [r2, #52]	; 0x34
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	60fb      	str	r3, [r7, #12]
 8009e30:	4b0b      	ldr	r3, [pc, #44]	; (8009e60 <HAL_PCD_MspInit+0xa0>)
 8009e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e34:	4a0a      	ldr	r2, [pc, #40]	; (8009e60 <HAL_PCD_MspInit+0xa0>)
 8009e36:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009e3a:	6453      	str	r3, [r2, #68]	; 0x44
 8009e3c:	4b08      	ldr	r3, [pc, #32]	; (8009e60 <HAL_PCD_MspInit+0xa0>)
 8009e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e40:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e44:	60fb      	str	r3, [r7, #12]
 8009e46:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009e48:	2200      	movs	r2, #0
 8009e4a:	2100      	movs	r1, #0
 8009e4c:	2043      	movs	r0, #67	; 0x43
 8009e4e:	f7f8 fd10 	bl	8002872 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009e52:	2043      	movs	r0, #67	; 0x43
 8009e54:	f7f8 fd29 	bl	80028aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009e58:	bf00      	nop
 8009e5a:	3728      	adds	r7, #40	; 0x28
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}
 8009e60:	40023800 	.word	0x40023800
 8009e64:	40020000 	.word	0x40020000

08009e68 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009e7c:	4619      	mov	r1, r3
 8009e7e:	4610      	mov	r0, r2
 8009e80:	f7fe fd5c 	bl	800893c <USBD_LL_SetupStage>
}
 8009e84:	bf00      	nop
 8009e86:	3708      	adds	r7, #8
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009e9e:	78fa      	ldrb	r2, [r7, #3]
 8009ea0:	6879      	ldr	r1, [r7, #4]
 8009ea2:	4613      	mov	r3, r2
 8009ea4:	00db      	lsls	r3, r3, #3
 8009ea6:	1a9b      	subs	r3, r3, r2
 8009ea8:	009b      	lsls	r3, r3, #2
 8009eaa:	440b      	add	r3, r1
 8009eac:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009eb0:	681a      	ldr	r2, [r3, #0]
 8009eb2:	78fb      	ldrb	r3, [r7, #3]
 8009eb4:	4619      	mov	r1, r3
 8009eb6:	f7fe fd94 	bl	80089e2 <USBD_LL_DataOutStage>
}
 8009eba:	bf00      	nop
 8009ebc:	3708      	adds	r7, #8
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	bd80      	pop	{r7, pc}

08009ec2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ec2:	b580      	push	{r7, lr}
 8009ec4:	b082      	sub	sp, #8
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	00db      	lsls	r3, r3, #3
 8009edc:	1a9b      	subs	r3, r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	3348      	adds	r3, #72	; 0x48
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	78fb      	ldrb	r3, [r7, #3]
 8009ee8:	4619      	mov	r1, r3
 8009eea:	f7fe fddd 	bl	8008aa8 <USBD_LL_DataInStage>
}
 8009eee:	bf00      	nop
 8009ef0:	3708      	adds	r7, #8
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	bd80      	pop	{r7, pc}

08009ef6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ef6:	b580      	push	{r7, lr}
 8009ef8:	b082      	sub	sp, #8
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe fee1 	bl	8008ccc <USBD_LL_SOF>
}
 8009f0a:	bf00      	nop
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b084      	sub	sp, #16
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d102      	bne.n	8009f2c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009f26:	2300      	movs	r3, #0
 8009f28:	73fb      	strb	r3, [r7, #15]
 8009f2a:	e008      	b.n	8009f3e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d102      	bne.n	8009f3a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009f34:	2301      	movs	r3, #1
 8009f36:	73fb      	strb	r3, [r7, #15]
 8009f38:	e001      	b.n	8009f3e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009f3a:	f7f7 fbed 	bl	8001718 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f44:	7bfa      	ldrb	r2, [r7, #15]
 8009f46:	4611      	mov	r1, r2
 8009f48:	4618      	mov	r0, r3
 8009f4a:	f7fe fe84 	bl	8008c56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f54:	4618      	mov	r0, r3
 8009f56:	f7fe fe3d 	bl	8008bd4 <USBD_LL_Reset>
}
 8009f5a:	bf00      	nop
 8009f5c:	3710      	adds	r7, #16
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}
	...

08009f64 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009f72:	4618      	mov	r0, r3
 8009f74:	f7fe fe7f 	bl	8008c76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	6812      	ldr	r2, [r2, #0]
 8009f86:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009f8a:	f043 0301 	orr.w	r3, r3, #1
 8009f8e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a1b      	ldr	r3, [r3, #32]
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d005      	beq.n	8009fa4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009f98:	4b04      	ldr	r3, [pc, #16]	; (8009fac <HAL_PCD_SuspendCallback+0x48>)
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	4a03      	ldr	r2, [pc, #12]	; (8009fac <HAL_PCD_SuspendCallback+0x48>)
 8009f9e:	f043 0306 	orr.w	r3, r3, #6
 8009fa2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009fa4:	bf00      	nop
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	e000ed00 	.word	0xe000ed00

08009fb0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b082      	sub	sp, #8
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fe fe6e 	bl	8008ca0 <USBD_LL_Resume>
}
 8009fc4:	bf00      	nop
 8009fc6:	3708      	adds	r7, #8
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}

08009fcc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	460b      	mov	r3, r1
 8009fd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009fde:	78fa      	ldrb	r2, [r7, #3]
 8009fe0:	4611      	mov	r1, r2
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe fe99 	bl	8008d1a <USBD_LL_IsoOUTIncomplete>
}
 8009fe8:	bf00      	nop
 8009fea:	3708      	adds	r7, #8
 8009fec:	46bd      	mov	sp, r7
 8009fee:	bd80      	pop	{r7, pc}

08009ff0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ff0:	b580      	push	{r7, lr}
 8009ff2:	b082      	sub	sp, #8
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
 8009ff8:	460b      	mov	r3, r1
 8009ffa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a002:	78fa      	ldrb	r2, [r7, #3]
 800a004:	4611      	mov	r1, r2
 800a006:	4618      	mov	r0, r3
 800a008:	f7fe fe7a 	bl	8008d00 <USBD_LL_IsoINIncomplete>
}
 800a00c:	bf00      	nop
 800a00e:	3708      	adds	r7, #8
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a022:	4618      	mov	r0, r3
 800a024:	f7fe fe86 	bl	8008d34 <USBD_LL_DevConnected>
}
 800a028:	bf00      	nop
 800a02a:	3708      	adds	r7, #8
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fe83 	bl	8008d4a <USBD_LL_DevDisconnected>
}
 800a044:	bf00      	nop
 800a046:	3708      	adds	r7, #8
 800a048:	46bd      	mov	sp, r7
 800a04a:	bd80      	pop	{r7, pc}

0800a04c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b082      	sub	sp, #8
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	781b      	ldrb	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d13c      	bne.n	800a0d6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a05c:	4a20      	ldr	r2, [pc, #128]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	4a1e      	ldr	r2, [pc, #120]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a068:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a06c:	4b1c      	ldr	r3, [pc, #112]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a06e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a072:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a074:	4b1a      	ldr	r3, [pc, #104]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a076:	2204      	movs	r2, #4
 800a078:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a07a:	4b19      	ldr	r3, [pc, #100]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a07c:	2202      	movs	r2, #2
 800a07e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a080:	4b17      	ldr	r3, [pc, #92]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a082:	2200      	movs	r2, #0
 800a084:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a086:	4b16      	ldr	r3, [pc, #88]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a088:	2202      	movs	r2, #2
 800a08a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a08c:	4b14      	ldr	r3, [pc, #80]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a08e:	2200      	movs	r2, #0
 800a090:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a092:	4b13      	ldr	r3, [pc, #76]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a094:	2200      	movs	r2, #0
 800a096:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a098:	4b11      	ldr	r3, [pc, #68]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a09e:	4b10      	ldr	r3, [pc, #64]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0a0:	2200      	movs	r2, #0
 800a0a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a0a4:	4b0e      	ldr	r3, [pc, #56]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a0aa:	480d      	ldr	r0, [pc, #52]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0ac:	f7f9 fd21 	bl	8003af2 <HAL_PCD_Init>
 800a0b0:	4603      	mov	r3, r0
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d001      	beq.n	800a0ba <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a0b6:	f7f7 fb2f 	bl	8001718 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a0ba:	2180      	movs	r1, #128	; 0x80
 800a0bc:	4808      	ldr	r0, [pc, #32]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0be:	f7fa fe7e 	bl	8004dbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a0c2:	2240      	movs	r2, #64	; 0x40
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	4806      	ldr	r0, [pc, #24]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0c8:	f7fa fe32 	bl	8004d30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a0cc:	2280      	movs	r2, #128	; 0x80
 800a0ce:	2101      	movs	r1, #1
 800a0d0:	4803      	ldr	r0, [pc, #12]	; (800a0e0 <USBD_LL_Init+0x94>)
 800a0d2:	f7fa fe2d 	bl	8004d30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3708      	adds	r7, #8
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	20001bd4 	.word	0x20001bd4

0800a0e4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b084      	sub	sp, #16
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7f9 fe16 	bl	8003d2c <HAL_PCD_Start>
 800a100:	4603      	mov	r3, r0
 800a102:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a104:	7bfb      	ldrb	r3, [r7, #15]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 f92a 	bl	800a360 <USBD_Get_USB_Status>
 800a10c:	4603      	mov	r3, r0
 800a10e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a110:	7bbb      	ldrb	r3, [r7, #14]
}
 800a112:	4618      	mov	r0, r3
 800a114:	3710      	adds	r7, #16
 800a116:	46bd      	mov	sp, r7
 800a118:	bd80      	pop	{r7, pc}

0800a11a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	4608      	mov	r0, r1
 800a124:	4611      	mov	r1, r2
 800a126:	461a      	mov	r2, r3
 800a128:	4603      	mov	r3, r0
 800a12a:	70fb      	strb	r3, [r7, #3]
 800a12c:	460b      	mov	r3, r1
 800a12e:	70bb      	strb	r3, [r7, #2]
 800a130:	4613      	mov	r3, r2
 800a132:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a134:	2300      	movs	r3, #0
 800a136:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a138:	2300      	movs	r3, #0
 800a13a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a142:	78bb      	ldrb	r3, [r7, #2]
 800a144:	883a      	ldrh	r2, [r7, #0]
 800a146:	78f9      	ldrb	r1, [r7, #3]
 800a148:	f7fa f9fa 	bl	8004540 <HAL_PCD_EP_Open>
 800a14c:	4603      	mov	r3, r0
 800a14e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a150:	7bfb      	ldrb	r3, [r7, #15]
 800a152:	4618      	mov	r0, r3
 800a154:	f000 f904 	bl	800a360 <USBD_Get_USB_Status>
 800a158:	4603      	mov	r3, r0
 800a15a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a15c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3710      	adds	r7, #16
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}

0800a166 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a166:	b580      	push	{r7, lr}
 800a168:	b084      	sub	sp, #16
 800a16a:	af00      	add	r7, sp, #0
 800a16c:	6078      	str	r0, [r7, #4]
 800a16e:	460b      	mov	r3, r1
 800a170:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a172:	2300      	movs	r3, #0
 800a174:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a176:	2300      	movs	r3, #0
 800a178:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a180:	78fa      	ldrb	r2, [r7, #3]
 800a182:	4611      	mov	r1, r2
 800a184:	4618      	mov	r0, r3
 800a186:	f7fa fa43 	bl	8004610 <HAL_PCD_EP_Close>
 800a18a:	4603      	mov	r3, r0
 800a18c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a18e:	7bfb      	ldrb	r3, [r7, #15]
 800a190:	4618      	mov	r0, r3
 800a192:	f000 f8e5 	bl	800a360 <USBD_Get_USB_Status>
 800a196:	4603      	mov	r3, r0
 800a198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b084      	sub	sp, #16
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	460b      	mov	r3, r1
 800a1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1be:	78fa      	ldrb	r2, [r7, #3]
 800a1c0:	4611      	mov	r1, r2
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f7fa fb1b 	bl	80047fe <HAL_PCD_EP_SetStall>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1cc:	7bfb      	ldrb	r3, [r7, #15]
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	f000 f8c6 	bl	800a360 <USBD_Get_USB_Status>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1da:	4618      	mov	r0, r3
 800a1dc:	3710      	adds	r7, #16
 800a1de:	46bd      	mov	sp, r7
 800a1e0:	bd80      	pop	{r7, pc}

0800a1e2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
 800a1ea:	460b      	mov	r3, r1
 800a1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1fc:	78fa      	ldrb	r2, [r7, #3]
 800a1fe:	4611      	mov	r1, r2
 800a200:	4618      	mov	r0, r3
 800a202:	f7fa fb60 	bl	80048c6 <HAL_PCD_EP_ClrStall>
 800a206:	4603      	mov	r3, r0
 800a208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a20a:	7bfb      	ldrb	r3, [r7, #15]
 800a20c:	4618      	mov	r0, r3
 800a20e:	f000 f8a7 	bl	800a360 <USBD_Get_USB_Status>
 800a212:	4603      	mov	r3, r0
 800a214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a216:	7bbb      	ldrb	r3, [r7, #14]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3710      	adds	r7, #16
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a220:	b480      	push	{r7}
 800a222:	b085      	sub	sp, #20
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a232:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a234:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	da0b      	bge.n	800a254 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a23c:	78fb      	ldrb	r3, [r7, #3]
 800a23e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a242:	68f9      	ldr	r1, [r7, #12]
 800a244:	4613      	mov	r3, r2
 800a246:	00db      	lsls	r3, r3, #3
 800a248:	1a9b      	subs	r3, r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	440b      	add	r3, r1
 800a24e:	333e      	adds	r3, #62	; 0x3e
 800a250:	781b      	ldrb	r3, [r3, #0]
 800a252:	e00b      	b.n	800a26c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a25a:	68f9      	ldr	r1, [r7, #12]
 800a25c:	4613      	mov	r3, r2
 800a25e:	00db      	lsls	r3, r3, #3
 800a260:	1a9b      	subs	r3, r3, r2
 800a262:	009b      	lsls	r3, r3, #2
 800a264:	440b      	add	r3, r1
 800a266:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a26a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3714      	adds	r7, #20
 800a270:	46bd      	mov	sp, r7
 800a272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a276:	4770      	bx	lr

0800a278 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b084      	sub	sp, #16
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	460b      	mov	r3, r1
 800a282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a284:	2300      	movs	r3, #0
 800a286:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a288:	2300      	movs	r3, #0
 800a28a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a292:	78fa      	ldrb	r2, [r7, #3]
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f7fa f92d 	bl	80044f6 <HAL_PCD_SetAddress>
 800a29c:	4603      	mov	r3, r0
 800a29e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2a0:	7bfb      	ldrb	r3, [r7, #15]
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	f000 f85c 	bl	800a360 <USBD_Get_USB_Status>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ac:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	3710      	adds	r7, #16
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	bd80      	pop	{r7, pc}

0800a2b6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2b6:	b580      	push	{r7, lr}
 800a2b8:	b086      	sub	sp, #24
 800a2ba:	af00      	add	r7, sp, #0
 800a2bc:	60f8      	str	r0, [r7, #12]
 800a2be:	607a      	str	r2, [r7, #4]
 800a2c0:	603b      	str	r3, [r7, #0]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a2d4:	7af9      	ldrb	r1, [r7, #11]
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	687a      	ldr	r2, [r7, #4]
 800a2da:	f7fa fa46 	bl	800476a <HAL_PCD_EP_Transmit>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a2e2:	7dfb      	ldrb	r3, [r7, #23]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f83b 	bl	800a360 <USBD_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a2ee:	7dbb      	ldrb	r3, [r7, #22]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3718      	adds	r7, #24
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	607a      	str	r2, [r7, #4]
 800a302:	603b      	str	r3, [r7, #0]
 800a304:	460b      	mov	r3, r1
 800a306:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a308:	2300      	movs	r3, #0
 800a30a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a316:	7af9      	ldrb	r1, [r7, #11]
 800a318:	683b      	ldr	r3, [r7, #0]
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	f7fa f9c2 	bl	80046a4 <HAL_PCD_EP_Receive>
 800a320:	4603      	mov	r3, r0
 800a322:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a324:	7dfb      	ldrb	r3, [r7, #23]
 800a326:	4618      	mov	r0, r3
 800a328:	f000 f81a 	bl	800a360 <USBD_Get_USB_Status>
 800a32c:	4603      	mov	r3, r0
 800a32e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a330:	7dbb      	ldrb	r3, [r7, #22]
}
 800a332:	4618      	mov	r0, r3
 800a334:	3718      	adds	r7, #24
 800a336:	46bd      	mov	sp, r7
 800a338:	bd80      	pop	{r7, pc}

0800a33a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a33a:	b580      	push	{r7, lr}
 800a33c:	b082      	sub	sp, #8
 800a33e:	af00      	add	r7, sp, #0
 800a340:	6078      	str	r0, [r7, #4]
 800a342:	460b      	mov	r3, r1
 800a344:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a34c:	78fa      	ldrb	r2, [r7, #3]
 800a34e:	4611      	mov	r1, r2
 800a350:	4618      	mov	r0, r3
 800a352:	f7fa f9f2 	bl	800473a <HAL_PCD_EP_GetRxCount>
 800a356:	4603      	mov	r3, r0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3708      	adds	r7, #8
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a360:	b480      	push	{r7}
 800a362:	b085      	sub	sp, #20
 800a364:	af00      	add	r7, sp, #0
 800a366:	4603      	mov	r3, r0
 800a368:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a36a:	2300      	movs	r3, #0
 800a36c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a36e:	79fb      	ldrb	r3, [r7, #7]
 800a370:	2b03      	cmp	r3, #3
 800a372:	d817      	bhi.n	800a3a4 <USBD_Get_USB_Status+0x44>
 800a374:	a201      	add	r2, pc, #4	; (adr r2, 800a37c <USBD_Get_USB_Status+0x1c>)
 800a376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a37a:	bf00      	nop
 800a37c:	0800a38d 	.word	0x0800a38d
 800a380:	0800a393 	.word	0x0800a393
 800a384:	0800a399 	.word	0x0800a399
 800a388:	0800a39f 	.word	0x0800a39f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
    break;
 800a390:	e00b      	b.n	800a3aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a392:	2303      	movs	r3, #3
 800a394:	73fb      	strb	r3, [r7, #15]
    break;
 800a396:	e008      	b.n	800a3aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a398:	2301      	movs	r3, #1
 800a39a:	73fb      	strb	r3, [r7, #15]
    break;
 800a39c:	e005      	b.n	800a3aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a39e:	2303      	movs	r3, #3
 800a3a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a2:	e002      	b.n	800a3aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a3a4:	2303      	movs	r3, #3
 800a3a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a3a8:	bf00      	nop
  }
  return usb_status;
 800a3aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	3714      	adds	r7, #20
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <__errno>:
 800a3b8:	4b01      	ldr	r3, [pc, #4]	; (800a3c0 <__errno+0x8>)
 800a3ba:	6818      	ldr	r0, [r3, #0]
 800a3bc:	4770      	bx	lr
 800a3be:	bf00      	nop
 800a3c0:	200001a0 	.word	0x200001a0

0800a3c4 <__libc_init_array>:
 800a3c4:	b570      	push	{r4, r5, r6, lr}
 800a3c6:	4e0d      	ldr	r6, [pc, #52]	; (800a3fc <__libc_init_array+0x38>)
 800a3c8:	4c0d      	ldr	r4, [pc, #52]	; (800a400 <__libc_init_array+0x3c>)
 800a3ca:	1ba4      	subs	r4, r4, r6
 800a3cc:	10a4      	asrs	r4, r4, #2
 800a3ce:	2500      	movs	r5, #0
 800a3d0:	42a5      	cmp	r5, r4
 800a3d2:	d109      	bne.n	800a3e8 <__libc_init_array+0x24>
 800a3d4:	4e0b      	ldr	r6, [pc, #44]	; (800a404 <__libc_init_array+0x40>)
 800a3d6:	4c0c      	ldr	r4, [pc, #48]	; (800a408 <__libc_init_array+0x44>)
 800a3d8:	f001 f8fc 	bl	800b5d4 <_init>
 800a3dc:	1ba4      	subs	r4, r4, r6
 800a3de:	10a4      	asrs	r4, r4, #2
 800a3e0:	2500      	movs	r5, #0
 800a3e2:	42a5      	cmp	r5, r4
 800a3e4:	d105      	bne.n	800a3f2 <__libc_init_array+0x2e>
 800a3e6:	bd70      	pop	{r4, r5, r6, pc}
 800a3e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3ec:	4798      	blx	r3
 800a3ee:	3501      	adds	r5, #1
 800a3f0:	e7ee      	b.n	800a3d0 <__libc_init_array+0xc>
 800a3f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a3f6:	4798      	blx	r3
 800a3f8:	3501      	adds	r5, #1
 800a3fa:	e7f2      	b.n	800a3e2 <__libc_init_array+0x1e>
 800a3fc:	0800b838 	.word	0x0800b838
 800a400:	0800b838 	.word	0x0800b838
 800a404:	0800b838 	.word	0x0800b838
 800a408:	0800b83c 	.word	0x0800b83c

0800a40c <malloc>:
 800a40c:	4b02      	ldr	r3, [pc, #8]	; (800a418 <malloc+0xc>)
 800a40e:	4601      	mov	r1, r0
 800a410:	6818      	ldr	r0, [r3, #0]
 800a412:	f000 b861 	b.w	800a4d8 <_malloc_r>
 800a416:	bf00      	nop
 800a418:	200001a0 	.word	0x200001a0

0800a41c <free>:
 800a41c:	4b02      	ldr	r3, [pc, #8]	; (800a428 <free+0xc>)
 800a41e:	4601      	mov	r1, r0
 800a420:	6818      	ldr	r0, [r3, #0]
 800a422:	f000 b80b 	b.w	800a43c <_free_r>
 800a426:	bf00      	nop
 800a428:	200001a0 	.word	0x200001a0

0800a42c <memset>:
 800a42c:	4402      	add	r2, r0
 800a42e:	4603      	mov	r3, r0
 800a430:	4293      	cmp	r3, r2
 800a432:	d100      	bne.n	800a436 <memset+0xa>
 800a434:	4770      	bx	lr
 800a436:	f803 1b01 	strb.w	r1, [r3], #1
 800a43a:	e7f9      	b.n	800a430 <memset+0x4>

0800a43c <_free_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4605      	mov	r5, r0
 800a440:	2900      	cmp	r1, #0
 800a442:	d045      	beq.n	800a4d0 <_free_r+0x94>
 800a444:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a448:	1f0c      	subs	r4, r1, #4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bfb8      	it	lt
 800a44e:	18e4      	addlt	r4, r4, r3
 800a450:	f000 f8ac 	bl	800a5ac <__malloc_lock>
 800a454:	4a1f      	ldr	r2, [pc, #124]	; (800a4d4 <_free_r+0x98>)
 800a456:	6813      	ldr	r3, [r2, #0]
 800a458:	4610      	mov	r0, r2
 800a45a:	b933      	cbnz	r3, 800a46a <_free_r+0x2e>
 800a45c:	6063      	str	r3, [r4, #4]
 800a45e:	6014      	str	r4, [r2, #0]
 800a460:	4628      	mov	r0, r5
 800a462:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a466:	f000 b8a2 	b.w	800a5ae <__malloc_unlock>
 800a46a:	42a3      	cmp	r3, r4
 800a46c:	d90c      	bls.n	800a488 <_free_r+0x4c>
 800a46e:	6821      	ldr	r1, [r4, #0]
 800a470:	1862      	adds	r2, r4, r1
 800a472:	4293      	cmp	r3, r2
 800a474:	bf04      	itt	eq
 800a476:	681a      	ldreq	r2, [r3, #0]
 800a478:	685b      	ldreq	r3, [r3, #4]
 800a47a:	6063      	str	r3, [r4, #4]
 800a47c:	bf04      	itt	eq
 800a47e:	1852      	addeq	r2, r2, r1
 800a480:	6022      	streq	r2, [r4, #0]
 800a482:	6004      	str	r4, [r0, #0]
 800a484:	e7ec      	b.n	800a460 <_free_r+0x24>
 800a486:	4613      	mov	r3, r2
 800a488:	685a      	ldr	r2, [r3, #4]
 800a48a:	b10a      	cbz	r2, 800a490 <_free_r+0x54>
 800a48c:	42a2      	cmp	r2, r4
 800a48e:	d9fa      	bls.n	800a486 <_free_r+0x4a>
 800a490:	6819      	ldr	r1, [r3, #0]
 800a492:	1858      	adds	r0, r3, r1
 800a494:	42a0      	cmp	r0, r4
 800a496:	d10b      	bne.n	800a4b0 <_free_r+0x74>
 800a498:	6820      	ldr	r0, [r4, #0]
 800a49a:	4401      	add	r1, r0
 800a49c:	1858      	adds	r0, r3, r1
 800a49e:	4282      	cmp	r2, r0
 800a4a0:	6019      	str	r1, [r3, #0]
 800a4a2:	d1dd      	bne.n	800a460 <_free_r+0x24>
 800a4a4:	6810      	ldr	r0, [r2, #0]
 800a4a6:	6852      	ldr	r2, [r2, #4]
 800a4a8:	605a      	str	r2, [r3, #4]
 800a4aa:	4401      	add	r1, r0
 800a4ac:	6019      	str	r1, [r3, #0]
 800a4ae:	e7d7      	b.n	800a460 <_free_r+0x24>
 800a4b0:	d902      	bls.n	800a4b8 <_free_r+0x7c>
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	602b      	str	r3, [r5, #0]
 800a4b6:	e7d3      	b.n	800a460 <_free_r+0x24>
 800a4b8:	6820      	ldr	r0, [r4, #0]
 800a4ba:	1821      	adds	r1, r4, r0
 800a4bc:	428a      	cmp	r2, r1
 800a4be:	bf04      	itt	eq
 800a4c0:	6811      	ldreq	r1, [r2, #0]
 800a4c2:	6852      	ldreq	r2, [r2, #4]
 800a4c4:	6062      	str	r2, [r4, #4]
 800a4c6:	bf04      	itt	eq
 800a4c8:	1809      	addeq	r1, r1, r0
 800a4ca:	6021      	streq	r1, [r4, #0]
 800a4cc:	605c      	str	r4, [r3, #4]
 800a4ce:	e7c7      	b.n	800a460 <_free_r+0x24>
 800a4d0:	bd38      	pop	{r3, r4, r5, pc}
 800a4d2:	bf00      	nop
 800a4d4:	20000228 	.word	0x20000228

0800a4d8 <_malloc_r>:
 800a4d8:	b570      	push	{r4, r5, r6, lr}
 800a4da:	1ccd      	adds	r5, r1, #3
 800a4dc:	f025 0503 	bic.w	r5, r5, #3
 800a4e0:	3508      	adds	r5, #8
 800a4e2:	2d0c      	cmp	r5, #12
 800a4e4:	bf38      	it	cc
 800a4e6:	250c      	movcc	r5, #12
 800a4e8:	2d00      	cmp	r5, #0
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	db01      	blt.n	800a4f2 <_malloc_r+0x1a>
 800a4ee:	42a9      	cmp	r1, r5
 800a4f0:	d903      	bls.n	800a4fa <_malloc_r+0x22>
 800a4f2:	230c      	movs	r3, #12
 800a4f4:	6033      	str	r3, [r6, #0]
 800a4f6:	2000      	movs	r0, #0
 800a4f8:	bd70      	pop	{r4, r5, r6, pc}
 800a4fa:	f000 f857 	bl	800a5ac <__malloc_lock>
 800a4fe:	4a21      	ldr	r2, [pc, #132]	; (800a584 <_malloc_r+0xac>)
 800a500:	6814      	ldr	r4, [r2, #0]
 800a502:	4621      	mov	r1, r4
 800a504:	b991      	cbnz	r1, 800a52c <_malloc_r+0x54>
 800a506:	4c20      	ldr	r4, [pc, #128]	; (800a588 <_malloc_r+0xb0>)
 800a508:	6823      	ldr	r3, [r4, #0]
 800a50a:	b91b      	cbnz	r3, 800a514 <_malloc_r+0x3c>
 800a50c:	4630      	mov	r0, r6
 800a50e:	f000 f83d 	bl	800a58c <_sbrk_r>
 800a512:	6020      	str	r0, [r4, #0]
 800a514:	4629      	mov	r1, r5
 800a516:	4630      	mov	r0, r6
 800a518:	f000 f838 	bl	800a58c <_sbrk_r>
 800a51c:	1c43      	adds	r3, r0, #1
 800a51e:	d124      	bne.n	800a56a <_malloc_r+0x92>
 800a520:	230c      	movs	r3, #12
 800a522:	6033      	str	r3, [r6, #0]
 800a524:	4630      	mov	r0, r6
 800a526:	f000 f842 	bl	800a5ae <__malloc_unlock>
 800a52a:	e7e4      	b.n	800a4f6 <_malloc_r+0x1e>
 800a52c:	680b      	ldr	r3, [r1, #0]
 800a52e:	1b5b      	subs	r3, r3, r5
 800a530:	d418      	bmi.n	800a564 <_malloc_r+0x8c>
 800a532:	2b0b      	cmp	r3, #11
 800a534:	d90f      	bls.n	800a556 <_malloc_r+0x7e>
 800a536:	600b      	str	r3, [r1, #0]
 800a538:	50cd      	str	r5, [r1, r3]
 800a53a:	18cc      	adds	r4, r1, r3
 800a53c:	4630      	mov	r0, r6
 800a53e:	f000 f836 	bl	800a5ae <__malloc_unlock>
 800a542:	f104 000b 	add.w	r0, r4, #11
 800a546:	1d23      	adds	r3, r4, #4
 800a548:	f020 0007 	bic.w	r0, r0, #7
 800a54c:	1ac3      	subs	r3, r0, r3
 800a54e:	d0d3      	beq.n	800a4f8 <_malloc_r+0x20>
 800a550:	425a      	negs	r2, r3
 800a552:	50e2      	str	r2, [r4, r3]
 800a554:	e7d0      	b.n	800a4f8 <_malloc_r+0x20>
 800a556:	428c      	cmp	r4, r1
 800a558:	684b      	ldr	r3, [r1, #4]
 800a55a:	bf16      	itet	ne
 800a55c:	6063      	strne	r3, [r4, #4]
 800a55e:	6013      	streq	r3, [r2, #0]
 800a560:	460c      	movne	r4, r1
 800a562:	e7eb      	b.n	800a53c <_malloc_r+0x64>
 800a564:	460c      	mov	r4, r1
 800a566:	6849      	ldr	r1, [r1, #4]
 800a568:	e7cc      	b.n	800a504 <_malloc_r+0x2c>
 800a56a:	1cc4      	adds	r4, r0, #3
 800a56c:	f024 0403 	bic.w	r4, r4, #3
 800a570:	42a0      	cmp	r0, r4
 800a572:	d005      	beq.n	800a580 <_malloc_r+0xa8>
 800a574:	1a21      	subs	r1, r4, r0
 800a576:	4630      	mov	r0, r6
 800a578:	f000 f808 	bl	800a58c <_sbrk_r>
 800a57c:	3001      	adds	r0, #1
 800a57e:	d0cf      	beq.n	800a520 <_malloc_r+0x48>
 800a580:	6025      	str	r5, [r4, #0]
 800a582:	e7db      	b.n	800a53c <_malloc_r+0x64>
 800a584:	20000228 	.word	0x20000228
 800a588:	2000022c 	.word	0x2000022c

0800a58c <_sbrk_r>:
 800a58c:	b538      	push	{r3, r4, r5, lr}
 800a58e:	4c06      	ldr	r4, [pc, #24]	; (800a5a8 <_sbrk_r+0x1c>)
 800a590:	2300      	movs	r3, #0
 800a592:	4605      	mov	r5, r0
 800a594:	4608      	mov	r0, r1
 800a596:	6023      	str	r3, [r4, #0]
 800a598:	f7f7 f958 	bl	800184c <_sbrk>
 800a59c:	1c43      	adds	r3, r0, #1
 800a59e:	d102      	bne.n	800a5a6 <_sbrk_r+0x1a>
 800a5a0:	6823      	ldr	r3, [r4, #0]
 800a5a2:	b103      	cbz	r3, 800a5a6 <_sbrk_r+0x1a>
 800a5a4:	602b      	str	r3, [r5, #0]
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
 800a5a8:	20001fdc 	.word	0x20001fdc

0800a5ac <__malloc_lock>:
 800a5ac:	4770      	bx	lr

0800a5ae <__malloc_unlock>:
 800a5ae:	4770      	bx	lr

0800a5b0 <sin>:
 800a5b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5b2:	ec51 0b10 	vmov	r0, r1, d0
 800a5b6:	4a20      	ldr	r2, [pc, #128]	; (800a638 <sin+0x88>)
 800a5b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	dc07      	bgt.n	800a5d0 <sin+0x20>
 800a5c0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800a630 <sin+0x80>
 800a5c4:	2000      	movs	r0, #0
 800a5c6:	f000 fe37 	bl	800b238 <__kernel_sin>
 800a5ca:	ec51 0b10 	vmov	r0, r1, d0
 800a5ce:	e007      	b.n	800a5e0 <sin+0x30>
 800a5d0:	4a1a      	ldr	r2, [pc, #104]	; (800a63c <sin+0x8c>)
 800a5d2:	4293      	cmp	r3, r2
 800a5d4:	dd09      	ble.n	800a5ea <sin+0x3a>
 800a5d6:	ee10 2a10 	vmov	r2, s0
 800a5da:	460b      	mov	r3, r1
 800a5dc:	f7f5 fe0c 	bl	80001f8 <__aeabi_dsub>
 800a5e0:	ec41 0b10 	vmov	d0, r0, r1
 800a5e4:	b005      	add	sp, #20
 800a5e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a5ea:	4668      	mov	r0, sp
 800a5ec:	f000 f828 	bl	800a640 <__ieee754_rem_pio2>
 800a5f0:	f000 0003 	and.w	r0, r0, #3
 800a5f4:	2801      	cmp	r0, #1
 800a5f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a5fa:	ed9d 0b00 	vldr	d0, [sp]
 800a5fe:	d004      	beq.n	800a60a <sin+0x5a>
 800a600:	2802      	cmp	r0, #2
 800a602:	d005      	beq.n	800a610 <sin+0x60>
 800a604:	b970      	cbnz	r0, 800a624 <sin+0x74>
 800a606:	2001      	movs	r0, #1
 800a608:	e7dd      	b.n	800a5c6 <sin+0x16>
 800a60a:	f000 fa0d 	bl	800aa28 <__kernel_cos>
 800a60e:	e7dc      	b.n	800a5ca <sin+0x1a>
 800a610:	2001      	movs	r0, #1
 800a612:	f000 fe11 	bl	800b238 <__kernel_sin>
 800a616:	ec53 2b10 	vmov	r2, r3, d0
 800a61a:	ee10 0a10 	vmov	r0, s0
 800a61e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a622:	e7dd      	b.n	800a5e0 <sin+0x30>
 800a624:	f000 fa00 	bl	800aa28 <__kernel_cos>
 800a628:	e7f5      	b.n	800a616 <sin+0x66>
 800a62a:	bf00      	nop
 800a62c:	f3af 8000 	nop.w
	...
 800a638:	3fe921fb 	.word	0x3fe921fb
 800a63c:	7fefffff 	.word	0x7fefffff

0800a640 <__ieee754_rem_pio2>:
 800a640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a644:	ec57 6b10 	vmov	r6, r7, d0
 800a648:	4bc3      	ldr	r3, [pc, #780]	; (800a958 <__ieee754_rem_pio2+0x318>)
 800a64a:	b08d      	sub	sp, #52	; 0x34
 800a64c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a650:	4598      	cmp	r8, r3
 800a652:	4604      	mov	r4, r0
 800a654:	9704      	str	r7, [sp, #16]
 800a656:	dc07      	bgt.n	800a668 <__ieee754_rem_pio2+0x28>
 800a658:	2200      	movs	r2, #0
 800a65a:	2300      	movs	r3, #0
 800a65c:	ed84 0b00 	vstr	d0, [r4]
 800a660:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a664:	2500      	movs	r5, #0
 800a666:	e027      	b.n	800a6b8 <__ieee754_rem_pio2+0x78>
 800a668:	4bbc      	ldr	r3, [pc, #752]	; (800a95c <__ieee754_rem_pio2+0x31c>)
 800a66a:	4598      	cmp	r8, r3
 800a66c:	dc75      	bgt.n	800a75a <__ieee754_rem_pio2+0x11a>
 800a66e:	9b04      	ldr	r3, [sp, #16]
 800a670:	4dbb      	ldr	r5, [pc, #748]	; (800a960 <__ieee754_rem_pio2+0x320>)
 800a672:	2b00      	cmp	r3, #0
 800a674:	ee10 0a10 	vmov	r0, s0
 800a678:	a3a9      	add	r3, pc, #676	; (adr r3, 800a920 <__ieee754_rem_pio2+0x2e0>)
 800a67a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a67e:	4639      	mov	r1, r7
 800a680:	dd36      	ble.n	800a6f0 <__ieee754_rem_pio2+0xb0>
 800a682:	f7f5 fdb9 	bl	80001f8 <__aeabi_dsub>
 800a686:	45a8      	cmp	r8, r5
 800a688:	4606      	mov	r6, r0
 800a68a:	460f      	mov	r7, r1
 800a68c:	d018      	beq.n	800a6c0 <__ieee754_rem_pio2+0x80>
 800a68e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a928 <__ieee754_rem_pio2+0x2e8>)
 800a690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a694:	f7f5 fdb0 	bl	80001f8 <__aeabi_dsub>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	e9c4 2300 	strd	r2, r3, [r4]
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	4639      	mov	r1, r7
 800a6a4:	f7f5 fda8 	bl	80001f8 <__aeabi_dsub>
 800a6a8:	a39f      	add	r3, pc, #636	; (adr r3, 800a928 <__ieee754_rem_pio2+0x2e8>)
 800a6aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ae:	f7f5 fda3 	bl	80001f8 <__aeabi_dsub>
 800a6b2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a6b6:	2501      	movs	r5, #1
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	b00d      	add	sp, #52	; 0x34
 800a6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c0:	a39b      	add	r3, pc, #620	; (adr r3, 800a930 <__ieee754_rem_pio2+0x2f0>)
 800a6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6c6:	f7f5 fd97 	bl	80001f8 <__aeabi_dsub>
 800a6ca:	a39b      	add	r3, pc, #620	; (adr r3, 800a938 <__ieee754_rem_pio2+0x2f8>)
 800a6cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d0:	4606      	mov	r6, r0
 800a6d2:	460f      	mov	r7, r1
 800a6d4:	f7f5 fd90 	bl	80001f8 <__aeabi_dsub>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	460b      	mov	r3, r1
 800a6dc:	e9c4 2300 	strd	r2, r3, [r4]
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	4639      	mov	r1, r7
 800a6e4:	f7f5 fd88 	bl	80001f8 <__aeabi_dsub>
 800a6e8:	a393      	add	r3, pc, #588	; (adr r3, 800a938 <__ieee754_rem_pio2+0x2f8>)
 800a6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ee:	e7de      	b.n	800a6ae <__ieee754_rem_pio2+0x6e>
 800a6f0:	f7f5 fd84 	bl	80001fc <__adddf3>
 800a6f4:	45a8      	cmp	r8, r5
 800a6f6:	4606      	mov	r6, r0
 800a6f8:	460f      	mov	r7, r1
 800a6fa:	d016      	beq.n	800a72a <__ieee754_rem_pio2+0xea>
 800a6fc:	a38a      	add	r3, pc, #552	; (adr r3, 800a928 <__ieee754_rem_pio2+0x2e8>)
 800a6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a702:	f7f5 fd7b 	bl	80001fc <__adddf3>
 800a706:	4602      	mov	r2, r0
 800a708:	460b      	mov	r3, r1
 800a70a:	e9c4 2300 	strd	r2, r3, [r4]
 800a70e:	4630      	mov	r0, r6
 800a710:	4639      	mov	r1, r7
 800a712:	f7f5 fd71 	bl	80001f8 <__aeabi_dsub>
 800a716:	a384      	add	r3, pc, #528	; (adr r3, 800a928 <__ieee754_rem_pio2+0x2e8>)
 800a718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a71c:	f7f5 fd6e 	bl	80001fc <__adddf3>
 800a720:	f04f 35ff 	mov.w	r5, #4294967295
 800a724:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a728:	e7c6      	b.n	800a6b8 <__ieee754_rem_pio2+0x78>
 800a72a:	a381      	add	r3, pc, #516	; (adr r3, 800a930 <__ieee754_rem_pio2+0x2f0>)
 800a72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a730:	f7f5 fd64 	bl	80001fc <__adddf3>
 800a734:	a380      	add	r3, pc, #512	; (adr r3, 800a938 <__ieee754_rem_pio2+0x2f8>)
 800a736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a73a:	4606      	mov	r6, r0
 800a73c:	460f      	mov	r7, r1
 800a73e:	f7f5 fd5d 	bl	80001fc <__adddf3>
 800a742:	4602      	mov	r2, r0
 800a744:	460b      	mov	r3, r1
 800a746:	e9c4 2300 	strd	r2, r3, [r4]
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f5 fd53 	bl	80001f8 <__aeabi_dsub>
 800a752:	a379      	add	r3, pc, #484	; (adr r3, 800a938 <__ieee754_rem_pio2+0x2f8>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	e7e0      	b.n	800a71c <__ieee754_rem_pio2+0xdc>
 800a75a:	4b82      	ldr	r3, [pc, #520]	; (800a964 <__ieee754_rem_pio2+0x324>)
 800a75c:	4598      	cmp	r8, r3
 800a75e:	f300 80d0 	bgt.w	800a902 <__ieee754_rem_pio2+0x2c2>
 800a762:	f000 fe23 	bl	800b3ac <fabs>
 800a766:	ec57 6b10 	vmov	r6, r7, d0
 800a76a:	ee10 0a10 	vmov	r0, s0
 800a76e:	a374      	add	r3, pc, #464	; (adr r3, 800a940 <__ieee754_rem_pio2+0x300>)
 800a770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a774:	4639      	mov	r1, r7
 800a776:	f7f5 fef7 	bl	8000568 <__aeabi_dmul>
 800a77a:	2200      	movs	r2, #0
 800a77c:	4b7a      	ldr	r3, [pc, #488]	; (800a968 <__ieee754_rem_pio2+0x328>)
 800a77e:	f7f5 fd3d 	bl	80001fc <__adddf3>
 800a782:	f7f6 f98b 	bl	8000a9c <__aeabi_d2iz>
 800a786:	4605      	mov	r5, r0
 800a788:	f7f5 fe84 	bl	8000494 <__aeabi_i2d>
 800a78c:	a364      	add	r3, pc, #400	; (adr r3, 800a920 <__ieee754_rem_pio2+0x2e0>)
 800a78e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a792:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a796:	f7f5 fee7 	bl	8000568 <__aeabi_dmul>
 800a79a:	4602      	mov	r2, r0
 800a79c:	460b      	mov	r3, r1
 800a79e:	4630      	mov	r0, r6
 800a7a0:	4639      	mov	r1, r7
 800a7a2:	f7f5 fd29 	bl	80001f8 <__aeabi_dsub>
 800a7a6:	a360      	add	r3, pc, #384	; (adr r3, 800a928 <__ieee754_rem_pio2+0x2e8>)
 800a7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ac:	4682      	mov	sl, r0
 800a7ae:	468b      	mov	fp, r1
 800a7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a7b4:	f7f5 fed8 	bl	8000568 <__aeabi_dmul>
 800a7b8:	2d1f      	cmp	r5, #31
 800a7ba:	4606      	mov	r6, r0
 800a7bc:	460f      	mov	r7, r1
 800a7be:	dc0c      	bgt.n	800a7da <__ieee754_rem_pio2+0x19a>
 800a7c0:	1e6a      	subs	r2, r5, #1
 800a7c2:	4b6a      	ldr	r3, [pc, #424]	; (800a96c <__ieee754_rem_pio2+0x32c>)
 800a7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7c8:	4543      	cmp	r3, r8
 800a7ca:	d006      	beq.n	800a7da <__ieee754_rem_pio2+0x19a>
 800a7cc:	4632      	mov	r2, r6
 800a7ce:	463b      	mov	r3, r7
 800a7d0:	4650      	mov	r0, sl
 800a7d2:	4659      	mov	r1, fp
 800a7d4:	f7f5 fd10 	bl	80001f8 <__aeabi_dsub>
 800a7d8:	e00e      	b.n	800a7f8 <__ieee754_rem_pio2+0x1b8>
 800a7da:	4632      	mov	r2, r6
 800a7dc:	463b      	mov	r3, r7
 800a7de:	4650      	mov	r0, sl
 800a7e0:	4659      	mov	r1, fp
 800a7e2:	f7f5 fd09 	bl	80001f8 <__aeabi_dsub>
 800a7e6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a7ea:	9305      	str	r3, [sp, #20]
 800a7ec:	9a05      	ldr	r2, [sp, #20]
 800a7ee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a7f2:	1ad3      	subs	r3, r2, r3
 800a7f4:	2b10      	cmp	r3, #16
 800a7f6:	dc02      	bgt.n	800a7fe <__ieee754_rem_pio2+0x1be>
 800a7f8:	e9c4 0100 	strd	r0, r1, [r4]
 800a7fc:	e039      	b.n	800a872 <__ieee754_rem_pio2+0x232>
 800a7fe:	a34c      	add	r3, pc, #304	; (adr r3, 800a930 <__ieee754_rem_pio2+0x2f0>)
 800a800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a804:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a808:	f7f5 feae 	bl	8000568 <__aeabi_dmul>
 800a80c:	4606      	mov	r6, r0
 800a80e:	460f      	mov	r7, r1
 800a810:	4602      	mov	r2, r0
 800a812:	460b      	mov	r3, r1
 800a814:	4650      	mov	r0, sl
 800a816:	4659      	mov	r1, fp
 800a818:	f7f5 fcee 	bl	80001f8 <__aeabi_dsub>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4680      	mov	r8, r0
 800a822:	4689      	mov	r9, r1
 800a824:	4650      	mov	r0, sl
 800a826:	4659      	mov	r1, fp
 800a828:	f7f5 fce6 	bl	80001f8 <__aeabi_dsub>
 800a82c:	4632      	mov	r2, r6
 800a82e:	463b      	mov	r3, r7
 800a830:	f7f5 fce2 	bl	80001f8 <__aeabi_dsub>
 800a834:	a340      	add	r3, pc, #256	; (adr r3, 800a938 <__ieee754_rem_pio2+0x2f8>)
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	4606      	mov	r6, r0
 800a83c:	460f      	mov	r7, r1
 800a83e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a842:	f7f5 fe91 	bl	8000568 <__aeabi_dmul>
 800a846:	4632      	mov	r2, r6
 800a848:	463b      	mov	r3, r7
 800a84a:	f7f5 fcd5 	bl	80001f8 <__aeabi_dsub>
 800a84e:	4602      	mov	r2, r0
 800a850:	460b      	mov	r3, r1
 800a852:	4606      	mov	r6, r0
 800a854:	460f      	mov	r7, r1
 800a856:	4640      	mov	r0, r8
 800a858:	4649      	mov	r1, r9
 800a85a:	f7f5 fccd 	bl	80001f8 <__aeabi_dsub>
 800a85e:	9a05      	ldr	r2, [sp, #20]
 800a860:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a864:	1ad3      	subs	r3, r2, r3
 800a866:	2b31      	cmp	r3, #49	; 0x31
 800a868:	dc20      	bgt.n	800a8ac <__ieee754_rem_pio2+0x26c>
 800a86a:	e9c4 0100 	strd	r0, r1, [r4]
 800a86e:	46c2      	mov	sl, r8
 800a870:	46cb      	mov	fp, r9
 800a872:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a876:	4650      	mov	r0, sl
 800a878:	4642      	mov	r2, r8
 800a87a:	464b      	mov	r3, r9
 800a87c:	4659      	mov	r1, fp
 800a87e:	f7f5 fcbb 	bl	80001f8 <__aeabi_dsub>
 800a882:	463b      	mov	r3, r7
 800a884:	4632      	mov	r2, r6
 800a886:	f7f5 fcb7 	bl	80001f8 <__aeabi_dsub>
 800a88a:	9b04      	ldr	r3, [sp, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a892:	f6bf af11 	bge.w	800a6b8 <__ieee754_rem_pio2+0x78>
 800a896:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a89a:	6063      	str	r3, [r4, #4]
 800a89c:	f8c4 8000 	str.w	r8, [r4]
 800a8a0:	60a0      	str	r0, [r4, #8]
 800a8a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a8a6:	60e3      	str	r3, [r4, #12]
 800a8a8:	426d      	negs	r5, r5
 800a8aa:	e705      	b.n	800a6b8 <__ieee754_rem_pio2+0x78>
 800a8ac:	a326      	add	r3, pc, #152	; (adr r3, 800a948 <__ieee754_rem_pio2+0x308>)
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8b6:	f7f5 fe57 	bl	8000568 <__aeabi_dmul>
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	460f      	mov	r7, r1
 800a8be:	4602      	mov	r2, r0
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	f7f5 fc97 	bl	80001f8 <__aeabi_dsub>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	4682      	mov	sl, r0
 800a8d0:	468b      	mov	fp, r1
 800a8d2:	4640      	mov	r0, r8
 800a8d4:	4649      	mov	r1, r9
 800a8d6:	f7f5 fc8f 	bl	80001f8 <__aeabi_dsub>
 800a8da:	4632      	mov	r2, r6
 800a8dc:	463b      	mov	r3, r7
 800a8de:	f7f5 fc8b 	bl	80001f8 <__aeabi_dsub>
 800a8e2:	a31b      	add	r3, pc, #108	; (adr r3, 800a950 <__ieee754_rem_pio2+0x310>)
 800a8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e8:	4606      	mov	r6, r0
 800a8ea:	460f      	mov	r7, r1
 800a8ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a8f0:	f7f5 fe3a 	bl	8000568 <__aeabi_dmul>
 800a8f4:	4632      	mov	r2, r6
 800a8f6:	463b      	mov	r3, r7
 800a8f8:	f7f5 fc7e 	bl	80001f8 <__aeabi_dsub>
 800a8fc:	4606      	mov	r6, r0
 800a8fe:	460f      	mov	r7, r1
 800a900:	e764      	b.n	800a7cc <__ieee754_rem_pio2+0x18c>
 800a902:	4b1b      	ldr	r3, [pc, #108]	; (800a970 <__ieee754_rem_pio2+0x330>)
 800a904:	4598      	cmp	r8, r3
 800a906:	dd35      	ble.n	800a974 <__ieee754_rem_pio2+0x334>
 800a908:	ee10 2a10 	vmov	r2, s0
 800a90c:	463b      	mov	r3, r7
 800a90e:	4630      	mov	r0, r6
 800a910:	4639      	mov	r1, r7
 800a912:	f7f5 fc71 	bl	80001f8 <__aeabi_dsub>
 800a916:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a91a:	e9c4 0100 	strd	r0, r1, [r4]
 800a91e:	e6a1      	b.n	800a664 <__ieee754_rem_pio2+0x24>
 800a920:	54400000 	.word	0x54400000
 800a924:	3ff921fb 	.word	0x3ff921fb
 800a928:	1a626331 	.word	0x1a626331
 800a92c:	3dd0b461 	.word	0x3dd0b461
 800a930:	1a600000 	.word	0x1a600000
 800a934:	3dd0b461 	.word	0x3dd0b461
 800a938:	2e037073 	.word	0x2e037073
 800a93c:	3ba3198a 	.word	0x3ba3198a
 800a940:	6dc9c883 	.word	0x6dc9c883
 800a944:	3fe45f30 	.word	0x3fe45f30
 800a948:	2e000000 	.word	0x2e000000
 800a94c:	3ba3198a 	.word	0x3ba3198a
 800a950:	252049c1 	.word	0x252049c1
 800a954:	397b839a 	.word	0x397b839a
 800a958:	3fe921fb 	.word	0x3fe921fb
 800a95c:	4002d97b 	.word	0x4002d97b
 800a960:	3ff921fb 	.word	0x3ff921fb
 800a964:	413921fb 	.word	0x413921fb
 800a968:	3fe00000 	.word	0x3fe00000
 800a96c:	0800b658 	.word	0x0800b658
 800a970:	7fefffff 	.word	0x7fefffff
 800a974:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a978:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a97c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a980:	4630      	mov	r0, r6
 800a982:	460f      	mov	r7, r1
 800a984:	f7f6 f88a 	bl	8000a9c <__aeabi_d2iz>
 800a988:	f7f5 fd84 	bl	8000494 <__aeabi_i2d>
 800a98c:	4602      	mov	r2, r0
 800a98e:	460b      	mov	r3, r1
 800a990:	4630      	mov	r0, r6
 800a992:	4639      	mov	r1, r7
 800a994:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a998:	f7f5 fc2e 	bl	80001f8 <__aeabi_dsub>
 800a99c:	2200      	movs	r2, #0
 800a99e:	4b1f      	ldr	r3, [pc, #124]	; (800aa1c <__ieee754_rem_pio2+0x3dc>)
 800a9a0:	f7f5 fde2 	bl	8000568 <__aeabi_dmul>
 800a9a4:	460f      	mov	r7, r1
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	f7f6 f878 	bl	8000a9c <__aeabi_d2iz>
 800a9ac:	f7f5 fd72 	bl	8000494 <__aeabi_i2d>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a9bc:	f7f5 fc1c 	bl	80001f8 <__aeabi_dsub>
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	4b16      	ldr	r3, [pc, #88]	; (800aa1c <__ieee754_rem_pio2+0x3dc>)
 800a9c4:	f7f5 fdd0 	bl	8000568 <__aeabi_dmul>
 800a9c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a9cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a9d0:	f04f 0803 	mov.w	r8, #3
 800a9d4:	2600      	movs	r6, #0
 800a9d6:	2700      	movs	r7, #0
 800a9d8:	4632      	mov	r2, r6
 800a9da:	463b      	mov	r3, r7
 800a9dc:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a9e0:	f108 3aff 	add.w	sl, r8, #4294967295
 800a9e4:	f7f6 f828 	bl	8000a38 <__aeabi_dcmpeq>
 800a9e8:	b9b0      	cbnz	r0, 800aa18 <__ieee754_rem_pio2+0x3d8>
 800a9ea:	4b0d      	ldr	r3, [pc, #52]	; (800aa20 <__ieee754_rem_pio2+0x3e0>)
 800a9ec:	9301      	str	r3, [sp, #4]
 800a9ee:	2302      	movs	r3, #2
 800a9f0:	9300      	str	r3, [sp, #0]
 800a9f2:	462a      	mov	r2, r5
 800a9f4:	4643      	mov	r3, r8
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	a806      	add	r0, sp, #24
 800a9fa:	f000 f8dd 	bl	800abb8 <__kernel_rem_pio2>
 800a9fe:	9b04      	ldr	r3, [sp, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	4605      	mov	r5, r0
 800aa04:	f6bf ae58 	bge.w	800a6b8 <__ieee754_rem_pio2+0x78>
 800aa08:	6863      	ldr	r3, [r4, #4]
 800aa0a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa0e:	6063      	str	r3, [r4, #4]
 800aa10:	68e3      	ldr	r3, [r4, #12]
 800aa12:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800aa16:	e746      	b.n	800a8a6 <__ieee754_rem_pio2+0x266>
 800aa18:	46d0      	mov	r8, sl
 800aa1a:	e7dd      	b.n	800a9d8 <__ieee754_rem_pio2+0x398>
 800aa1c:	41700000 	.word	0x41700000
 800aa20:	0800b6d8 	.word	0x0800b6d8
 800aa24:	00000000 	.word	0x00000000

0800aa28 <__kernel_cos>:
 800aa28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa2c:	ec59 8b10 	vmov	r8, r9, d0
 800aa30:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800aa34:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800aa38:	ed2d 8b02 	vpush	{d8}
 800aa3c:	eeb0 8a41 	vmov.f32	s16, s2
 800aa40:	eef0 8a61 	vmov.f32	s17, s3
 800aa44:	da07      	bge.n	800aa56 <__kernel_cos+0x2e>
 800aa46:	ee10 0a10 	vmov	r0, s0
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	f7f6 f826 	bl	8000a9c <__aeabi_d2iz>
 800aa50:	2800      	cmp	r0, #0
 800aa52:	f000 8089 	beq.w	800ab68 <__kernel_cos+0x140>
 800aa56:	4642      	mov	r2, r8
 800aa58:	464b      	mov	r3, r9
 800aa5a:	4640      	mov	r0, r8
 800aa5c:	4649      	mov	r1, r9
 800aa5e:	f7f5 fd83 	bl	8000568 <__aeabi_dmul>
 800aa62:	2200      	movs	r2, #0
 800aa64:	4b4e      	ldr	r3, [pc, #312]	; (800aba0 <__kernel_cos+0x178>)
 800aa66:	4604      	mov	r4, r0
 800aa68:	460d      	mov	r5, r1
 800aa6a:	f7f5 fd7d 	bl	8000568 <__aeabi_dmul>
 800aa6e:	a340      	add	r3, pc, #256	; (adr r3, 800ab70 <__kernel_cos+0x148>)
 800aa70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa74:	4682      	mov	sl, r0
 800aa76:	468b      	mov	fp, r1
 800aa78:	4620      	mov	r0, r4
 800aa7a:	4629      	mov	r1, r5
 800aa7c:	f7f5 fd74 	bl	8000568 <__aeabi_dmul>
 800aa80:	a33d      	add	r3, pc, #244	; (adr r3, 800ab78 <__kernel_cos+0x150>)
 800aa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa86:	f7f5 fbb9 	bl	80001fc <__adddf3>
 800aa8a:	4622      	mov	r2, r4
 800aa8c:	462b      	mov	r3, r5
 800aa8e:	f7f5 fd6b 	bl	8000568 <__aeabi_dmul>
 800aa92:	a33b      	add	r3, pc, #236	; (adr r3, 800ab80 <__kernel_cos+0x158>)
 800aa94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa98:	f7f5 fbae 	bl	80001f8 <__aeabi_dsub>
 800aa9c:	4622      	mov	r2, r4
 800aa9e:	462b      	mov	r3, r5
 800aaa0:	f7f5 fd62 	bl	8000568 <__aeabi_dmul>
 800aaa4:	a338      	add	r3, pc, #224	; (adr r3, 800ab88 <__kernel_cos+0x160>)
 800aaa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaaa:	f7f5 fba7 	bl	80001fc <__adddf3>
 800aaae:	4622      	mov	r2, r4
 800aab0:	462b      	mov	r3, r5
 800aab2:	f7f5 fd59 	bl	8000568 <__aeabi_dmul>
 800aab6:	a336      	add	r3, pc, #216	; (adr r3, 800ab90 <__kernel_cos+0x168>)
 800aab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aabc:	f7f5 fb9c 	bl	80001f8 <__aeabi_dsub>
 800aac0:	4622      	mov	r2, r4
 800aac2:	462b      	mov	r3, r5
 800aac4:	f7f5 fd50 	bl	8000568 <__aeabi_dmul>
 800aac8:	a333      	add	r3, pc, #204	; (adr r3, 800ab98 <__kernel_cos+0x170>)
 800aaca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aace:	f7f5 fb95 	bl	80001fc <__adddf3>
 800aad2:	4622      	mov	r2, r4
 800aad4:	462b      	mov	r3, r5
 800aad6:	f7f5 fd47 	bl	8000568 <__aeabi_dmul>
 800aada:	4622      	mov	r2, r4
 800aadc:	462b      	mov	r3, r5
 800aade:	f7f5 fd43 	bl	8000568 <__aeabi_dmul>
 800aae2:	ec53 2b18 	vmov	r2, r3, d8
 800aae6:	4604      	mov	r4, r0
 800aae8:	460d      	mov	r5, r1
 800aaea:	4640      	mov	r0, r8
 800aaec:	4649      	mov	r1, r9
 800aaee:	f7f5 fd3b 	bl	8000568 <__aeabi_dmul>
 800aaf2:	460b      	mov	r3, r1
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f7f5 fb7d 	bl	80001f8 <__aeabi_dsub>
 800aafe:	4b29      	ldr	r3, [pc, #164]	; (800aba4 <__kernel_cos+0x17c>)
 800ab00:	429e      	cmp	r6, r3
 800ab02:	4680      	mov	r8, r0
 800ab04:	4689      	mov	r9, r1
 800ab06:	dc11      	bgt.n	800ab2c <__kernel_cos+0x104>
 800ab08:	4602      	mov	r2, r0
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	4650      	mov	r0, sl
 800ab0e:	4659      	mov	r1, fp
 800ab10:	f7f5 fb72 	bl	80001f8 <__aeabi_dsub>
 800ab14:	460b      	mov	r3, r1
 800ab16:	4924      	ldr	r1, [pc, #144]	; (800aba8 <__kernel_cos+0x180>)
 800ab18:	4602      	mov	r2, r0
 800ab1a:	2000      	movs	r0, #0
 800ab1c:	f7f5 fb6c 	bl	80001f8 <__aeabi_dsub>
 800ab20:	ecbd 8b02 	vpop	{d8}
 800ab24:	ec41 0b10 	vmov	d0, r0, r1
 800ab28:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab2c:	4b1f      	ldr	r3, [pc, #124]	; (800abac <__kernel_cos+0x184>)
 800ab2e:	491e      	ldr	r1, [pc, #120]	; (800aba8 <__kernel_cos+0x180>)
 800ab30:	429e      	cmp	r6, r3
 800ab32:	bfcc      	ite	gt
 800ab34:	4d1e      	ldrgt	r5, [pc, #120]	; (800abb0 <__kernel_cos+0x188>)
 800ab36:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ab3a:	2400      	movs	r4, #0
 800ab3c:	4622      	mov	r2, r4
 800ab3e:	462b      	mov	r3, r5
 800ab40:	2000      	movs	r0, #0
 800ab42:	f7f5 fb59 	bl	80001f8 <__aeabi_dsub>
 800ab46:	4622      	mov	r2, r4
 800ab48:	4606      	mov	r6, r0
 800ab4a:	460f      	mov	r7, r1
 800ab4c:	462b      	mov	r3, r5
 800ab4e:	4650      	mov	r0, sl
 800ab50:	4659      	mov	r1, fp
 800ab52:	f7f5 fb51 	bl	80001f8 <__aeabi_dsub>
 800ab56:	4642      	mov	r2, r8
 800ab58:	464b      	mov	r3, r9
 800ab5a:	f7f5 fb4d 	bl	80001f8 <__aeabi_dsub>
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4630      	mov	r0, r6
 800ab64:	4639      	mov	r1, r7
 800ab66:	e7d9      	b.n	800ab1c <__kernel_cos+0xf4>
 800ab68:	2000      	movs	r0, #0
 800ab6a:	490f      	ldr	r1, [pc, #60]	; (800aba8 <__kernel_cos+0x180>)
 800ab6c:	e7d8      	b.n	800ab20 <__kernel_cos+0xf8>
 800ab6e:	bf00      	nop
 800ab70:	be8838d4 	.word	0xbe8838d4
 800ab74:	bda8fae9 	.word	0xbda8fae9
 800ab78:	bdb4b1c4 	.word	0xbdb4b1c4
 800ab7c:	3e21ee9e 	.word	0x3e21ee9e
 800ab80:	809c52ad 	.word	0x809c52ad
 800ab84:	3e927e4f 	.word	0x3e927e4f
 800ab88:	19cb1590 	.word	0x19cb1590
 800ab8c:	3efa01a0 	.word	0x3efa01a0
 800ab90:	16c15177 	.word	0x16c15177
 800ab94:	3f56c16c 	.word	0x3f56c16c
 800ab98:	5555554c 	.word	0x5555554c
 800ab9c:	3fa55555 	.word	0x3fa55555
 800aba0:	3fe00000 	.word	0x3fe00000
 800aba4:	3fd33332 	.word	0x3fd33332
 800aba8:	3ff00000 	.word	0x3ff00000
 800abac:	3fe90000 	.word	0x3fe90000
 800abb0:	3fd20000 	.word	0x3fd20000
 800abb4:	00000000 	.word	0x00000000

0800abb8 <__kernel_rem_pio2>:
 800abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	ed2d 8b02 	vpush	{d8}
 800abc0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800abc4:	1ed4      	subs	r4, r2, #3
 800abc6:	9308      	str	r3, [sp, #32]
 800abc8:	9101      	str	r1, [sp, #4]
 800abca:	4bc5      	ldr	r3, [pc, #788]	; (800aee0 <__kernel_rem_pio2+0x328>)
 800abcc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800abce:	9009      	str	r0, [sp, #36]	; 0x24
 800abd0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800abd4:	9304      	str	r3, [sp, #16]
 800abd6:	9b08      	ldr	r3, [sp, #32]
 800abd8:	3b01      	subs	r3, #1
 800abda:	9307      	str	r3, [sp, #28]
 800abdc:	2318      	movs	r3, #24
 800abde:	fb94 f4f3 	sdiv	r4, r4, r3
 800abe2:	f06f 0317 	mvn.w	r3, #23
 800abe6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800abea:	fb04 3303 	mla	r3, r4, r3, r3
 800abee:	eb03 0a02 	add.w	sl, r3, r2
 800abf2:	9b04      	ldr	r3, [sp, #16]
 800abf4:	9a07      	ldr	r2, [sp, #28]
 800abf6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800aed0 <__kernel_rem_pio2+0x318>
 800abfa:	eb03 0802 	add.w	r8, r3, r2
 800abfe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ac00:	1aa7      	subs	r7, r4, r2
 800ac02:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ac06:	ae22      	add	r6, sp, #136	; 0x88
 800ac08:	2500      	movs	r5, #0
 800ac0a:	4545      	cmp	r5, r8
 800ac0c:	dd13      	ble.n	800ac36 <__kernel_rem_pio2+0x7e>
 800ac0e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800aed0 <__kernel_rem_pio2+0x318>
 800ac12:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ac16:	2600      	movs	r6, #0
 800ac18:	9b04      	ldr	r3, [sp, #16]
 800ac1a:	429e      	cmp	r6, r3
 800ac1c:	dc32      	bgt.n	800ac84 <__kernel_rem_pio2+0xcc>
 800ac1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac20:	9302      	str	r3, [sp, #8]
 800ac22:	9b08      	ldr	r3, [sp, #32]
 800ac24:	199d      	adds	r5, r3, r6
 800ac26:	ab22      	add	r3, sp, #136	; 0x88
 800ac28:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ac2c:	9306      	str	r3, [sp, #24]
 800ac2e:	ec59 8b18 	vmov	r8, r9, d8
 800ac32:	2700      	movs	r7, #0
 800ac34:	e01f      	b.n	800ac76 <__kernel_rem_pio2+0xbe>
 800ac36:	42ef      	cmn	r7, r5
 800ac38:	d407      	bmi.n	800ac4a <__kernel_rem_pio2+0x92>
 800ac3a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ac3e:	f7f5 fc29 	bl	8000494 <__aeabi_i2d>
 800ac42:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ac46:	3501      	adds	r5, #1
 800ac48:	e7df      	b.n	800ac0a <__kernel_rem_pio2+0x52>
 800ac4a:	ec51 0b18 	vmov	r0, r1, d8
 800ac4e:	e7f8      	b.n	800ac42 <__kernel_rem_pio2+0x8a>
 800ac50:	9906      	ldr	r1, [sp, #24]
 800ac52:	9d02      	ldr	r5, [sp, #8]
 800ac54:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ac58:	9106      	str	r1, [sp, #24]
 800ac5a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ac5e:	9502      	str	r5, [sp, #8]
 800ac60:	f7f5 fc82 	bl	8000568 <__aeabi_dmul>
 800ac64:	4602      	mov	r2, r0
 800ac66:	460b      	mov	r3, r1
 800ac68:	4640      	mov	r0, r8
 800ac6a:	4649      	mov	r1, r9
 800ac6c:	f7f5 fac6 	bl	80001fc <__adddf3>
 800ac70:	3701      	adds	r7, #1
 800ac72:	4680      	mov	r8, r0
 800ac74:	4689      	mov	r9, r1
 800ac76:	9b07      	ldr	r3, [sp, #28]
 800ac78:	429f      	cmp	r7, r3
 800ac7a:	dde9      	ble.n	800ac50 <__kernel_rem_pio2+0x98>
 800ac7c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800ac80:	3601      	adds	r6, #1
 800ac82:	e7c9      	b.n	800ac18 <__kernel_rem_pio2+0x60>
 800ac84:	9b04      	ldr	r3, [sp, #16]
 800ac86:	aa0e      	add	r2, sp, #56	; 0x38
 800ac88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac8c:	930c      	str	r3, [sp, #48]	; 0x30
 800ac8e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ac90:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ac94:	9c04      	ldr	r4, [sp, #16]
 800ac96:	930b      	str	r3, [sp, #44]	; 0x2c
 800ac98:	ab9a      	add	r3, sp, #616	; 0x268
 800ac9a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800ac9e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aca2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aca6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800acaa:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800acae:	ab9a      	add	r3, sp, #616	; 0x268
 800acb0:	445b      	add	r3, fp
 800acb2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800acb6:	2500      	movs	r5, #0
 800acb8:	1b63      	subs	r3, r4, r5
 800acba:	2b00      	cmp	r3, #0
 800acbc:	dc78      	bgt.n	800adb0 <__kernel_rem_pio2+0x1f8>
 800acbe:	4650      	mov	r0, sl
 800acc0:	ec49 8b10 	vmov	d0, r8, r9
 800acc4:	f000 fc00 	bl	800b4c8 <scalbn>
 800acc8:	ec57 6b10 	vmov	r6, r7, d0
 800accc:	2200      	movs	r2, #0
 800acce:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800acd2:	ee10 0a10 	vmov	r0, s0
 800acd6:	4639      	mov	r1, r7
 800acd8:	f7f5 fc46 	bl	8000568 <__aeabi_dmul>
 800acdc:	ec41 0b10 	vmov	d0, r0, r1
 800ace0:	f000 fb6e 	bl	800b3c0 <floor>
 800ace4:	2200      	movs	r2, #0
 800ace6:	ec51 0b10 	vmov	r0, r1, d0
 800acea:	4b7e      	ldr	r3, [pc, #504]	; (800aee4 <__kernel_rem_pio2+0x32c>)
 800acec:	f7f5 fc3c 	bl	8000568 <__aeabi_dmul>
 800acf0:	4602      	mov	r2, r0
 800acf2:	460b      	mov	r3, r1
 800acf4:	4630      	mov	r0, r6
 800acf6:	4639      	mov	r1, r7
 800acf8:	f7f5 fa7e 	bl	80001f8 <__aeabi_dsub>
 800acfc:	460f      	mov	r7, r1
 800acfe:	4606      	mov	r6, r0
 800ad00:	f7f5 fecc 	bl	8000a9c <__aeabi_d2iz>
 800ad04:	9006      	str	r0, [sp, #24]
 800ad06:	f7f5 fbc5 	bl	8000494 <__aeabi_i2d>
 800ad0a:	4602      	mov	r2, r0
 800ad0c:	460b      	mov	r3, r1
 800ad0e:	4630      	mov	r0, r6
 800ad10:	4639      	mov	r1, r7
 800ad12:	f7f5 fa71 	bl	80001f8 <__aeabi_dsub>
 800ad16:	f1ba 0f00 	cmp.w	sl, #0
 800ad1a:	4606      	mov	r6, r0
 800ad1c:	460f      	mov	r7, r1
 800ad1e:	dd6c      	ble.n	800adfa <__kernel_rem_pio2+0x242>
 800ad20:	1e62      	subs	r2, r4, #1
 800ad22:	ab0e      	add	r3, sp, #56	; 0x38
 800ad24:	f1ca 0118 	rsb	r1, sl, #24
 800ad28:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800ad2c:	9d06      	ldr	r5, [sp, #24]
 800ad2e:	fa40 f301 	asr.w	r3, r0, r1
 800ad32:	441d      	add	r5, r3
 800ad34:	408b      	lsls	r3, r1
 800ad36:	1ac0      	subs	r0, r0, r3
 800ad38:	ab0e      	add	r3, sp, #56	; 0x38
 800ad3a:	9506      	str	r5, [sp, #24]
 800ad3c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800ad40:	f1ca 0317 	rsb	r3, sl, #23
 800ad44:	fa40 f303 	asr.w	r3, r0, r3
 800ad48:	9302      	str	r3, [sp, #8]
 800ad4a:	9b02      	ldr	r3, [sp, #8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	dd62      	ble.n	800ae16 <__kernel_rem_pio2+0x25e>
 800ad50:	9b06      	ldr	r3, [sp, #24]
 800ad52:	2200      	movs	r2, #0
 800ad54:	3301      	adds	r3, #1
 800ad56:	9306      	str	r3, [sp, #24]
 800ad58:	4615      	mov	r5, r2
 800ad5a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ad5e:	4294      	cmp	r4, r2
 800ad60:	f300 8095 	bgt.w	800ae8e <__kernel_rem_pio2+0x2d6>
 800ad64:	f1ba 0f00 	cmp.w	sl, #0
 800ad68:	dd07      	ble.n	800ad7a <__kernel_rem_pio2+0x1c2>
 800ad6a:	f1ba 0f01 	cmp.w	sl, #1
 800ad6e:	f000 80a2 	beq.w	800aeb6 <__kernel_rem_pio2+0x2fe>
 800ad72:	f1ba 0f02 	cmp.w	sl, #2
 800ad76:	f000 80c1 	beq.w	800aefc <__kernel_rem_pio2+0x344>
 800ad7a:	9b02      	ldr	r3, [sp, #8]
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d14a      	bne.n	800ae16 <__kernel_rem_pio2+0x25e>
 800ad80:	4632      	mov	r2, r6
 800ad82:	463b      	mov	r3, r7
 800ad84:	2000      	movs	r0, #0
 800ad86:	4958      	ldr	r1, [pc, #352]	; (800aee8 <__kernel_rem_pio2+0x330>)
 800ad88:	f7f5 fa36 	bl	80001f8 <__aeabi_dsub>
 800ad8c:	4606      	mov	r6, r0
 800ad8e:	460f      	mov	r7, r1
 800ad90:	2d00      	cmp	r5, #0
 800ad92:	d040      	beq.n	800ae16 <__kernel_rem_pio2+0x25e>
 800ad94:	4650      	mov	r0, sl
 800ad96:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800aed8 <__kernel_rem_pio2+0x320>
 800ad9a:	f000 fb95 	bl	800b4c8 <scalbn>
 800ad9e:	4630      	mov	r0, r6
 800ada0:	4639      	mov	r1, r7
 800ada2:	ec53 2b10 	vmov	r2, r3, d0
 800ada6:	f7f5 fa27 	bl	80001f8 <__aeabi_dsub>
 800adaa:	4606      	mov	r6, r0
 800adac:	460f      	mov	r7, r1
 800adae:	e032      	b.n	800ae16 <__kernel_rem_pio2+0x25e>
 800adb0:	2200      	movs	r2, #0
 800adb2:	4b4e      	ldr	r3, [pc, #312]	; (800aeec <__kernel_rem_pio2+0x334>)
 800adb4:	4640      	mov	r0, r8
 800adb6:	4649      	mov	r1, r9
 800adb8:	f7f5 fbd6 	bl	8000568 <__aeabi_dmul>
 800adbc:	f7f5 fe6e 	bl	8000a9c <__aeabi_d2iz>
 800adc0:	f7f5 fb68 	bl	8000494 <__aeabi_i2d>
 800adc4:	2200      	movs	r2, #0
 800adc6:	4b4a      	ldr	r3, [pc, #296]	; (800aef0 <__kernel_rem_pio2+0x338>)
 800adc8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800adcc:	f7f5 fbcc 	bl	8000568 <__aeabi_dmul>
 800add0:	4602      	mov	r2, r0
 800add2:	460b      	mov	r3, r1
 800add4:	4640      	mov	r0, r8
 800add6:	4649      	mov	r1, r9
 800add8:	f7f5 fa0e 	bl	80001f8 <__aeabi_dsub>
 800addc:	f7f5 fe5e 	bl	8000a9c <__aeabi_d2iz>
 800ade0:	ab0e      	add	r3, sp, #56	; 0x38
 800ade2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800ade6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800adea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adee:	f7f5 fa05 	bl	80001fc <__adddf3>
 800adf2:	3501      	adds	r5, #1
 800adf4:	4680      	mov	r8, r0
 800adf6:	4689      	mov	r9, r1
 800adf8:	e75e      	b.n	800acb8 <__kernel_rem_pio2+0x100>
 800adfa:	d105      	bne.n	800ae08 <__kernel_rem_pio2+0x250>
 800adfc:	1e63      	subs	r3, r4, #1
 800adfe:	aa0e      	add	r2, sp, #56	; 0x38
 800ae00:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800ae04:	15c3      	asrs	r3, r0, #23
 800ae06:	e79f      	b.n	800ad48 <__kernel_rem_pio2+0x190>
 800ae08:	2200      	movs	r2, #0
 800ae0a:	4b3a      	ldr	r3, [pc, #232]	; (800aef4 <__kernel_rem_pio2+0x33c>)
 800ae0c:	f7f5 fe32 	bl	8000a74 <__aeabi_dcmpge>
 800ae10:	2800      	cmp	r0, #0
 800ae12:	d139      	bne.n	800ae88 <__kernel_rem_pio2+0x2d0>
 800ae14:	9002      	str	r0, [sp, #8]
 800ae16:	2200      	movs	r2, #0
 800ae18:	2300      	movs	r3, #0
 800ae1a:	4630      	mov	r0, r6
 800ae1c:	4639      	mov	r1, r7
 800ae1e:	f7f5 fe0b 	bl	8000a38 <__aeabi_dcmpeq>
 800ae22:	2800      	cmp	r0, #0
 800ae24:	f000 80c7 	beq.w	800afb6 <__kernel_rem_pio2+0x3fe>
 800ae28:	1e65      	subs	r5, r4, #1
 800ae2a:	462b      	mov	r3, r5
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	9904      	ldr	r1, [sp, #16]
 800ae30:	428b      	cmp	r3, r1
 800ae32:	da6a      	bge.n	800af0a <__kernel_rem_pio2+0x352>
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	f000 8088 	beq.w	800af4a <__kernel_rem_pio2+0x392>
 800ae3a:	ab0e      	add	r3, sp, #56	; 0x38
 800ae3c:	f1aa 0a18 	sub.w	sl, sl, #24
 800ae40:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	f000 80b4 	beq.w	800afb2 <__kernel_rem_pio2+0x3fa>
 800ae4a:	4650      	mov	r0, sl
 800ae4c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800aed8 <__kernel_rem_pio2+0x320>
 800ae50:	f000 fb3a 	bl	800b4c8 <scalbn>
 800ae54:	00ec      	lsls	r4, r5, #3
 800ae56:	ab72      	add	r3, sp, #456	; 0x1c8
 800ae58:	191e      	adds	r6, r3, r4
 800ae5a:	ec59 8b10 	vmov	r8, r9, d0
 800ae5e:	f106 0a08 	add.w	sl, r6, #8
 800ae62:	462f      	mov	r7, r5
 800ae64:	2f00      	cmp	r7, #0
 800ae66:	f280 80df 	bge.w	800b028 <__kernel_rem_pio2+0x470>
 800ae6a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800aed0 <__kernel_rem_pio2+0x318>
 800ae6e:	f04f 0a00 	mov.w	sl, #0
 800ae72:	eba5 030a 	sub.w	r3, r5, sl
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	f2c0 810a 	blt.w	800b090 <__kernel_rem_pio2+0x4d8>
 800ae7c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800aef8 <__kernel_rem_pio2+0x340>
 800ae80:	ec59 8b18 	vmov	r8, r9, d8
 800ae84:	2700      	movs	r7, #0
 800ae86:	e0f5      	b.n	800b074 <__kernel_rem_pio2+0x4bc>
 800ae88:	2302      	movs	r3, #2
 800ae8a:	9302      	str	r3, [sp, #8]
 800ae8c:	e760      	b.n	800ad50 <__kernel_rem_pio2+0x198>
 800ae8e:	ab0e      	add	r3, sp, #56	; 0x38
 800ae90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae94:	b94d      	cbnz	r5, 800aeaa <__kernel_rem_pio2+0x2f2>
 800ae96:	b12b      	cbz	r3, 800aea4 <__kernel_rem_pio2+0x2ec>
 800ae98:	a80e      	add	r0, sp, #56	; 0x38
 800ae9a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ae9e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800aea2:	2301      	movs	r3, #1
 800aea4:	3201      	adds	r2, #1
 800aea6:	461d      	mov	r5, r3
 800aea8:	e759      	b.n	800ad5e <__kernel_rem_pio2+0x1a6>
 800aeaa:	a80e      	add	r0, sp, #56	; 0x38
 800aeac:	1acb      	subs	r3, r1, r3
 800aeae:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800aeb2:	462b      	mov	r3, r5
 800aeb4:	e7f6      	b.n	800aea4 <__kernel_rem_pio2+0x2ec>
 800aeb6:	1e62      	subs	r2, r4, #1
 800aeb8:	ab0e      	add	r3, sp, #56	; 0x38
 800aeba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aebe:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800aec2:	a90e      	add	r1, sp, #56	; 0x38
 800aec4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800aec8:	e757      	b.n	800ad7a <__kernel_rem_pio2+0x1c2>
 800aeca:	bf00      	nop
 800aecc:	f3af 8000 	nop.w
	...
 800aedc:	3ff00000 	.word	0x3ff00000
 800aee0:	0800b820 	.word	0x0800b820
 800aee4:	40200000 	.word	0x40200000
 800aee8:	3ff00000 	.word	0x3ff00000
 800aeec:	3e700000 	.word	0x3e700000
 800aef0:	41700000 	.word	0x41700000
 800aef4:	3fe00000 	.word	0x3fe00000
 800aef8:	0800b7e0 	.word	0x0800b7e0
 800aefc:	1e62      	subs	r2, r4, #1
 800aefe:	ab0e      	add	r3, sp, #56	; 0x38
 800af00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800af08:	e7db      	b.n	800aec2 <__kernel_rem_pio2+0x30a>
 800af0a:	a90e      	add	r1, sp, #56	; 0x38
 800af0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800af10:	3b01      	subs	r3, #1
 800af12:	430a      	orrs	r2, r1
 800af14:	e78b      	b.n	800ae2e <__kernel_rem_pio2+0x276>
 800af16:	3301      	adds	r3, #1
 800af18:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800af1c:	2900      	cmp	r1, #0
 800af1e:	d0fa      	beq.n	800af16 <__kernel_rem_pio2+0x35e>
 800af20:	9a08      	ldr	r2, [sp, #32]
 800af22:	4422      	add	r2, r4
 800af24:	00d2      	lsls	r2, r2, #3
 800af26:	a922      	add	r1, sp, #136	; 0x88
 800af28:	18e3      	adds	r3, r4, r3
 800af2a:	9206      	str	r2, [sp, #24]
 800af2c:	440a      	add	r2, r1
 800af2e:	9302      	str	r3, [sp, #8]
 800af30:	f10b 0108 	add.w	r1, fp, #8
 800af34:	f102 0308 	add.w	r3, r2, #8
 800af38:	1c66      	adds	r6, r4, #1
 800af3a:	910a      	str	r1, [sp, #40]	; 0x28
 800af3c:	2500      	movs	r5, #0
 800af3e:	930d      	str	r3, [sp, #52]	; 0x34
 800af40:	9b02      	ldr	r3, [sp, #8]
 800af42:	42b3      	cmp	r3, r6
 800af44:	da04      	bge.n	800af50 <__kernel_rem_pio2+0x398>
 800af46:	461c      	mov	r4, r3
 800af48:	e6a6      	b.n	800ac98 <__kernel_rem_pio2+0xe0>
 800af4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af4c:	2301      	movs	r3, #1
 800af4e:	e7e3      	b.n	800af18 <__kernel_rem_pio2+0x360>
 800af50:	9b06      	ldr	r3, [sp, #24]
 800af52:	18ef      	adds	r7, r5, r3
 800af54:	ab22      	add	r3, sp, #136	; 0x88
 800af56:	441f      	add	r7, r3
 800af58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af5a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800af5e:	f7f5 fa99 	bl	8000494 <__aeabi_i2d>
 800af62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af64:	461c      	mov	r4, r3
 800af66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af68:	e9c7 0100 	strd	r0, r1, [r7]
 800af6c:	eb03 0b05 	add.w	fp, r3, r5
 800af70:	2700      	movs	r7, #0
 800af72:	f04f 0800 	mov.w	r8, #0
 800af76:	f04f 0900 	mov.w	r9, #0
 800af7a:	9b07      	ldr	r3, [sp, #28]
 800af7c:	429f      	cmp	r7, r3
 800af7e:	dd08      	ble.n	800af92 <__kernel_rem_pio2+0x3da>
 800af80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af82:	aa72      	add	r2, sp, #456	; 0x1c8
 800af84:	18eb      	adds	r3, r5, r3
 800af86:	4413      	add	r3, r2
 800af88:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800af8c:	3601      	adds	r6, #1
 800af8e:	3508      	adds	r5, #8
 800af90:	e7d6      	b.n	800af40 <__kernel_rem_pio2+0x388>
 800af92:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800af96:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800af9a:	f7f5 fae5 	bl	8000568 <__aeabi_dmul>
 800af9e:	4602      	mov	r2, r0
 800afa0:	460b      	mov	r3, r1
 800afa2:	4640      	mov	r0, r8
 800afa4:	4649      	mov	r1, r9
 800afa6:	f7f5 f929 	bl	80001fc <__adddf3>
 800afaa:	3701      	adds	r7, #1
 800afac:	4680      	mov	r8, r0
 800afae:	4689      	mov	r9, r1
 800afb0:	e7e3      	b.n	800af7a <__kernel_rem_pio2+0x3c2>
 800afb2:	3d01      	subs	r5, #1
 800afb4:	e741      	b.n	800ae3a <__kernel_rem_pio2+0x282>
 800afb6:	f1ca 0000 	rsb	r0, sl, #0
 800afba:	ec47 6b10 	vmov	d0, r6, r7
 800afbe:	f000 fa83 	bl	800b4c8 <scalbn>
 800afc2:	ec57 6b10 	vmov	r6, r7, d0
 800afc6:	2200      	movs	r2, #0
 800afc8:	4b99      	ldr	r3, [pc, #612]	; (800b230 <__kernel_rem_pio2+0x678>)
 800afca:	ee10 0a10 	vmov	r0, s0
 800afce:	4639      	mov	r1, r7
 800afd0:	f7f5 fd50 	bl	8000a74 <__aeabi_dcmpge>
 800afd4:	b1f8      	cbz	r0, 800b016 <__kernel_rem_pio2+0x45e>
 800afd6:	2200      	movs	r2, #0
 800afd8:	4b96      	ldr	r3, [pc, #600]	; (800b234 <__kernel_rem_pio2+0x67c>)
 800afda:	4630      	mov	r0, r6
 800afdc:	4639      	mov	r1, r7
 800afde:	f7f5 fac3 	bl	8000568 <__aeabi_dmul>
 800afe2:	f7f5 fd5b 	bl	8000a9c <__aeabi_d2iz>
 800afe6:	4680      	mov	r8, r0
 800afe8:	f7f5 fa54 	bl	8000494 <__aeabi_i2d>
 800afec:	2200      	movs	r2, #0
 800afee:	4b90      	ldr	r3, [pc, #576]	; (800b230 <__kernel_rem_pio2+0x678>)
 800aff0:	f7f5 faba 	bl	8000568 <__aeabi_dmul>
 800aff4:	460b      	mov	r3, r1
 800aff6:	4602      	mov	r2, r0
 800aff8:	4639      	mov	r1, r7
 800affa:	4630      	mov	r0, r6
 800affc:	f7f5 f8fc 	bl	80001f8 <__aeabi_dsub>
 800b000:	f7f5 fd4c 	bl	8000a9c <__aeabi_d2iz>
 800b004:	1c65      	adds	r5, r4, #1
 800b006:	ab0e      	add	r3, sp, #56	; 0x38
 800b008:	f10a 0a18 	add.w	sl, sl, #24
 800b00c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b010:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b014:	e719      	b.n	800ae4a <__kernel_rem_pio2+0x292>
 800b016:	4630      	mov	r0, r6
 800b018:	4639      	mov	r1, r7
 800b01a:	f7f5 fd3f 	bl	8000a9c <__aeabi_d2iz>
 800b01e:	ab0e      	add	r3, sp, #56	; 0x38
 800b020:	4625      	mov	r5, r4
 800b022:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b026:	e710      	b.n	800ae4a <__kernel_rem_pio2+0x292>
 800b028:	ab0e      	add	r3, sp, #56	; 0x38
 800b02a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b02e:	f7f5 fa31 	bl	8000494 <__aeabi_i2d>
 800b032:	4642      	mov	r2, r8
 800b034:	464b      	mov	r3, r9
 800b036:	f7f5 fa97 	bl	8000568 <__aeabi_dmul>
 800b03a:	2200      	movs	r2, #0
 800b03c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b040:	4b7c      	ldr	r3, [pc, #496]	; (800b234 <__kernel_rem_pio2+0x67c>)
 800b042:	4640      	mov	r0, r8
 800b044:	4649      	mov	r1, r9
 800b046:	f7f5 fa8f 	bl	8000568 <__aeabi_dmul>
 800b04a:	3f01      	subs	r7, #1
 800b04c:	4680      	mov	r8, r0
 800b04e:	4689      	mov	r9, r1
 800b050:	e708      	b.n	800ae64 <__kernel_rem_pio2+0x2ac>
 800b052:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b05e:	f7f5 fa83 	bl	8000568 <__aeabi_dmul>
 800b062:	4602      	mov	r2, r0
 800b064:	460b      	mov	r3, r1
 800b066:	4640      	mov	r0, r8
 800b068:	4649      	mov	r1, r9
 800b06a:	f7f5 f8c7 	bl	80001fc <__adddf3>
 800b06e:	3701      	adds	r7, #1
 800b070:	4680      	mov	r8, r0
 800b072:	4689      	mov	r9, r1
 800b074:	9b04      	ldr	r3, [sp, #16]
 800b076:	429f      	cmp	r7, r3
 800b078:	dc01      	bgt.n	800b07e <__kernel_rem_pio2+0x4c6>
 800b07a:	45ba      	cmp	sl, r7
 800b07c:	dae9      	bge.n	800b052 <__kernel_rem_pio2+0x49a>
 800b07e:	ab4a      	add	r3, sp, #296	; 0x128
 800b080:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b084:	e9c3 8900 	strd	r8, r9, [r3]
 800b088:	f10a 0a01 	add.w	sl, sl, #1
 800b08c:	3e08      	subs	r6, #8
 800b08e:	e6f0      	b.n	800ae72 <__kernel_rem_pio2+0x2ba>
 800b090:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b092:	2b03      	cmp	r3, #3
 800b094:	d85b      	bhi.n	800b14e <__kernel_rem_pio2+0x596>
 800b096:	e8df f003 	tbb	[pc, r3]
 800b09a:	264a      	.short	0x264a
 800b09c:	0226      	.short	0x0226
 800b09e:	ab9a      	add	r3, sp, #616	; 0x268
 800b0a0:	441c      	add	r4, r3
 800b0a2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b0a6:	46a2      	mov	sl, r4
 800b0a8:	46ab      	mov	fp, r5
 800b0aa:	f1bb 0f00 	cmp.w	fp, #0
 800b0ae:	dc6c      	bgt.n	800b18a <__kernel_rem_pio2+0x5d2>
 800b0b0:	46a2      	mov	sl, r4
 800b0b2:	46ab      	mov	fp, r5
 800b0b4:	f1bb 0f01 	cmp.w	fp, #1
 800b0b8:	f300 8086 	bgt.w	800b1c8 <__kernel_rem_pio2+0x610>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	2100      	movs	r1, #0
 800b0c0:	2d01      	cmp	r5, #1
 800b0c2:	f300 80a0 	bgt.w	800b206 <__kernel_rem_pio2+0x64e>
 800b0c6:	9b02      	ldr	r3, [sp, #8]
 800b0c8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b0cc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	f040 809e 	bne.w	800b212 <__kernel_rem_pio2+0x65a>
 800b0d6:	9b01      	ldr	r3, [sp, #4]
 800b0d8:	e9c3 7800 	strd	r7, r8, [r3]
 800b0dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b0e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b0e4:	e033      	b.n	800b14e <__kernel_rem_pio2+0x596>
 800b0e6:	3408      	adds	r4, #8
 800b0e8:	ab4a      	add	r3, sp, #296	; 0x128
 800b0ea:	441c      	add	r4, r3
 800b0ec:	462e      	mov	r6, r5
 800b0ee:	2000      	movs	r0, #0
 800b0f0:	2100      	movs	r1, #0
 800b0f2:	2e00      	cmp	r6, #0
 800b0f4:	da3a      	bge.n	800b16c <__kernel_rem_pio2+0x5b4>
 800b0f6:	9b02      	ldr	r3, [sp, #8]
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d03d      	beq.n	800b178 <__kernel_rem_pio2+0x5c0>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b102:	9c01      	ldr	r4, [sp, #4]
 800b104:	e9c4 2300 	strd	r2, r3, [r4]
 800b108:	4602      	mov	r2, r0
 800b10a:	460b      	mov	r3, r1
 800b10c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b110:	f7f5 f872 	bl	80001f8 <__aeabi_dsub>
 800b114:	ae4c      	add	r6, sp, #304	; 0x130
 800b116:	2401      	movs	r4, #1
 800b118:	42a5      	cmp	r5, r4
 800b11a:	da30      	bge.n	800b17e <__kernel_rem_pio2+0x5c6>
 800b11c:	9b02      	ldr	r3, [sp, #8]
 800b11e:	b113      	cbz	r3, 800b126 <__kernel_rem_pio2+0x56e>
 800b120:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b124:	4619      	mov	r1, r3
 800b126:	9b01      	ldr	r3, [sp, #4]
 800b128:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b12c:	e00f      	b.n	800b14e <__kernel_rem_pio2+0x596>
 800b12e:	ab9a      	add	r3, sp, #616	; 0x268
 800b130:	441c      	add	r4, r3
 800b132:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b136:	2000      	movs	r0, #0
 800b138:	2100      	movs	r1, #0
 800b13a:	2d00      	cmp	r5, #0
 800b13c:	da10      	bge.n	800b160 <__kernel_rem_pio2+0x5a8>
 800b13e:	9b02      	ldr	r3, [sp, #8]
 800b140:	b113      	cbz	r3, 800b148 <__kernel_rem_pio2+0x590>
 800b142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b146:	4619      	mov	r1, r3
 800b148:	9b01      	ldr	r3, [sp, #4]
 800b14a:	e9c3 0100 	strd	r0, r1, [r3]
 800b14e:	9b06      	ldr	r3, [sp, #24]
 800b150:	f003 0007 	and.w	r0, r3, #7
 800b154:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b158:	ecbd 8b02 	vpop	{d8}
 800b15c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b160:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b164:	f7f5 f84a 	bl	80001fc <__adddf3>
 800b168:	3d01      	subs	r5, #1
 800b16a:	e7e6      	b.n	800b13a <__kernel_rem_pio2+0x582>
 800b16c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b170:	f7f5 f844 	bl	80001fc <__adddf3>
 800b174:	3e01      	subs	r6, #1
 800b176:	e7bc      	b.n	800b0f2 <__kernel_rem_pio2+0x53a>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	e7c1      	b.n	800b102 <__kernel_rem_pio2+0x54a>
 800b17e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b182:	f7f5 f83b 	bl	80001fc <__adddf3>
 800b186:	3401      	adds	r4, #1
 800b188:	e7c6      	b.n	800b118 <__kernel_rem_pio2+0x560>
 800b18a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b18e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b192:	4640      	mov	r0, r8
 800b194:	ec53 2b17 	vmov	r2, r3, d7
 800b198:	4649      	mov	r1, r9
 800b19a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b19e:	f7f5 f82d 	bl	80001fc <__adddf3>
 800b1a2:	4602      	mov	r2, r0
 800b1a4:	460b      	mov	r3, r1
 800b1a6:	4606      	mov	r6, r0
 800b1a8:	460f      	mov	r7, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 f823 	bl	80001f8 <__aeabi_dsub>
 800b1b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1b6:	f7f5 f821 	bl	80001fc <__adddf3>
 800b1ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1be:	e9ca 0100 	strd	r0, r1, [sl]
 800b1c2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b1c6:	e770      	b.n	800b0aa <__kernel_rem_pio2+0x4f2>
 800b1c8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b1cc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b1d0:	4630      	mov	r0, r6
 800b1d2:	ec53 2b17 	vmov	r2, r3, d7
 800b1d6:	4639      	mov	r1, r7
 800b1d8:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b1dc:	f7f5 f80e 	bl	80001fc <__adddf3>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	4680      	mov	r8, r0
 800b1e6:	4689      	mov	r9, r1
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	f7f5 f804 	bl	80001f8 <__aeabi_dsub>
 800b1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1f4:	f7f5 f802 	bl	80001fc <__adddf3>
 800b1f8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b1fc:	e9ca 0100 	strd	r0, r1, [sl]
 800b200:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b204:	e756      	b.n	800b0b4 <__kernel_rem_pio2+0x4fc>
 800b206:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b20a:	f7f4 fff7 	bl	80001fc <__adddf3>
 800b20e:	3d01      	subs	r5, #1
 800b210:	e756      	b.n	800b0c0 <__kernel_rem_pio2+0x508>
 800b212:	9b01      	ldr	r3, [sp, #4]
 800b214:	9a01      	ldr	r2, [sp, #4]
 800b216:	601f      	str	r7, [r3, #0]
 800b218:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b21c:	605c      	str	r4, [r3, #4]
 800b21e:	609d      	str	r5, [r3, #8]
 800b220:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b224:	60d3      	str	r3, [r2, #12]
 800b226:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b22a:	6110      	str	r0, [r2, #16]
 800b22c:	6153      	str	r3, [r2, #20]
 800b22e:	e78e      	b.n	800b14e <__kernel_rem_pio2+0x596>
 800b230:	41700000 	.word	0x41700000
 800b234:	3e700000 	.word	0x3e700000

0800b238 <__kernel_sin>:
 800b238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b23c:	ec55 4b10 	vmov	r4, r5, d0
 800b240:	b085      	sub	sp, #20
 800b242:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b246:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b24a:	ed8d 1b00 	vstr	d1, [sp]
 800b24e:	9002      	str	r0, [sp, #8]
 800b250:	da06      	bge.n	800b260 <__kernel_sin+0x28>
 800b252:	ee10 0a10 	vmov	r0, s0
 800b256:	4629      	mov	r1, r5
 800b258:	f7f5 fc20 	bl	8000a9c <__aeabi_d2iz>
 800b25c:	2800      	cmp	r0, #0
 800b25e:	d051      	beq.n	800b304 <__kernel_sin+0xcc>
 800b260:	4622      	mov	r2, r4
 800b262:	462b      	mov	r3, r5
 800b264:	4620      	mov	r0, r4
 800b266:	4629      	mov	r1, r5
 800b268:	f7f5 f97e 	bl	8000568 <__aeabi_dmul>
 800b26c:	4682      	mov	sl, r0
 800b26e:	468b      	mov	fp, r1
 800b270:	4602      	mov	r2, r0
 800b272:	460b      	mov	r3, r1
 800b274:	4620      	mov	r0, r4
 800b276:	4629      	mov	r1, r5
 800b278:	f7f5 f976 	bl	8000568 <__aeabi_dmul>
 800b27c:	a341      	add	r3, pc, #260	; (adr r3, 800b384 <__kernel_sin+0x14c>)
 800b27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b282:	4680      	mov	r8, r0
 800b284:	4689      	mov	r9, r1
 800b286:	4650      	mov	r0, sl
 800b288:	4659      	mov	r1, fp
 800b28a:	f7f5 f96d 	bl	8000568 <__aeabi_dmul>
 800b28e:	a33f      	add	r3, pc, #252	; (adr r3, 800b38c <__kernel_sin+0x154>)
 800b290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b294:	f7f4 ffb0 	bl	80001f8 <__aeabi_dsub>
 800b298:	4652      	mov	r2, sl
 800b29a:	465b      	mov	r3, fp
 800b29c:	f7f5 f964 	bl	8000568 <__aeabi_dmul>
 800b2a0:	a33c      	add	r3, pc, #240	; (adr r3, 800b394 <__kernel_sin+0x15c>)
 800b2a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a6:	f7f4 ffa9 	bl	80001fc <__adddf3>
 800b2aa:	4652      	mov	r2, sl
 800b2ac:	465b      	mov	r3, fp
 800b2ae:	f7f5 f95b 	bl	8000568 <__aeabi_dmul>
 800b2b2:	a33a      	add	r3, pc, #232	; (adr r3, 800b39c <__kernel_sin+0x164>)
 800b2b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b8:	f7f4 ff9e 	bl	80001f8 <__aeabi_dsub>
 800b2bc:	4652      	mov	r2, sl
 800b2be:	465b      	mov	r3, fp
 800b2c0:	f7f5 f952 	bl	8000568 <__aeabi_dmul>
 800b2c4:	a337      	add	r3, pc, #220	; (adr r3, 800b3a4 <__kernel_sin+0x16c>)
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	f7f4 ff97 	bl	80001fc <__adddf3>
 800b2ce:	9b02      	ldr	r3, [sp, #8]
 800b2d0:	4606      	mov	r6, r0
 800b2d2:	460f      	mov	r7, r1
 800b2d4:	b9db      	cbnz	r3, 800b30e <__kernel_sin+0xd6>
 800b2d6:	4602      	mov	r2, r0
 800b2d8:	460b      	mov	r3, r1
 800b2da:	4650      	mov	r0, sl
 800b2dc:	4659      	mov	r1, fp
 800b2de:	f7f5 f943 	bl	8000568 <__aeabi_dmul>
 800b2e2:	a325      	add	r3, pc, #148	; (adr r3, 800b378 <__kernel_sin+0x140>)
 800b2e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e8:	f7f4 ff86 	bl	80001f8 <__aeabi_dsub>
 800b2ec:	4642      	mov	r2, r8
 800b2ee:	464b      	mov	r3, r9
 800b2f0:	f7f5 f93a 	bl	8000568 <__aeabi_dmul>
 800b2f4:	4602      	mov	r2, r0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4620      	mov	r0, r4
 800b2fa:	4629      	mov	r1, r5
 800b2fc:	f7f4 ff7e 	bl	80001fc <__adddf3>
 800b300:	4604      	mov	r4, r0
 800b302:	460d      	mov	r5, r1
 800b304:	ec45 4b10 	vmov	d0, r4, r5
 800b308:	b005      	add	sp, #20
 800b30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b30e:	2200      	movs	r2, #0
 800b310:	4b1b      	ldr	r3, [pc, #108]	; (800b380 <__kernel_sin+0x148>)
 800b312:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b316:	f7f5 f927 	bl	8000568 <__aeabi_dmul>
 800b31a:	4632      	mov	r2, r6
 800b31c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b320:	463b      	mov	r3, r7
 800b322:	4640      	mov	r0, r8
 800b324:	4649      	mov	r1, r9
 800b326:	f7f5 f91f 	bl	8000568 <__aeabi_dmul>
 800b32a:	4602      	mov	r2, r0
 800b32c:	460b      	mov	r3, r1
 800b32e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b332:	f7f4 ff61 	bl	80001f8 <__aeabi_dsub>
 800b336:	4652      	mov	r2, sl
 800b338:	465b      	mov	r3, fp
 800b33a:	f7f5 f915 	bl	8000568 <__aeabi_dmul>
 800b33e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b342:	f7f4 ff59 	bl	80001f8 <__aeabi_dsub>
 800b346:	a30c      	add	r3, pc, #48	; (adr r3, 800b378 <__kernel_sin+0x140>)
 800b348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b34c:	4606      	mov	r6, r0
 800b34e:	460f      	mov	r7, r1
 800b350:	4640      	mov	r0, r8
 800b352:	4649      	mov	r1, r9
 800b354:	f7f5 f908 	bl	8000568 <__aeabi_dmul>
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	4630      	mov	r0, r6
 800b35e:	4639      	mov	r1, r7
 800b360:	f7f4 ff4c 	bl	80001fc <__adddf3>
 800b364:	4602      	mov	r2, r0
 800b366:	460b      	mov	r3, r1
 800b368:	4620      	mov	r0, r4
 800b36a:	4629      	mov	r1, r5
 800b36c:	f7f4 ff44 	bl	80001f8 <__aeabi_dsub>
 800b370:	e7c6      	b.n	800b300 <__kernel_sin+0xc8>
 800b372:	bf00      	nop
 800b374:	f3af 8000 	nop.w
 800b378:	55555549 	.word	0x55555549
 800b37c:	3fc55555 	.word	0x3fc55555
 800b380:	3fe00000 	.word	0x3fe00000
 800b384:	5acfd57c 	.word	0x5acfd57c
 800b388:	3de5d93a 	.word	0x3de5d93a
 800b38c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b390:	3e5ae5e6 	.word	0x3e5ae5e6
 800b394:	57b1fe7d 	.word	0x57b1fe7d
 800b398:	3ec71de3 	.word	0x3ec71de3
 800b39c:	19c161d5 	.word	0x19c161d5
 800b3a0:	3f2a01a0 	.word	0x3f2a01a0
 800b3a4:	1110f8a6 	.word	0x1110f8a6
 800b3a8:	3f811111 	.word	0x3f811111

0800b3ac <fabs>:
 800b3ac:	ec51 0b10 	vmov	r0, r1, d0
 800b3b0:	ee10 2a10 	vmov	r2, s0
 800b3b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b3b8:	ec43 2b10 	vmov	d0, r2, r3
 800b3bc:	4770      	bx	lr
	...

0800b3c0 <floor>:
 800b3c0:	ec51 0b10 	vmov	r0, r1, d0
 800b3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b3c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b3cc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b3d0:	2e13      	cmp	r6, #19
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	ee10 5a10 	vmov	r5, s0
 800b3d8:	4680      	mov	r8, r0
 800b3da:	dc34      	bgt.n	800b446 <floor+0x86>
 800b3dc:	2e00      	cmp	r6, #0
 800b3de:	da16      	bge.n	800b40e <floor+0x4e>
 800b3e0:	a335      	add	r3, pc, #212	; (adr r3, 800b4b8 <floor+0xf8>)
 800b3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3e6:	f7f4 ff09 	bl	80001fc <__adddf3>
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	f7f5 fb4b 	bl	8000a88 <__aeabi_dcmpgt>
 800b3f2:	b148      	cbz	r0, 800b408 <floor+0x48>
 800b3f4:	2c00      	cmp	r4, #0
 800b3f6:	da59      	bge.n	800b4ac <floor+0xec>
 800b3f8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b3fc:	4a30      	ldr	r2, [pc, #192]	; (800b4c0 <floor+0x100>)
 800b3fe:	432b      	orrs	r3, r5
 800b400:	2500      	movs	r5, #0
 800b402:	42ab      	cmp	r3, r5
 800b404:	bf18      	it	ne
 800b406:	4614      	movne	r4, r2
 800b408:	4621      	mov	r1, r4
 800b40a:	4628      	mov	r0, r5
 800b40c:	e025      	b.n	800b45a <floor+0x9a>
 800b40e:	4f2d      	ldr	r7, [pc, #180]	; (800b4c4 <floor+0x104>)
 800b410:	4137      	asrs	r7, r6
 800b412:	ea01 0307 	and.w	r3, r1, r7
 800b416:	4303      	orrs	r3, r0
 800b418:	d01f      	beq.n	800b45a <floor+0x9a>
 800b41a:	a327      	add	r3, pc, #156	; (adr r3, 800b4b8 <floor+0xf8>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f4 feec 	bl	80001fc <__adddf3>
 800b424:	2200      	movs	r2, #0
 800b426:	2300      	movs	r3, #0
 800b428:	f7f5 fb2e 	bl	8000a88 <__aeabi_dcmpgt>
 800b42c:	2800      	cmp	r0, #0
 800b42e:	d0eb      	beq.n	800b408 <floor+0x48>
 800b430:	2c00      	cmp	r4, #0
 800b432:	bfbe      	ittt	lt
 800b434:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b438:	fa43 f606 	asrlt.w	r6, r3, r6
 800b43c:	19a4      	addlt	r4, r4, r6
 800b43e:	ea24 0407 	bic.w	r4, r4, r7
 800b442:	2500      	movs	r5, #0
 800b444:	e7e0      	b.n	800b408 <floor+0x48>
 800b446:	2e33      	cmp	r6, #51	; 0x33
 800b448:	dd0b      	ble.n	800b462 <floor+0xa2>
 800b44a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b44e:	d104      	bne.n	800b45a <floor+0x9a>
 800b450:	ee10 2a10 	vmov	r2, s0
 800b454:	460b      	mov	r3, r1
 800b456:	f7f4 fed1 	bl	80001fc <__adddf3>
 800b45a:	ec41 0b10 	vmov	d0, r0, r1
 800b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b462:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b466:	f04f 33ff 	mov.w	r3, #4294967295
 800b46a:	fa23 f707 	lsr.w	r7, r3, r7
 800b46e:	4207      	tst	r7, r0
 800b470:	d0f3      	beq.n	800b45a <floor+0x9a>
 800b472:	a311      	add	r3, pc, #68	; (adr r3, 800b4b8 <floor+0xf8>)
 800b474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b478:	f7f4 fec0 	bl	80001fc <__adddf3>
 800b47c:	2200      	movs	r2, #0
 800b47e:	2300      	movs	r3, #0
 800b480:	f7f5 fb02 	bl	8000a88 <__aeabi_dcmpgt>
 800b484:	2800      	cmp	r0, #0
 800b486:	d0bf      	beq.n	800b408 <floor+0x48>
 800b488:	2c00      	cmp	r4, #0
 800b48a:	da02      	bge.n	800b492 <floor+0xd2>
 800b48c:	2e14      	cmp	r6, #20
 800b48e:	d103      	bne.n	800b498 <floor+0xd8>
 800b490:	3401      	adds	r4, #1
 800b492:	ea25 0507 	bic.w	r5, r5, r7
 800b496:	e7b7      	b.n	800b408 <floor+0x48>
 800b498:	2301      	movs	r3, #1
 800b49a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b49e:	fa03 f606 	lsl.w	r6, r3, r6
 800b4a2:	4435      	add	r5, r6
 800b4a4:	4545      	cmp	r5, r8
 800b4a6:	bf38      	it	cc
 800b4a8:	18e4      	addcc	r4, r4, r3
 800b4aa:	e7f2      	b.n	800b492 <floor+0xd2>
 800b4ac:	2500      	movs	r5, #0
 800b4ae:	462c      	mov	r4, r5
 800b4b0:	e7aa      	b.n	800b408 <floor+0x48>
 800b4b2:	bf00      	nop
 800b4b4:	f3af 8000 	nop.w
 800b4b8:	8800759c 	.word	0x8800759c
 800b4bc:	7e37e43c 	.word	0x7e37e43c
 800b4c0:	bff00000 	.word	0xbff00000
 800b4c4:	000fffff 	.word	0x000fffff

0800b4c8 <scalbn>:
 800b4c8:	b570      	push	{r4, r5, r6, lr}
 800b4ca:	ec55 4b10 	vmov	r4, r5, d0
 800b4ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b4d2:	4606      	mov	r6, r0
 800b4d4:	462b      	mov	r3, r5
 800b4d6:	b9aa      	cbnz	r2, 800b504 <scalbn+0x3c>
 800b4d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b4dc:	4323      	orrs	r3, r4
 800b4de:	d03b      	beq.n	800b558 <scalbn+0x90>
 800b4e0:	4b31      	ldr	r3, [pc, #196]	; (800b5a8 <scalbn+0xe0>)
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	2200      	movs	r2, #0
 800b4e6:	ee10 0a10 	vmov	r0, s0
 800b4ea:	f7f5 f83d 	bl	8000568 <__aeabi_dmul>
 800b4ee:	4b2f      	ldr	r3, [pc, #188]	; (800b5ac <scalbn+0xe4>)
 800b4f0:	429e      	cmp	r6, r3
 800b4f2:	4604      	mov	r4, r0
 800b4f4:	460d      	mov	r5, r1
 800b4f6:	da12      	bge.n	800b51e <scalbn+0x56>
 800b4f8:	a327      	add	r3, pc, #156	; (adr r3, 800b598 <scalbn+0xd0>)
 800b4fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fe:	f7f5 f833 	bl	8000568 <__aeabi_dmul>
 800b502:	e009      	b.n	800b518 <scalbn+0x50>
 800b504:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b508:	428a      	cmp	r2, r1
 800b50a:	d10c      	bne.n	800b526 <scalbn+0x5e>
 800b50c:	ee10 2a10 	vmov	r2, s0
 800b510:	4620      	mov	r0, r4
 800b512:	4629      	mov	r1, r5
 800b514:	f7f4 fe72 	bl	80001fc <__adddf3>
 800b518:	4604      	mov	r4, r0
 800b51a:	460d      	mov	r5, r1
 800b51c:	e01c      	b.n	800b558 <scalbn+0x90>
 800b51e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b522:	460b      	mov	r3, r1
 800b524:	3a36      	subs	r2, #54	; 0x36
 800b526:	4432      	add	r2, r6
 800b528:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b52c:	428a      	cmp	r2, r1
 800b52e:	dd0b      	ble.n	800b548 <scalbn+0x80>
 800b530:	ec45 4b11 	vmov	d1, r4, r5
 800b534:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b5a0 <scalbn+0xd8>
 800b538:	f000 f83c 	bl	800b5b4 <copysign>
 800b53c:	a318      	add	r3, pc, #96	; (adr r3, 800b5a0 <scalbn+0xd8>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	ec51 0b10 	vmov	r0, r1, d0
 800b546:	e7da      	b.n	800b4fe <scalbn+0x36>
 800b548:	2a00      	cmp	r2, #0
 800b54a:	dd08      	ble.n	800b55e <scalbn+0x96>
 800b54c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b550:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b554:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b558:	ec45 4b10 	vmov	d0, r4, r5
 800b55c:	bd70      	pop	{r4, r5, r6, pc}
 800b55e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b562:	da0d      	bge.n	800b580 <scalbn+0xb8>
 800b564:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b568:	429e      	cmp	r6, r3
 800b56a:	ec45 4b11 	vmov	d1, r4, r5
 800b56e:	dce1      	bgt.n	800b534 <scalbn+0x6c>
 800b570:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b598 <scalbn+0xd0>
 800b574:	f000 f81e 	bl	800b5b4 <copysign>
 800b578:	a307      	add	r3, pc, #28	; (adr r3, 800b598 <scalbn+0xd0>)
 800b57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57e:	e7e0      	b.n	800b542 <scalbn+0x7a>
 800b580:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b584:	3236      	adds	r2, #54	; 0x36
 800b586:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b58a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b58e:	4620      	mov	r0, r4
 800b590:	4629      	mov	r1, r5
 800b592:	2200      	movs	r2, #0
 800b594:	4b06      	ldr	r3, [pc, #24]	; (800b5b0 <scalbn+0xe8>)
 800b596:	e7b2      	b.n	800b4fe <scalbn+0x36>
 800b598:	c2f8f359 	.word	0xc2f8f359
 800b59c:	01a56e1f 	.word	0x01a56e1f
 800b5a0:	8800759c 	.word	0x8800759c
 800b5a4:	7e37e43c 	.word	0x7e37e43c
 800b5a8:	43500000 	.word	0x43500000
 800b5ac:	ffff3cb0 	.word	0xffff3cb0
 800b5b0:	3c900000 	.word	0x3c900000

0800b5b4 <copysign>:
 800b5b4:	ec51 0b10 	vmov	r0, r1, d0
 800b5b8:	ee11 0a90 	vmov	r0, s3
 800b5bc:	ee10 2a10 	vmov	r2, s0
 800b5c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b5c4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b5c8:	ea41 0300 	orr.w	r3, r1, r0
 800b5cc:	ec43 2b10 	vmov	d0, r2, r3
 800b5d0:	4770      	bx	lr
	...

0800b5d4 <_init>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	bf00      	nop
 800b5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5da:	bc08      	pop	{r3}
 800b5dc:	469e      	mov	lr, r3
 800b5de:	4770      	bx	lr

0800b5e0 <_fini>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr
