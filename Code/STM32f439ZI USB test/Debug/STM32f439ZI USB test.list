
STM32f439ZI USB test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a6c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006c1c  08006c1c  00016c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cb0  08006cb0  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08006cb0  08006cb0  00016cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cb8  08006cb8  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cb8  08006cb8  00016cb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cbc  08006cbc  00016cbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08006cc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c40  200001e8  08006ea8  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001e28  08006ea8  00021e28  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012560  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bec  00000000  00000000  00032778  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b40  00000000  00000000  00035368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009e8  00000000  00000000  00035ea8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f28  00000000  00000000  00036890  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c9d7  00000000  00000000  0005c7b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d565d  00000000  00000000  0006918f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013e7ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f44  00000000  00000000  0013e868  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006c04 	.word	0x08006c04

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001ec 	.word	0x200001ec
 80001ec:	08006c04 	.word	0x08006c04

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b972 	b.w	800059c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9e08      	ldr	r6, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	4688      	mov	r8, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14b      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4615      	mov	r5, r2
 80002e2:	d967      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0720 	rsb	r7, r2, #32
 80002ee:	fa01 f302 	lsl.w	r3, r1, r2
 80002f2:	fa20 f707 	lsr.w	r7, r0, r7
 80002f6:	4095      	lsls	r5, r2
 80002f8:	ea47 0803 	orr.w	r8, r7, r3
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbb8 f7fe 	udiv	r7, r8, lr
 8000308:	fa1f fc85 	uxth.w	ip, r5
 800030c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000310:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000314:	fb07 f10c 	mul.w	r1, r7, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000322:	f080 811b 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8118 	bls.w	800055c <__udivmoddi4+0x28c>
 800032c:	3f02      	subs	r7, #2
 800032e:	442b      	add	r3, r5
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0fe 	udiv	r0, r3, lr
 8000338:	fb0e 3310 	mls	r3, lr, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fc0c 	mul.w	ip, r0, ip
 8000344:	45a4      	cmp	ip, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	192c      	adds	r4, r5, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8107 	bcs.w	8000560 <__udivmoddi4+0x290>
 8000352:	45a4      	cmp	ip, r4
 8000354:	f240 8104 	bls.w	8000560 <__udivmoddi4+0x290>
 8000358:	3802      	subs	r0, #2
 800035a:	442c      	add	r4, r5
 800035c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000360:	eba4 040c 	sub.w	r4, r4, ip
 8000364:	2700      	movs	r7, #0
 8000366:	b11e      	cbz	r6, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c6 4300 	strd	r4, r3, [r6]
 8000370:	4639      	mov	r1, r7
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0xbe>
 800037a:	2e00      	cmp	r6, #0
 800037c:	f000 80eb 	beq.w	8000556 <__udivmoddi4+0x286>
 8000380:	2700      	movs	r7, #0
 8000382:	e9c6 0100 	strd	r0, r1, [r6]
 8000386:	4638      	mov	r0, r7
 8000388:	4639      	mov	r1, r7
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	fab3 f783 	clz	r7, r3
 8000392:	2f00      	cmp	r7, #0
 8000394:	d147      	bne.n	8000426 <__udivmoddi4+0x156>
 8000396:	428b      	cmp	r3, r1
 8000398:	d302      	bcc.n	80003a0 <__udivmoddi4+0xd0>
 800039a:	4282      	cmp	r2, r0
 800039c:	f200 80fa 	bhi.w	8000594 <__udivmoddi4+0x2c4>
 80003a0:	1a84      	subs	r4, r0, r2
 80003a2:	eb61 0303 	sbc.w	r3, r1, r3
 80003a6:	2001      	movs	r0, #1
 80003a8:	4698      	mov	r8, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d0e0      	beq.n	8000370 <__udivmoddi4+0xa0>
 80003ae:	e9c6 4800 	strd	r4, r8, [r6]
 80003b2:	e7dd      	b.n	8000370 <__udivmoddi4+0xa0>
 80003b4:	b902      	cbnz	r2, 80003b8 <__udivmoddi4+0xe8>
 80003b6:	deff      	udf	#255	; 0xff
 80003b8:	fab2 f282 	clz	r2, r2
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f040 808f 	bne.w	80004e0 <__udivmoddi4+0x210>
 80003c2:	1b49      	subs	r1, r1, r5
 80003c4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003c8:	fa1f f885 	uxth.w	r8, r5
 80003cc:	2701      	movs	r7, #1
 80003ce:	fbb1 fcfe 	udiv	ip, r1, lr
 80003d2:	0c23      	lsrs	r3, r4, #16
 80003d4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003dc:	fb08 f10c 	mul.w	r1, r8, ip
 80003e0:	4299      	cmp	r1, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x124>
 80003e4:	18eb      	adds	r3, r5, r3
 80003e6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x122>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	f200 80cd 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003f2:	4684      	mov	ip, r0
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	b2a3      	uxth	r3, r4
 80003f8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003fc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000400:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000404:	fb08 f800 	mul.w	r8, r8, r0
 8000408:	45a0      	cmp	r8, r4
 800040a:	d907      	bls.n	800041c <__udivmoddi4+0x14c>
 800040c:	192c      	adds	r4, r5, r4
 800040e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x14a>
 8000414:	45a0      	cmp	r8, r4
 8000416:	f200 80b6 	bhi.w	8000586 <__udivmoddi4+0x2b6>
 800041a:	4618      	mov	r0, r3
 800041c:	eba4 0408 	sub.w	r4, r4, r8
 8000420:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000424:	e79f      	b.n	8000366 <__udivmoddi4+0x96>
 8000426:	f1c7 0c20 	rsb	ip, r7, #32
 800042a:	40bb      	lsls	r3, r7
 800042c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000430:	ea4e 0e03 	orr.w	lr, lr, r3
 8000434:	fa01 f407 	lsl.w	r4, r1, r7
 8000438:	fa20 f50c 	lsr.w	r5, r0, ip
 800043c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000440:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000444:	4325      	orrs	r5, r4
 8000446:	fbb3 f9f8 	udiv	r9, r3, r8
 800044a:	0c2c      	lsrs	r4, r5, #16
 800044c:	fb08 3319 	mls	r3, r8, r9, r3
 8000450:	fa1f fa8e 	uxth.w	sl, lr
 8000454:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000458:	fb09 f40a 	mul.w	r4, r9, sl
 800045c:	429c      	cmp	r4, r3
 800045e:	fa02 f207 	lsl.w	r2, r2, r7
 8000462:	fa00 f107 	lsl.w	r1, r0, r7
 8000466:	d90b      	bls.n	8000480 <__udivmoddi4+0x1b0>
 8000468:	eb1e 0303 	adds.w	r3, lr, r3
 800046c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000470:	f080 8087 	bcs.w	8000582 <__udivmoddi4+0x2b2>
 8000474:	429c      	cmp	r4, r3
 8000476:	f240 8084 	bls.w	8000582 <__udivmoddi4+0x2b2>
 800047a:	f1a9 0902 	sub.w	r9, r9, #2
 800047e:	4473      	add	r3, lr
 8000480:	1b1b      	subs	r3, r3, r4
 8000482:	b2ad      	uxth	r5, r5
 8000484:	fbb3 f0f8 	udiv	r0, r3, r8
 8000488:	fb08 3310 	mls	r3, r8, r0, r3
 800048c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000490:	fb00 fa0a 	mul.w	sl, r0, sl
 8000494:	45a2      	cmp	sl, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x1da>
 8000498:	eb1e 0404 	adds.w	r4, lr, r4
 800049c:	f100 33ff 	add.w	r3, r0, #4294967295
 80004a0:	d26b      	bcs.n	800057a <__udivmoddi4+0x2aa>
 80004a2:	45a2      	cmp	sl, r4
 80004a4:	d969      	bls.n	800057a <__udivmoddi4+0x2aa>
 80004a6:	3802      	subs	r0, #2
 80004a8:	4474      	add	r4, lr
 80004aa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ae:	fba0 8902 	umull	r8, r9, r0, r2
 80004b2:	eba4 040a 	sub.w	r4, r4, sl
 80004b6:	454c      	cmp	r4, r9
 80004b8:	46c2      	mov	sl, r8
 80004ba:	464b      	mov	r3, r9
 80004bc:	d354      	bcc.n	8000568 <__udivmoddi4+0x298>
 80004be:	d051      	beq.n	8000564 <__udivmoddi4+0x294>
 80004c0:	2e00      	cmp	r6, #0
 80004c2:	d069      	beq.n	8000598 <__udivmoddi4+0x2c8>
 80004c4:	ebb1 050a 	subs.w	r5, r1, sl
 80004c8:	eb64 0403 	sbc.w	r4, r4, r3
 80004cc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004d0:	40fd      	lsrs	r5, r7
 80004d2:	40fc      	lsrs	r4, r7
 80004d4:	ea4c 0505 	orr.w	r5, ip, r5
 80004d8:	e9c6 5400 	strd	r5, r4, [r6]
 80004dc:	2700      	movs	r7, #0
 80004de:	e747      	b.n	8000370 <__udivmoddi4+0xa0>
 80004e0:	f1c2 0320 	rsb	r3, r2, #32
 80004e4:	fa20 f703 	lsr.w	r7, r0, r3
 80004e8:	4095      	lsls	r5, r2
 80004ea:	fa01 f002 	lsl.w	r0, r1, r2
 80004ee:	fa21 f303 	lsr.w	r3, r1, r3
 80004f2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004f6:	4338      	orrs	r0, r7
 80004f8:	0c01      	lsrs	r1, r0, #16
 80004fa:	fbb3 f7fe 	udiv	r7, r3, lr
 80004fe:	fa1f f885 	uxth.w	r8, r5
 8000502:	fb0e 3317 	mls	r3, lr, r7, r3
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb07 f308 	mul.w	r3, r7, r8
 800050e:	428b      	cmp	r3, r1
 8000510:	fa04 f402 	lsl.w	r4, r4, r2
 8000514:	d907      	bls.n	8000526 <__udivmoddi4+0x256>
 8000516:	1869      	adds	r1, r5, r1
 8000518:	f107 3cff 	add.w	ip, r7, #4294967295
 800051c:	d22f      	bcs.n	800057e <__udivmoddi4+0x2ae>
 800051e:	428b      	cmp	r3, r1
 8000520:	d92d      	bls.n	800057e <__udivmoddi4+0x2ae>
 8000522:	3f02      	subs	r7, #2
 8000524:	4429      	add	r1, r5
 8000526:	1acb      	subs	r3, r1, r3
 8000528:	b281      	uxth	r1, r0
 800052a:	fbb3 f0fe 	udiv	r0, r3, lr
 800052e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000532:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000536:	fb00 f308 	mul.w	r3, r0, r8
 800053a:	428b      	cmp	r3, r1
 800053c:	d907      	bls.n	800054e <__udivmoddi4+0x27e>
 800053e:	1869      	adds	r1, r5, r1
 8000540:	f100 3cff 	add.w	ip, r0, #4294967295
 8000544:	d217      	bcs.n	8000576 <__udivmoddi4+0x2a6>
 8000546:	428b      	cmp	r3, r1
 8000548:	d915      	bls.n	8000576 <__udivmoddi4+0x2a6>
 800054a:	3802      	subs	r0, #2
 800054c:	4429      	add	r1, r5
 800054e:	1ac9      	subs	r1, r1, r3
 8000550:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000554:	e73b      	b.n	80003ce <__udivmoddi4+0xfe>
 8000556:	4637      	mov	r7, r6
 8000558:	4630      	mov	r0, r6
 800055a:	e709      	b.n	8000370 <__udivmoddi4+0xa0>
 800055c:	4607      	mov	r7, r0
 800055e:	e6e7      	b.n	8000330 <__udivmoddi4+0x60>
 8000560:	4618      	mov	r0, r3
 8000562:	e6fb      	b.n	800035c <__udivmoddi4+0x8c>
 8000564:	4541      	cmp	r1, r8
 8000566:	d2ab      	bcs.n	80004c0 <__udivmoddi4+0x1f0>
 8000568:	ebb8 0a02 	subs.w	sl, r8, r2
 800056c:	eb69 020e 	sbc.w	r2, r9, lr
 8000570:	3801      	subs	r0, #1
 8000572:	4613      	mov	r3, r2
 8000574:	e7a4      	b.n	80004c0 <__udivmoddi4+0x1f0>
 8000576:	4660      	mov	r0, ip
 8000578:	e7e9      	b.n	800054e <__udivmoddi4+0x27e>
 800057a:	4618      	mov	r0, r3
 800057c:	e795      	b.n	80004aa <__udivmoddi4+0x1da>
 800057e:	4667      	mov	r7, ip
 8000580:	e7d1      	b.n	8000526 <__udivmoddi4+0x256>
 8000582:	4681      	mov	r9, r0
 8000584:	e77c      	b.n	8000480 <__udivmoddi4+0x1b0>
 8000586:	3802      	subs	r0, #2
 8000588:	442c      	add	r4, r5
 800058a:	e747      	b.n	800041c <__udivmoddi4+0x14c>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	442b      	add	r3, r5
 8000592:	e72f      	b.n	80003f4 <__udivmoddi4+0x124>
 8000594:	4638      	mov	r0, r7
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xda>
 8000598:	4637      	mov	r7, r6
 800059a:	e6e9      	b.n	8000370 <__udivmoddi4+0xa0>

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b085      	sub	sp, #20
 80005a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	4b17      	ldr	r3, [pc, #92]	; (8000608 <MX_GPIO_Init+0x68>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a16      	ldr	r2, [pc, #88]	; (8000608 <MX_GPIO_Init+0x68>)
 80005b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b14      	ldr	r3, [pc, #80]	; (8000608 <MX_GPIO_Init+0x68>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005be:	60fb      	str	r3, [r7, #12]
 80005c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	60bb      	str	r3, [r7, #8]
 80005c6:	4b10      	ldr	r3, [pc, #64]	; (8000608 <MX_GPIO_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a0f      	ldr	r2, [pc, #60]	; (8000608 <MX_GPIO_Init+0x68>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b0d      	ldr	r3, [pc, #52]	; (8000608 <MX_GPIO_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0301 	and.w	r3, r3, #1
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	607b      	str	r3, [r7, #4]
 80005e2:	4b09      	ldr	r3, [pc, #36]	; (8000608 <MX_GPIO_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a08      	ldr	r2, [pc, #32]	; (8000608 <MX_GPIO_Init+0x68>)
 80005e8:	f043 0302 	orr.w	r3, r3, #2
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <MX_GPIO_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0302 	and.w	r3, r3, #2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]

}
 80005fa:	bf00      	nop
 80005fc:	3714      	adds	r7, #20
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000610:	f000 f970 	bl	80008f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000614:	f000 f828 	bl	8000668 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000618:	f7ff ffc2 	bl	80005a0 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 800061c:	f005 f9aa 	bl	8005974 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	sprintf(txBuf, "%u\r\n", count);
 8000620:	4b0e      	ldr	r3, [pc, #56]	; (800065c <main+0x50>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	490e      	ldr	r1, [pc, #56]	; (8000660 <main+0x54>)
 8000628:	480e      	ldr	r0, [pc, #56]	; (8000664 <main+0x58>)
 800062a:	f005 ff9d 	bl	8006568 <siprintf>
	count++;
 800062e:	4b0b      	ldr	r3, [pc, #44]	; (800065c <main+0x50>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3301      	adds	r3, #1
 8000634:	b2da      	uxtb	r2, r3
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <main+0x50>)
 8000638:	701a      	strb	r2, [r3, #0]

	if (count>100){
 800063a:	4b08      	ldr	r3, [pc, #32]	; (800065c <main+0x50>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b64      	cmp	r3, #100	; 0x64
 8000640:	d902      	bls.n	8000648 <main+0x3c>
		count = 1;
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <main+0x50>)
 8000644:	2201      	movs	r2, #1
 8000646:	701a      	strb	r2, [r3, #0]
	}

	CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <main+0x58>)
 800064a:	f7ff fdd1 	bl	80001f0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	b29b      	uxth	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	4803      	ldr	r0, [pc, #12]	; (8000664 <main+0x58>)
 8000656:	f005 fa4b 	bl	8005af0 <CDC_Transmit_FS>
	sprintf(txBuf, "%u\r\n", count);
 800065a:	e7e1      	b.n	8000620 <main+0x14>
 800065c:	20000000 	.word	0x20000000
 8000660:	08006c1c 	.word	0x08006c1c
 8000664:	20000540 	.word	0x20000540

08000668 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b094      	sub	sp, #80	; 0x50
 800066c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800066e:	f107 0320 	add.w	r3, r7, #32
 8000672:	2230      	movs	r2, #48	; 0x30
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f005 feb6 	bl	80063e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800067c:	f107 030c 	add.w	r3, r7, #12
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
 8000684:	605a      	str	r2, [r3, #4]
 8000686:	609a      	str	r2, [r3, #8]
 8000688:	60da      	str	r2, [r3, #12]
 800068a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800068c:	2300      	movs	r3, #0
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	4b29      	ldr	r3, [pc, #164]	; (8000738 <SystemClock_Config+0xd0>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	4a28      	ldr	r2, [pc, #160]	; (8000738 <SystemClock_Config+0xd0>)
 8000696:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800069a:	6413      	str	r3, [r2, #64]	; 0x40
 800069c:	4b26      	ldr	r3, [pc, #152]	; (8000738 <SystemClock_Config+0xd0>)
 800069e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006a4:	60bb      	str	r3, [r7, #8]
 80006a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <SystemClock_Config+0xd4>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006b4:	4a21      	ldr	r2, [pc, #132]	; (800073c <SystemClock_Config+0xd4>)
 80006b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ba:	6013      	str	r3, [r2, #0]
 80006bc:	4b1f      	ldr	r3, [pc, #124]	; (800073c <SystemClock_Config+0xd4>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006c8:	2301      	movs	r3, #1
 80006ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006d2:	2302      	movs	r3, #2
 80006d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80006e0:	2348      	movs	r3, #72	; 0x48
 80006e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006e4:	2302      	movs	r3, #2
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80006e8:	2303      	movs	r3, #3
 80006ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ec:	f107 0320 	add.w	r3, r7, #32
 80006f0:	4618      	mov	r0, r3
 80006f2:	f001 fdd3 	bl	800229c <HAL_RCC_OscConfig>
 80006f6:	4603      	mov	r3, r0
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d001      	beq.n	8000700 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006fc:	f000 f820 	bl	8000740 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000700:	230f      	movs	r3, #15
 8000702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000704:	2302      	movs	r3, #2
 8000706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800070c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000718:	f107 030c 	add.w	r3, r7, #12
 800071c:	2102      	movs	r1, #2
 800071e:	4618      	mov	r0, r3
 8000720:	f002 f82c 	bl	800277c <HAL_RCC_ClockConfig>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800072a:	f000 f809 	bl	8000740 <Error_Handler>
  }
}
 800072e:	bf00      	nop
 8000730:	3750      	adds	r7, #80	; 0x50
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
 8000736:	bf00      	nop
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074c:	4770      	bx	lr
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <HAL_MspInit+0x4c>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a0f      	ldr	r2, [pc, #60]	; (800079c <HAL_MspInit+0x4c>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <HAL_MspInit+0x4c>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b09      	ldr	r3, [pc, #36]	; (800079c <HAL_MspInit+0x4c>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a08      	ldr	r2, [pc, #32]	; (800079c <HAL_MspInit+0x4c>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_MspInit+0x4c>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078e:	bf00      	nop
 8000790:	370c      	adds	r7, #12
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800

080007a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a0:	b480      	push	{r7}
 80007a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007a4:	e7fe      	b.n	80007a4 <NMI_Handler+0x4>

080007a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007a6:	b480      	push	{r7}
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007aa:	e7fe      	b.n	80007aa <HardFault_Handler+0x4>

080007ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b0:	e7fe      	b.n	80007b0 <MemManage_Handler+0x4>

080007b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <BusFault_Handler+0x4>

080007b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007bc:	e7fe      	b.n	80007bc <UsageFault_Handler+0x4>

080007be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007be:	b480      	push	{r7}
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007c2:	bf00      	nop
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007da:	b480      	push	{r7}
 80007dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr

080007e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ec:	f000 f8d4 	bl	8000998 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007f8:	4802      	ldr	r0, [pc, #8]	; (8000804 <OTG_FS_IRQHandler+0x10>)
 80007fa:	f000 fd1b 	bl	8001234 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	20001a1c 	.word	0x20001a1c

08000808 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000810:	4a14      	ldr	r2, [pc, #80]	; (8000864 <_sbrk+0x5c>)
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <_sbrk+0x60>)
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800081c:	4b13      	ldr	r3, [pc, #76]	; (800086c <_sbrk+0x64>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d102      	bne.n	800082a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <_sbrk+0x64>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <_sbrk+0x68>)
 8000828:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <_sbrk+0x64>)
 800082c:	681a      	ldr	r2, [r3, #0]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4413      	add	r3, r2
 8000832:	693a      	ldr	r2, [r7, #16]
 8000834:	429a      	cmp	r2, r3
 8000836:	d207      	bcs.n	8000848 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000838:	f005 fd9c 	bl	8006374 <__errno>
 800083c:	4602      	mov	r2, r0
 800083e:	230c      	movs	r3, #12
 8000840:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000842:	f04f 33ff 	mov.w	r3, #4294967295
 8000846:	e009      	b.n	800085c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000848:	4b08      	ldr	r3, [pc, #32]	; (800086c <_sbrk+0x64>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800084e:	4b07      	ldr	r3, [pc, #28]	; (800086c <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	4a05      	ldr	r2, [pc, #20]	; (800086c <_sbrk+0x64>)
 8000858:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800085a:	68fb      	ldr	r3, [r7, #12]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3718      	adds	r7, #24
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20030000 	.word	0x20030000
 8000868:	00000400 	.word	0x00000400
 800086c:	20000204 	.word	0x20000204
 8000870:	20001e28 	.word	0x20001e28

08000874 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <SystemInit+0x28>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a07      	ldr	r2, [pc, #28]	; (800089c <SystemInit+0x28>)
 8000880:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000888:	4b04      	ldr	r3, [pc, #16]	; (800089c <SystemInit+0x28>)
 800088a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800088e:	609a      	str	r2, [r3, #8]
#endif
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80008a4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80008a6:	e003      	b.n	80008b0 <LoopCopyDataInit>

080008a8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80008a8:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80008aa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80008ac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80008ae:	3104      	adds	r1, #4

080008b0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80008b0:	480b      	ldr	r0, [pc, #44]	; (80008e0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80008b4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80008b6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80008b8:	d3f6      	bcc.n	80008a8 <CopyDataInit>
  ldr  r2, =_sbss
 80008ba:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80008bc:	e002      	b.n	80008c4 <LoopFillZerobss>

080008be <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80008be:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80008c0:	f842 3b04 	str.w	r3, [r2], #4

080008c4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80008c6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80008c8:	d3f9      	bcc.n	80008be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008ca:	f7ff ffd3 	bl	8000874 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ce:	f005 fd57 	bl	8006380 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008d2:	f7ff fe9b 	bl	800060c <main>
  bx  lr    
 80008d6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008d8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80008dc:	08006cc0 	.word	0x08006cc0
  ldr  r0, =_sdata
 80008e0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80008e4:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80008e8:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80008ec:	20001e28 	.word	0x20001e28

080008f0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC_IRQHandler>
	...

080008f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008f8:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	; (8000934 <HAL_Init+0x40>)
 80008fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000902:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <HAL_Init+0x40>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a0a      	ldr	r2, [pc, #40]	; (8000934 <HAL_Init+0x40>)
 800090a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <HAL_Init+0x40>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a07      	ldr	r2, [pc, #28]	; (8000934 <HAL_Init+0x40>)
 8000916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800091a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 f94d 	bl	8000bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000922:	2000      	movs	r0, #0
 8000924:	f000 f808 	bl	8000938 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000928:	f7ff ff12 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023c00 	.word	0x40023c00

08000938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000940:	4b12      	ldr	r3, [pc, #72]	; (800098c <HAL_InitTick+0x54>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_InitTick+0x58>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4619      	mov	r1, r3
 800094a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800094e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000952:	fbb2 f3f3 	udiv	r3, r2, r3
 8000956:	4618      	mov	r0, r3
 8000958:	f000 f965 	bl	8000c26 <HAL_SYSTICK_Config>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000962:	2301      	movs	r3, #1
 8000964:	e00e      	b.n	8000984 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	2b0f      	cmp	r3, #15
 800096a:	d80a      	bhi.n	8000982 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800096c:	2200      	movs	r2, #0
 800096e:	6879      	ldr	r1, [r7, #4]
 8000970:	f04f 30ff 	mov.w	r0, #4294967295
 8000974:	f000 f92d 	bl	8000bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000978:	4a06      	ldr	r2, [pc, #24]	; (8000994 <HAL_InitTick+0x5c>)
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800097e:	2300      	movs	r3, #0
 8000980:	e000      	b.n	8000984 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	3708      	adds	r7, #8
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	20000004 	.word	0x20000004
 8000990:	2000000c 	.word	0x2000000c
 8000994:	20000008 	.word	0x20000008

08000998 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <HAL_IncTick+0x20>)
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	461a      	mov	r2, r3
 80009a2:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x24>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4413      	add	r3, r2
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <HAL_IncTick+0x24>)
 80009aa:	6013      	str	r3, [r2, #0]
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	2000000c 	.word	0x2000000c
 80009bc:	20000548 	.word	0x20000548

080009c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <HAL_GetTick+0x14>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	20000548 	.word	0x20000548

080009d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e0:	f7ff ffee 	bl	80009c0 <HAL_GetTick>
 80009e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f0:	d005      	beq.n	80009fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_Delay+0x40>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	4413      	add	r3, r2
 80009fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009fe:	bf00      	nop
 8000a00:	f7ff ffde 	bl	80009c0 <HAL_GetTick>
 8000a04:	4602      	mov	r2, r0
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d8f7      	bhi.n	8000a00 <HAL_Delay+0x28>
  {
  }
}
 8000a10:	bf00      	nop
 8000a12:	3710      	adds	r7, #16
 8000a14:	46bd      	mov	sp, r7
 8000a16:	bd80      	pop	{r7, pc}
 8000a18:	2000000c 	.word	0x2000000c

08000a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b085      	sub	sp, #20
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	f003 0307 	and.w	r3, r3, #7
 8000a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a2c:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a2e:	68db      	ldr	r3, [r3, #12]
 8000a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a32:	68ba      	ldr	r2, [r7, #8]
 8000a34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a4e:	4a04      	ldr	r2, [pc, #16]	; (8000a60 <__NVIC_SetPriorityGrouping+0x44>)
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	60d3      	str	r3, [r2, #12]
}
 8000a54:	bf00      	nop
 8000a56:	3714      	adds	r7, #20
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <__NVIC_GetPriorityGrouping+0x18>)
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	0a1b      	lsrs	r3, r3, #8
 8000a6e:	f003 0307 	and.w	r3, r3, #7
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	db0b      	blt.n	8000aaa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f003 021f 	and.w	r2, r3, #31
 8000a98:	4907      	ldr	r1, [pc, #28]	; (8000ab8 <__NVIC_EnableIRQ+0x38>)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	095b      	lsrs	r3, r3, #5
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8000aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000e100 	.word	0xe000e100

08000abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	6039      	str	r1, [r7, #0]
 8000ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	db0a      	blt.n	8000ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	b2da      	uxtb	r2, r3
 8000ad4:	490c      	ldr	r1, [pc, #48]	; (8000b08 <__NVIC_SetPriority+0x4c>)
 8000ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ada:	0112      	lsls	r2, r2, #4
 8000adc:	b2d2      	uxtb	r2, r2
 8000ade:	440b      	add	r3, r1
 8000ae0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae4:	e00a      	b.n	8000afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	b2da      	uxtb	r2, r3
 8000aea:	4908      	ldr	r1, [pc, #32]	; (8000b0c <__NVIC_SetPriority+0x50>)
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	f003 030f 	and.w	r3, r3, #15
 8000af2:	3b04      	subs	r3, #4
 8000af4:	0112      	lsls	r2, r2, #4
 8000af6:	b2d2      	uxtb	r2, r2
 8000af8:	440b      	add	r3, r1
 8000afa:	761a      	strb	r2, [r3, #24]
}
 8000afc:	bf00      	nop
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr
 8000b08:	e000e100 	.word	0xe000e100
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b089      	sub	sp, #36	; 0x24
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	60f8      	str	r0, [r7, #12]
 8000b18:	60b9      	str	r1, [r7, #8]
 8000b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f003 0307 	and.w	r3, r3, #7
 8000b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b24:	69fb      	ldr	r3, [r7, #28]
 8000b26:	f1c3 0307 	rsb	r3, r3, #7
 8000b2a:	2b04      	cmp	r3, #4
 8000b2c:	bf28      	it	cs
 8000b2e:	2304      	movcs	r3, #4
 8000b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b32:	69fb      	ldr	r3, [r7, #28]
 8000b34:	3304      	adds	r3, #4
 8000b36:	2b06      	cmp	r3, #6
 8000b38:	d902      	bls.n	8000b40 <NVIC_EncodePriority+0x30>
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3b03      	subs	r3, #3
 8000b3e:	e000      	b.n	8000b42 <NVIC_EncodePriority+0x32>
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b44:	f04f 32ff 	mov.w	r2, #4294967295
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	43da      	mvns	r2, r3
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	401a      	ands	r2, r3
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b58:	f04f 31ff 	mov.w	r1, #4294967295
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	43d9      	mvns	r1, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b68:	4313      	orrs	r3, r2
         );
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3724      	adds	r7, #36	; 0x24
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
	...

08000b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	3b01      	subs	r3, #1
 8000b84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b88:	d301      	bcc.n	8000b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00f      	b.n	8000bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b8e:	4a0a      	ldr	r2, [pc, #40]	; (8000bb8 <SysTick_Config+0x40>)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b96:	210f      	movs	r1, #15
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f7ff ff8e 	bl	8000abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ba6:	4b04      	ldr	r3, [pc, #16]	; (8000bb8 <SysTick_Config+0x40>)
 8000ba8:	2207      	movs	r2, #7
 8000baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bac:	2300      	movs	r3, #0
}
 8000bae:	4618      	mov	r0, r3
 8000bb0:	3708      	adds	r7, #8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	e000e010 	.word	0xe000e010

08000bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc4:	6878      	ldr	r0, [r7, #4]
 8000bc6:	f7ff ff29 	bl	8000a1c <__NVIC_SetPriorityGrouping>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}

08000bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd2:	b580      	push	{r7, lr}
 8000bd4:	b086      	sub	sp, #24
 8000bd6:	af00      	add	r7, sp, #0
 8000bd8:	4603      	mov	r3, r0
 8000bda:	60b9      	str	r1, [r7, #8]
 8000bdc:	607a      	str	r2, [r7, #4]
 8000bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be4:	f7ff ff3e 	bl	8000a64 <__NVIC_GetPriorityGrouping>
 8000be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	68b9      	ldr	r1, [r7, #8]
 8000bee:	6978      	ldr	r0, [r7, #20]
 8000bf0:	f7ff ff8e 	bl	8000b10 <NVIC_EncodePriority>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfa:	4611      	mov	r1, r2
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff ff5d 	bl	8000abc <__NVIC_SetPriority>
}
 8000c02:	bf00      	nop
 8000c04:	3718      	adds	r7, #24
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b082      	sub	sp, #8
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff31 	bl	8000a80 <__NVIC_EnableIRQ>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c2e:	6878      	ldr	r0, [r7, #4]
 8000c30:	f7ff ffa2 	bl	8000b78 <SysTick_Config>
 8000c34:	4603      	mov	r3, r0
}
 8000c36:	4618      	mov	r0, r3
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
	...

08000c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
 8000c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	e177      	b.n	8000f4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	697a      	ldr	r2, [r7, #20]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	f040 8166 	bne.w	8000f46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d00b      	beq.n	8000c9a <HAL_GPIO_Init+0x5a>
 8000c82:	683b      	ldr	r3, [r7, #0]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b02      	cmp	r3, #2
 8000c88:	d007      	beq.n	8000c9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c8e:	2b11      	cmp	r3, #17
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	2b12      	cmp	r3, #18
 8000c98:	d130      	bne.n	8000cfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ca0:	69fb      	ldr	r3, [r7, #28]
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8000caa:	43db      	mvns	r3, r3
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	68da      	ldr	r2, [r3, #12]
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	69ba      	ldr	r2, [r7, #24]
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	69ba      	ldr	r2, [r7, #24]
 8000cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	685b      	ldr	r3, [r3, #4]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	43db      	mvns	r3, r3
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4013      	ands	r3, r2
 8000cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	091b      	lsrs	r3, r3, #4
 8000ce6:	f003 0201 	and.w	r2, r3, #1
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	69ba      	ldr	r2, [r7, #24]
 8000cf2:	4313      	orrs	r3, r2
 8000cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	68db      	ldr	r3, [r3, #12]
 8000d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	005b      	lsls	r3, r3, #1
 8000d06:	2203      	movs	r2, #3
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	69ba      	ldr	r2, [r7, #24]
 8000d10:	4013      	ands	r3, r2
 8000d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	005b      	lsls	r3, r3, #1
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	2b02      	cmp	r3, #2
 8000d32:	d003      	beq.n	8000d3c <HAL_GPIO_Init+0xfc>
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	2b12      	cmp	r3, #18
 8000d3a:	d123      	bne.n	8000d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	08da      	lsrs	r2, r3, #3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3208      	adds	r2, #8
 8000d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	f003 0307 	and.w	r3, r3, #7
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	220f      	movs	r2, #15
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	43db      	mvns	r3, r3
 8000d5a:	69ba      	ldr	r2, [r7, #24]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	691a      	ldr	r2, [r3, #16]
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	08da      	lsrs	r2, r3, #3
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	3208      	adds	r2, #8
 8000d7e:	69b9      	ldr	r1, [r7, #24]
 8000d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	2203      	movs	r2, #3
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	f003 0203 	and.w	r2, r3, #3
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	005b      	lsls	r3, r3, #1
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	f000 80c0 	beq.w	8000f46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60fb      	str	r3, [r7, #12]
 8000dca:	4b65      	ldr	r3, [pc, #404]	; (8000f60 <HAL_GPIO_Init+0x320>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a64      	ldr	r2, [pc, #400]	; (8000f60 <HAL_GPIO_Init+0x320>)
 8000dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b62      	ldr	r3, [pc, #392]	; (8000f60 <HAL_GPIO_Init+0x320>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000de2:	4a60      	ldr	r2, [pc, #384]	; (8000f64 <HAL_GPIO_Init+0x324>)
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	089b      	lsrs	r3, r3, #2
 8000de8:	3302      	adds	r3, #2
 8000dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	220f      	movs	r2, #15
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a57      	ldr	r2, [pc, #348]	; (8000f68 <HAL_GPIO_Init+0x328>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d037      	beq.n	8000e7e <HAL_GPIO_Init+0x23e>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a56      	ldr	r2, [pc, #344]	; (8000f6c <HAL_GPIO_Init+0x32c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d031      	beq.n	8000e7a <HAL_GPIO_Init+0x23a>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a55      	ldr	r2, [pc, #340]	; (8000f70 <HAL_GPIO_Init+0x330>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d02b      	beq.n	8000e76 <HAL_GPIO_Init+0x236>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a54      	ldr	r2, [pc, #336]	; (8000f74 <HAL_GPIO_Init+0x334>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d025      	beq.n	8000e72 <HAL_GPIO_Init+0x232>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a53      	ldr	r2, [pc, #332]	; (8000f78 <HAL_GPIO_Init+0x338>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d01f      	beq.n	8000e6e <HAL_GPIO_Init+0x22e>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	4a52      	ldr	r2, [pc, #328]	; (8000f7c <HAL_GPIO_Init+0x33c>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d019      	beq.n	8000e6a <HAL_GPIO_Init+0x22a>
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	4a51      	ldr	r2, [pc, #324]	; (8000f80 <HAL_GPIO_Init+0x340>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d013      	beq.n	8000e66 <HAL_GPIO_Init+0x226>
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a50      	ldr	r2, [pc, #320]	; (8000f84 <HAL_GPIO_Init+0x344>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d00d      	beq.n	8000e62 <HAL_GPIO_Init+0x222>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4f      	ldr	r2, [pc, #316]	; (8000f88 <HAL_GPIO_Init+0x348>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d007      	beq.n	8000e5e <HAL_GPIO_Init+0x21e>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4e      	ldr	r2, [pc, #312]	; (8000f8c <HAL_GPIO_Init+0x34c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d101      	bne.n	8000e5a <HAL_GPIO_Init+0x21a>
 8000e56:	2309      	movs	r3, #9
 8000e58:	e012      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	e010      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e5e:	2308      	movs	r3, #8
 8000e60:	e00e      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e62:	2307      	movs	r3, #7
 8000e64:	e00c      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e66:	2306      	movs	r3, #6
 8000e68:	e00a      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e6a:	2305      	movs	r3, #5
 8000e6c:	e008      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e6e:	2304      	movs	r3, #4
 8000e70:	e006      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e72:	2303      	movs	r3, #3
 8000e74:	e004      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e76:	2302      	movs	r3, #2
 8000e78:	e002      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e000      	b.n	8000e80 <HAL_GPIO_Init+0x240>
 8000e7e:	2300      	movs	r3, #0
 8000e80:	69fa      	ldr	r2, [r7, #28]
 8000e82:	f002 0203 	and.w	r2, r2, #3
 8000e86:	0092      	lsls	r2, r2, #2
 8000e88:	4093      	lsls	r3, r2
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e90:	4934      	ldr	r1, [pc, #208]	; (8000f64 <HAL_GPIO_Init+0x324>)
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	089b      	lsrs	r3, r3, #2
 8000e96:	3302      	adds	r3, #2
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e9e:	4b3c      	ldr	r3, [pc, #240]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	43db      	mvns	r3, r3
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d003      	beq.n	8000ec2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	693b      	ldr	r3, [r7, #16]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ec2:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000ec4:	69bb      	ldr	r3, [r7, #24]
 8000ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d003      	beq.n	8000eec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4313      	orrs	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eec:	4a28      	ldr	r2, [pc, #160]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000eee:	69bb      	ldr	r3, [r7, #24]
 8000ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ef2:	4b27      	ldr	r3, [pc, #156]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef8:	693b      	ldr	r3, [r7, #16]
 8000efa:	43db      	mvns	r3, r3
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	4013      	ands	r3, r2
 8000f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d003      	beq.n	8000f16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f16:	4a1e      	ldr	r2, [pc, #120]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000f18:	69bb      	ldr	r3, [r7, #24]
 8000f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f1c:	4b1c      	ldr	r3, [pc, #112]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	43db      	mvns	r3, r3
 8000f26:	69ba      	ldr	r2, [r7, #24]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000f38:	69ba      	ldr	r2, [r7, #24]
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f40:	4a13      	ldr	r2, [pc, #76]	; (8000f90 <HAL_GPIO_Init+0x350>)
 8000f42:	69bb      	ldr	r3, [r7, #24]
 8000f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	61fb      	str	r3, [r7, #28]
 8000f4c:	69fb      	ldr	r3, [r7, #28]
 8000f4e:	2b0f      	cmp	r3, #15
 8000f50:	f67f ae84 	bls.w	8000c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f54:	bf00      	nop
 8000f56:	3724      	adds	r7, #36	; 0x24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr
 8000f60:	40023800 	.word	0x40023800
 8000f64:	40013800 	.word	0x40013800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40021400 	.word	0x40021400
 8000f80:	40021800 	.word	0x40021800
 8000f84:	40021c00 	.word	0x40021c00
 8000f88:	40022000 	.word	0x40022000
 8000f8c:	40022400 	.word	0x40022400
 8000f90:	40013c00 	.word	0x40013c00

08000f94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000f94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f96:	b08f      	sub	sp, #60	; 0x3c
 8000f98:	af0a      	add	r7, sp, #40	; 0x28
 8000f9a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d101      	bne.n	8000fa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e10f      	b.n	80011c6 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d106      	bne.n	8000fc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f004 fedb 	bl	8005d7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2203      	movs	r2, #3
 8000fca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000fce:	68bb      	ldr	r3, [r7, #8]
 8000fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d102      	bne.n	8000fe0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f001 fea8 	bl	8002d3a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	687e      	ldr	r6, [r7, #4]
 8000ff2:	466d      	mov	r5, sp
 8000ff4:	f106 0410 	add.w	r4, r6, #16
 8000ff8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ffc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ffe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001000:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001004:	e885 0003 	stmia.w	r5, {r0, r1}
 8001008:	1d33      	adds	r3, r6, #4
 800100a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f001 fd7f 	bl	8002b10 <USB_CoreInit>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d005      	beq.n	8001024 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2202      	movs	r2, #2
 800101c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001020:	2301      	movs	r3, #1
 8001022:	e0d0      	b.n	80011c6 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2100      	movs	r1, #0
 800102a:	4618      	mov	r0, r3
 800102c:	f001 fe96 	bl	8002d5c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001030:	2300      	movs	r3, #0
 8001032:	73fb      	strb	r3, [r7, #15]
 8001034:	e04a      	b.n	80010cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	1a9b      	subs	r3, r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	333d      	adds	r3, #61	; 0x3d
 8001046:	2201      	movs	r2, #1
 8001048:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	6879      	ldr	r1, [r7, #4]
 800104e:	4613      	mov	r3, r2
 8001050:	00db      	lsls	r3, r3, #3
 8001052:	1a9b      	subs	r3, r3, r2
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	440b      	add	r3, r1
 8001058:	333c      	adds	r3, #60	; 0x3c
 800105a:	7bfa      	ldrb	r2, [r7, #15]
 800105c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800105e:	7bfa      	ldrb	r2, [r7, #15]
 8001060:	7bfb      	ldrb	r3, [r7, #15]
 8001062:	b298      	uxth	r0, r3
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	1a9b      	subs	r3, r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	3342      	adds	r3, #66	; 0x42
 8001072:	4602      	mov	r2, r0
 8001074:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001076:	7bfa      	ldrb	r2, [r7, #15]
 8001078:	6879      	ldr	r1, [r7, #4]
 800107a:	4613      	mov	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	1a9b      	subs	r3, r3, r2
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	440b      	add	r3, r1
 8001084:	333f      	adds	r3, #63	; 0x3f
 8001086:	2200      	movs	r2, #0
 8001088:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800108a:	7bfa      	ldrb	r2, [r7, #15]
 800108c:	6879      	ldr	r1, [r7, #4]
 800108e:	4613      	mov	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	1a9b      	subs	r3, r3, r2
 8001094:	009b      	lsls	r3, r3, #2
 8001096:	440b      	add	r3, r1
 8001098:	3344      	adds	r3, #68	; 0x44
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800109e:	7bfa      	ldrb	r2, [r7, #15]
 80010a0:	6879      	ldr	r1, [r7, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	440b      	add	r3, r1
 80010ac:	3348      	adds	r3, #72	; 0x48
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80010b2:	7bfa      	ldrb	r2, [r7, #15]
 80010b4:	6879      	ldr	r1, [r7, #4]
 80010b6:	4613      	mov	r3, r2
 80010b8:	00db      	lsls	r3, r3, #3
 80010ba:	1a9b      	subs	r3, r3, r2
 80010bc:	009b      	lsls	r3, r3, #2
 80010be:	440b      	add	r3, r1
 80010c0:	3350      	adds	r3, #80	; 0x50
 80010c2:	2200      	movs	r2, #0
 80010c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010c6:	7bfb      	ldrb	r3, [r7, #15]
 80010c8:	3301      	adds	r3, #1
 80010ca:	73fb      	strb	r3, [r7, #15]
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	429a      	cmp	r2, r3
 80010d4:	d3af      	bcc.n	8001036 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010d6:	2300      	movs	r3, #0
 80010d8:	73fb      	strb	r3, [r7, #15]
 80010da:	e044      	b.n	8001166 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80010dc:	7bfa      	ldrb	r2, [r7, #15]
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4613      	mov	r3, r2
 80010e2:	00db      	lsls	r3, r3, #3
 80010e4:	1a9b      	subs	r3, r3, r2
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	440b      	add	r3, r1
 80010ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80010f2:	7bfa      	ldrb	r2, [r7, #15]
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001104:	7bfa      	ldrb	r2, [r7, #15]
 8001106:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001108:	7bfa      	ldrb	r2, [r7, #15]
 800110a:	6879      	ldr	r1, [r7, #4]
 800110c:	4613      	mov	r3, r2
 800110e:	00db      	lsls	r3, r3, #3
 8001110:	1a9b      	subs	r3, r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	440b      	add	r3, r1
 8001116:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800111a:	2200      	movs	r2, #0
 800111c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001134:	7bfa      	ldrb	r2, [r7, #15]
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	4613      	mov	r3, r2
 800113a:	00db      	lsls	r3, r3, #3
 800113c:	1a9b      	subs	r3, r3, r2
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	440b      	add	r3, r1
 8001142:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800114a:	7bfa      	ldrb	r2, [r7, #15]
 800114c:	6879      	ldr	r1, [r7, #4]
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	1a9b      	subs	r3, r3, r2
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	440b      	add	r3, r1
 8001158:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001160:	7bfb      	ldrb	r3, [r7, #15]
 8001162:	3301      	adds	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
 8001166:	7bfa      	ldrb	r2, [r7, #15]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	429a      	cmp	r2, r3
 800116e:	d3b5      	bcc.n	80010dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	603b      	str	r3, [r7, #0]
 8001176:	687e      	ldr	r6, [r7, #4]
 8001178:	466d      	mov	r5, sp
 800117a:	f106 0410 	add.w	r4, r6, #16
 800117e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001180:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001186:	e894 0003 	ldmia.w	r4, {r0, r1}
 800118a:	e885 0003 	stmia.w	r5, {r0, r1}
 800118e:	1d33      	adds	r3, r6, #4
 8001190:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001192:	6838      	ldr	r0, [r7, #0]
 8001194:	f001 fe0c 	bl	8002db0 <USB_DevInit>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d005      	beq.n	80011aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2202      	movs	r2, #2
 80011a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00d      	b.n	80011c6 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fe54 	bl	8003e6c <USB_DevDisconnect>

  return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3714      	adds	r7, #20
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080011ce <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d101      	bne.n	80011ea <HAL_PCD_Start+0x1c>
 80011e6:	2302      	movs	r3, #2
 80011e8:	e020      	b.n	800122c <HAL_PCD_Start+0x5e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2201      	movs	r2, #1
 80011ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011f6:	2b01      	cmp	r3, #1
 80011f8:	d109      	bne.n	800120e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80011fe:	2b01      	cmp	r3, #1
 8001200:	d005      	beq.n	800120e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001206:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f001 fd80 	bl	8002d18 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fe04 	bl	8003e2a <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3710      	adds	r7, #16
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001234:	b590      	push	{r4, r7, lr}
 8001236:	b08d      	sub	sp, #52	; 0x34
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4618      	mov	r0, r3
 800124c:	f002 fec2 	bl	8003fd4 <USB_GetMode>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	f040 839d 	bne.w	8001992 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4618      	mov	r0, r3
 800125e:	f002 fe26 	bl	8003eae <USB_ReadInterrupts>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 8393 	beq.w	8001990 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f002 fe1d 	bl	8003eae <USB_ReadInterrupts>
 8001274:	4603      	mov	r3, r0
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b02      	cmp	r3, #2
 800127c:	d107      	bne.n	800128e <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	695a      	ldr	r2, [r3, #20]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f002 0202 	and.w	r2, r2, #2
 800128c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f002 fe0b 	bl	8003eae <USB_ReadInterrupts>
 8001298:	4603      	mov	r3, r0
 800129a:	f003 0310 	and.w	r3, r3, #16
 800129e:	2b10      	cmp	r3, #16
 80012a0:	d161      	bne.n	8001366 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	699a      	ldr	r2, [r3, #24]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f022 0210 	bic.w	r2, r2, #16
 80012b0:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80012b2:	6a3b      	ldr	r3, [r7, #32]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	f003 020f 	and.w	r2, r3, #15
 80012be:	4613      	mov	r3, r2
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	1a9b      	subs	r3, r3, r2
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80012ca:	687a      	ldr	r2, [r7, #4]
 80012cc:	4413      	add	r3, r2
 80012ce:	3304      	adds	r3, #4
 80012d0:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	0c5b      	lsrs	r3, r3, #17
 80012d6:	f003 030f 	and.w	r3, r3, #15
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d124      	bne.n	8001328 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d035      	beq.n	8001356 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	091b      	lsrs	r3, r3, #4
 80012f2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80012f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012f8:	b29b      	uxth	r3, r3
 80012fa:	461a      	mov	r2, r3
 80012fc:	6a38      	ldr	r0, [r7, #32]
 80012fe:	f002 fc71 	bl	8003be4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	68da      	ldr	r2, [r3, #12]
 8001306:	69bb      	ldr	r3, [r7, #24]
 8001308:	091b      	lsrs	r3, r3, #4
 800130a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800130e:	441a      	add	r2, r3
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	699a      	ldr	r2, [r3, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001320:	441a      	add	r2, r3
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	619a      	str	r2, [r3, #24]
 8001326:	e016      	b.n	8001356 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001328:	69bb      	ldr	r3, [r7, #24]
 800132a:	0c5b      	lsrs	r3, r3, #17
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	2b06      	cmp	r3, #6
 8001332:	d110      	bne.n	8001356 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800133a:	2208      	movs	r2, #8
 800133c:	4619      	mov	r1, r3
 800133e:	6a38      	ldr	r0, [r7, #32]
 8001340:	f002 fc50 	bl	8003be4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	69bb      	ldr	r3, [r7, #24]
 800134a:	091b      	lsrs	r3, r3, #4
 800134c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001350:	441a      	add	r2, r3
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f042 0210 	orr.w	r2, r2, #16
 8001364:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f002 fd9f 	bl	8003eae <USB_ReadInterrupts>
 8001370:	4603      	mov	r3, r0
 8001372:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001376:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800137a:	d16e      	bne.n	800145a <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f002 fda5 	bl	8003ed4 <USB_ReadDevAllOutEpInterrupt>
 800138a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800138c:	e062      	b.n	8001454 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d057      	beq.n	8001448 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	4611      	mov	r1, r2
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 fdca 	bl	8003f3c <USB_ReadDevOutEPInterrupt>
 80013a8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	f003 0301 	and.w	r3, r3, #1
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d00c      	beq.n	80013ce <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	015a      	lsls	r2, r3, #5
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013c0:	461a      	mov	r2, r3
 80013c2:	2301      	movs	r3, #1
 80013c4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80013c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f000 fdb1 	bl	8001f30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	f003 0308 	and.w	r3, r3, #8
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d00c      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80013d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013da:	015a      	lsls	r2, r3, #5
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	4413      	add	r3, r2
 80013e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013e4:	461a      	mov	r2, r3
 80013e6:	2308      	movs	r3, #8
 80013e8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80013ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f000 feab 	bl	8002148 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f003 0310 	and.w	r3, r3, #16
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d008      	beq.n	800140e <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	015a      	lsls	r2, r3, #5
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001408:	461a      	mov	r2, r3
 800140a:	2310      	movs	r3, #16
 800140c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	f003 0320 	and.w	r3, r3, #32
 8001414:	2b00      	cmp	r3, #0
 8001416:	d008      	beq.n	800142a <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	015a      	lsls	r2, r3, #5
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	4413      	add	r3, r2
 8001420:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001424:	461a      	mov	r2, r3
 8001426:	2320      	movs	r3, #32
 8001428:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001430:	2b00      	cmp	r3, #0
 8001432:	d009      	beq.n	8001448 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001436:	015a      	lsls	r2, r3, #5
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	4413      	add	r3, r2
 800143c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001440:	461a      	mov	r2, r3
 8001442:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001446:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	3301      	adds	r3, #1
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	085b      	lsrs	r3, r3, #1
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001456:	2b00      	cmp	r3, #0
 8001458:	d199      	bne.n	800138e <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f002 fd25 	bl	8003eae <USB_ReadInterrupts>
 8001464:	4603      	mov	r3, r0
 8001466:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800146a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800146e:	f040 80c0 	bne.w	80015f2 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4618      	mov	r0, r3
 8001478:	f002 fd46 	bl	8003f08 <USB_ReadDevAllInEpInterrupt>
 800147c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001482:	e0b2      	b.n	80015ea <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 80a7 	beq.w	80015de <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001496:	b2d2      	uxtb	r2, r2
 8001498:	4611      	mov	r1, r2
 800149a:	4618      	mov	r0, r3
 800149c:	f002 fd6c 	bl	8003f78 <USB_ReadDevInEPInterrupt>
 80014a0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d057      	beq.n	800155c <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	2201      	movs	r2, #1
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69f9      	ldr	r1, [r7, #28]
 80014c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80014cc:	4013      	ands	r3, r2
 80014ce:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80014d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d2:	015a      	lsls	r2, r3, #5
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	4413      	add	r3, r2
 80014d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014dc:	461a      	mov	r2, r3
 80014de:	2301      	movs	r3, #1
 80014e0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d132      	bne.n	8001550 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ee:	4613      	mov	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	1a9b      	subs	r3, r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	3348      	adds	r3, #72	; 0x48
 80014fa:	6819      	ldr	r1, [r3, #0]
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001500:	4613      	mov	r3, r2
 8001502:	00db      	lsls	r3, r3, #3
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4403      	add	r3, r0
 800150a:	3344      	adds	r3, #68	; 0x44
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4419      	add	r1, r3
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001514:	4613      	mov	r3, r2
 8001516:	00db      	lsls	r3, r3, #3
 8001518:	1a9b      	subs	r3, r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4403      	add	r3, r0
 800151e:	3348      	adds	r3, #72	; 0x48
 8001520:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d113      	bne.n	8001550 <HAL_PCD_IRQHandler+0x31c>
 8001528:	6879      	ldr	r1, [r7, #4]
 800152a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800152c:	4613      	mov	r3, r2
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	1a9b      	subs	r3, r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	3350      	adds	r3, #80	; 0x50
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d108      	bne.n	8001550 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6818      	ldr	r0, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001548:	461a      	mov	r2, r3
 800154a:	2101      	movs	r1, #1
 800154c:	f002 fd74 	bl	8004038 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	b2db      	uxtb	r3, r3
 8001554:	4619      	mov	r1, r3
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f004 fc91 	bl	8005e7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	f003 0308 	and.w	r3, r3, #8
 8001562:	2b00      	cmp	r3, #0
 8001564:	d008      	beq.n	8001578 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001568:	015a      	lsls	r2, r3, #5
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	4413      	add	r3, r2
 800156e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001572:	461a      	mov	r2, r3
 8001574:	2308      	movs	r3, #8
 8001576:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	015a      	lsls	r2, r3, #5
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800158e:	461a      	mov	r2, r3
 8001590:	2310      	movs	r3, #16
 8001592:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d008      	beq.n	80015b0 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800159e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a0:	015a      	lsls	r2, r3, #5
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	4413      	add	r3, r2
 80015a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015aa:	461a      	mov	r2, r3
 80015ac:	2340      	movs	r3, #64	; 0x40
 80015ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d008      	beq.n	80015cc <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c6:	461a      	mov	r2, r3
 80015c8:	2302      	movs	r3, #2
 80015ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fc1b 	bl	8001e14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	3301      	adds	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f af49 	bne.w	8001484 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fc59 	bl	8003eae <USB_ReadInterrupts>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001606:	d122      	bne.n	800164e <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 fe27 	bl	8002284 <HAL_PCDEx_LPM_Callback>
 8001636:	e002      	b.n	800163e <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f004 fc97 	bl	8005f6c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800164c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fc2b 	bl	8003eae <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001662:	d112      	bne.n	800168a <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f004 fc53 	bl	8005f20 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001688:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fc0d 	bl	8003eae <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169e:	f040 80c7 	bne.w	8001830 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2110      	movs	r1, #16
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fcdb 	bl	8003078 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c6:	e056      	b.n	8001776 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d4:	461a      	mov	r2, r3
 80016d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ec:	0151      	lsls	r1, r2, #5
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	440a      	add	r2, r1
 80016f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016fa:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800170c:	0151      	lsls	r1, r2, #5
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	440a      	add	r2, r1
 8001712:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800171a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800171e:	015a      	lsls	r2, r3, #5
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001728:	461a      	mov	r2, r3
 800172a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800172e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001732:	015a      	lsls	r2, r3, #5
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	0151      	lsls	r1, r2, #5
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	440a      	add	r2, r1
 8001746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800174a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800174e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	015a      	lsls	r2, r3, #5
 8001754:	69fb      	ldr	r3, [r7, #28]
 8001756:	4413      	add	r3, r2
 8001758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001760:	0151      	lsls	r1, r2, #5
 8001762:	69fa      	ldr	r2, [r7, #28]
 8001764:	440a      	add	r2, r1
 8001766:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800176a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800176e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001772:	3301      	adds	r3, #1
 8001774:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800177c:	429a      	cmp	r2, r3
 800177e:	d3a3      	bcc.n	80016c8 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001786:	69db      	ldr	r3, [r3, #28]
 8001788:	69fa      	ldr	r2, [r7, #28]
 800178a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001792:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001798:	2b00      	cmp	r3, #0
 800179a:	d016      	beq.n	80017ca <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017ac:	f043 030b 	orr.w	r3, r3, #11
 80017b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017b4:	69fb      	ldr	r3, [r7, #28]
 80017b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017bc:	69fa      	ldr	r2, [r7, #28]
 80017be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017c2:	f043 030b 	orr.w	r3, r3, #11
 80017c6:	6453      	str	r3, [r2, #68]	; 0x44
 80017c8:	e015      	b.n	80017f6 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	69fa      	ldr	r2, [r7, #28]
 80017d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f0:	f043 030b 	orr.w	r3, r3, #11
 80017f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001804:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001808:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6818      	ldr	r0, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691b      	ldr	r3, [r3, #16]
 8001812:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800181a:	461a      	mov	r2, r3
 800181c:	f002 fc0c 	bl	8004038 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	695a      	ldr	r2, [r3, #20]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800182e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f002 fb3a 	bl	8003eae <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001840:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001844:	d124      	bne.n	8001890 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f002 fbd0 	bl	8003ff0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f001 fc70 	bl	800313a <USB_GetDevSpeed>
 800185a:	4603      	mov	r3, r0
 800185c:	461a      	mov	r2, r3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681c      	ldr	r4, [r3, #0]
 8001866:	f001 f947 	bl	8002af8 <HAL_RCC_GetHCLKFreq>
 800186a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001870:	b2db      	uxtb	r3, r3
 8001872:	461a      	mov	r2, r3
 8001874:	4620      	mov	r0, r4
 8001876:	f001 f9ad 	bl	8002bd4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f004 fb27 	bl	8005ece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	695a      	ldr	r2, [r3, #20]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800188e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fb0a 	bl	8003eae <USB_ReadInterrupts>
 800189a:	4603      	mov	r3, r0
 800189c:	f003 0308 	and.w	r3, r3, #8
 80018a0:	2b08      	cmp	r3, #8
 80018a2:	d10a      	bne.n	80018ba <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f004 fb04 	bl	8005eb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	695a      	ldr	r2, [r3, #20]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f002 0208 	and.w	r2, r2, #8
 80018b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4618      	mov	r0, r3
 80018c0:	f002 faf5 	bl	8003eae <USB_ReadInterrupts>
 80018c4:	4603      	mov	r3, r0
 80018c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80018ce:	d10f      	bne.n	80018f0 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80018d0:	2300      	movs	r3, #0
 80018d2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f004 fb66 	bl	8005fac <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	695a      	ldr	r2, [r3, #20]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80018ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f002 fada 	bl	8003eae <USB_ReadInterrupts>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001900:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001904:	d10f      	bne.n	8001926 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001906:	2300      	movs	r3, #0
 8001908:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800190a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4619      	mov	r1, r3
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f004 fb39 	bl	8005f88 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	695a      	ldr	r2, [r3, #20]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4618      	mov	r0, r3
 800192c:	f002 fabf 	bl	8003eae <USB_ReadInterrupts>
 8001930:	4603      	mov	r3, r0
 8001932:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001936:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800193a:	d10a      	bne.n	8001952 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f004 fb47 	bl	8005fd0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	695a      	ldr	r2, [r3, #20]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001950:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f002 faa9 	bl	8003eae <USB_ReadInterrupts>
 800195c:	4603      	mov	r3, r0
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	2b04      	cmp	r3, #4
 8001964:	d115      	bne.n	8001992 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	d002      	beq.n	800197e <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f004 fb37 	bl	8005fec <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6859      	ldr	r1, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	430a      	orrs	r2, r1
 800198c:	605a      	str	r2, [r3, #4]
 800198e:	e000      	b.n	8001992 <HAL_PCD_IRQHandler+0x75e>
      return;
 8001990:	bf00      	nop
    }
  }
}
 8001992:	3734      	adds	r7, #52	; 0x34
 8001994:	46bd      	mov	sp, r7
 8001996:	bd90      	pop	{r4, r7, pc}

08001998 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_PCD_SetAddress+0x1a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e013      	b.n	80019da <HAL_PCD_SetAddress+0x42>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f002 fa07 	bl	8003dde <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	4608      	mov	r0, r1
 80019ec:	4611      	mov	r1, r2
 80019ee:	461a      	mov	r2, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	70fb      	strb	r3, [r7, #3]
 80019f4:	460b      	mov	r3, r1
 80019f6:	803b      	strh	r3, [r7, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da0f      	bge.n	8001a28 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 020f 	and.w	r2, r3, #15
 8001a0e:	4613      	mov	r3, r2
 8001a10:	00db      	lsls	r3, r3, #3
 8001a12:	1a9b      	subs	r3, r3, r2
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	3338      	adds	r3, #56	; 0x38
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	3304      	adds	r3, #4
 8001a1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2201      	movs	r2, #1
 8001a24:	705a      	strb	r2, [r3, #1]
 8001a26:	e00f      	b.n	8001a48 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a28:	78fb      	ldrb	r3, [r7, #3]
 8001a2a:	f003 020f 	and.w	r2, r3, #15
 8001a2e:	4613      	mov	r3, r2
 8001a30:	00db      	lsls	r3, r3, #3
 8001a32:	1a9b      	subs	r3, r3, r2
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a3a:	687a      	ldr	r2, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	3304      	adds	r3, #4
 8001a40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2200      	movs	r2, #0
 8001a46:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 030f 	and.w	r3, r3, #15
 8001a4e:	b2da      	uxtb	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a54:	883a      	ldrh	r2, [r7, #0]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	78ba      	ldrb	r2, [r7, #2]
 8001a5e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d004      	beq.n	8001a72 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a72:	78bb      	ldrb	r3, [r7, #2]
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	d102      	bne.n	8001a7e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d101      	bne.n	8001a8c <HAL_PCD_EP_Open+0xaa>
 8001a88:	2302      	movs	r3, #2
 8001a8a:	e00e      	b.n	8001aaa <HAL_PCD_EP_Open+0xc8>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	68f9      	ldr	r1, [r7, #12]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f001 fb72 	bl	8003184 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001aa8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}

08001ab2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ab2:	b580      	push	{r7, lr}
 8001ab4:	b084      	sub	sp, #16
 8001ab6:	af00      	add	r7, sp, #0
 8001ab8:	6078      	str	r0, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	da0f      	bge.n	8001ae6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	f003 020f 	and.w	r2, r3, #15
 8001acc:	4613      	mov	r3, r2
 8001ace:	00db      	lsls	r3, r3, #3
 8001ad0:	1a9b      	subs	r3, r3, r2
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	3338      	adds	r3, #56	; 0x38
 8001ad6:	687a      	ldr	r2, [r7, #4]
 8001ad8:	4413      	add	r3, r2
 8001ada:	3304      	adds	r3, #4
 8001adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	2201      	movs	r2, #1
 8001ae2:	705a      	strb	r2, [r3, #1]
 8001ae4:	e00f      	b.n	8001b06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae6:	78fb      	ldrb	r3, [r7, #3]
 8001ae8:	f003 020f 	and.w	r2, r3, #15
 8001aec:	4613      	mov	r3, r2
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	1a9b      	subs	r3, r3, r2
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	4413      	add	r3, r2
 8001afc:	3304      	adds	r3, #4
 8001afe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2200      	movs	r2, #0
 8001b04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 030f 	and.w	r3, r3, #15
 8001b0c:	b2da      	uxtb	r2, r3
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d101      	bne.n	8001b20 <HAL_PCD_EP_Close+0x6e>
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	e00e      	b.n	8001b3e <HAL_PCD_EP_Close+0x8c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2201      	movs	r2, #1
 8001b24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	68f9      	ldr	r1, [r7, #12]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f001 fbb0 	bl	8003294 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b46:	b580      	push	{r7, lr}
 8001b48:	b086      	sub	sp, #24
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	60f8      	str	r0, [r7, #12]
 8001b4e:	607a      	str	r2, [r7, #4]
 8001b50:	603b      	str	r3, [r7, #0]
 8001b52:	460b      	mov	r3, r1
 8001b54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b56:	7afb      	ldrb	r3, [r7, #11]
 8001b58:	f003 020f 	and.w	r2, r3, #15
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	1a9b      	subs	r3, r3, r2
 8001b62:	009b      	lsls	r3, r3, #2
 8001b64:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	3304      	adds	r3, #4
 8001b6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	2200      	movs	r2, #0
 8001b86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b88:	7afb      	ldrb	r3, [r7, #11]
 8001b8a:	f003 030f 	and.w	r3, r3, #15
 8001b8e:	b2da      	uxtb	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	691b      	ldr	r3, [r3, #16]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d102      	bne.n	8001ba2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ba2:	7afb      	ldrb	r3, [r7, #11]
 8001ba4:	f003 030f 	and.w	r3, r3, #15
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	691b      	ldr	r3, [r3, #16]
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	6979      	ldr	r1, [r7, #20]
 8001bba:	f001 fe8b 	bl	80038d4 <USB_EP0StartXfer>
 8001bbe:	e008      	b.n	8001bd2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6818      	ldr	r0, [r3, #0]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	461a      	mov	r2, r3
 8001bcc:	6979      	ldr	r1, [r7, #20]
 8001bce:	f001 fc3d 	bl	800344c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	f003 020f 	and.w	r2, r3, #15
 8001bee:	6879      	ldr	r1, [r7, #4]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	1a9b      	subs	r3, r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	440b      	add	r3, r1
 8001bfa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001bfe:	681b      	ldr	r3, [r3, #0]
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	60f8      	str	r0, [r7, #12]
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c1c:	7afb      	ldrb	r3, [r7, #11]
 8001c1e:	f003 020f 	and.w	r2, r3, #15
 8001c22:	4613      	mov	r3, r2
 8001c24:	00db      	lsls	r3, r3, #3
 8001c26:	1a9b      	subs	r3, r3, r2
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	3338      	adds	r3, #56	; 0x38
 8001c2c:	68fa      	ldr	r2, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	3304      	adds	r3, #4
 8001c32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	683a      	ldr	r2, [r7, #0]
 8001c3e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2200      	movs	r2, #0
 8001c44:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c4c:	7afb      	ldrb	r3, [r7, #11]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d102      	bne.n	8001c66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c66:	7afb      	ldrb	r3, [r7, #11]
 8001c68:	f003 030f 	and.w	r3, r3, #15
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d109      	bne.n	8001c84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	691b      	ldr	r3, [r3, #16]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	f001 fe29 	bl	80038d4 <USB_EP0StartXfer>
 8001c82:	e008      	b.n	8001c96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	461a      	mov	r2, r3
 8001c90:	6979      	ldr	r1, [r7, #20]
 8001c92:	f001 fbdb 	bl	800344c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cac:	78fb      	ldrb	r3, [r7, #3]
 8001cae:	f003 020f 	and.w	r2, r3, #15
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d901      	bls.n	8001cbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e050      	b.n	8001d60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	da0f      	bge.n	8001ce6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cc6:	78fb      	ldrb	r3, [r7, #3]
 8001cc8:	f003 020f 	and.w	r2, r3, #15
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	1a9b      	subs	r3, r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	3338      	adds	r3, #56	; 0x38
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	705a      	strb	r2, [r3, #1]
 8001ce4:	e00d      	b.n	8001d02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ce6:	78fa      	ldrb	r2, [r7, #3]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2201      	movs	r2, #1
 8001d06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f003 030f 	and.w	r3, r3, #15
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d1a:	2b01      	cmp	r3, #1
 8001d1c:	d101      	bne.n	8001d22 <HAL_PCD_EP_SetStall+0x82>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	e01e      	b.n	8001d60 <HAL_PCD_EP_SetStall+0xc0>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68f9      	ldr	r1, [r7, #12]
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 ff80 	bl	8003c36 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d36:	78fb      	ldrb	r3, [r7, #3]
 8001d38:	f003 030f 	and.w	r3, r3, #15
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d10a      	bne.n	8001d56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6818      	ldr	r0, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	691b      	ldr	r3, [r3, #16]
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d50:	461a      	mov	r2, r3
 8001d52:	f002 f971 	bl	8004038 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2200      	movs	r2, #0
 8001d5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	460b      	mov	r3, r1
 8001d72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d74:	78fb      	ldrb	r3, [r7, #3]
 8001d76:	f003 020f 	and.w	r2, r3, #15
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d901      	bls.n	8001d86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e042      	b.n	8001e0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	da0f      	bge.n	8001dae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d8e:	78fb      	ldrb	r3, [r7, #3]
 8001d90:	f003 020f 	and.w	r2, r3, #15
 8001d94:	4613      	mov	r3, r2
 8001d96:	00db      	lsls	r3, r3, #3
 8001d98:	1a9b      	subs	r3, r3, r2
 8001d9a:	009b      	lsls	r3, r3, #2
 8001d9c:	3338      	adds	r3, #56	; 0x38
 8001d9e:	687a      	ldr	r2, [r7, #4]
 8001da0:	4413      	add	r3, r2
 8001da2:	3304      	adds	r3, #4
 8001da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2201      	movs	r2, #1
 8001daa:	705a      	strb	r2, [r3, #1]
 8001dac:	e00f      	b.n	8001dce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	f003 020f 	and.w	r2, r3, #15
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dc0:	687a      	ldr	r2, [r7, #4]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2200      	movs	r2, #0
 8001dcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	f003 030f 	and.w	r3, r3, #15
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_PCD_EP_ClrStall+0x86>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e00e      	b.n	8001e0c <HAL_PCD_EP_ClrStall+0xa4>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68f9      	ldr	r1, [r7, #12]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f001 ff88 	bl	8003d12 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e0a:	2300      	movs	r3, #0
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08a      	sub	sp, #40	; 0x28
 8001e18:	af02      	add	r7, sp, #8
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	00db      	lsls	r3, r3, #3
 8001e2e:	1a9b      	subs	r3, r3, r2
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	3338      	adds	r3, #56	; 0x38
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	699a      	ldr	r2, [r3, #24]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	695b      	ldr	r3, [r3, #20]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d901      	bls.n	8001e4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e06c      	b.n	8001f26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	695a      	ldr	r2, [r3, #20]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d902      	bls.n	8001e68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	3303      	adds	r3, #3
 8001e6c:	089b      	lsrs	r3, r3, #2
 8001e6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e70:	e02b      	b.n	8001eca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	695a      	ldr	r2, [r3, #20]
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d902      	bls.n	8001e8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3303      	adds	r3, #3
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	68d9      	ldr	r1, [r3, #12]
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	b2da      	uxtb	r2, r3
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	4603      	mov	r3, r0
 8001eac:	6978      	ldr	r0, [r7, #20]
 8001eae:	f001 fe64 	bl	8003b7a <USB_WritePacket>

    ep->xfer_buff  += len;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	441a      	add	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	699a      	ldr	r2, [r3, #24]
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	441a      	add	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	015a      	lsls	r2, r3, #5
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	69ba      	ldr	r2, [r7, #24]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d809      	bhi.n	8001ef4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	699a      	ldr	r2, [r3, #24]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d203      	bcs.n	8001ef4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	695b      	ldr	r3, [r3, #20]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d1be      	bne.n	8001e72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	695a      	ldr	r2, [r3, #20]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	699b      	ldr	r3, [r3, #24]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d811      	bhi.n	8001f24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	f003 030f 	and.w	r3, r3, #15
 8001f06:	2201      	movs	r2, #1
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	6939      	ldr	r1, [r7, #16]
 8001f1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f20:	4013      	ands	r3, r2
 8001f22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	3720      	adds	r7, #32
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
	...

08001f30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	333c      	adds	r3, #60	; 0x3c
 8001f48:	3304      	adds	r3, #4
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	015a      	lsls	r2, r3, #5
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	4413      	add	r3, r2
 8001f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	691b      	ldr	r3, [r3, #16]
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	f040 80a0 	bne.w	80020a8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d015      	beq.n	8001f9e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4a72      	ldr	r2, [pc, #456]	; (8002140 <PCD_EP_OutXfrComplete_int+0x210>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	f240 80dd 	bls.w	8002136 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80d7 	beq.w	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f94:	461a      	mov	r2, r3
 8001f96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f9a:	6093      	str	r3, [r2, #8]
 8001f9c:	e0cb      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	f003 0320 	and.w	r3, r3, #32
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	015a      	lsls	r2, r3, #5
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	4413      	add	r3, r2
 8001fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	2320      	movs	r3, #32
 8001fb8:	6093      	str	r3, [r2, #8]
 8001fba:	e0bc      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	f040 80b7 	bne.w	8002136 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4a5d      	ldr	r2, [pc, #372]	; (8002140 <PCD_EP_OutXfrComplete_int+0x210>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d90f      	bls.n	8001ff0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00a      	beq.n	8001ff0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	015a      	lsls	r2, r3, #5
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001fec:	6093      	str	r3, [r2, #8]
 8001fee:	e0a2      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8001ff0:	6879      	ldr	r1, [r7, #4]
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	1a9b      	subs	r3, r3, r2
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	440b      	add	r3, r1
 8001ffe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002002:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	0159      	lsls	r1, r3, #5
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	440b      	add	r3, r1
 800200c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002016:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8002018:	6878      	ldr	r0, [r7, #4]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	4613      	mov	r3, r2
 800201e:	00db      	lsls	r3, r3, #3
 8002020:	1a9b      	subs	r3, r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4403      	add	r3, r0
 8002026:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800202a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	683a      	ldr	r2, [r7, #0]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	1a9b      	subs	r3, r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800203e:	6819      	ldr	r1, [r3, #0]
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4403      	add	r3, r0
 800204e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4419      	add	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	1a9b      	subs	r3, r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4403      	add	r3, r0
 8002064:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002068:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d114      	bne.n	800209a <PCD_EP_OutXfrComplete_int+0x16a>
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	683a      	ldr	r2, [r7, #0]
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	1a9b      	subs	r3, r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	440b      	add	r3, r1
 800207e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d108      	bne.n	800209a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002092:	461a      	mov	r2, r3
 8002094:	2101      	movs	r1, #1
 8002096:	f001 ffcf 	bl	8004038 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	b2db      	uxtb	r3, r3
 800209e:	4619      	mov	r1, r3
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f003 fed1 	bl	8005e48 <HAL_PCD_DataOutStageCallback>
 80020a6:	e046      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a26      	ldr	r2, [pc, #152]	; (8002144 <PCD_EP_OutXfrComplete_int+0x214>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d124      	bne.n	80020fa <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00a      	beq.n	80020d0 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	015a      	lsls	r2, r3, #5
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4413      	add	r3, r2
 80020c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020c6:	461a      	mov	r2, r3
 80020c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020cc:	6093      	str	r3, [r2, #8]
 80020ce:	e032      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	f003 0320 	and.w	r3, r3, #32
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e6:	461a      	mov	r2, r3
 80020e8:	2320      	movs	r3, #32
 80020ea:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	4619      	mov	r1, r3
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f003 fea8 	bl	8005e48 <HAL_PCD_DataOutStageCallback>
 80020f8:	e01d      	b.n	8002136 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d114      	bne.n	800212a <PCD_EP_OutXfrComplete_int+0x1fa>
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	4613      	mov	r3, r2
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	1a9b      	subs	r3, r3, r2
 800210a:	009b      	lsls	r3, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d108      	bne.n	800212a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6818      	ldr	r0, [r3, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002122:	461a      	mov	r2, r3
 8002124:	2100      	movs	r1, #0
 8002126:	f001 ff87 	bl	8004038 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	b2db      	uxtb	r3, r3
 800212e:	4619      	mov	r1, r3
 8002130:	6878      	ldr	r0, [r7, #4]
 8002132:	f003 fe89 	bl	8005e48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	4f54300a 	.word	0x4f54300a
 8002144:	4f54310a 	.word	0x4f54310a

08002148 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	333c      	adds	r3, #60	; 0x3c
 8002160:	3304      	adds	r3, #4
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	015a      	lsls	r2, r3, #5
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	4413      	add	r3, r2
 800216e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	4a15      	ldr	r2, [pc, #84]	; (80021d0 <PCD_EP_OutSetupPacket_int+0x88>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d90e      	bls.n	800219c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002184:	2b00      	cmp	r3, #0
 8002186:	d009      	beq.n	800219c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002194:	461a      	mov	r2, r3
 8002196:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800219a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f003 fe41 	bl	8005e24 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <PCD_EP_OutSetupPacket_int+0x88>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d90c      	bls.n	80021c4 <PCD_EP_OutSetupPacket_int+0x7c>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	2b01      	cmp	r3, #1
 80021b0:	d108      	bne.n	80021c4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6818      	ldr	r0, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80021bc:	461a      	mov	r2, r3
 80021be:	2101      	movs	r1, #1
 80021c0:	f001 ff3a 	bl	8004038 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80021c4:	2300      	movs	r3, #0
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3718      	adds	r7, #24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	4f54300a 	.word	0x4f54300a

080021d4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	460b      	mov	r3, r1
 80021de:	70fb      	strb	r3, [r7, #3]
 80021e0:	4613      	mov	r3, r2
 80021e2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80021ec:	78fb      	ldrb	r3, [r7, #3]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d107      	bne.n	8002202 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80021f2:	883b      	ldrh	r3, [r7, #0]
 80021f4:	0419      	lsls	r1, r3, #16
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68ba      	ldr	r2, [r7, #8]
 80021fc:	430a      	orrs	r2, r1
 80021fe:	629a      	str	r2, [r3, #40]	; 0x28
 8002200:	e028      	b.n	8002254 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002208:	0c1b      	lsrs	r3, r3, #16
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	4413      	add	r3, r2
 800220e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002210:	2300      	movs	r3, #0
 8002212:	73fb      	strb	r3, [r7, #15]
 8002214:	e00d      	b.n	8002232 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	7bfb      	ldrb	r3, [r7, #15]
 800221c:	3340      	adds	r3, #64	; 0x40
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	0c1b      	lsrs	r3, r3, #16
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	4413      	add	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	3301      	adds	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
 8002232:	7bfa      	ldrb	r2, [r7, #15]
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	3b01      	subs	r3, #1
 8002238:	429a      	cmp	r2, r3
 800223a:	d3ec      	bcc.n	8002216 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800223c:	883b      	ldrh	r3, [r7, #0]
 800223e:	0418      	lsls	r0, r3, #16
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6819      	ldr	r1, [r3, #0]
 8002244:	78fb      	ldrb	r3, [r7, #3]
 8002246:	3b01      	subs	r3, #1
 8002248:	68ba      	ldr	r2, [r7, #8]
 800224a:	4302      	orrs	r2, r0
 800224c:	3340      	adds	r3, #64	; 0x40
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
 800226a:	460b      	mov	r3, r1
 800226c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	887a      	ldrh	r2, [r7, #2]
 8002274:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b086      	sub	sp, #24
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e25b      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d075      	beq.n	80023a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ba:	4ba3      	ldr	r3, [pc, #652]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d00c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c6:	4ba0      	ldr	r3, [pc, #640]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80022ce:	2b08      	cmp	r3, #8
 80022d0:	d112      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022d2:	4b9d      	ldr	r3, [pc, #628]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022de:	d10b      	bne.n	80022f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	4b99      	ldr	r3, [pc, #612]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d05b      	beq.n	80023a4 <HAL_RCC_OscConfig+0x108>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d157      	bne.n	80023a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e236      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002300:	d106      	bne.n	8002310 <HAL_RCC_OscConfig+0x74>
 8002302:	4b91      	ldr	r3, [pc, #580]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230c:	6013      	str	r3, [r2, #0]
 800230e:	e01d      	b.n	800234c <HAL_RCC_OscConfig+0xb0>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x98>
 800231a:	4b8b      	ldr	r3, [pc, #556]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a8a      	ldr	r2, [pc, #552]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b88      	ldr	r3, [pc, #544]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a87      	ldr	r2, [pc, #540]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e00b      	b.n	800234c <HAL_RCC_OscConfig+0xb0>
 8002334:	4b84      	ldr	r3, [pc, #528]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a83      	ldr	r2, [pc, #524]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b81      	ldr	r3, [pc, #516]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a80      	ldr	r2, [pc, #512]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800234a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d013      	beq.n	800237c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe fb34 	bl	80009c0 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe fb30 	bl	80009c0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1fb      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800236e:	4b76      	ldr	r3, [pc, #472]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d0f0      	beq.n	800235c <HAL_RCC_OscConfig+0xc0>
 800237a:	e014      	b.n	80023a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800237c:	f7fe fb20 	bl	80009c0 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002382:	e008      	b.n	8002396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002384:	f7fe fb1c 	bl	80009c0 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b64      	cmp	r3, #100	; 0x64
 8002390:	d901      	bls.n	8002396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e1e7      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002396:	4b6c      	ldr	r3, [pc, #432]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1f0      	bne.n	8002384 <HAL_RCC_OscConfig+0xe8>
 80023a2:	e000      	b.n	80023a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d063      	beq.n	800247a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023b2:	4b65      	ldr	r3, [pc, #404]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	f003 030c 	and.w	r3, r3, #12
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d00b      	beq.n	80023d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023be:	4b62      	ldr	r3, [pc, #392]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80023c6:	2b08      	cmp	r3, #8
 80023c8:	d11c      	bne.n	8002404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023ca:	4b5f      	ldr	r3, [pc, #380]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d116      	bne.n	8002404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023d6:	4b5c      	ldr	r3, [pc, #368]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_RCC_OscConfig+0x152>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d001      	beq.n	80023ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e1bb      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ee:	4b56      	ldr	r3, [pc, #344]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691b      	ldr	r3, [r3, #16]
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4952      	ldr	r1, [pc, #328]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002402:	e03a      	b.n	800247a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d020      	beq.n	800244e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800240c:	4b4f      	ldr	r3, [pc, #316]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 800240e:	2201      	movs	r2, #1
 8002410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002412:	f7fe fad5 	bl	80009c0 <HAL_GetTick>
 8002416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002418:	e008      	b.n	800242c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800241a:	f7fe fad1 	bl	80009c0 <HAL_GetTick>
 800241e:	4602      	mov	r2, r0
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	1ad3      	subs	r3, r2, r3
 8002424:	2b02      	cmp	r3, #2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e19c      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800242c:	4b46      	ldr	r3, [pc, #280]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0f0      	beq.n	800241a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002438:	4b43      	ldr	r3, [pc, #268]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	691b      	ldr	r3, [r3, #16]
 8002444:	00db      	lsls	r3, r3, #3
 8002446:	4940      	ldr	r1, [pc, #256]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	4313      	orrs	r3, r2
 800244a:	600b      	str	r3, [r1, #0]
 800244c:	e015      	b.n	800247a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800244e:	4b3f      	ldr	r3, [pc, #252]	; (800254c <HAL_RCC_OscConfig+0x2b0>)
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fab4 	bl	80009c0 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe fab0 	bl	80009c0 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e17b      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1f0      	bne.n	800245c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d030      	beq.n	80024e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d016      	beq.n	80024bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800248e:	4b30      	ldr	r3, [pc, #192]	; (8002550 <HAL_RCC_OscConfig+0x2b4>)
 8002490:	2201      	movs	r2, #1
 8002492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fa94 	bl	80009c0 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fa90 	bl	80009c0 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e15b      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ae:	4b26      	ldr	r3, [pc, #152]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x200>
 80024ba:	e015      	b.n	80024e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024bc:	4b24      	ldr	r3, [pc, #144]	; (8002550 <HAL_RCC_OscConfig+0x2b4>)
 80024be:	2200      	movs	r2, #0
 80024c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024c2:	f7fe fa7d 	bl	80009c0 <HAL_GetTick>
 80024c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	e008      	b.n	80024dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ca:	f7fe fa79 	bl	80009c0 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	d901      	bls.n	80024dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	e144      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024dc:	4b1a      	ldr	r3, [pc, #104]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80024de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d1f0      	bne.n	80024ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	f000 80a0 	beq.w	8002636 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024fa:	4b13      	ldr	r3, [pc, #76]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10f      	bne.n	8002526 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002506:	2300      	movs	r3, #0
 8002508:	60bb      	str	r3, [r7, #8]
 800250a:	4b0f      	ldr	r3, [pc, #60]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a0e      	ldr	r2, [pc, #56]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <HAL_RCC_OscConfig+0x2ac>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002522:	2301      	movs	r3, #1
 8002524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002526:	4b0b      	ldr	r3, [pc, #44]	; (8002554 <HAL_RCC_OscConfig+0x2b8>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d121      	bne.n	8002576 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <HAL_RCC_OscConfig+0x2b8>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a07      	ldr	r2, [pc, #28]	; (8002554 <HAL_RCC_OscConfig+0x2b8>)
 8002538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800253e:	f7fe fa3f 	bl	80009c0 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002544:	e011      	b.n	800256a <HAL_RCC_OscConfig+0x2ce>
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800
 800254c:	42470000 	.word	0x42470000
 8002550:	42470e80 	.word	0x42470e80
 8002554:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7fe fa32 	bl	80009c0 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e0fd      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256a:	4b81      	ldr	r3, [pc, #516]	; (8002770 <HAL_RCC_OscConfig+0x4d4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	2b01      	cmp	r3, #1
 800257c:	d106      	bne.n	800258c <HAL_RCC_OscConfig+0x2f0>
 800257e:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 8002580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002582:	4a7c      	ldr	r2, [pc, #496]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 8002584:	f043 0301 	orr.w	r3, r3, #1
 8002588:	6713      	str	r3, [r2, #112]	; 0x70
 800258a:	e01c      	b.n	80025c6 <HAL_RCC_OscConfig+0x32a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	2b05      	cmp	r3, #5
 8002592:	d10c      	bne.n	80025ae <HAL_RCC_OscConfig+0x312>
 8002594:	4b77      	ldr	r3, [pc, #476]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 8002596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002598:	4a76      	ldr	r2, [pc, #472]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 800259a:	f043 0304 	orr.w	r3, r3, #4
 800259e:	6713      	str	r3, [r2, #112]	; 0x70
 80025a0:	4b74      	ldr	r3, [pc, #464]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80025a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a4:	4a73      	ldr	r2, [pc, #460]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80025a6:	f043 0301 	orr.w	r3, r3, #1
 80025aa:	6713      	str	r3, [r2, #112]	; 0x70
 80025ac:	e00b      	b.n	80025c6 <HAL_RCC_OscConfig+0x32a>
 80025ae:	4b71      	ldr	r3, [pc, #452]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80025b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b2:	4a70      	ldr	r2, [pc, #448]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80025b4:	f023 0301 	bic.w	r3, r3, #1
 80025b8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ba:	4b6e      	ldr	r3, [pc, #440]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a6d      	ldr	r2, [pc, #436]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80025c0:	f023 0304 	bic.w	r3, r3, #4
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	689b      	ldr	r3, [r3, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d015      	beq.n	80025fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fe f9f7 	bl	80009c0 <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d4:	e00a      	b.n	80025ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	f7fe f9f3 	bl	80009c0 <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e0bc      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025ec:	4b61      	ldr	r3, [pc, #388]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ee      	beq.n	80025d6 <HAL_RCC_OscConfig+0x33a>
 80025f8:	e014      	b.n	8002624 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe f9e1 	bl	80009c0 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002602:	f7fe f9dd 	bl	80009c0 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002610:	4293      	cmp	r3, r2
 8002612:	d901      	bls.n	8002618 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002614:	2303      	movs	r3, #3
 8002616:	e0a6      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002618:	4b56      	ldr	r3, [pc, #344]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f003 0302 	and.w	r3, r3, #2
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1ee      	bne.n	8002602 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002624:	7dfb      	ldrb	r3, [r7, #23]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d105      	bne.n	8002636 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262a:	4b52      	ldr	r3, [pc, #328]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	4a51      	ldr	r2, [pc, #324]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 8002630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	f000 8092 	beq.w	8002764 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002640:	4b4c      	ldr	r3, [pc, #304]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	2b08      	cmp	r3, #8
 800264a:	d05c      	beq.n	8002706 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	699b      	ldr	r3, [r3, #24]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d141      	bne.n	80026d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b48      	ldr	r3, [pc, #288]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 8002656:	2200      	movs	r2, #0
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe f9b1 	bl	80009c0 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002662:	f7fe f9ad 	bl	80009c0 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e078      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002674:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1f0      	bne.n	8002662 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69da      	ldr	r2, [r3, #28]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	431a      	orrs	r2, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268e:	019b      	lsls	r3, r3, #6
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	3b01      	subs	r3, #1
 800269a:	041b      	lsls	r3, r3, #16
 800269c:	431a      	orrs	r2, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	061b      	lsls	r3, r3, #24
 80026a4:	4933      	ldr	r1, [pc, #204]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026aa:	4b33      	ldr	r3, [pc, #204]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80026ac:	2201      	movs	r2, #1
 80026ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b0:	f7fe f986 	bl	80009c0 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026b8:	f7fe f982 	bl	80009c0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e04d      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b2a      	ldr	r3, [pc, #168]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x41c>
 80026d6:	e045      	b.n	8002764 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026d8:	4b27      	ldr	r3, [pc, #156]	; (8002778 <HAL_RCC_OscConfig+0x4dc>)
 80026da:	2200      	movs	r2, #0
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe f96f 	bl	80009c0 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e6:	f7fe f96b 	bl	80009c0 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e036      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026f8:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1f0      	bne.n	80026e6 <HAL_RCC_OscConfig+0x44a>
 8002704:	e02e      	b.n	8002764 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	699b      	ldr	r3, [r3, #24]
 800270a:	2b01      	cmp	r3, #1
 800270c:	d101      	bne.n	8002712 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e029      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002712:	4b18      	ldr	r3, [pc, #96]	; (8002774 <HAL_RCC_OscConfig+0x4d8>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	69db      	ldr	r3, [r3, #28]
 8002722:	429a      	cmp	r2, r3
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002730:	429a      	cmp	r2, r3
 8002732:	d115      	bne.n	8002760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800273a:	4013      	ands	r3, r2
 800273c:	687a      	ldr	r2, [r7, #4]
 800273e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002740:	4293      	cmp	r3, r2
 8002742:	d10d      	bne.n	8002760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800274e:	429a      	cmp	r2, r3
 8002750:	d106      	bne.n	8002760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e000      	b.n	8002766 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3718      	adds	r7, #24
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	40007000 	.word	0x40007000
 8002774:	40023800 	.word	0x40023800
 8002778:	42470060 	.word	0x42470060

0800277c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
 8002784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e0cc      	b.n	800292a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002790:	4b68      	ldr	r3, [pc, #416]	; (8002934 <HAL_RCC_ClockConfig+0x1b8>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 030f 	and.w	r3, r3, #15
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	429a      	cmp	r2, r3
 800279c:	d90c      	bls.n	80027b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <HAL_RCC_ClockConfig+0x1b8>)
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b63      	ldr	r3, [pc, #396]	; (8002934 <HAL_RCC_ClockConfig+0x1b8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0b8      	b.n	800292a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0302 	and.w	r3, r3, #2
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d020      	beq.n	8002806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027d0:	4b59      	ldr	r3, [pc, #356]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	4a58      	ldr	r2, [pc, #352]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80027d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80027da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0308 	and.w	r3, r3, #8
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027e8:	4b53      	ldr	r3, [pc, #332]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a52      	ldr	r2, [pc, #328]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027f4:	4b50      	ldr	r3, [pc, #320]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	494d      	ldr	r1, [pc, #308]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	4313      	orrs	r3, r2
 8002804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b00      	cmp	r3, #0
 8002810:	d044      	beq.n	800289c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d107      	bne.n	800282a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800281a:	4b47      	ldr	r3, [pc, #284]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d119      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e07f      	b.n	800292a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d003      	beq.n	800283a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002836:	2b03      	cmp	r3, #3
 8002838:	d107      	bne.n	800284a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283a:	4b3f      	ldr	r3, [pc, #252]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d109      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e06f      	b.n	800292a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800284a:	4b3b      	ldr	r3, [pc, #236]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e067      	b.n	800292a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800285a:	4b37      	ldr	r3, [pc, #220]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f023 0203 	bic.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	4934      	ldr	r1, [pc, #208]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800286c:	f7fe f8a8 	bl	80009c0 <HAL_GetTick>
 8002870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002872:	e00a      	b.n	800288a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002874:	f7fe f8a4 	bl	80009c0 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002882:	4293      	cmp	r3, r2
 8002884:	d901      	bls.n	800288a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002886:	2303      	movs	r3, #3
 8002888:	e04f      	b.n	800292a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	4b2b      	ldr	r3, [pc, #172]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 020c 	and.w	r2, r3, #12
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	429a      	cmp	r2, r3
 800289a:	d1eb      	bne.n	8002874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <HAL_RCC_ClockConfig+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d20c      	bcs.n	80028c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b22      	ldr	r3, [pc, #136]	; (8002934 <HAL_RCC_ClockConfig+0x1b8>)
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b2:	4b20      	ldr	r3, [pc, #128]	; (8002934 <HAL_RCC_ClockConfig+0x1b8>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 030f 	and.w	r3, r3, #15
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d001      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e032      	b.n	800292a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d008      	beq.n	80028e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d0:	4b19      	ldr	r3, [pc, #100]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4916      	ldr	r1, [pc, #88]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80028de:	4313      	orrs	r3, r2
 80028e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d009      	beq.n	8002902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028ee:	4b12      	ldr	r3, [pc, #72]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	691b      	ldr	r3, [r3, #16]
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	490e      	ldr	r1, [pc, #56]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002902:	f000 f821 	bl	8002948 <HAL_RCC_GetSysClockFreq>
 8002906:	4601      	mov	r1, r0
 8002908:	4b0b      	ldr	r3, [pc, #44]	; (8002938 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	4a0a      	ldr	r2, [pc, #40]	; (800293c <HAL_RCC_ClockConfig+0x1c0>)
 8002914:	5cd3      	ldrb	r3, [r2, r3]
 8002916:	fa21 f303 	lsr.w	r3, r1, r3
 800291a:	4a09      	ldr	r2, [pc, #36]	; (8002940 <HAL_RCC_ClockConfig+0x1c4>)
 800291c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800291e:	4b09      	ldr	r3, [pc, #36]	; (8002944 <HAL_RCC_ClockConfig+0x1c8>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4618      	mov	r0, r3
 8002924:	f7fe f808 	bl	8000938 <HAL_InitTick>

  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	3710      	adds	r7, #16
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40023c00 	.word	0x40023c00
 8002938:	40023800 	.word	0x40023800
 800293c:	08006c6c 	.word	0x08006c6c
 8002940:	20000004 	.word	0x20000004
 8002944:	20000008 	.word	0x20000008

08002948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800294e:	2300      	movs	r3, #0
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	2300      	movs	r3, #0
 8002954:	60fb      	str	r3, [r7, #12]
 8002956:	2300      	movs	r3, #0
 8002958:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800295e:	4b63      	ldr	r3, [pc, #396]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 030c 	and.w	r3, r3, #12
 8002966:	2b04      	cmp	r3, #4
 8002968:	d007      	beq.n	800297a <HAL_RCC_GetSysClockFreq+0x32>
 800296a:	2b08      	cmp	r3, #8
 800296c:	d008      	beq.n	8002980 <HAL_RCC_GetSysClockFreq+0x38>
 800296e:	2b00      	cmp	r3, #0
 8002970:	f040 80b4 	bne.w	8002adc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b5e      	ldr	r3, [pc, #376]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002976:	60bb      	str	r3, [r7, #8]
       break;
 8002978:	e0b3      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800297a:	4b5e      	ldr	r3, [pc, #376]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800297c:	60bb      	str	r3, [r7, #8]
      break;
 800297e:	e0b0      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002980:	4b5a      	ldr	r3, [pc, #360]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800298a:	4b58      	ldr	r3, [pc, #352]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d04a      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002996:	4b55      	ldr	r3, [pc, #340]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	f04f 0400 	mov.w	r4, #0
 80029a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	ea03 0501 	and.w	r5, r3, r1
 80029ac:	ea04 0602 	and.w	r6, r4, r2
 80029b0:	4629      	mov	r1, r5
 80029b2:	4632      	mov	r2, r6
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	f04f 0400 	mov.w	r4, #0
 80029bc:	0154      	lsls	r4, r2, #5
 80029be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80029c2:	014b      	lsls	r3, r1, #5
 80029c4:	4619      	mov	r1, r3
 80029c6:	4622      	mov	r2, r4
 80029c8:	1b49      	subs	r1, r1, r5
 80029ca:	eb62 0206 	sbc.w	r2, r2, r6
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	f04f 0400 	mov.w	r4, #0
 80029d6:	0194      	lsls	r4, r2, #6
 80029d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80029dc:	018b      	lsls	r3, r1, #6
 80029de:	1a5b      	subs	r3, r3, r1
 80029e0:	eb64 0402 	sbc.w	r4, r4, r2
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	00e2      	lsls	r2, r4, #3
 80029ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80029f2:	00d9      	lsls	r1, r3, #3
 80029f4:	460b      	mov	r3, r1
 80029f6:	4614      	mov	r4, r2
 80029f8:	195b      	adds	r3, r3, r5
 80029fa:	eb44 0406 	adc.w	r4, r4, r6
 80029fe:	f04f 0100 	mov.w	r1, #0
 8002a02:	f04f 0200 	mov.w	r2, #0
 8002a06:	0262      	lsls	r2, r4, #9
 8002a08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a0c:	0259      	lsls	r1, r3, #9
 8002a0e:	460b      	mov	r3, r1
 8002a10:	4614      	mov	r4, r2
 8002a12:	4618      	mov	r0, r3
 8002a14:	4621      	mov	r1, r4
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f04f 0400 	mov.w	r4, #0
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	4623      	mov	r3, r4
 8002a20:	f7fd fc3e 	bl	80002a0 <__aeabi_uldivmod>
 8002a24:	4603      	mov	r3, r0
 8002a26:	460c      	mov	r4, r1
 8002a28:	60fb      	str	r3, [r7, #12]
 8002a2a:	e049      	b.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2c:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	099b      	lsrs	r3, r3, #6
 8002a32:	f04f 0400 	mov.w	r4, #0
 8002a36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a3a:	f04f 0200 	mov.w	r2, #0
 8002a3e:	ea03 0501 	and.w	r5, r3, r1
 8002a42:	ea04 0602 	and.w	r6, r4, r2
 8002a46:	4629      	mov	r1, r5
 8002a48:	4632      	mov	r2, r6
 8002a4a:	f04f 0300 	mov.w	r3, #0
 8002a4e:	f04f 0400 	mov.w	r4, #0
 8002a52:	0154      	lsls	r4, r2, #5
 8002a54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a58:	014b      	lsls	r3, r1, #5
 8002a5a:	4619      	mov	r1, r3
 8002a5c:	4622      	mov	r2, r4
 8002a5e:	1b49      	subs	r1, r1, r5
 8002a60:	eb62 0206 	sbc.w	r2, r2, r6
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	f04f 0400 	mov.w	r4, #0
 8002a6c:	0194      	lsls	r4, r2, #6
 8002a6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a72:	018b      	lsls	r3, r1, #6
 8002a74:	1a5b      	subs	r3, r3, r1
 8002a76:	eb64 0402 	sbc.w	r4, r4, r2
 8002a7a:	f04f 0100 	mov.w	r1, #0
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	00e2      	lsls	r2, r4, #3
 8002a84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a88:	00d9      	lsls	r1, r3, #3
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	4614      	mov	r4, r2
 8002a8e:	195b      	adds	r3, r3, r5
 8002a90:	eb44 0406 	adc.w	r4, r4, r6
 8002a94:	f04f 0100 	mov.w	r1, #0
 8002a98:	f04f 0200 	mov.w	r2, #0
 8002a9c:	02a2      	lsls	r2, r4, #10
 8002a9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002aa2:	0299      	lsls	r1, r3, #10
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	4614      	mov	r4, r2
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	4621      	mov	r1, r4
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	f04f 0400 	mov.w	r4, #0
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	4623      	mov	r3, r4
 8002ab6:	f7fd fbf3 	bl	80002a0 <__aeabi_uldivmod>
 8002aba:	4603      	mov	r3, r0
 8002abc:	460c      	mov	r4, r1
 8002abe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ac0:	4b0a      	ldr	r3, [pc, #40]	; (8002aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	0c1b      	lsrs	r3, r3, #16
 8002ac6:	f003 0303 	and.w	r3, r3, #3
 8002aca:	3301      	adds	r3, #1
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ad0:	68fa      	ldr	r2, [r7, #12]
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	60bb      	str	r3, [r7, #8]
      break;
 8002ada:	e002      	b.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002ade:	60bb      	str	r3, [r7, #8]
      break;
 8002ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae2:	68bb      	ldr	r3, [r7, #8]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002aec:	40023800 	.word	0x40023800
 8002af0:	00f42400 	.word	0x00f42400
 8002af4:	007a1200 	.word	0x007a1200

08002af8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002afc:	4b03      	ldr	r3, [pc, #12]	; (8002b0c <HAL_RCC_GetHCLKFreq+0x14>)
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	20000004 	.word	0x20000004

08002b10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002b10:	b084      	sub	sp, #16
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	f107 001c 	add.w	r0, r7, #28
 8002b1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d122      	bne.n	8002b6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b40:	687a      	ldr	r2, [r7, #4]
 8002b42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002b50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d105      	bne.n	8002b62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f001 fac6 	bl	80040f4 <USB_CoreReset>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	e01a      	b.n	8002ba4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f001 faba 	bl	80040f4 <USB_CoreReset>
 8002b80:	4603      	mov	r3, r0
 8002b82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	639a      	str	r2, [r3, #56]	; 0x38
 8002b96:	e005      	b.n	8002ba4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d10b      	bne.n	8002bc2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f043 0206 	orr.w	r2, r3, #6
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f043 0220 	orr.w	r2, r3, #32
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002bc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002bce:	b004      	add	sp, #16
 8002bd0:	4770      	bx	lr
	...

08002bd4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b087      	sub	sp, #28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	60f8      	str	r0, [r7, #12]
 8002bdc:	60b9      	str	r1, [r7, #8]
 8002bde:	4613      	mov	r3, r2
 8002be0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002be2:	79fb      	ldrb	r3, [r7, #7]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d165      	bne.n	8002cb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4a41      	ldr	r2, [pc, #260]	; (8002cf0 <USB_SetTurnaroundTime+0x11c>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d906      	bls.n	8002bfe <USB_SetTurnaroundTime+0x2a>
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4a40      	ldr	r2, [pc, #256]	; (8002cf4 <USB_SetTurnaroundTime+0x120>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d802      	bhi.n	8002bfe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002bf8:	230f      	movs	r3, #15
 8002bfa:	617b      	str	r3, [r7, #20]
 8002bfc:	e062      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	4a3c      	ldr	r2, [pc, #240]	; (8002cf4 <USB_SetTurnaroundTime+0x120>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d906      	bls.n	8002c14 <USB_SetTurnaroundTime+0x40>
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	4a3b      	ldr	r2, [pc, #236]	; (8002cf8 <USB_SetTurnaroundTime+0x124>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d802      	bhi.n	8002c14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002c0e:	230e      	movs	r3, #14
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	e057      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4a38      	ldr	r2, [pc, #224]	; (8002cf8 <USB_SetTurnaroundTime+0x124>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d906      	bls.n	8002c2a <USB_SetTurnaroundTime+0x56>
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	4a37      	ldr	r2, [pc, #220]	; (8002cfc <USB_SetTurnaroundTime+0x128>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d802      	bhi.n	8002c2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002c24:	230d      	movs	r3, #13
 8002c26:	617b      	str	r3, [r7, #20]
 8002c28:	e04c      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	4a33      	ldr	r2, [pc, #204]	; (8002cfc <USB_SetTurnaroundTime+0x128>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d906      	bls.n	8002c40 <USB_SetTurnaroundTime+0x6c>
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <USB_SetTurnaroundTime+0x12c>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d802      	bhi.n	8002c40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002c3a:	230c      	movs	r3, #12
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	e041      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	4a2f      	ldr	r2, [pc, #188]	; (8002d00 <USB_SetTurnaroundTime+0x12c>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d906      	bls.n	8002c56 <USB_SetTurnaroundTime+0x82>
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	4a2e      	ldr	r2, [pc, #184]	; (8002d04 <USB_SetTurnaroundTime+0x130>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d802      	bhi.n	8002c56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002c50:	230b      	movs	r3, #11
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	e036      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	4a2a      	ldr	r2, [pc, #168]	; (8002d04 <USB_SetTurnaroundTime+0x130>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d906      	bls.n	8002c6c <USB_SetTurnaroundTime+0x98>
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	4a29      	ldr	r2, [pc, #164]	; (8002d08 <USB_SetTurnaroundTime+0x134>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d802      	bhi.n	8002c6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002c66:	230a      	movs	r3, #10
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	e02b      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	4a26      	ldr	r2, [pc, #152]	; (8002d08 <USB_SetTurnaroundTime+0x134>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d906      	bls.n	8002c82 <USB_SetTurnaroundTime+0xae>
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	4a25      	ldr	r2, [pc, #148]	; (8002d0c <USB_SetTurnaroundTime+0x138>)
 8002c78:	4293      	cmp	r3, r2
 8002c7a:	d802      	bhi.n	8002c82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002c7c:	2309      	movs	r3, #9
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e020      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	4a21      	ldr	r2, [pc, #132]	; (8002d0c <USB_SetTurnaroundTime+0x138>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d906      	bls.n	8002c98 <USB_SetTurnaroundTime+0xc4>
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	4a20      	ldr	r2, [pc, #128]	; (8002d10 <USB_SetTurnaroundTime+0x13c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d802      	bhi.n	8002c98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002c92:	2308      	movs	r3, #8
 8002c94:	617b      	str	r3, [r7, #20]
 8002c96:	e015      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	4a1d      	ldr	r2, [pc, #116]	; (8002d10 <USB_SetTurnaroundTime+0x13c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d906      	bls.n	8002cae <USB_SetTurnaroundTime+0xda>
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	4a1c      	ldr	r2, [pc, #112]	; (8002d14 <USB_SetTurnaroundTime+0x140>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d802      	bhi.n	8002cae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002ca8:	2307      	movs	r3, #7
 8002caa:	617b      	str	r3, [r7, #20]
 8002cac:	e00a      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002cae:	2306      	movs	r3, #6
 8002cb0:	617b      	str	r3, [r7, #20]
 8002cb2:	e007      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002cb4:	79fb      	ldrb	r3, [r7, #7]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d102      	bne.n	8002cc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002cba:	2309      	movs	r3, #9
 8002cbc:	617b      	str	r3, [r7, #20]
 8002cbe:	e001      	b.n	8002cc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002cc0:	2309      	movs	r3, #9
 8002cc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	029b      	lsls	r3, r3, #10
 8002cd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	371c      	adds	r7, #28
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	00d8acbf 	.word	0x00d8acbf
 8002cf4:	00e4e1bf 	.word	0x00e4e1bf
 8002cf8:	00f423ff 	.word	0x00f423ff
 8002cfc:	0106737f 	.word	0x0106737f
 8002d00:	011a499f 	.word	0x011a499f
 8002d04:	01312cff 	.word	0x01312cff
 8002d08:	014ca43f 	.word	0x014ca43f
 8002d0c:	016e35ff 	.word	0x016e35ff
 8002d10:	01a6ab1f 	.word	0x01a6ab1f
 8002d14:	01e847ff 	.word	0x01e847ff

08002d18 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f043 0201 	orr.w	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f023 0201 	bic.w	r2, r3, #1
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	460b      	mov	r3, r1
 8002d66:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d106      	bne.n	8002d88 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	60da      	str	r2, [r3, #12]
 8002d86:	e00b      	b.n	8002da0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8002d88:	78fb      	ldrb	r3, [r7, #3]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	60da      	str	r2, [r3, #12]
 8002d9a:	e001      	b.n	8002da0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e003      	b.n	8002da8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8002da0:	2032      	movs	r0, #50	; 0x32
 8002da2:	f7fd fe19 	bl	80009d8 <HAL_Delay>

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002db0:	b084      	sub	sp, #16
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002dbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
 8002dce:	e009      	b.n	8002de4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	3340      	adds	r3, #64	; 0x40
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4413      	add	r3, r2
 8002dda:	2200      	movs	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	3301      	adds	r3, #1
 8002de2:	613b      	str	r3, [r7, #16]
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	2b0e      	cmp	r3, #14
 8002de8:	d9f2      	bls.n	8002dd0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d11c      	bne.n	8002e2a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e20:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
 8002e28:	e00b      	b.n	8002e42 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e54:	4619      	mov	r1, r3
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	680b      	ldr	r3, [r1, #0]
 8002e60:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d10c      	bne.n	8002e82 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8002e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d104      	bne.n	8002e78 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8002e6e:	2100      	movs	r1, #0
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f949 	bl	8003108 <USB_SetDevSpeed>
 8002e76:	e008      	b.n	8002e8a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8002e78:	2101      	movs	r1, #1
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 f944 	bl	8003108 <USB_SetDevSpeed>
 8002e80:	e003      	b.n	8002e8a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002e82:	2103      	movs	r1, #3
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f93f 	bl	8003108 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002e8a:	2110      	movs	r1, #16
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f8f3 	bl	8003078 <USB_FlushTxFifo>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002e9c:	6878      	ldr	r0, [r7, #4]
 8002e9e:	f000 f911 	bl	80030c4 <USB_FlushRxFifo>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eca:	461a      	mov	r2, r3
 8002ecc:	2300      	movs	r3, #0
 8002ece:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	613b      	str	r3, [r7, #16]
 8002ed4:	e043      	b.n	8002f5e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002eec:	d118      	bne.n	8002f20 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f00:	461a      	mov	r2, r3
 8002f02:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f06:	6013      	str	r3, [r2, #0]
 8002f08:	e013      	b.n	8002f32 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f16:	461a      	mov	r2, r3
 8002f18:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e008      	b.n	8002f32 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2300      	movs	r3, #0
 8002f30:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2300      	movs	r3, #0
 8002f42:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f50:	461a      	mov	r2, r3
 8002f52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f56:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	613b      	str	r3, [r7, #16]
 8002f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d3b7      	bcc.n	8002ed6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	e043      	b.n	8002ff4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	015a      	lsls	r2, r3, #5
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	4413      	add	r3, r2
 8002f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f82:	d118      	bne.n	8002fb6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10a      	bne.n	8002fa0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	015a      	lsls	r2, r3, #5
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	4413      	add	r3, r2
 8002f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f96:	461a      	mov	r2, r3
 8002f98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002f9c:	6013      	str	r3, [r2, #0]
 8002f9e:	e013      	b.n	8002fc8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fac:	461a      	mov	r2, r3
 8002fae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	e008      	b.n	8002fc8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	015a      	lsls	r2, r3, #5
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002fec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	613b      	str	r3, [r7, #16]
 8002ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d3b7      	bcc.n	8002f6c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800300a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800300e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800301c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800301e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003020:	2b00      	cmp	r3, #0
 8003022:	d105      	bne.n	8003030 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	699b      	ldr	r3, [r3, #24]
 8003028:	f043 0210 	orr.w	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	699a      	ldr	r2, [r3, #24]
 8003034:	4b0f      	ldr	r3, [pc, #60]	; (8003074 <USB_DevInit+0x2c4>)
 8003036:	4313      	orrs	r3, r2
 8003038:	687a      	ldr	r2, [r7, #4]
 800303a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f043 0208 	orr.w	r2, r3, #8
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800304e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003050:	2b01      	cmp	r3, #1
 8003052:	d107      	bne.n	8003064 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	699b      	ldr	r3, [r3, #24]
 8003058:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800305c:	f043 0304 	orr.w	r3, r3, #4
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003064:	7dfb      	ldrb	r3, [r7, #23]
}
 8003066:	4618      	mov	r0, r3
 8003068:	3718      	adds	r7, #24
 800306a:	46bd      	mov	sp, r7
 800306c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003070:	b004      	add	sp, #16
 8003072:	4770      	bx	lr
 8003074:	803c3800 	.word	0x803c3800

08003078 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	019b      	lsls	r3, r3, #6
 800308a:	f043 0220 	orr.w	r2, r3, #32
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	3301      	adds	r3, #1
 8003096:	60fb      	str	r3, [r7, #12]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4a09      	ldr	r2, [pc, #36]	; (80030c0 <USB_FlushTxFifo+0x48>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e006      	b.n	80030b2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	691b      	ldr	r3, [r3, #16]
 80030a8:	f003 0320 	and.w	r3, r3, #32
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	d0f0      	beq.n	8003092 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3714      	adds	r7, #20
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	00030d40 	.word	0x00030d40

080030c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80030cc:	2300      	movs	r3, #0
 80030ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2210      	movs	r2, #16
 80030d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	3301      	adds	r3, #1
 80030da:	60fb      	str	r3, [r7, #12]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4a09      	ldr	r2, [pc, #36]	; (8003104 <USB_FlushRxFifo+0x40>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d901      	bls.n	80030e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e006      	b.n	80030f6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b10      	cmp	r3, #16
 80030f2:	d0f0      	beq.n	80030d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	3714      	adds	r7, #20
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr
 8003102:	bf00      	nop
 8003104:	00030d40 	.word	0x00030d40

08003108 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003108:	b480      	push	{r7}
 800310a:	b085      	sub	sp, #20
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
 8003110:	460b      	mov	r3, r1
 8003112:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	78fb      	ldrb	r3, [r7, #3]
 8003122:	68f9      	ldr	r1, [r7, #12]
 8003124:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003128:	4313      	orrs	r3, r2
 800312a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr

0800313a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800313a:	b480      	push	{r7}
 800313c:	b087      	sub	sp, #28
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f003 0306 	and.w	r3, r3, #6
 8003152:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d102      	bne.n	8003160 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800315a:	2300      	movs	r3, #0
 800315c:	75fb      	strb	r3, [r7, #23]
 800315e:	e00a      	b.n	8003176 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2b02      	cmp	r3, #2
 8003164:	d002      	beq.n	800316c <USB_GetDevSpeed+0x32>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b06      	cmp	r3, #6
 800316a:	d102      	bne.n	8003172 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800316c:	2302      	movs	r3, #2
 800316e:	75fb      	strb	r3, [r7, #23]
 8003170:	e001      	b.n	8003176 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003172:	230f      	movs	r3, #15
 8003174:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003176:	7dfb      	ldrb	r3, [r7, #23]
}
 8003178:	4618      	mov	r0, r3
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	785b      	ldrb	r3, [r3, #1]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d13a      	bne.n	8003216 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a6:	69da      	ldr	r2, [r3, #28]
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	f003 030f 	and.w	r3, r3, #15
 80031b0:	2101      	movs	r1, #1
 80031b2:	fa01 f303 	lsl.w	r3, r1, r3
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	68f9      	ldr	r1, [r7, #12]
 80031ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031be:	4313      	orrs	r3, r2
 80031c0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	015a      	lsls	r2, r3, #5
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	4413      	add	r3, r2
 80031ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d155      	bne.n	8003284 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	78db      	ldrb	r3, [r3, #3]
 80031f2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031f4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	059b      	lsls	r3, r3, #22
 80031fa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80031fc:	4313      	orrs	r3, r2
 80031fe:	68ba      	ldr	r2, [r7, #8]
 8003200:	0151      	lsls	r1, r2, #5
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	440a      	add	r2, r1
 8003206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800320a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800320e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003212:	6013      	str	r3, [r2, #0]
 8003214:	e036      	b.n	8003284 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	2101      	movs	r1, #1
 8003228:	fa01 f303 	lsl.w	r3, r1, r3
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	68f9      	ldr	r1, [r7, #12]
 8003230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003234:	4313      	orrs	r3, r2
 8003236:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d11a      	bne.n	8003284 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	015a      	lsls	r2, r3, #5
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	4413      	add	r3, r2
 8003256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	78db      	ldrb	r3, [r3, #3]
 8003268:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800326a:	430b      	orrs	r3, r1
 800326c:	4313      	orrs	r3, r2
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	0151      	lsls	r1, r2, #5
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	440a      	add	r2, r1
 8003276:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800327a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800327e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003282:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3714      	adds	r7, #20
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
	...

08003294 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	785b      	ldrb	r3, [r3, #1]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d161      	bne.n	8003374 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032c6:	d11f      	bne.n	8003308 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	015a      	lsls	r2, r3, #5
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4413      	add	r3, r2
 80032d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	0151      	lsls	r1, r2, #5
 80032da:	68fa      	ldr	r2, [r7, #12]
 80032dc:	440a      	add	r2, r1
 80032de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80032e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032e6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	015a      	lsls	r2, r3, #5
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	4413      	add	r3, r2
 80032f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68ba      	ldr	r2, [r7, #8]
 80032f8:	0151      	lsls	r1, r2, #5
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	440a      	add	r2, r1
 80032fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003302:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003306:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	f003 030f 	and.w	r3, r3, #15
 8003318:	2101      	movs	r1, #1
 800331a:	fa01 f303 	lsl.w	r3, r1, r3
 800331e:	b29b      	uxth	r3, r3
 8003320:	43db      	mvns	r3, r3
 8003322:	68f9      	ldr	r1, [r7, #12]
 8003324:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003328:	4013      	ands	r3, r2
 800332a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	2101      	movs	r1, #1
 800333e:	fa01 f303 	lsl.w	r3, r1, r3
 8003342:	b29b      	uxth	r3, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	68f9      	ldr	r1, [r7, #12]
 8003348:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800334c:	4013      	ands	r3, r2
 800334e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	4413      	add	r3, r2
 8003358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800335c:	681a      	ldr	r2, [r3, #0]
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	0159      	lsls	r1, r3, #5
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	440b      	add	r3, r1
 8003366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800336a:	4619      	mov	r1, r3
 800336c:	4b35      	ldr	r3, [pc, #212]	; (8003444 <USB_DeactivateEndpoint+0x1b0>)
 800336e:	4013      	ands	r3, r2
 8003370:	600b      	str	r3, [r1, #0]
 8003372:	e060      	b.n	8003436 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800338a:	d11f      	bne.n	80033cc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	015a      	lsls	r2, r3, #5
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4413      	add	r3, r2
 8003394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	0151      	lsls	r1, r2, #5
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	440a      	add	r2, r1
 80033a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033a6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80033aa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	015a      	lsls	r2, r3, #5
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4413      	add	r3, r2
 80033b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	0151      	lsls	r1, r2, #5
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	440a      	add	r2, r1
 80033c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80033c6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033ca:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	f003 030f 	and.w	r3, r3, #15
 80033dc:	2101      	movs	r1, #1
 80033de:	fa01 f303 	lsl.w	r3, r1, r3
 80033e2:	041b      	lsls	r3, r3, #16
 80033e4:	43db      	mvns	r3, r3
 80033e6:	68f9      	ldr	r1, [r7, #12]
 80033e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ec:	4013      	ands	r3, r2
 80033ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	f003 030f 	and.w	r3, r3, #15
 8003400:	2101      	movs	r1, #1
 8003402:	fa01 f303 	lsl.w	r3, r1, r3
 8003406:	041b      	lsls	r3, r3, #16
 8003408:	43db      	mvns	r3, r3
 800340a:	68f9      	ldr	r1, [r7, #12]
 800340c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003410:	4013      	ands	r3, r2
 8003412:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	0159      	lsls	r1, r3, #5
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	440b      	add	r3, r1
 800342a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342e:	4619      	mov	r1, r3
 8003430:	4b05      	ldr	r3, [pc, #20]	; (8003448 <USB_DeactivateEndpoint+0x1b4>)
 8003432:	4013      	ands	r3, r2
 8003434:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003436:	2300      	movs	r3, #0
}
 8003438:	4618      	mov	r0, r3
 800343a:	3714      	adds	r7, #20
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr
 8003444:	ec337800 	.word	0xec337800
 8003448:	eff37800 	.word	0xeff37800

0800344c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b08a      	sub	sp, #40	; 0x28
 8003450:	af02      	add	r7, sp, #8
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	4613      	mov	r3, r2
 8003458:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	781b      	ldrb	r3, [r3, #0]
 8003462:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	785b      	ldrb	r3, [r3, #1]
 8003468:	2b01      	cmp	r3, #1
 800346a:	f040 815c 	bne.w	8003726 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	695b      	ldr	r3, [r3, #20]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d132      	bne.n	80034dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	440a      	add	r2, r1
 800348c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003490:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003494:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003498:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800349a:	69bb      	ldr	r3, [r7, #24]
 800349c:	015a      	lsls	r2, r3, #5
 800349e:	69fb      	ldr	r3, [r7, #28]
 80034a0:	4413      	add	r3, r2
 80034a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	0151      	lsls	r1, r2, #5
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	440a      	add	r2, r1
 80034b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80034b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c6:	691b      	ldr	r3, [r3, #16]
 80034c8:	69ba      	ldr	r2, [r7, #24]
 80034ca:	0151      	lsls	r1, r2, #5
 80034cc:	69fa      	ldr	r2, [r7, #28]
 80034ce:	440a      	add	r2, r1
 80034d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d4:	0cdb      	lsrs	r3, r3, #19
 80034d6:	04db      	lsls	r3, r3, #19
 80034d8:	6113      	str	r3, [r2, #16]
 80034da:	e074      	b.n	80035c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80034dc:	69bb      	ldr	r3, [r7, #24]
 80034de:	015a      	lsls	r2, r3, #5
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	4413      	add	r3, r2
 80034e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	0151      	lsls	r1, r2, #5
 80034ee:	69fa      	ldr	r2, [r7, #28]
 80034f0:	440a      	add	r2, r1
 80034f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f6:	0cdb      	lsrs	r3, r3, #19
 80034f8:	04db      	lsls	r3, r3, #19
 80034fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80034fc:	69bb      	ldr	r3, [r7, #24]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	4413      	add	r3, r2
 8003504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	0151      	lsls	r1, r2, #5
 800350e:	69fa      	ldr	r2, [r7, #28]
 8003510:	440a      	add	r2, r1
 8003512:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003516:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800351a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800351e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	4413      	add	r3, r2
 8003528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800352c:	691a      	ldr	r2, [r3, #16]
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	6959      	ldr	r1, [r3, #20]
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	440b      	add	r3, r1
 8003538:	1e59      	subs	r1, r3, #1
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003542:	04d9      	lsls	r1, r3, #19
 8003544:	4b9d      	ldr	r3, [pc, #628]	; (80037bc <USB_EPStartXfer+0x370>)
 8003546:	400b      	ands	r3, r1
 8003548:	69b9      	ldr	r1, [r7, #24]
 800354a:	0148      	lsls	r0, r1, #5
 800354c:	69f9      	ldr	r1, [r7, #28]
 800354e:	4401      	add	r1, r0
 8003550:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003554:	4313      	orrs	r3, r2
 8003556:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	015a      	lsls	r2, r3, #5
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	4413      	add	r3, r2
 8003560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003564:	691a      	ldr	r2, [r3, #16]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800356e:	69b9      	ldr	r1, [r7, #24]
 8003570:	0148      	lsls	r0, r1, #5
 8003572:	69f9      	ldr	r1, [r7, #28]
 8003574:	4401      	add	r1, r0
 8003576:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800357a:	4313      	orrs	r3, r2
 800357c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	78db      	ldrb	r3, [r3, #3]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d11f      	bne.n	80035c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	4413      	add	r3, r2
 800358e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	0151      	lsls	r1, r2, #5
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	440a      	add	r2, r1
 800359c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80035a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	0151      	lsls	r1, r2, #5
 80035b8:	69fa      	ldr	r2, [r7, #28]
 80035ba:	440a      	add	r2, r1
 80035bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80035c6:	79fb      	ldrb	r3, [r7, #7]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d14b      	bne.n	8003664 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	691b      	ldr	r3, [r3, #16]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d009      	beq.n	80035e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80035d4:	69bb      	ldr	r3, [r7, #24]
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035e0:	461a      	mov	r2, r3
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	78db      	ldrb	r3, [r3, #3]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d128      	bne.n	8003642 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80035f0:	69fb      	ldr	r3, [r7, #28]
 80035f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d110      	bne.n	8003622 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003600:	69bb      	ldr	r3, [r7, #24]
 8003602:	015a      	lsls	r2, r3, #5
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	4413      	add	r3, r2
 8003608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	0151      	lsls	r1, r2, #5
 8003612:	69fa      	ldr	r2, [r7, #28]
 8003614:	440a      	add	r2, r1
 8003616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800361a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800361e:	6013      	str	r3, [r2, #0]
 8003620:	e00f      	b.n	8003642 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	015a      	lsls	r2, r3, #5
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	4413      	add	r3, r2
 800362a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	69ba      	ldr	r2, [r7, #24]
 8003632:	0151      	lsls	r1, r2, #5
 8003634:	69fa      	ldr	r2, [r7, #28]
 8003636:	440a      	add	r2, r1
 8003638:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800363c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003640:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	015a      	lsls	r2, r3, #5
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	4413      	add	r3, r2
 800364a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	0151      	lsls	r1, r2, #5
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	440a      	add	r2, r1
 8003658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800365c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003660:	6013      	str	r3, [r2, #0]
 8003662:	e12f      	b.n	80038c4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	0151      	lsls	r1, r2, #5
 8003676:	69fa      	ldr	r2, [r7, #28]
 8003678:	440a      	add	r2, r1
 800367a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800367e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003682:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	78db      	ldrb	r3, [r3, #3]
 8003688:	2b01      	cmp	r3, #1
 800368a:	d015      	beq.n	80036b8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	695b      	ldr	r3, [r3, #20]
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8117 	beq.w	80038c4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800369c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	781b      	ldrb	r3, [r3, #0]
 80036a2:	f003 030f 	and.w	r3, r3, #15
 80036a6:	2101      	movs	r1, #1
 80036a8:	fa01 f303 	lsl.w	r3, r1, r3
 80036ac:	69f9      	ldr	r1, [r7, #28]
 80036ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036b2:	4313      	orrs	r3, r2
 80036b4:	634b      	str	r3, [r1, #52]	; 0x34
 80036b6:	e105      	b.n	80038c4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d110      	bne.n	80036ea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	015a      	lsls	r2, r3, #5
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	4413      	add	r3, r2
 80036d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69ba      	ldr	r2, [r7, #24]
 80036d8:	0151      	lsls	r1, r2, #5
 80036da:	69fa      	ldr	r2, [r7, #28]
 80036dc:	440a      	add	r2, r1
 80036de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	e00f      	b.n	800370a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	015a      	lsls	r2, r3, #5
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	4413      	add	r3, r2
 80036f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	0151      	lsls	r1, r2, #5
 80036fc:	69fa      	ldr	r2, [r7, #28]
 80036fe:	440a      	add	r2, r1
 8003700:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	68d9      	ldr	r1, [r3, #12]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	781a      	ldrb	r2, [r3, #0]
 8003712:	68bb      	ldr	r3, [r7, #8]
 8003714:	695b      	ldr	r3, [r3, #20]
 8003716:	b298      	uxth	r0, r3
 8003718:	79fb      	ldrb	r3, [r7, #7]
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	4603      	mov	r3, r0
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 fa2b 	bl	8003b7a <USB_WritePacket>
 8003724:	e0ce      	b.n	80038c4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003726:	69bb      	ldr	r3, [r7, #24]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	69ba      	ldr	r2, [r7, #24]
 8003736:	0151      	lsls	r1, r2, #5
 8003738:	69fa      	ldr	r2, [r7, #28]
 800373a:	440a      	add	r2, r1
 800373c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003740:	0cdb      	lsrs	r3, r3, #19
 8003742:	04db      	lsls	r3, r3, #19
 8003744:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003752:	691b      	ldr	r3, [r3, #16]
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	0151      	lsls	r1, r2, #5
 8003758:	69fa      	ldr	r2, [r7, #28]
 800375a:	440a      	add	r2, r1
 800375c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003760:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003764:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003768:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d126      	bne.n	80037c0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	015a      	lsls	r2, r3, #5
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	4413      	add	r3, r2
 800377a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003788:	69b9      	ldr	r1, [r7, #24]
 800378a:	0148      	lsls	r0, r1, #5
 800378c:	69f9      	ldr	r1, [r7, #28]
 800378e:	4401      	add	r1, r0
 8003790:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003794:	4313      	orrs	r3, r2
 8003796:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	015a      	lsls	r2, r3, #5
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	4413      	add	r3, r2
 80037a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a4:	691b      	ldr	r3, [r3, #16]
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	0151      	lsls	r1, r2, #5
 80037aa:	69fa      	ldr	r2, [r7, #28]
 80037ac:	440a      	add	r2, r1
 80037ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80037b6:	6113      	str	r3, [r2, #16]
 80037b8:	e036      	b.n	8003828 <USB_EPStartXfer+0x3dc>
 80037ba:	bf00      	nop
 80037bc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	4413      	add	r3, r2
 80037ca:	1e5a      	subs	r2, r3, #1
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037d4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	015a      	lsls	r2, r3, #5
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	4413      	add	r3, r2
 80037de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037e2:	691a      	ldr	r2, [r3, #16]
 80037e4:	8afb      	ldrh	r3, [r7, #22]
 80037e6:	04d9      	lsls	r1, r3, #19
 80037e8:	4b39      	ldr	r3, [pc, #228]	; (80038d0 <USB_EPStartXfer+0x484>)
 80037ea:	400b      	ands	r3, r1
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	0148      	lsls	r0, r1, #5
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	4401      	add	r1, r0
 80037f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80037f8:	4313      	orrs	r3, r2
 80037fa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	691a      	ldr	r2, [r3, #16]
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	8af9      	ldrh	r1, [r7, #22]
 8003810:	fb01 f303 	mul.w	r3, r1, r3
 8003814:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003818:	69b9      	ldr	r1, [r7, #24]
 800381a:	0148      	lsls	r0, r1, #5
 800381c:	69f9      	ldr	r1, [r7, #28]
 800381e:	4401      	add	r1, r0
 8003820:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003824:	4313      	orrs	r3, r2
 8003826:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003828:	79fb      	ldrb	r3, [r7, #7]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d10d      	bne.n	800384a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	68db      	ldr	r3, [r3, #12]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	68d9      	ldr	r1, [r3, #12]
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	015a      	lsls	r2, r3, #5
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	4413      	add	r3, r2
 8003842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003846:	460a      	mov	r2, r1
 8003848:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	78db      	ldrb	r3, [r3, #3]
 800384e:	2b01      	cmp	r3, #1
 8003850:	d128      	bne.n	80038a4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d110      	bne.n	8003884 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003862:	69bb      	ldr	r3, [r7, #24]
 8003864:	015a      	lsls	r2, r3, #5
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	4413      	add	r3, r2
 800386a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	0151      	lsls	r1, r2, #5
 8003874:	69fa      	ldr	r2, [r7, #28]
 8003876:	440a      	add	r2, r1
 8003878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800387c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003880:	6013      	str	r3, [r2, #0]
 8003882:	e00f      	b.n	80038a4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	015a      	lsls	r2, r3, #5
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	4413      	add	r3, r2
 800388c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69ba      	ldr	r2, [r7, #24]
 8003894:	0151      	lsls	r1, r2, #5
 8003896:	69fa      	ldr	r2, [r7, #28]
 8003898:	440a      	add	r2, r1
 800389a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800389e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69ba      	ldr	r2, [r7, #24]
 80038b4:	0151      	lsls	r1, r2, #5
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	440a      	add	r2, r1
 80038ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80038c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	1ff80000 	.word	0x1ff80000

080038d4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80038d4:	b480      	push	{r7}
 80038d6:	b087      	sub	sp, #28
 80038d8:	af00      	add	r7, sp, #0
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	4613      	mov	r3, r2
 80038e0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	785b      	ldrb	r3, [r3, #1]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	f040 80cd 	bne.w	8003a90 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d132      	bne.n	8003964 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	015a      	lsls	r2, r3, #5
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	4413      	add	r3, r2
 8003906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	0151      	lsls	r1, r2, #5
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	440a      	add	r2, r1
 8003914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003918:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800391c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003920:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	015a      	lsls	r2, r3, #5
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	4413      	add	r3, r2
 800392a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392e:	691b      	ldr	r3, [r3, #16]
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	0151      	lsls	r1, r2, #5
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	440a      	add	r2, r1
 8003938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800393c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	4413      	add	r3, r2
 800394a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	0151      	lsls	r1, r2, #5
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	440a      	add	r2, r1
 8003958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800395c:	0cdb      	lsrs	r3, r3, #19
 800395e:	04db      	lsls	r3, r3, #19
 8003960:	6113      	str	r3, [r2, #16]
 8003962:	e04e      	b.n	8003a02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	015a      	lsls	r2, r3, #5
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4413      	add	r3, r2
 800396c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	0151      	lsls	r1, r2, #5
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	440a      	add	r2, r1
 800397a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800397e:	0cdb      	lsrs	r3, r3, #19
 8003980:	04db      	lsls	r3, r3, #19
 8003982:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	015a      	lsls	r2, r3, #5
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	4413      	add	r3, r2
 800398c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	0151      	lsls	r1, r2, #5
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	440a      	add	r2, r1
 800399a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800399e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039a2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039a6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	695a      	ldr	r2, [r3, #20]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d903      	bls.n	80039bc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	0151      	lsls	r1, r2, #5
 80039ce:	697a      	ldr	r2, [r7, #20]
 80039d0:	440a      	add	r2, r1
 80039d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	015a      	lsls	r2, r3, #5
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4413      	add	r3, r2
 80039e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e8:	691a      	ldr	r2, [r3, #16]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039f2:	6939      	ldr	r1, [r7, #16]
 80039f4:	0148      	lsls	r0, r1, #5
 80039f6:	6979      	ldr	r1, [r7, #20]
 80039f8:	4401      	add	r1, r0
 80039fa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80039fe:	4313      	orrs	r3, r2
 8003a00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d11e      	bne.n	8003a46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	691b      	ldr	r3, [r3, #16]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d009      	beq.n	8003a24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	015a      	lsls	r2, r3, #5
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	4413      	add	r3, r2
 8003a18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	0151      	lsls	r1, r2, #5
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	440a      	add	r2, r1
 8003a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a42:	6013      	str	r3, [r2, #0]
 8003a44:	e092      	b.n	8003b6c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	015a      	lsls	r2, r3, #5
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4413      	add	r3, r2
 8003a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	0151      	lsls	r1, r2, #5
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	440a      	add	r2, r1
 8003a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	695b      	ldr	r3, [r3, #20]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d07e      	beq.n	8003b6c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	f003 030f 	and.w	r3, r3, #15
 8003a7e:	2101      	movs	r1, #1
 8003a80:	fa01 f303 	lsl.w	r3, r1, r3
 8003a84:	6979      	ldr	r1, [r7, #20]
 8003a86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	634b      	str	r3, [r1, #52]	; 0x34
 8003a8e:	e06d      	b.n	8003b6c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	0151      	lsls	r1, r2, #5
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	440a      	add	r2, r1
 8003aa6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aaa:	0cdb      	lsrs	r3, r3, #19
 8003aac:	04db      	lsls	r3, r3, #19
 8003aae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	0151      	lsls	r1, r2, #5
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	440a      	add	r2, r1
 8003ac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003aca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ace:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ad2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	695b      	ldr	r3, [r3, #20]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	015a      	lsls	r2, r3, #5
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	4413      	add	r3, r2
 8003aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	0151      	lsls	r1, r2, #5
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	440a      	add	r2, r1
 8003afa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003afe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	015a      	lsls	r2, r3, #5
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	4413      	add	r3, r2
 8003b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b10:	691a      	ldr	r2, [r3, #16]
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b1a:	6939      	ldr	r1, [r7, #16]
 8003b1c:	0148      	lsls	r0, r1, #5
 8003b1e:	6979      	ldr	r1, [r7, #20]
 8003b20:	4401      	add	r1, r0
 8003b22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b26:	4313      	orrs	r3, r2
 8003b28:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003b2a:	79fb      	ldrb	r3, [r7, #7]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10d      	bne.n	8003b4c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d009      	beq.n	8003b4c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	68d9      	ldr	r1, [r3, #12]
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b48:	460a      	mov	r2, r1
 8003b4a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	0151      	lsls	r1, r2, #5
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	440a      	add	r2, r1
 8003b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003b6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	371c      	adds	r7, #28
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr

08003b7a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003b7a:	b480      	push	{r7}
 8003b7c:	b089      	sub	sp, #36	; 0x24
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	60b9      	str	r1, [r7, #8]
 8003b84:	4611      	mov	r1, r2
 8003b86:	461a      	mov	r2, r3
 8003b88:	460b      	mov	r3, r1
 8003b8a:	71fb      	strb	r3, [r7, #7]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8003b98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d11a      	bne.n	8003bd6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ba0:	88bb      	ldrh	r3, [r7, #4]
 8003ba2:	3303      	adds	r3, #3
 8003ba4:	089b      	lsrs	r3, r3, #2
 8003ba6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003ba8:	2300      	movs	r3, #0
 8003baa:	61bb      	str	r3, [r7, #24]
 8003bac:	e00f      	b.n	8003bce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003bae:	79fb      	ldrb	r3, [r7, #7]
 8003bb0:	031a      	lsls	r2, r3, #12
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	4413      	add	r3, r2
 8003bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003bba:	461a      	mov	r2, r3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	3304      	adds	r3, #4
 8003bc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	429a      	cmp	r2, r3
 8003bd4:	d3eb      	bcc.n	8003bae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3724      	adds	r7, #36	; 0x24
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b089      	sub	sp, #36	; 0x24
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8003bfa:	88fb      	ldrh	r3, [r7, #6]
 8003bfc:	3303      	adds	r3, #3
 8003bfe:	089b      	lsrs	r3, r3, #2
 8003c00:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8003c02:	2300      	movs	r3, #0
 8003c04:	61bb      	str	r3, [r7, #24]
 8003c06:	e00b      	b.n	8003c20 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	601a      	str	r2, [r3, #0]
    pDest++;
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	3304      	adds	r3, #4
 8003c18:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	61bb      	str	r3, [r7, #24]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	d3ef      	bcc.n	8003c08 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8003c28:	69fb      	ldr	r3, [r7, #28]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr

08003c36 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b085      	sub	sp, #20
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
 8003c3e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d12c      	bne.n	8003cac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	015a      	lsls	r2, r3, #5
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4413      	add	r3, r2
 8003c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	db12      	blt.n	8003c8a <USB_EPSetStall+0x54>
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00f      	beq.n	8003c8a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	015a      	lsls	r2, r3, #5
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	4413      	add	r3, r2
 8003c72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	0151      	lsls	r1, r2, #5
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	440a      	add	r2, r1
 8003c80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003c88:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	68fa      	ldr	r2, [r7, #12]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ca4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e02b      	b.n	8003d04 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	db12      	blt.n	8003ce4 <USB_EPSetStall+0xae>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d00f      	beq.n	8003ce4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	0151      	lsls	r1, r2, #5
 8003cd6:	68fa      	ldr	r2, [r7, #12]
 8003cd8:	440a      	add	r2, r1
 8003cda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ce2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	015a      	lsls	r2, r3, #5
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4413      	add	r3, r2
 8003cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	0151      	lsls	r1, r2, #5
 8003cf6:	68fa      	ldr	r2, [r7, #12]
 8003cf8:	440a      	add	r2, r1
 8003cfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cfe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003d02:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d04:	2300      	movs	r3, #0
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b085      	sub	sp, #20
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	6078      	str	r0, [r7, #4]
 8003d1a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	785b      	ldrb	r3, [r3, #1]
 8003d2a:	2b01      	cmp	r3, #1
 8003d2c:	d128      	bne.n	8003d80 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d48:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d4c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	78db      	ldrb	r3, [r3, #3]
 8003d52:	2b03      	cmp	r3, #3
 8003d54:	d003      	beq.n	8003d5e <USB_EPClearStall+0x4c>
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	78db      	ldrb	r3, [r3, #3]
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d138      	bne.n	8003dd0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	68ba      	ldr	r2, [r7, #8]
 8003d6e:	0151      	lsls	r1, r2, #5
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	440a      	add	r2, r1
 8003d74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	6013      	str	r3, [r2, #0]
 8003d7e:	e027      	b.n	8003dd0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68ba      	ldr	r2, [r7, #8]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	68fa      	ldr	r2, [r7, #12]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d9e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	78db      	ldrb	r3, [r3, #3]
 8003da4:	2b03      	cmp	r3, #3
 8003da6:	d003      	beq.n	8003db0 <USB_EPClearStall+0x9e>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	78db      	ldrb	r3, [r3, #3]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d10f      	bne.n	8003dd0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	0151      	lsls	r1, r2, #5
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8003dd0:	2300      	movs	r3, #0
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3714      	adds	r7, #20
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b085      	sub	sp, #20
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	460b      	mov	r3, r1
 8003de8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	68fa      	ldr	r2, [r7, #12]
 8003df8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e00:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e08:	681a      	ldr	r2, [r3, #0]
 8003e0a:	78fb      	ldrb	r3, [r7, #3]
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8003e12:	68f9      	ldr	r1, [r7, #12]
 8003e14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e44:	f023 0303 	bic.w	r3, r3, #3
 8003e48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e58:	f023 0302 	bic.w	r3, r3, #2
 8003e5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3714      	adds	r7, #20
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68fa      	ldr	r2, [r7, #12]
 8003e82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003e86:	f023 0303 	bic.w	r3, r3, #3
 8003e8a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e9a:	f043 0302 	orr.w	r3, r3, #2
 8003e9e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003ea0:	2300      	movs	r3, #0
}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8003eae:	b480      	push	{r7}
 8003eb0:	b085      	sub	sp, #20
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	699b      	ldr	r3, [r3, #24]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4013      	ands	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ee6:	699b      	ldr	r3, [r3, #24]
 8003ee8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	4013      	ands	r3, r2
 8003ef6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	0c1b      	lsrs	r3, r3, #16
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3714      	adds	r7, #20
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr

08003f08 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	68ba      	ldr	r2, [r7, #8]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	b29b      	uxth	r3, r3
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3714      	adds	r7, #20
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8003f4c:	78fb      	ldrb	r3, [r7, #3]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	695b      	ldr	r3, [r3, #20]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	4013      	ands	r3, r2
 8003f68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003f6a:	68bb      	ldr	r3, [r7, #8]
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b087      	sub	sp, #28
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	460b      	mov	r3, r1
 8003f82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8003f9c:	78fb      	ldrb	r3, [r7, #3]
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fa8:	01db      	lsls	r3, r3, #7
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	693a      	ldr	r2, [r7, #16]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	015a      	lsls	r2, r3, #5
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	4413      	add	r3, r2
 8003fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0301 	and.w	r3, r3, #1
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	370c      	adds	r7, #12
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fee:	4770      	bx	lr

08003ff0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800400a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800400e:	f023 0307 	bic.w	r3, r3, #7
 8004012:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004026:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3714      	adds	r7, #20
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr
	...

08004038 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004038:	b480      	push	{r7}
 800403a:	b087      	sub	sp, #28
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	460b      	mov	r3, r1
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	333c      	adds	r3, #60	; 0x3c
 800404e:	3304      	adds	r3, #4
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <USB_EP0_OutStart+0xb8>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d90a      	bls.n	8004072 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004068:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800406c:	d101      	bne.n	8004072 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e037      	b.n	80040e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004078:	461a      	mov	r2, r3
 800407a:	2300      	movs	r3, #0
 800407c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800408c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004090:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a0:	f043 0318 	orr.w	r3, r3, #24
 80040a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80040b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80040ba:	7afb      	ldrb	r3, [r7, #11]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d10f      	bne.n	80040e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c6:	461a      	mov	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80040de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	371c      	adds	r7, #28
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop
 80040f0:	4f54300a 	.word	0x4f54300a

080040f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	3301      	adds	r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4a13      	ldr	r2, [pc, #76]	; (8004158 <USB_CoreReset+0x64>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d901      	bls.n	8004112 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800410e:	2303      	movs	r3, #3
 8004110:	e01b      	b.n	800414a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	2b00      	cmp	r3, #0
 8004118:	daf2      	bge.n	8004100 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f043 0201 	orr.w	r2, r3, #1
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	3301      	adds	r3, #1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	4a09      	ldr	r2, [pc, #36]	; (8004158 <USB_CoreReset+0x64>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d901      	bls.n	800413c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e006      	b.n	800414a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	f003 0301 	and.w	r3, r3, #1
 8004144:	2b01      	cmp	r3, #1
 8004146:	d0f0      	beq.n	800412a <USB_CoreReset+0x36>

  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr
 8004156:	bf00      	nop
 8004158:	00030d40 	.word	0x00030d40

0800415c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b084      	sub	sp, #16
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004168:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800416c:	f002 f92c 	bl	80063c8 <malloc>
 8004170:	4603      	mov	r3, r0
 8004172:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004182:	2302      	movs	r3, #2
 8004184:	e066      	b.n	8004254 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	7c1b      	ldrb	r3, [r3, #16]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d119      	bne.n	80041ca <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004196:	f44f 7300 	mov.w	r3, #512	; 0x200
 800419a:	2202      	movs	r2, #2
 800419c:	2181      	movs	r1, #129	; 0x81
 800419e:	6878      	ldr	r0, [r7, #4]
 80041a0:	f001 ff99 	bl	80060d6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80041aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ae:	2202      	movs	r2, #2
 80041b0:	2101      	movs	r1, #1
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f001 ff8f 	bl	80060d6 <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2210      	movs	r2, #16
 80041c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80041c8:	e016      	b.n	80041f8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80041ca:	2340      	movs	r3, #64	; 0x40
 80041cc:	2202      	movs	r2, #2
 80041ce:	2181      	movs	r1, #129	; 0x81
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f001 ff80 	bl	80060d6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80041dc:	2340      	movs	r3, #64	; 0x40
 80041de:	2202      	movs	r2, #2
 80041e0:	2101      	movs	r1, #1
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f001 ff77 	bl	80060d6 <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2210      	movs	r2, #16
 80041f4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80041f8:	2308      	movs	r3, #8
 80041fa:	2203      	movs	r2, #3
 80041fc:	2182      	movs	r1, #130	; 0x82
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f001 ff69 	bl	80060d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	7c1b      	ldrb	r3, [r3, #16]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d109      	bne.n	8004242 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004234:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004238:	2101      	movs	r1, #1
 800423a:	6878      	ldr	r0, [r7, #4]
 800423c:	f002 f83a 	bl	80062b4 <USBD_LL_PrepareReceive>
 8004240:	e007      	b.n	8004252 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004248:	2340      	movs	r3, #64	; 0x40
 800424a:	2101      	movs	r1, #1
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f002 f831 	bl	80062b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004252:	2300      	movs	r3, #0
}
 8004254:	4618      	mov	r0, r3
 8004256:	3710      	adds	r7, #16
 8004258:	46bd      	mov	sp, r7
 800425a:	bd80      	pop	{r7, pc}

0800425c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b084      	sub	sp, #16
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	460b      	mov	r3, r1
 8004266:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8004268:	2300      	movs	r3, #0
 800426a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800426c:	2181      	movs	r1, #129	; 0x81
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f001 ff57 	bl	8006122 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2200      	movs	r2, #0
 8004278:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800427a:	2101      	movs	r1, #1
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	f001 ff50 	bl	8006122 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2200      	movs	r2, #0
 8004286:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800428a:	2182      	movs	r1, #130	; 0x82
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f001 ff48 	bl	8006122 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2200      	movs	r2, #0
 800429e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00e      	beq.n	80042ca <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042bc:	4618      	mov	r0, r3
 80042be:	f002 f88b 	bl	80063d8 <free>
    pdev->pClassData = NULL;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 80042ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80042cc:	4618      	mov	r0, r3
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80042e4:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80042ee:	2300      	movs	r3, #0
 80042f0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03a      	beq.n	8004374 <USBD_CDC_Setup+0xa0>
 80042fe:	2b20      	cmp	r3, #32
 8004300:	f040 8097 	bne.w	8004432 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	88db      	ldrh	r3, [r3, #6]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d029      	beq.n	8004360 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	b25b      	sxtb	r3, r3
 8004312:	2b00      	cmp	r3, #0
 8004314:	da11      	bge.n	800433a <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	683a      	ldr	r2, [r7, #0]
 8004320:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8004322:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004324:	683a      	ldr	r2, [r7, #0]
 8004326:	88d2      	ldrh	r2, [r2, #6]
 8004328:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 800432a:	6939      	ldr	r1, [r7, #16]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	88db      	ldrh	r3, [r3, #6]
 8004330:	461a      	mov	r2, r3
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f001 fa9d 	bl	8005872 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8004338:	e082      	b.n	8004440 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	785a      	ldrb	r2, [r3, #1]
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	88db      	ldrh	r3, [r3, #6]
 8004348:	b2da      	uxtb	r2, r3
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004350:	6939      	ldr	r1, [r7, #16]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	88db      	ldrh	r3, [r3, #6]
 8004356:	461a      	mov	r2, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f001 fab6 	bl	80058ca <USBD_CtlPrepareRx>
    break;
 800435e:	e06f      	b.n	8004440 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	683a      	ldr	r2, [r7, #0]
 800436a:	7850      	ldrb	r0, [r2, #1]
 800436c:	2200      	movs	r2, #0
 800436e:	6839      	ldr	r1, [r7, #0]
 8004370:	4798      	blx	r3
    break;
 8004372:	e065      	b.n	8004440 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	2b0b      	cmp	r3, #11
 800437a:	d84f      	bhi.n	800441c <USBD_CDC_Setup+0x148>
 800437c:	a201      	add	r2, pc, #4	; (adr r2, 8004384 <USBD_CDC_Setup+0xb0>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	080043b5 	.word	0x080043b5
 8004388:	0800442b 	.word	0x0800442b
 800438c:	0800441d 	.word	0x0800441d
 8004390:	0800441d 	.word	0x0800441d
 8004394:	0800441d 	.word	0x0800441d
 8004398:	0800441d 	.word	0x0800441d
 800439c:	0800441d 	.word	0x0800441d
 80043a0:	0800441d 	.word	0x0800441d
 80043a4:	0800441d 	.word	0x0800441d
 80043a8:	0800441d 	.word	0x0800441d
 80043ac:	080043dd 	.word	0x080043dd
 80043b0:	08004405 	.word	0x08004405
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d107      	bne.n	80043ce <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80043be:	f107 030c 	add.w	r3, r7, #12
 80043c2:	2202      	movs	r2, #2
 80043c4:	4619      	mov	r1, r3
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f001 fa53 	bl	8005872 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80043cc:	e030      	b.n	8004430 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80043ce:	6839      	ldr	r1, [r7, #0]
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f001 f9dd 	bl	8005790 <USBD_CtlError>
        ret = USBD_FAIL;
 80043d6:	2303      	movs	r3, #3
 80043d8:	75fb      	strb	r3, [r7, #23]
      break;
 80043da:	e029      	b.n	8004430 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80043e2:	2b03      	cmp	r3, #3
 80043e4:	d107      	bne.n	80043f6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80043e6:	f107 030f 	add.w	r3, r7, #15
 80043ea:	2201      	movs	r2, #1
 80043ec:	4619      	mov	r1, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f001 fa3f 	bl	8005872 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80043f4:	e01c      	b.n	8004430 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80043f6:	6839      	ldr	r1, [r7, #0]
 80043f8:	6878      	ldr	r0, [r7, #4]
 80043fa:	f001 f9c9 	bl	8005790 <USBD_CtlError>
        ret = USBD_FAIL;
 80043fe:	2303      	movs	r3, #3
 8004400:	75fb      	strb	r3, [r7, #23]
      break;
 8004402:	e015      	b.n	8004430 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800440a:	2b03      	cmp	r3, #3
 800440c:	d00f      	beq.n	800442e <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 800440e:	6839      	ldr	r1, [r7, #0]
 8004410:	6878      	ldr	r0, [r7, #4]
 8004412:	f001 f9bd 	bl	8005790 <USBD_CtlError>
        ret = USBD_FAIL;
 8004416:	2303      	movs	r3, #3
 8004418:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800441a:	e008      	b.n	800442e <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f001 f9b6 	bl	8005790 <USBD_CtlError>
      ret = USBD_FAIL;
 8004424:	2303      	movs	r3, #3
 8004426:	75fb      	strb	r3, [r7, #23]
      break;
 8004428:	e002      	b.n	8004430 <USBD_CDC_Setup+0x15c>
      break;
 800442a:	bf00      	nop
 800442c:	e008      	b.n	8004440 <USBD_CDC_Setup+0x16c>
      break;
 800442e:	bf00      	nop
    }
    break;
 8004430:	e006      	b.n	8004440 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 8004432:	6839      	ldr	r1, [r7, #0]
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f001 f9ab 	bl	8005790 <USBD_CtlError>
    ret = USBD_FAIL;
 800443a:	2303      	movs	r3, #3
 800443c:	75fb      	strb	r3, [r7, #23]
    break;
 800443e:	bf00      	nop
  }

  return (uint8_t)ret;
 8004440:	7dfb      	ldrb	r3, [r7, #23]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop

0800444c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	460b      	mov	r3, r1
 8004456:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800445e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004466:	2b00      	cmp	r3, #0
 8004468:	d101      	bne.n	800446e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800446a:	2303      	movs	r3, #3
 800446c:	e049      	b.n	8004502 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004474:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004476:	78fa      	ldrb	r2, [r7, #3]
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	440b      	add	r3, r1
 8004484:	3318      	adds	r3, #24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d029      	beq.n	80044e0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800448c:	78fa      	ldrb	r2, [r7, #3]
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	4613      	mov	r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	4413      	add	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	3318      	adds	r3, #24
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	78f9      	ldrb	r1, [r7, #3]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	460b      	mov	r3, r1
 80044a4:	00db      	lsls	r3, r3, #3
 80044a6:	1a5b      	subs	r3, r3, r1
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4403      	add	r3, r0
 80044ac:	3344      	adds	r3, #68	; 0x44
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80044b4:	fb03 f301 	mul.w	r3, r3, r1
 80044b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d110      	bne.n	80044e0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	6879      	ldr	r1, [r7, #4]
 80044c2:	4613      	mov	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	440b      	add	r3, r1
 80044cc:	3318      	adds	r3, #24
 80044ce:	2200      	movs	r2, #0
 80044d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80044d2:	78f9      	ldrb	r1, [r7, #3]
 80044d4:	2300      	movs	r3, #0
 80044d6:	2200      	movs	r2, #0
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f001 feca 	bl	8006272 <USBD_LL_Transmit>
 80044de:	e00f      	b.n	8004500 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80044fc:	78fa      	ldrb	r2, [r7, #3]
 80044fe:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	3710      	adds	r7, #16
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}

0800450a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b084      	sub	sp, #16
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	460b      	mov	r3, r1
 8004514:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800451c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004528:	2303      	movs	r3, #3
 800452a:	e015      	b.n	8004558 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800452c:	78fb      	ldrb	r3, [r7, #3]
 800452e:	4619      	mov	r1, r3
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f001 fee0 	bl	80062f6 <USBD_LL_GetRxDataSize>
 8004536:	4602      	mov	r2, r0
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004552:	4611      	mov	r1, r2
 8004554:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800456e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d015      	beq.n	80045a6 <USBD_CDC_EP0_RxReady+0x46>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004580:	2bff      	cmp	r3, #255	; 0xff
 8004582:	d010      	beq.n	80045a6 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	68fa      	ldr	r2, [r7, #12]
 800458e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8004592:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800459a:	b292      	uxth	r2, r2
 800459c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	22ff      	movs	r2, #255	; 0xff
 80045a2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2243      	movs	r2, #67	; 0x43
 80045bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80045be:	4b03      	ldr	r3, [pc, #12]	; (80045cc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ca:	4770      	bx	lr
 80045cc:	20000098 	.word	0x20000098

080045d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2243      	movs	r2, #67	; 0x43
 80045dc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80045de:	4b03      	ldr	r3, [pc, #12]	; (80045ec <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	20000054 	.word	0x20000054

080045f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2243      	movs	r2, #67	; 0x43
 80045fc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80045fe:	4b03      	ldr	r3, [pc, #12]	; (800460c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8004600:	4618      	mov	r0, r3
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	200000dc 	.word	0x200000dc

08004610 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	220a      	movs	r2, #10
 800461c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800461e:	4b03      	ldr	r3, [pc, #12]	; (800462c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004620:	4618      	mov	r0, r3
 8004622:	370c      	adds	r7, #12
 8004624:	46bd      	mov	sp, r7
 8004626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462a:	4770      	bx	lr
 800462c:	20000010 	.word	0x20000010

08004630 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004630:	b480      	push	{r7}
 8004632:	b083      	sub	sp, #12
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d101      	bne.n	8004644 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004640:	2303      	movs	r3, #3
 8004642:	e004      	b.n	800464e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	370c      	adds	r7, #12
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr

0800465a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800465a:	b480      	push	{r7}
 800465c:	b087      	sub	sp, #28
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800466c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	371c      	adds	r7, #28
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800468c:	b480      	push	{r7}
 800468e:	b085      	sub	sp, #20
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800469c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80046c4:	2301      	movs	r3, #1
 80046c6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e01a      	b.n	800470c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d114      	bne.n	800470a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80046fe:	2181      	movs	r1, #129	; 0x81
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f001 fdb6 	bl	8006272 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800470a:	7bfb      	ldrb	r3, [r7, #15]
}
 800470c:	4618      	mov	r0, r3
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004722:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800472a:	2b00      	cmp	r3, #0
 800472c:	d101      	bne.n	8004732 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800472e:	2303      	movs	r3, #3
 8004730:	e016      	b.n	8004760 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	7c1b      	ldrb	r3, [r3, #16]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d109      	bne.n	800474e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004740:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004744:	2101      	movs	r1, #1
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f001 fdb4 	bl	80062b4 <USBD_LL_PrepareReceive>
 800474c:	e007      	b.n	800475e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004754:	2340      	movs	r3, #64	; 0x40
 8004756:	2101      	movs	r1, #1
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f001 fdab 	bl	80062b4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	4613      	mov	r3, r2
 8004774:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d101      	bne.n	8004780 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800477c:	2303      	movs	r3, #3
 800477e:	e025      	b.n	80047cc <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d003      	beq.n	8004792 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8004798:	2b00      	cmp	r3, #0
 800479a:	d003      	beq.n	80047a4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	68ba      	ldr	r2, [r7, #8]
 80047ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	79fa      	ldrb	r2, [r7, #7]
 80047be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f001 fc21 	bl	8006008 <USBD_LL_Init>
 80047c6:	4603      	mov	r3, r0
 80047c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80047ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80047de:	2300      	movs	r3, #0
 80047e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e010      	b.n	800480e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	683a      	ldr	r2, [r7, #0]
 80047f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	f107 020e 	add.w	r2, r7, #14
 8004800:	4610      	mov	r0, r2
 8004802:	4798      	blx	r3
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b082      	sub	sp, #8
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f001 fc3e 	bl	80060a0 <USBD_LL_Start>
 8004824:	4603      	mov	r3, r0
}
 8004826:	4618      	mov	r0, r3
 8004828:	3708      	adds	r7, #8
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800482e:	b480      	push	{r7}
 8004830:	b083      	sub	sp, #12
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	460b      	mov	r3, r1
 800484e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8004850:	2303      	movs	r3, #3
 8004852:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	4611      	mov	r1, r2
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	4798      	blx	r3
 800486e:	4603      	mov	r3, r0
 8004870:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8004872:	7bfb      	ldrb	r3, [r7, #15]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3710      	adds	r7, #16
 8004878:	46bd      	mov	sp, r7
 800487a:	bd80      	pop	{r7, pc}

0800487c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	b082      	sub	sp, #8
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	460b      	mov	r3, r1
 8004886:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d007      	beq.n	80048a2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	78fa      	ldrb	r2, [r7, #3]
 800489c:	4611      	mov	r1, r2
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	4798      	blx	r3
  }

  return USBD_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 ff2c 	bl	800571c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80048d2:	461a      	mov	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80048e0:	f003 031f 	and.w	r3, r3, #31
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d00e      	beq.n	8004906 <USBD_LL_SetupStage+0x5a>
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d302      	bcc.n	80048f2 <USBD_LL_SetupStage+0x46>
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d014      	beq.n	800491a <USBD_LL_SetupStage+0x6e>
 80048f0:	e01d      	b.n	800492e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80048f8:	4619      	mov	r1, r3
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f000 fa18 	bl	8004d30 <USBD_StdDevReq>
 8004900:	4603      	mov	r3, r0
 8004902:	73fb      	strb	r3, [r7, #15]
      break;
 8004904:	e020      	b.n	8004948 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800490c:	4619      	mov	r1, r3
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 fa7c 	bl	8004e0c <USBD_StdItfReq>
 8004914:	4603      	mov	r3, r0
 8004916:	73fb      	strb	r3, [r7, #15]
      break;
 8004918:	e016      	b.n	8004948 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004920:	4619      	mov	r1, r3
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f000 fab8 	bl	8004e98 <USBD_StdEPReq>
 8004928:	4603      	mov	r3, r0
 800492a:	73fb      	strb	r3, [r7, #15]
      break;
 800492c:	e00c      	b.n	8004948 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004934:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004938:	b2db      	uxtb	r3, r3
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f001 fc0f 	bl	8006160 <USBD_LL_StallEP>
 8004942:	4603      	mov	r3, r0
 8004944:	73fb      	strb	r3, [r7, #15]
      break;
 8004946:	bf00      	nop
  }

  return ret;
 8004948:	7bfb      	ldrb	r3, [r7, #15]
}
 800494a:	4618      	mov	r0, r3
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b086      	sub	sp, #24
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	460b      	mov	r3, r1
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004960:	7afb      	ldrb	r3, [r7, #11]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d137      	bne.n	80049d6 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800496c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004974:	2b03      	cmp	r3, #3
 8004976:	d14a      	bne.n	8004a0e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	429a      	cmp	r2, r3
 8004982:	d913      	bls.n	80049ac <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	1ad2      	subs	r2, r2, r3
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	4293      	cmp	r3, r2
 800499c:	bf28      	it	cs
 800499e:	4613      	movcs	r3, r2
 80049a0:	461a      	mov	r2, r3
 80049a2:	6879      	ldr	r1, [r7, #4]
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 ffad 	bl	8005904 <USBD_CtlContinueRx>
 80049aa:	e030      	b.n	8004a0e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00a      	beq.n	80049ce <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80049be:	2b03      	cmp	r3, #3
 80049c0:	d105      	bne.n	80049ce <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80049ce:	68f8      	ldr	r0, [r7, #12]
 80049d0:	f000 ffa9 	bl	8005926 <USBD_CtlSendStatus>
 80049d4:	e01b      	b.n	8004a0e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d013      	beq.n	8004a0a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80049e8:	2b03      	cmp	r3, #3
 80049ea:	d10e      	bne.n	8004a0a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	7afa      	ldrb	r2, [r7, #11]
 80049f6:	4611      	mov	r1, r2
 80049f8:	68f8      	ldr	r0, [r7, #12]
 80049fa:	4798      	blx	r3
 80049fc:	4603      	mov	r3, r0
 80049fe:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004a00:	7dfb      	ldrb	r3, [r7, #23]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
 8004a08:	e002      	b.n	8004a10 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e000      	b.n	8004a10 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3718      	adds	r7, #24
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	460b      	mov	r3, r1
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8004a26:	7afb      	ldrb	r3, [r7, #11]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d16a      	bne.n	8004b02 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d155      	bne.n	8004ae8 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	689a      	ldr	r2, [r3, #8]
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d914      	bls.n	8004a72 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	689a      	ldr	r2, [r3, #8]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	68db      	ldr	r3, [r3, #12]
 8004a50:	1ad2      	subs	r2, r2, r3
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6879      	ldr	r1, [r7, #4]
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f000 ff22 	bl	80058a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004a64:	2300      	movs	r3, #0
 8004a66:	2200      	movs	r2, #0
 8004a68:	2100      	movs	r1, #0
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f001 fc22 	bl	80062b4 <USBD_LL_PrepareReceive>
 8004a70:	e03a      	b.n	8004ae8 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	68da      	ldr	r2, [r3, #12]
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	429a      	cmp	r2, r3
 8004a7c:	d11c      	bne.n	8004ab8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	685a      	ldr	r2, [r3, #4]
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d316      	bcc.n	8004ab8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	685a      	ldr	r2, [r3, #4]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d20f      	bcs.n	8004ab8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f000 ff03 	bl	80058a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004aaa:	2300      	movs	r3, #0
 8004aac:	2200      	movs	r2, #0
 8004aae:	2100      	movs	r1, #0
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f001 fbff 	bl	80062b4 <USBD_LL_PrepareReceive>
 8004ab6:	e017      	b.n	8004ae8 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8004aca:	2b03      	cmp	r3, #3
 8004acc:	d105      	bne.n	8004ada <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ad4:	68db      	ldr	r3, [r3, #12]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004ada:	2180      	movs	r1, #128	; 0x80
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f001 fb3f 	bl	8006160 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004ae2:	68f8      	ldr	r0, [r7, #12]
 8004ae4:	f000 ff32 	bl	800594c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d123      	bne.n	8004b3a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff fe9b 	bl	800482e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2200      	movs	r2, #0
 8004afc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004b00:	e01b      	b.n	8004b3a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b08:	695b      	ldr	r3, [r3, #20]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d013      	beq.n	8004b36 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d10e      	bne.n	8004b36 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b1e:	695b      	ldr	r3, [r3, #20]
 8004b20:	7afa      	ldrb	r2, [r7, #11]
 8004b22:	4611      	mov	r1, r2
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	4798      	blx	r3
 8004b28:	4603      	mov	r3, r0
 8004b2a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8004b2c:	7dfb      	ldrb	r3, [r7, #23]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8004b32:	7dfb      	ldrb	r3, [r7, #23]
 8004b34:	e002      	b.n	8004b3c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e000      	b.n	8004b3c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d009      	beq.n	8004b88 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	687a      	ldr	r2, [r7, #4]
 8004b7e:	6852      	ldr	r2, [r2, #4]
 8004b80:	b2d2      	uxtb	r2, r2
 8004b82:	4611      	mov	r1, r2
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004b88:	2340      	movs	r3, #64	; 0x40
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	2100      	movs	r1, #0
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f001 faa1 	bl	80060d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2240      	movs	r2, #64	; 0x40
 8004ba0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004ba4:	2340      	movs	r3, #64	; 0x40
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	2180      	movs	r1, #128	; 0x80
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f001 fa93 	bl	80060d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2240      	movs	r2, #64	; 0x40
 8004bba:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3708      	adds	r7, #8
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b083      	sub	sp, #12
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	78fa      	ldrb	r2, [r7, #3]
 8004bd6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	370c      	adds	r7, #12
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004be6:	b480      	push	{r7}
 8004be8:	b083      	sub	sp, #12
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c1e:	2b04      	cmp	r3, #4
 8004c20:	d105      	bne.n	8004c2e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b082      	sub	sp, #8
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c4a:	2b03      	cmp	r3, #3
 8004c4c:	d10b      	bne.n	8004c66 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d005      	beq.n	8004c66 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	460b      	mov	r3, r1
 8004c7a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8004c8a:	b480      	push	{r7}
 8004c8c:	b083      	sub	sp, #12
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	460b      	mov	r3, r1
 8004c94:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	370c      	adds	r7, #12
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004cac:	2300      	movs	r3, #0
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	6852      	ldr	r2, [r2, #4]
 8004ce0:	b2d2      	uxtb	r2, r2
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	4798      	blx	r3
  }

  return USBD_OK;
 8004ce8:	2300      	movs	r3, #0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	3708      	adds	r7, #8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8004cf2:	b480      	push	{r7}
 8004cf4:	b087      	sub	sp, #28
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8004cfe:	697b      	ldr	r3, [r7, #20]
 8004d00:	781b      	ldrb	r3, [r3, #0]
 8004d02:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3301      	adds	r3, #1
 8004d08:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	781b      	ldrb	r3, [r3, #0]
 8004d0e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8004d10:	8a3b      	ldrh	r3, [r7, #16]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	b21a      	sxth	r2, r3
 8004d16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	b21b      	sxth	r3, r3
 8004d1e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8004d20:	89fb      	ldrh	r3, [r7, #14]
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
	...

08004d30 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d004      	beq.n	8004d54 <USBD_StdDevReq+0x24>
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d002      	beq.n	8004d54 <USBD_StdDevReq+0x24>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d00a      	beq.n	8004d68 <USBD_StdDevReq+0x38>
 8004d52:	e050      	b.n	8004df6 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004d5a:	689b      	ldr	r3, [r3, #8]
 8004d5c:	6839      	ldr	r1, [r7, #0]
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	4798      	blx	r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	73fb      	strb	r3, [r7, #15]
    break;
 8004d66:	e04b      	b.n	8004e00 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	785b      	ldrb	r3, [r3, #1]
 8004d6c:	2b09      	cmp	r3, #9
 8004d6e:	d83c      	bhi.n	8004dea <USBD_StdDevReq+0xba>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <USBD_StdDevReq+0x48>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004dcd 	.word	0x08004dcd
 8004d7c:	08004de1 	.word	0x08004de1
 8004d80:	08004deb 	.word	0x08004deb
 8004d84:	08004dd7 	.word	0x08004dd7
 8004d88:	08004deb 	.word	0x08004deb
 8004d8c:	08004dab 	.word	0x08004dab
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004deb 	.word	0x08004deb
 8004d98:	08004dc3 	.word	0x08004dc3
 8004d9c:	08004db5 	.word	0x08004db5
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8004da0:	6839      	ldr	r1, [r7, #0]
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f9ce 	bl	8005144 <USBD_GetDescriptor>
      break;
 8004da8:	e024      	b.n	8004df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8004daa:	6839      	ldr	r1, [r7, #0]
 8004dac:	6878      	ldr	r0, [r7, #4]
 8004dae:	f000 fb33 	bl	8005418 <USBD_SetAddress>
      break;
 8004db2:	e01f      	b.n	8004df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8004db4:	6839      	ldr	r1, [r7, #0]
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fb70 	bl	800549c <USBD_SetConfig>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc0:	e018      	b.n	8004df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8004dc2:	6839      	ldr	r1, [r7, #0]
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 fc0d 	bl	80055e4 <USBD_GetConfig>
      break;
 8004dca:	e013      	b.n	8004df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8004dcc:	6839      	ldr	r1, [r7, #0]
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f000 fc3c 	bl	800564c <USBD_GetStatus>
      break;
 8004dd4:	e00e      	b.n	8004df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8004dd6:	6839      	ldr	r1, [r7, #0]
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f000 fc6a 	bl	80056b2 <USBD_SetFeature>
      break;
 8004dde:	e009      	b.n	8004df4 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8004de0:	6839      	ldr	r1, [r7, #0]
 8004de2:	6878      	ldr	r0, [r7, #4]
 8004de4:	f000 fc79 	bl	80056da <USBD_ClrFeature>
      break;
 8004de8:	e004      	b.n	8004df4 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8004dea:	6839      	ldr	r1, [r7, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	f000 fccf 	bl	8005790 <USBD_CtlError>
      break;
 8004df2:	bf00      	nop
    }
    break;
 8004df4:	e004      	b.n	8004e00 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8004df6:	6839      	ldr	r1, [r7, #0]
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f000 fcc9 	bl	8005790 <USBD_CtlError>
    break;
 8004dfe:	bf00      	nop
  }

  return ret;
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop

08004e0c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e16:	2300      	movs	r3, #0
 8004e18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e22:	2b20      	cmp	r3, #32
 8004e24:	d003      	beq.n	8004e2e <USBD_StdItfReq+0x22>
 8004e26:	2b40      	cmp	r3, #64	; 0x40
 8004e28:	d001      	beq.n	8004e2e <USBD_StdItfReq+0x22>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d12a      	bne.n	8004e84 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e34:	3b01      	subs	r3, #1
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d81d      	bhi.n	8004e76 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	889b      	ldrh	r3, [r3, #4]
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d813      	bhi.n	8004e6c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e4a:	689b      	ldr	r3, [r3, #8]
 8004e4c:	6839      	ldr	r1, [r7, #0]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	4798      	blx	r3
 8004e52:	4603      	mov	r3, r0
 8004e54:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	88db      	ldrh	r3, [r3, #6]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d110      	bne.n	8004e80 <USBD_StdItfReq+0x74>
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d10d      	bne.n	8004e80 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 fd5e 	bl	8005926 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8004e6a:	e009      	b.n	8004e80 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fc8e 	bl	8005790 <USBD_CtlError>
      break;
 8004e74:	e004      	b.n	8004e80 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8004e76:	6839      	ldr	r1, [r7, #0]
 8004e78:	6878      	ldr	r0, [r7, #4]
 8004e7a:	f000 fc89 	bl	8005790 <USBD_CtlError>
      break;
 8004e7e:	e000      	b.n	8004e82 <USBD_StdItfReq+0x76>
      break;
 8004e80:	bf00      	nop
    }
    break;
 8004e82:	e004      	b.n	8004e8e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8004e84:	6839      	ldr	r1, [r7, #0]
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 fc82 	bl	8005790 <USBD_CtlError>
    break;
 8004e8c:	bf00      	nop
  }

  return ret;
 8004e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
 8004ea0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	889b      	ldrh	r3, [r3, #4]
 8004eaa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004eb4:	2b20      	cmp	r3, #32
 8004eb6:	d004      	beq.n	8004ec2 <USBD_StdEPReq+0x2a>
 8004eb8:	2b40      	cmp	r3, #64	; 0x40
 8004eba:	d002      	beq.n	8004ec2 <USBD_StdEPReq+0x2a>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <USBD_StdEPReq+0x3e>
 8004ec0:	e135      	b.n	800512e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	6839      	ldr	r1, [r7, #0]
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	4798      	blx	r3
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	73fb      	strb	r3, [r7, #15]
    break;
 8004ed4:	e130      	b.n	8005138 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	785b      	ldrb	r3, [r3, #1]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d03e      	beq.n	8004f5c <USBD_StdEPReq+0xc4>
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d002      	beq.n	8004ee8 <USBD_StdEPReq+0x50>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d077      	beq.n	8004fd6 <USBD_StdEPReq+0x13e>
 8004ee6:	e11c      	b.n	8005122 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004eee:	2b02      	cmp	r3, #2
 8004ef0:	d002      	beq.n	8004ef8 <USBD_StdEPReq+0x60>
 8004ef2:	2b03      	cmp	r3, #3
 8004ef4:	d015      	beq.n	8004f22 <USBD_StdEPReq+0x8a>
 8004ef6:	e02b      	b.n	8004f50 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004ef8:	7bbb      	ldrb	r3, [r7, #14]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00c      	beq.n	8004f18 <USBD_StdEPReq+0x80>
 8004efe:	7bbb      	ldrb	r3, [r7, #14]
 8004f00:	2b80      	cmp	r3, #128	; 0x80
 8004f02:	d009      	beq.n	8004f18 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f04:	7bbb      	ldrb	r3, [r7, #14]
 8004f06:	4619      	mov	r1, r3
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f001 f929 	bl	8006160 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f0e:	2180      	movs	r1, #128	; 0x80
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f001 f925 	bl	8006160 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004f16:	e020      	b.n	8004f5a <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8004f18:	6839      	ldr	r1, [r7, #0]
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 fc38 	bl	8005790 <USBD_CtlError>
        break;
 8004f20:	e01b      	b.n	8004f5a <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	885b      	ldrh	r3, [r3, #2]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d10e      	bne.n	8004f48 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8004f2a:	7bbb      	ldrb	r3, [r7, #14]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d00b      	beq.n	8004f48 <USBD_StdEPReq+0xb0>
 8004f30:	7bbb      	ldrb	r3, [r7, #14]
 8004f32:	2b80      	cmp	r3, #128	; 0x80
 8004f34:	d008      	beq.n	8004f48 <USBD_StdEPReq+0xb0>
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	88db      	ldrh	r3, [r3, #6]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d104      	bne.n	8004f48 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f3e:	7bbb      	ldrb	r3, [r7, #14]
 8004f40:	4619      	mov	r1, r3
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f001 f90c 	bl	8006160 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f000 fcec 	bl	8005926 <USBD_CtlSendStatus>

        break;
 8004f4e:	e004      	b.n	8004f5a <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fc1c 	bl	8005790 <USBD_CtlError>
        break;
 8004f58:	bf00      	nop
      }
      break;
 8004f5a:	e0e7      	b.n	800512c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f62:	2b02      	cmp	r3, #2
 8004f64:	d002      	beq.n	8004f6c <USBD_StdEPReq+0xd4>
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d015      	beq.n	8004f96 <USBD_StdEPReq+0xfe>
 8004f6a:	e02d      	b.n	8004fc8 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004f6c:	7bbb      	ldrb	r3, [r7, #14]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00c      	beq.n	8004f8c <USBD_StdEPReq+0xf4>
 8004f72:	7bbb      	ldrb	r3, [r7, #14]
 8004f74:	2b80      	cmp	r3, #128	; 0x80
 8004f76:	d009      	beq.n	8004f8c <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8004f78:	7bbb      	ldrb	r3, [r7, #14]
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 f8ef 	bl	8006160 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004f82:	2180      	movs	r1, #128	; 0x80
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f001 f8eb 	bl	8006160 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8004f8a:	e023      	b.n	8004fd4 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8004f8c:	6839      	ldr	r1, [r7, #0]
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 fbfe 	bl	8005790 <USBD_CtlError>
        break;
 8004f94:	e01e      	b.n	8004fd4 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	885b      	ldrh	r3, [r3, #2]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d119      	bne.n	8004fd2 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8004f9e:	7bbb      	ldrb	r3, [r7, #14]
 8004fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d004      	beq.n	8004fb2 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8004fa8:	7bbb      	ldrb	r3, [r7, #14]
 8004faa:	4619      	mov	r1, r3
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f001 f8f6 	bl	800619e <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f000 fcb7 	bl	8005926 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	6839      	ldr	r1, [r7, #0]
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	4798      	blx	r3
        }
        break;
 8004fc6:	e004      	b.n	8004fd2 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8004fc8:	6839      	ldr	r1, [r7, #0]
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 fbe0 	bl	8005790 <USBD_CtlError>
        break;
 8004fd0:	e000      	b.n	8004fd4 <USBD_StdEPReq+0x13c>
        break;
 8004fd2:	bf00      	nop
      }
      break;
 8004fd4:	e0aa      	b.n	800512c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d002      	beq.n	8004fe6 <USBD_StdEPReq+0x14e>
 8004fe0:	2b03      	cmp	r3, #3
 8004fe2:	d032      	beq.n	800504a <USBD_StdEPReq+0x1b2>
 8004fe4:	e097      	b.n	8005116 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8004fe6:	7bbb      	ldrb	r3, [r7, #14]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d007      	beq.n	8004ffc <USBD_StdEPReq+0x164>
 8004fec:	7bbb      	ldrb	r3, [r7, #14]
 8004fee:	2b80      	cmp	r3, #128	; 0x80
 8004ff0:	d004      	beq.n	8004ffc <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8004ff2:	6839      	ldr	r1, [r7, #0]
 8004ff4:	6878      	ldr	r0, [r7, #4]
 8004ff6:	f000 fbcb 	bl	8005790 <USBD_CtlError>
          break;
 8004ffa:	e091      	b.n	8005120 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8004ffc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005000:	2b00      	cmp	r3, #0
 8005002:	da0b      	bge.n	800501c <USBD_StdEPReq+0x184>
 8005004:	7bbb      	ldrb	r3, [r7, #14]
 8005006:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800500a:	4613      	mov	r3, r2
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	3310      	adds	r3, #16
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	4413      	add	r3, r2
 8005018:	3304      	adds	r3, #4
 800501a:	e00b      	b.n	8005034 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800501c:	7bbb      	ldrb	r3, [r7, #14]
 800501e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	3304      	adds	r3, #4
 8005034:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2200      	movs	r2, #0
 800503a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2202      	movs	r2, #2
 8005040:	4619      	mov	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 fc15 	bl	8005872 <USBD_CtlSendData>
        break;
 8005048:	e06a      	b.n	8005120 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800504a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800504e:	2b00      	cmp	r3, #0
 8005050:	da11      	bge.n	8005076 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005052:	7bbb      	ldrb	r3, [r7, #14]
 8005054:	f003 020f 	and.w	r2, r3, #15
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	4413      	add	r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	3324      	adds	r3, #36	; 0x24
 8005066:	881b      	ldrh	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d117      	bne.n	800509c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800506c:	6839      	ldr	r1, [r7, #0]
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fb8e 	bl	8005790 <USBD_CtlError>
            break;
 8005074:	e054      	b.n	8005120 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005076:	7bbb      	ldrb	r3, [r7, #14]
 8005078:	f003 020f 	and.w	r2, r3, #15
 800507c:	6879      	ldr	r1, [r7, #4]
 800507e:	4613      	mov	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	440b      	add	r3, r1
 8005088:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800508c:	881b      	ldrh	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d104      	bne.n	800509c <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8005092:	6839      	ldr	r1, [r7, #0]
 8005094:	6878      	ldr	r0, [r7, #4]
 8005096:	f000 fb7b 	bl	8005790 <USBD_CtlError>
            break;
 800509a:	e041      	b.n	8005120 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800509c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	da0b      	bge.n	80050bc <USBD_StdEPReq+0x224>
 80050a4:	7bbb      	ldrb	r3, [r7, #14]
 80050a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80050aa:	4613      	mov	r3, r2
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	4413      	add	r3, r2
 80050b0:	009b      	lsls	r3, r3, #2
 80050b2:	3310      	adds	r3, #16
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	4413      	add	r3, r2
 80050b8:	3304      	adds	r3, #4
 80050ba:	e00b      	b.n	80050d4 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80050bc:	7bbb      	ldrb	r3, [r7, #14]
 80050be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80050c2:	4613      	mov	r3, r2
 80050c4:	009b      	lsls	r3, r3, #2
 80050c6:	4413      	add	r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	4413      	add	r3, r2
 80050d2:	3304      	adds	r3, #4
 80050d4:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80050d6:	7bbb      	ldrb	r3, [r7, #14]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <USBD_StdEPReq+0x24a>
 80050dc:	7bbb      	ldrb	r3, [r7, #14]
 80050de:	2b80      	cmp	r3, #128	; 0x80
 80050e0:	d103      	bne.n	80050ea <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
 80050e8:	e00e      	b.n	8005108 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80050ea:	7bbb      	ldrb	r3, [r7, #14]
 80050ec:	4619      	mov	r1, r3
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f001 f874 	bl	80061dc <USBD_LL_IsStallEP>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	2201      	movs	r2, #1
 80050fe:	601a      	str	r2, [r3, #0]
 8005100:	e002      	b.n	8005108 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2200      	movs	r2, #0
 8005106:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2202      	movs	r2, #2
 800510c:	4619      	mov	r1, r3
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fbaf 	bl	8005872 <USBD_CtlSendData>
          break;
 8005114:	e004      	b.n	8005120 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8005116:	6839      	ldr	r1, [r7, #0]
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fb39 	bl	8005790 <USBD_CtlError>
        break;
 800511e:	bf00      	nop
      }
      break;
 8005120:	e004      	b.n	800512c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f000 fb33 	bl	8005790 <USBD_CtlError>
      break;
 800512a:	bf00      	nop
    }
    break;
 800512c:	e004      	b.n	8005138 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f000 fb2d 	bl	8005790 <USBD_CtlError>
    break;
 8005136:	bf00      	nop
  }

  return ret;
 8005138:	7bfb      	ldrb	r3, [r7, #15]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3710      	adds	r7, #16
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
	...

08005144 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800515a:	683b      	ldr	r3, [r7, #0]
 800515c:	885b      	ldrh	r3, [r3, #2]
 800515e:	0a1b      	lsrs	r3, r3, #8
 8005160:	b29b      	uxth	r3, r3
 8005162:	3b01      	subs	r3, #1
 8005164:	2b06      	cmp	r3, #6
 8005166:	f200 8128 	bhi.w	80053ba <USBD_GetDescriptor+0x276>
 800516a:	a201      	add	r2, pc, #4	; (adr r2, 8005170 <USBD_GetDescriptor+0x2c>)
 800516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005170:	0800518d 	.word	0x0800518d
 8005174:	080051a5 	.word	0x080051a5
 8005178:	080051e5 	.word	0x080051e5
 800517c:	080053bb 	.word	0x080053bb
 8005180:	080053bb 	.word	0x080053bb
 8005184:	0800535b 	.word	0x0800535b
 8005188:	08005387 	.word	0x08005387
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	687a      	ldr	r2, [r7, #4]
 8005196:	7c12      	ldrb	r2, [r2, #16]
 8005198:	f107 0108 	add.w	r1, r7, #8
 800519c:	4610      	mov	r0, r2
 800519e:	4798      	blx	r3
 80051a0:	60f8      	str	r0, [r7, #12]
    break;
 80051a2:	e112      	b.n	80053ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	7c1b      	ldrb	r3, [r3, #16]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d10d      	bne.n	80051c8 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051b4:	f107 0208 	add.w	r2, r7, #8
 80051b8:	4610      	mov	r0, r2
 80051ba:	4798      	blx	r3
 80051bc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	3301      	adds	r3, #1
 80051c2:	2202      	movs	r2, #2
 80051c4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80051c6:	e100      	b.n	80053ca <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	f107 0208 	add.w	r2, r7, #8
 80051d4:	4610      	mov	r0, r2
 80051d6:	4798      	blx	r3
 80051d8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3301      	adds	r3, #1
 80051de:	2202      	movs	r2, #2
 80051e0:	701a      	strb	r2, [r3, #0]
    break;
 80051e2:	e0f2      	b.n	80053ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	885b      	ldrh	r3, [r3, #2]
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	f200 80ac 	bhi.w	8005348 <USBD_GetDescriptor+0x204>
 80051f0:	a201      	add	r2, pc, #4	; (adr r2, 80051f8 <USBD_GetDescriptor+0xb4>)
 80051f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051f6:	bf00      	nop
 80051f8:	08005211 	.word	0x08005211
 80051fc:	08005245 	.word	0x08005245
 8005200:	08005279 	.word	0x08005279
 8005204:	080052ad 	.word	0x080052ad
 8005208:	080052e1 	.word	0x080052e1
 800520c:	08005315 	.word	0x08005315
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	687a      	ldr	r2, [r7, #4]
 8005226:	7c12      	ldrb	r2, [r2, #16]
 8005228:	f107 0108 	add.w	r1, r7, #8
 800522c:	4610      	mov	r0, r2
 800522e:	4798      	blx	r3
 8005230:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005232:	e091      	b.n	8005358 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 faaa 	bl	8005790 <USBD_CtlError>
        err++;
 800523c:	7afb      	ldrb	r3, [r7, #11]
 800523e:	3301      	adds	r3, #1
 8005240:	72fb      	strb	r3, [r7, #11]
      break;
 8005242:	e089      	b.n	8005358 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00b      	beq.n	8005268 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	7c12      	ldrb	r2, [r2, #16]
 800525c:	f107 0108 	add.w	r1, r7, #8
 8005260:	4610      	mov	r0, r2
 8005262:	4798      	blx	r3
 8005264:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005266:	e077      	b.n	8005358 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005268:	6839      	ldr	r1, [r7, #0]
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fa90 	bl	8005790 <USBD_CtlError>
        err++;
 8005270:	7afb      	ldrb	r3, [r7, #11]
 8005272:	3301      	adds	r3, #1
 8005274:	72fb      	strb	r3, [r7, #11]
      break;
 8005276:	e06f      	b.n	8005358 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00b      	beq.n	800529c <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	687a      	ldr	r2, [r7, #4]
 800528e:	7c12      	ldrb	r2, [r2, #16]
 8005290:	f107 0108 	add.w	r1, r7, #8
 8005294:	4610      	mov	r0, r2
 8005296:	4798      	blx	r3
 8005298:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800529a:	e05d      	b.n	8005358 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800529c:	6839      	ldr	r1, [r7, #0]
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fa76 	bl	8005790 <USBD_CtlError>
        err++;
 80052a4:	7afb      	ldrb	r3, [r7, #11]
 80052a6:	3301      	adds	r3, #1
 80052a8:	72fb      	strb	r3, [r7, #11]
      break;
 80052aa:	e055      	b.n	8005358 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	7c12      	ldrb	r2, [r2, #16]
 80052c4:	f107 0108 	add.w	r1, r7, #8
 80052c8:	4610      	mov	r0, r2
 80052ca:	4798      	blx	r3
 80052cc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80052ce:	e043      	b.n	8005358 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80052d0:	6839      	ldr	r1, [r7, #0]
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fa5c 	bl	8005790 <USBD_CtlError>
        err++;
 80052d8:	7afb      	ldrb	r3, [r7, #11]
 80052da:	3301      	adds	r3, #1
 80052dc:	72fb      	strb	r3, [r7, #11]
      break;
 80052de:	e03b      	b.n	8005358 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052e6:	695b      	ldr	r3, [r3, #20]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80052f2:	695b      	ldr	r3, [r3, #20]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	7c12      	ldrb	r2, [r2, #16]
 80052f8:	f107 0108 	add.w	r1, r7, #8
 80052fc:	4610      	mov	r0, r2
 80052fe:	4798      	blx	r3
 8005300:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005302:	e029      	b.n	8005358 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005304:	6839      	ldr	r1, [r7, #0]
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa42 	bl	8005790 <USBD_CtlError>
        err++;
 800530c:	7afb      	ldrb	r3, [r7, #11]
 800530e:	3301      	adds	r3, #1
 8005310:	72fb      	strb	r3, [r7, #11]
      break;
 8005312:	e021      	b.n	8005358 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800531a:	699b      	ldr	r3, [r3, #24]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00b      	beq.n	8005338 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	7c12      	ldrb	r2, [r2, #16]
 800532c:	f107 0108 	add.w	r1, r7, #8
 8005330:	4610      	mov	r0, r2
 8005332:	4798      	blx	r3
 8005334:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005336:	e00f      	b.n	8005358 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8005338:	6839      	ldr	r1, [r7, #0]
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fa28 	bl	8005790 <USBD_CtlError>
        err++;
 8005340:	7afb      	ldrb	r3, [r7, #11]
 8005342:	3301      	adds	r3, #1
 8005344:	72fb      	strb	r3, [r7, #11]
      break;
 8005346:	e007      	b.n	8005358 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 fa20 	bl	8005790 <USBD_CtlError>
      err++;
 8005350:	7afb      	ldrb	r3, [r7, #11]
 8005352:	3301      	adds	r3, #1
 8005354:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8005356:	bf00      	nop
    }
    break;
 8005358:	e037      	b.n	80053ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7c1b      	ldrb	r3, [r3, #16]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d109      	bne.n	8005376 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800536a:	f107 0208 	add.w	r2, r7, #8
 800536e:	4610      	mov	r0, r2
 8005370:	4798      	blx	r3
 8005372:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8005374:	e029      	b.n	80053ca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8005376:	6839      	ldr	r1, [r7, #0]
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 fa09 	bl	8005790 <USBD_CtlError>
      err++;
 800537e:	7afb      	ldrb	r3, [r7, #11]
 8005380:	3301      	adds	r3, #1
 8005382:	72fb      	strb	r3, [r7, #11]
    break;
 8005384:	e021      	b.n	80053ca <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	7c1b      	ldrb	r3, [r3, #16]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d10d      	bne.n	80053aa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005396:	f107 0208 	add.w	r2, r7, #8
 800539a:	4610      	mov	r0, r2
 800539c:	4798      	blx	r3
 800539e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3301      	adds	r3, #1
 80053a4:	2207      	movs	r2, #7
 80053a6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80053a8:	e00f      	b.n	80053ca <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80053aa:	6839      	ldr	r1, [r7, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f000 f9ef 	bl	8005790 <USBD_CtlError>
      err++;
 80053b2:	7afb      	ldrb	r3, [r7, #11]
 80053b4:	3301      	adds	r3, #1
 80053b6:	72fb      	strb	r3, [r7, #11]
    break;
 80053b8:	e007      	b.n	80053ca <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80053ba:	6839      	ldr	r1, [r7, #0]
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 f9e7 	bl	8005790 <USBD_CtlError>
    err++;
 80053c2:	7afb      	ldrb	r3, [r7, #11]
 80053c4:	3301      	adds	r3, #1
 80053c6:	72fb      	strb	r3, [r7, #11]
    break;
 80053c8:	bf00      	nop
  }

  if (err != 0U)
 80053ca:	7afb      	ldrb	r3, [r7, #11]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d11e      	bne.n	800540e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	88db      	ldrh	r3, [r3, #6]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d016      	beq.n	8005406 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80053d8:	893b      	ldrh	r3, [r7, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d00e      	beq.n	80053fc <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	88da      	ldrh	r2, [r3, #6]
 80053e2:	893b      	ldrh	r3, [r7, #8]
 80053e4:	4293      	cmp	r3, r2
 80053e6:	bf28      	it	cs
 80053e8:	4613      	movcs	r3, r2
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80053ee:	893b      	ldrh	r3, [r7, #8]
 80053f0:	461a      	mov	r2, r3
 80053f2:	68f9      	ldr	r1, [r7, #12]
 80053f4:	6878      	ldr	r0, [r7, #4]
 80053f6:	f000 fa3c 	bl	8005872 <USBD_CtlSendData>
 80053fa:	e009      	b.n	8005410 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 80053fc:	6839      	ldr	r1, [r7, #0]
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 f9c6 	bl	8005790 <USBD_CtlError>
 8005404:	e004      	b.n	8005410 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f000 fa8d 	bl	8005926 <USBD_CtlSendStatus>
 800540c:	e000      	b.n	8005410 <USBD_GetDescriptor+0x2cc>
    return;
 800540e:	bf00      	nop
    }
  }
}
 8005410:	3710      	adds	r7, #16
 8005412:	46bd      	mov	sp, r7
 8005414:	bd80      	pop	{r7, pc}
 8005416:	bf00      	nop

08005418 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	889b      	ldrh	r3, [r3, #4]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d130      	bne.n	800548c <USBD_SetAddress+0x74>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	88db      	ldrh	r3, [r3, #6]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d12c      	bne.n	800548c <USBD_SetAddress+0x74>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	885b      	ldrh	r3, [r3, #2]
 8005436:	2b7f      	cmp	r3, #127	; 0x7f
 8005438:	d828      	bhi.n	800548c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	885b      	ldrh	r3, [r3, #2]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005444:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800544c:	2b03      	cmp	r3, #3
 800544e:	d104      	bne.n	800545a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f99c 	bl	8005790 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005458:	e01c      	b.n	8005494 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	7bfa      	ldrb	r2, [r7, #15]
 800545e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fee4 	bl	8006234 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fa5a 	bl	8005926 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d004      	beq.n	8005482 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2202      	movs	r2, #2
 800547c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005480:	e008      	b.n	8005494 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800548a:	e003      	b.n	8005494 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800548c:	6839      	ldr	r1, [r7, #0]
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f000 f97e 	bl	8005790 <USBD_CtlError>
  }
}
 8005494:	bf00      	nop
 8005496:	3710      	adds	r7, #16
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	885b      	ldrh	r3, [r3, #2]
 80054ae:	b2da      	uxtb	r2, r3
 80054b0:	4b4b      	ldr	r3, [pc, #300]	; (80055e0 <USBD_SetConfig+0x144>)
 80054b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80054b4:	4b4a      	ldr	r3, [pc, #296]	; (80055e0 <USBD_SetConfig+0x144>)
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d905      	bls.n	80054c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80054bc:	6839      	ldr	r1, [r7, #0]
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f966 	bl	8005790 <USBD_CtlError>
    return USBD_FAIL;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e087      	b.n	80055d8 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d002      	beq.n	80054d8 <USBD_SetConfig+0x3c>
 80054d2:	2b03      	cmp	r3, #3
 80054d4:	d025      	beq.n	8005522 <USBD_SetConfig+0x86>
 80054d6:	e071      	b.n	80055bc <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80054d8:	4b41      	ldr	r3, [pc, #260]	; (80055e0 <USBD_SetConfig+0x144>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d01c      	beq.n	800551a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80054e0:	4b3f      	ldr	r3, [pc, #252]	; (80055e0 <USBD_SetConfig+0x144>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80054ea:	4b3d      	ldr	r3, [pc, #244]	; (80055e0 <USBD_SetConfig+0x144>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f7ff f9a7 	bl	8004844 <USBD_SetClassConfig>
 80054f6:	4603      	mov	r3, r0
 80054f8:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80054fa:	7bfb      	ldrb	r3, [r7, #15]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d004      	beq.n	800550a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8005500:	6839      	ldr	r1, [r7, #0]
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f944 	bl	8005790 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8005508:	e065      	b.n	80055d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fa0b 	bl	8005926 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2203      	movs	r2, #3
 8005514:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8005518:	e05d      	b.n	80055d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa03 	bl	8005926 <USBD_CtlSendStatus>
    break;
 8005520:	e059      	b.n	80055d6 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8005522:	4b2f      	ldr	r3, [pc, #188]	; (80055e0 <USBD_SetConfig+0x144>)
 8005524:	781b      	ldrb	r3, [r3, #0]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d112      	bne.n	8005550 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2202      	movs	r2, #2
 800552e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8005532:	4b2b      	ldr	r3, [pc, #172]	; (80055e0 <USBD_SetConfig+0x144>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800553c:	4b28      	ldr	r3, [pc, #160]	; (80055e0 <USBD_SetConfig+0x144>)
 800553e:	781b      	ldrb	r3, [r3, #0]
 8005540:	4619      	mov	r1, r3
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff f99a 	bl	800487c <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f000 f9ec 	bl	8005926 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800554e:	e042      	b.n	80055d6 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8005550:	4b23      	ldr	r3, [pc, #140]	; (80055e0 <USBD_SetConfig+0x144>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	461a      	mov	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	429a      	cmp	r2, r3
 800555c:	d02a      	beq.n	80055b4 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	4619      	mov	r1, r3
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f7ff f988 	bl	800487c <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800556c:	4b1c      	ldr	r3, [pc, #112]	; (80055e0 <USBD_SetConfig+0x144>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	461a      	mov	r2, r3
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8005576:	4b1a      	ldr	r3, [pc, #104]	; (80055e0 <USBD_SetConfig+0x144>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff f961 	bl	8004844 <USBD_SetClassConfig>
 8005582:	4603      	mov	r3, r0
 8005584:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8005586:	7bfb      	ldrb	r3, [r7, #15]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00f      	beq.n	80055ac <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800558c:	6839      	ldr	r1, [r7, #0]
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f8fe 	bl	8005790 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	4619      	mov	r1, r3
 800559c:	6878      	ldr	r0, [r7, #4]
 800559e:	f7ff f96d 	bl	800487c <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2202      	movs	r2, #2
 80055a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80055aa:	e014      	b.n	80055d6 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f000 f9ba 	bl	8005926 <USBD_CtlSendStatus>
    break;
 80055b2:	e010      	b.n	80055d6 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f9b6 	bl	8005926 <USBD_CtlSendStatus>
    break;
 80055ba:	e00c      	b.n	80055d6 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 f8e6 	bl	8005790 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80055c4:	4b06      	ldr	r3, [pc, #24]	; (80055e0 <USBD_SetConfig+0x144>)
 80055c6:	781b      	ldrb	r3, [r3, #0]
 80055c8:	4619      	mov	r1, r3
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff f956 	bl	800487c <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80055d0:	2303      	movs	r3, #3
 80055d2:	73fb      	strb	r3, [r7, #15]
    break;
 80055d4:	bf00      	nop
  }

  return ret;
 80055d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3710      	adds	r7, #16
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	20000208 	.word	0x20000208

080055e4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b082      	sub	sp, #8
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	88db      	ldrh	r3, [r3, #6]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d004      	beq.n	8005600 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f8c9 	bl	8005790 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80055fe:	e021      	b.n	8005644 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005606:	2b01      	cmp	r3, #1
 8005608:	db17      	blt.n	800563a <USBD_GetConfig+0x56>
 800560a:	2b02      	cmp	r3, #2
 800560c:	dd02      	ble.n	8005614 <USBD_GetConfig+0x30>
 800560e:	2b03      	cmp	r3, #3
 8005610:	d00b      	beq.n	800562a <USBD_GetConfig+0x46>
 8005612:	e012      	b.n	800563a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	3308      	adds	r3, #8
 800561e:	2201      	movs	r2, #1
 8005620:	4619      	mov	r1, r3
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f925 	bl	8005872 <USBD_CtlSendData>
      break;
 8005628:	e00c      	b.n	8005644 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3304      	adds	r3, #4
 800562e:	2201      	movs	r2, #1
 8005630:	4619      	mov	r1, r3
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f91d 	bl	8005872 <USBD_CtlSendData>
      break;
 8005638:	e004      	b.n	8005644 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800563a:	6839      	ldr	r1, [r7, #0]
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 f8a7 	bl	8005790 <USBD_CtlError>
      break;
 8005642:	bf00      	nop
}
 8005644:	bf00      	nop
 8005646:	3708      	adds	r7, #8
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}

0800564c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b082      	sub	sp, #8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800565c:	3b01      	subs	r3, #1
 800565e:	2b02      	cmp	r3, #2
 8005660:	d81e      	bhi.n	80056a0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	88db      	ldrh	r3, [r3, #6]
 8005666:	2b02      	cmp	r3, #2
 8005668:	d004      	beq.n	8005674 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800566a:	6839      	ldr	r1, [r7, #0]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f88f 	bl	8005790 <USBD_CtlError>
      break;
 8005672:	e01a      	b.n	80056aa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f043 0202 	orr.w	r2, r3, #2
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	330c      	adds	r3, #12
 8005694:	2202      	movs	r2, #2
 8005696:	4619      	mov	r1, r3
 8005698:	6878      	ldr	r0, [r7, #4]
 800569a:	f000 f8ea 	bl	8005872 <USBD_CtlSendData>
    break;
 800569e:	e004      	b.n	80056aa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 f874 	bl	8005790 <USBD_CtlError>
    break;
 80056a8:	bf00      	nop
  }
}
 80056aa:	bf00      	nop
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056b2:	b580      	push	{r7, lr}
 80056b4:	b082      	sub	sp, #8
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
 80056ba:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	885b      	ldrh	r3, [r3, #2]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d106      	bne.n	80056d2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80056cc:	6878      	ldr	r0, [r7, #4]
 80056ce:	f000 f92a 	bl	8005926 <USBD_CtlSendStatus>
  }
}
 80056d2:	bf00      	nop
 80056d4:	3708      	adds	r7, #8
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}

080056da <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80056da:	b580      	push	{r7, lr}
 80056dc:	b082      	sub	sp, #8
 80056de:	af00      	add	r7, sp, #0
 80056e0:	6078      	str	r0, [r7, #4]
 80056e2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ea:	3b01      	subs	r3, #1
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d80b      	bhi.n	8005708 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	885b      	ldrh	r3, [r3, #2]
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d10c      	bne.n	8005712 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f000 f910 	bl	8005926 <USBD_CtlSendStatus>
      }
      break;
 8005706:	e004      	b.n	8005712 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8005708:	6839      	ldr	r1, [r7, #0]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f840 	bl	8005790 <USBD_CtlError>
      break;
 8005710:	e000      	b.n	8005714 <USBD_ClrFeature+0x3a>
      break;
 8005712:	bf00      	nop
  }
}
 8005714:	bf00      	nop
 8005716:	3708      	adds	r7, #8
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	781a      	ldrb	r2, [r3, #0]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	781a      	ldrb	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005746:	68f8      	ldr	r0, [r7, #12]
 8005748:	f7ff fad3 	bl	8004cf2 <SWAPBYTE>
 800574c:	4603      	mov	r3, r0
 800574e:	461a      	mov	r2, r3
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	3301      	adds	r3, #1
 8005758:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3301      	adds	r3, #1
 800575e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005760:	68f8      	ldr	r0, [r7, #12]
 8005762:	f7ff fac6 	bl	8004cf2 <SWAPBYTE>
 8005766:	4603      	mov	r3, r0
 8005768:	461a      	mov	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3301      	adds	r3, #1
 8005772:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	3301      	adds	r3, #1
 8005778:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800577a:	68f8      	ldr	r0, [r7, #12]
 800577c:	f7ff fab9 	bl	8004cf2 <SWAPBYTE>
 8005780:	4603      	mov	r3, r0
 8005782:	461a      	mov	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	80da      	strh	r2, [r3, #6]
}
 8005788:	bf00      	nop
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b082      	sub	sp, #8
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 fcdf 	bl	8006160 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80057a2:	2100      	movs	r1, #0
 80057a4:	6878      	ldr	r0, [r7, #4]
 80057a6:	f000 fcdb 	bl	8006160 <USBD_LL_StallEP>
}
 80057aa:	bf00      	nop
 80057ac:	3708      	adds	r7, #8
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b086      	sub	sp, #24
 80057b6:	af00      	add	r7, sp, #0
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80057be:	2300      	movs	r3, #0
 80057c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d036      	beq.n	8005836 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80057cc:	6938      	ldr	r0, [r7, #16]
 80057ce:	f000 f836 	bl	800583e <USBD_GetLen>
 80057d2:	4603      	mov	r3, r0
 80057d4:	3301      	adds	r3, #1
 80057d6:	b29b      	uxth	r3, r3
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	b29a      	uxth	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80057e0:	7dfb      	ldrb	r3, [r7, #23]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	4413      	add	r3, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	7812      	ldrb	r2, [r2, #0]
 80057ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	3301      	adds	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	4413      	add	r3, r2
 80057f8:	2203      	movs	r2, #3
 80057fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
 80057fe:	3301      	adds	r3, #1
 8005800:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005802:	e013      	b.n	800582c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005804:	7dfb      	ldrb	r3, [r7, #23]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	4413      	add	r3, r2
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	7812      	ldrb	r2, [r2, #0]
 800580e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	3301      	adds	r3, #1
 8005814:	613b      	str	r3, [r7, #16]
    idx++;
 8005816:	7dfb      	ldrb	r3, [r7, #23]
 8005818:	3301      	adds	r3, #1
 800581a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800581c:	7dfb      	ldrb	r3, [r7, #23]
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4413      	add	r3, r2
 8005822:	2200      	movs	r2, #0
 8005824:	701a      	strb	r2, [r3, #0]
    idx++;
 8005826:	7dfb      	ldrb	r3, [r7, #23]
 8005828:	3301      	adds	r3, #1
 800582a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e7      	bne.n	8005804 <USBD_GetString+0x52>
 8005834:	e000      	b.n	8005838 <USBD_GetString+0x86>
    return;
 8005836:	bf00      	nop
  }
}
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800583e:	b480      	push	{r7}
 8005840:	b085      	sub	sp, #20
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005846:	2300      	movs	r3, #0
 8005848:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800584e:	e005      	b.n	800585c <USBD_GetLen+0x1e>
  {
    len++;
 8005850:	7bfb      	ldrb	r3, [r7, #15]
 8005852:	3301      	adds	r3, #1
 8005854:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	3301      	adds	r3, #1
 800585a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f5      	bne.n	8005850 <USBD_GetLen+0x12>
  }

  return len;
 8005864:	7bfb      	ldrb	r3, [r7, #15]
}
 8005866:	4618      	mov	r0, r3
 8005868:	3714      	adds	r7, #20
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr

08005872 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b084      	sub	sp, #16
 8005876:	af00      	add	r7, sp, #0
 8005878:	60f8      	str	r0, [r7, #12]
 800587a:	60b9      	str	r1, [r7, #8]
 800587c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2202      	movs	r2, #2
 8005882:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	2100      	movs	r1, #0
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f000 fcea 	bl	8006272 <USBD_LL_Transmit>

  return USBD_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68ba      	ldr	r2, [r7, #8]
 80058b8:	2100      	movs	r1, #0
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f000 fcd9 	bl	8006272 <USBD_LL_Transmit>

  return USBD_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3710      	adds	r7, #16
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2203      	movs	r2, #3
 80058da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	2100      	movs	r1, #0
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 fcdd 	bl	80062b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	2100      	movs	r1, #0
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 fccc 	bl	80062b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800591c:	2300      	movs	r3, #0
}
 800591e:	4618      	mov	r0, r3
 8005920:	3710      	adds	r7, #16
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}

08005926 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005926:	b580      	push	{r7, lr}
 8005928:	b082      	sub	sp, #8
 800592a:	af00      	add	r7, sp, #0
 800592c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2204      	movs	r2, #4
 8005932:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005936:	2300      	movs	r3, #0
 8005938:	2200      	movs	r2, #0
 800593a:	2100      	movs	r1, #0
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f000 fc98 	bl	8006272 <USBD_LL_Transmit>

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3708      	adds	r7, #8
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b082      	sub	sp, #8
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2205      	movs	r2, #5
 8005958:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800595c:	2300      	movs	r3, #0
 800595e:	2200      	movs	r2, #0
 8005960:	2100      	movs	r1, #0
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fca6 	bl	80062b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3708      	adds	r7, #8
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005978:	2200      	movs	r2, #0
 800597a:	4912      	ldr	r1, [pc, #72]	; (80059c4 <MX_USB_DEVICE_Init+0x50>)
 800597c:	4812      	ldr	r0, [pc, #72]	; (80059c8 <MX_USB_DEVICE_Init+0x54>)
 800597e:	f7fe fef3 	bl	8004768 <USBD_Init>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005988:	f7fa feda 	bl	8000740 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800598c:	490f      	ldr	r1, [pc, #60]	; (80059cc <MX_USB_DEVICE_Init+0x58>)
 800598e:	480e      	ldr	r0, [pc, #56]	; (80059c8 <MX_USB_DEVICE_Init+0x54>)
 8005990:	f7fe ff20 	bl	80047d4 <USBD_RegisterClass>
 8005994:	4603      	mov	r3, r0
 8005996:	2b00      	cmp	r3, #0
 8005998:	d001      	beq.n	800599e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800599a:	f7fa fed1 	bl	8000740 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800599e:	490c      	ldr	r1, [pc, #48]	; (80059d0 <MX_USB_DEVICE_Init+0x5c>)
 80059a0:	4809      	ldr	r0, [pc, #36]	; (80059c8 <MX_USB_DEVICE_Init+0x54>)
 80059a2:	f7fe fe45 	bl	8004630 <USBD_CDC_RegisterInterface>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d001      	beq.n	80059b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80059ac:	f7fa fec8 	bl	8000740 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80059b0:	4805      	ldr	r0, [pc, #20]	; (80059c8 <MX_USB_DEVICE_Init+0x54>)
 80059b2:	f7fe ff30 	bl	8004816 <USBD_Start>
 80059b6:	4603      	mov	r3, r0
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d001      	beq.n	80059c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80059bc:	f7fa fec0 	bl	8000740 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80059c0:	bf00      	nop
 80059c2:	bd80      	pop	{r7, pc}
 80059c4:	20000134 	.word	0x20000134
 80059c8:	2000054c 	.word	0x2000054c
 80059cc:	2000001c 	.word	0x2000001c
 80059d0:	20000120 	.word	0x20000120

080059d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80059d8:	2200      	movs	r2, #0
 80059da:	4905      	ldr	r1, [pc, #20]	; (80059f0 <CDC_Init_FS+0x1c>)
 80059dc:	4805      	ldr	r0, [pc, #20]	; (80059f4 <CDC_Init_FS+0x20>)
 80059de:	f7fe fe3c 	bl	800465a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80059e2:	4905      	ldr	r1, [pc, #20]	; (80059f8 <CDC_Init_FS+0x24>)
 80059e4:	4803      	ldr	r0, [pc, #12]	; (80059f4 <CDC_Init_FS+0x20>)
 80059e6:	f7fe fe51 	bl	800468c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80059ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	2000101c 	.word	0x2000101c
 80059f4:	2000054c 	.word	0x2000054c
 80059f8:	2000081c 	.word	0x2000081c

080059fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80059fc:	b480      	push	{r7}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8005a00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	6039      	str	r1, [r7, #0]
 8005a16:	71fb      	strb	r3, [r7, #7]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8005a1c:	79fb      	ldrb	r3, [r7, #7]
 8005a1e:	2b23      	cmp	r3, #35	; 0x23
 8005a20:	d84a      	bhi.n	8005ab8 <CDC_Control_FS+0xac>
 8005a22:	a201      	add	r2, pc, #4	; (adr r2, 8005a28 <CDC_Control_FS+0x1c>)
 8005a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a28:	08005ab9 	.word	0x08005ab9
 8005a2c:	08005ab9 	.word	0x08005ab9
 8005a30:	08005ab9 	.word	0x08005ab9
 8005a34:	08005ab9 	.word	0x08005ab9
 8005a38:	08005ab9 	.word	0x08005ab9
 8005a3c:	08005ab9 	.word	0x08005ab9
 8005a40:	08005ab9 	.word	0x08005ab9
 8005a44:	08005ab9 	.word	0x08005ab9
 8005a48:	08005ab9 	.word	0x08005ab9
 8005a4c:	08005ab9 	.word	0x08005ab9
 8005a50:	08005ab9 	.word	0x08005ab9
 8005a54:	08005ab9 	.word	0x08005ab9
 8005a58:	08005ab9 	.word	0x08005ab9
 8005a5c:	08005ab9 	.word	0x08005ab9
 8005a60:	08005ab9 	.word	0x08005ab9
 8005a64:	08005ab9 	.word	0x08005ab9
 8005a68:	08005ab9 	.word	0x08005ab9
 8005a6c:	08005ab9 	.word	0x08005ab9
 8005a70:	08005ab9 	.word	0x08005ab9
 8005a74:	08005ab9 	.word	0x08005ab9
 8005a78:	08005ab9 	.word	0x08005ab9
 8005a7c:	08005ab9 	.word	0x08005ab9
 8005a80:	08005ab9 	.word	0x08005ab9
 8005a84:	08005ab9 	.word	0x08005ab9
 8005a88:	08005ab9 	.word	0x08005ab9
 8005a8c:	08005ab9 	.word	0x08005ab9
 8005a90:	08005ab9 	.word	0x08005ab9
 8005a94:	08005ab9 	.word	0x08005ab9
 8005a98:	08005ab9 	.word	0x08005ab9
 8005a9c:	08005ab9 	.word	0x08005ab9
 8005aa0:	08005ab9 	.word	0x08005ab9
 8005aa4:	08005ab9 	.word	0x08005ab9
 8005aa8:	08005ab9 	.word	0x08005ab9
 8005aac:	08005ab9 	.word	0x08005ab9
 8005ab0:	08005ab9 	.word	0x08005ab9
 8005ab4:	08005ab9 	.word	0x08005ab9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8005ab8:	bf00      	nop
  }

  return (USBD_OK);
 8005aba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
 8005ad0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	4805      	ldr	r0, [pc, #20]	; (8005aec <CDC_Receive_FS+0x24>)
 8005ad6:	f7fe fdd9 	bl	800468c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005ada:	4804      	ldr	r0, [pc, #16]	; (8005aec <CDC_Receive_FS+0x24>)
 8005adc:	f7fe fe1a 	bl	8004714 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8005ae0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3708      	adds	r7, #8
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	bf00      	nop
 8005aec:	2000054c 	.word	0x2000054c

08005af0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8005afc:	2300      	movs	r3, #0
 8005afe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005b00:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <CDC_Transmit_FS+0x48>)
 8005b02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005b06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8005b08:	68bb      	ldr	r3, [r7, #8]
 8005b0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d001      	beq.n	8005b16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e00b      	b.n	8005b2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005b16:	887b      	ldrh	r3, [r7, #2]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4806      	ldr	r0, [pc, #24]	; (8005b38 <CDC_Transmit_FS+0x48>)
 8005b1e:	f7fe fd9c 	bl	800465a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <CDC_Transmit_FS+0x48>)
 8005b24:	f7fe fdc6 	bl	80046b4 <USBD_CDC_TransmitPacket>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8005b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3710      	adds	r7, #16
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	2000054c 	.word	0x2000054c

08005b3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	4613      	mov	r3, r2
 8005b48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8005b4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005b52:	4618      	mov	r0, r3
 8005b54:	371c      	adds	r7, #28
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
	...

08005b60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b083      	sub	sp, #12
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	6039      	str	r1, [r7, #0]
 8005b6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	2212      	movs	r2, #18
 8005b70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005b72:	4b03      	ldr	r3, [pc, #12]	; (8005b80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr
 8005b80:	20000150 	.word	0x20000150

08005b84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	6039      	str	r1, [r7, #0]
 8005b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2204      	movs	r2, #4
 8005b94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8005b96:	4b03      	ldr	r3, [pc, #12]	; (8005ba4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	370c      	adds	r7, #12
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr
 8005ba4:	20000164 	.word	0x20000164

08005ba8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	4603      	mov	r3, r0
 8005bb0:	6039      	str	r1, [r7, #0]
 8005bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005bb4:	79fb      	ldrb	r3, [r7, #7]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d105      	bne.n	8005bc6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	4907      	ldr	r1, [pc, #28]	; (8005bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8005bbe:	4808      	ldr	r0, [pc, #32]	; (8005be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005bc0:	f7ff fdf7 	bl	80057b2 <USBD_GetString>
 8005bc4:	e004      	b.n	8005bd0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	4904      	ldr	r1, [pc, #16]	; (8005bdc <USBD_FS_ProductStrDescriptor+0x34>)
 8005bca:	4805      	ldr	r0, [pc, #20]	; (8005be0 <USBD_FS_ProductStrDescriptor+0x38>)
 8005bcc:	f7ff fdf1 	bl	80057b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005bd0:	4b02      	ldr	r3, [pc, #8]	; (8005bdc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	2000181c 	.word	0x2000181c
 8005be0:	08006c24 	.word	0x08006c24

08005be4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	4603      	mov	r3, r0
 8005bec:	6039      	str	r1, [r7, #0]
 8005bee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005bf0:	683a      	ldr	r2, [r7, #0]
 8005bf2:	4904      	ldr	r1, [pc, #16]	; (8005c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8005bf4:	4804      	ldr	r0, [pc, #16]	; (8005c08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8005bf6:	f7ff fddc 	bl	80057b2 <USBD_GetString>
  return USBD_StrDesc;
 8005bfa:	4b02      	ldr	r3, [pc, #8]	; (8005c04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3708      	adds	r7, #8
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}
 8005c04:	2000181c 	.word	0x2000181c
 8005c08:	08006c3c 	.word	0x08006c3c

08005c0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	6039      	str	r1, [r7, #0]
 8005c16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	221a      	movs	r2, #26
 8005c1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8005c1e:	f000 f843 	bl	8005ca8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8005c22:	4b02      	ldr	r3, [pc, #8]	; (8005c2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	20000168 	.word	0x20000168

08005c30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	4603      	mov	r3, r0
 8005c38:	6039      	str	r1, [r7, #0]
 8005c3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8005c3c:	79fb      	ldrb	r3, [r7, #7]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d105      	bne.n	8005c4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	4907      	ldr	r1, [pc, #28]	; (8005c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c46:	4808      	ldr	r0, [pc, #32]	; (8005c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005c48:	f7ff fdb3 	bl	80057b2 <USBD_GetString>
 8005c4c:	e004      	b.n	8005c58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005c4e:	683a      	ldr	r2, [r7, #0]
 8005c50:	4904      	ldr	r1, [pc, #16]	; (8005c64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8005c52:	4805      	ldr	r0, [pc, #20]	; (8005c68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8005c54:	f7ff fdad 	bl	80057b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c58:	4b02      	ldr	r3, [pc, #8]	; (8005c64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	3708      	adds	r7, #8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	2000181c 	.word	0x2000181c
 8005c68:	08006c50 	.word	0x08006c50

08005c6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	4603      	mov	r3, r0
 8005c74:	6039      	str	r1, [r7, #0]
 8005c76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8005c78:	79fb      	ldrb	r3, [r7, #7]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d105      	bne.n	8005c8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c7e:	683a      	ldr	r2, [r7, #0]
 8005c80:	4907      	ldr	r1, [pc, #28]	; (8005ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005c82:	4808      	ldr	r0, [pc, #32]	; (8005ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005c84:	f7ff fd95 	bl	80057b2 <USBD_GetString>
 8005c88:	e004      	b.n	8005c94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	4904      	ldr	r1, [pc, #16]	; (8005ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8005c8e:	4805      	ldr	r0, [pc, #20]	; (8005ca4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8005c90:	f7ff fd8f 	bl	80057b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8005c94:	4b02      	ldr	r3, [pc, #8]	; (8005ca0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8005c96:	4618      	mov	r0, r3
 8005c98:	3708      	adds	r7, #8
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
 8005c9e:	bf00      	nop
 8005ca0:	2000181c 	.word	0x2000181c
 8005ca4:	08006c5c 	.word	0x08006c5c

08005ca8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005cae:	4b0f      	ldr	r3, [pc, #60]	; (8005cec <Get_SerialNum+0x44>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005cb4:	4b0e      	ldr	r3, [pc, #56]	; (8005cf0 <Get_SerialNum+0x48>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005cba:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <Get_SerialNum+0x4c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8005cc0:	68fa      	ldr	r2, [r7, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d009      	beq.n	8005ce2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005cce:	2208      	movs	r2, #8
 8005cd0:	4909      	ldr	r1, [pc, #36]	; (8005cf8 <Get_SerialNum+0x50>)
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f814 	bl	8005d00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005cd8:	2204      	movs	r2, #4
 8005cda:	4908      	ldr	r1, [pc, #32]	; (8005cfc <Get_SerialNum+0x54>)
 8005cdc:	68b8      	ldr	r0, [r7, #8]
 8005cde:	f000 f80f 	bl	8005d00 <IntToUnicode>
  }
}
 8005ce2:	bf00      	nop
 8005ce4:	3710      	adds	r7, #16
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}
 8005cea:	bf00      	nop
 8005cec:	1fff7a10 	.word	0x1fff7a10
 8005cf0:	1fff7a14 	.word	0x1fff7a14
 8005cf4:	1fff7a18 	.word	0x1fff7a18
 8005cf8:	2000016a 	.word	0x2000016a
 8005cfc:	2000017a 	.word	0x2000017a

08005d00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	60f8      	str	r0, [r7, #12]
 8005d08:	60b9      	str	r1, [r7, #8]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8005d12:	2300      	movs	r3, #0
 8005d14:	75fb      	strb	r3, [r7, #23]
 8005d16:	e027      	b.n	8005d68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	0f1b      	lsrs	r3, r3, #28
 8005d1c:	2b09      	cmp	r3, #9
 8005d1e:	d80b      	bhi.n	8005d38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	0f1b      	lsrs	r3, r3, #28
 8005d24:	b2da      	uxtb	r2, r3
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	005b      	lsls	r3, r3, #1
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	440b      	add	r3, r1
 8005d30:	3230      	adds	r2, #48	; 0x30
 8005d32:	b2d2      	uxtb	r2, r2
 8005d34:	701a      	strb	r2, [r3, #0]
 8005d36:	e00a      	b.n	8005d4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	0f1b      	lsrs	r3, r3, #28
 8005d3c:	b2da      	uxtb	r2, r3
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4619      	mov	r1, r3
 8005d44:	68bb      	ldr	r3, [r7, #8]
 8005d46:	440b      	add	r3, r1
 8005d48:	3237      	adds	r2, #55	; 0x37
 8005d4a:	b2d2      	uxtb	r2, r2
 8005d4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	011b      	lsls	r3, r3, #4
 8005d52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	3301      	adds	r3, #1
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	4413      	add	r3, r2
 8005d5e:	2200      	movs	r2, #0
 8005d60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	3301      	adds	r3, #1
 8005d66:	75fb      	strb	r3, [r7, #23]
 8005d68:	7dfa      	ldrb	r2, [r7, #23]
 8005d6a:	79fb      	ldrb	r3, [r7, #7]
 8005d6c:	429a      	cmp	r2, r3
 8005d6e:	d3d3      	bcc.n	8005d18 <IntToUnicode+0x18>
  }
}
 8005d70:	bf00      	nop
 8005d72:	371c      	adds	r7, #28
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b08a      	sub	sp, #40	; 0x28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d84:	f107 0314 	add.w	r3, r7, #20
 8005d88:	2200      	movs	r2, #0
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	605a      	str	r2, [r3, #4]
 8005d8e:	609a      	str	r2, [r3, #8]
 8005d90:	60da      	str	r2, [r3, #12]
 8005d92:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d9c:	d13a      	bne.n	8005e14 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d9e:	2300      	movs	r3, #0
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	4b1e      	ldr	r3, [pc, #120]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da6:	4a1d      	ldr	r2, [pc, #116]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005da8:	f043 0301 	orr.w	r3, r3, #1
 8005dac:	6313      	str	r3, [r2, #48]	; 0x30
 8005dae:	4b1b      	ldr	r3, [pc, #108]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db2:	f003 0301 	and.w	r3, r3, #1
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8005dba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8005dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005dcc:	230a      	movs	r3, #10
 8005dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dd0:	f107 0314 	add.w	r3, r7, #20
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4812      	ldr	r0, [pc, #72]	; (8005e20 <HAL_PCD_MspInit+0xa4>)
 8005dd8:	f7fa ff32 	bl	8000c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005ddc:	4b0f      	ldr	r3, [pc, #60]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005de0:	4a0e      	ldr	r2, [pc, #56]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005de6:	6353      	str	r3, [r2, #52]	; 0x34
 8005de8:	2300      	movs	r3, #0
 8005dea:	60fb      	str	r3, [r7, #12]
 8005dec:	4b0b      	ldr	r3, [pc, #44]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005df2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005df6:	6453      	str	r3, [r2, #68]	; 0x44
 8005df8:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <HAL_PCD_MspInit+0xa0>)
 8005dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e00:	60fb      	str	r3, [r7, #12]
 8005e02:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8005e04:	2200      	movs	r2, #0
 8005e06:	2100      	movs	r1, #0
 8005e08:	2043      	movs	r0, #67	; 0x43
 8005e0a:	f7fa fee2 	bl	8000bd2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8005e0e:	2043      	movs	r0, #67	; 0x43
 8005e10:	f7fa fefb 	bl	8000c0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8005e14:	bf00      	nop
 8005e16:	3728      	adds	r7, #40	; 0x28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40020000 	.word	0x40020000

08005e24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b082      	sub	sp, #8
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005e38:	4619      	mov	r1, r3
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	f7fe fd36 	bl	80048ac <USBD_LL_SetupStage>
}
 8005e40:	bf00      	nop
 8005e42:	3708      	adds	r7, #8
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005e5a:	78fa      	ldrb	r2, [r7, #3]
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	00db      	lsls	r3, r3, #3
 8005e62:	1a9b      	subs	r3, r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	78fb      	ldrb	r3, [r7, #3]
 8005e70:	4619      	mov	r1, r3
 8005e72:	f7fe fd6e 	bl	8004952 <USBD_LL_DataOutStage>
}
 8005e76:	bf00      	nop
 8005e78:	3708      	adds	r7, #8
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd80      	pop	{r7, pc}

08005e7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b082      	sub	sp, #8
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
 8005e86:	460b      	mov	r3, r1
 8005e88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8005e90:	78fa      	ldrb	r2, [r7, #3]
 8005e92:	6879      	ldr	r1, [r7, #4]
 8005e94:	4613      	mov	r3, r2
 8005e96:	00db      	lsls	r3, r3, #3
 8005e98:	1a9b      	subs	r3, r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	440b      	add	r3, r1
 8005e9e:	3348      	adds	r3, #72	; 0x48
 8005ea0:	681a      	ldr	r2, [r3, #0]
 8005ea2:	78fb      	ldrb	r3, [r7, #3]
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	f7fe fdb7 	bl	8004a18 <USBD_LL_DataInStage>
}
 8005eaa:	bf00      	nop
 8005eac:	3708      	adds	r7, #8
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}

08005eb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b082      	sub	sp, #8
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	f7fe febb 	bl	8004c3c <USBD_LL_SOF>
}
 8005ec6:	bf00      	nop
 8005ec8:	3708      	adds	r7, #8
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	bd80      	pop	{r7, pc}

08005ece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005ece:	b580      	push	{r7, lr}
 8005ed0:	b084      	sub	sp, #16
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d102      	bne.n	8005ee8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	73fb      	strb	r3, [r7, #15]
 8005ee6:	e008      	b.n	8005efa <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	68db      	ldr	r3, [r3, #12]
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d102      	bne.n	8005ef6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	73fb      	strb	r3, [r7, #15]
 8005ef4:	e001      	b.n	8005efa <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8005ef6:	f7fa fc23 	bl	8000740 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f00:	7bfa      	ldrb	r2, [r7, #15]
 8005f02:	4611      	mov	r1, r2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7fe fe5e 	bl	8004bc6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f10:	4618      	mov	r0, r3
 8005f12:	f7fe fe17 	bl	8004b44 <USBD_LL_Reset>
}
 8005f16:	bf00      	nop
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
	...

08005f20 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f2e:	4618      	mov	r0, r3
 8005f30:	f7fe fe59 	bl	8004be6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005f46:	f043 0301 	orr.w	r3, r3, #1
 8005f4a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d005      	beq.n	8005f60 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f54:	4b04      	ldr	r3, [pc, #16]	; (8005f68 <HAL_PCD_SuspendCallback+0x48>)
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	4a03      	ldr	r2, [pc, #12]	; (8005f68 <HAL_PCD_SuspendCallback+0x48>)
 8005f5a:	f043 0306 	orr.w	r3, r3, #6
 8005f5e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f60:	bf00      	nop
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	e000ed00 	.word	0xe000ed00

08005f6c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b082      	sub	sp, #8
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7fe fe48 	bl	8004c10 <USBD_LL_Resume>
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}

08005f88 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005f88:	b580      	push	{r7, lr}
 8005f8a:	b082      	sub	sp, #8
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005f9a:	78fa      	ldrb	r2, [r7, #3]
 8005f9c:	4611      	mov	r1, r2
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7fe fe73 	bl	8004c8a <USBD_LL_IsoOUTIncomplete>
}
 8005fa4:	bf00      	nop
 8005fa6:	3708      	adds	r7, #8
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	460b      	mov	r3, r1
 8005fb6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fbe:	78fa      	ldrb	r2, [r7, #3]
 8005fc0:	4611      	mov	r1, r2
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fe54 	bl	8004c70 <USBD_LL_IsoINIncomplete>
}
 8005fc8:	bf00      	nop
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fe60 	bl	8004ca4 <USBD_LL_DevConnected>
}
 8005fe4:	bf00      	nop
 8005fe6:	3708      	adds	r7, #8
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b082      	sub	sp, #8
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fe5d 	bl	8004cba <USBD_LL_DevDisconnected>
}
 8006000:	bf00      	nop
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b082      	sub	sp, #8
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d13c      	bne.n	8006092 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006018:	4a20      	ldr	r2, [pc, #128]	; (800609c <USBD_LL_Init+0x94>)
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4a1e      	ldr	r2, [pc, #120]	; (800609c <USBD_LL_Init+0x94>)
 8006024:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006028:	4b1c      	ldr	r3, [pc, #112]	; (800609c <USBD_LL_Init+0x94>)
 800602a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800602e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006030:	4b1a      	ldr	r3, [pc, #104]	; (800609c <USBD_LL_Init+0x94>)
 8006032:	2204      	movs	r2, #4
 8006034:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006036:	4b19      	ldr	r3, [pc, #100]	; (800609c <USBD_LL_Init+0x94>)
 8006038:	2202      	movs	r2, #2
 800603a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800603c:	4b17      	ldr	r3, [pc, #92]	; (800609c <USBD_LL_Init+0x94>)
 800603e:	2200      	movs	r2, #0
 8006040:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006042:	4b16      	ldr	r3, [pc, #88]	; (800609c <USBD_LL_Init+0x94>)
 8006044:	2202      	movs	r2, #2
 8006046:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006048:	4b14      	ldr	r3, [pc, #80]	; (800609c <USBD_LL_Init+0x94>)
 800604a:	2200      	movs	r2, #0
 800604c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800604e:	4b13      	ldr	r3, [pc, #76]	; (800609c <USBD_LL_Init+0x94>)
 8006050:	2200      	movs	r2, #0
 8006052:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006054:	4b11      	ldr	r3, [pc, #68]	; (800609c <USBD_LL_Init+0x94>)
 8006056:	2200      	movs	r2, #0
 8006058:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800605a:	4b10      	ldr	r3, [pc, #64]	; (800609c <USBD_LL_Init+0x94>)
 800605c:	2200      	movs	r2, #0
 800605e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006060:	4b0e      	ldr	r3, [pc, #56]	; (800609c <USBD_LL_Init+0x94>)
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006066:	480d      	ldr	r0, [pc, #52]	; (800609c <USBD_LL_Init+0x94>)
 8006068:	f7fa ff94 	bl	8000f94 <HAL_PCD_Init>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006072:	f7fa fb65 	bl	8000740 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006076:	2180      	movs	r1, #128	; 0x80
 8006078:	4808      	ldr	r0, [pc, #32]	; (800609c <USBD_LL_Init+0x94>)
 800607a:	f7fc f8f2 	bl	8002262 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800607e:	2240      	movs	r2, #64	; 0x40
 8006080:	2100      	movs	r1, #0
 8006082:	4806      	ldr	r0, [pc, #24]	; (800609c <USBD_LL_Init+0x94>)
 8006084:	f7fc f8a6 	bl	80021d4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006088:	2280      	movs	r2, #128	; 0x80
 800608a:	2101      	movs	r1, #1
 800608c:	4803      	ldr	r0, [pc, #12]	; (800609c <USBD_LL_Init+0x94>)
 800608e:	f7fc f8a1 	bl	80021d4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}
 800609c:	20001a1c 	.word	0x20001a1c

080060a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b084      	sub	sp, #16
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fb f889 	bl	80011ce <HAL_PCD_Start>
 80060bc:	4603      	mov	r3, r0
 80060be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 f92a 	bl	800631c <USBD_Get_USB_Status>
 80060c8:	4603      	mov	r3, r0
 80060ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80060cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3710      	adds	r7, #16
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}

080060d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80060d6:	b580      	push	{r7, lr}
 80060d8:	b084      	sub	sp, #16
 80060da:	af00      	add	r7, sp, #0
 80060dc:	6078      	str	r0, [r7, #4]
 80060de:	4608      	mov	r0, r1
 80060e0:	4611      	mov	r1, r2
 80060e2:	461a      	mov	r2, r3
 80060e4:	4603      	mov	r3, r0
 80060e6:	70fb      	strb	r3, [r7, #3]
 80060e8:	460b      	mov	r3, r1
 80060ea:	70bb      	strb	r3, [r7, #2]
 80060ec:	4613      	mov	r3, r2
 80060ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80060f0:	2300      	movs	r3, #0
 80060f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80060fe:	78bb      	ldrb	r3, [r7, #2]
 8006100:	883a      	ldrh	r2, [r7, #0]
 8006102:	78f9      	ldrb	r1, [r7, #3]
 8006104:	f7fb fc6d 	bl	80019e2 <HAL_PCD_EP_Open>
 8006108:	4603      	mov	r3, r0
 800610a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800610c:	7bfb      	ldrb	r3, [r7, #15]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 f904 	bl	800631c <USBD_Get_USB_Status>
 8006114:	4603      	mov	r3, r0
 8006116:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006118:	7bbb      	ldrb	r3, [r7, #14]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800612e:	2300      	movs	r3, #0
 8006130:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006132:	2300      	movs	r3, #0
 8006134:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800613c:	78fa      	ldrb	r2, [r7, #3]
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f7fb fcb6 	bl	8001ab2 <HAL_PCD_EP_Close>
 8006146:	4603      	mov	r3, r0
 8006148:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800614a:	7bfb      	ldrb	r3, [r7, #15]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 f8e5 	bl	800631c <USBD_Get_USB_Status>
 8006152:	4603      	mov	r3, r0
 8006154:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006156:	7bbb      	ldrb	r3, [r7, #14]
}
 8006158:	4618      	mov	r0, r3
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
 8006168:	460b      	mov	r3, r1
 800616a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800616c:	2300      	movs	r3, #0
 800616e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006170:	2300      	movs	r3, #0
 8006172:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	4611      	mov	r1, r2
 800617e:	4618      	mov	r0, r3
 8006180:	f7fb fd8e 	bl	8001ca0 <HAL_PCD_EP_SetStall>
 8006184:	4603      	mov	r3, r0
 8006186:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006188:	7bfb      	ldrb	r3, [r7, #15]
 800618a:	4618      	mov	r0, r3
 800618c:	f000 f8c6 	bl	800631c <USBD_Get_USB_Status>
 8006190:	4603      	mov	r3, r0
 8006192:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006194:	7bbb      	ldrb	r3, [r7, #14]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3710      	adds	r7, #16
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}

0800619e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	460b      	mov	r3, r1
 80061a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80061ae:	2300      	movs	r3, #0
 80061b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061b8:	78fa      	ldrb	r2, [r7, #3]
 80061ba:	4611      	mov	r1, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fb fdd3 	bl	8001d68 <HAL_PCD_EP_ClrStall>
 80061c2:	4603      	mov	r3, r0
 80061c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80061c6:	7bfb      	ldrb	r3, [r7, #15]
 80061c8:	4618      	mov	r0, r3
 80061ca:	f000 f8a7 	bl	800631c <USBD_Get_USB_Status>
 80061ce:	4603      	mov	r3, r0
 80061d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80061d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	460b      	mov	r3, r1
 80061e6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80061ee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80061f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	da0b      	bge.n	8006210 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80061f8:	78fb      	ldrb	r3, [r7, #3]
 80061fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061fe:	68f9      	ldr	r1, [r7, #12]
 8006200:	4613      	mov	r3, r2
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	1a9b      	subs	r3, r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	440b      	add	r3, r1
 800620a:	333e      	adds	r3, #62	; 0x3e
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	e00b      	b.n	8006228 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006210:	78fb      	ldrb	r3, [r7, #3]
 8006212:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006216:	68f9      	ldr	r1, [r7, #12]
 8006218:	4613      	mov	r3, r2
 800621a:	00db      	lsls	r3, r3, #3
 800621c:	1a9b      	subs	r3, r3, r2
 800621e:	009b      	lsls	r3, r3, #2
 8006220:	440b      	add	r3, r1
 8006222:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006226:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006228:	4618      	mov	r0, r3
 800622a:	3714      	adds	r7, #20
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr

08006234 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
 800623c:	460b      	mov	r3, r1
 800623e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006240:	2300      	movs	r3, #0
 8006242:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006244:	2300      	movs	r3, #0
 8006246:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800624e:	78fa      	ldrb	r2, [r7, #3]
 8006250:	4611      	mov	r1, r2
 8006252:	4618      	mov	r0, r3
 8006254:	f7fb fba0 	bl	8001998 <HAL_PCD_SetAddress>
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	4618      	mov	r0, r3
 8006260:	f000 f85c 	bl	800631c <USBD_Get_USB_Status>
 8006264:	4603      	mov	r3, r0
 8006266:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006268:	7bbb      	ldrb	r3, [r7, #14]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b086      	sub	sp, #24
 8006276:	af00      	add	r7, sp, #0
 8006278:	60f8      	str	r0, [r7, #12]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
 800627e:	460b      	mov	r3, r1
 8006280:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006286:	2300      	movs	r3, #0
 8006288:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006290:	7af9      	ldrb	r1, [r7, #11]
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	f7fb fcb9 	bl	8001c0c <HAL_PCD_EP_Transmit>
 800629a:	4603      	mov	r3, r0
 800629c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800629e:	7dfb      	ldrb	r3, [r7, #23]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f000 f83b 	bl	800631c <USBD_Get_USB_Status>
 80062a6:	4603      	mov	r3, r0
 80062a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80062aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	607a      	str	r2, [r7, #4]
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	460b      	mov	r3, r1
 80062c2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80062c4:	2300      	movs	r3, #0
 80062c6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80062d2:	7af9      	ldrb	r1, [r7, #11]
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	f7fb fc35 	bl	8001b46 <HAL_PCD_EP_Receive>
 80062dc:	4603      	mov	r3, r0
 80062de:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80062e0:	7dfb      	ldrb	r3, [r7, #23]
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 f81a 	bl	800631c <USBD_Get_USB_Status>
 80062e8:	4603      	mov	r3, r0
 80062ea:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80062ec:	7dbb      	ldrb	r3, [r7, #22]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3718      	adds	r7, #24
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b082      	sub	sp, #8
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	4611      	mov	r1, r2
 800630c:	4618      	mov	r0, r3
 800630e:	f7fb fc65 	bl	8001bdc <HAL_PCD_EP_GetRxCount>
 8006312:	4603      	mov	r3, r0
}
 8006314:	4618      	mov	r0, r3
 8006316:	3708      	adds	r7, #8
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	4603      	mov	r3, r0
 8006324:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	2b03      	cmp	r3, #3
 800632e:	d817      	bhi.n	8006360 <USBD_Get_USB_Status+0x44>
 8006330:	a201      	add	r2, pc, #4	; (adr r2, 8006338 <USBD_Get_USB_Status+0x1c>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	08006349 	.word	0x08006349
 800633c:	0800634f 	.word	0x0800634f
 8006340:	08006355 	.word	0x08006355
 8006344:	0800635b 	.word	0x0800635b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
    break;
 800634c:	e00b      	b.n	8006366 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800634e:	2303      	movs	r3, #3
 8006350:	73fb      	strb	r3, [r7, #15]
    break;
 8006352:	e008      	b.n	8006366 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006354:	2301      	movs	r3, #1
 8006356:	73fb      	strb	r3, [r7, #15]
    break;
 8006358:	e005      	b.n	8006366 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800635a:	2303      	movs	r3, #3
 800635c:	73fb      	strb	r3, [r7, #15]
    break;
 800635e:	e002      	b.n	8006366 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8006360:	2303      	movs	r3, #3
 8006362:	73fb      	strb	r3, [r7, #15]
    break;
 8006364:	bf00      	nop
  }
  return usb_status;
 8006366:	7bfb      	ldrb	r3, [r7, #15]
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <__errno>:
 8006374:	4b01      	ldr	r3, [pc, #4]	; (800637c <__errno+0x8>)
 8006376:	6818      	ldr	r0, [r3, #0]
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	20000184 	.word	0x20000184

08006380 <__libc_init_array>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4e0d      	ldr	r6, [pc, #52]	; (80063b8 <__libc_init_array+0x38>)
 8006384:	4c0d      	ldr	r4, [pc, #52]	; (80063bc <__libc_init_array+0x3c>)
 8006386:	1ba4      	subs	r4, r4, r6
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	2500      	movs	r5, #0
 800638c:	42a5      	cmp	r5, r4
 800638e:	d109      	bne.n	80063a4 <__libc_init_array+0x24>
 8006390:	4e0b      	ldr	r6, [pc, #44]	; (80063c0 <__libc_init_array+0x40>)
 8006392:	4c0c      	ldr	r4, [pc, #48]	; (80063c4 <__libc_init_array+0x44>)
 8006394:	f000 fc36 	bl	8006c04 <_init>
 8006398:	1ba4      	subs	r4, r4, r6
 800639a:	10a4      	asrs	r4, r4, #2
 800639c:	2500      	movs	r5, #0
 800639e:	42a5      	cmp	r5, r4
 80063a0:	d105      	bne.n	80063ae <__libc_init_array+0x2e>
 80063a2:	bd70      	pop	{r4, r5, r6, pc}
 80063a4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063a8:	4798      	blx	r3
 80063aa:	3501      	adds	r5, #1
 80063ac:	e7ee      	b.n	800638c <__libc_init_array+0xc>
 80063ae:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80063b2:	4798      	blx	r3
 80063b4:	3501      	adds	r5, #1
 80063b6:	e7f2      	b.n	800639e <__libc_init_array+0x1e>
 80063b8:	08006cb8 	.word	0x08006cb8
 80063bc:	08006cb8 	.word	0x08006cb8
 80063c0:	08006cb8 	.word	0x08006cb8
 80063c4:	08006cbc 	.word	0x08006cbc

080063c8 <malloc>:
 80063c8:	4b02      	ldr	r3, [pc, #8]	; (80063d4 <malloc+0xc>)
 80063ca:	4601      	mov	r1, r0
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	f000 b861 	b.w	8006494 <_malloc_r>
 80063d2:	bf00      	nop
 80063d4:	20000184 	.word	0x20000184

080063d8 <free>:
 80063d8:	4b02      	ldr	r3, [pc, #8]	; (80063e4 <free+0xc>)
 80063da:	4601      	mov	r1, r0
 80063dc:	6818      	ldr	r0, [r3, #0]
 80063de:	f000 b80b 	b.w	80063f8 <_free_r>
 80063e2:	bf00      	nop
 80063e4:	20000184 	.word	0x20000184

080063e8 <memset>:
 80063e8:	4402      	add	r2, r0
 80063ea:	4603      	mov	r3, r0
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d100      	bne.n	80063f2 <memset+0xa>
 80063f0:	4770      	bx	lr
 80063f2:	f803 1b01 	strb.w	r1, [r3], #1
 80063f6:	e7f9      	b.n	80063ec <memset+0x4>

080063f8 <_free_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4605      	mov	r5, r0
 80063fc:	2900      	cmp	r1, #0
 80063fe:	d045      	beq.n	800648c <_free_r+0x94>
 8006400:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006404:	1f0c      	subs	r4, r1, #4
 8006406:	2b00      	cmp	r3, #0
 8006408:	bfb8      	it	lt
 800640a:	18e4      	addlt	r4, r4, r3
 800640c:	f000 f8cc 	bl	80065a8 <__malloc_lock>
 8006410:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <_free_r+0x98>)
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	4610      	mov	r0, r2
 8006416:	b933      	cbnz	r3, 8006426 <_free_r+0x2e>
 8006418:	6063      	str	r3, [r4, #4]
 800641a:	6014      	str	r4, [r2, #0]
 800641c:	4628      	mov	r0, r5
 800641e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006422:	f000 b8c2 	b.w	80065aa <__malloc_unlock>
 8006426:	42a3      	cmp	r3, r4
 8006428:	d90c      	bls.n	8006444 <_free_r+0x4c>
 800642a:	6821      	ldr	r1, [r4, #0]
 800642c:	1862      	adds	r2, r4, r1
 800642e:	4293      	cmp	r3, r2
 8006430:	bf04      	itt	eq
 8006432:	681a      	ldreq	r2, [r3, #0]
 8006434:	685b      	ldreq	r3, [r3, #4]
 8006436:	6063      	str	r3, [r4, #4]
 8006438:	bf04      	itt	eq
 800643a:	1852      	addeq	r2, r2, r1
 800643c:	6022      	streq	r2, [r4, #0]
 800643e:	6004      	str	r4, [r0, #0]
 8006440:	e7ec      	b.n	800641c <_free_r+0x24>
 8006442:	4613      	mov	r3, r2
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	b10a      	cbz	r2, 800644c <_free_r+0x54>
 8006448:	42a2      	cmp	r2, r4
 800644a:	d9fa      	bls.n	8006442 <_free_r+0x4a>
 800644c:	6819      	ldr	r1, [r3, #0]
 800644e:	1858      	adds	r0, r3, r1
 8006450:	42a0      	cmp	r0, r4
 8006452:	d10b      	bne.n	800646c <_free_r+0x74>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	4401      	add	r1, r0
 8006458:	1858      	adds	r0, r3, r1
 800645a:	4282      	cmp	r2, r0
 800645c:	6019      	str	r1, [r3, #0]
 800645e:	d1dd      	bne.n	800641c <_free_r+0x24>
 8006460:	6810      	ldr	r0, [r2, #0]
 8006462:	6852      	ldr	r2, [r2, #4]
 8006464:	605a      	str	r2, [r3, #4]
 8006466:	4401      	add	r1, r0
 8006468:	6019      	str	r1, [r3, #0]
 800646a:	e7d7      	b.n	800641c <_free_r+0x24>
 800646c:	d902      	bls.n	8006474 <_free_r+0x7c>
 800646e:	230c      	movs	r3, #12
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	e7d3      	b.n	800641c <_free_r+0x24>
 8006474:	6820      	ldr	r0, [r4, #0]
 8006476:	1821      	adds	r1, r4, r0
 8006478:	428a      	cmp	r2, r1
 800647a:	bf04      	itt	eq
 800647c:	6811      	ldreq	r1, [r2, #0]
 800647e:	6852      	ldreq	r2, [r2, #4]
 8006480:	6062      	str	r2, [r4, #4]
 8006482:	bf04      	itt	eq
 8006484:	1809      	addeq	r1, r1, r0
 8006486:	6021      	streq	r1, [r4, #0]
 8006488:	605c      	str	r4, [r3, #4]
 800648a:	e7c7      	b.n	800641c <_free_r+0x24>
 800648c:	bd38      	pop	{r3, r4, r5, pc}
 800648e:	bf00      	nop
 8006490:	2000020c 	.word	0x2000020c

08006494 <_malloc_r>:
 8006494:	b570      	push	{r4, r5, r6, lr}
 8006496:	1ccd      	adds	r5, r1, #3
 8006498:	f025 0503 	bic.w	r5, r5, #3
 800649c:	3508      	adds	r5, #8
 800649e:	2d0c      	cmp	r5, #12
 80064a0:	bf38      	it	cc
 80064a2:	250c      	movcc	r5, #12
 80064a4:	2d00      	cmp	r5, #0
 80064a6:	4606      	mov	r6, r0
 80064a8:	db01      	blt.n	80064ae <_malloc_r+0x1a>
 80064aa:	42a9      	cmp	r1, r5
 80064ac:	d903      	bls.n	80064b6 <_malloc_r+0x22>
 80064ae:	230c      	movs	r3, #12
 80064b0:	6033      	str	r3, [r6, #0]
 80064b2:	2000      	movs	r0, #0
 80064b4:	bd70      	pop	{r4, r5, r6, pc}
 80064b6:	f000 f877 	bl	80065a8 <__malloc_lock>
 80064ba:	4a21      	ldr	r2, [pc, #132]	; (8006540 <_malloc_r+0xac>)
 80064bc:	6814      	ldr	r4, [r2, #0]
 80064be:	4621      	mov	r1, r4
 80064c0:	b991      	cbnz	r1, 80064e8 <_malloc_r+0x54>
 80064c2:	4c20      	ldr	r4, [pc, #128]	; (8006544 <_malloc_r+0xb0>)
 80064c4:	6823      	ldr	r3, [r4, #0]
 80064c6:	b91b      	cbnz	r3, 80064d0 <_malloc_r+0x3c>
 80064c8:	4630      	mov	r0, r6
 80064ca:	f000 f83d 	bl	8006548 <_sbrk_r>
 80064ce:	6020      	str	r0, [r4, #0]
 80064d0:	4629      	mov	r1, r5
 80064d2:	4630      	mov	r0, r6
 80064d4:	f000 f838 	bl	8006548 <_sbrk_r>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d124      	bne.n	8006526 <_malloc_r+0x92>
 80064dc:	230c      	movs	r3, #12
 80064de:	6033      	str	r3, [r6, #0]
 80064e0:	4630      	mov	r0, r6
 80064e2:	f000 f862 	bl	80065aa <__malloc_unlock>
 80064e6:	e7e4      	b.n	80064b2 <_malloc_r+0x1e>
 80064e8:	680b      	ldr	r3, [r1, #0]
 80064ea:	1b5b      	subs	r3, r3, r5
 80064ec:	d418      	bmi.n	8006520 <_malloc_r+0x8c>
 80064ee:	2b0b      	cmp	r3, #11
 80064f0:	d90f      	bls.n	8006512 <_malloc_r+0x7e>
 80064f2:	600b      	str	r3, [r1, #0]
 80064f4:	50cd      	str	r5, [r1, r3]
 80064f6:	18cc      	adds	r4, r1, r3
 80064f8:	4630      	mov	r0, r6
 80064fa:	f000 f856 	bl	80065aa <__malloc_unlock>
 80064fe:	f104 000b 	add.w	r0, r4, #11
 8006502:	1d23      	adds	r3, r4, #4
 8006504:	f020 0007 	bic.w	r0, r0, #7
 8006508:	1ac3      	subs	r3, r0, r3
 800650a:	d0d3      	beq.n	80064b4 <_malloc_r+0x20>
 800650c:	425a      	negs	r2, r3
 800650e:	50e2      	str	r2, [r4, r3]
 8006510:	e7d0      	b.n	80064b4 <_malloc_r+0x20>
 8006512:	428c      	cmp	r4, r1
 8006514:	684b      	ldr	r3, [r1, #4]
 8006516:	bf16      	itet	ne
 8006518:	6063      	strne	r3, [r4, #4]
 800651a:	6013      	streq	r3, [r2, #0]
 800651c:	460c      	movne	r4, r1
 800651e:	e7eb      	b.n	80064f8 <_malloc_r+0x64>
 8006520:	460c      	mov	r4, r1
 8006522:	6849      	ldr	r1, [r1, #4]
 8006524:	e7cc      	b.n	80064c0 <_malloc_r+0x2c>
 8006526:	1cc4      	adds	r4, r0, #3
 8006528:	f024 0403 	bic.w	r4, r4, #3
 800652c:	42a0      	cmp	r0, r4
 800652e:	d005      	beq.n	800653c <_malloc_r+0xa8>
 8006530:	1a21      	subs	r1, r4, r0
 8006532:	4630      	mov	r0, r6
 8006534:	f000 f808 	bl	8006548 <_sbrk_r>
 8006538:	3001      	adds	r0, #1
 800653a:	d0cf      	beq.n	80064dc <_malloc_r+0x48>
 800653c:	6025      	str	r5, [r4, #0]
 800653e:	e7db      	b.n	80064f8 <_malloc_r+0x64>
 8006540:	2000020c 	.word	0x2000020c
 8006544:	20000210 	.word	0x20000210

08006548 <_sbrk_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4c06      	ldr	r4, [pc, #24]	; (8006564 <_sbrk_r+0x1c>)
 800654c:	2300      	movs	r3, #0
 800654e:	4605      	mov	r5, r0
 8006550:	4608      	mov	r0, r1
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	f7fa f958 	bl	8000808 <_sbrk>
 8006558:	1c43      	adds	r3, r0, #1
 800655a:	d102      	bne.n	8006562 <_sbrk_r+0x1a>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	b103      	cbz	r3, 8006562 <_sbrk_r+0x1a>
 8006560:	602b      	str	r3, [r5, #0]
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	20001e24 	.word	0x20001e24

08006568 <siprintf>:
 8006568:	b40e      	push	{r1, r2, r3}
 800656a:	b500      	push	{lr}
 800656c:	b09c      	sub	sp, #112	; 0x70
 800656e:	ab1d      	add	r3, sp, #116	; 0x74
 8006570:	9002      	str	r0, [sp, #8]
 8006572:	9006      	str	r0, [sp, #24]
 8006574:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006578:	4809      	ldr	r0, [pc, #36]	; (80065a0 <siprintf+0x38>)
 800657a:	9107      	str	r1, [sp, #28]
 800657c:	9104      	str	r1, [sp, #16]
 800657e:	4909      	ldr	r1, [pc, #36]	; (80065a4 <siprintf+0x3c>)
 8006580:	f853 2b04 	ldr.w	r2, [r3], #4
 8006584:	9105      	str	r1, [sp, #20]
 8006586:	6800      	ldr	r0, [r0, #0]
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	a902      	add	r1, sp, #8
 800658c:	f000 f868 	bl	8006660 <_svfiprintf_r>
 8006590:	9b02      	ldr	r3, [sp, #8]
 8006592:	2200      	movs	r2, #0
 8006594:	701a      	strb	r2, [r3, #0]
 8006596:	b01c      	add	sp, #112	; 0x70
 8006598:	f85d eb04 	ldr.w	lr, [sp], #4
 800659c:	b003      	add	sp, #12
 800659e:	4770      	bx	lr
 80065a0:	20000184 	.word	0x20000184
 80065a4:	ffff0208 	.word	0xffff0208

080065a8 <__malloc_lock>:
 80065a8:	4770      	bx	lr

080065aa <__malloc_unlock>:
 80065aa:	4770      	bx	lr

080065ac <__ssputs_r>:
 80065ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065b0:	688e      	ldr	r6, [r1, #8]
 80065b2:	429e      	cmp	r6, r3
 80065b4:	4682      	mov	sl, r0
 80065b6:	460c      	mov	r4, r1
 80065b8:	4690      	mov	r8, r2
 80065ba:	4699      	mov	r9, r3
 80065bc:	d837      	bhi.n	800662e <__ssputs_r+0x82>
 80065be:	898a      	ldrh	r2, [r1, #12]
 80065c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80065c4:	d031      	beq.n	800662a <__ssputs_r+0x7e>
 80065c6:	6825      	ldr	r5, [r4, #0]
 80065c8:	6909      	ldr	r1, [r1, #16]
 80065ca:	1a6f      	subs	r7, r5, r1
 80065cc:	6965      	ldr	r5, [r4, #20]
 80065ce:	2302      	movs	r3, #2
 80065d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80065d8:	f109 0301 	add.w	r3, r9, #1
 80065dc:	443b      	add	r3, r7
 80065de:	429d      	cmp	r5, r3
 80065e0:	bf38      	it	cc
 80065e2:	461d      	movcc	r5, r3
 80065e4:	0553      	lsls	r3, r2, #21
 80065e6:	d530      	bpl.n	800664a <__ssputs_r+0x9e>
 80065e8:	4629      	mov	r1, r5
 80065ea:	f7ff ff53 	bl	8006494 <_malloc_r>
 80065ee:	4606      	mov	r6, r0
 80065f0:	b950      	cbnz	r0, 8006608 <__ssputs_r+0x5c>
 80065f2:	230c      	movs	r3, #12
 80065f4:	f8ca 3000 	str.w	r3, [sl]
 80065f8:	89a3      	ldrh	r3, [r4, #12]
 80065fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006608:	463a      	mov	r2, r7
 800660a:	6921      	ldr	r1, [r4, #16]
 800660c:	f000 faa8 	bl	8006b60 <memcpy>
 8006610:	89a3      	ldrh	r3, [r4, #12]
 8006612:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006616:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800661a:	81a3      	strh	r3, [r4, #12]
 800661c:	6126      	str	r6, [r4, #16]
 800661e:	6165      	str	r5, [r4, #20]
 8006620:	443e      	add	r6, r7
 8006622:	1bed      	subs	r5, r5, r7
 8006624:	6026      	str	r6, [r4, #0]
 8006626:	60a5      	str	r5, [r4, #8]
 8006628:	464e      	mov	r6, r9
 800662a:	454e      	cmp	r6, r9
 800662c:	d900      	bls.n	8006630 <__ssputs_r+0x84>
 800662e:	464e      	mov	r6, r9
 8006630:	4632      	mov	r2, r6
 8006632:	4641      	mov	r1, r8
 8006634:	6820      	ldr	r0, [r4, #0]
 8006636:	f000 fa9e 	bl	8006b76 <memmove>
 800663a:	68a3      	ldr	r3, [r4, #8]
 800663c:	1b9b      	subs	r3, r3, r6
 800663e:	60a3      	str	r3, [r4, #8]
 8006640:	6823      	ldr	r3, [r4, #0]
 8006642:	441e      	add	r6, r3
 8006644:	6026      	str	r6, [r4, #0]
 8006646:	2000      	movs	r0, #0
 8006648:	e7dc      	b.n	8006604 <__ssputs_r+0x58>
 800664a:	462a      	mov	r2, r5
 800664c:	f000 faac 	bl	8006ba8 <_realloc_r>
 8006650:	4606      	mov	r6, r0
 8006652:	2800      	cmp	r0, #0
 8006654:	d1e2      	bne.n	800661c <__ssputs_r+0x70>
 8006656:	6921      	ldr	r1, [r4, #16]
 8006658:	4650      	mov	r0, sl
 800665a:	f7ff fecd 	bl	80063f8 <_free_r>
 800665e:	e7c8      	b.n	80065f2 <__ssputs_r+0x46>

08006660 <_svfiprintf_r>:
 8006660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006664:	461d      	mov	r5, r3
 8006666:	898b      	ldrh	r3, [r1, #12]
 8006668:	061f      	lsls	r7, r3, #24
 800666a:	b09d      	sub	sp, #116	; 0x74
 800666c:	4680      	mov	r8, r0
 800666e:	460c      	mov	r4, r1
 8006670:	4616      	mov	r6, r2
 8006672:	d50f      	bpl.n	8006694 <_svfiprintf_r+0x34>
 8006674:	690b      	ldr	r3, [r1, #16]
 8006676:	b96b      	cbnz	r3, 8006694 <_svfiprintf_r+0x34>
 8006678:	2140      	movs	r1, #64	; 0x40
 800667a:	f7ff ff0b 	bl	8006494 <_malloc_r>
 800667e:	6020      	str	r0, [r4, #0]
 8006680:	6120      	str	r0, [r4, #16]
 8006682:	b928      	cbnz	r0, 8006690 <_svfiprintf_r+0x30>
 8006684:	230c      	movs	r3, #12
 8006686:	f8c8 3000 	str.w	r3, [r8]
 800668a:	f04f 30ff 	mov.w	r0, #4294967295
 800668e:	e0c8      	b.n	8006822 <_svfiprintf_r+0x1c2>
 8006690:	2340      	movs	r3, #64	; 0x40
 8006692:	6163      	str	r3, [r4, #20]
 8006694:	2300      	movs	r3, #0
 8006696:	9309      	str	r3, [sp, #36]	; 0x24
 8006698:	2320      	movs	r3, #32
 800669a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800669e:	2330      	movs	r3, #48	; 0x30
 80066a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066a4:	9503      	str	r5, [sp, #12]
 80066a6:	f04f 0b01 	mov.w	fp, #1
 80066aa:	4637      	mov	r7, r6
 80066ac:	463d      	mov	r5, r7
 80066ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80066b2:	b10b      	cbz	r3, 80066b8 <_svfiprintf_r+0x58>
 80066b4:	2b25      	cmp	r3, #37	; 0x25
 80066b6:	d13e      	bne.n	8006736 <_svfiprintf_r+0xd6>
 80066b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80066bc:	d00b      	beq.n	80066d6 <_svfiprintf_r+0x76>
 80066be:	4653      	mov	r3, sl
 80066c0:	4632      	mov	r2, r6
 80066c2:	4621      	mov	r1, r4
 80066c4:	4640      	mov	r0, r8
 80066c6:	f7ff ff71 	bl	80065ac <__ssputs_r>
 80066ca:	3001      	adds	r0, #1
 80066cc:	f000 80a4 	beq.w	8006818 <_svfiprintf_r+0x1b8>
 80066d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066d2:	4453      	add	r3, sl
 80066d4:	9309      	str	r3, [sp, #36]	; 0x24
 80066d6:	783b      	ldrb	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	f000 809d 	beq.w	8006818 <_svfiprintf_r+0x1b8>
 80066de:	2300      	movs	r3, #0
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295
 80066e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066e8:	9304      	str	r3, [sp, #16]
 80066ea:	9307      	str	r3, [sp, #28]
 80066ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066f0:	931a      	str	r3, [sp, #104]	; 0x68
 80066f2:	462f      	mov	r7, r5
 80066f4:	2205      	movs	r2, #5
 80066f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80066fa:	4850      	ldr	r0, [pc, #320]	; (800683c <_svfiprintf_r+0x1dc>)
 80066fc:	f7f9 fd80 	bl	8000200 <memchr>
 8006700:	9b04      	ldr	r3, [sp, #16]
 8006702:	b9d0      	cbnz	r0, 800673a <_svfiprintf_r+0xda>
 8006704:	06d9      	lsls	r1, r3, #27
 8006706:	bf44      	itt	mi
 8006708:	2220      	movmi	r2, #32
 800670a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800670e:	071a      	lsls	r2, r3, #28
 8006710:	bf44      	itt	mi
 8006712:	222b      	movmi	r2, #43	; 0x2b
 8006714:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006718:	782a      	ldrb	r2, [r5, #0]
 800671a:	2a2a      	cmp	r2, #42	; 0x2a
 800671c:	d015      	beq.n	800674a <_svfiprintf_r+0xea>
 800671e:	9a07      	ldr	r2, [sp, #28]
 8006720:	462f      	mov	r7, r5
 8006722:	2000      	movs	r0, #0
 8006724:	250a      	movs	r5, #10
 8006726:	4639      	mov	r1, r7
 8006728:	f811 3b01 	ldrb.w	r3, [r1], #1
 800672c:	3b30      	subs	r3, #48	; 0x30
 800672e:	2b09      	cmp	r3, #9
 8006730:	d94d      	bls.n	80067ce <_svfiprintf_r+0x16e>
 8006732:	b1b8      	cbz	r0, 8006764 <_svfiprintf_r+0x104>
 8006734:	e00f      	b.n	8006756 <_svfiprintf_r+0xf6>
 8006736:	462f      	mov	r7, r5
 8006738:	e7b8      	b.n	80066ac <_svfiprintf_r+0x4c>
 800673a:	4a40      	ldr	r2, [pc, #256]	; (800683c <_svfiprintf_r+0x1dc>)
 800673c:	1a80      	subs	r0, r0, r2
 800673e:	fa0b f000 	lsl.w	r0, fp, r0
 8006742:	4318      	orrs	r0, r3
 8006744:	9004      	str	r0, [sp, #16]
 8006746:	463d      	mov	r5, r7
 8006748:	e7d3      	b.n	80066f2 <_svfiprintf_r+0x92>
 800674a:	9a03      	ldr	r2, [sp, #12]
 800674c:	1d11      	adds	r1, r2, #4
 800674e:	6812      	ldr	r2, [r2, #0]
 8006750:	9103      	str	r1, [sp, #12]
 8006752:	2a00      	cmp	r2, #0
 8006754:	db01      	blt.n	800675a <_svfiprintf_r+0xfa>
 8006756:	9207      	str	r2, [sp, #28]
 8006758:	e004      	b.n	8006764 <_svfiprintf_r+0x104>
 800675a:	4252      	negs	r2, r2
 800675c:	f043 0302 	orr.w	r3, r3, #2
 8006760:	9207      	str	r2, [sp, #28]
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	783b      	ldrb	r3, [r7, #0]
 8006766:	2b2e      	cmp	r3, #46	; 0x2e
 8006768:	d10c      	bne.n	8006784 <_svfiprintf_r+0x124>
 800676a:	787b      	ldrb	r3, [r7, #1]
 800676c:	2b2a      	cmp	r3, #42	; 0x2a
 800676e:	d133      	bne.n	80067d8 <_svfiprintf_r+0x178>
 8006770:	9b03      	ldr	r3, [sp, #12]
 8006772:	1d1a      	adds	r2, r3, #4
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	9203      	str	r2, [sp, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	bfb8      	it	lt
 800677c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006780:	3702      	adds	r7, #2
 8006782:	9305      	str	r3, [sp, #20]
 8006784:	4d2e      	ldr	r5, [pc, #184]	; (8006840 <_svfiprintf_r+0x1e0>)
 8006786:	7839      	ldrb	r1, [r7, #0]
 8006788:	2203      	movs	r2, #3
 800678a:	4628      	mov	r0, r5
 800678c:	f7f9 fd38 	bl	8000200 <memchr>
 8006790:	b138      	cbz	r0, 80067a2 <_svfiprintf_r+0x142>
 8006792:	2340      	movs	r3, #64	; 0x40
 8006794:	1b40      	subs	r0, r0, r5
 8006796:	fa03 f000 	lsl.w	r0, r3, r0
 800679a:	9b04      	ldr	r3, [sp, #16]
 800679c:	4303      	orrs	r3, r0
 800679e:	3701      	adds	r7, #1
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	7839      	ldrb	r1, [r7, #0]
 80067a4:	4827      	ldr	r0, [pc, #156]	; (8006844 <_svfiprintf_r+0x1e4>)
 80067a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067aa:	2206      	movs	r2, #6
 80067ac:	1c7e      	adds	r6, r7, #1
 80067ae:	f7f9 fd27 	bl	8000200 <memchr>
 80067b2:	2800      	cmp	r0, #0
 80067b4:	d038      	beq.n	8006828 <_svfiprintf_r+0x1c8>
 80067b6:	4b24      	ldr	r3, [pc, #144]	; (8006848 <_svfiprintf_r+0x1e8>)
 80067b8:	bb13      	cbnz	r3, 8006800 <_svfiprintf_r+0x1a0>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	3307      	adds	r3, #7
 80067be:	f023 0307 	bic.w	r3, r3, #7
 80067c2:	3308      	adds	r3, #8
 80067c4:	9303      	str	r3, [sp, #12]
 80067c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067c8:	444b      	add	r3, r9
 80067ca:	9309      	str	r3, [sp, #36]	; 0x24
 80067cc:	e76d      	b.n	80066aa <_svfiprintf_r+0x4a>
 80067ce:	fb05 3202 	mla	r2, r5, r2, r3
 80067d2:	2001      	movs	r0, #1
 80067d4:	460f      	mov	r7, r1
 80067d6:	e7a6      	b.n	8006726 <_svfiprintf_r+0xc6>
 80067d8:	2300      	movs	r3, #0
 80067da:	3701      	adds	r7, #1
 80067dc:	9305      	str	r3, [sp, #20]
 80067de:	4619      	mov	r1, r3
 80067e0:	250a      	movs	r5, #10
 80067e2:	4638      	mov	r0, r7
 80067e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067e8:	3a30      	subs	r2, #48	; 0x30
 80067ea:	2a09      	cmp	r2, #9
 80067ec:	d903      	bls.n	80067f6 <_svfiprintf_r+0x196>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d0c8      	beq.n	8006784 <_svfiprintf_r+0x124>
 80067f2:	9105      	str	r1, [sp, #20]
 80067f4:	e7c6      	b.n	8006784 <_svfiprintf_r+0x124>
 80067f6:	fb05 2101 	mla	r1, r5, r1, r2
 80067fa:	2301      	movs	r3, #1
 80067fc:	4607      	mov	r7, r0
 80067fe:	e7f0      	b.n	80067e2 <_svfiprintf_r+0x182>
 8006800:	ab03      	add	r3, sp, #12
 8006802:	9300      	str	r3, [sp, #0]
 8006804:	4622      	mov	r2, r4
 8006806:	4b11      	ldr	r3, [pc, #68]	; (800684c <_svfiprintf_r+0x1ec>)
 8006808:	a904      	add	r1, sp, #16
 800680a:	4640      	mov	r0, r8
 800680c:	f3af 8000 	nop.w
 8006810:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006814:	4681      	mov	r9, r0
 8006816:	d1d6      	bne.n	80067c6 <_svfiprintf_r+0x166>
 8006818:	89a3      	ldrh	r3, [r4, #12]
 800681a:	065b      	lsls	r3, r3, #25
 800681c:	f53f af35 	bmi.w	800668a <_svfiprintf_r+0x2a>
 8006820:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006822:	b01d      	add	sp, #116	; 0x74
 8006824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006828:	ab03      	add	r3, sp, #12
 800682a:	9300      	str	r3, [sp, #0]
 800682c:	4622      	mov	r2, r4
 800682e:	4b07      	ldr	r3, [pc, #28]	; (800684c <_svfiprintf_r+0x1ec>)
 8006830:	a904      	add	r1, sp, #16
 8006832:	4640      	mov	r0, r8
 8006834:	f000 f882 	bl	800693c <_printf_i>
 8006838:	e7ea      	b.n	8006810 <_svfiprintf_r+0x1b0>
 800683a:	bf00      	nop
 800683c:	08006c7c 	.word	0x08006c7c
 8006840:	08006c82 	.word	0x08006c82
 8006844:	08006c86 	.word	0x08006c86
 8006848:	00000000 	.word	0x00000000
 800684c:	080065ad 	.word	0x080065ad

08006850 <_printf_common>:
 8006850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006854:	4691      	mov	r9, r2
 8006856:	461f      	mov	r7, r3
 8006858:	688a      	ldr	r2, [r1, #8]
 800685a:	690b      	ldr	r3, [r1, #16]
 800685c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006860:	4293      	cmp	r3, r2
 8006862:	bfb8      	it	lt
 8006864:	4613      	movlt	r3, r2
 8006866:	f8c9 3000 	str.w	r3, [r9]
 800686a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800686e:	4606      	mov	r6, r0
 8006870:	460c      	mov	r4, r1
 8006872:	b112      	cbz	r2, 800687a <_printf_common+0x2a>
 8006874:	3301      	adds	r3, #1
 8006876:	f8c9 3000 	str.w	r3, [r9]
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	0699      	lsls	r1, r3, #26
 800687e:	bf42      	ittt	mi
 8006880:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006884:	3302      	addmi	r3, #2
 8006886:	f8c9 3000 	strmi.w	r3, [r9]
 800688a:	6825      	ldr	r5, [r4, #0]
 800688c:	f015 0506 	ands.w	r5, r5, #6
 8006890:	d107      	bne.n	80068a2 <_printf_common+0x52>
 8006892:	f104 0a19 	add.w	sl, r4, #25
 8006896:	68e3      	ldr	r3, [r4, #12]
 8006898:	f8d9 2000 	ldr.w	r2, [r9]
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	42ab      	cmp	r3, r5
 80068a0:	dc28      	bgt.n	80068f4 <_printf_common+0xa4>
 80068a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80068a6:	6822      	ldr	r2, [r4, #0]
 80068a8:	3300      	adds	r3, #0
 80068aa:	bf18      	it	ne
 80068ac:	2301      	movne	r3, #1
 80068ae:	0692      	lsls	r2, r2, #26
 80068b0:	d42d      	bmi.n	800690e <_printf_common+0xbe>
 80068b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068b6:	4639      	mov	r1, r7
 80068b8:	4630      	mov	r0, r6
 80068ba:	47c0      	blx	r8
 80068bc:	3001      	adds	r0, #1
 80068be:	d020      	beq.n	8006902 <_printf_common+0xb2>
 80068c0:	6823      	ldr	r3, [r4, #0]
 80068c2:	68e5      	ldr	r5, [r4, #12]
 80068c4:	f8d9 2000 	ldr.w	r2, [r9]
 80068c8:	f003 0306 	and.w	r3, r3, #6
 80068cc:	2b04      	cmp	r3, #4
 80068ce:	bf08      	it	eq
 80068d0:	1aad      	subeq	r5, r5, r2
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	6922      	ldr	r2, [r4, #16]
 80068d6:	bf0c      	ite	eq
 80068d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068dc:	2500      	movne	r5, #0
 80068de:	4293      	cmp	r3, r2
 80068e0:	bfc4      	itt	gt
 80068e2:	1a9b      	subgt	r3, r3, r2
 80068e4:	18ed      	addgt	r5, r5, r3
 80068e6:	f04f 0900 	mov.w	r9, #0
 80068ea:	341a      	adds	r4, #26
 80068ec:	454d      	cmp	r5, r9
 80068ee:	d11a      	bne.n	8006926 <_printf_common+0xd6>
 80068f0:	2000      	movs	r0, #0
 80068f2:	e008      	b.n	8006906 <_printf_common+0xb6>
 80068f4:	2301      	movs	r3, #1
 80068f6:	4652      	mov	r2, sl
 80068f8:	4639      	mov	r1, r7
 80068fa:	4630      	mov	r0, r6
 80068fc:	47c0      	blx	r8
 80068fe:	3001      	adds	r0, #1
 8006900:	d103      	bne.n	800690a <_printf_common+0xba>
 8006902:	f04f 30ff 	mov.w	r0, #4294967295
 8006906:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800690a:	3501      	adds	r5, #1
 800690c:	e7c3      	b.n	8006896 <_printf_common+0x46>
 800690e:	18e1      	adds	r1, r4, r3
 8006910:	1c5a      	adds	r2, r3, #1
 8006912:	2030      	movs	r0, #48	; 0x30
 8006914:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006918:	4422      	add	r2, r4
 800691a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800691e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006922:	3302      	adds	r3, #2
 8006924:	e7c5      	b.n	80068b2 <_printf_common+0x62>
 8006926:	2301      	movs	r3, #1
 8006928:	4622      	mov	r2, r4
 800692a:	4639      	mov	r1, r7
 800692c:	4630      	mov	r0, r6
 800692e:	47c0      	blx	r8
 8006930:	3001      	adds	r0, #1
 8006932:	d0e6      	beq.n	8006902 <_printf_common+0xb2>
 8006934:	f109 0901 	add.w	r9, r9, #1
 8006938:	e7d8      	b.n	80068ec <_printf_common+0x9c>
	...

0800693c <_printf_i>:
 800693c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006940:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006944:	460c      	mov	r4, r1
 8006946:	7e09      	ldrb	r1, [r1, #24]
 8006948:	b085      	sub	sp, #20
 800694a:	296e      	cmp	r1, #110	; 0x6e
 800694c:	4617      	mov	r7, r2
 800694e:	4606      	mov	r6, r0
 8006950:	4698      	mov	r8, r3
 8006952:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006954:	f000 80b3 	beq.w	8006abe <_printf_i+0x182>
 8006958:	d822      	bhi.n	80069a0 <_printf_i+0x64>
 800695a:	2963      	cmp	r1, #99	; 0x63
 800695c:	d036      	beq.n	80069cc <_printf_i+0x90>
 800695e:	d80a      	bhi.n	8006976 <_printf_i+0x3a>
 8006960:	2900      	cmp	r1, #0
 8006962:	f000 80b9 	beq.w	8006ad8 <_printf_i+0x19c>
 8006966:	2958      	cmp	r1, #88	; 0x58
 8006968:	f000 8083 	beq.w	8006a72 <_printf_i+0x136>
 800696c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006970:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006974:	e032      	b.n	80069dc <_printf_i+0xa0>
 8006976:	2964      	cmp	r1, #100	; 0x64
 8006978:	d001      	beq.n	800697e <_printf_i+0x42>
 800697a:	2969      	cmp	r1, #105	; 0x69
 800697c:	d1f6      	bne.n	800696c <_printf_i+0x30>
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	6813      	ldr	r3, [r2, #0]
 8006982:	0605      	lsls	r5, r0, #24
 8006984:	f103 0104 	add.w	r1, r3, #4
 8006988:	d52a      	bpl.n	80069e0 <_printf_i+0xa4>
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	6011      	str	r1, [r2, #0]
 800698e:	2b00      	cmp	r3, #0
 8006990:	da03      	bge.n	800699a <_printf_i+0x5e>
 8006992:	222d      	movs	r2, #45	; 0x2d
 8006994:	425b      	negs	r3, r3
 8006996:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800699a:	486f      	ldr	r0, [pc, #444]	; (8006b58 <_printf_i+0x21c>)
 800699c:	220a      	movs	r2, #10
 800699e:	e039      	b.n	8006a14 <_printf_i+0xd8>
 80069a0:	2973      	cmp	r1, #115	; 0x73
 80069a2:	f000 809d 	beq.w	8006ae0 <_printf_i+0x1a4>
 80069a6:	d808      	bhi.n	80069ba <_printf_i+0x7e>
 80069a8:	296f      	cmp	r1, #111	; 0x6f
 80069aa:	d020      	beq.n	80069ee <_printf_i+0xb2>
 80069ac:	2970      	cmp	r1, #112	; 0x70
 80069ae:	d1dd      	bne.n	800696c <_printf_i+0x30>
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	f043 0320 	orr.w	r3, r3, #32
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	e003      	b.n	80069c2 <_printf_i+0x86>
 80069ba:	2975      	cmp	r1, #117	; 0x75
 80069bc:	d017      	beq.n	80069ee <_printf_i+0xb2>
 80069be:	2978      	cmp	r1, #120	; 0x78
 80069c0:	d1d4      	bne.n	800696c <_printf_i+0x30>
 80069c2:	2378      	movs	r3, #120	; 0x78
 80069c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069c8:	4864      	ldr	r0, [pc, #400]	; (8006b5c <_printf_i+0x220>)
 80069ca:	e055      	b.n	8006a78 <_printf_i+0x13c>
 80069cc:	6813      	ldr	r3, [r2, #0]
 80069ce:	1d19      	adds	r1, r3, #4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6011      	str	r1, [r2, #0]
 80069d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069dc:	2301      	movs	r3, #1
 80069de:	e08c      	b.n	8006afa <_printf_i+0x1be>
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	6011      	str	r1, [r2, #0]
 80069e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069e8:	bf18      	it	ne
 80069ea:	b21b      	sxthne	r3, r3
 80069ec:	e7cf      	b.n	800698e <_printf_i+0x52>
 80069ee:	6813      	ldr	r3, [r2, #0]
 80069f0:	6825      	ldr	r5, [r4, #0]
 80069f2:	1d18      	adds	r0, r3, #4
 80069f4:	6010      	str	r0, [r2, #0]
 80069f6:	0628      	lsls	r0, r5, #24
 80069f8:	d501      	bpl.n	80069fe <_printf_i+0xc2>
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	e002      	b.n	8006a04 <_printf_i+0xc8>
 80069fe:	0668      	lsls	r0, r5, #25
 8006a00:	d5fb      	bpl.n	80069fa <_printf_i+0xbe>
 8006a02:	881b      	ldrh	r3, [r3, #0]
 8006a04:	4854      	ldr	r0, [pc, #336]	; (8006b58 <_printf_i+0x21c>)
 8006a06:	296f      	cmp	r1, #111	; 0x6f
 8006a08:	bf14      	ite	ne
 8006a0a:	220a      	movne	r2, #10
 8006a0c:	2208      	moveq	r2, #8
 8006a0e:	2100      	movs	r1, #0
 8006a10:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a14:	6865      	ldr	r5, [r4, #4]
 8006a16:	60a5      	str	r5, [r4, #8]
 8006a18:	2d00      	cmp	r5, #0
 8006a1a:	f2c0 8095 	blt.w	8006b48 <_printf_i+0x20c>
 8006a1e:	6821      	ldr	r1, [r4, #0]
 8006a20:	f021 0104 	bic.w	r1, r1, #4
 8006a24:	6021      	str	r1, [r4, #0]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d13d      	bne.n	8006aa6 <_printf_i+0x16a>
 8006a2a:	2d00      	cmp	r5, #0
 8006a2c:	f040 808e 	bne.w	8006b4c <_printf_i+0x210>
 8006a30:	4665      	mov	r5, ip
 8006a32:	2a08      	cmp	r2, #8
 8006a34:	d10b      	bne.n	8006a4e <_printf_i+0x112>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	07db      	lsls	r3, r3, #31
 8006a3a:	d508      	bpl.n	8006a4e <_printf_i+0x112>
 8006a3c:	6923      	ldr	r3, [r4, #16]
 8006a3e:	6862      	ldr	r2, [r4, #4]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	bfde      	ittt	le
 8006a44:	2330      	movle	r3, #48	; 0x30
 8006a46:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a4a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a4e:	ebac 0305 	sub.w	r3, ip, r5
 8006a52:	6123      	str	r3, [r4, #16]
 8006a54:	f8cd 8000 	str.w	r8, [sp]
 8006a58:	463b      	mov	r3, r7
 8006a5a:	aa03      	add	r2, sp, #12
 8006a5c:	4621      	mov	r1, r4
 8006a5e:	4630      	mov	r0, r6
 8006a60:	f7ff fef6 	bl	8006850 <_printf_common>
 8006a64:	3001      	adds	r0, #1
 8006a66:	d14d      	bne.n	8006b04 <_printf_i+0x1c8>
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	b005      	add	sp, #20
 8006a6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a72:	4839      	ldr	r0, [pc, #228]	; (8006b58 <_printf_i+0x21c>)
 8006a74:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a78:	6813      	ldr	r3, [r2, #0]
 8006a7a:	6821      	ldr	r1, [r4, #0]
 8006a7c:	1d1d      	adds	r5, r3, #4
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	6015      	str	r5, [r2, #0]
 8006a82:	060a      	lsls	r2, r1, #24
 8006a84:	d50b      	bpl.n	8006a9e <_printf_i+0x162>
 8006a86:	07ca      	lsls	r2, r1, #31
 8006a88:	bf44      	itt	mi
 8006a8a:	f041 0120 	orrmi.w	r1, r1, #32
 8006a8e:	6021      	strmi	r1, [r4, #0]
 8006a90:	b91b      	cbnz	r3, 8006a9a <_printf_i+0x15e>
 8006a92:	6822      	ldr	r2, [r4, #0]
 8006a94:	f022 0220 	bic.w	r2, r2, #32
 8006a98:	6022      	str	r2, [r4, #0]
 8006a9a:	2210      	movs	r2, #16
 8006a9c:	e7b7      	b.n	8006a0e <_printf_i+0xd2>
 8006a9e:	064d      	lsls	r5, r1, #25
 8006aa0:	bf48      	it	mi
 8006aa2:	b29b      	uxthmi	r3, r3
 8006aa4:	e7ef      	b.n	8006a86 <_printf_i+0x14a>
 8006aa6:	4665      	mov	r5, ip
 8006aa8:	fbb3 f1f2 	udiv	r1, r3, r2
 8006aac:	fb02 3311 	mls	r3, r2, r1, r3
 8006ab0:	5cc3      	ldrb	r3, [r0, r3]
 8006ab2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006ab6:	460b      	mov	r3, r1
 8006ab8:	2900      	cmp	r1, #0
 8006aba:	d1f5      	bne.n	8006aa8 <_printf_i+0x16c>
 8006abc:	e7b9      	b.n	8006a32 <_printf_i+0xf6>
 8006abe:	6813      	ldr	r3, [r2, #0]
 8006ac0:	6825      	ldr	r5, [r4, #0]
 8006ac2:	6961      	ldr	r1, [r4, #20]
 8006ac4:	1d18      	adds	r0, r3, #4
 8006ac6:	6010      	str	r0, [r2, #0]
 8006ac8:	0628      	lsls	r0, r5, #24
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	d501      	bpl.n	8006ad2 <_printf_i+0x196>
 8006ace:	6019      	str	r1, [r3, #0]
 8006ad0:	e002      	b.n	8006ad8 <_printf_i+0x19c>
 8006ad2:	066a      	lsls	r2, r5, #25
 8006ad4:	d5fb      	bpl.n	8006ace <_printf_i+0x192>
 8006ad6:	8019      	strh	r1, [r3, #0]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	4665      	mov	r5, ip
 8006ade:	e7b9      	b.n	8006a54 <_printf_i+0x118>
 8006ae0:	6813      	ldr	r3, [r2, #0]
 8006ae2:	1d19      	adds	r1, r3, #4
 8006ae4:	6011      	str	r1, [r2, #0]
 8006ae6:	681d      	ldr	r5, [r3, #0]
 8006ae8:	6862      	ldr	r2, [r4, #4]
 8006aea:	2100      	movs	r1, #0
 8006aec:	4628      	mov	r0, r5
 8006aee:	f7f9 fb87 	bl	8000200 <memchr>
 8006af2:	b108      	cbz	r0, 8006af8 <_printf_i+0x1bc>
 8006af4:	1b40      	subs	r0, r0, r5
 8006af6:	6060      	str	r0, [r4, #4]
 8006af8:	6863      	ldr	r3, [r4, #4]
 8006afa:	6123      	str	r3, [r4, #16]
 8006afc:	2300      	movs	r3, #0
 8006afe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b02:	e7a7      	b.n	8006a54 <_printf_i+0x118>
 8006b04:	6923      	ldr	r3, [r4, #16]
 8006b06:	462a      	mov	r2, r5
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	47c0      	blx	r8
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d0aa      	beq.n	8006a68 <_printf_i+0x12c>
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	079b      	lsls	r3, r3, #30
 8006b16:	d413      	bmi.n	8006b40 <_printf_i+0x204>
 8006b18:	68e0      	ldr	r0, [r4, #12]
 8006b1a:	9b03      	ldr	r3, [sp, #12]
 8006b1c:	4298      	cmp	r0, r3
 8006b1e:	bfb8      	it	lt
 8006b20:	4618      	movlt	r0, r3
 8006b22:	e7a3      	b.n	8006a6c <_printf_i+0x130>
 8006b24:	2301      	movs	r3, #1
 8006b26:	464a      	mov	r2, r9
 8006b28:	4639      	mov	r1, r7
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	47c0      	blx	r8
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d09a      	beq.n	8006a68 <_printf_i+0x12c>
 8006b32:	3501      	adds	r5, #1
 8006b34:	68e3      	ldr	r3, [r4, #12]
 8006b36:	9a03      	ldr	r2, [sp, #12]
 8006b38:	1a9b      	subs	r3, r3, r2
 8006b3a:	42ab      	cmp	r3, r5
 8006b3c:	dcf2      	bgt.n	8006b24 <_printf_i+0x1e8>
 8006b3e:	e7eb      	b.n	8006b18 <_printf_i+0x1dc>
 8006b40:	2500      	movs	r5, #0
 8006b42:	f104 0919 	add.w	r9, r4, #25
 8006b46:	e7f5      	b.n	8006b34 <_printf_i+0x1f8>
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1ac      	bne.n	8006aa6 <_printf_i+0x16a>
 8006b4c:	7803      	ldrb	r3, [r0, #0]
 8006b4e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b52:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b56:	e76c      	b.n	8006a32 <_printf_i+0xf6>
 8006b58:	08006c8d 	.word	0x08006c8d
 8006b5c:	08006c9e 	.word	0x08006c9e

08006b60 <memcpy>:
 8006b60:	b510      	push	{r4, lr}
 8006b62:	1e43      	subs	r3, r0, #1
 8006b64:	440a      	add	r2, r1
 8006b66:	4291      	cmp	r1, r2
 8006b68:	d100      	bne.n	8006b6c <memcpy+0xc>
 8006b6a:	bd10      	pop	{r4, pc}
 8006b6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b70:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b74:	e7f7      	b.n	8006b66 <memcpy+0x6>

08006b76 <memmove>:
 8006b76:	4288      	cmp	r0, r1
 8006b78:	b510      	push	{r4, lr}
 8006b7a:	eb01 0302 	add.w	r3, r1, r2
 8006b7e:	d807      	bhi.n	8006b90 <memmove+0x1a>
 8006b80:	1e42      	subs	r2, r0, #1
 8006b82:	4299      	cmp	r1, r3
 8006b84:	d00a      	beq.n	8006b9c <memmove+0x26>
 8006b86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b8a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006b8e:	e7f8      	b.n	8006b82 <memmove+0xc>
 8006b90:	4283      	cmp	r3, r0
 8006b92:	d9f5      	bls.n	8006b80 <memmove+0xa>
 8006b94:	1881      	adds	r1, r0, r2
 8006b96:	1ad2      	subs	r2, r2, r3
 8006b98:	42d3      	cmn	r3, r2
 8006b9a:	d100      	bne.n	8006b9e <memmove+0x28>
 8006b9c:	bd10      	pop	{r4, pc}
 8006b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ba2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006ba6:	e7f7      	b.n	8006b98 <memmove+0x22>

08006ba8 <_realloc_r>:
 8006ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006baa:	4607      	mov	r7, r0
 8006bac:	4614      	mov	r4, r2
 8006bae:	460e      	mov	r6, r1
 8006bb0:	b921      	cbnz	r1, 8006bbc <_realloc_r+0x14>
 8006bb2:	4611      	mov	r1, r2
 8006bb4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006bb8:	f7ff bc6c 	b.w	8006494 <_malloc_r>
 8006bbc:	b922      	cbnz	r2, 8006bc8 <_realloc_r+0x20>
 8006bbe:	f7ff fc1b 	bl	80063f8 <_free_r>
 8006bc2:	4625      	mov	r5, r4
 8006bc4:	4628      	mov	r0, r5
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	f000 f814 	bl	8006bf4 <_malloc_usable_size_r>
 8006bcc:	42a0      	cmp	r0, r4
 8006bce:	d20f      	bcs.n	8006bf0 <_realloc_r+0x48>
 8006bd0:	4621      	mov	r1, r4
 8006bd2:	4638      	mov	r0, r7
 8006bd4:	f7ff fc5e 	bl	8006494 <_malloc_r>
 8006bd8:	4605      	mov	r5, r0
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	d0f2      	beq.n	8006bc4 <_realloc_r+0x1c>
 8006bde:	4631      	mov	r1, r6
 8006be0:	4622      	mov	r2, r4
 8006be2:	f7ff ffbd 	bl	8006b60 <memcpy>
 8006be6:	4631      	mov	r1, r6
 8006be8:	4638      	mov	r0, r7
 8006bea:	f7ff fc05 	bl	80063f8 <_free_r>
 8006bee:	e7e9      	b.n	8006bc4 <_realloc_r+0x1c>
 8006bf0:	4635      	mov	r5, r6
 8006bf2:	e7e7      	b.n	8006bc4 <_realloc_r+0x1c>

08006bf4 <_malloc_usable_size_r>:
 8006bf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf8:	1f18      	subs	r0, r3, #4
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bfbc      	itt	lt
 8006bfe:	580b      	ldrlt	r3, [r1, r0]
 8006c00:	18c0      	addlt	r0, r0, r3
 8006c02:	4770      	bx	lr

08006c04 <_init>:
 8006c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c06:	bf00      	nop
 8006c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c0a:	bc08      	pop	{r3}
 8006c0c:	469e      	mov	lr, r3
 8006c0e:	4770      	bx	lr

08006c10 <_fini>:
 8006c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c12:	bf00      	nop
 8006c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c16:	bc08      	pop	{r3}
 8006c18:	469e      	mov	lr, r3
 8006c1a:	4770      	bx	lr
