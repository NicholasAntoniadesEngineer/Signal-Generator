
STM32f439ZIT6U Aether Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c8  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005278  08005278  00015278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005298  08005298  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005298  08005298  00015298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052a0  080052a0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052a0  080052a0  000152a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052a4  080052a4  000152a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080052a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  2000000c  080052b4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f0  080052b4  000202f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d49f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002399  00000000  00000000  0002d4db  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a80  00000000  00000000  0002f878  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000938  00000000  00000000  000302f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003685  00000000  00000000  00030c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b418  00000000  00000000  000342b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000debe7  00000000  00000000  0003f6cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011e2b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002988  00000000  00000000  0011e330  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005260 	.word	0x08005260

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08005260 	.word	0x08005260

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2f>:
 800098c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000990:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000994:	bf24      	itt	cs
 8000996:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800099a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800099e:	d90d      	bls.n	80009bc <__aeabi_d2f+0x30>
 80009a0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009a4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009a8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009b0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009b4:	bf08      	it	eq
 80009b6:	f020 0001 	biceq.w	r0, r0, #1
 80009ba:	4770      	bx	lr
 80009bc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009c0:	d121      	bne.n	8000a06 <__aeabi_d2f+0x7a>
 80009c2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009c6:	bfbc      	itt	lt
 80009c8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009cc:	4770      	bxlt	lr
 80009ce:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009d2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009d6:	f1c2 0218 	rsb	r2, r2, #24
 80009da:	f1c2 0c20 	rsb	ip, r2, #32
 80009de:	fa10 f30c 	lsls.w	r3, r0, ip
 80009e2:	fa20 f002 	lsr.w	r0, r0, r2
 80009e6:	bf18      	it	ne
 80009e8:	f040 0001 	orrne.w	r0, r0, #1
 80009ec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009f0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009f4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009f8:	ea40 000c 	orr.w	r0, r0, ip
 80009fc:	fa23 f302 	lsr.w	r3, r3, r2
 8000a00:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a04:	e7cc      	b.n	80009a0 <__aeabi_d2f+0x14>
 8000a06:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a0a:	d107      	bne.n	8000a1c <__aeabi_d2f+0x90>
 8000a0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a10:	bf1e      	ittt	ne
 8000a12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a1a:	4770      	bxne	lr
 8000a1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop

08000a2c <__aeabi_uldivmod>:
 8000a2c:	b953      	cbnz	r3, 8000a44 <__aeabi_uldivmod+0x18>
 8000a2e:	b94a      	cbnz	r2, 8000a44 <__aeabi_uldivmod+0x18>
 8000a30:	2900      	cmp	r1, #0
 8000a32:	bf08      	it	eq
 8000a34:	2800      	cmpeq	r0, #0
 8000a36:	bf1c      	itt	ne
 8000a38:	f04f 31ff 	movne.w	r1, #4294967295
 8000a3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a40:	f000 b972 	b.w	8000d28 <__aeabi_idiv0>
 8000a44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a4c:	f000 f806 	bl	8000a5c <__udivmoddi4>
 8000a50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a58:	b004      	add	sp, #16
 8000a5a:	4770      	bx	lr

08000a5c <__udivmoddi4>:
 8000a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a60:	9e08      	ldr	r6, [sp, #32]
 8000a62:	4604      	mov	r4, r0
 8000a64:	4688      	mov	r8, r1
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d14b      	bne.n	8000b02 <__udivmoddi4+0xa6>
 8000a6a:	428a      	cmp	r2, r1
 8000a6c:	4615      	mov	r5, r2
 8000a6e:	d967      	bls.n	8000b40 <__udivmoddi4+0xe4>
 8000a70:	fab2 f282 	clz	r2, r2
 8000a74:	b14a      	cbz	r2, 8000a8a <__udivmoddi4+0x2e>
 8000a76:	f1c2 0720 	rsb	r7, r2, #32
 8000a7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000a82:	4095      	lsls	r5, r2
 8000a84:	ea47 0803 	orr.w	r8, r7, r3
 8000a88:	4094      	lsls	r4, r2
 8000a8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a8e:	0c23      	lsrs	r3, r4, #16
 8000a90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a94:	fa1f fc85 	uxth.w	ip, r5
 8000a98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000aa0:	fb07 f10c 	mul.w	r1, r7, ip
 8000aa4:	4299      	cmp	r1, r3
 8000aa6:	d909      	bls.n	8000abc <__udivmoddi4+0x60>
 8000aa8:	18eb      	adds	r3, r5, r3
 8000aaa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aae:	f080 811b 	bcs.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab2:	4299      	cmp	r1, r3
 8000ab4:	f240 8118 	bls.w	8000ce8 <__udivmoddi4+0x28c>
 8000ab8:	3f02      	subs	r7, #2
 8000aba:	442b      	add	r3, r5
 8000abc:	1a5b      	subs	r3, r3, r1
 8000abe:	b2a4      	uxth	r4, r4
 8000ac0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ac4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ac8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000acc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ad0:	45a4      	cmp	ip, r4
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x8c>
 8000ad4:	192c      	adds	r4, r5, r4
 8000ad6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ada:	f080 8107 	bcs.w	8000cec <__udivmoddi4+0x290>
 8000ade:	45a4      	cmp	ip, r4
 8000ae0:	f240 8104 	bls.w	8000cec <__udivmoddi4+0x290>
 8000ae4:	3802      	subs	r0, #2
 8000ae6:	442c      	add	r4, r5
 8000ae8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000aec:	eba4 040c 	sub.w	r4, r4, ip
 8000af0:	2700      	movs	r7, #0
 8000af2:	b11e      	cbz	r6, 8000afc <__udivmoddi4+0xa0>
 8000af4:	40d4      	lsrs	r4, r2
 8000af6:	2300      	movs	r3, #0
 8000af8:	e9c6 4300 	strd	r4, r3, [r6]
 8000afc:	4639      	mov	r1, r7
 8000afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d909      	bls.n	8000b1a <__udivmoddi4+0xbe>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	f000 80eb 	beq.w	8000ce2 <__udivmoddi4+0x286>
 8000b0c:	2700      	movs	r7, #0
 8000b0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b12:	4638      	mov	r0, r7
 8000b14:	4639      	mov	r1, r7
 8000b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b1a:	fab3 f783 	clz	r7, r3
 8000b1e:	2f00      	cmp	r7, #0
 8000b20:	d147      	bne.n	8000bb2 <__udivmoddi4+0x156>
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d302      	bcc.n	8000b2c <__udivmoddi4+0xd0>
 8000b26:	4282      	cmp	r2, r0
 8000b28:	f200 80fa 	bhi.w	8000d20 <__udivmoddi4+0x2c4>
 8000b2c:	1a84      	subs	r4, r0, r2
 8000b2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b32:	2001      	movs	r0, #1
 8000b34:	4698      	mov	r8, r3
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	d0e0      	beq.n	8000afc <__udivmoddi4+0xa0>
 8000b3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b3e:	e7dd      	b.n	8000afc <__udivmoddi4+0xa0>
 8000b40:	b902      	cbnz	r2, 8000b44 <__udivmoddi4+0xe8>
 8000b42:	deff      	udf	#255	; 0xff
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	2a00      	cmp	r2, #0
 8000b4a:	f040 808f 	bne.w	8000c6c <__udivmoddi4+0x210>
 8000b4e:	1b49      	subs	r1, r1, r5
 8000b50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b54:	fa1f f885 	uxth.w	r8, r5
 8000b58:	2701      	movs	r7, #1
 8000b5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b5e:	0c23      	lsrs	r3, r4, #16
 8000b60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b68:	fb08 f10c 	mul.w	r1, r8, ip
 8000b6c:	4299      	cmp	r1, r3
 8000b6e:	d907      	bls.n	8000b80 <__udivmoddi4+0x124>
 8000b70:	18eb      	adds	r3, r5, r3
 8000b72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b76:	d202      	bcs.n	8000b7e <__udivmoddi4+0x122>
 8000b78:	4299      	cmp	r1, r3
 8000b7a:	f200 80cd 	bhi.w	8000d18 <__udivmoddi4+0x2bc>
 8000b7e:	4684      	mov	ip, r0
 8000b80:	1a59      	subs	r1, r3, r1
 8000b82:	b2a3      	uxth	r3, r4
 8000b84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b90:	fb08 f800 	mul.w	r8, r8, r0
 8000b94:	45a0      	cmp	r8, r4
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x14c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x14a>
 8000ba0:	45a0      	cmp	r8, r4
 8000ba2:	f200 80b6 	bhi.w	8000d12 <__udivmoddi4+0x2b6>
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	eba4 0408 	sub.w	r4, r4, r8
 8000bac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bb0:	e79f      	b.n	8000af2 <__udivmoddi4+0x96>
 8000bb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bb6:	40bb      	lsls	r3, r7
 8000bb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000bc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bcc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bd0:	4325      	orrs	r5, r4
 8000bd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bd6:	0c2c      	lsrs	r4, r5, #16
 8000bd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bdc:	fa1f fa8e 	uxth.w	sl, lr
 8000be0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000be4:	fb09 f40a 	mul.w	r4, r9, sl
 8000be8:	429c      	cmp	r4, r3
 8000bea:	fa02 f207 	lsl.w	r2, r2, r7
 8000bee:	fa00 f107 	lsl.w	r1, r0, r7
 8000bf2:	d90b      	bls.n	8000c0c <__udivmoddi4+0x1b0>
 8000bf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000bf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000bfc:	f080 8087 	bcs.w	8000d0e <__udivmoddi4+0x2b2>
 8000c00:	429c      	cmp	r4, r3
 8000c02:	f240 8084 	bls.w	8000d0e <__udivmoddi4+0x2b2>
 8000c06:	f1a9 0902 	sub.w	r9, r9, #2
 8000c0a:	4473      	add	r3, lr
 8000c0c:	1b1b      	subs	r3, r3, r4
 8000c0e:	b2ad      	uxth	r5, r5
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3310 	mls	r3, r8, r0, r3
 8000c18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c20:	45a2      	cmp	sl, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x1da>
 8000c24:	eb1e 0404 	adds.w	r4, lr, r4
 8000c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c2c:	d26b      	bcs.n	8000d06 <__udivmoddi4+0x2aa>
 8000c2e:	45a2      	cmp	sl, r4
 8000c30:	d969      	bls.n	8000d06 <__udivmoddi4+0x2aa>
 8000c32:	3802      	subs	r0, #2
 8000c34:	4474      	add	r4, lr
 8000c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c3e:	eba4 040a 	sub.w	r4, r4, sl
 8000c42:	454c      	cmp	r4, r9
 8000c44:	46c2      	mov	sl, r8
 8000c46:	464b      	mov	r3, r9
 8000c48:	d354      	bcc.n	8000cf4 <__udivmoddi4+0x298>
 8000c4a:	d051      	beq.n	8000cf0 <__udivmoddi4+0x294>
 8000c4c:	2e00      	cmp	r6, #0
 8000c4e:	d069      	beq.n	8000d24 <__udivmoddi4+0x2c8>
 8000c50:	ebb1 050a 	subs.w	r5, r1, sl
 8000c54:	eb64 0403 	sbc.w	r4, r4, r3
 8000c58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c5c:	40fd      	lsrs	r5, r7
 8000c5e:	40fc      	lsrs	r4, r7
 8000c60:	ea4c 0505 	orr.w	r5, ip, r5
 8000c64:	e9c6 5400 	strd	r5, r4, [r6]
 8000c68:	2700      	movs	r7, #0
 8000c6a:	e747      	b.n	8000afc <__udivmoddi4+0xa0>
 8000c6c:	f1c2 0320 	rsb	r3, r2, #32
 8000c70:	fa20 f703 	lsr.w	r7, r0, r3
 8000c74:	4095      	lsls	r5, r2
 8000c76:	fa01 f002 	lsl.w	r0, r1, r2
 8000c7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c82:	4338      	orrs	r0, r7
 8000c84:	0c01      	lsrs	r1, r0, #16
 8000c86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c8a:	fa1f f885 	uxth.w	r8, r5
 8000c8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c96:	fb07 f308 	mul.w	r3, r7, r8
 8000c9a:	428b      	cmp	r3, r1
 8000c9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x256>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ca8:	d22f      	bcs.n	8000d0a <__udivmoddi4+0x2ae>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d92d      	bls.n	8000d0a <__udivmoddi4+0x2ae>
 8000cae:	3f02      	subs	r7, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	1acb      	subs	r3, r1, r3
 8000cb4:	b281      	uxth	r1, r0
 8000cb6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cc2:	fb00 f308 	mul.w	r3, r0, r8
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x27e>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cd0:	d217      	bcs.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d915      	bls.n	8000d02 <__udivmoddi4+0x2a6>
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1ac9      	subs	r1, r1, r3
 8000cdc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ce0:	e73b      	b.n	8000b5a <__udivmoddi4+0xfe>
 8000ce2:	4637      	mov	r7, r6
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e709      	b.n	8000afc <__udivmoddi4+0xa0>
 8000ce8:	4607      	mov	r7, r0
 8000cea:	e6e7      	b.n	8000abc <__udivmoddi4+0x60>
 8000cec:	4618      	mov	r0, r3
 8000cee:	e6fb      	b.n	8000ae8 <__udivmoddi4+0x8c>
 8000cf0:	4541      	cmp	r1, r8
 8000cf2:	d2ab      	bcs.n	8000c4c <__udivmoddi4+0x1f0>
 8000cf4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000cf8:	eb69 020e 	sbc.w	r2, r9, lr
 8000cfc:	3801      	subs	r0, #1
 8000cfe:	4613      	mov	r3, r2
 8000d00:	e7a4      	b.n	8000c4c <__udivmoddi4+0x1f0>
 8000d02:	4660      	mov	r0, ip
 8000d04:	e7e9      	b.n	8000cda <__udivmoddi4+0x27e>
 8000d06:	4618      	mov	r0, r3
 8000d08:	e795      	b.n	8000c36 <__udivmoddi4+0x1da>
 8000d0a:	4667      	mov	r7, ip
 8000d0c:	e7d1      	b.n	8000cb2 <__udivmoddi4+0x256>
 8000d0e:	4681      	mov	r9, r0
 8000d10:	e77c      	b.n	8000c0c <__udivmoddi4+0x1b0>
 8000d12:	3802      	subs	r0, #2
 8000d14:	442c      	add	r4, r5
 8000d16:	e747      	b.n	8000ba8 <__udivmoddi4+0x14c>
 8000d18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d1c:	442b      	add	r3, r5
 8000d1e:	e72f      	b.n	8000b80 <__udivmoddi4+0x124>
 8000d20:	4638      	mov	r0, r7
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xda>
 8000d24:	4637      	mov	r7, r6
 8000d26:	e6e9      	b.n	8000afc <__udivmoddi4+0xa0>

08000d28 <__aeabi_idiv0>:
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop

08000d2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b084      	sub	sp, #16
 8000d30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d32:	463b      	mov	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d3e:	4b21      	ldr	r3, [pc, #132]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <MX_ADC1_Init+0x9c>)
 8000d42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d44:	4b1f      	ldr	r3, [pc, #124]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d46:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d4a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d54:	2201      	movs	r2, #1
 8000d56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d58:	4b1a      	ldr	r3, [pc, #104]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d5e:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d6c:	4b15      	ldr	r3, [pc, #84]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d6e:	4a17      	ldr	r2, [pc, #92]	; (8000dcc <MX_ADC1_Init+0xa0>)
 8000d70:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d86:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d88:	2201      	movs	r2, #1
 8000d8a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000d8e:	f000 fe43 	bl	8001a18 <HAL_ADC_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000d98:	f000 fbb4 	bl	8001504 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000da0:	2301      	movs	r3, #1
 8000da2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000da4:	2300      	movs	r3, #0
 8000da6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	4619      	mov	r1, r3
 8000dac:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <MX_ADC1_Init+0x98>)
 8000dae:	f001 f911 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000db8:	f000 fba4 	bl	8001504 <Error_Handler>
  }

}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	20000098 	.word	0x20000098
 8000dc8:	40012000 	.word	0x40012000
 8000dcc:	0f000001 	.word	0x0f000001

08000dd0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <HAL_ADC_MspInit+0xec>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d15f      	bne.n	8000eb2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <HAL_ADC_MspInit+0xf0>)
 8000df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfa:	4a31      	ldr	r2, [pc, #196]	; (8000ec0 <HAL_ADC_MspInit+0xf0>)
 8000dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e00:	6453      	str	r3, [r2, #68]	; 0x44
 8000e02:	4b2f      	ldr	r3, [pc, #188]	; (8000ec0 <HAL_ADC_MspInit+0xf0>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	613b      	str	r3, [r7, #16]
 8000e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	60fb      	str	r3, [r7, #12]
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <HAL_ADC_MspInit+0xf0>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a2a      	ldr	r2, [pc, #168]	; (8000ec0 <HAL_ADC_MspInit+0xf0>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <HAL_ADC_MspInit+0xf0>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0314 	add.w	r3, r7, #20
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4821      	ldr	r0, [pc, #132]	; (8000ec4 <HAL_ADC_MspInit+0xf4>)
 8000e3e:	f002 f895 	bl	8002f6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e44:	4a21      	ldr	r2, [pc, #132]	; (8000ecc <HAL_ADC_MspInit+0xfc>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e48:	4b1f      	ldr	r3, [pc, #124]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4e:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e62:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e6a:	4b17      	ldr	r3, [pc, #92]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e72:	4b15      	ldr	r3, [pc, #84]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e86:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e88:	f001 fc70 	bl	800276c <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e92:	f000 fb37 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_ADC_MspInit+0xf8>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2012      	movs	r0, #18
 8000ea8:	f001 fc29 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eac:	2012      	movs	r0, #18
 8000eae:	f001 fc42 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40012000 	.word	0x40012000
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	200000e0 	.word	0x200000e0
 8000ecc:	40026410 	.word	0x40026410

08000ed0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	607b      	str	r3, [r7, #4]
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_DMA_Init+0x5c>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <MX_DMA_Init+0x5c>)
 8000ee0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_DMA_Init+0x5c>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2038      	movs	r0, #56	; 0x38
 8000ef8:	f001 fc01 	bl	80026fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000efc:	2038      	movs	r0, #56	; 0x38
 8000efe:	f001 fc1a 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2101      	movs	r1, #1
 8000f06:	203a      	movs	r0, #58	; 0x3a
 8000f08:	f001 fbf9 	bl	80026fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f0c:	203a      	movs	r0, #58	; 0x3a
 8000f0e:	f001 fc12 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2101      	movs	r1, #1
 8000f16:	2046      	movs	r0, #70	; 0x46
 8000f18:	f001 fbf1 	bl	80026fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000f1c:	2046      	movs	r0, #70	; 0x46
 8000f1e:	f001 fc0a 	bl	8002736 <HAL_NVIC_EnableIRQ>

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	4b31      	ldr	r3, [pc, #196]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	4a30      	ldr	r2, [pc, #192]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f50:	f043 0304 	orr.w	r3, r3, #4
 8000f54:	6313      	str	r3, [r2, #48]	; 0x30
 8000f56:	4b2e      	ldr	r3, [pc, #184]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5a:	f003 0304 	and.w	r3, r3, #4
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	4b2a      	ldr	r3, [pc, #168]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a29      	ldr	r2, [pc, #164]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f6c:	f043 0301 	orr.w	r3, r3, #1
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	603b      	str	r3, [r7, #0]
 8000f82:	4b23      	ldr	r3, [pc, #140]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a22      	ldr	r2, [pc, #136]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f88:	f043 0302 	orr.w	r3, r3, #2
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <MX_GPIO_Init+0xe0>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	603b      	str	r3, [r7, #0]
 8000f98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Valve1_Pin|Valve2_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000fa0:	481c      	ldr	r0, [pc, #112]	; (8001014 <MX_GPIO_Init+0xe4>)
 8000fa2:	f002 f98d 	bl	80032c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	4b1a      	ldr	r3, [pc, #104]	; (8001018 <MX_GPIO_Init+0xe8>)
 8000fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 030c 	add.w	r3, r7, #12
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4818      	ldr	r0, [pc, #96]	; (800101c <MX_GPIO_Init+0xec>)
 8000fbc:	f001 ffd6 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Valve1_Pin|Valve2_Pin;
 8000fc0:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000fc4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	480e      	ldr	r0, [pc, #56]	; (8001014 <MX_GPIO_Init+0xe4>)
 8000fda:	f001 ffc7 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fde:	2330      	movs	r3, #48	; 0x30
 8000fe0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4808      	ldr	r0, [pc, #32]	; (8001014 <MX_GPIO_Init+0xe4>)
 8000ff2:	f001 ffbb 	bl	8002f6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2028      	movs	r0, #40	; 0x28
 8000ffc:	f001 fb7f 	bl	80026fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001000:	2028      	movs	r0, #40	; 0x28
 8001002:	f001 fb98 	bl	8002736 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3720      	adds	r7, #32
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40020400 	.word	0x40020400
 8001018:	10110000 	.word	0x10110000
 800101c:	40020800 	.word	0x40020800

08001020 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001026:	f000 fc63 	bl	80018f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800102a:	f000 f85f 	bl	80010ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800102e:	f7ff ff7f 	bl	8000f30 <MX_GPIO_Init>
  MX_DMA_Init();
 8001032:	f7ff ff4d 	bl	8000ed0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001036:	f7ff fe79 	bl	8000d2c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800103a:	f000 fb4d 	bl	80016d8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 800103e:	f000 fa69 	bl	8001514 <MX_RTC_Init>


  while (1)
  {

	HAL_GPIO_TogglePin(GPIOB, Valve1_Pin);
 8001042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001046:	481e      	ldr	r0, [pc, #120]	; (80010c0 <main+0xa0>)
 8001048:	f002 f953 	bl	80032f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, Valve2_Pin);
 800104c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001050:	481b      	ldr	r0, [pc, #108]	; (80010c0 <main+0xa0>)
 8001052:	f002 f94e 	bl	80032f2 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001056:	2064      	movs	r0, #100	; 0x64
 8001058:	f000 fcbc 	bl	80019d4 <HAL_Delay>
	HAL_GPIO_TogglePin(GPIOB, Valve1_Pin);
 800105c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001060:	4817      	ldr	r0, [pc, #92]	; (80010c0 <main+0xa0>)
 8001062:	f002 f946 	bl	80032f2 <HAL_GPIO_TogglePin>
	HAL_GPIO_TogglePin(GPIOB, Valve2_Pin);
 8001066:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800106a:	4815      	ldr	r0, [pc, #84]	; (80010c0 <main+0xa0>)
 800106c:	f002 f941 	bl	80032f2 <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8001070:	2064      	movs	r0, #100	; 0x64
 8001072:	f000 fcaf 	bl	80019d4 <HAL_Delay>

	// Toggling DMA streams for messaging and reading ADC values
	if(toggleValue == 1){
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <main+0xa4>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d113      	bne.n	80010a6 <main+0x86>
		HAL_ADC_Stop_DMA(&hadc1); 		// Close ADC DMA stream
 800107e:	4812      	ldr	r0, [pc, #72]	; (80010c8 <main+0xa8>)
 8001080:	f000 ff40 	bl	8001f04 <HAL_ADC_Stop_DMA>
		UARTSendDMA(eightBitResult, pressure, HMI_tx_buff, FlowSensirion, TidalVolume, HMI_rx_buff);
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <main+0xac>)
 8001086:	edd3 7a00 	vldr	s15, [r3]
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <main+0xb0>)
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	4b11      	ldr	r3, [pc, #68]	; (80010d4 <main+0xb4>)
 8001090:	4a11      	ldr	r2, [pc, #68]	; (80010d8 <main+0xb8>)
 8001092:	4912      	ldr	r1, [pc, #72]	; (80010dc <main+0xbc>)
 8001094:	eeb0 0a67 	vmov.f32	s0, s15
 8001098:	4811      	ldr	r0, [pc, #68]	; (80010e0 <main+0xc0>)
 800109a:	f000 f8bb 	bl	8001214 <UARTSendDMA>
		toggleValue = 0;
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <main+0xa4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	701a      	strb	r2, [r3, #0]
 80010a4:	e7cd      	b.n	8001042 <main+0x22>
	}else{
		HAL_UART_DMAStop(&huart1); // Close UART DMA stream
 80010a6:	480f      	ldr	r0, [pc, #60]	; (80010e4 <main+0xc4>)
 80010a8:	f003 f9be 	bl	8004428 <HAL_UART_DMAStop>
		HAL_ADC_Start_DMA(&hadc1, value_adc,numADCchannels);
 80010ac:	2201      	movs	r2, #1
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <main+0xc8>)
 80010b0:	4805      	ldr	r0, [pc, #20]	; (80010c8 <main+0xa8>)
 80010b2:	f000 fe35 	bl	8001d20 <HAL_ADC_Start_DMA>
		toggleValue = 1;
 80010b6:	4b03      	ldr	r3, [pc, #12]	; (80010c4 <main+0xa4>)
 80010b8:	2201      	movs	r2, #1
 80010ba:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_TogglePin(GPIOB, Valve1_Pin);
 80010bc:	e7c1      	b.n	8001042 <main+0x22>
 80010be:	bf00      	nop
 80010c0:	40020400 	.word	0x40020400
 80010c4:	20000144 	.word	0x20000144
 80010c8:	20000098 	.word	0x20000098
 80010cc:	2000015c 	.word	0x2000015c
 80010d0:	20000034 	.word	0x20000034
 80010d4:	20000090 	.word	0x20000090
 80010d8:	20000040 	.word	0x20000040
 80010dc:	20000028 	.word	0x20000028
 80010e0:	20000154 	.word	0x20000154
 80010e4:	200002ac 	.word	0x200002ac
 80010e8:	20000178 	.word	0x20000178

080010ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b0a0      	sub	sp, #128	; 0x80
 80010f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80010f6:	2230      	movs	r2, #48	; 0x30
 80010f8:	2100      	movs	r1, #0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f004 f8a8 	bl	8005250 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001100:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001110:	f107 030c 	add.w	r3, r7, #12
 8001114:	2230      	movs	r2, #48	; 0x30
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f004 f899 	bl	8005250 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60bb      	str	r3, [r7, #8]
 8001122:	4b34      	ldr	r3, [pc, #208]	; (80011f4 <SystemClock_Config+0x108>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a33      	ldr	r2, [pc, #204]	; (80011f4 <SystemClock_Config+0x108>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b31      	ldr	r3, [pc, #196]	; (80011f4 <SystemClock_Config+0x108>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800113a:	2300      	movs	r3, #0
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <SystemClock_Config+0x10c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <SystemClock_Config+0x10c>)
 8001144:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <SystemClock_Config+0x10c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001152:	607b      	str	r3, [r7, #4]
 8001154:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001156:	230a      	movs	r3, #10
 8001158:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115a:	2301      	movs	r3, #1
 800115c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800115e:	2310      	movs	r3, #16
 8001160:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001162:	2301      	movs	r3, #1
 8001164:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001166:	2302      	movs	r3, #2
 8001168:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800116a:	2300      	movs	r3, #0
 800116c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800116e:	2308      	movs	r3, #8
 8001170:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001172:	23b4      	movs	r3, #180	; 0xb4
 8001174:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001176:	2302      	movs	r3, #2
 8001178:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001182:	4618      	mov	r0, r3
 8001184:	f002 f938 	bl	80033f8 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800118e:	f000 f9b9 	bl	8001504 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001192:	f002 f8e1 	bl	8003358 <HAL_PWREx_EnableOverDrive>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800119c:	f000 f9b2 	bl	8001504 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a0:	230f      	movs	r3, #15
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011a4:	2302      	movs	r3, #2
 80011a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011a8:	2300      	movs	r3, #0
 80011aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b6:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011b8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80011bc:	2105      	movs	r1, #5
 80011be:	4618      	mov	r0, r3
 80011c0:	f002 fb8a 	bl	80038d8 <HAL_RCC_ClockConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80011ca:	f000 f99b 	bl	8001504 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80011ce:	2320      	movs	r3, #32
 80011d0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80011d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011d6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011d8:	f107 030c 	add.w	r3, r7, #12
 80011dc:	4618      	mov	r0, r3
 80011de:	f002 fd47 	bl	8003c70 <HAL_RCCEx_PeriphCLKConfig>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <SystemClock_Config+0x100>
  {
    Error_Handler();
 80011e8:	f000 f98c 	bl	8001504 <Error_Handler>
  }
}
 80011ec:	bf00      	nop
 80011ee:	3780      	adds	r7, #128	; 0x80
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40007000 	.word	0x40007000

080011fc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin){
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){

	}
}
 8001206:	bf00      	nop
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <UARTSendDMA>:

void UARTSendDMA(uint8_t eightBitResult[4], float pressure,	uint8_t HMI_tx_buff[HMIBufferSize], float FlowSensirion[20],float TidalVolume[2], uint8_t HMI_rx_buff[HMIBufferSize]) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6178      	str	r0, [r7, #20]
 800121c:	ed87 0a04 	vstr	s0, [r7, #16]
 8001220:	60f9      	str	r1, [r7, #12]
 8001222:	60ba      	str	r2, [r7, #8]
 8001224:	607b      	str	r3, [r7, #4]
	// Pressure value for comms
	CTBVTFEBV(eightBitResult, (uint16_t) pressure);
 8001226:	edd7 7a04 	vldr	s15, [r7, #16]
 800122a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800122e:	ee17 3a90 	vmov	r3, s15
 8001232:	b29b      	uxth	r3, r3
 8001234:	4619      	mov	r1, r3
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f000 f85e 	bl	80012f8 <CTBVTFEBV>
	HMI_tx_buff[0] = eightBitResult[0];
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	781a      	ldrb	r2, [r3, #0]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	701a      	strb	r2, [r3, #0]
	HMI_tx_buff[1] = eightBitResult[1];
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	3301      	adds	r3, #1
 8001248:	697a      	ldr	r2, [r7, #20]
 800124a:	7852      	ldrb	r2, [r2, #1]
 800124c:	701a      	strb	r2, [r3, #0]
	// Flow value for comms
	if (FlowSensirion[0] < 0) {
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	edd3 7a00 	vldr	s15, [r3]
 8001254:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125c:	d512      	bpl.n	8001284 <UARTSendDMA+0x70>
		HMI_tx_buff[2] = (-1) * FlowSensirion[0];
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eef1 7a67 	vneg.f32	s15, s15
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	3302      	adds	r3, #2
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	edc7 7a00 	vstr	s15, [r7]
 8001274:	683a      	ldr	r2, [r7, #0]
 8001276:	b2d2      	uxtb	r2, r2
 8001278:	701a      	strb	r2, [r3, #0]
		HMI_tx_buff[3] = 1;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3303      	adds	r3, #3
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e00f      	b.n	80012a4 <UARTSendDMA+0x90>
	} else {
		HMI_tx_buff[2] = FlowSensirion[0];
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	edd3 7a00 	vldr	s15, [r3]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3302      	adds	r3, #2
 800128e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001292:	edc7 7a00 	vstr	s15, [r7]
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	b2d2      	uxtb	r2, r2
 800129a:	701a      	strb	r2, [r3, #0]
		HMI_tx_buff[3] = 0;
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3303      	adds	r3, #3
 80012a0:	2200      	movs	r2, #0
 80012a2:	701a      	strb	r2, [r3, #0]
	}
	// Volume for comms
	CTBVTFEBV(eightBitResult, (uint16_t) TidalVolume[0]);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	edd3 7a00 	vldr	s15, [r3]
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	4619      	mov	r1, r3
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f000 f81e 	bl	80012f8 <CTBVTFEBV>
	HMI_tx_buff[4] = eightBitResult[0];
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	3304      	adds	r3, #4
 80012c0:	697a      	ldr	r2, [r7, #20]
 80012c2:	7812      	ldrb	r2, [r2, #0]
 80012c4:	701a      	strb	r2, [r3, #0]
	HMI_tx_buff[5] = eightBitResult[1];
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	3305      	adds	r3, #5
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	7852      	ldrb	r2, [r2, #1]
 80012ce:	701a      	strb	r2, [r3, #0]
	HMI_tx_buff[11] = 255; // Good message check
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	330b      	adds	r3, #11
 80012d4:	22ff      	movs	r2, #255	; 0xff
 80012d6:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, HMI_tx_buff, HMIBufferSize); // Send
 80012d8:	220c      	movs	r2, #12
 80012da:	68f9      	ldr	r1, [r7, #12]
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <UARTSendDMA+0xe0>)
 80012de:	f002 ffb7 	bl	8004250 <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart1, HMI_rx_buff, HMIBufferSize); // Receive
 80012e2:	220c      	movs	r2, #12
 80012e4:	6a39      	ldr	r1, [r7, #32]
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <UARTSendDMA+0xe0>)
 80012e8:	f003 f81e 	bl	8004328 <HAL_UART_Receive_DMA>
}
 80012ec:	bf00      	nop
 80012ee:	3718      	adds	r7, #24
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200002ac 	.word	0x200002ac

080012f8 <CTBVTFEBV>:
void CTBVTFEBV(uint8_t *eightBitresult,uint32_t value){  //Convert a 32 bit value to 4 bytes
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	uint8_t eightBitpart1 = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	75fb      	strb	r3, [r7, #23]
	uint8_t eightBitpart2 = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	75bb      	strb	r3, [r7, #22]
	uint8_t eightBitpart3 = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	757b      	strb	r3, [r7, #21]
	uint8_t eightBitpart4 = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	753b      	strb	r3, [r7, #20]
	int counter = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	613b      	str	r3, [r7, #16]
    int digit;

	while (value > 0) {
 8001316:	e063      	b.n	80013e0 <CTBVTFEBV+0xe8>
	 digit = value % 10;
 8001318:	6839      	ldr	r1, [r7, #0]
 800131a:	4b3d      	ldr	r3, [pc, #244]	; (8001410 <CTBVTFEBV+0x118>)
 800131c:	fba3 2301 	umull	r2, r3, r3, r1
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	4613      	mov	r3, r2
 8001324:	009b      	lsls	r3, r3, #2
 8001326:	4413      	add	r3, r2
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	1aca      	subs	r2, r1, r3
 800132c:	60fa      	str	r2, [r7, #12]
	 switch(counter){
 800132e:	693b      	ldr	r3, [r7, #16]
 8001330:	2b07      	cmp	r3, #7
 8001332:	d84b      	bhi.n	80013cc <CTBVTFEBV+0xd4>
 8001334:	a201      	add	r2, pc, #4	; (adr r2, 800133c <CTBVTFEBV+0x44>)
 8001336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800133a:	bf00      	nop
 800133c:	0800135d 	.word	0x0800135d
 8001340:	08001363 	.word	0x08001363
 8001344:	08001379 	.word	0x08001379
 8001348:	0800137f 	.word	0x0800137f
 800134c:	08001395 	.word	0x08001395
 8001350:	0800139b 	.word	0x0800139b
 8001354:	080013b1 	.word	0x080013b1
 8001358:	080013b7 	.word	0x080013b7
		 case 0:
			 eightBitpart1 = digit;
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	75fb      	strb	r3, [r7, #23]
	 	 	 break;
 8001360:	e035      	b.n	80013ce <CTBVTFEBV+0xd6>
		 case 1:
			 eightBitpart1 = eightBitpart1 + digit*10 ;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	b2db      	uxtb	r3, r3
 8001366:	461a      	mov	r2, r3
 8001368:	0092      	lsls	r2, r2, #2
 800136a:	4413      	add	r3, r2
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	7dfb      	ldrb	r3, [r7, #23]
 8001372:	4413      	add	r3, r2
 8001374:	75fb      	strb	r3, [r7, #23]
	 	 	 break;
 8001376:	e02a      	b.n	80013ce <CTBVTFEBV+0xd6>
		 case 2:
			 eightBitpart2 = digit;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	75bb      	strb	r3, [r7, #22]
	 	 	 break;
 800137c:	e027      	b.n	80013ce <CTBVTFEBV+0xd6>
		 case 3:
			 eightBitpart2 = eightBitpart2 + digit*10;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	461a      	mov	r2, r3
 8001384:	0092      	lsls	r2, r2, #2
 8001386:	4413      	add	r3, r2
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	b2da      	uxtb	r2, r3
 800138c:	7dbb      	ldrb	r3, [r7, #22]
 800138e:	4413      	add	r3, r2
 8001390:	75bb      	strb	r3, [r7, #22]
	 	 	 break;
 8001392:	e01c      	b.n	80013ce <CTBVTFEBV+0xd6>
		 case 4:
			 eightBitpart3 = digit;
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	757b      	strb	r3, [r7, #21]
	 	 	 break;
 8001398:	e019      	b.n	80013ce <CTBVTFEBV+0xd6>
		 case 5:
			 eightBitpart3 = eightBitpart3 + digit*10 ;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	b2db      	uxtb	r3, r3
 800139e:	461a      	mov	r2, r3
 80013a0:	0092      	lsls	r2, r2, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	7d7b      	ldrb	r3, [r7, #21]
 80013aa:	4413      	add	r3, r2
 80013ac:	757b      	strb	r3, [r7, #21]
	 	 	 break;
 80013ae:	e00e      	b.n	80013ce <CTBVTFEBV+0xd6>
		 case 6:
			 eightBitpart4 = digit;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	753b      	strb	r3, [r7, #20]
	 	 	 break;
 80013b4:	e00b      	b.n	80013ce <CTBVTFEBV+0xd6>
		 case 7:
			 eightBitpart4 = eightBitpart3 + digit*10;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	0092      	lsls	r2, r2, #2
 80013be:	4413      	add	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	7d7b      	ldrb	r3, [r7, #21]
 80013c6:	4413      	add	r3, r2
 80013c8:	753b      	strb	r3, [r7, #20]
	 	 	 break;
 80013ca:	e000      	b.n	80013ce <CTBVTFEBV+0xd6>
		default:
		 	 break;
 80013cc:	bf00      	nop
	 }
	 counter ++;
 80013ce:	693b      	ldr	r3, [r7, #16]
 80013d0:	3301      	adds	r3, #1
 80013d2:	613b      	str	r3, [r7, #16]
	 value /= 10;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4a0e      	ldr	r2, [pc, #56]	; (8001410 <CTBVTFEBV+0x118>)
 80013d8:	fba2 2303 	umull	r2, r3, r2, r3
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	603b      	str	r3, [r7, #0]
	while (value > 0) {
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d198      	bne.n	8001318 <CTBVTFEBV+0x20>
	}
	eightBitresult[0] = eightBitpart1;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7dfa      	ldrb	r2, [r7, #23]
 80013ea:	701a      	strb	r2, [r3, #0]
	eightBitresult[1] = eightBitpart2;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3301      	adds	r3, #1
 80013f0:	7dba      	ldrb	r2, [r7, #22]
 80013f2:	701a      	strb	r2, [r3, #0]
	eightBitresult[2] = eightBitpart3;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3302      	adds	r3, #2
 80013f8:	7d7a      	ldrb	r2, [r7, #21]
 80013fa:	701a      	strb	r2, [r3, #0]
	eightBitresult[3] = eightBitpart4;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3303      	adds	r3, #3
 8001400:	7d3a      	ldrb	r2, [r7, #20]
 8001402:	701a      	strb	r2, [r3, #0]
}
 8001404:	bf00      	nop
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr
 8001410:	cccccccd 	.word	0xcccccccd
 8001414:	00000000 	.word	0x00000000

08001418 <HAL_ADC_ConvCpltCallback>:
	I2C_read(0x28 << 1, 0x28 << 1, PressureBuffer, PressureBuffer);		  // Read in status
	StatusHoneywell = (PressureBuffer[0] & 0xc0);
	PressureHoneywell = (((PressureBuffer[0] << 8) | PressureBuffer[1])); // Read in Pressure
	TempHoneywell = (((PressureBuffer[3] << 8) | PressureBuffer[4])); 	  // Read in Temperature
}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001418:	b590      	push	{r4, r7, lr}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	// Function that is called at the end of each ADC conversion.
	pressure = (((float)value_adc[0]*10)/(4096-2055)-10.0686)*10.1972;  // Pressure in kPa -> cm H2O
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_ADC_ConvCpltCallback+0x78>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001434:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8001494 <HAL_ADC_ConvCpltCallback+0x7c>
 8001438:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800143c:	ee16 0a90 	vmov	r0, s13
 8001440:	f7ff f83a 	bl	80004b8 <__aeabi_f2d>
 8001444:	a30e      	add	r3, pc, #56	; (adr r3, 8001480 <HAL_ADC_ConvCpltCallback+0x68>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7fe fed5 	bl	80001f8 <__aeabi_dsub>
 800144e:	4603      	mov	r3, r0
 8001450:	460c      	mov	r4, r1
 8001452:	4618      	mov	r0, r3
 8001454:	4621      	mov	r1, r4
 8001456:	a30c      	add	r3, pc, #48	; (adr r3, 8001488 <HAL_ADC_ConvCpltCallback+0x70>)
 8001458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145c:	f7ff f884 	bl	8000568 <__aeabi_dmul>
 8001460:	4603      	mov	r3, r0
 8001462:	460c      	mov	r4, r1
 8001464:	4618      	mov	r0, r3
 8001466:	4621      	mov	r1, r4
 8001468:	f7ff fa90 	bl	800098c <__aeabi_d2f>
 800146c:	4602      	mov	r2, r0
 800146e:	4b0a      	ldr	r3, [pc, #40]	; (8001498 <HAL_ADC_ConvCpltCallback+0x80>)
 8001470:	601a      	str	r2, [r3, #0]
	//pressure = value_adc[0];
	HAL_ADC_Stop_DMA(&hadc1);
 8001472:	480a      	ldr	r0, [pc, #40]	; (800149c <HAL_ADC_ConvCpltCallback+0x84>)
 8001474:	f000 fd46 	bl	8001f04 <HAL_ADC_Stop_DMA>
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bd90      	pop	{r4, r7, pc}
 8001480:	8a0902de 	.word	0x8a0902de
 8001484:	4024231f 	.word	0x4024231f
 8001488:	65fd8adb 	.word	0x65fd8adb
 800148c:	402464f7 	.word	0x402464f7
 8001490:	20000178 	.word	0x20000178
 8001494:	44ff2000 	.word	0x44ff2000
 8001498:	2000015c 	.word	0x2000015c
 800149c:	20000098 	.word	0x20000098

080014a0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	//HAL_UART_DMAStop(&huart1);

	if(huart == &huart1){
	  //HAL_GPIO_WritePin(UART_RSE_GPIO_Port,UART_RSE_Pin, 0); // Toggle RSE pin to send message over RS485
	}
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
	if(huart == &huart1){
		//HAL_GPIO_WritePin(UART_RSE_GPIO_Port,UART_RSE_Pin, GPIO_PIN_SET); // Toggle RSE pin to send message over RS485
	}

    // Messages received from HMI
	if(huart == &huart1){
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a0f      	ldr	r2, [pc, #60]	; (80014fc <HAL_UART_RxCpltCallback+0x48>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d111      	bne.n	80014e8 <HAL_UART_RxCpltCallback+0x34>
		   switch (HMI_rx_buff[0])
 80014c4:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <HAL_UART_RxCpltCallback+0x4c>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b04      	cmp	r3, #4
 80014ca:	d80f      	bhi.n	80014ec <HAL_UART_RxCpltCallback+0x38>
 80014cc:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <HAL_UART_RxCpltCallback+0x20>)
 80014ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d2:	bf00      	nop
 80014d4:	080014ed 	.word	0x080014ed
 80014d8:	080014ed 	.word	0x080014ed
 80014dc:	080014ed 	.word	0x080014ed
 80014e0:	080014ed 	.word	0x080014ed
 80014e4:	080014ed 	.word	0x080014ed
			   case 4:
				   break;

			   default:	break;
		   }
	}
 80014e8:	bf00      	nop
 80014ea:	e000      	b.n	80014ee <HAL_UART_RxCpltCallback+0x3a>
			   default:	break;
 80014ec:	bf00      	nop

	HAL_UART_DMAStop(&huart1);	// Close DMA stream
 80014ee:	4803      	ldr	r0, [pc, #12]	; (80014fc <HAL_UART_RxCpltCallback+0x48>)
 80014f0:	f002 ff9a 	bl	8004428 <HAL_UART_DMAStop>
}
 80014f4:	bf00      	nop
 80014f6:	3708      	adds	r7, #8
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	200002ac 	.word	0x200002ac
 8001500:	20000034 	.word	0x20000034

08001504 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001518:	4b0f      	ldr	r3, [pc, #60]	; (8001558 <MX_RTC_Init+0x44>)
 800151a:	4a10      	ldr	r2, [pc, #64]	; (800155c <MX_RTC_Init+0x48>)
 800151c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_RTC_Init+0x44>)
 8001520:	2200      	movs	r2, #0
 8001522:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_RTC_Init+0x44>)
 8001526:	227f      	movs	r2, #127	; 0x7f
 8001528:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_RTC_Init+0x44>)
 800152c:	22ff      	movs	r2, #255	; 0xff
 800152e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_RTC_Init+0x44>)
 8001532:	2200      	movs	r2, #0
 8001534:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_RTC_Init+0x44>)
 8001538:	2200      	movs	r2, #0
 800153a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_RTC_Init+0x44>)
 800153e:	2200      	movs	r2, #0
 8001540:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_RTC_Init+0x44>)
 8001544:	f002 fd52 	bl	8003fec <HAL_RTC_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800154e:	f7ff ffd9 	bl	8001504 <Error_Handler>
  }

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	200001cc 	.word	0x200001cc
 800155c:	40002800 	.word	0x40002800

08001560 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001560:	b480      	push	{r7}
 8001562:	b083      	sub	sp, #12
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a05      	ldr	r2, [pc, #20]	; (8001584 <HAL_RTC_MspInit+0x24>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d102      	bne.n	8001578 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001572:	4b05      	ldr	r3, [pc, #20]	; (8001588 <HAL_RTC_MspInit+0x28>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001578:	bf00      	nop
 800157a:	370c      	adds	r7, #12
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40002800 	.word	0x40002800
 8001588:	42470e3c 	.word	0x42470e3c

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_MspInit+0x4c>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80015e0:	bf00      	nop
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ea:	b480      	push	{r7}
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ee:	e7fe      	b.n	80015ee <HardFault_Handler+0x4>

080015f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f4:	e7fe      	b.n	80015f4 <MemManage_Handler+0x4>

080015f6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015f6:	b480      	push	{r7}
 80015f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fa:	e7fe      	b.n	80015fa <BusFault_Handler+0x4>

080015fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <UsageFault_Handler+0x4>

08001602 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001630:	f000 f9b0 	bl	8001994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001634:	bf00      	nop
 8001636:	bd80      	pop	{r7, pc}

08001638 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800163c:	4802      	ldr	r0, [pc, #8]	; (8001648 <ADC_IRQHandler+0x10>)
 800163e:	f000 fa2e 	bl	8001a9e <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000098 	.word	0x20000098

0800164c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <USART1_IRQHandler+0x10>)
 8001652:	f002 ff45 	bl	80044e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	200002ac 	.word	0x200002ac

08001660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001664:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001668:	f001 fe5e 	bl	8003328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001674:	4802      	ldr	r0, [pc, #8]	; (8001680 <DMA2_Stream0_IRQHandler+0x10>)
 8001676:	f001 fa11 	bl	8002a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	200000e0 	.word	0x200000e0

08001684 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001688:	4802      	ldr	r0, [pc, #8]	; (8001694 <DMA2_Stream2_IRQHandler+0x10>)
 800168a:	f001 fa07 	bl	8002a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	2000024c 	.word	0x2000024c

08001698 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800169c:	4802      	ldr	r0, [pc, #8]	; (80016a8 <DMA2_Stream7_IRQHandler+0x10>)
 800169e:	f001 f9fd 	bl	8002a9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200001ec 	.word	0x200001ec

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b480      	push	{r7}
 80016ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <SystemInit+0x28>)
 80016b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016b6:	4a07      	ldr	r2, [pc, #28]	; (80016d4 <SystemInit+0x28>)
 80016b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c0:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SystemInit+0x28>)
 80016c2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016c6:	609a      	str	r2, [r3, #8]
#endif
}
 80016c8:	bf00      	nop
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	e000ed00 	.word	0xe000ed00

080016d8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_USART1_UART_Init+0x50>)
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <MX_USART1_UART_Init+0x54>)
 80016e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_USART1_UART_Init+0x50>)
 80016e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_USART1_UART_Init+0x50>)
 80016ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80016f0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MX_USART1_UART_Init+0x50>)
 80016f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_USART1_UART_Init+0x50>)
 80016fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001700:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_USART1_UART_Init+0x50>)
 8001704:	220c      	movs	r2, #12
 8001706:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_USART1_UART_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_USART1_UART_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_USART1_UART_Init+0x50>)
 8001716:	f002 fd4e 	bl	80041b6 <HAL_UART_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
 8001720:	f7ff fef0 	bl	8001504 <Error_Handler>
  }

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	200002ac 	.word	0x200002ac
 800172c:	40011000 	.word	0x40011000

08001730 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08a      	sub	sp, #40	; 0x28
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 0314 	add.w	r3, r7, #20
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4c      	ldr	r2, [pc, #304]	; (8001880 <HAL_UART_MspInit+0x150>)
 800174e:	4293      	cmp	r3, r2
 8001750:	f040 8091 	bne.w	8001876 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	4b4a      	ldr	r3, [pc, #296]	; (8001884 <HAL_UART_MspInit+0x154>)
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	4a49      	ldr	r2, [pc, #292]	; (8001884 <HAL_UART_MspInit+0x154>)
 800175e:	f043 0310 	orr.w	r3, r3, #16
 8001762:	6453      	str	r3, [r2, #68]	; 0x44
 8001764:	4b47      	ldr	r3, [pc, #284]	; (8001884 <HAL_UART_MspInit+0x154>)
 8001766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001768:	f003 0310 	and.w	r3, r3, #16
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	4b43      	ldr	r3, [pc, #268]	; (8001884 <HAL_UART_MspInit+0x154>)
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4a42      	ldr	r2, [pc, #264]	; (8001884 <HAL_UART_MspInit+0x154>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6313      	str	r3, [r2, #48]	; 0x30
 8001780:	4b40      	ldr	r3, [pc, #256]	; (8001884 <HAL_UART_MspInit+0x154>)
 8001782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001784:	f003 0301 	and.w	r3, r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800178c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800179e:	2307      	movs	r3, #7
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4837      	ldr	r0, [pc, #220]	; (8001888 <HAL_UART_MspInit+0x158>)
 80017aa:	f001 fbdf 	bl	8002f6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80017ae:	4b37      	ldr	r3, [pc, #220]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017b0:	4a37      	ldr	r2, [pc, #220]	; (8001890 <HAL_UART_MspInit+0x160>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80017b4:	4b35      	ldr	r3, [pc, #212]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017b6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80017ba:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017be:	2200      	movs	r2, #0
 80017c0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017d0:	4b2e      	ldr	r3, [pc, #184]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017d6:	4b2d      	ldr	r3, [pc, #180]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80017dc:	4b2b      	ldr	r3, [pc, #172]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80017e2:	4b2a      	ldr	r3, [pc, #168]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017e8:	4b28      	ldr	r3, [pc, #160]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80017ee:	4827      	ldr	r0, [pc, #156]	; (800188c <HAL_UART_MspInit+0x15c>)
 80017f0:	f000 ffbc 	bl	800276c <HAL_DMA_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80017fa:	f7ff fe83 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a22      	ldr	r2, [pc, #136]	; (800188c <HAL_UART_MspInit+0x15c>)
 8001802:	635a      	str	r2, [r3, #52]	; 0x34
 8001804:	4a21      	ldr	r2, [pc, #132]	; (800188c <HAL_UART_MspInit+0x15c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_UART_MspInit+0x164>)
 800180c:	4a22      	ldr	r2, [pc, #136]	; (8001898 <HAL_UART_MspInit+0x168>)
 800180e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001810:	4b20      	ldr	r3, [pc, #128]	; (8001894 <HAL_UART_MspInit+0x164>)
 8001812:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001816:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001818:	4b1e      	ldr	r3, [pc, #120]	; (8001894 <HAL_UART_MspInit+0x164>)
 800181a:	2240      	movs	r2, #64	; 0x40
 800181c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_UART_MspInit+0x164>)
 8001820:	2200      	movs	r2, #0
 8001822:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_UART_MspInit+0x164>)
 8001826:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800182c:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_UART_MspInit+0x164>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001832:	4b18      	ldr	r3, [pc, #96]	; (8001894 <HAL_UART_MspInit+0x164>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001838:	4b16      	ldr	r3, [pc, #88]	; (8001894 <HAL_UART_MspInit+0x164>)
 800183a:	2200      	movs	r2, #0
 800183c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <HAL_UART_MspInit+0x164>)
 8001840:	2200      	movs	r2, #0
 8001842:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001844:	4b13      	ldr	r3, [pc, #76]	; (8001894 <HAL_UART_MspInit+0x164>)
 8001846:	2200      	movs	r2, #0
 8001848:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800184a:	4812      	ldr	r0, [pc, #72]	; (8001894 <HAL_UART_MspInit+0x164>)
 800184c:	f000 ff8e 	bl	800276c <HAL_DMA_Init>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d001      	beq.n	800185a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001856:	f7ff fe55 	bl	8001504 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_UART_MspInit+0x164>)
 800185e:	631a      	str	r2, [r3, #48]	; 0x30
 8001860:	4a0c      	ldr	r2, [pc, #48]	; (8001894 <HAL_UART_MspInit+0x164>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8001866:	2200      	movs	r2, #0
 8001868:	2101      	movs	r1, #1
 800186a:	2025      	movs	r0, #37	; 0x25
 800186c:	f000 ff47 	bl	80026fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001870:	2025      	movs	r0, #37	; 0x25
 8001872:	f000 ff60 	bl	8002736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001876:	bf00      	nop
 8001878:	3728      	adds	r7, #40	; 0x28
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	40011000 	.word	0x40011000
 8001884:	40023800 	.word	0x40023800
 8001888:	40020000 	.word	0x40020000
 800188c:	2000024c 	.word	0x2000024c
 8001890:	40026440 	.word	0x40026440
 8001894:	200001ec 	.word	0x200001ec
 8001898:	400264b8 	.word	0x400264b8

0800189c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800189c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018a2:	e003      	b.n	80018ac <LoopCopyDataInit>

080018a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018aa:	3104      	adds	r1, #4

080018ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018ac:	480b      	ldr	r0, [pc, #44]	; (80018dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018ae:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018b4:	d3f6      	bcc.n	80018a4 <CopyDataInit>
  ldr  r2, =_sbss
 80018b6:	4a0b      	ldr	r2, [pc, #44]	; (80018e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018b8:	e002      	b.n	80018c0 <LoopFillZerobss>

080018ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018bc:	f842 3b04 	str.w	r3, [r2], #4

080018c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018c0:	4b09      	ldr	r3, [pc, #36]	; (80018e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018c4:	d3f9      	bcc.n	80018ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018c6:	f7ff fef1 	bl	80016ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ca:	f003 fc9d 	bl	8005208 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018ce:	f7ff fba7 	bl	8001020 <main>
  bx  lr    
 80018d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018d4:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80018d8:	080052a8 	.word	0x080052a8
  ldr  r0, =_sdata
 80018dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018e0:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 80018e4:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 80018e8:	200002f0 	.word	0x200002f0

080018ec <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018ec:	e7fe      	b.n	80018ec <CAN1_RX0_IRQHandler>
	...

080018f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018f4:	4b0e      	ldr	r3, [pc, #56]	; (8001930 <HAL_Init+0x40>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0d      	ldr	r2, [pc, #52]	; (8001930 <HAL_Init+0x40>)
 80018fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <HAL_Init+0x40>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_Init+0x40>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a07      	ldr	r2, [pc, #28]	; (8001930 <HAL_Init+0x40>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001918:	2003      	movs	r0, #3
 800191a:	f000 fee5 	bl	80026e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800191e:	2000      	movs	r0, #0
 8001920:	f000 f808 	bl	8001934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001924:	f7ff fe32 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023c00 	.word	0x40023c00

08001934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800193c:	4b12      	ldr	r3, [pc, #72]	; (8001988 <HAL_InitTick+0x54>)
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_InitTick+0x58>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	4619      	mov	r1, r3
 8001946:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194a:	fbb3 f3f1 	udiv	r3, r3, r1
 800194e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001952:	4618      	mov	r0, r3
 8001954:	f000 fefd 	bl	8002752 <HAL_SYSTICK_Config>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e00e      	b.n	8001980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d80a      	bhi.n	800197e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 fec5 	bl	80026fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001974:	4a06      	ldr	r2, [pc, #24]	; (8001990 <HAL_InitTick+0x5c>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
 800197c:	e000      	b.n	8001980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}
 8001988:	20000000 	.word	0x20000000
 800198c:	20000008 	.word	0x20000008
 8001990:	20000004 	.word	0x20000004

08001994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001998:	4b06      	ldr	r3, [pc, #24]	; (80019b4 <HAL_IncTick+0x20>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	461a      	mov	r2, r3
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_IncTick+0x24>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	4a04      	ldr	r2, [pc, #16]	; (80019b8 <HAL_IncTick+0x24>)
 80019a6:	6013      	str	r3, [r2, #0]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000008 	.word	0x20000008
 80019b8:	200002ec 	.word	0x200002ec

080019bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return uwTick;
 80019c0:	4b03      	ldr	r3, [pc, #12]	; (80019d0 <HAL_GetTick+0x14>)
 80019c2:	681b      	ldr	r3, [r3, #0]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	200002ec 	.word	0x200002ec

080019d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019dc:	f7ff ffee 	bl	80019bc <HAL_GetTick>
 80019e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019ec:	d005      	beq.n	80019fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_Delay+0x40>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4413      	add	r3, r2
 80019f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019fa:	bf00      	nop
 80019fc:	f7ff ffde 	bl	80019bc <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d8f7      	bhi.n	80019fc <HAL_Delay+0x28>
  {
  }
}
 8001a0c:	bf00      	nop
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20000008 	.word	0x20000008

08001a18 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	2300      	movs	r3, #0
 8001a22:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e033      	b.n	8001a96 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d109      	bne.n	8001a4a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a36:	6878      	ldr	r0, [r7, #4]
 8001a38:	f7ff f9ca 	bl	8000dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2200      	movs	r2, #0
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d118      	bne.n	8001a88 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a5e:	f023 0302 	bic.w	r3, r3, #2
 8001a62:	f043 0202 	orr.w	r2, r3, #2
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f000 fbe4 	bl	8002238 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2200      	movs	r2, #0
 8001a74:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f023 0303 	bic.w	r3, r3, #3
 8001a7e:	f043 0201 	orr.w	r2, r3, #1
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	641a      	str	r2, [r3, #64]	; 0x40
 8001a86:	e001      	b.n	8001a8c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	2300      	movs	r3, #0
 8001aac:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 0320 	and.w	r3, r3, #32
 8001ace:	2b20      	cmp	r3, #32
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d049      	beq.n	8001b74 <HAL_ADC_IRQHandler+0xd6>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d046      	beq.n	8001b74 <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aea:	f003 0310 	and.w	r3, r3, #16
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d105      	bne.n	8001afe <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d12b      	bne.n	8001b64 <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d127      	bne.n	8001b64 <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b1a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d006      	beq.n	8001b30 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d119      	bne.n	8001b64 <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	685a      	ldr	r2, [r3, #4]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0220 	bic.w	r2, r2, #32
 8001b3e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d105      	bne.n	8001b64 <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	f7ff fc57 	bl	8001418 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f06f 0212 	mvn.w	r2, #18
 8001b72:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	2b04      	cmp	r3, #4
 8001b80:	bf0c      	ite	eq
 8001b82:	2301      	moveq	r3, #1
 8001b84:	2300      	movne	r3, #0
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b94:	2b80      	cmp	r3, #128	; 0x80
 8001b96:	bf0c      	ite	eq
 8001b98:	2301      	moveq	r3, #1
 8001b9a:	2300      	movne	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d057      	beq.n	8001c56 <HAL_ADC_IRQHandler+0x1b8>
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d054      	beq.n	8001c56 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb0:	f003 0310 	and.w	r3, r3, #16
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d105      	bne.n	8001bc4 <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d139      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d006      	beq.n	8001bee <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d12b      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d124      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d11d      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d119      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c20:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d105      	bne.n	8001c46 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3e:	f043 0201 	orr.w	r2, r3, #1
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 fc74 	bl	8002534 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f06f 020c 	mvn.w	r2, #12
 8001c54:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	bf0c      	ite	eq
 8001c64:	2301      	moveq	r3, #1
 8001c66:	2300      	movne	r3, #0
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c76:	2b40      	cmp	r3, #64	; 0x40
 8001c78:	bf0c      	ite	eq
 8001c7a:	2301      	moveq	r3, #1
 8001c7c:	2300      	movne	r3, #0
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d017      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x21a>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d014      	beq.n	8001cb8 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f000 f97f 	bl	8001fac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f06f 0201 	mvn.w	r2, #1
 8001cb6:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b20      	cmp	r3, #32
 8001cc4:	bf0c      	ite	eq
 8001cc6:	2301      	moveq	r3, #1
 8001cc8:	2300      	movne	r3, #0
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001cdc:	bf0c      	ite	eq
 8001cde:	2301      	moveq	r3, #1
 8001ce0:	2300      	movne	r3, #0
 8001ce2:	b2db      	uxtb	r3, r3
 8001ce4:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d015      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x27a>
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d012      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f043 0202 	orr.w	r2, r3, #2
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f06f 0220 	mvn.w	r2, #32
 8001d06:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f000 f959 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f06f 0220 	mvn.w	r2, #32
 8001d16:	601a      	str	r2, [r3, #0]
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b086      	sub	sp, #24
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_ADC_Start_DMA+0x1e>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e0cc      	b.n	8001ed8 <HAL_ADC_Start_DMA+0x1b8>
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 0301 	and.w	r3, r3, #1
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d018      	beq.n	8001d86 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	689a      	ldr	r2, [r3, #8]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f042 0201 	orr.w	r2, r2, #1
 8001d62:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d64:	4b5e      	ldr	r3, [pc, #376]	; (8001ee0 <HAL_ADC_Start_DMA+0x1c0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	4a5e      	ldr	r2, [pc, #376]	; (8001ee4 <HAL_ADC_Start_DMA+0x1c4>)
 8001d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d6e:	0c9a      	lsrs	r2, r3, #18
 8001d70:	4613      	mov	r3, r2
 8001d72:	005b      	lsls	r3, r3, #1
 8001d74:	4413      	add	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d78:	e002      	b.n	8001d80 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1f9      	bne.n	8001d7a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	f040 80a0 	bne.w	8001ed6 <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d9a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d007      	beq.n	8001dc8 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dc0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dcc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dd4:	d106      	bne.n	8001de4 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	f023 0206 	bic.w	r2, r3, #6
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
 8001de2:	e002      	b.n	8001dea <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001df2:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <HAL_ADC_Start_DMA+0x1c8>)
 8001df4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dfa:	4a3c      	ldr	r2, [pc, #240]	; (8001eec <HAL_ADC_Start_DMA+0x1cc>)
 8001dfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e02:	4a3b      	ldr	r2, [pc, #236]	; (8001ef0 <HAL_ADC_Start_DMA+0x1d0>)
 8001e04:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e0a:	4a3a      	ldr	r2, [pc, #232]	; (8001ef4 <HAL_ADC_Start_DMA+0x1d4>)
 8001e0c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001e16:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001e26:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e36:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	334c      	adds	r3, #76	; 0x4c
 8001e42:	4619      	mov	r1, r3
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	f000 fd3e 	bl	80028c8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	f003 031f 	and.w	r3, r3, #31
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d12a      	bne.n	8001eae <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a26      	ldr	r2, [pc, #152]	; (8001ef8 <HAL_ADC_Start_DMA+0x1d8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d015      	beq.n	8001e8e <HAL_ADC_Start_DMA+0x16e>
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a25      	ldr	r2, [pc, #148]	; (8001efc <HAL_ADC_Start_DMA+0x1dc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d105      	bne.n	8001e78 <HAL_ADC_Start_DMA+0x158>
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_ADC_Start_DMA+0x1c8>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 031f 	and.w	r3, r3, #31
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a20      	ldr	r2, [pc, #128]	; (8001f00 <HAL_ADC_Start_DMA+0x1e0>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d129      	bne.n	8001ed6 <HAL_ADC_Start_DMA+0x1b6>
 8001e82:	4b19      	ldr	r3, [pc, #100]	; (8001ee8 <HAL_ADC_Start_DMA+0x1c8>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	2b0f      	cmp	r3, #15
 8001e8c:	d823      	bhi.n	8001ed6 <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d11c      	bne.n	8001ed6 <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689a      	ldr	r2, [r3, #8]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	e013      	b.n	8001ed6 <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a11      	ldr	r2, [pc, #68]	; (8001ef8 <HAL_ADC_Start_DMA+0x1d8>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d10e      	bne.n	8001ed6 <HAL_ADC_Start_DMA+0x1b6>
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d107      	bne.n	8001ed6 <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	689a      	ldr	r2, [r3, #8]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001ed4:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000000 	.word	0x20000000
 8001ee4:	431bde83 	.word	0x431bde83
 8001ee8:	40012300 	.word	0x40012300
 8001eec:	08002431 	.word	0x08002431
 8001ef0:	080024eb 	.word	0x080024eb
 8001ef4:	08002507 	.word	0x08002507
 8001ef8:	40012000 	.word	0x40012000
 8001efc:	40012100 	.word	0x40012100
 8001f00:	40012200 	.word	0x40012200

08001f04 <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d101      	bne.n	8001f1e <HAL_ADC_Stop_DMA+0x1a>
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	e038      	b.n	8001f90 <HAL_ADC_Stop_DMA+0x8c>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689a      	ldr	r2, [r3, #8]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f022 0201 	bic.w	r2, r2, #1
 8001f34:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d120      	bne.n	8001f86 <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f52:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f000 fd0d 	bl	8002978 <HAL_DMA_Abort>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001f70:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	f043 0201 	orr.w	r2, r3, #1
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d101      	bne.n	8001ff0 <HAL_ADC_ConfigChannel+0x1c>
 8001fec:	2302      	movs	r3, #2
 8001fee:	e113      	b.n	8002218 <HAL_ADC_ConfigChannel+0x244>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b09      	cmp	r3, #9
 8001ffe:	d925      	bls.n	800204c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68d9      	ldr	r1, [r3, #12]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	b29b      	uxth	r3, r3
 800200c:	461a      	mov	r2, r3
 800200e:	4613      	mov	r3, r2
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	4413      	add	r3, r2
 8002014:	3b1e      	subs	r3, #30
 8002016:	2207      	movs	r2, #7
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43da      	mvns	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	400a      	ands	r2, r1
 8002024:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68d9      	ldr	r1, [r3, #12]
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	b29b      	uxth	r3, r3
 8002036:	4618      	mov	r0, r3
 8002038:	4603      	mov	r3, r0
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	4403      	add	r3, r0
 800203e:	3b1e      	subs	r3, #30
 8002040:	409a      	lsls	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
 800204a:	e022      	b.n	8002092 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	6919      	ldr	r1, [r3, #16]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	b29b      	uxth	r3, r3
 8002058:	461a      	mov	r2, r3
 800205a:	4613      	mov	r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4413      	add	r3, r2
 8002060:	2207      	movs	r2, #7
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43da      	mvns	r2, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	400a      	ands	r2, r1
 800206e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6919      	ldr	r1, [r3, #16]
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	4618      	mov	r0, r3
 8002082:	4603      	mov	r3, r0
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4403      	add	r3, r0
 8002088:	409a      	lsls	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b06      	cmp	r3, #6
 8002098:	d824      	bhi.n	80020e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	685a      	ldr	r2, [r3, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	4413      	add	r3, r2
 80020aa:	3b05      	subs	r3, #5
 80020ac:	221f      	movs	r2, #31
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43da      	mvns	r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	400a      	ands	r2, r1
 80020ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	4618      	mov	r0, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	3b05      	subs	r3, #5
 80020d6:	fa00 f203 	lsl.w	r2, r0, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	430a      	orrs	r2, r1
 80020e0:	635a      	str	r2, [r3, #52]	; 0x34
 80020e2:	e04c      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b0c      	cmp	r3, #12
 80020ea:	d824      	bhi.n	8002136 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	3b23      	subs	r3, #35	; 0x23
 80020fe:	221f      	movs	r2, #31
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	43da      	mvns	r2, r3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	400a      	ands	r2, r1
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b29b      	uxth	r3, r3
 800211a:	4618      	mov	r0, r3
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	4413      	add	r3, r2
 8002126:	3b23      	subs	r3, #35	; 0x23
 8002128:	fa00 f203 	lsl.w	r2, r0, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	430a      	orrs	r2, r1
 8002132:	631a      	str	r2, [r3, #48]	; 0x30
 8002134:	e023      	b.n	800217e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685a      	ldr	r2, [r3, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	3b41      	subs	r3, #65	; 0x41
 8002148:	221f      	movs	r2, #31
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	400a      	ands	r2, r1
 8002156:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	b29b      	uxth	r3, r3
 8002164:	4618      	mov	r0, r3
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b41      	subs	r3, #65	; 0x41
 8002172:	fa00 f203 	lsl.w	r2, r0, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	430a      	orrs	r2, r1
 800217c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217e:	4b29      	ldr	r3, [pc, #164]	; (8002224 <HAL_ADC_ConfigChannel+0x250>)
 8002180:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a28      	ldr	r2, [pc, #160]	; (8002228 <HAL_ADC_ConfigChannel+0x254>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d10f      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2b12      	cmp	r3, #18
 8002192:	d10b      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a1d      	ldr	r2, [pc, #116]	; (8002228 <HAL_ADC_ConfigChannel+0x254>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d12b      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d003      	beq.n	80021c8 <HAL_ADC_ConfigChannel+0x1f4>
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b11      	cmp	r3, #17
 80021c6:	d122      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a11      	ldr	r2, [pc, #68]	; (800222c <HAL_ADC_ConfigChannel+0x258>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d111      	bne.n	800220e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021ea:	4b11      	ldr	r3, [pc, #68]	; (8002230 <HAL_ADC_ConfigChannel+0x25c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a11      	ldr	r2, [pc, #68]	; (8002234 <HAL_ADC_ConfigChannel+0x260>)
 80021f0:	fba2 2303 	umull	r2, r3, r2, r3
 80021f4:	0c9a      	lsrs	r2, r3, #18
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002200:	e002      	b.n	8002208 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	3b01      	subs	r3, #1
 8002206:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002208:	68bb      	ldr	r3, [r7, #8]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f9      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	4618      	mov	r0, r3
 800221a:	3714      	adds	r7, #20
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	40012300 	.word	0x40012300
 8002228:	40012000 	.word	0x40012000
 800222c:	10000012 	.word	0x10000012
 8002230:	20000000 	.word	0x20000000
 8002234:	431bde83 	.word	0x431bde83

08002238 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002240:	4b79      	ldr	r3, [pc, #484]	; (8002428 <ADC_Init+0x1f0>)
 8002242:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	431a      	orrs	r2, r3
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800226c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	6859      	ldr	r1, [r3, #4]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	021a      	lsls	r2, r3, #8
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	430a      	orrs	r2, r1
 8002280:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	685a      	ldr	r2, [r3, #4]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002290:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6859      	ldr	r1, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	689a      	ldr	r2, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	430a      	orrs	r2, r1
 80022a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689a      	ldr	r2, [r3, #8]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6899      	ldr	r1, [r3, #8]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68da      	ldr	r2, [r3, #12]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022ca:	4a58      	ldr	r2, [pc, #352]	; (800242c <ADC_Init+0x1f4>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d022      	beq.n	8002316 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	689a      	ldr	r2, [r3, #8]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6899      	ldr	r1, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	430a      	orrs	r2, r1
 80022f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002300:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	6899      	ldr	r1, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	e00f      	b.n	8002336 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689a      	ldr	r2, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002324:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	689a      	ldr	r2, [r3, #8]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002334:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 0202 	bic.w	r2, r2, #2
 8002344:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	7e1b      	ldrb	r3, [r3, #24]
 8002350:	005a      	lsls	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d01b      	beq.n	800239c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	685a      	ldr	r2, [r3, #4]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002372:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002382:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6859      	ldr	r1, [r3, #4]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	3b01      	subs	r3, #1
 8002390:	035a      	lsls	r2, r3, #13
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	e007      	b.n	80023ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	3b01      	subs	r3, #1
 80023c8:	051a      	lsls	r2, r3, #20
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	689a      	ldr	r2, [r3, #8]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80023e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6899      	ldr	r1, [r3, #8]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023ee:	025a      	lsls	r2, r3, #9
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002406:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	6899      	ldr	r1, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	029a      	lsls	r2, r3, #10
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	609a      	str	r2, [r3, #8]
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	40012300 	.word	0x40012300
 800242c:	0f000001 	.word	0x0f000001

08002430 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800243c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002446:	2b00      	cmp	r3, #0
 8002448:	d13c      	bne.n	80024c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d12b      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002468:	2b00      	cmp	r3, #0
 800246a:	d127      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002472:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002476:	2b00      	cmp	r3, #0
 8002478:	d006      	beq.n	8002488 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002484:	2b00      	cmp	r3, #0
 8002486:	d119      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f022 0220 	bic.w	r2, r2, #32
 8002496:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d105      	bne.n	80024bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f7fe ffab 	bl	8001418 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024c2:	e00e      	b.n	80024e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c8:	f003 0310 	and.w	r3, r3, #16
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff fd75 	bl	8001fc0 <HAL_ADC_ErrorCallback>
}
 80024d6:	e004      	b.n	80024e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	4798      	blx	r3
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f7ff fd4d 	bl	8001f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2240      	movs	r2, #64	; 0x40
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251e:	f043 0204 	orr.w	r2, r3, #4
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f7ff fd4a 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800252c:	bf00      	nop
 800252e:	3710      	adds	r7, #16
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	f003 0307 	and.w	r3, r3, #7
 8002556:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002558:	4b0c      	ldr	r3, [pc, #48]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800255a:	68db      	ldr	r3, [r3, #12]
 800255c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002564:	4013      	ands	r3, r2
 8002566:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002570:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002574:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257a:	4a04      	ldr	r2, [pc, #16]	; (800258c <__NVIC_SetPriorityGrouping+0x44>)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	60d3      	str	r3, [r2, #12]
}
 8002580:	bf00      	nop
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr
 800258c:	e000ed00 	.word	0xe000ed00

08002590 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 0307 	and.w	r3, r3, #7
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	e000ed00 	.word	0xe000ed00

080025ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	4603      	mov	r3, r0
 80025b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	db0b      	blt.n	80025d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	f003 021f 	and.w	r2, r3, #31
 80025c4:	4907      	ldr	r1, [pc, #28]	; (80025e4 <__NVIC_EnableIRQ+0x38>)
 80025c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ca:	095b      	lsrs	r3, r3, #5
 80025cc:	2001      	movs	r0, #1
 80025ce:	fa00 f202 	lsl.w	r2, r0, r2
 80025d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000e100 	.word	0xe000e100

080025e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	6039      	str	r1, [r7, #0]
 80025f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	db0a      	blt.n	8002612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	b2da      	uxtb	r2, r3
 8002600:	490c      	ldr	r1, [pc, #48]	; (8002634 <__NVIC_SetPriority+0x4c>)
 8002602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002606:	0112      	lsls	r2, r2, #4
 8002608:	b2d2      	uxtb	r2, r2
 800260a:	440b      	add	r3, r1
 800260c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002610:	e00a      	b.n	8002628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	b2da      	uxtb	r2, r3
 8002616:	4908      	ldr	r1, [pc, #32]	; (8002638 <__NVIC_SetPriority+0x50>)
 8002618:	79fb      	ldrb	r3, [r7, #7]
 800261a:	f003 030f 	and.w	r3, r3, #15
 800261e:	3b04      	subs	r3, #4
 8002620:	0112      	lsls	r2, r2, #4
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	440b      	add	r3, r1
 8002626:	761a      	strb	r2, [r3, #24]
}
 8002628:	bf00      	nop
 800262a:	370c      	adds	r7, #12
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr
 8002634:	e000e100 	.word	0xe000e100
 8002638:	e000ed00 	.word	0xe000ed00

0800263c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800263c:	b480      	push	{r7}
 800263e:	b089      	sub	sp, #36	; 0x24
 8002640:	af00      	add	r7, sp, #0
 8002642:	60f8      	str	r0, [r7, #12]
 8002644:	60b9      	str	r1, [r7, #8]
 8002646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2b04      	cmp	r3, #4
 8002658:	bf28      	it	cs
 800265a:	2304      	movcs	r3, #4
 800265c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	3304      	adds	r3, #4
 8002662:	2b06      	cmp	r3, #6
 8002664:	d902      	bls.n	800266c <NVIC_EncodePriority+0x30>
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3b03      	subs	r3, #3
 800266a:	e000      	b.n	800266e <NVIC_EncodePriority+0x32>
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002670:	f04f 32ff 	mov.w	r2, #4294967295
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	fa02 f303 	lsl.w	r3, r2, r3
 800267a:	43da      	mvns	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	401a      	ands	r2, r3
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002684:	f04f 31ff 	mov.w	r1, #4294967295
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	fa01 f303 	lsl.w	r3, r1, r3
 800268e:	43d9      	mvns	r1, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002694:	4313      	orrs	r3, r2
         );
}
 8002696:	4618      	mov	r0, r3
 8002698:	3724      	adds	r7, #36	; 0x24
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b4:	d301      	bcc.n	80026ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b6:	2301      	movs	r3, #1
 80026b8:	e00f      	b.n	80026da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <SysTick_Config+0x40>)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	3b01      	subs	r3, #1
 80026c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c2:	210f      	movs	r1, #15
 80026c4:	f04f 30ff 	mov.w	r0, #4294967295
 80026c8:	f7ff ff8e 	bl	80025e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026cc:	4b05      	ldr	r3, [pc, #20]	; (80026e4 <SysTick_Config+0x40>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d2:	4b04      	ldr	r3, [pc, #16]	; (80026e4 <SysTick_Config+0x40>)
 80026d4:	2207      	movs	r2, #7
 80026d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d8:	2300      	movs	r3, #0
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010

080026e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	f7ff ff29 	bl	8002548 <__NVIC_SetPriorityGrouping>
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	4603      	mov	r3, r0
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
 800270a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002710:	f7ff ff3e 	bl	8002590 <__NVIC_GetPriorityGrouping>
 8002714:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	6978      	ldr	r0, [r7, #20]
 800271c:	f7ff ff8e 	bl	800263c <NVIC_EncodePriority>
 8002720:	4602      	mov	r2, r0
 8002722:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002726:	4611      	mov	r1, r2
 8002728:	4618      	mov	r0, r3
 800272a:	f7ff ff5d 	bl	80025e8 <__NVIC_SetPriority>
}
 800272e:	bf00      	nop
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002736:	b580      	push	{r7, lr}
 8002738:	b082      	sub	sp, #8
 800273a:	af00      	add	r7, sp, #0
 800273c:	4603      	mov	r3, r0
 800273e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002744:	4618      	mov	r0, r3
 8002746:	f7ff ff31 	bl	80025ac <__NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ffa2 	bl	80026a4 <SysTick_Config>
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3708      	adds	r7, #8
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
	...

0800276c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b086      	sub	sp, #24
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002778:	f7ff f920 	bl	80019bc <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e099      	b.n	80028bc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2202      	movs	r2, #2
 8002794:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0201 	bic.w	r2, r2, #1
 80027a6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027a8:	e00f      	b.n	80027ca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027aa:	f7ff f907 	bl	80019bc <HAL_GetTick>
 80027ae:	4602      	mov	r2, r0
 80027b0:	693b      	ldr	r3, [r7, #16]
 80027b2:	1ad3      	subs	r3, r2, r3
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d908      	bls.n	80027ca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2220      	movs	r2, #32
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2203      	movs	r2, #3
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e078      	b.n	80028bc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0301 	and.w	r3, r3, #1
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e8      	bne.n	80027aa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027e0:	697a      	ldr	r2, [r7, #20]
 80027e2:	4b38      	ldr	r3, [pc, #224]	; (80028c4 <HAL_DMA_Init+0x158>)
 80027e4:	4013      	ands	r3, r2
 80027e6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	691b      	ldr	r3, [r3, #16]
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800280e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a1b      	ldr	r3, [r3, #32]
 8002814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4313      	orrs	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2b04      	cmp	r3, #4
 8002822:	d107      	bne.n	8002834 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282c:	4313      	orrs	r3, r2
 800282e:	697a      	ldr	r2, [r7, #20]
 8002830:	4313      	orrs	r3, r2
 8002832:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	697a      	ldr	r2, [r7, #20]
 800283a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f023 0307 	bic.w	r3, r3, #7
 800284a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	697a      	ldr	r2, [r7, #20]
 8002852:	4313      	orrs	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285a:	2b04      	cmp	r3, #4
 800285c:	d117      	bne.n	800288e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800286c:	2b00      	cmp	r3, #0
 800286e:	d00e      	beq.n	800288e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 fb01 	bl	8002e78 <DMA_CheckFifoParam>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800288a:	2301      	movs	r3, #1
 800288c:	e016      	b.n	80028bc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 fab8 	bl	8002e0c <DMA_CalcBaseAndBitshift>
 800289c:	4603      	mov	r3, r0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a4:	223f      	movs	r2, #63	; 0x3f
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2200      	movs	r2, #0
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80028ba:	2300      	movs	r3, #0
}
 80028bc:	4618      	mov	r0, r3
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	f010803f 	.word	0xf010803f

080028c8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b086      	sub	sp, #24
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028d6:	2300      	movs	r3, #0
 80028d8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d101      	bne.n	80028ee <HAL_DMA_Start_IT+0x26>
 80028ea:	2302      	movs	r3, #2
 80028ec:	e040      	b.n	8002970 <HAL_DMA_Start_IT+0xa8>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d12f      	bne.n	8002962 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2202      	movs	r2, #2
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	f000 fa4a 	bl	8002db0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002920:	223f      	movs	r2, #63	; 0x3f
 8002922:	409a      	lsls	r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f042 0216 	orr.w	r2, r2, #22
 8002936:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293c:	2b00      	cmp	r3, #0
 800293e:	d007      	beq.n	8002950 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	681a      	ldr	r2, [r3, #0]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0208 	orr.w	r2, r2, #8
 800294e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
 8002960:	e005      	b.n	800296e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800296a:	2302      	movs	r3, #2
 800296c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800296e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002970:	4618      	mov	r0, r3
 8002972:	3718      	adds	r7, #24
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}

08002978 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	b084      	sub	sp, #16
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002984:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002986:	f7ff f819 	bl	80019bc <HAL_GetTick>
 800298a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002992:	b2db      	uxtb	r3, r3
 8002994:	2b02      	cmp	r3, #2
 8002996:	d008      	beq.n	80029aa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2280      	movs	r2, #128	; 0x80
 800299c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80029a6:	2301      	movs	r3, #1
 80029a8:	e052      	b.n	8002a50 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0216 	bic.w	r2, r2, #22
 80029b8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	695a      	ldr	r2, [r3, #20]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029c8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d103      	bne.n	80029da <HAL_DMA_Abort+0x62>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d007      	beq.n	80029ea <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f022 0208 	bic.w	r2, r2, #8
 80029e8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f022 0201 	bic.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80029fa:	e013      	b.n	8002a24 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80029fc:	f7fe ffde 	bl	80019bc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b05      	cmp	r3, #5
 8002a08:	d90c      	bls.n	8002a24 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e015      	b.n	8002a50 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e4      	bne.n	80029fc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a36:	223f      	movs	r2, #63	; 0x3f
 8002a38:	409a      	lsls	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3710      	adds	r7, #16
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d004      	beq.n	8002a76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2280      	movs	r2, #128	; 0x80
 8002a70:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e00c      	b.n	8002a90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2205      	movs	r2, #5
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0201 	bic.w	r2, r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002aa8:	4b92      	ldr	r3, [pc, #584]	; (8002cf4 <HAL_DMA_IRQHandler+0x258>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a92      	ldr	r2, [pc, #584]	; (8002cf8 <HAL_DMA_IRQHandler+0x25c>)
 8002aae:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab2:	0a9b      	lsrs	r3, r3, #10
 8002ab4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac6:	2208      	movs	r2, #8
 8002ac8:	409a      	lsls	r2, r3
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d01a      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0304 	and.w	r3, r3, #4
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d013      	beq.n	8002b08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f022 0204 	bic.w	r2, r2, #4
 8002aee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af4:	2208      	movs	r2, #8
 8002af6:	409a      	lsls	r2, r3
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	409a      	lsls	r2, r3
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	4013      	ands	r3, r2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d012      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	695b      	ldr	r3, [r3, #20]
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00b      	beq.n	8002b3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	409a      	lsls	r2, r3
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	f043 0202 	orr.w	r2, r3, #2
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b42:	2204      	movs	r2, #4
 8002b44:	409a      	lsls	r2, r3
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d012      	beq.n	8002b74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0302 	and.w	r3, r3, #2
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d00b      	beq.n	8002b74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b60:	2204      	movs	r2, #4
 8002b62:	409a      	lsls	r2, r3
 8002b64:	693b      	ldr	r3, [r7, #16]
 8002b66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b6c:	f043 0204 	orr.w	r2, r3, #4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b78:	2210      	movs	r2, #16
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d043      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d03c      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b96:	2210      	movs	r2, #16
 8002b98:	409a      	lsls	r2, r3
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d018      	beq.n	8002bde <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d108      	bne.n	8002bcc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d024      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	6878      	ldr	r0, [r7, #4]
 8002bc8:	4798      	blx	r3
 8002bca:	e01f      	b.n	8002c0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d01b      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	4798      	blx	r3
 8002bdc:	e016      	b.n	8002c0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d107      	bne.n	8002bfc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f022 0208 	bic.w	r2, r2, #8
 8002bfa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d003      	beq.n	8002c0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c10:	2220      	movs	r2, #32
 8002c12:	409a      	lsls	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4013      	ands	r3, r2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 808e 	beq.w	8002d3a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0310 	and.w	r3, r3, #16
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8086 	beq.w	8002d3a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c32:	2220      	movs	r2, #32
 8002c34:	409a      	lsls	r2, r3
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b05      	cmp	r3, #5
 8002c44:	d136      	bne.n	8002cb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0216 	bic.w	r2, r2, #22
 8002c54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d103      	bne.n	8002c76 <HAL_DMA_IRQHandler+0x1da>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d007      	beq.n	8002c86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 0208 	bic.w	r2, r2, #8
 8002c84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8a:	223f      	movs	r2, #63	; 0x3f
 8002c8c:	409a      	lsls	r2, r3
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d07d      	beq.n	8002da6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	4798      	blx	r3
        }
        return;
 8002cb2:	e078      	b.n	8002da6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d01c      	beq.n	8002cfc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d108      	bne.n	8002ce2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d030      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	4798      	blx	r3
 8002ce0:	e02b      	b.n	8002d3a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d027      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	4798      	blx	r3
 8002cf2:	e022      	b.n	8002d3a <HAL_DMA_IRQHandler+0x29e>
 8002cf4:	20000000 	.word	0x20000000
 8002cf8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10f      	bne.n	8002d2a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 0210 	bic.w	r2, r2, #16
 8002d18:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d003      	beq.n	8002d3a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d032      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d022      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2205      	movs	r2, #5
 8002d52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0201 	bic.w	r2, r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	60bb      	str	r3, [r7, #8]
 8002d6c:	697a      	ldr	r2, [r7, #20]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d307      	bcc.n	8002d82 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1f2      	bne.n	8002d66 <HAL_DMA_IRQHandler+0x2ca>
 8002d80:	e000      	b.n	8002d84 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d82:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d005      	beq.n	8002da8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da0:	6878      	ldr	r0, [r7, #4]
 8002da2:	4798      	blx	r3
 8002da4:	e000      	b.n	8002da8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002da6:	bf00      	nop
    }
  }
}
 8002da8:	3718      	adds	r7, #24
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop

08002db0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
 8002dbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002dcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	683a      	ldr	r2, [r7, #0]
 8002dd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b40      	cmp	r3, #64	; 0x40
 8002ddc:	d108      	bne.n	8002df0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dee:	e007      	b.n	8002e00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68ba      	ldr	r2, [r7, #8]
 8002df6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	60da      	str	r2, [r3, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b085      	sub	sp, #20
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	3b10      	subs	r3, #16
 8002e1c:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <DMA_CalcBaseAndBitshift+0x64>)
 8002e1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e26:	4a13      	ldr	r2, [pc, #76]	; (8002e74 <DMA_CalcBaseAndBitshift+0x68>)
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	461a      	mov	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2b03      	cmp	r3, #3
 8002e38:	d909      	bls.n	8002e4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	1d1a      	adds	r2, r3, #4
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	659a      	str	r2, [r3, #88]	; 0x58
 8002e4c:	e007      	b.n	8002e5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e56:	f023 0303 	bic.w	r3, r3, #3
 8002e5a:	687a      	ldr	r2, [r7, #4]
 8002e5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
 8002e6e:	bf00      	nop
 8002e70:	aaaaaaab 	.word	0xaaaaaaab
 8002e74:	08005290 	.word	0x08005290

08002e78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e80:	2300      	movs	r3, #0
 8002e82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11f      	bne.n	8002ed2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d855      	bhi.n	8002f44 <DMA_CheckFifoParam+0xcc>
 8002e98:	a201      	add	r2, pc, #4	; (adr r2, 8002ea0 <DMA_CheckFifoParam+0x28>)
 8002e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e9e:	bf00      	nop
 8002ea0:	08002eb1 	.word	0x08002eb1
 8002ea4:	08002ec3 	.word	0x08002ec3
 8002ea8:	08002eb1 	.word	0x08002eb1
 8002eac:	08002f45 	.word	0x08002f45
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d045      	beq.n	8002f48 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ec0:	e042      	b.n	8002f48 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eca:	d13f      	bne.n	8002f4c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ed0:	e03c      	b.n	8002f4c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	699b      	ldr	r3, [r3, #24]
 8002ed6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eda:	d121      	bne.n	8002f20 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d836      	bhi.n	8002f50 <DMA_CheckFifoParam+0xd8>
 8002ee2:	a201      	add	r2, pc, #4	; (adr r2, 8002ee8 <DMA_CheckFifoParam+0x70>)
 8002ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee8:	08002ef9 	.word	0x08002ef9
 8002eec:	08002eff 	.word	0x08002eff
 8002ef0:	08002ef9 	.word	0x08002ef9
 8002ef4:	08002f11 	.word	0x08002f11
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	73fb      	strb	r3, [r7, #15]
      break;
 8002efc:	e02f      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d024      	beq.n	8002f54 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f0e:	e021      	b.n	8002f54 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f18:	d11e      	bne.n	8002f58 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f1e:	e01b      	b.n	8002f58 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d902      	bls.n	8002f2c <DMA_CheckFifoParam+0xb4>
 8002f26:	2b03      	cmp	r3, #3
 8002f28:	d003      	beq.n	8002f32 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f2a:	e018      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	e015      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00e      	beq.n	8002f5c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	73fb      	strb	r3, [r7, #15]
      break;
 8002f42:	e00b      	b.n	8002f5c <DMA_CheckFifoParam+0xe4>
      break;
 8002f44:	bf00      	nop
 8002f46:	e00a      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;
 8002f48:	bf00      	nop
 8002f4a:	e008      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;
 8002f4c:	bf00      	nop
 8002f4e:	e006      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;
 8002f50:	bf00      	nop
 8002f52:	e004      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;
 8002f54:	bf00      	nop
 8002f56:	e002      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;   
 8002f58:	bf00      	nop
 8002f5a:	e000      	b.n	8002f5e <DMA_CheckFifoParam+0xe6>
      break;
 8002f5c:	bf00      	nop
    }
  } 
  
  return status; 
 8002f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b089      	sub	sp, #36	; 0x24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e177      	b.n	8003278 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f88:	2201      	movs	r2, #1
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	697a      	ldr	r2, [r7, #20]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	f040 8166 	bne.w	8003272 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d00b      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	2b02      	cmp	r3, #2
 8002fb4:	d007      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002fba:	2b11      	cmp	r3, #17
 8002fbc:	d003      	beq.n	8002fc6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b12      	cmp	r3, #18
 8002fc4:	d130      	bne.n	8003028 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	005b      	lsls	r3, r3, #1
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68da      	ldr	r2, [r3, #12]
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	091b      	lsrs	r3, r3, #4
 8003012:	f003 0201 	and.w	r2, r3, #1
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	68db      	ldr	r3, [r3, #12]
 800302c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	2203      	movs	r2, #3
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	69ba      	ldr	r2, [r7, #24]
 8003056:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2b02      	cmp	r3, #2
 800305e:	d003      	beq.n	8003068 <HAL_GPIO_Init+0xfc>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	2b12      	cmp	r3, #18
 8003066:	d123      	bne.n	80030b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	08da      	lsrs	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	3208      	adds	r2, #8
 8003070:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003074:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003076:	69fb      	ldr	r3, [r7, #28]
 8003078:	f003 0307 	and.w	r3, r3, #7
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	220f      	movs	r2, #15
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43db      	mvns	r3, r3
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4013      	ands	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691a      	ldr	r2, [r3, #16]
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	69ba      	ldr	r2, [r7, #24]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	08da      	lsrs	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3208      	adds	r2, #8
 80030aa:	69b9      	ldr	r1, [r7, #24]
 80030ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	005b      	lsls	r3, r3, #1
 80030ba:	2203      	movs	r2, #3
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 0203 	and.w	r2, r3, #3
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80c0 	beq.w	8003272 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60fb      	str	r3, [r7, #12]
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_GPIO_Init+0x320>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030fa:	4a64      	ldr	r2, [pc, #400]	; (800328c <HAL_GPIO_Init+0x320>)
 80030fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003100:	6453      	str	r3, [r2, #68]	; 0x44
 8003102:	4b62      	ldr	r3, [pc, #392]	; (800328c <HAL_GPIO_Init+0x320>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800310e:	4a60      	ldr	r2, [pc, #384]	; (8003290 <HAL_GPIO_Init+0x324>)
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800311a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	fa02 f303 	lsl.w	r3, r2, r3
 800312a:	43db      	mvns	r3, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4013      	ands	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a57      	ldr	r2, [pc, #348]	; (8003294 <HAL_GPIO_Init+0x328>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d037      	beq.n	80031aa <HAL_GPIO_Init+0x23e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a56      	ldr	r2, [pc, #344]	; (8003298 <HAL_GPIO_Init+0x32c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d031      	beq.n	80031a6 <HAL_GPIO_Init+0x23a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a55      	ldr	r2, [pc, #340]	; (800329c <HAL_GPIO_Init+0x330>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02b      	beq.n	80031a2 <HAL_GPIO_Init+0x236>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a54      	ldr	r2, [pc, #336]	; (80032a0 <HAL_GPIO_Init+0x334>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d025      	beq.n	800319e <HAL_GPIO_Init+0x232>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a53      	ldr	r2, [pc, #332]	; (80032a4 <HAL_GPIO_Init+0x338>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d01f      	beq.n	800319a <HAL_GPIO_Init+0x22e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a52      	ldr	r2, [pc, #328]	; (80032a8 <HAL_GPIO_Init+0x33c>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d019      	beq.n	8003196 <HAL_GPIO_Init+0x22a>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a51      	ldr	r2, [pc, #324]	; (80032ac <HAL_GPIO_Init+0x340>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d013      	beq.n	8003192 <HAL_GPIO_Init+0x226>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	4a50      	ldr	r2, [pc, #320]	; (80032b0 <HAL_GPIO_Init+0x344>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d00d      	beq.n	800318e <HAL_GPIO_Init+0x222>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4a4f      	ldr	r2, [pc, #316]	; (80032b4 <HAL_GPIO_Init+0x348>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d007      	beq.n	800318a <HAL_GPIO_Init+0x21e>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a4e      	ldr	r2, [pc, #312]	; (80032b8 <HAL_GPIO_Init+0x34c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_GPIO_Init+0x21a>
 8003182:	2309      	movs	r3, #9
 8003184:	e012      	b.n	80031ac <HAL_GPIO_Init+0x240>
 8003186:	230a      	movs	r3, #10
 8003188:	e010      	b.n	80031ac <HAL_GPIO_Init+0x240>
 800318a:	2308      	movs	r3, #8
 800318c:	e00e      	b.n	80031ac <HAL_GPIO_Init+0x240>
 800318e:	2307      	movs	r3, #7
 8003190:	e00c      	b.n	80031ac <HAL_GPIO_Init+0x240>
 8003192:	2306      	movs	r3, #6
 8003194:	e00a      	b.n	80031ac <HAL_GPIO_Init+0x240>
 8003196:	2305      	movs	r3, #5
 8003198:	e008      	b.n	80031ac <HAL_GPIO_Init+0x240>
 800319a:	2304      	movs	r3, #4
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x240>
 800319e:	2303      	movs	r3, #3
 80031a0:	e004      	b.n	80031ac <HAL_GPIO_Init+0x240>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_Init+0x240>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_Init+0x240>
 80031aa:	2300      	movs	r3, #0
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f002 0203 	and.w	r2, r2, #3
 80031b2:	0092      	lsls	r2, r2, #2
 80031b4:	4093      	lsls	r3, r2
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031bc:	4934      	ldr	r1, [pc, #208]	; (8003290 <HAL_GPIO_Init+0x324>)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ca:	4b3c      	ldr	r3, [pc, #240]	; (80032bc <HAL_GPIO_Init+0x350>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031ee:	4a33      	ldr	r2, [pc, #204]	; (80032bc <HAL_GPIO_Init+0x350>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031f4:	4b31      	ldr	r3, [pc, #196]	; (80032bc <HAL_GPIO_Init+0x350>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003218:	4a28      	ldr	r2, [pc, #160]	; (80032bc <HAL_GPIO_Init+0x350>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800321e:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_GPIO_Init+0x350>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003242:	4a1e      	ldr	r2, [pc, #120]	; (80032bc <HAL_GPIO_Init+0x350>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003248:	4b1c      	ldr	r3, [pc, #112]	; (80032bc <HAL_GPIO_Init+0x350>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800326c:	4a13      	ldr	r2, [pc, #76]	; (80032bc <HAL_GPIO_Init+0x350>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	f67f ae84 	bls.w	8002f88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003280:	bf00      	nop
 8003282:	3724      	adds	r7, #36	; 0x24
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40023800 	.word	0x40023800
 8003290:	40013800 	.word	0x40013800
 8003294:	40020000 	.word	0x40020000
 8003298:	40020400 	.word	0x40020400
 800329c:	40020800 	.word	0x40020800
 80032a0:	40020c00 	.word	0x40020c00
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40021400 	.word	0x40021400
 80032ac:	40021800 	.word	0x40021800
 80032b0:	40021c00 	.word	0x40021c00
 80032b4:	40022000 	.word	0x40022000
 80032b8:	40022400 	.word	0x40022400
 80032bc:	40013c00 	.word	0x40013c00

080032c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b083      	sub	sp, #12
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	460b      	mov	r3, r1
 80032ca:	807b      	strh	r3, [r7, #2]
 80032cc:	4613      	mov	r3, r2
 80032ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032d0:	787b      	ldrb	r3, [r7, #1]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d003      	beq.n	80032de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032d6:	887a      	ldrh	r2, [r7, #2]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032dc:	e003      	b.n	80032e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032de:	887b      	ldrh	r3, [r7, #2]
 80032e0:	041a      	lsls	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	619a      	str	r2, [r3, #24]
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695a      	ldr	r2, [r3, #20]
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	401a      	ands	r2, r3
 8003306:	887b      	ldrh	r3, [r7, #2]
 8003308:	429a      	cmp	r2, r3
 800330a:	d104      	bne.n	8003316 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800330c:	887b      	ldrh	r3, [r7, #2]
 800330e:	041a      	lsls	r2, r3, #16
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003314:	e002      	b.n	800331c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003316:	887a      	ldrh	r2, [r7, #2]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	619a      	str	r2, [r3, #24]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	4603      	mov	r3, r0
 8003330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003332:	4b08      	ldr	r3, [pc, #32]	; (8003354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003334:	695a      	ldr	r2, [r3, #20]
 8003336:	88fb      	ldrh	r3, [r7, #6]
 8003338:	4013      	ands	r3, r2
 800333a:	2b00      	cmp	r3, #0
 800333c:	d006      	beq.n	800334c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003344:	88fb      	ldrh	r3, [r7, #6]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd ff58 	bl	80011fc <HAL_GPIO_EXTI_Callback>
  }
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40013c00 	.word	0x40013c00

08003358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003362:	2300      	movs	r3, #0
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	4b20      	ldr	r3, [pc, #128]	; (80033e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	4a1f      	ldr	r2, [pc, #124]	; (80033e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800336c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003370:	6413      	str	r3, [r2, #64]	; 0x40
 8003372:	4b1d      	ldr	r3, [pc, #116]	; (80033e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337a:	603b      	str	r3, [r7, #0]
 800337c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800337e:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_PWREx_EnableOverDrive+0x94>)
 8003380:	2201      	movs	r2, #1
 8003382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003384:	f7fe fb1a 	bl	80019bc <HAL_GetTick>
 8003388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800338a:	e009      	b.n	80033a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800338c:	f7fe fb16 	bl	80019bc <HAL_GetTick>
 8003390:	4602      	mov	r2, r0
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	1ad3      	subs	r3, r2, r3
 8003396:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800339a:	d901      	bls.n	80033a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e01f      	b.n	80033e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80033a0:	4b13      	ldr	r3, [pc, #76]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ac:	d1ee      	bne.n	800338c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033b4:	f7fe fb02 	bl	80019bc <HAL_GetTick>
 80033b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033ba:	e009      	b.n	80033d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80033bc:	f7fe fafe 	bl	80019bc <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033ca:	d901      	bls.n	80033d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e007      	b.n	80033e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80033d0:	4b07      	ldr	r3, [pc, #28]	; (80033f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80033dc:	d1ee      	bne.n	80033bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3708      	adds	r7, #8
 80033e4:	46bd      	mov	sp, r7
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	420e0040 	.word	0x420e0040
 80033f0:	40007000 	.word	0x40007000
 80033f4:	420e0044 	.word	0x420e0044

080033f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d101      	bne.n	800340a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e25b      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b00      	cmp	r3, #0
 8003414:	d075      	beq.n	8003502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003416:	4ba3      	ldr	r3, [pc, #652]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b04      	cmp	r3, #4
 8003420:	d00c      	beq.n	800343c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003422:	4ba0      	ldr	r3, [pc, #640]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800342a:	2b08      	cmp	r3, #8
 800342c:	d112      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342e:	4b9d      	ldr	r3, [pc, #628]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003436:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800343a:	d10b      	bne.n	8003454 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	4b99      	ldr	r3, [pc, #612]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003444:	2b00      	cmp	r3, #0
 8003446:	d05b      	beq.n	8003500 <HAL_RCC_OscConfig+0x108>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d157      	bne.n	8003500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e236      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800345c:	d106      	bne.n	800346c <HAL_RCC_OscConfig+0x74>
 800345e:	4b91      	ldr	r3, [pc, #580]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a90      	ldr	r2, [pc, #576]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e01d      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003474:	d10c      	bne.n	8003490 <HAL_RCC_OscConfig+0x98>
 8003476:	4b8b      	ldr	r3, [pc, #556]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a8a      	ldr	r2, [pc, #552]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800347c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003480:	6013      	str	r3, [r2, #0]
 8003482:	4b88      	ldr	r3, [pc, #544]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a87      	ldr	r2, [pc, #540]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800348c:	6013      	str	r3, [r2, #0]
 800348e:	e00b      	b.n	80034a8 <HAL_RCC_OscConfig+0xb0>
 8003490:	4b84      	ldr	r3, [pc, #528]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a83      	ldr	r2, [pc, #524]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003496:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800349a:	6013      	str	r3, [r2, #0]
 800349c:	4b81      	ldr	r3, [pc, #516]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a80      	ldr	r2, [pc, #512]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80034a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d013      	beq.n	80034d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fe fa84 	bl	80019bc <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fe fa80 	bl	80019bc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1fb      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b76      	ldr	r3, [pc, #472]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0xc0>
 80034d6:	e014      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d8:	f7fe fa70 	bl	80019bc <HAL_GetTick>
 80034dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034e0:	f7fe fa6c 	bl	80019bc <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	2b64      	cmp	r3, #100	; 0x64
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e1e7      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034f2:	4b6c      	ldr	r3, [pc, #432]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f0      	bne.n	80034e0 <HAL_RCC_OscConfig+0xe8>
 80034fe:	e000      	b.n	8003502 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	d063      	beq.n	80035d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800350e:	4b65      	ldr	r3, [pc, #404]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b00      	cmp	r3, #0
 8003518:	d00b      	beq.n	8003532 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800351a:	4b62      	ldr	r3, [pc, #392]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d11c      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003526:	4b5f      	ldr	r3, [pc, #380]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d116      	bne.n	8003560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003532:	4b5c      	ldr	r3, [pc, #368]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d005      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e1bb      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800354a:	4b56      	ldr	r3, [pc, #344]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	00db      	lsls	r3, r3, #3
 8003558:	4952      	ldr	r1, [pc, #328]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800355a:	4313      	orrs	r3, r2
 800355c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355e:	e03a      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d020      	beq.n	80035aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003568:	4b4f      	ldr	r3, [pc, #316]	; (80036a8 <HAL_RCC_OscConfig+0x2b0>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800356e:	f7fe fa25 	bl	80019bc <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003576:	f7fe fa21 	bl	80019bc <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e19c      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003588:	4b46      	ldr	r3, [pc, #280]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003594:	4b43      	ldr	r3, [pc, #268]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	00db      	lsls	r3, r3, #3
 80035a2:	4940      	ldr	r1, [pc, #256]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	600b      	str	r3, [r1, #0]
 80035a8:	e015      	b.n	80035d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035aa:	4b3f      	ldr	r3, [pc, #252]	; (80036a8 <HAL_RCC_OscConfig+0x2b0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b0:	f7fe fa04 	bl	80019bc <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035b8:	f7fe fa00 	bl	80019bc <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b02      	cmp	r3, #2
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e17b      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ca:	4b36      	ldr	r3, [pc, #216]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1f0      	bne.n	80035b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0308 	and.w	r3, r3, #8
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d030      	beq.n	8003644 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	695b      	ldr	r3, [r3, #20]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d016      	beq.n	8003618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035ea:	4b30      	ldr	r3, [pc, #192]	; (80036ac <HAL_RCC_OscConfig+0x2b4>)
 80035ec:	2201      	movs	r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f0:	f7fe f9e4 	bl	80019bc <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f8:	f7fe f9e0 	bl	80019bc <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e15b      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800360a:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800360c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0x200>
 8003616:	e015      	b.n	8003644 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003618:	4b24      	ldr	r3, [pc, #144]	; (80036ac <HAL_RCC_OscConfig+0x2b4>)
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800361e:	f7fe f9cd 	bl	80019bc <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003626:	f7fe f9c9 	bl	80019bc <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b02      	cmp	r3, #2
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e144      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003638:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800363a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1f0      	bne.n	8003626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	f000 80a0 	beq.w	8003792 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003652:	2300      	movs	r3, #0
 8003654:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003656:	4b13      	ldr	r3, [pc, #76]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003662:	2300      	movs	r3, #0
 8003664:	60bb      	str	r3, [r7, #8]
 8003666:	4b0f      	ldr	r3, [pc, #60]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	4a0e      	ldr	r2, [pc, #56]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 800366c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003670:	6413      	str	r3, [r2, #64]	; 0x40
 8003672:	4b0c      	ldr	r3, [pc, #48]	; (80036a4 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003676:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800367e:	2301      	movs	r3, #1
 8003680:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003682:	4b0b      	ldr	r3, [pc, #44]	; (80036b0 <HAL_RCC_OscConfig+0x2b8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368a:	2b00      	cmp	r3, #0
 800368c:	d121      	bne.n	80036d2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800368e:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <HAL_RCC_OscConfig+0x2b8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a07      	ldr	r2, [pc, #28]	; (80036b0 <HAL_RCC_OscConfig+0x2b8>)
 8003694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800369a:	f7fe f98f 	bl	80019bc <HAL_GetTick>
 800369e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036a0:	e011      	b.n	80036c6 <HAL_RCC_OscConfig+0x2ce>
 80036a2:	bf00      	nop
 80036a4:	40023800 	.word	0x40023800
 80036a8:	42470000 	.word	0x42470000
 80036ac:	42470e80 	.word	0x42470e80
 80036b0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b4:	f7fe f982 	bl	80019bc <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e0fd      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b81      	ldr	r3, [pc, #516]	; (80038cc <HAL_RCC_OscConfig+0x4d4>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d0f0      	beq.n	80036b4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d106      	bne.n	80036e8 <HAL_RCC_OscConfig+0x2f0>
 80036da:	4b7d      	ldr	r3, [pc, #500]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	4a7c      	ldr	r2, [pc, #496]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 80036e0:	f043 0301 	orr.w	r3, r3, #1
 80036e4:	6713      	str	r3, [r2, #112]	; 0x70
 80036e6:	e01c      	b.n	8003722 <HAL_RCC_OscConfig+0x32a>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d10c      	bne.n	800370a <HAL_RCC_OscConfig+0x312>
 80036f0:	4b77      	ldr	r3, [pc, #476]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f4:	4a76      	ldr	r2, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6713      	str	r3, [r2, #112]	; 0x70
 80036fc:	4b74      	ldr	r3, [pc, #464]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003700:	4a73      	ldr	r2, [pc, #460]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6713      	str	r3, [r2, #112]	; 0x70
 8003708:	e00b      	b.n	8003722 <HAL_RCC_OscConfig+0x32a>
 800370a:	4b71      	ldr	r3, [pc, #452]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a70      	ldr	r2, [pc, #448]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	4b6e      	ldr	r3, [pc, #440]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371a:	4a6d      	ldr	r2, [pc, #436]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d015      	beq.n	8003756 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fe f947 	bl	80019bc <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe f943 	bl	80019bc <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0bc      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ee      	beq.n	8003732 <HAL_RCC_OscConfig+0x33a>
 8003754:	e014      	b.n	8003780 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003756:	f7fe f931 	bl	80019bc <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe f92d 	bl	80019bc <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	; 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0a6      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003774:	4b56      	ldr	r3, [pc, #344]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ee      	bne.n	800375e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003786:	4b52      	ldr	r3, [pc, #328]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	4a51      	ldr	r2, [pc, #324]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 800378c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 8092 	beq.w	80038c0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800379c:	4b4c      	ldr	r3, [pc, #304]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d05c      	beq.n	8003862 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d141      	bne.n	8003834 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b48      	ldr	r3, [pc, #288]	; (80038d4 <HAL_RCC_OscConfig+0x4dc>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe f901 	bl	80019bc <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe f8fd 	bl	80019bc <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e078      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d0:	4b3f      	ldr	r3, [pc, #252]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f0      	bne.n	80037be <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a1b      	ldr	r3, [r3, #32]
 80037e4:	431a      	orrs	r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ea:	019b      	lsls	r3, r3, #6
 80037ec:	431a      	orrs	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037f2:	085b      	lsrs	r3, r3, #1
 80037f4:	3b01      	subs	r3, #1
 80037f6:	041b      	lsls	r3, r3, #16
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037fe:	061b      	lsls	r3, r3, #24
 8003800:	4933      	ldr	r1, [pc, #204]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003802:	4313      	orrs	r3, r2
 8003804:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003806:	4b33      	ldr	r3, [pc, #204]	; (80038d4 <HAL_RCC_OscConfig+0x4dc>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fe f8d6 	bl	80019bc <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fe f8d2 	bl	80019bc <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e04d      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	4b2a      	ldr	r3, [pc, #168]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d0f0      	beq.n	8003814 <HAL_RCC_OscConfig+0x41c>
 8003832:	e045      	b.n	80038c0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_OscConfig+0x4dc>)
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383a:	f7fe f8bf 	bl	80019bc <HAL_GetTick>
 800383e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003840:	e008      	b.n	8003854 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003842:	f7fe f8bb 	bl	80019bc <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	693b      	ldr	r3, [r7, #16]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	2b02      	cmp	r3, #2
 800384e:	d901      	bls.n	8003854 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003850:	2303      	movs	r3, #3
 8003852:	e036      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003854:	4b1e      	ldr	r3, [pc, #120]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1f0      	bne.n	8003842 <HAL_RCC_OscConfig+0x44a>
 8003860:	e02e      	b.n	80038c0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	699b      	ldr	r3, [r3, #24]
 8003866:	2b01      	cmp	r3, #1
 8003868:	d101      	bne.n	800386e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e029      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800386e:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <HAL_RCC_OscConfig+0x4d8>)
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	69db      	ldr	r3, [r3, #28]
 800387e:	429a      	cmp	r2, r3
 8003880:	d11c      	bne.n	80038bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d115      	bne.n	80038bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003890:	68fa      	ldr	r2, [r7, #12]
 8003892:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003896:	4013      	ands	r3, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800389c:	4293      	cmp	r3, r2
 800389e:	d10d      	bne.n	80038bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d106      	bne.n	80038bc <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3718      	adds	r7, #24
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
 80038ca:	bf00      	nop
 80038cc:	40007000 	.word	0x40007000
 80038d0:	40023800 	.word	0x40023800
 80038d4:	42470060 	.word	0x42470060

080038d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d101      	bne.n	80038ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0cc      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ec:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 030f 	and.w	r3, r3, #15
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d90c      	bls.n	8003914 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038fa:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003902:	4b63      	ldr	r3, [pc, #396]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	429a      	cmp	r2, r3
 800390e:	d001      	beq.n	8003914 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0b8      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d020      	beq.n	8003962 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800392c:	4b59      	ldr	r3, [pc, #356]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a58      	ldr	r2, [pc, #352]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003936:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0308 	and.w	r3, r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003944:	4b53      	ldr	r3, [pc, #332]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a52      	ldr	r2, [pc, #328]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800394e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003950:	4b50      	ldr	r3, [pc, #320]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	494d      	ldr	r1, [pc, #308]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	4313      	orrs	r3, r2
 8003960:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d044      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b01      	cmp	r3, #1
 8003974:	d107      	bne.n	8003986 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003976:	4b47      	ldr	r3, [pc, #284]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d119      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e07f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003992:	2b03      	cmp	r3, #3
 8003994:	d107      	bne.n	80039a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003996:	4b3f      	ldr	r3, [pc, #252]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d109      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e06f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a6:	4b3b      	ldr	r3, [pc, #236]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d101      	bne.n	80039b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e067      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b6:	4b37      	ldr	r3, [pc, #220]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039b8:	689b      	ldr	r3, [r3, #8]
 80039ba:	f023 0203 	bic.w	r2, r3, #3
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4934      	ldr	r1, [pc, #208]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c8:	f7fd fff8 	bl	80019bc <HAL_GetTick>
 80039cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	e00a      	b.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039d0:	f7fd fff4 	bl	80019bc <HAL_GetTick>
 80039d4:	4602      	mov	r2, r0
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	f241 3288 	movw	r2, #5000	; 0x1388
 80039de:	4293      	cmp	r3, r2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e04f      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	4b2b      	ldr	r3, [pc, #172]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 020c 	and.w	r2, r3, #12
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d1eb      	bne.n	80039d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039f8:	4b25      	ldr	r3, [pc, #148]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 030f 	and.w	r3, r3, #15
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	429a      	cmp	r2, r3
 8003a04:	d20c      	bcs.n	8003a20 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0e:	4b20      	ldr	r3, [pc, #128]	; (8003a90 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	683a      	ldr	r2, [r7, #0]
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d001      	beq.n	8003a20 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	e032      	b.n	8003a86 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d008      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a2c:	4b19      	ldr	r3, [pc, #100]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4916      	ldr	r1, [pc, #88]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d009      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a4a:	4b12      	ldr	r3, [pc, #72]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	490e      	ldr	r1, [pc, #56]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a5e:	f000 f821 	bl	8003aa4 <HAL_RCC_GetSysClockFreq>
 8003a62:	4601      	mov	r1, r0
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	091b      	lsrs	r3, r3, #4
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	4a0a      	ldr	r2, [pc, #40]	; (8003a98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a70:	5cd3      	ldrb	r3, [r2, r3]
 8003a72:	fa21 f303 	lsr.w	r3, r1, r3
 8003a76:	4a09      	ldr	r2, [pc, #36]	; (8003a9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a7a:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f7fd ff58 	bl	8001934 <HAL_InitTick>

  return HAL_OK;
 8003a84:	2300      	movs	r3, #0
}
 8003a86:	4618      	mov	r0, r3
 8003a88:	3710      	adds	r7, #16
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023c00 	.word	0x40023c00
 8003a94:	40023800 	.word	0x40023800
 8003a98:	08005278 	.word	0x08005278
 8003a9c:	20000000 	.word	0x20000000
 8003aa0:	20000004 	.word	0x20000004

08003aa4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aba:	4b50      	ldr	r3, [pc, #320]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x158>)
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	f003 030c 	and.w	r3, r3, #12
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d007      	beq.n	8003ad6 <HAL_RCC_GetSysClockFreq+0x32>
 8003ac6:	2b08      	cmp	r3, #8
 8003ac8:	d008      	beq.n	8003adc <HAL_RCC_GetSysClockFreq+0x38>
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	f040 808d 	bne.w	8003bea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003ad2:	60bb      	str	r3, [r7, #8]
       break;
 8003ad4:	e08c      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ad6:	4b4b      	ldr	r3, [pc, #300]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003ad8:	60bb      	str	r3, [r7, #8]
      break;
 8003ada:	e089      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003adc:	4b47      	ldr	r3, [pc, #284]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x158>)
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ae6:	4b45      	ldr	r3, [pc, #276]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x158>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d023      	beq.n	8003b3a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af2:	4b42      	ldr	r3, [pc, #264]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x158>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	099b      	lsrs	r3, r3, #6
 8003af8:	f04f 0400 	mov.w	r4, #0
 8003afc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	ea03 0501 	and.w	r5, r3, r1
 8003b08:	ea04 0602 	and.w	r6, r4, r2
 8003b0c:	4a3d      	ldr	r2, [pc, #244]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b0e:	fb02 f106 	mul.w	r1, r2, r6
 8003b12:	2200      	movs	r2, #0
 8003b14:	fb02 f205 	mul.w	r2, r2, r5
 8003b18:	440a      	add	r2, r1
 8003b1a:	493a      	ldr	r1, [pc, #232]	; (8003c04 <HAL_RCC_GetSysClockFreq+0x160>)
 8003b1c:	fba5 0101 	umull	r0, r1, r5, r1
 8003b20:	1853      	adds	r3, r2, r1
 8003b22:	4619      	mov	r1, r3
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f04f 0400 	mov.w	r4, #0
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	4623      	mov	r3, r4
 8003b2e:	f7fc ff7d 	bl	8000a2c <__aeabi_uldivmod>
 8003b32:	4603      	mov	r3, r0
 8003b34:	460c      	mov	r4, r1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	e049      	b.n	8003bce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3a:	4b30      	ldr	r3, [pc, #192]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x158>)
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	099b      	lsrs	r3, r3, #6
 8003b40:	f04f 0400 	mov.w	r4, #0
 8003b44:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003b48:	f04f 0200 	mov.w	r2, #0
 8003b4c:	ea03 0501 	and.w	r5, r3, r1
 8003b50:	ea04 0602 	and.w	r6, r4, r2
 8003b54:	4629      	mov	r1, r5
 8003b56:	4632      	mov	r2, r6
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	f04f 0400 	mov.w	r4, #0
 8003b60:	0154      	lsls	r4, r2, #5
 8003b62:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003b66:	014b      	lsls	r3, r1, #5
 8003b68:	4619      	mov	r1, r3
 8003b6a:	4622      	mov	r2, r4
 8003b6c:	1b49      	subs	r1, r1, r5
 8003b6e:	eb62 0206 	sbc.w	r2, r2, r6
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	f04f 0400 	mov.w	r4, #0
 8003b7a:	0194      	lsls	r4, r2, #6
 8003b7c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003b80:	018b      	lsls	r3, r1, #6
 8003b82:	1a5b      	subs	r3, r3, r1
 8003b84:	eb64 0402 	sbc.w	r4, r4, r2
 8003b88:	f04f 0100 	mov.w	r1, #0
 8003b8c:	f04f 0200 	mov.w	r2, #0
 8003b90:	00e2      	lsls	r2, r4, #3
 8003b92:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003b96:	00d9      	lsls	r1, r3, #3
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4614      	mov	r4, r2
 8003b9c:	195b      	adds	r3, r3, r5
 8003b9e:	eb44 0406 	adc.w	r4, r4, r6
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	02a2      	lsls	r2, r4, #10
 8003bac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003bb0:	0299      	lsls	r1, r3, #10
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4614      	mov	r4, r2
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	4621      	mov	r1, r4
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f04f 0400 	mov.w	r4, #0
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	f7fc ff32 	bl	8000a2c <__aeabi_uldivmod>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	460c      	mov	r4, r1
 8003bcc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bce:	4b0b      	ldr	r3, [pc, #44]	; (8003bfc <HAL_RCC_GetSysClockFreq+0x158>)
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	0c1b      	lsrs	r3, r3, #16
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	3301      	adds	r3, #1
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003be6:	60bb      	str	r3, [r7, #8]
      break;
 8003be8:	e002      	b.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bea:	4b05      	ldr	r3, [pc, #20]	; (8003c00 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003bec:	60bb      	str	r3, [r7, #8]
      break;
 8003bee:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bf0:	68bb      	ldr	r3, [r7, #8]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	00f42400 	.word	0x00f42400
 8003c04:	017d7840 	.word	0x017d7840

08003c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c0c:	4b03      	ldr	r3, [pc, #12]	; (8003c1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	20000000 	.word	0x20000000

08003c20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c24:	f7ff fff0 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c28:	4601      	mov	r1, r0
 8003c2a:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	0a9b      	lsrs	r3, r3, #10
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	4a03      	ldr	r2, [pc, #12]	; (8003c44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c36:	5cd3      	ldrb	r3, [r2, r3]
 8003c38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40023800 	.word	0x40023800
 8003c44:	08005288 	.word	0x08005288

08003c48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c4c:	f7ff ffdc 	bl	8003c08 <HAL_RCC_GetHCLKFreq>
 8003c50:	4601      	mov	r1, r0
 8003c52:	4b05      	ldr	r3, [pc, #20]	; (8003c68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	0b5b      	lsrs	r3, r3, #13
 8003c58:	f003 0307 	and.w	r3, r3, #7
 8003c5c:	4a03      	ldr	r2, [pc, #12]	; (8003c6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c5e:	5cd3      	ldrb	r3, [r2, r3]
 8003c60:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	08005288 	.word	0x08005288

08003c70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d10b      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d105      	bne.n	8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d075      	beq.n	8003d90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ca4:	4bad      	ldr	r3, [pc, #692]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003caa:	f7fd fe87 	bl	80019bc <HAL_GetTick>
 8003cae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb0:	e008      	b.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cb2:	f7fd fe83 	bl	80019bc <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b02      	cmp	r3, #2
 8003cbe:	d901      	bls.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc0:	2303      	movs	r3, #3
 8003cc2:	e18b      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cc4:	4ba6      	ldr	r3, [pc, #664]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1f0      	bne.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d009      	beq.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	019a      	lsls	r2, r3, #6
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	071b      	lsls	r3, r3, #28
 8003ce8:	499d      	ldr	r1, [pc, #628]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0302 	and.w	r3, r3, #2
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d01f      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cfc:	4b98      	ldr	r3, [pc, #608]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d02:	0f1b      	lsrs	r3, r3, #28
 8003d04:	f003 0307 	and.w	r3, r3, #7
 8003d08:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	019a      	lsls	r2, r3, #6
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	061b      	lsls	r3, r3, #24
 8003d16:	431a      	orrs	r2, r3
 8003d18:	693b      	ldr	r3, [r7, #16]
 8003d1a:	071b      	lsls	r3, r3, #28
 8003d1c:	4990      	ldr	r1, [pc, #576]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003d24:	4b8e      	ldr	r3, [pc, #568]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d2a:	f023 021f 	bic.w	r2, r3, #31
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	3b01      	subs	r3, #1
 8003d34:	498a      	ldr	r1, [pc, #552]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d00d      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	019a      	lsls	r2, r3, #6
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	061b      	lsls	r3, r3, #24
 8003d54:	431a      	orrs	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	071b      	lsls	r3, r3, #28
 8003d5c:	4980      	ldr	r1, [pc, #512]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d64:	4b7d      	ldr	r3, [pc, #500]	; (8003f5c <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8003d66:	2201      	movs	r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003d6a:	f7fd fe27 	bl	80019bc <HAL_GetTick>
 8003d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d70:	e008      	b.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003d72:	f7fd fe23 	bl	80019bc <HAL_GetTick>
 8003d76:	4602      	mov	r2, r0
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	1ad3      	subs	r3, r2, r3
 8003d7c:	2b02      	cmp	r3, #2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e12b      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d84:	4b76      	ldr	r3, [pc, #472]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d0f0      	beq.n	8003d72 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d105      	bne.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d079      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003da8:	4b6e      	ldr	r3, [pc, #440]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003dae:	f7fd fe05 	bl	80019bc <HAL_GetTick>
 8003db2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003db6:	f7fd fe01 	bl	80019bc <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e109      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003dc8:	4b65      	ldr	r3, [pc, #404]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dd4:	d0ef      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f003 0304 	and.w	r3, r3, #4
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d020      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003de2:	4b5f      	ldr	r3, [pc, #380]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de8:	0f1b      	lsrs	r3, r3, #28
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	019a      	lsls	r2, r3, #6
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	061b      	lsls	r3, r3, #24
 8003dfc:	431a      	orrs	r2, r3
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	071b      	lsls	r3, r3, #28
 8003e02:	4957      	ldr	r1, [pc, #348]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e0a:	4b55      	ldr	r3, [pc, #340]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e10:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	021b      	lsls	r3, r3, #8
 8003e1c:	4950      	ldr	r1, [pc, #320]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01e      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e30:	4b4b      	ldr	r3, [pc, #300]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e36:	0e1b      	lsrs	r3, r3, #24
 8003e38:	f003 030f 	and.w	r3, r3, #15
 8003e3c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	019a      	lsls	r2, r3, #6
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	061b      	lsls	r3, r3, #24
 8003e48:	431a      	orrs	r2, r3
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	071b      	lsls	r3, r3, #28
 8003e50:	4943      	ldr	r1, [pc, #268]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e52:	4313      	orrs	r3, r2
 8003e54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003e58:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	493e      	ldr	r1, [pc, #248]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e68:	4313      	orrs	r3, r2
 8003e6a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003e6e:	4b3d      	ldr	r3, [pc, #244]	; (8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003e70:	2201      	movs	r2, #1
 8003e72:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003e74:	f7fd fda2 	bl	80019bc <HAL_GetTick>
 8003e78:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e7a:	e008      	b.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003e7c:	f7fd fd9e 	bl	80019bc <HAL_GetTick>
 8003e80:	4602      	mov	r2, r0
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	1ad3      	subs	r3, r2, r3
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d901      	bls.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e0a6      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003e8e:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e9a:	d1ef      	bne.n	8003e7c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0320 	and.w	r3, r3, #32
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 808d 	beq.w	8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b2c      	ldr	r3, [pc, #176]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8003eba:	4b29      	ldr	r3, [pc, #164]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003ec6:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a27      	ldr	r2, [pc, #156]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003ecc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ed0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ed2:	f7fd fd73 	bl	80019bc <HAL_GetTick>
 8003ed6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003eda:	f7fd fd6f 	bl	80019bc <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e077      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ef8:	4b19      	ldr	r3, [pc, #100]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f00:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d039      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d032      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003f16:	4b12      	ldr	r3, [pc, #72]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f1e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003f20:	4b12      	ldr	r3, [pc, #72]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f22:	2201      	movs	r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003f26:	4b11      	ldr	r3, [pc, #68]	; (8003f6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8003f28:	2200      	movs	r2, #0
 8003f2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003f2c:	4a0c      	ldr	r2, [pc, #48]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003f32:	4b0b      	ldr	r3, [pc, #44]	; (8003f60 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8003f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f36:	f003 0301 	and.w	r3, r3, #1
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d11e      	bne.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003f3e:	f7fd fd3d 	bl	80019bc <HAL_GetTick>
 8003f42:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f44:	e014      	b.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f46:	f7fd fd39 	bl	80019bc <HAL_GetTick>
 8003f4a:	4602      	mov	r2, r0
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d90b      	bls.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e03f      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8003f5c:	42470068 	.word	0x42470068
 8003f60:	40023800 	.word	0x40023800
 8003f64:	42470070 	.word	0x42470070
 8003f68:	40007000 	.word	0x40007000
 8003f6c:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f70:	4b1c      	ldr	r3, [pc, #112]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d0e4      	beq.n	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f88:	d10d      	bne.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8003f8a:	4b16      	ldr	r3, [pc, #88]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f96:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f9e:	4911      	ldr	r1, [pc, #68]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	608b      	str	r3, [r1, #8]
 8003fa4:	e005      	b.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8003fa6:	4b0f      	ldr	r3, [pc, #60]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	4a0e      	ldr	r2, [pc, #56]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fac:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003fb0:	6093      	str	r3, [r2, #8]
 8003fb2:	4b0c      	ldr	r3, [pc, #48]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbe:	4909      	ldr	r1, [pc, #36]	; (8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0310 	and.w	r3, r3, #16
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d004      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8003fd6:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8003fd8:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3718      	adds	r7, #24
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	424711e0 	.word	0x424711e0

08003fec <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d101      	bne.n	8003ffe <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e083      	b.n	8004106 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	7f5b      	ldrb	r3, [r3, #29]
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d105      	bne.n	8004014 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fd faa6 	bl	8001560 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	22ca      	movs	r2, #202	; 0xca
 8004020:	625a      	str	r2, [r3, #36]	; 0x24
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2253      	movs	r2, #83	; 0x53
 8004028:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f000 f897 	bl	800415e <RTC_EnterInitMode>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	22ff      	movs	r2, #255	; 0xff
 800403c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2204      	movs	r2, #4
 8004042:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e05e      	b.n	8004106 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	6812      	ldr	r2, [r2, #0]
 8004052:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004056:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800405a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685a      	ldr	r2, [r3, #4]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	691b      	ldr	r3, [r3, #16]
 800406a:	431a      	orrs	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	695b      	ldr	r3, [r3, #20]
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	430a      	orrs	r2, r1
 8004078:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	68d2      	ldr	r2, [r2, #12]
 8004082:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6919      	ldr	r1, [r3, #16]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	041a      	lsls	r2, r3, #16
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040a6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10e      	bne.n	80040d4 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 f829 	bl	800410e <HAL_RTC_WaitForSynchro>
 80040bc:	4603      	mov	r3, r0
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d008      	beq.n	80040d4 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e018      	b.n	8004106 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	699a      	ldr	r2, [r3, #24]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	22ff      	movs	r2, #255	; 0xff
 80040fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2201      	movs	r2, #1
 8004102:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8004104:	2300      	movs	r3, #0
  }
}
 8004106:	4618      	mov	r0, r3
 8004108:	3708      	adds	r7, #8
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b084      	sub	sp, #16
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004116:	2300      	movs	r3, #0
 8004118:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68da      	ldr	r2, [r3, #12]
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004128:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800412a:	f7fd fc47 	bl	80019bc <HAL_GetTick>
 800412e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004130:	e009      	b.n	8004146 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8004132:	f7fd fc43 	bl	80019bc <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004140:	d901      	bls.n	8004146 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e007      	b.n	8004156 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d0ee      	beq.n	8004132 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3710      	adds	r7, #16
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	d119      	bne.n	80041ac <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f04f 32ff 	mov.w	r2, #4294967295
 8004180:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004182:	f7fd fc1b 	bl	80019bc <HAL_GetTick>
 8004186:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8004188:	e009      	b.n	800419e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800418a:	f7fd fc17 	bl	80019bc <HAL_GetTick>
 800418e:	4602      	mov	r2, r0
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1ad3      	subs	r3, r2, r3
 8004194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004198:	d901      	bls.n	800419e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e007      	b.n	80041ae <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d0ee      	beq.n	800418a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3710      	adds	r7, #16
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}

080041b6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b6:	b580      	push	{r7, lr}
 80041b8:	b082      	sub	sp, #8
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e03f      	b.n	8004248 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d106      	bne.n	80041e2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f7fd faa7 	bl	8001730 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2224      	movs	r2, #36	; 0x24
 80041e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	68da      	ldr	r2, [r3, #12]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041f8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fc88 	bl	8004b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	691a      	ldr	r2, [r3, #16]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800420e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	695a      	ldr	r2, [r3, #20]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800421e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68da      	ldr	r2, [r3, #12]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800422e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2220      	movs	r2, #32
 800423a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2220      	movs	r2, #32
 8004242:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3708      	adds	r7, #8
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b086      	sub	sp, #24
 8004254:	af00      	add	r7, sp, #0
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b20      	cmp	r3, #32
 8004268:	d153      	bne.n	8004312 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d002      	beq.n	8004276 <HAL_UART_Transmit_DMA+0x26>
 8004270:	88fb      	ldrh	r3, [r7, #6]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e04c      	b.n	8004314 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004280:	2b01      	cmp	r3, #1
 8004282:	d101      	bne.n	8004288 <HAL_UART_Transmit_DMA+0x38>
 8004284:	2302      	movs	r3, #2
 8004286:	e045      	b.n	8004314 <HAL_UART_Transmit_DMA+0xc4>
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	88fa      	ldrh	r2, [r7, #6]
 800429a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	88fa      	ldrh	r2, [r7, #6]
 80042a0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2221      	movs	r2, #33	; 0x21
 80042ac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <HAL_UART_Transmit_DMA+0xcc>)
 80042b6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042bc:	4a18      	ldr	r2, [pc, #96]	; (8004320 <HAL_UART_Transmit_DMA+0xd0>)
 80042be:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c4:	4a17      	ldr	r2, [pc, #92]	; (8004324 <HAL_UART_Transmit_DMA+0xd4>)
 80042c6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042cc:	2200      	movs	r2, #0
 80042ce:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80042d0:	f107 0308 	add.w	r3, r7, #8
 80042d4:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	3304      	adds	r3, #4
 80042e4:	461a      	mov	r2, r3
 80042e6:	88fb      	ldrh	r3, [r7, #6]
 80042e8:	f7fe faee 	bl	80028c8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042f4:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695a      	ldr	r2, [r3, #20]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800430c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800430e:	2300      	movs	r3, #0
 8004310:	e000      	b.n	8004314 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8004312:	2302      	movs	r3, #2
  }
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	0800471d 	.word	0x0800471d
 8004320:	0800476f 	.word	0x0800476f
 8004324:	0800480f 	.word	0x0800480f

08004328 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	4613      	mov	r3, r2
 8004334:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800433c:	b2db      	uxtb	r3, r3
 800433e:	2b20      	cmp	r3, #32
 8004340:	d166      	bne.n	8004410 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <HAL_UART_Receive_DMA+0x26>
 8004348:	88fb      	ldrh	r3, [r7, #6]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d101      	bne.n	8004352 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800434e:	2301      	movs	r3, #1
 8004350:	e05f      	b.n	8004412 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_UART_Receive_DMA+0x38>
 800435c:	2302      	movs	r3, #2
 800435e:	e058      	b.n	8004412 <HAL_UART_Receive_DMA+0xea>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	88fa      	ldrh	r2, [r7, #6]
 8004372:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2222      	movs	r2, #34	; 0x22
 800437e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004386:	4a25      	ldr	r2, [pc, #148]	; (800441c <HAL_UART_Receive_DMA+0xf4>)
 8004388:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800438e:	4a24      	ldr	r2, [pc, #144]	; (8004420 <HAL_UART_Receive_DMA+0xf8>)
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004396:	4a23      	ldr	r2, [pc, #140]	; (8004424 <HAL_UART_Receive_DMA+0xfc>)
 8004398:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	2200      	movs	r2, #0
 80043a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 80043a2:	f107 0308 	add.w	r3, r7, #8
 80043a6:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	88fb      	ldrh	r3, [r7, #6]
 80043ba:	f7fe fa85 	bl	80028c8 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80043be:	2300      	movs	r3, #0
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	613b      	str	r3, [r7, #16]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685b      	ldr	r3, [r3, #4]
 80043d0:	613b      	str	r3, [r7, #16]
 80043d2:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043ea:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	695a      	ldr	r2, [r3, #20]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695a      	ldr	r2, [r3, #20]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800440a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	e000      	b.n	8004412 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004410:	2302      	movs	r3, #2
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	0800478b 	.word	0x0800478b
 8004420:	080047f3 	.word	0x080047f3
 8004424:	0800480f 	.word	0x0800480f

08004428 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	bf0c      	ite	eq
 8004442:	2301      	moveq	r3, #1
 8004444:	2300      	movne	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b21      	cmp	r3, #33	; 0x21
 8004454:	d116      	bne.n	8004484 <HAL_UART_DMAStop+0x5c>
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d013      	beq.n	8004484 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695a      	ldr	r2, [r3, #20]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800446a:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	2b00      	cmp	r3, #0
 8004472:	d004      	beq.n	800447e <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004478:	4618      	mov	r0, r3
 800447a:	f7fe fa7d 	bl	8002978 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fa0f 	bl	80048a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	bf0c      	ite	eq
 8004492:	2301      	moveq	r3, #1
 8004494:	2300      	movne	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b22      	cmp	r3, #34	; 0x22
 80044a4:	d116      	bne.n	80044d4 <HAL_UART_DMAStop+0xac>
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d013      	beq.n	80044d4 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	695a      	ldr	r2, [r3, #20]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044ba:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d004      	beq.n	80044ce <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	4618      	mov	r0, r3
 80044ca:	f7fe fa55 	bl	8002978 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80044ce:	6878      	ldr	r0, [r7, #4]
 80044d0:	f000 f9fd 	bl	80048ce <UART_EndRxTransfer>
  }

  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3710      	adds	r7, #16
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004504:	2300      	movs	r3, #0
 8004506:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10d      	bne.n	8004532 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0320 	and.w	r3, r3, #32
 800451c:	2b00      	cmp	r3, #0
 800451e:	d008      	beq.n	8004532 <HAL_UART_IRQHandler+0x52>
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f003 0320 	and.w	r3, r3, #32
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fa6f 	bl	8004a0e <UART_Receive_IT>
      return;
 8004530:	e0d1      	b.n	80046d6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80b0 	beq.w	800469a <HAL_UART_IRQHandler+0x1ba>
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d105      	bne.n	8004550 <HAL_UART_IRQHandler+0x70>
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80a5 	beq.w	800469a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00a      	beq.n	8004570 <HAL_UART_IRQHandler+0x90>
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004568:	f043 0201 	orr.w	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004570:	69fb      	ldr	r3, [r7, #28]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <HAL_UART_IRQHandler+0xb0>
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f003 0301 	and.w	r3, r3, #1
 8004580:	2b00      	cmp	r3, #0
 8004582:	d005      	beq.n	8004590 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004588:	f043 0202 	orr.w	r2, r3, #2
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <HAL_UART_IRQHandler+0xd0>
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d005      	beq.n	80045b0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	f043 0204 	orr.w	r2, r3, #4
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00f      	beq.n	80045da <HAL_UART_IRQHandler+0xfa>
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	f003 0320 	and.w	r3, r3, #32
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d104      	bne.n	80045ce <HAL_UART_IRQHandler+0xee>
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d005      	beq.n	80045da <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d2:	f043 0208 	orr.w	r2, r3, #8
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d078      	beq.n	80046d4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d007      	beq.n	80045fc <HAL_UART_IRQHandler+0x11c>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f003 0320 	and.w	r3, r3, #32
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d002      	beq.n	80045fc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 fa09 	bl	8004a0e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004606:	2b40      	cmp	r3, #64	; 0x40
 8004608:	bf0c      	ite	eq
 800460a:	2301      	moveq	r3, #1
 800460c:	2300      	movne	r3, #0
 800460e:	b2db      	uxtb	r3, r3
 8004610:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004616:	f003 0308 	and.w	r3, r3, #8
 800461a:	2b00      	cmp	r3, #0
 800461c:	d102      	bne.n	8004624 <HAL_UART_IRQHandler+0x144>
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d031      	beq.n	8004688 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 f952 	bl	80048ce <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004634:	2b40      	cmp	r3, #64	; 0x40
 8004636:	d123      	bne.n	8004680 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004646:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800464c:	2b00      	cmp	r3, #0
 800464e:	d013      	beq.n	8004678 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004654:	4a21      	ldr	r2, [pc, #132]	; (80046dc <HAL_UART_IRQHandler+0x1fc>)
 8004656:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800465c:	4618      	mov	r0, r3
 800465e:	f7fe f9fb 	bl	8002a58 <HAL_DMA_Abort_IT>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800466c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004672:	4610      	mov	r0, r2
 8004674:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004676:	e00e      	b.n	8004696 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	f000 f845 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800467e:	e00a      	b.n	8004696 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 f841 	bl	8004708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004686:	e006      	b.n	8004696 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f83d 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004694:	e01e      	b.n	80046d4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004696:	bf00      	nop
    return;
 8004698:	e01c      	b.n	80046d4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1d6>
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f93f 	bl	8004932 <UART_Transmit_IT>
    return;
 80046b4:	e00f      	b.n	80046d6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00a      	beq.n	80046d6 <HAL_UART_IRQHandler+0x1f6>
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d005      	beq.n	80046d6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 f987 	bl	80049de <UART_EndTransmit_IT>
    return;
 80046d0:	bf00      	nop
 80046d2:	e000      	b.n	80046d6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80046d4:	bf00      	nop
  }
}
 80046d6:	3720      	adds	r7, #32
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}
 80046dc:	0800490b 	.word	0x0800490b

080046e0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80046e8:	bf00      	nop
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b083      	sub	sp, #12
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004708:	b480      	push	{r7}
 800470a:	b083      	sub	sp, #12
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004710:	bf00      	nop
 8004712:	370c      	adds	r7, #12
 8004714:	46bd      	mov	sp, r7
 8004716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471a:	4770      	bx	lr

0800471c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d113      	bne.n	8004760 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	2200      	movs	r2, #0
 800473c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695a      	ldr	r2, [r3, #20]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800474c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68da      	ldr	r2, [r3, #12]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800475c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800475e:	e002      	b.n	8004766 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f7fc fe9d 	bl	80014a0 <HAL_UART_TxCpltCallback>
}
 8004766:	bf00      	nop
 8004768:	3710      	adds	r7, #16
 800476a:	46bd      	mov	sp, r7
 800476c:	bd80      	pop	{r7, pc}

0800476e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800476e:	b580      	push	{r7, lr}
 8004770:	b084      	sub	sp, #16
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f7ff ffaf 	bl	80046e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}

0800478a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800478a:	b580      	push	{r7, lr}
 800478c:	b084      	sub	sp, #16
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004796:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d11e      	bne.n	80047e4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80047ba:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f022 0201 	bic.w	r2, r2, #1
 80047ca:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047da:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7fc fe65 	bl	80014b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7ff ff77 	bl	80046f4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004806:	bf00      	nop
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004816:	2300      	movs	r3, #0
 8004818:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	bf0c      	ite	eq
 800482e:	2301      	moveq	r3, #1
 8004830:	2300      	movne	r3, #0
 8004832:	b2db      	uxtb	r3, r3
 8004834:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b21      	cmp	r3, #33	; 0x21
 8004840:	d108      	bne.n	8004854 <UART_DMAError+0x46>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d005      	beq.n	8004854 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	2200      	movs	r2, #0
 800484c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800484e:	68b8      	ldr	r0, [r7, #8]
 8004850:	f000 f827 	bl	80048a2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800485e:	2b40      	cmp	r3, #64	; 0x40
 8004860:	bf0c      	ite	eq
 8004862:	2301      	moveq	r3, #1
 8004864:	2300      	movne	r3, #0
 8004866:	b2db      	uxtb	r3, r3
 8004868:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b22      	cmp	r3, #34	; 0x22
 8004874:	d108      	bne.n	8004888 <UART_DMAError+0x7a>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d005      	beq.n	8004888 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2200      	movs	r2, #0
 8004880:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004882:	68b8      	ldr	r0, [r7, #8]
 8004884:	f000 f823 	bl	80048ce <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	f043 0210 	orr.w	r2, r3, #16
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004894:	68b8      	ldr	r0, [r7, #8]
 8004896:	f7ff ff37 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800489a:	bf00      	nop
 800489c:	3710      	adds	r7, #16
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}

080048a2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b083      	sub	sp, #12
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80048b8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2220      	movs	r2, #32
 80048be:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 80048c2:	bf00      	nop
 80048c4:	370c      	adds	r7, #12
 80048c6:	46bd      	mov	sp, r7
 80048c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048cc:	4770      	bx	lr

080048ce <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048ce:	b480      	push	{r7}
 80048d0:	b083      	sub	sp, #12
 80048d2:	af00      	add	r7, sp, #0
 80048d4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68da      	ldr	r2, [r3, #12]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80048e4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	695a      	ldr	r2, [r3, #20]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f022 0201 	bic.w	r2, r2, #1
 80048f4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2220      	movs	r2, #32
 80048fa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80048fe:	bf00      	nop
 8004900:	370c      	adds	r7, #12
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr

0800490a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b084      	sub	sp, #16
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004916:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	2200      	movs	r2, #0
 800491c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004924:	68f8      	ldr	r0, [r7, #12]
 8004926:	f7ff feef 	bl	8004708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800492a:	bf00      	nop
 800492c:	3710      	adds	r7, #16
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004932:	b480      	push	{r7}
 8004934:	b085      	sub	sp, #20
 8004936:	af00      	add	r7, sp, #0
 8004938:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004940:	b2db      	uxtb	r3, r3
 8004942:	2b21      	cmp	r3, #33	; 0x21
 8004944:	d144      	bne.n	80049d0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494e:	d11a      	bne.n	8004986 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a1b      	ldr	r3, [r3, #32]
 8004954:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	881b      	ldrh	r3, [r3, #0]
 800495a:	461a      	mov	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004964:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d105      	bne.n	800497a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6a1b      	ldr	r3, [r3, #32]
 8004972:	1c9a      	adds	r2, r3, #2
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	621a      	str	r2, [r3, #32]
 8004978:	e00e      	b.n	8004998 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6a1b      	ldr	r3, [r3, #32]
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	621a      	str	r2, [r3, #32]
 8004984:	e008      	b.n	8004998 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a1b      	ldr	r3, [r3, #32]
 800498a:	1c59      	adds	r1, r3, #1
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6211      	str	r1, [r2, #32]
 8004990:	781a      	ldrb	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4619      	mov	r1, r3
 80049a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10f      	bne.n	80049cc <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	68da      	ldr	r2, [r3, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80049ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80049cc:	2300      	movs	r3, #0
 80049ce:	e000      	b.n	80049d2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80049d0:	2302      	movs	r3, #2
  }
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr

080049de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b082      	sub	sp, #8
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68da      	ldr	r2, [r3, #12]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f7fc fd4e 	bl	80014a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b22      	cmp	r3, #34	; 0x22
 8004a20:	d171      	bne.n	8004b06 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	d123      	bne.n	8004a74 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10e      	bne.n	8004a58 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	b29a      	uxth	r2, r3
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	1c9a      	adds	r2, r3, #2
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	629a      	str	r2, [r3, #40]	; 0x28
 8004a56:	e029      	b.n	8004aac <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	629a      	str	r2, [r3, #40]	; 0x28
 8004a72:	e01b      	b.n	8004aac <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	691b      	ldr	r3, [r3, #16]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	6858      	ldr	r0, [r3, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	1c59      	adds	r1, r3, #1
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6291      	str	r1, [r2, #40]	; 0x28
 8004a8c:	b2c2      	uxtb	r2, r0
 8004a8e:	701a      	strb	r2, [r3, #0]
 8004a90:	e00c      	b.n	8004aac <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	b2da      	uxtb	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a9e:	1c58      	adds	r0, r3, #1
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	6288      	str	r0, [r1, #40]	; 0x28
 8004aa4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d120      	bne.n	8004b02 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68da      	ldr	r2, [r3, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0220 	bic.w	r2, r2, #32
 8004ace:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ade:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0201 	bic.w	r2, r2, #1
 8004aee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2220      	movs	r2, #32
 8004af4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fc fcdb 	bl	80014b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8004afe:	2300      	movs	r3, #0
 8004b00:	e002      	b.n	8004b08 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
  }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b14:	b085      	sub	sp, #20
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68da      	ldr	r2, [r3, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689a      	ldr	r2, [r3, #8]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	431a      	orrs	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004b52:	f023 030c 	bic.w	r3, r3, #12
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	6812      	ldr	r2, [r2, #0]
 8004b5a:	68f9      	ldr	r1, [r7, #12]
 8004b5c:	430b      	orrs	r3, r1
 8004b5e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b7e:	f040 818b 	bne.w	8004e98 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4ac1      	ldr	r2, [pc, #772]	; (8004e8c <UART_SetConfig+0x37c>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d005      	beq.n	8004b98 <UART_SetConfig+0x88>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4abf      	ldr	r2, [pc, #764]	; (8004e90 <UART_SetConfig+0x380>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	f040 80bd 	bne.w	8004d12 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b98:	f7ff f856 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8004b9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	461d      	mov	r5, r3
 8004ba2:	f04f 0600 	mov.w	r6, #0
 8004ba6:	46a8      	mov	r8, r5
 8004ba8:	46b1      	mov	r9, r6
 8004baa:	eb18 0308 	adds.w	r3, r8, r8
 8004bae:	eb49 0409 	adc.w	r4, r9, r9
 8004bb2:	4698      	mov	r8, r3
 8004bb4:	46a1      	mov	r9, r4
 8004bb6:	eb18 0805 	adds.w	r8, r8, r5
 8004bba:	eb49 0906 	adc.w	r9, r9, r6
 8004bbe:	f04f 0100 	mov.w	r1, #0
 8004bc2:	f04f 0200 	mov.w	r2, #0
 8004bc6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004bca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004bce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004bd2:	4688      	mov	r8, r1
 8004bd4:	4691      	mov	r9, r2
 8004bd6:	eb18 0005 	adds.w	r0, r8, r5
 8004bda:	eb49 0106 	adc.w	r1, r9, r6
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	461d      	mov	r5, r3
 8004be4:	f04f 0600 	mov.w	r6, #0
 8004be8:	196b      	adds	r3, r5, r5
 8004bea:	eb46 0406 	adc.w	r4, r6, r6
 8004bee:	461a      	mov	r2, r3
 8004bf0:	4623      	mov	r3, r4
 8004bf2:	f7fb ff1b 	bl	8000a2c <__aeabi_uldivmod>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	4ba5      	ldr	r3, [pc, #660]	; (8004e94 <UART_SetConfig+0x384>)
 8004bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8004c02:	095b      	lsrs	r3, r3, #5
 8004c04:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	461d      	mov	r5, r3
 8004c0c:	f04f 0600 	mov.w	r6, #0
 8004c10:	46a9      	mov	r9, r5
 8004c12:	46b2      	mov	sl, r6
 8004c14:	eb19 0309 	adds.w	r3, r9, r9
 8004c18:	eb4a 040a 	adc.w	r4, sl, sl
 8004c1c:	4699      	mov	r9, r3
 8004c1e:	46a2      	mov	sl, r4
 8004c20:	eb19 0905 	adds.w	r9, r9, r5
 8004c24:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c28:	f04f 0100 	mov.w	r1, #0
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c34:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c38:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c3c:	4689      	mov	r9, r1
 8004c3e:	4692      	mov	sl, r2
 8004c40:	eb19 0005 	adds.w	r0, r9, r5
 8004c44:	eb4a 0106 	adc.w	r1, sl, r6
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	461d      	mov	r5, r3
 8004c4e:	f04f 0600 	mov.w	r6, #0
 8004c52:	196b      	adds	r3, r5, r5
 8004c54:	eb46 0406 	adc.w	r4, r6, r6
 8004c58:	461a      	mov	r2, r3
 8004c5a:	4623      	mov	r3, r4
 8004c5c:	f7fb fee6 	bl	8000a2c <__aeabi_uldivmod>
 8004c60:	4603      	mov	r3, r0
 8004c62:	460c      	mov	r4, r1
 8004c64:	461a      	mov	r2, r3
 8004c66:	4b8b      	ldr	r3, [pc, #556]	; (8004e94 <UART_SetConfig+0x384>)
 8004c68:	fba3 1302 	umull	r1, r3, r3, r2
 8004c6c:	095b      	lsrs	r3, r3, #5
 8004c6e:	2164      	movs	r1, #100	; 0x64
 8004c70:	fb01 f303 	mul.w	r3, r1, r3
 8004c74:	1ad3      	subs	r3, r2, r3
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	3332      	adds	r3, #50	; 0x32
 8004c7a:	4a86      	ldr	r2, [pc, #536]	; (8004e94 <UART_SetConfig+0x384>)
 8004c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8004c80:	095b      	lsrs	r3, r3, #5
 8004c82:	005b      	lsls	r3, r3, #1
 8004c84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c88:	4498      	add	r8, r3
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	461d      	mov	r5, r3
 8004c8e:	f04f 0600 	mov.w	r6, #0
 8004c92:	46a9      	mov	r9, r5
 8004c94:	46b2      	mov	sl, r6
 8004c96:	eb19 0309 	adds.w	r3, r9, r9
 8004c9a:	eb4a 040a 	adc.w	r4, sl, sl
 8004c9e:	4699      	mov	r9, r3
 8004ca0:	46a2      	mov	sl, r4
 8004ca2:	eb19 0905 	adds.w	r9, r9, r5
 8004ca6:	eb4a 0a06 	adc.w	sl, sl, r6
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004cba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004cbe:	4689      	mov	r9, r1
 8004cc0:	4692      	mov	sl, r2
 8004cc2:	eb19 0005 	adds.w	r0, r9, r5
 8004cc6:	eb4a 0106 	adc.w	r1, sl, r6
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	685b      	ldr	r3, [r3, #4]
 8004cce:	461d      	mov	r5, r3
 8004cd0:	f04f 0600 	mov.w	r6, #0
 8004cd4:	196b      	adds	r3, r5, r5
 8004cd6:	eb46 0406 	adc.w	r4, r6, r6
 8004cda:	461a      	mov	r2, r3
 8004cdc:	4623      	mov	r3, r4
 8004cde:	f7fb fea5 	bl	8000a2c <__aeabi_uldivmod>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	4b6a      	ldr	r3, [pc, #424]	; (8004e94 <UART_SetConfig+0x384>)
 8004cea:	fba3 1302 	umull	r1, r3, r3, r2
 8004cee:	095b      	lsrs	r3, r3, #5
 8004cf0:	2164      	movs	r1, #100	; 0x64
 8004cf2:	fb01 f303 	mul.w	r3, r1, r3
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	3332      	adds	r3, #50	; 0x32
 8004cfc:	4a65      	ldr	r2, [pc, #404]	; (8004e94 <UART_SetConfig+0x384>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	095b      	lsrs	r3, r3, #5
 8004d04:	f003 0207 	and.w	r2, r3, #7
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4442      	add	r2, r8
 8004d0e:	609a      	str	r2, [r3, #8]
 8004d10:	e26f      	b.n	80051f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d12:	f7fe ff85 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8004d16:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	461d      	mov	r5, r3
 8004d1c:	f04f 0600 	mov.w	r6, #0
 8004d20:	46a8      	mov	r8, r5
 8004d22:	46b1      	mov	r9, r6
 8004d24:	eb18 0308 	adds.w	r3, r8, r8
 8004d28:	eb49 0409 	adc.w	r4, r9, r9
 8004d2c:	4698      	mov	r8, r3
 8004d2e:	46a1      	mov	r9, r4
 8004d30:	eb18 0805 	adds.w	r8, r8, r5
 8004d34:	eb49 0906 	adc.w	r9, r9, r6
 8004d38:	f04f 0100 	mov.w	r1, #0
 8004d3c:	f04f 0200 	mov.w	r2, #0
 8004d40:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004d44:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004d48:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004d4c:	4688      	mov	r8, r1
 8004d4e:	4691      	mov	r9, r2
 8004d50:	eb18 0005 	adds.w	r0, r8, r5
 8004d54:	eb49 0106 	adc.w	r1, r9, r6
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	461d      	mov	r5, r3
 8004d5e:	f04f 0600 	mov.w	r6, #0
 8004d62:	196b      	adds	r3, r5, r5
 8004d64:	eb46 0406 	adc.w	r4, r6, r6
 8004d68:	461a      	mov	r2, r3
 8004d6a:	4623      	mov	r3, r4
 8004d6c:	f7fb fe5e 	bl	8000a2c <__aeabi_uldivmod>
 8004d70:	4603      	mov	r3, r0
 8004d72:	460c      	mov	r4, r1
 8004d74:	461a      	mov	r2, r3
 8004d76:	4b47      	ldr	r3, [pc, #284]	; (8004e94 <UART_SetConfig+0x384>)
 8004d78:	fba3 2302 	umull	r2, r3, r3, r2
 8004d7c:	095b      	lsrs	r3, r3, #5
 8004d7e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	461d      	mov	r5, r3
 8004d86:	f04f 0600 	mov.w	r6, #0
 8004d8a:	46a9      	mov	r9, r5
 8004d8c:	46b2      	mov	sl, r6
 8004d8e:	eb19 0309 	adds.w	r3, r9, r9
 8004d92:	eb4a 040a 	adc.w	r4, sl, sl
 8004d96:	4699      	mov	r9, r3
 8004d98:	46a2      	mov	sl, r4
 8004d9a:	eb19 0905 	adds.w	r9, r9, r5
 8004d9e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004da2:	f04f 0100 	mov.w	r1, #0
 8004da6:	f04f 0200 	mov.w	r2, #0
 8004daa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004db2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004db6:	4689      	mov	r9, r1
 8004db8:	4692      	mov	sl, r2
 8004dba:	eb19 0005 	adds.w	r0, r9, r5
 8004dbe:	eb4a 0106 	adc.w	r1, sl, r6
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	461d      	mov	r5, r3
 8004dc8:	f04f 0600 	mov.w	r6, #0
 8004dcc:	196b      	adds	r3, r5, r5
 8004dce:	eb46 0406 	adc.w	r4, r6, r6
 8004dd2:	461a      	mov	r2, r3
 8004dd4:	4623      	mov	r3, r4
 8004dd6:	f7fb fe29 	bl	8000a2c <__aeabi_uldivmod>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	460c      	mov	r4, r1
 8004dde:	461a      	mov	r2, r3
 8004de0:	4b2c      	ldr	r3, [pc, #176]	; (8004e94 <UART_SetConfig+0x384>)
 8004de2:	fba3 1302 	umull	r1, r3, r3, r2
 8004de6:	095b      	lsrs	r3, r3, #5
 8004de8:	2164      	movs	r1, #100	; 0x64
 8004dea:	fb01 f303 	mul.w	r3, r1, r3
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	3332      	adds	r3, #50	; 0x32
 8004df4:	4a27      	ldr	r2, [pc, #156]	; (8004e94 <UART_SetConfig+0x384>)
 8004df6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dfa:	095b      	lsrs	r3, r3, #5
 8004dfc:	005b      	lsls	r3, r3, #1
 8004dfe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e02:	4498      	add	r8, r3
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	461d      	mov	r5, r3
 8004e08:	f04f 0600 	mov.w	r6, #0
 8004e0c:	46a9      	mov	r9, r5
 8004e0e:	46b2      	mov	sl, r6
 8004e10:	eb19 0309 	adds.w	r3, r9, r9
 8004e14:	eb4a 040a 	adc.w	r4, sl, sl
 8004e18:	4699      	mov	r9, r3
 8004e1a:	46a2      	mov	sl, r4
 8004e1c:	eb19 0905 	adds.w	r9, r9, r5
 8004e20:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	f04f 0200 	mov.w	r2, #0
 8004e2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e30:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e34:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e38:	4689      	mov	r9, r1
 8004e3a:	4692      	mov	sl, r2
 8004e3c:	eb19 0005 	adds.w	r0, r9, r5
 8004e40:	eb4a 0106 	adc.w	r1, sl, r6
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	461d      	mov	r5, r3
 8004e4a:	f04f 0600 	mov.w	r6, #0
 8004e4e:	196b      	adds	r3, r5, r5
 8004e50:	eb46 0406 	adc.w	r4, r6, r6
 8004e54:	461a      	mov	r2, r3
 8004e56:	4623      	mov	r3, r4
 8004e58:	f7fb fde8 	bl	8000a2c <__aeabi_uldivmod>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	460c      	mov	r4, r1
 8004e60:	461a      	mov	r2, r3
 8004e62:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <UART_SetConfig+0x384>)
 8004e64:	fba3 1302 	umull	r1, r3, r3, r2
 8004e68:	095b      	lsrs	r3, r3, #5
 8004e6a:	2164      	movs	r1, #100	; 0x64
 8004e6c:	fb01 f303 	mul.w	r3, r1, r3
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	00db      	lsls	r3, r3, #3
 8004e74:	3332      	adds	r3, #50	; 0x32
 8004e76:	4a07      	ldr	r2, [pc, #28]	; (8004e94 <UART_SetConfig+0x384>)
 8004e78:	fba2 2303 	umull	r2, r3, r2, r3
 8004e7c:	095b      	lsrs	r3, r3, #5
 8004e7e:	f003 0207 	and.w	r2, r3, #7
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4442      	add	r2, r8
 8004e88:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e8a:	e1b2      	b.n	80051f2 <UART_SetConfig+0x6e2>
 8004e8c:	40011000 	.word	0x40011000
 8004e90:	40011400 	.word	0x40011400
 8004e94:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4ad7      	ldr	r2, [pc, #860]	; (80051fc <UART_SetConfig+0x6ec>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d005      	beq.n	8004eae <UART_SetConfig+0x39e>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4ad6      	ldr	r2, [pc, #856]	; (8005200 <UART_SetConfig+0x6f0>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	f040 80d1 	bne.w	8005050 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004eae:	f7fe fecb 	bl	8003c48 <HAL_RCC_GetPCLK2Freq>
 8004eb2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	469a      	mov	sl, r3
 8004eb8:	f04f 0b00 	mov.w	fp, #0
 8004ebc:	46d0      	mov	r8, sl
 8004ebe:	46d9      	mov	r9, fp
 8004ec0:	eb18 0308 	adds.w	r3, r8, r8
 8004ec4:	eb49 0409 	adc.w	r4, r9, r9
 8004ec8:	4698      	mov	r8, r3
 8004eca:	46a1      	mov	r9, r4
 8004ecc:	eb18 080a 	adds.w	r8, r8, sl
 8004ed0:	eb49 090b 	adc.w	r9, r9, fp
 8004ed4:	f04f 0100 	mov.w	r1, #0
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004ee0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004ee4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004ee8:	4688      	mov	r8, r1
 8004eea:	4691      	mov	r9, r2
 8004eec:	eb1a 0508 	adds.w	r5, sl, r8
 8004ef0:	eb4b 0609 	adc.w	r6, fp, r9
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	f04f 0400 	mov.w	r4, #0
 8004f06:	0094      	lsls	r4, r2, #2
 8004f08:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f0c:	008b      	lsls	r3, r1, #2
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4623      	mov	r3, r4
 8004f12:	4628      	mov	r0, r5
 8004f14:	4631      	mov	r1, r6
 8004f16:	f7fb fd89 	bl	8000a2c <__aeabi_uldivmod>
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	460c      	mov	r4, r1
 8004f1e:	461a      	mov	r2, r3
 8004f20:	4bb8      	ldr	r3, [pc, #736]	; (8005204 <UART_SetConfig+0x6f4>)
 8004f22:	fba3 2302 	umull	r2, r3, r3, r2
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	469b      	mov	fp, r3
 8004f30:	f04f 0c00 	mov.w	ip, #0
 8004f34:	46d9      	mov	r9, fp
 8004f36:	46e2      	mov	sl, ip
 8004f38:	eb19 0309 	adds.w	r3, r9, r9
 8004f3c:	eb4a 040a 	adc.w	r4, sl, sl
 8004f40:	4699      	mov	r9, r3
 8004f42:	46a2      	mov	sl, r4
 8004f44:	eb19 090b 	adds.w	r9, r9, fp
 8004f48:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f58:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f5c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f60:	4689      	mov	r9, r1
 8004f62:	4692      	mov	sl, r2
 8004f64:	eb1b 0509 	adds.w	r5, fp, r9
 8004f68:	eb4c 060a 	adc.w	r6, ip, sl
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	4619      	mov	r1, r3
 8004f72:	f04f 0200 	mov.w	r2, #0
 8004f76:	f04f 0300 	mov.w	r3, #0
 8004f7a:	f04f 0400 	mov.w	r4, #0
 8004f7e:	0094      	lsls	r4, r2, #2
 8004f80:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f84:	008b      	lsls	r3, r1, #2
 8004f86:	461a      	mov	r2, r3
 8004f88:	4623      	mov	r3, r4
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	4631      	mov	r1, r6
 8004f8e:	f7fb fd4d 	bl	8000a2c <__aeabi_uldivmod>
 8004f92:	4603      	mov	r3, r0
 8004f94:	460c      	mov	r4, r1
 8004f96:	461a      	mov	r2, r3
 8004f98:	4b9a      	ldr	r3, [pc, #616]	; (8005204 <UART_SetConfig+0x6f4>)
 8004f9a:	fba3 1302 	umull	r1, r3, r3, r2
 8004f9e:	095b      	lsrs	r3, r3, #5
 8004fa0:	2164      	movs	r1, #100	; 0x64
 8004fa2:	fb01 f303 	mul.w	r3, r1, r3
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	011b      	lsls	r3, r3, #4
 8004faa:	3332      	adds	r3, #50	; 0x32
 8004fac:	4a95      	ldr	r2, [pc, #596]	; (8005204 <UART_SetConfig+0x6f4>)
 8004fae:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb8:	4498      	add	r8, r3
 8004fba:	68bb      	ldr	r3, [r7, #8]
 8004fbc:	469b      	mov	fp, r3
 8004fbe:	f04f 0c00 	mov.w	ip, #0
 8004fc2:	46d9      	mov	r9, fp
 8004fc4:	46e2      	mov	sl, ip
 8004fc6:	eb19 0309 	adds.w	r3, r9, r9
 8004fca:	eb4a 040a 	adc.w	r4, sl, sl
 8004fce:	4699      	mov	r9, r3
 8004fd0:	46a2      	mov	sl, r4
 8004fd2:	eb19 090b 	adds.w	r9, r9, fp
 8004fd6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004fda:	f04f 0100 	mov.w	r1, #0
 8004fde:	f04f 0200 	mov.w	r2, #0
 8004fe2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004fe6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004fea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004fee:	4689      	mov	r9, r1
 8004ff0:	4692      	mov	sl, r2
 8004ff2:	eb1b 0509 	adds.w	r5, fp, r9
 8004ff6:	eb4c 060a 	adc.w	r6, ip, sl
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4619      	mov	r1, r3
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	f04f 0300 	mov.w	r3, #0
 8005008:	f04f 0400 	mov.w	r4, #0
 800500c:	0094      	lsls	r4, r2, #2
 800500e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005012:	008b      	lsls	r3, r1, #2
 8005014:	461a      	mov	r2, r3
 8005016:	4623      	mov	r3, r4
 8005018:	4628      	mov	r0, r5
 800501a:	4631      	mov	r1, r6
 800501c:	f7fb fd06 	bl	8000a2c <__aeabi_uldivmod>
 8005020:	4603      	mov	r3, r0
 8005022:	460c      	mov	r4, r1
 8005024:	461a      	mov	r2, r3
 8005026:	4b77      	ldr	r3, [pc, #476]	; (8005204 <UART_SetConfig+0x6f4>)
 8005028:	fba3 1302 	umull	r1, r3, r3, r2
 800502c:	095b      	lsrs	r3, r3, #5
 800502e:	2164      	movs	r1, #100	; 0x64
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	3332      	adds	r3, #50	; 0x32
 800503a:	4a72      	ldr	r2, [pc, #456]	; (8005204 <UART_SetConfig+0x6f4>)
 800503c:	fba2 2303 	umull	r2, r3, r2, r3
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	f003 020f 	and.w	r2, r3, #15
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4442      	add	r2, r8
 800504c:	609a      	str	r2, [r3, #8]
 800504e:	e0d0      	b.n	80051f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005050:	f7fe fde6 	bl	8003c20 <HAL_RCC_GetPCLK1Freq>
 8005054:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	469a      	mov	sl, r3
 800505a:	f04f 0b00 	mov.w	fp, #0
 800505e:	46d0      	mov	r8, sl
 8005060:	46d9      	mov	r9, fp
 8005062:	eb18 0308 	adds.w	r3, r8, r8
 8005066:	eb49 0409 	adc.w	r4, r9, r9
 800506a:	4698      	mov	r8, r3
 800506c:	46a1      	mov	r9, r4
 800506e:	eb18 080a 	adds.w	r8, r8, sl
 8005072:	eb49 090b 	adc.w	r9, r9, fp
 8005076:	f04f 0100 	mov.w	r1, #0
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005082:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005086:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800508a:	4688      	mov	r8, r1
 800508c:	4691      	mov	r9, r2
 800508e:	eb1a 0508 	adds.w	r5, sl, r8
 8005092:	eb4b 0609 	adc.w	r6, fp, r9
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	4619      	mov	r1, r3
 800509c:	f04f 0200 	mov.w	r2, #0
 80050a0:	f04f 0300 	mov.w	r3, #0
 80050a4:	f04f 0400 	mov.w	r4, #0
 80050a8:	0094      	lsls	r4, r2, #2
 80050aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050ae:	008b      	lsls	r3, r1, #2
 80050b0:	461a      	mov	r2, r3
 80050b2:	4623      	mov	r3, r4
 80050b4:	4628      	mov	r0, r5
 80050b6:	4631      	mov	r1, r6
 80050b8:	f7fb fcb8 	bl	8000a2c <__aeabi_uldivmod>
 80050bc:	4603      	mov	r3, r0
 80050be:	460c      	mov	r4, r1
 80050c0:	461a      	mov	r2, r3
 80050c2:	4b50      	ldr	r3, [pc, #320]	; (8005204 <UART_SetConfig+0x6f4>)
 80050c4:	fba3 2302 	umull	r2, r3, r3, r2
 80050c8:	095b      	lsrs	r3, r3, #5
 80050ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	469b      	mov	fp, r3
 80050d2:	f04f 0c00 	mov.w	ip, #0
 80050d6:	46d9      	mov	r9, fp
 80050d8:	46e2      	mov	sl, ip
 80050da:	eb19 0309 	adds.w	r3, r9, r9
 80050de:	eb4a 040a 	adc.w	r4, sl, sl
 80050e2:	4699      	mov	r9, r3
 80050e4:	46a2      	mov	sl, r4
 80050e6:	eb19 090b 	adds.w	r9, r9, fp
 80050ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005102:	4689      	mov	r9, r1
 8005104:	4692      	mov	sl, r2
 8005106:	eb1b 0509 	adds.w	r5, fp, r9
 800510a:	eb4c 060a 	adc.w	r6, ip, sl
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4619      	mov	r1, r3
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	f04f 0300 	mov.w	r3, #0
 800511c:	f04f 0400 	mov.w	r4, #0
 8005120:	0094      	lsls	r4, r2, #2
 8005122:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005126:	008b      	lsls	r3, r1, #2
 8005128:	461a      	mov	r2, r3
 800512a:	4623      	mov	r3, r4
 800512c:	4628      	mov	r0, r5
 800512e:	4631      	mov	r1, r6
 8005130:	f7fb fc7c 	bl	8000a2c <__aeabi_uldivmod>
 8005134:	4603      	mov	r3, r0
 8005136:	460c      	mov	r4, r1
 8005138:	461a      	mov	r2, r3
 800513a:	4b32      	ldr	r3, [pc, #200]	; (8005204 <UART_SetConfig+0x6f4>)
 800513c:	fba3 1302 	umull	r1, r3, r3, r2
 8005140:	095b      	lsrs	r3, r3, #5
 8005142:	2164      	movs	r1, #100	; 0x64
 8005144:	fb01 f303 	mul.w	r3, r1, r3
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	3332      	adds	r3, #50	; 0x32
 800514e:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <UART_SetConfig+0x6f4>)
 8005150:	fba2 2303 	umull	r2, r3, r2, r3
 8005154:	095b      	lsrs	r3, r3, #5
 8005156:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800515a:	4498      	add	r8, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	469b      	mov	fp, r3
 8005160:	f04f 0c00 	mov.w	ip, #0
 8005164:	46d9      	mov	r9, fp
 8005166:	46e2      	mov	sl, ip
 8005168:	eb19 0309 	adds.w	r3, r9, r9
 800516c:	eb4a 040a 	adc.w	r4, sl, sl
 8005170:	4699      	mov	r9, r3
 8005172:	46a2      	mov	sl, r4
 8005174:	eb19 090b 	adds.w	r9, r9, fp
 8005178:	eb4a 0a0c 	adc.w	sl, sl, ip
 800517c:	f04f 0100 	mov.w	r1, #0
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005188:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800518c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005190:	4689      	mov	r9, r1
 8005192:	4692      	mov	sl, r2
 8005194:	eb1b 0509 	adds.w	r5, fp, r9
 8005198:	eb4c 060a 	adc.w	r6, ip, sl
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	4619      	mov	r1, r3
 80051a2:	f04f 0200 	mov.w	r2, #0
 80051a6:	f04f 0300 	mov.w	r3, #0
 80051aa:	f04f 0400 	mov.w	r4, #0
 80051ae:	0094      	lsls	r4, r2, #2
 80051b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051b4:	008b      	lsls	r3, r1, #2
 80051b6:	461a      	mov	r2, r3
 80051b8:	4623      	mov	r3, r4
 80051ba:	4628      	mov	r0, r5
 80051bc:	4631      	mov	r1, r6
 80051be:	f7fb fc35 	bl	8000a2c <__aeabi_uldivmod>
 80051c2:	4603      	mov	r3, r0
 80051c4:	460c      	mov	r4, r1
 80051c6:	461a      	mov	r2, r3
 80051c8:	4b0e      	ldr	r3, [pc, #56]	; (8005204 <UART_SetConfig+0x6f4>)
 80051ca:	fba3 1302 	umull	r1, r3, r3, r2
 80051ce:	095b      	lsrs	r3, r3, #5
 80051d0:	2164      	movs	r1, #100	; 0x64
 80051d2:	fb01 f303 	mul.w	r3, r1, r3
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	3332      	adds	r3, #50	; 0x32
 80051dc:	4a09      	ldr	r2, [pc, #36]	; (8005204 <UART_SetConfig+0x6f4>)
 80051de:	fba2 2303 	umull	r2, r3, r2, r3
 80051e2:	095b      	lsrs	r3, r3, #5
 80051e4:	f003 020f 	and.w	r2, r3, #15
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4442      	add	r2, r8
 80051ee:	609a      	str	r2, [r3, #8]
}
 80051f0:	e7ff      	b.n	80051f2 <UART_SetConfig+0x6e2>
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051fc:	40011000 	.word	0x40011000
 8005200:	40011400 	.word	0x40011400
 8005204:	51eb851f 	.word	0x51eb851f

08005208 <__libc_init_array>:
 8005208:	b570      	push	{r4, r5, r6, lr}
 800520a:	4e0d      	ldr	r6, [pc, #52]	; (8005240 <__libc_init_array+0x38>)
 800520c:	4c0d      	ldr	r4, [pc, #52]	; (8005244 <__libc_init_array+0x3c>)
 800520e:	1ba4      	subs	r4, r4, r6
 8005210:	10a4      	asrs	r4, r4, #2
 8005212:	2500      	movs	r5, #0
 8005214:	42a5      	cmp	r5, r4
 8005216:	d109      	bne.n	800522c <__libc_init_array+0x24>
 8005218:	4e0b      	ldr	r6, [pc, #44]	; (8005248 <__libc_init_array+0x40>)
 800521a:	4c0c      	ldr	r4, [pc, #48]	; (800524c <__libc_init_array+0x44>)
 800521c:	f000 f820 	bl	8005260 <_init>
 8005220:	1ba4      	subs	r4, r4, r6
 8005222:	10a4      	asrs	r4, r4, #2
 8005224:	2500      	movs	r5, #0
 8005226:	42a5      	cmp	r5, r4
 8005228:	d105      	bne.n	8005236 <__libc_init_array+0x2e>
 800522a:	bd70      	pop	{r4, r5, r6, pc}
 800522c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005230:	4798      	blx	r3
 8005232:	3501      	adds	r5, #1
 8005234:	e7ee      	b.n	8005214 <__libc_init_array+0xc>
 8005236:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800523a:	4798      	blx	r3
 800523c:	3501      	adds	r5, #1
 800523e:	e7f2      	b.n	8005226 <__libc_init_array+0x1e>
 8005240:	080052a0 	.word	0x080052a0
 8005244:	080052a0 	.word	0x080052a0
 8005248:	080052a0 	.word	0x080052a0
 800524c:	080052a4 	.word	0x080052a4

08005250 <memset>:
 8005250:	4402      	add	r2, r0
 8005252:	4603      	mov	r3, r0
 8005254:	4293      	cmp	r3, r2
 8005256:	d100      	bne.n	800525a <memset+0xa>
 8005258:	4770      	bx	lr
 800525a:	f803 1b01 	strb.w	r1, [r3], #1
 800525e:	e7f9      	b.n	8005254 <memset+0x4>

08005260 <_init>:
 8005260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005262:	bf00      	nop
 8005264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005266:	bc08      	pop	{r3}
 8005268:	469e      	mov	lr, r3
 800526a:	4770      	bx	lr

0800526c <_fini>:
 800526c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800526e:	bf00      	nop
 8005270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005272:	bc08      	pop	{r3}
 8005274:	469e      	mov	lr, r3
 8005276:	4770      	bx	lr
