
STM32f439ZIT6U Aether Light.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007558  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007708  08007708  00017708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007728  08007728  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08007728  08007728  00017728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007730  08007730  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007730  08007730  00017730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08007738  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  2000002c  08007764  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000550  08007764  00020550  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012fcb  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e40  00000000  00000000  00033027  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f30  00000000  00000000  00035e68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00036d98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000480c  00000000  00000000  00037b48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010293  00000000  00000000  0003c354  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e30c5  00000000  00000000  0004c5e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f6ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da0  00000000  00000000  0012f728  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000002c 	.word	0x2000002c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080076f0 	.word	0x080076f0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000030 	.word	0x20000030
 80001ec:	080076f0 	.word	0x080076f0

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__aeabi_d2uiz>:
 800098c:	004a      	lsls	r2, r1, #1
 800098e:	d211      	bcs.n	80009b4 <__aeabi_d2uiz+0x28>
 8000990:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000994:	d211      	bcs.n	80009ba <__aeabi_d2uiz+0x2e>
 8000996:	d50d      	bpl.n	80009b4 <__aeabi_d2uiz+0x28>
 8000998:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800099c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009a0:	d40e      	bmi.n	80009c0 <__aeabi_d2uiz+0x34>
 80009a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009ae:	fa23 f002 	lsr.w	r0, r3, r2
 80009b2:	4770      	bx	lr
 80009b4:	f04f 0000 	mov.w	r0, #0
 80009b8:	4770      	bx	lr
 80009ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009be:	d102      	bne.n	80009c6 <__aeabi_d2uiz+0x3a>
 80009c0:	f04f 30ff 	mov.w	r0, #4294967295
 80009c4:	4770      	bx	lr
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	4770      	bx	lr

080009cc <__aeabi_d2f>:
 80009cc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009d0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009d4:	bf24      	itt	cs
 80009d6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009da:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009de:	d90d      	bls.n	80009fc <__aeabi_d2f+0x30>
 80009e0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009e4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009ec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009f0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009f4:	bf08      	it	eq
 80009f6:	f020 0001 	biceq.w	r0, r0, #1
 80009fa:	4770      	bx	lr
 80009fc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a00:	d121      	bne.n	8000a46 <__aeabi_d2f+0x7a>
 8000a02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a06:	bfbc      	itt	lt
 8000a08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a0c:	4770      	bxlt	lr
 8000a0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a16:	f1c2 0218 	rsb	r2, r2, #24
 8000a1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a22:	fa20 f002 	lsr.w	r0, r0, r2
 8000a26:	bf18      	it	ne
 8000a28:	f040 0001 	orrne.w	r0, r0, #1
 8000a2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a38:	ea40 000c 	orr.w	r0, r0, ip
 8000a3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a44:	e7cc      	b.n	80009e0 <__aeabi_d2f+0x14>
 8000a46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a4a:	d107      	bne.n	8000a5c <__aeabi_d2f+0x90>
 8000a4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a50:	bf1e      	ittt	ne
 8000a52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a5a:	4770      	bxne	lr
 8000a5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b972 	b.w	8000d68 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9e08      	ldr	r6, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4688      	mov	r8, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14b      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4615      	mov	r5, r2
 8000aae:	d967      	bls.n	8000b80 <__udivmoddi4+0xe4>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b14a      	cbz	r2, 8000aca <__udivmoddi4+0x2e>
 8000ab6:	f1c2 0720 	rsb	r7, r2, #32
 8000aba:	fa01 f302 	lsl.w	r3, r1, r2
 8000abe:	fa20 f707 	lsr.w	r7, r0, r7
 8000ac2:	4095      	lsls	r5, r2
 8000ac4:	ea47 0803 	orr.w	r8, r7, r3
 8000ac8:	4094      	lsls	r4, r2
 8000aca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ace:	0c23      	lsrs	r3, r4, #16
 8000ad0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ad4:	fa1f fc85 	uxth.w	ip, r5
 8000ad8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000adc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ae4:	4299      	cmp	r1, r3
 8000ae6:	d909      	bls.n	8000afc <__udivmoddi4+0x60>
 8000ae8:	18eb      	adds	r3, r5, r3
 8000aea:	f107 30ff 	add.w	r0, r7, #4294967295
 8000aee:	f080 811b 	bcs.w	8000d28 <__udivmoddi4+0x28c>
 8000af2:	4299      	cmp	r1, r3
 8000af4:	f240 8118 	bls.w	8000d28 <__udivmoddi4+0x28c>
 8000af8:	3f02      	subs	r7, #2
 8000afa:	442b      	add	r3, r5
 8000afc:	1a5b      	subs	r3, r3, r1
 8000afe:	b2a4      	uxth	r4, r4
 8000b00:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b04:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b0c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b10:	45a4      	cmp	ip, r4
 8000b12:	d909      	bls.n	8000b28 <__udivmoddi4+0x8c>
 8000b14:	192c      	adds	r4, r5, r4
 8000b16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b1a:	f080 8107 	bcs.w	8000d2c <__udivmoddi4+0x290>
 8000b1e:	45a4      	cmp	ip, r4
 8000b20:	f240 8104 	bls.w	8000d2c <__udivmoddi4+0x290>
 8000b24:	3802      	subs	r0, #2
 8000b26:	442c      	add	r4, r5
 8000b28:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b2c:	eba4 040c 	sub.w	r4, r4, ip
 8000b30:	2700      	movs	r7, #0
 8000b32:	b11e      	cbz	r6, 8000b3c <__udivmoddi4+0xa0>
 8000b34:	40d4      	lsrs	r4, r2
 8000b36:	2300      	movs	r3, #0
 8000b38:	e9c6 4300 	strd	r4, r3, [r6]
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d909      	bls.n	8000b5a <__udivmoddi4+0xbe>
 8000b46:	2e00      	cmp	r6, #0
 8000b48:	f000 80eb 	beq.w	8000d22 <__udivmoddi4+0x286>
 8000b4c:	2700      	movs	r7, #0
 8000b4e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b52:	4638      	mov	r0, r7
 8000b54:	4639      	mov	r1, r7
 8000b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5a:	fab3 f783 	clz	r7, r3
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	d147      	bne.n	8000bf2 <__udivmoddi4+0x156>
 8000b62:	428b      	cmp	r3, r1
 8000b64:	d302      	bcc.n	8000b6c <__udivmoddi4+0xd0>
 8000b66:	4282      	cmp	r2, r0
 8000b68:	f200 80fa 	bhi.w	8000d60 <__udivmoddi4+0x2c4>
 8000b6c:	1a84      	subs	r4, r0, r2
 8000b6e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b72:	2001      	movs	r0, #1
 8000b74:	4698      	mov	r8, r3
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	d0e0      	beq.n	8000b3c <__udivmoddi4+0xa0>
 8000b7a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b7e:	e7dd      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000b80:	b902      	cbnz	r2, 8000b84 <__udivmoddi4+0xe8>
 8000b82:	deff      	udf	#255	; 0xff
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	2a00      	cmp	r2, #0
 8000b8a:	f040 808f 	bne.w	8000cac <__udivmoddi4+0x210>
 8000b8e:	1b49      	subs	r1, r1, r5
 8000b90:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b94:	fa1f f885 	uxth.w	r8, r5
 8000b98:	2701      	movs	r7, #1
 8000b9a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b9e:	0c23      	lsrs	r3, r4, #16
 8000ba0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ba4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bac:	4299      	cmp	r1, r3
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0x124>
 8000bb0:	18eb      	adds	r3, r5, r3
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0x122>
 8000bb8:	4299      	cmp	r1, r3
 8000bba:	f200 80cd 	bhi.w	8000d58 <__udivmoddi4+0x2bc>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bcc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x14c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x14a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80b6 	bhi.w	8000d52 <__udivmoddi4+0x2b6>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e79f      	b.n	8000b32 <__udivmoddi4+0x96>
 8000bf2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bf6:	40bb      	lsls	r3, r7
 8000bf8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bfc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c00:	fa01 f407 	lsl.w	r4, r1, r7
 8000c04:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c08:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c0c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c10:	4325      	orrs	r5, r4
 8000c12:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c16:	0c2c      	lsrs	r4, r5, #16
 8000c18:	fb08 3319 	mls	r3, r8, r9, r3
 8000c1c:	fa1f fa8e 	uxth.w	sl, lr
 8000c20:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c24:	fb09 f40a 	mul.w	r4, r9, sl
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c2e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c32:	d90b      	bls.n	8000c4c <__udivmoddi4+0x1b0>
 8000c34:	eb1e 0303 	adds.w	r3, lr, r3
 8000c38:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c3c:	f080 8087 	bcs.w	8000d4e <__udivmoddi4+0x2b2>
 8000c40:	429c      	cmp	r4, r3
 8000c42:	f240 8084 	bls.w	8000d4e <__udivmoddi4+0x2b2>
 8000c46:	f1a9 0902 	sub.w	r9, r9, #2
 8000c4a:	4473      	add	r3, lr
 8000c4c:	1b1b      	subs	r3, r3, r4
 8000c4e:	b2ad      	uxth	r5, r5
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c5c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c60:	45a2      	cmp	sl, r4
 8000c62:	d908      	bls.n	8000c76 <__udivmoddi4+0x1da>
 8000c64:	eb1e 0404 	adds.w	r4, lr, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	d26b      	bcs.n	8000d46 <__udivmoddi4+0x2aa>
 8000c6e:	45a2      	cmp	sl, r4
 8000c70:	d969      	bls.n	8000d46 <__udivmoddi4+0x2aa>
 8000c72:	3802      	subs	r0, #2
 8000c74:	4474      	add	r4, lr
 8000c76:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c7a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c7e:	eba4 040a 	sub.w	r4, r4, sl
 8000c82:	454c      	cmp	r4, r9
 8000c84:	46c2      	mov	sl, r8
 8000c86:	464b      	mov	r3, r9
 8000c88:	d354      	bcc.n	8000d34 <__udivmoddi4+0x298>
 8000c8a:	d051      	beq.n	8000d30 <__udivmoddi4+0x294>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	d069      	beq.n	8000d64 <__udivmoddi4+0x2c8>
 8000c90:	ebb1 050a 	subs.w	r5, r1, sl
 8000c94:	eb64 0403 	sbc.w	r4, r4, r3
 8000c98:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c9c:	40fd      	lsrs	r5, r7
 8000c9e:	40fc      	lsrs	r4, r7
 8000ca0:	ea4c 0505 	orr.w	r5, ip, r5
 8000ca4:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca8:	2700      	movs	r7, #0
 8000caa:	e747      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000cac:	f1c2 0320 	rsb	r3, r2, #32
 8000cb0:	fa20 f703 	lsr.w	r7, r0, r3
 8000cb4:	4095      	lsls	r5, r2
 8000cb6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cba:	fa21 f303 	lsr.w	r3, r1, r3
 8000cbe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc2:	4338      	orrs	r0, r7
 8000cc4:	0c01      	lsrs	r1, r0, #16
 8000cc6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cca:	fa1f f885 	uxth.w	r8, r5
 8000cce:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cd2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd6:	fb07 f308 	mul.w	r3, r7, r8
 8000cda:	428b      	cmp	r3, r1
 8000cdc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce0:	d907      	bls.n	8000cf2 <__udivmoddi4+0x256>
 8000ce2:	1869      	adds	r1, r5, r1
 8000ce4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce8:	d22f      	bcs.n	8000d4a <__udivmoddi4+0x2ae>
 8000cea:	428b      	cmp	r3, r1
 8000cec:	d92d      	bls.n	8000d4a <__udivmoddi4+0x2ae>
 8000cee:	3f02      	subs	r7, #2
 8000cf0:	4429      	add	r1, r5
 8000cf2:	1acb      	subs	r3, r1, r3
 8000cf4:	b281      	uxth	r1, r0
 8000cf6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cfa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cfe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d02:	fb00 f308 	mul.w	r3, r0, r8
 8000d06:	428b      	cmp	r3, r1
 8000d08:	d907      	bls.n	8000d1a <__udivmoddi4+0x27e>
 8000d0a:	1869      	adds	r1, r5, r1
 8000d0c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d10:	d217      	bcs.n	8000d42 <__udivmoddi4+0x2a6>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d915      	bls.n	8000d42 <__udivmoddi4+0x2a6>
 8000d16:	3802      	subs	r0, #2
 8000d18:	4429      	add	r1, r5
 8000d1a:	1ac9      	subs	r1, r1, r3
 8000d1c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d20:	e73b      	b.n	8000b9a <__udivmoddi4+0xfe>
 8000d22:	4637      	mov	r7, r6
 8000d24:	4630      	mov	r0, r6
 8000d26:	e709      	b.n	8000b3c <__udivmoddi4+0xa0>
 8000d28:	4607      	mov	r7, r0
 8000d2a:	e6e7      	b.n	8000afc <__udivmoddi4+0x60>
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	e6fb      	b.n	8000b28 <__udivmoddi4+0x8c>
 8000d30:	4541      	cmp	r1, r8
 8000d32:	d2ab      	bcs.n	8000c8c <__udivmoddi4+0x1f0>
 8000d34:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d38:	eb69 020e 	sbc.w	r2, r9, lr
 8000d3c:	3801      	subs	r0, #1
 8000d3e:	4613      	mov	r3, r2
 8000d40:	e7a4      	b.n	8000c8c <__udivmoddi4+0x1f0>
 8000d42:	4660      	mov	r0, ip
 8000d44:	e7e9      	b.n	8000d1a <__udivmoddi4+0x27e>
 8000d46:	4618      	mov	r0, r3
 8000d48:	e795      	b.n	8000c76 <__udivmoddi4+0x1da>
 8000d4a:	4667      	mov	r7, ip
 8000d4c:	e7d1      	b.n	8000cf2 <__udivmoddi4+0x256>
 8000d4e:	4681      	mov	r9, r0
 8000d50:	e77c      	b.n	8000c4c <__udivmoddi4+0x1b0>
 8000d52:	3802      	subs	r0, #2
 8000d54:	442c      	add	r4, r5
 8000d56:	e747      	b.n	8000be8 <__udivmoddi4+0x14c>
 8000d58:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d5c:	442b      	add	r3, r5
 8000d5e:	e72f      	b.n	8000bc0 <__udivmoddi4+0x124>
 8000d60:	4638      	mov	r0, r7
 8000d62:	e708      	b.n	8000b76 <__udivmoddi4+0xda>
 8000d64:	4637      	mov	r7, r6
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0xa0>

08000d68 <__aeabi_idiv0>:
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop

08000d6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d72:	463b      	mov	r3, r7
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d7e:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000d80:	4a21      	ldr	r2, [pc, #132]	; (8000e08 <MX_ADC1_Init+0x9c>)
 8000d82:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d84:	4b1f      	ldr	r3, [pc, #124]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000d86:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d8a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d8c:	4b1d      	ldr	r3, [pc, #116]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000d92:	4b1c      	ldr	r3, [pc, #112]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000d98:	4b1a      	ldr	r3, [pc, #104]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9e:	4b19      	ldr	r3, [pc, #100]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da6:	4b17      	ldr	r3, [pc, #92]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dac:	4b15      	ldr	r3, [pc, #84]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000dae:	4a17      	ldr	r2, [pc, #92]	; (8000e0c <MX_ADC1_Init+0xa0>)
 8000db0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000db2:	4b14      	ldr	r3, [pc, #80]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000dba:	2201      	movs	r2, #1
 8000dbc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000dbe:	4b11      	ldr	r3, [pc, #68]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc6:	4b0f      	ldr	r3, [pc, #60]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000dce:	f001 fda7 	bl	8002920 <HAL_ADC_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dd8:	f001 f9ba 	bl	8002150 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000de0:	2301      	movs	r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de8:	463b      	mov	r3, r7
 8000dea:	4619      	mov	r1, r3
 8000dec:	4805      	ldr	r0, [pc, #20]	; (8000e04 <MX_ADC1_Init+0x98>)
 8000dee:	f002 f875 	bl	8002edc <HAL_ADC_ConfigChannel>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000df8:	f001 f9aa 	bl	8002150 <Error_Handler>
  }

}
 8000dfc:	bf00      	nop
 8000dfe:	3710      	adds	r7, #16
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	200000fc 	.word	0x200000fc
 8000e08:	40012000 	.word	0x40012000
 8000e0c:	0f000001 	.word	0x0f000001

08000e10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e18:	f107 0314 	add.w	r3, r7, #20
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a33      	ldr	r2, [pc, #204]	; (8000efc <HAL_ADC_MspInit+0xec>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d15f      	bne.n	8000ef2 <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
 8000e36:	4b32      	ldr	r3, [pc, #200]	; (8000f00 <HAL_ADC_MspInit+0xf0>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	4a31      	ldr	r2, [pc, #196]	; (8000f00 <HAL_ADC_MspInit+0xf0>)
 8000e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e40:	6453      	str	r3, [r2, #68]	; 0x44
 8000e42:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <HAL_ADC_MspInit+0xf0>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e4a:	613b      	str	r3, [r7, #16]
 8000e4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	4b2b      	ldr	r3, [pc, #172]	; (8000f00 <HAL_ADC_MspInit+0xf0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a2a      	ldr	r2, [pc, #168]	; (8000f00 <HAL_ADC_MspInit+0xf0>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b28      	ldr	r3, [pc, #160]	; (8000f00 <HAL_ADC_MspInit+0xf0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e72:	2300      	movs	r3, #0
 8000e74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e76:	f107 0314 	add.w	r3, r7, #20
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4821      	ldr	r0, [pc, #132]	; (8000f04 <HAL_ADC_MspInit+0xf4>)
 8000e7e:	f003 f867 	bl	8003f50 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e82:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000e84:	4a21      	ldr	r2, [pc, #132]	; (8000f0c <HAL_ADC_MspInit+0xfc>)
 8000e86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000e9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ea0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000ea4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ea8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000eac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000eb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000eba:	4b13      	ldr	r3, [pc, #76]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ec0:	4b11      	ldr	r3, [pc, #68]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000ec6:	4810      	ldr	r0, [pc, #64]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000ec8:	f002 fc42 	bl	8003750 <HAL_DMA_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ed2:	f001 f93d 	bl	8002150 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000eda:	639a      	str	r2, [r3, #56]	; 0x38
 8000edc:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_ADC_MspInit+0xf8>)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	2012      	movs	r0, #18
 8000ee8:	f002 fb8d 	bl	8003606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000eec:	2012      	movs	r0, #18
 8000eee:	f002 fba6 	bl	800363e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000
 8000f08:	20000144 	.word	0x20000144
 8000f0c:	40026410 	.word	0x40026410

08000f10 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000f16:	463b      	mov	r3, r7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f1e:	4b14      	ldr	r3, [pc, #80]	; (8000f70 <MX_DAC_Init+0x60>)
 8000f20:	4a14      	ldr	r2, [pc, #80]	; (8000f74 <MX_DAC_Init+0x64>)
 8000f22:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f24:	4812      	ldr	r0, [pc, #72]	; (8000f70 <MX_DAC_Init+0x60>)
 8000f26:	f002 fba4 	bl	8003672 <HAL_DAC_Init>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000f30:	f001 f90e 	bl	8002150 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000f34:	2300      	movs	r3, #0
 8000f36:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000f3c:	463b      	mov	r3, r7
 8000f3e:	2200      	movs	r2, #0
 8000f40:	4619      	mov	r1, r3
 8000f42:	480b      	ldr	r0, [pc, #44]	; (8000f70 <MX_DAC_Init+0x60>)
 8000f44:	f002 fbb7 	bl	80036b6 <HAL_DAC_ConfigChannel>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000f4e:	f001 f8ff 	bl	8002150 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000f52:	463b      	mov	r3, r7
 8000f54:	2210      	movs	r2, #16
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_DAC_Init+0x60>)
 8000f5a:	f002 fbac 	bl	80036b6 <HAL_DAC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000f64:	f001 f8f4 	bl	8002150 <Error_Handler>
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001a4 	.word	0x200001a4
 8000f74:	40007400 	.word	0x40007400

08000f78 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a17      	ldr	r2, [pc, #92]	; (8000ff4 <HAL_DAC_MspInit+0x7c>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d127      	bne.n	8000fea <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	4b16      	ldr	r3, [pc, #88]	; (8000ff8 <HAL_DAC_MspInit+0x80>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	4a15      	ldr	r2, [pc, #84]	; (8000ff8 <HAL_DAC_MspInit+0x80>)
 8000fa4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000faa:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <HAL_DAC_MspInit+0x80>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_DAC_MspInit+0x80>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_DAC_MspInit+0x80>)
 8000fc0:	f043 0301 	orr.w	r3, r3, #1
 8000fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc6:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <HAL_DAC_MspInit+0x80>)
 8000fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fca:	f003 0301 	and.w	r3, r3, #1
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000fd2:	2330      	movs	r3, #48	; 0x30
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 0314 	add.w	r3, r7, #20
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4805      	ldr	r0, [pc, #20]	; (8000ffc <HAL_DAC_MspInit+0x84>)
 8000fe6:	f002 ffb3 	bl	8003f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3728      	adds	r7, #40	; 0x28
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40007400 	.word	0x40007400
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000

08001000 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	4b23      	ldr	r3, [pc, #140]	; (8001098 <MX_DMA_Init+0x98>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	4a22      	ldr	r2, [pc, #136]	; (8001098 <MX_DMA_Init+0x98>)
 8001010:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001014:	6313      	str	r3, [r2, #48]	; 0x30
 8001016:	4b20      	ldr	r3, [pc, #128]	; (8001098 <MX_DMA_Init+0x98>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b1c      	ldr	r3, [pc, #112]	; (8001098 <MX_DMA_Init+0x98>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a1b      	ldr	r2, [pc, #108]	; (8001098 <MX_DMA_Init+0x98>)
 800102c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b19      	ldr	r3, [pc, #100]	; (8001098 <MX_DMA_Init+0x98>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 1, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2101      	movs	r1, #1
 8001042:	2010      	movs	r0, #16
 8001044:	f002 fadf 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001048:	2010      	movs	r0, #16
 800104a:	f002 faf8 	bl	800363e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	2011      	movs	r0, #17
 8001054:	f002 fad7 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001058:	2011      	movs	r0, #17
 800105a:	f002 faf0 	bl	800363e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2101      	movs	r1, #1
 8001062:	2038      	movs	r0, #56	; 0x38
 8001064:	f002 facf 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001068:	2038      	movs	r0, #56	; 0x38
 800106a:	f002 fae8 	bl	800363e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 1, 0);
 800106e:	2200      	movs	r2, #0
 8001070:	2101      	movs	r1, #1
 8001072:	203a      	movs	r0, #58	; 0x3a
 8001074:	f002 fac7 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001078:	203a      	movs	r0, #58	; 0x3a
 800107a:	f002 fae0 	bl	800363e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 1, 0);
 800107e:	2200      	movs	r2, #0
 8001080:	2101      	movs	r1, #1
 8001082:	2046      	movs	r0, #70	; 0x46
 8001084:	f002 fabf 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001088:	2046      	movs	r0, #70	; 0x46
 800108a:	f002 fad8 	bl	800363e <HAL_NVIC_EnableIRQ>

}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800

0800109c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08c      	sub	sp, #48	; 0x30
 80010a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	2200      	movs	r2, #0
 80010a8:	601a      	str	r2, [r3, #0]
 80010aa:	605a      	str	r2, [r3, #4]
 80010ac:	609a      	str	r2, [r3, #8]
 80010ae:	60da      	str	r2, [r3, #12]
 80010b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b2:	2300      	movs	r3, #0
 80010b4:	61bb      	str	r3, [r7, #24]
 80010b6:	4b5e      	ldr	r3, [pc, #376]	; (8001230 <MX_GPIO_Init+0x194>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	4a5d      	ldr	r2, [pc, #372]	; (8001230 <MX_GPIO_Init+0x194>)
 80010bc:	f043 0310 	orr.w	r3, r3, #16
 80010c0:	6313      	str	r3, [r2, #48]	; 0x30
 80010c2:	4b5b      	ldr	r3, [pc, #364]	; (8001230 <MX_GPIO_Init+0x194>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	f003 0310 	and.w	r3, r3, #16
 80010ca:	61bb      	str	r3, [r7, #24]
 80010cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	617b      	str	r3, [r7, #20]
 80010d2:	4b57      	ldr	r3, [pc, #348]	; (8001230 <MX_GPIO_Init+0x194>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	4a56      	ldr	r2, [pc, #344]	; (8001230 <MX_GPIO_Init+0x194>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	6313      	str	r3, [r2, #48]	; 0x30
 80010de:	4b54      	ldr	r3, [pc, #336]	; (8001230 <MX_GPIO_Init+0x194>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b50      	ldr	r3, [pc, #320]	; (8001230 <MX_GPIO_Init+0x194>)
 80010f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f2:	4a4f      	ldr	r2, [pc, #316]	; (8001230 <MX_GPIO_Init+0x194>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	6313      	str	r3, [r2, #48]	; 0x30
 80010fa:	4b4d      	ldr	r3, [pc, #308]	; (8001230 <MX_GPIO_Init+0x194>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	f003 0301 	and.w	r3, r3, #1
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b49      	ldr	r3, [pc, #292]	; (8001230 <MX_GPIO_Init+0x194>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a48      	ldr	r2, [pc, #288]	; (8001230 <MX_GPIO_Init+0x194>)
 8001110:	f043 0320 	orr.w	r3, r3, #32
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b46      	ldr	r3, [pc, #280]	; (8001230 <MX_GPIO_Init+0x194>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0320 	and.w	r3, r3, #32
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b42      	ldr	r3, [pc, #264]	; (8001230 <MX_GPIO_Init+0x194>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a41      	ldr	r2, [pc, #260]	; (8001230 <MX_GPIO_Init+0x194>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b3f      	ldr	r3, [pc, #252]	; (8001230 <MX_GPIO_Init+0x194>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	4b3b      	ldr	r3, [pc, #236]	; (8001230 <MX_GPIO_Init+0x194>)
 8001144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001146:	4a3a      	ldr	r2, [pc, #232]	; (8001230 <MX_GPIO_Init+0x194>)
 8001148:	f043 0308 	orr.w	r3, r3, #8
 800114c:	6313      	str	r3, [r2, #48]	; 0x30
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <MX_GPIO_Init+0x194>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	f003 0308 	and.w	r3, r3, #8
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FlowPower_GPIO_Port, FlowPower_Pin, GPIO_PIN_RESET);
 800115a:	2200      	movs	r2, #0
 800115c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001160:	4834      	ldr	r0, [pc, #208]	; (8001234 <MX_GPIO_Init+0x198>)
 8001162:	f003 f8b7 	bl	80042d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pinch1_Pin|Pinch3_Pin|Pinch2_Pin, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800116c:	4832      	ldr	r0, [pc, #200]	; (8001238 <MX_GPIO_Init+0x19c>)
 800116e:	f003 f8b1 	bl	80042d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART_RSE_GPIO_Port, UART_RSE_Pin, GPIO_PIN_RESET);
 8001172:	2200      	movs	r2, #0
 8001174:	2110      	movs	r1, #16
 8001176:	4831      	ldr	r0, [pc, #196]	; (800123c <MX_GPIO_Init+0x1a0>)
 8001178:	f003 f8ac 	bl	80042d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TMCL_Stage_Pin;
 800117c:	2340      	movs	r3, #64	; 0x40
 800117e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <MX_GPIO_Init+0x1a4>)
 8001182:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001184:	2302      	movs	r3, #2
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TMCL_Stage_GPIO_Port, &GPIO_InitStruct);
 8001188:	f107 031c 	add.w	r3, r7, #28
 800118c:	4619      	mov	r1, r3
 800118e:	482d      	ldr	r0, [pc, #180]	; (8001244 <MX_GPIO_Init+0x1a8>)
 8001190:	f002 fede 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800119a:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <MX_GPIO_Init+0x1ac>)
 800119c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800119e:	2302      	movs	r3, #2
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4828      	ldr	r0, [pc, #160]	; (800124c <MX_GPIO_Init+0x1b0>)
 80011aa:	f002 fed1 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FlowPower_Pin;
 80011ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b4:	2301      	movs	r3, #1
 80011b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(FlowPower_GPIO_Port, &GPIO_InitStruct);
 80011c0:	f107 031c 	add.w	r3, r7, #28
 80011c4:	4619      	mov	r1, r3
 80011c6:	481b      	ldr	r0, [pc, #108]	; (8001234 <MX_GPIO_Init+0x198>)
 80011c8:	f002 fec2 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Pinch1_Pin|Pinch3_Pin|Pinch2_Pin;
 80011cc:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	4814      	ldr	r0, [pc, #80]	; (8001238 <MX_GPIO_Init+0x19c>)
 80011e6:	f002 feb3 	bl	8003f50 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART_RSE_Pin;
 80011ea:	2310      	movs	r3, #16
 80011ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART_RSE_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 031c 	add.w	r3, r7, #28
 80011fe:	4619      	mov	r1, r3
 8001200:	480e      	ldr	r0, [pc, #56]	; (800123c <MX_GPIO_Init+0x1a0>)
 8001202:	f002 fea5 	bl	8003f50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	2017      	movs	r0, #23
 800120c:	f002 f9fb 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001210:	2017      	movs	r0, #23
 8001212:	f002 fa14 	bl	800363e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2028      	movs	r0, #40	; 0x28
 800121c:	f002 f9f3 	bl	8003606 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001220:	2028      	movs	r0, #40	; 0x28
 8001222:	f002 fa0c 	bl	800363e <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3730      	adds	r7, #48	; 0x30
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800
 8001234:	40021400 	.word	0x40021400
 8001238:	40020400 	.word	0x40020400
 800123c:	40020c00 	.word	0x40020c00
 8001240:	10310000 	.word	0x10310000
 8001244:	40021000 	.word	0x40021000
 8001248:	10110000 	.word	0x10110000
 800124c:	40020800 	.word	0x40020800

08001250 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001254:	4b1c      	ldr	r3, [pc, #112]	; (80012c8 <MX_I2C1_Init+0x78>)
 8001256:	4a1d      	ldr	r2, [pc, #116]	; (80012cc <MX_I2C1_Init+0x7c>)
 8001258:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 1000;
 800125a:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <MX_I2C1_Init+0x78>)
 800125c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001260:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001262:	4b19      	ldr	r3, [pc, #100]	; (80012c8 <MX_I2C1_Init+0x78>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001268:	4b17      	ldr	r3, [pc, #92]	; (80012c8 <MX_I2C1_Init+0x78>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800126e:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <MX_I2C1_Init+0x78>)
 8001270:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001274:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001276:	4b14      	ldr	r3, [pc, #80]	; (80012c8 <MX_I2C1_Init+0x78>)
 8001278:	2200      	movs	r2, #0
 800127a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C1_Init+0x78>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_I2C1_Init+0x78>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C1_Init+0x78>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800128e:	480e      	ldr	r0, [pc, #56]	; (80012c8 <MX_I2C1_Init+0x78>)
 8001290:	f003 f852 	bl	8004338 <HAL_I2C_Init>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_I2C1_Init+0x4e>
  {
    Error_Handler();
 800129a:	f000 ff59 	bl	8002150 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800129e:	2100      	movs	r1, #0
 80012a0:	4809      	ldr	r0, [pc, #36]	; (80012c8 <MX_I2C1_Init+0x78>)
 80012a2:	f003 ffd2 	bl	800524a <HAL_I2CEx_ConfigAnalogFilter>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x60>
  {
    Error_Handler();
 80012ac:	f000 ff50 	bl	8002150 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80012b0:	2100      	movs	r1, #0
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <MX_I2C1_Init+0x78>)
 80012b4:	f004 f805 	bl	80052c2 <HAL_I2CEx_ConfigDigitalFilter>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_I2C1_Init+0x72>
  {
    Error_Handler();
 80012be:	f000 ff47 	bl	8002150 <Error_Handler>
  }

}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	2000020c 	.word	0x2000020c
 80012cc:	40005400 	.word	0x40005400

080012d0 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0

  hi2c3.Instance = I2C3;
 80012d4:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_I2C3_Init+0x78>)
 80012d6:	4a1d      	ldr	r2, [pc, #116]	; (800134c <MX_I2C3_Init+0x7c>)
 80012d8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 1000;
 80012da:	4b1b      	ldr	r3, [pc, #108]	; (8001348 <MX_I2C3_Init+0x78>)
 80012dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012e0:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_I2C3_Init+0x78>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80012e8:	4b17      	ldr	r3, [pc, #92]	; (8001348 <MX_I2C3_Init+0x78>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012ee:	4b16      	ldr	r3, [pc, #88]	; (8001348 <MX_I2C3_Init+0x78>)
 80012f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012f6:	4b14      	ldr	r3, [pc, #80]	; (8001348 <MX_I2C3_Init+0x78>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <MX_I2C3_Init+0x78>)
 80012fe:	2200      	movs	r2, #0
 8001300:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001302:	4b11      	ldr	r3, [pc, #68]	; (8001348 <MX_I2C3_Init+0x78>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <MX_I2C3_Init+0x78>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800130e:	480e      	ldr	r0, [pc, #56]	; (8001348 <MX_I2C3_Init+0x78>)
 8001310:	f003 f812 	bl	8004338 <HAL_I2C_Init>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_I2C3_Init+0x4e>
  {
    Error_Handler();
 800131a:	f000 ff19 	bl	8002150 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800131e:	2100      	movs	r1, #0
 8001320:	4809      	ldr	r0, [pc, #36]	; (8001348 <MX_I2C3_Init+0x78>)
 8001322:	f003 ff92 	bl	800524a <HAL_I2CEx_ConfigAnalogFilter>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_I2C3_Init+0x60>
  {
    Error_Handler();
 800132c:	f000 ff10 	bl	8002150 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001330:	2100      	movs	r1, #0
 8001332:	4805      	ldr	r0, [pc, #20]	; (8001348 <MX_I2C3_Init+0x78>)
 8001334:	f003 ffc5 	bl	80052c2 <HAL_I2CEx_ConfigDigitalFilter>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_I2C3_Init+0x72>
  {
    Error_Handler();
 800133e:	f000 ff07 	bl	8002150 <Error_Handler>
  }

}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	200001b8 	.word	0x200001b8
 800134c:	40005c00 	.word	0x40005c00

08001350 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08c      	sub	sp, #48	; 0x30
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a42      	ldr	r2, [pc, #264]	; (8001478 <HAL_I2C_MspInit+0x128>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12c      	bne.n	80013cc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	61bb      	str	r3, [r7, #24]
 8001376:	4b41      	ldr	r3, [pc, #260]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a40      	ldr	r2, [pc, #256]	; (800147c <HAL_I2C_MspInit+0x12c>)
 800137c:	f043 0302 	orr.w	r3, r3, #2
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b3e      	ldr	r3, [pc, #248]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0302 	and.w	r3, r3, #2
 800138a:	61bb      	str	r3, [r7, #24]
 800138c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800138e:	23c0      	movs	r3, #192	; 0xc0
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001392:	2312      	movs	r3, #18
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001396:	2301      	movs	r3, #1
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139a:	2303      	movs	r3, #3
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800139e:	2304      	movs	r3, #4
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4835      	ldr	r0, [pc, #212]	; (8001480 <HAL_I2C_MspInit+0x130>)
 80013aa:	f002 fdd1 	bl	8003f50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	617b      	str	r3, [r7, #20]
 80013b2:	4b32      	ldr	r3, [pc, #200]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b6:	4a31      	ldr	r2, [pc, #196]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013bc:	6413      	str	r3, [r2, #64]	; 0x40
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013c6:	617b      	str	r3, [r7, #20]
 80013c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80013ca:	e050      	b.n	800146e <HAL_I2C_MspInit+0x11e>
  else if(i2cHandle->Instance==I2C3)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a2c      	ldr	r2, [pc, #176]	; (8001484 <HAL_I2C_MspInit+0x134>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d14b      	bne.n	800146e <HAL_I2C_MspInit+0x11e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b28      	ldr	r3, [pc, #160]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013de:	4a27      	ldr	r2, [pc, #156]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013e0:	f043 0304 	orr.w	r3, r3, #4
 80013e4:	6313      	str	r3, [r2, #48]	; 0x30
 80013e6:	4b25      	ldr	r3, [pc, #148]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	f003 0304 	and.w	r3, r3, #4
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fa:	4a20      	ldr	r2, [pc, #128]	; (800147c <HAL_I2C_MspInit+0x12c>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	; 0x30
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001414:	2312      	movs	r3, #18
 8001416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001418:	2301      	movs	r3, #1
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141c:	2303      	movs	r3, #3
 800141e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001420:	2304      	movs	r3, #4
 8001422:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001424:	f107 031c 	add.w	r3, r7, #28
 8001428:	4619      	mov	r1, r3
 800142a:	4817      	ldr	r0, [pc, #92]	; (8001488 <HAL_I2C_MspInit+0x138>)
 800142c:	f002 fd90 	bl	8003f50 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001434:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001436:	2312      	movs	r3, #18
 8001438:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800143a:	2301      	movs	r3, #1
 800143c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143e:	2303      	movs	r3, #3
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001442:	2304      	movs	r3, #4
 8001444:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	480f      	ldr	r0, [pc, #60]	; (800148c <HAL_I2C_MspInit+0x13c>)
 800144e:	f002 fd7f 	bl	8003f50 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	4b09      	ldr	r3, [pc, #36]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_I2C_MspInit+0x12c>)
 800145c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_I2C_MspInit+0x12c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
}
 800146e:	bf00      	nop
 8001470:	3730      	adds	r7, #48	; 0x30
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40005400 	.word	0x40005400
 800147c:	40023800 	.word	0x40023800
 8001480:	40020400 	.word	0x40020400
 8001484:	40005c00 	.word	0x40005c00
 8001488:	40020800 	.word	0x40020800
 800148c:	40020000 	.word	0x40020000

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001496:	f001 f9d1 	bl	800283c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800149a:	f000 f8e7 	bl	800166c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149e:	f7ff fdfd 	bl	800109c <MX_GPIO_Init>
  MX_DMA_Init();
 80014a2:	f7ff fdad 	bl	8001000 <MX_DMA_Init>
  MX_ADC1_Init();
 80014a6:	f7ff fc61 	bl	8000d6c <MX_ADC1_Init>
  MX_I2C1_Init();
 80014aa:	f7ff fed1 	bl	8001250 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80014ae:	f000 ff8b 	bl	80023c8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80014b2:	f000 ffb5 	bl	8002420 <MX_USART2_UART_Init>
  MX_I2C3_Init();
 80014b6:	f7ff ff0b 	bl	80012d0 <MX_I2C3_Init>
  MX_DAC_Init();
 80014ba:	f7ff fd29 	bl	8000f10 <MX_DAC_Init>
  MX_RTC_Init();
 80014be:	f000 fe4f 	bl	8002160 <MX_RTC_Init>
  MX_USART3_UART_Init();
 80014c2:	f000 ffd7 	bl	8002474 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  initializations();		// User initializations
 80014c6:	f000 f95b 	bl	8001780 <initializations>


  while (1)
  {
		// Reading in from Sensirion flow sensor
		SensirionFlowSensor(FlowBuffer, FlowSensirion /*lpm*/, deltaFlow/*lpm*/,FlowSensirionTotal);
 80014ca:	4b4e      	ldr	r3, [pc, #312]	; (8001604 <main+0x174>)
 80014cc:	edd3 7a00 	vldr	s15, [r3]
 80014d0:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <main+0x178>)
 80014d2:	ed93 7a00 	vldr	s14, [r3]
 80014d6:	eef0 0a47 	vmov.f32	s1, s14
 80014da:	eeb0 0a67 	vmov.f32	s0, s15
 80014de:	494b      	ldr	r1, [pc, #300]	; (800160c <main+0x17c>)
 80014e0:	484b      	ldr	r0, [pc, #300]	; (8001610 <main+0x180>)
 80014e2:	f000 fbd5 	bl	8001c90 <SensirionFlowSensor>

		// Getting delta time stamp from RTC
		HAL_RTC_GetTime(&hrtc, &timeStampCurrent, RTC_FORMAT_BIN);
 80014e6:	2200      	movs	r2, #0
 80014e8:	494a      	ldr	r1, [pc, #296]	; (8001614 <main+0x184>)
 80014ea:	484b      	ldr	r0, [pc, #300]	; (8001618 <main+0x188>)
 80014ec:	f004 fe03 	bl	80060f6 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 80014f0:	2200      	movs	r2, #0
 80014f2:	494a      	ldr	r1, [pc, #296]	; (800161c <main+0x18c>)
 80014f4:	4848      	ldr	r0, [pc, #288]	; (8001618 <main+0x188>)
 80014f6:	f004 fe5c 	bl	80061b2 <HAL_RTC_GetDate>
		
		// timeStampCurrent.miliSeconds is fraction of a second counting down from 255 to 0.
		Seconds = (float)(timeStampCurrent.SecondFraction-timeStampCurrent.SubSeconds) / (float)(timeStampCurrent.SecondFraction + 1);			// convert subseconds to millisecond
 80014fa:	4b46      	ldr	r3, [pc, #280]	; (8001614 <main+0x184>)
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	4b45      	ldr	r3, [pc, #276]	; (8001614 <main+0x184>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	ee07 3a90 	vmov	s15, r3
 8001508:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800150c:	4b41      	ldr	r3, [pc, #260]	; (8001614 <main+0x184>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	3301      	adds	r3, #1
 8001512:	ee07 3a90 	vmov	s15, r3
 8001516:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800151a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800151e:	4b40      	ldr	r3, [pc, #256]	; (8001620 <main+0x190>)
 8001520:	edc3 7a00 	vstr	s15, [r3]
		timeCurrent = (float)timeStampCurrent.Hours*3600 + (float)timeStampCurrent.Minutes*60 + (float)timeStampCurrent.Seconds + Seconds;  // Current time = Hours*3600 minutes*60 + seconds + milli seconds
 8001524:	4b3b      	ldr	r3, [pc, #236]	; (8001614 <main+0x184>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	ee07 3a90 	vmov	s15, r3
 800152c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001530:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001624 <main+0x194>
 8001534:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001538:	4b36      	ldr	r3, [pc, #216]	; (8001614 <main+0x184>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001544:	eddf 6a38 	vldr	s13, [pc, #224]	; 8001628 <main+0x198>
 8001548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800154c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001550:	4b30      	ldr	r3, [pc, #192]	; (8001614 <main+0x184>)
 8001552:	789b      	ldrb	r3, [r3, #2]
 8001554:	ee07 3a90 	vmov	s15, r3
 8001558:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800155c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <main+0x190>)
 8001562:	edd3 7a00 	vldr	s15, [r3]
 8001566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800156a:	4b30      	ldr	r3, [pc, #192]	; (800162c <main+0x19c>)
 800156c:	edc3 7a00 	vstr	s15, [r3]
		deltaTime = timeCurrent - timeOld; 	// Calculating time since last sample
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <main+0x19c>)
 8001572:	ed93 7a00 	vldr	s14, [r3]
 8001576:	4b2e      	ldr	r3, [pc, #184]	; (8001630 <main+0x1a0>)
 8001578:	edd3 7a00 	vldr	s15, [r3]
 800157c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001580:	4b2c      	ldr	r3, [pc, #176]	; (8001634 <main+0x1a4>)
 8001582:	edc3 7a00 	vstr	s15, [r3]
		timeOld = timeCurrent;			   // Set previous value = current
 8001586:	4b29      	ldr	r3, [pc, #164]	; (800162c <main+0x19c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a29      	ldr	r2, [pc, #164]	; (8001630 <main+0x1a0>)
 800158c:	6013      	str	r3, [r2, #0]

		//Trapeziodal integration method
		IntegrationForVolume(deltaFlow/*lpm*/, deltaTime /*s*/, FlowSensirion/*lpm*/, TidalVolume/*l*/);
 800158e:	4b1d      	ldr	r3, [pc, #116]	; (8001604 <main+0x174>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	4b27      	ldr	r3, [pc, #156]	; (8001634 <main+0x1a4>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	4927      	ldr	r1, [pc, #156]	; (8001638 <main+0x1a8>)
 800159c:	481b      	ldr	r0, [pc, #108]	; (800160c <main+0x17c>)
 800159e:	eef0 0a47 	vmov.f32	s1, s14
 80015a2:	eeb0 0a67 	vmov.f32	s0, s15
 80015a6:	f000 fa8b 	bl	8001ac0 <IntegrationForVolume>

		// Reading in from Honeywell pressure sensor
		HoneyWellPressure(PressureBuffer, StatusHoneywell, PressureHoneywell,TempHoneywell);
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <main+0x1ac>)
 80015ac:	7819      	ldrb	r1, [r3, #0]
 80015ae:	4b24      	ldr	r3, [pc, #144]	; (8001640 <main+0x1b0>)
 80015b0:	781a      	ldrb	r2, [r3, #0]
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <main+0x1b4>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	4824      	ldr	r0, [pc, #144]	; (8001648 <main+0x1b8>)
 80015b8:	f000 fce7 	bl	8001f8a <HoneyWellPressure>

		// Toggling DMA streams for messaging and reading ADC values
		if(toggleValue == 1){
 80015bc:	4b23      	ldr	r3, [pc, #140]	; (800164c <main+0x1bc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d113      	bne.n	80015ec <main+0x15c>
			HAL_ADC_Stop_DMA(&hadc1); 		// Close ADC DMA stream
 80015c4:	4822      	ldr	r0, [pc, #136]	; (8001650 <main+0x1c0>)
 80015c6:	f001 fc21 	bl	8002e0c <HAL_ADC_Stop_DMA>
			UARTSendDMA(eightBitResult, pressure, HMI_tx_buff, FlowSensirion, TidalVolume, HMI_rx_buff);
 80015ca:	4b22      	ldr	r3, [pc, #136]	; (8001654 <main+0x1c4>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	4b21      	ldr	r3, [pc, #132]	; (8001658 <main+0x1c8>)
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	4b18      	ldr	r3, [pc, #96]	; (8001638 <main+0x1a8>)
 80015d6:	4a0d      	ldr	r2, [pc, #52]	; (800160c <main+0x17c>)
 80015d8:	4920      	ldr	r1, [pc, #128]	; (800165c <main+0x1cc>)
 80015da:	eeb0 0a67 	vmov.f32	s0, s15
 80015de:	4820      	ldr	r0, [pc, #128]	; (8001660 <main+0x1d0>)
 80015e0:	f000 fbb6 	bl	8001d50 <UARTSendDMA>
			toggleValue = 0;
 80015e4:	4b19      	ldr	r3, [pc, #100]	; (800164c <main+0x1bc>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
 80015ea:	e76e      	b.n	80014ca <main+0x3a>
		}else{
			HAL_UART_DMAStop(&huart1); // Close UART DMA stream
 80015ec:	481d      	ldr	r0, [pc, #116]	; (8001664 <main+0x1d4>)
 80015ee:	f005 f919 	bl	8006824 <HAL_UART_DMAStop>
			HAL_ADC_Start_DMA(&hadc1, value_adc,numADCchannels);
 80015f2:	2201      	movs	r2, #1
 80015f4:	491c      	ldr	r1, [pc, #112]	; (8001668 <main+0x1d8>)
 80015f6:	4816      	ldr	r0, [pc, #88]	; (8001650 <main+0x1c0>)
 80015f8:	f001 fb16 	bl	8002c28 <HAL_ADC_Start_DMA>
			toggleValue = 1;
 80015fc:	4b13      	ldr	r3, [pc, #76]	; (800164c <main+0x1bc>)
 80015fe:	2201      	movs	r2, #1
 8001600:	701a      	strb	r2, [r3, #0]
		SensirionFlowSensor(FlowBuffer, FlowSensirion /*lpm*/, deltaFlow/*lpm*/,FlowSensirionTotal);
 8001602:	e762      	b.n	80014ca <main+0x3a>
 8001604:	200000e0 	.word	0x200000e0
 8001608:	200000dc 	.word	0x200000dc
 800160c:	20000080 	.word	0x20000080
 8001610:	200000d8 	.word	0x200000d8
 8001614:	200002d0 	.word	0x200002d0
 8001618:	200002ec 	.word	0x200002ec
 800161c:	200002c4 	.word	0x200002c4
 8001620:	200000f8 	.word	0x200000f8
 8001624:	45610000 	.word	0x45610000
 8001628:	42700000 	.word	0x42700000
 800162c:	200000ec 	.word	0x200000ec
 8001630:	200000f0 	.word	0x200000f0
 8001634:	200000f4 	.word	0x200000f4
 8001638:	200000d0 	.word	0x200000d0
 800163c:	200000e6 	.word	0x200000e6
 8001640:	200000e4 	.word	0x200000e4
 8001644:	200000e5 	.word	0x200000e5
 8001648:	200000e8 	.word	0x200000e8
 800164c:	20000264 	.word	0x20000264
 8001650:	200000fc 	.word	0x200000fc
 8001654:	2000027c 	.word	0x2000027c
 8001658:	2000005c 	.word	0x2000005c
 800165c:	20000050 	.word	0x20000050
 8001660:	20000274 	.word	0x20000274
 8001664:	200004cc 	.word	0x200004cc
 8001668:	20000298 	.word	0x20000298

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b0a0      	sub	sp, #128	; 0x80
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001676:	2230      	movs	r2, #48	; 0x30
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f006 f830 	bl	80076e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	2230      	movs	r2, #48	; 0x30
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f006 f821 	bl	80076e0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60bb      	str	r3, [r7, #8]
 80016a2:	4b34      	ldr	r3, [pc, #208]	; (8001774 <SystemClock_Config+0x108>)
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	4a33      	ldr	r2, [pc, #204]	; (8001774 <SystemClock_Config+0x108>)
 80016a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016ac:	6413      	str	r3, [r2, #64]	; 0x40
 80016ae:	4b31      	ldr	r3, [pc, #196]	; (8001774 <SystemClock_Config+0x108>)
 80016b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b6:	60bb      	str	r3, [r7, #8]
 80016b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b2e      	ldr	r3, [pc, #184]	; (8001778 <SystemClock_Config+0x10c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a2d      	ldr	r2, [pc, #180]	; (8001778 <SystemClock_Config+0x10c>)
 80016c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	4b2b      	ldr	r3, [pc, #172]	; (8001778 <SystemClock_Config+0x10c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80016d6:	230a      	movs	r3, #10
 80016d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016da:	2301      	movs	r3, #1
 80016dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016de:	2310      	movs	r3, #16
 80016e0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80016e2:	2301      	movs	r3, #1
 80016e4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e6:	2302      	movs	r3, #2
 80016e8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016ea:	2300      	movs	r3, #0
 80016ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016ee:	2308      	movs	r3, #8
 80016f0:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 180;
 80016f2:	23b4      	movs	r3, #180	; 0xb4
 80016f4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016fa:	2304      	movs	r3, #4
 80016fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001702:	4618      	mov	r0, r3
 8001704:	f003 fe6c 	bl	80053e0 <HAL_RCC_OscConfig>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800170e:	f000 fd1f 	bl	8002150 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001712:	f003 fe15 	bl	8005340 <HAL_PWREx_EnableOverDrive>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800171c:	f000 fd18 	bl	8002150 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	63fb      	str	r3, [r7, #60]	; 0x3c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800172c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001730:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001732:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001736:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001738:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800173c:	2105      	movs	r1, #5
 800173e:	4618      	mov	r0, r3
 8001740:	f004 f8be 	bl	80058c0 <HAL_RCC_ClockConfig>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800174a:	f000 fd01 	bl	8002150 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800174e:	2320      	movs	r3, #32
 8001750:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001752:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001756:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4618      	mov	r0, r3
 800175e:	f004 fa7b 	bl	8005c58 <HAL_RCCEx_PeriphCLKConfig>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <SystemClock_Config+0x100>
  {
    Error_Handler();
 8001768:	f000 fcf2 	bl	8002150 <Error_Handler>
  }
}
 800176c:	bf00      	nop
 800176e:	3780      	adds	r7, #128	; 0x80
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40023800 	.word	0x40023800
 8001778:	40007000 	.word	0x40007000
 800177c:	00000000 	.word	0x00000000

08001780 <initializations>:

/* USER CODE BEGIN 4 */
void initializations(void){
 8001780:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001784:	af00      	add	r7, sp, #0
	// Calculating total steps to be taken by factoring in gear ratio and micro stepping.
	TotalStepsPerCycle = TotalStepsPerCycle*microStep*gearRatio;
 8001786:	4b6c      	ldr	r3, [pc, #432]	; (8001938 <initializations+0x1b8>)
 8001788:	881b      	ldrh	r3, [r3, #0]
 800178a:	011b      	lsls	r3, r3, #4
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fe81 	bl	8000494 <__aeabi_i2d>
 8001792:	a367      	add	r3, pc, #412	; (adr r3, 8001930 <initializations+0x1b0>)
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f7fe fee6 	bl	8000568 <__aeabi_dmul>
 800179c:	4603      	mov	r3, r0
 800179e:	460c      	mov	r4, r1
 80017a0:	4618      	mov	r0, r3
 80017a2:	4621      	mov	r1, r4
 80017a4:	f7ff f8f2 	bl	800098c <__aeabi_d2uiz>
 80017a8:	4603      	mov	r3, r0
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	4b62      	ldr	r3, [pc, #392]	; (8001938 <initializations+0x1b8>)
 80017ae:	801a      	strh	r2, [r3, #0]
	StepsHalfCycle = TotalStepsPerCycle/2;
 80017b0:	4b61      	ldr	r3, [pc, #388]	; (8001938 <initializations+0x1b8>)
 80017b2:	881b      	ldrh	r3, [r3, #0]
 80017b4:	085b      	lsrs	r3, r3, #1
 80017b6:	b29b      	uxth	r3, r3
 80017b8:	461a      	mov	r2, r3
 80017ba:	4b60      	ldr	r3, [pc, #384]	; (800193c <initializations+0x1bc>)
 80017bc:	601a      	str	r2, [r3, #0]
	RequiredStepsHalfCycle = (TotalStepsPerCycle*Vdes)/(Vmax*2);
 80017be:	4b5e      	ldr	r3, [pc, #376]	; (8001938 <initializations+0x1b8>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	461a      	mov	r2, r3
 80017c4:	4b5e      	ldr	r3, [pc, #376]	; (8001940 <initializations+0x1c0>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	fb03 f202 	mul.w	r2, r3, r2
 80017cc:	4b5d      	ldr	r3, [pc, #372]	; (8001944 <initializations+0x1c4>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	fb92 f3f3 	sdiv	r3, r2, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <initializations+0x1c8>)
 80017da:	601a      	str	r2, [r3, #0]

	// Setting up Inspiration and Expiration times, frequencies and the IE ratio.
	TotalCycleTime = 60/BPM;
 80017dc:	4b5b      	ldr	r3, [pc, #364]	; (800194c <initializations+0x1cc>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	233c      	movs	r3, #60	; 0x3c
 80017e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	4b59      	ldr	r3, [pc, #356]	; (8001950 <initializations+0x1d0>)
 80017ec:	601a      	str	r2, [r3, #0]
	InspTime = TotalCycleTime*(IEratio/(1+IEratio));
 80017ee:	4b58      	ldr	r3, [pc, #352]	; (8001950 <initializations+0x1d0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fe3e 	bl	8000474 <__aeabi_ui2d>
 80017f8:	4680      	mov	r8, r0
 80017fa:	4689      	mov	r9, r1
 80017fc:	4b55      	ldr	r3, [pc, #340]	; (8001954 <initializations+0x1d4>)
 80017fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001802:	4b54      	ldr	r3, [pc, #336]	; (8001954 <initializations+0x1d4>)
 8001804:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	4b52      	ldr	r3, [pc, #328]	; (8001958 <initializations+0x1d8>)
 800180e:	f7fe fcf5 	bl	80001fc <__adddf3>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4620      	mov	r0, r4
 8001818:	4629      	mov	r1, r5
 800181a:	f7fe ffcf 	bl	80007bc <__aeabi_ddiv>
 800181e:	4603      	mov	r3, r0
 8001820:	460c      	mov	r4, r1
 8001822:	461a      	mov	r2, r3
 8001824:	4623      	mov	r3, r4
 8001826:	4640      	mov	r0, r8
 8001828:	4649      	mov	r1, r9
 800182a:	f7fe fe9d 	bl	8000568 <__aeabi_dmul>
 800182e:	4603      	mov	r3, r0
 8001830:	460c      	mov	r4, r1
 8001832:	4618      	mov	r0, r3
 8001834:	4621      	mov	r1, r4
 8001836:	f7ff f8a9 	bl	800098c <__aeabi_d2uiz>
 800183a:	4602      	mov	r2, r0
 800183c:	4b47      	ldr	r3, [pc, #284]	; (800195c <initializations+0x1dc>)
 800183e:	601a      	str	r2, [r3, #0]
	ExpTime  = TotalCycleTime*(1/(1+IEratio));
 8001840:	4b43      	ldr	r3, [pc, #268]	; (8001950 <initializations+0x1d0>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe fe15 	bl	8000474 <__aeabi_ui2d>
 800184a:	4604      	mov	r4, r0
 800184c:	460d      	mov	r5, r1
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <initializations+0x1d4>)
 8001850:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	4b3f      	ldr	r3, [pc, #252]	; (8001958 <initializations+0x1d8>)
 800185a:	f7fe fccf 	bl	80001fc <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	493c      	ldr	r1, [pc, #240]	; (8001958 <initializations+0x1d8>)
 8001868:	f7fe ffa8 	bl	80007bc <__aeabi_ddiv>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4620      	mov	r0, r4
 8001872:	4629      	mov	r1, r5
 8001874:	f7fe fe78 	bl	8000568 <__aeabi_dmul>
 8001878:	4603      	mov	r3, r0
 800187a:	460c      	mov	r4, r1
 800187c:	4618      	mov	r0, r3
 800187e:	4621      	mov	r1, r4
 8001880:	f7ff f884 	bl	800098c <__aeabi_d2uiz>
 8001884:	4602      	mov	r2, r0
 8001886:	4b36      	ldr	r3, [pc, #216]	; (8001960 <initializations+0x1e0>)
 8001888:	601a      	str	r2, [r3, #0]
	InspFreq = RequiredStepsHalfCycle/InspTime;
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <initializations+0x1c8>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b33      	ldr	r3, [pc, #204]	; (800195c <initializations+0x1dc>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fbb2 f3f3 	udiv	r3, r2, r3
 8001896:	4a33      	ldr	r2, [pc, #204]	; (8001964 <initializations+0x1e4>)
 8001898:	6013      	str	r3, [r2, #0]
	ExpFreq  = RequiredStepsHalfCycle/ExpTime;
 800189a:	4b2b      	ldr	r3, [pc, #172]	; (8001948 <initializations+0x1c8>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b30      	ldr	r3, [pc, #192]	; (8001960 <initializations+0x1e0>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4a30      	ldr	r2, [pc, #192]	; (8001968 <initializations+0x1e8>)
 80018a8:	6013      	str	r3, [r2, #0]
	ExpPSC   = ((float)clockFreq/counterPeriod)/ExpFreq;
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <initializations+0x1e8>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	ee07 3a90 	vmov	s15, r3
 80018b2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018b6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800196c <initializations+0x1ec>
 80018ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018c2:	ee17 2a90 	vmov	r2, s15
 80018c6:	4b2a      	ldr	r3, [pc, #168]	; (8001970 <initializations+0x1f0>)
 80018c8:	601a      	str	r2, [r3, #0]
	InspPSC  = ((float)clockFreq/counterPeriod)/InspFreq;
 80018ca:	4b26      	ldr	r3, [pc, #152]	; (8001964 <initializations+0x1e4>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	ee07 3a90 	vmov	s15, r3
 80018d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018d6:	eddf 6a25 	vldr	s13, [pc, #148]	; 800196c <initializations+0x1ec>
 80018da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018e2:	ee17 2a90 	vmov	r2, s15
 80018e6:	4b23      	ldr	r3, [pc, #140]	; (8001974 <initializations+0x1f4>)
 80018e8:	601a      	str	r2, [r3, #0]

	// Initializing pinch valves
	HAL_GPIO_WritePin(Pinch1_GPIO_Port, Pinch1_Pin, 0);
 80018ea:	2200      	movs	r2, #0
 80018ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018f0:	4821      	ldr	r0, [pc, #132]	; (8001978 <initializations+0x1f8>)
 80018f2:	f002 fcef 	bl	80042d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pinch2_GPIO_Port, Pinch2_Pin, 0);
 80018f6:	2200      	movs	r2, #0
 80018f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018fc:	481e      	ldr	r0, [pc, #120]	; (8001978 <initializations+0x1f8>)
 80018fe:	f002 fce9 	bl	80042d4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(Pinch3_GPIO_Port, Pinch3_Pin, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001908:	481b      	ldr	r0, [pc, #108]	; (8001978 <initializations+0x1f8>)
 800190a:	f002 fce3 	bl	80042d4 <HAL_GPIO_WritePin>
	// Power up flow sensor
	HAL_GPIO_WritePin(FlowPower_GPIO_Port, FlowPower_Pin, GPIO_PIN_SET);
 800190e:	2201      	movs	r2, #1
 8001910:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001914:	4819      	ldr	r0, [pc, #100]	; (800197c <initializations+0x1fc>)
 8001916:	f002 fcdd 	bl	80042d4 <HAL_GPIO_WritePin>

	// Initializing I2C
	// Sensirion Flow sensor
	sfm3000initFlow();
 800191a:	f000 fc5d 	bl	80021d8 <sfm3000initFlow>

	// Initialize RS485 to tx
	HAL_GPIO_WritePin(UART_RSE_GPIO_Port,UART_RSE_Pin, GPIO_PIN_SET); // Toggle RSE pin to send message over RS485
 800191e:	2201      	movs	r2, #1
 8001920:	2110      	movs	r1, #16
 8001922:	4817      	ldr	r0, [pc, #92]	; (8001980 <initializations+0x200>)
 8001924:	f002 fcd6 	bl	80042d4 <HAL_GPIO_WritePin>

	// Initialize interrupts
//	HAL_TIM_Base_Start_IT(&htim3);
}
 8001928:	bf00      	nop
 800192a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800192e:	bf00      	nop
 8001930:	9999999a 	.word	0x9999999a
 8001934:	3ff99999 	.word	0x3ff99999
 8001938:	20000000 	.word	0x20000000
 800193c:	20000270 	.word	0x20000270
 8001940:	20000011 	.word	0x20000011
 8001944:	20000010 	.word	0x20000010
 8001948:	2000026c 	.word	0x2000026c
 800194c:	20000002 	.word	0x20000002
 8001950:	20000278 	.word	0x20000278
 8001954:	20000008 	.word	0x20000008
 8001958:	3ff00000 	.word	0x3ff00000
 800195c:	200002cc 	.word	0x200002cc
 8001960:	200002e8 	.word	0x200002e8
 8001964:	20000268 	.word	0x20000268
 8001968:	200002c8 	.word	0x200002c8
 800196c:	49dbba00 	.word	0x49dbba00
 8001970:	20000260 	.word	0x20000260
 8001974:	200002bc 	.word	0x200002bc
 8001978:	40020400 	.word	0x40020400
 800197c:	40021400 	.word	0x40021400
 8001980:	40020c00 	.word	0x40020c00

08001984 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback( uint16_t GPIO_Pin){
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b087      	sub	sp, #28
 8001988:	af02      	add	r7, sp, #8
 800198a:	4603      	mov	r3, r0
 800198c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin){
 800198e:	88fb      	ldrh	r3, [r7, #6]
 8001990:	2b40      	cmp	r3, #64	; 0x40
 8001992:	d003      	beq.n	800199c <HAL_GPIO_EXTI_Callback+0x18>
 8001994:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001998:	d03f      	beq.n	8001a1a <HAL_GPIO_EXTI_Callback+0x96>
				  state = 0;
				  break;
		  }
		  break;
	}
}
 800199a:	e078      	b.n	8001a8e <HAL_GPIO_EXTI_Callback+0x10a>
		  if(HAL_GPIO_ReadPin(TMCL_Stage_GPIO_Port, TMCL_Stage_Pin))
 800199c:	2140      	movs	r1, #64	; 0x40
 800199e:	483e      	ldr	r0, [pc, #248]	; (8001a98 <HAL_GPIO_EXTI_Callback+0x114>)
 80019a0:	f002 fc80 	bl	80042a4 <HAL_GPIO_ReadPin>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d012      	beq.n	80019d0 <HAL_GPIO_EXTI_Callback+0x4c>
			  	HAL_GPIO_WritePin(Pinch1_GPIO_Port, Pinch1_Pin, 0);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019b0:	483a      	ldr	r0, [pc, #232]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x118>)
 80019b2:	f002 fc8f 	bl	80042d4 <HAL_GPIO_WritePin>
			  	HAL_GPIO_WritePin(Pinch2_GPIO_Port, Pinch2_Pin, GPIO_PIN_SET);
 80019b6:	2201      	movs	r2, #1
 80019b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019bc:	4837      	ldr	r0, [pc, #220]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x118>)
 80019be:	f002 fc89 	bl	80042d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Pinch3_GPIO_Port, Pinch3_Pin, GPIO_PIN_SET);
 80019c2:	2201      	movs	r2, #1
 80019c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019c8:	4834      	ldr	r0, [pc, #208]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x118>)
 80019ca:	f002 fc83 	bl	80042d4 <HAL_GPIO_WritePin>
 80019ce:	e01b      	b.n	8001a08 <HAL_GPIO_EXTI_Callback+0x84>
			  	HAL_GPIO_WritePin(Pinch1_GPIO_Port, Pinch1_Pin, GPIO_PIN_SET);
 80019d0:	2201      	movs	r2, #1
 80019d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80019d6:	4831      	ldr	r0, [pc, #196]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x118>)
 80019d8:	f002 fc7c 	bl	80042d4 <HAL_GPIO_WritePin>
				for(int i = 4000000;i>0;i--){
 80019dc:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_GPIO_EXTI_Callback+0x11c>)
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	e003      	b.n	80019ea <HAL_GPIO_EXTI_Callback+0x66>
					__NOP();
 80019e2:	bf00      	nop
				for(int i = 4000000;i>0;i--){
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	dcf8      	bgt.n	80019e2 <HAL_GPIO_EXTI_Callback+0x5e>
				HAL_GPIO_WritePin(Pinch2_GPIO_Port, Pinch2_Pin, 0);
 80019f0:	2200      	movs	r2, #0
 80019f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80019f6:	4829      	ldr	r0, [pc, #164]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x118>)
 80019f8:	f002 fc6c 	bl	80042d4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(Pinch3_GPIO_Port, Pinch3_Pin, 0);
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a02:	4826      	ldr	r0, [pc, #152]	; (8001a9c <HAL_GPIO_EXTI_Callback+0x118>)
 8001a04:	f002 fc66 	bl	80042d4 <HAL_GPIO_WritePin>
		  TidalVolume[0] = 0;
 8001a08:	4b26      	ldr	r3, [pc, #152]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
		  TidalVolume[1] = 0;
 8001a10:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <HAL_GPIO_EXTI_Callback+0x120>)
 8001a12:	f04f 0200 	mov.w	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
		break;
 8001a18:	e039      	b.n	8001a8e <HAL_GPIO_EXTI_Callback+0x10a>
		  switch(state){
 8001a1a:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d013      	beq.n	8001a4a <HAL_GPIO_EXTI_Callback+0xc6>
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d02a      	beq.n	8001a7c <HAL_GPIO_EXTI_Callback+0xf8>
		  break;
 8001a26:	e031      	b.n	8001a8c <HAL_GPIO_EXTI_Callback+0x108>
					  TMCL_UART_Message(motorAddress,SGP,TMCLstate,Bank2,1);
 8001a28:	4b20      	ldr	r3, [pc, #128]	; (8001aac <HAL_GPIO_EXTI_Callback+0x128>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	b2d8      	uxtb	r0, r3
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	b2d9      	uxtb	r1, r3
 8001a34:	4b1f      	ldr	r3, [pc, #124]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x134>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	b2dc      	uxtb	r4, r3
 8001a40:	2301      	movs	r3, #1
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4623      	mov	r3, r4
 8001a46:	f000 f8ab 	bl	8001ba0 <TMCL_UART_Message>
				  while(TMCL_rx_buff[8] != 1){
 8001a4a:	4b1c      	ldr	r3, [pc, #112]	; (8001abc <HAL_GPIO_EXTI_Callback+0x138>)
 8001a4c:	7a1b      	ldrb	r3, [r3, #8]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d1ea      	bne.n	8001a28 <HAL_GPIO_EXTI_Callback+0xa4>
				  state = 1;
 8001a52:	4b15      	ldr	r3, [pc, #84]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
				  break;
 8001a58:	e018      	b.n	8001a8c <HAL_GPIO_EXTI_Callback+0x108>
				   TMCL_UART_Message(motorAddress,SGP,TMCLstate,Bank2,0);
 8001a5a:	4b14      	ldr	r3, [pc, #80]	; (8001aac <HAL_GPIO_EXTI_Callback+0x128>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b2d8      	uxtb	r0, r3
 8001a60:	4b13      	ldr	r3, [pc, #76]	; (8001ab0 <HAL_GPIO_EXTI_Callback+0x12c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	b2d9      	uxtb	r1, r3
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_GPIO_EXTI_Callback+0x130>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x134>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	b2dc      	uxtb	r4, r3
 8001a72:	2300      	movs	r3, #0
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	4623      	mov	r3, r4
 8001a78:	f000 f892 	bl	8001ba0 <TMCL_UART_Message>
				  while(TMCL_rx_buff[8] != 0){
 8001a7c:	4b0f      	ldr	r3, [pc, #60]	; (8001abc <HAL_GPIO_EXTI_Callback+0x138>)
 8001a7e:	7a1b      	ldrb	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ea      	bne.n	8001a5a <HAL_GPIO_EXTI_Callback+0xd6>
				  state = 0;
 8001a84:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_GPIO_EXTI_Callback+0x124>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
				  break;
 8001a8a:	bf00      	nop
		  break;
 8001a8c:	bf00      	nop
}
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd90      	pop	{r4, r7, pc}
 8001a96:	bf00      	nop
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40020400 	.word	0x40020400
 8001aa0:	003d0900 	.word	0x003d0900
 8001aa4:	200000d0 	.word	0x200000d0
 8001aa8:	20000048 	.word	0x20000048
 8001aac:	20000014 	.word	0x20000014
 8001ab0:	2000001c 	.word	0x2000001c
 8001ab4:	2000004c 	.word	0x2000004c
 8001ab8:	20000018 	.word	0x20000018
 8001abc:	20000074 	.word	0x20000074

08001ac0 <IntegrationForVolume>:
void IntegrationForVolume(float deltaFlow, float deltaTime,	float FlowSensirion[20], float TidalVolume[2]) {
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b084      	sub	sp, #16
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	ed87 0a03 	vstr	s0, [r7, #12]
 8001acc:	edc7 0a02 	vstr	s1, [r7, #8]
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	6039      	str	r1, [r7, #0]
	// Trapeziodal integration method
	// volume(t=1)"L"   = volume(t=0)"L" + (deltaTime)"min"              *(deltaFlow)"lpm"
	// volume(t=1)"mil" = volume(t=0)"L" + (deltaTime)"sec" *(1/60)"min" *(deltaFlow)"lpm" *(1000)"litres"

	TidalVolume[0] = TidalVolume[1] + (deltaTime /*s*/ *0.01666)/*min*/*((FlowSensirion[1] - FlowSensirion[0])*(0.5) + FlowSensirion[1])/*l*/*1000/*mil*/;   // Tidal Volume in L
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fcec 	bl	80004b8 <__aeabi_f2d>
 8001ae0:	4604      	mov	r4, r0
 8001ae2:	460d      	mov	r5, r1
 8001ae4:	68b8      	ldr	r0, [r7, #8]
 8001ae6:	f7fe fce7 	bl	80004b8 <__aeabi_f2d>
 8001aea:	a32b      	add	r3, pc, #172	; (adr r3, 8001b98 <IntegrationForVolume+0xd8>)
 8001aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af0:	f7fe fd3a 	bl	8000568 <__aeabi_dmul>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4690      	mov	r8, r2
 8001afa:	4699      	mov	r9, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3304      	adds	r3, #4
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b0e:	ee17 0a90 	vmov	r0, s15
 8001b12:	f7fe fcd1 	bl	80004b8 <__aeabi_f2d>
 8001b16:	f04f 0200 	mov.w	r2, #0
 8001b1a:	4b1d      	ldr	r3, [pc, #116]	; (8001b90 <IntegrationForVolume+0xd0>)
 8001b1c:	f7fe fd24 	bl	8000568 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4692      	mov	sl, r2
 8001b26:	469b      	mov	fp, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7fe fcc2 	bl	80004b8 <__aeabi_f2d>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4650      	mov	r0, sl
 8001b3a:	4659      	mov	r1, fp
 8001b3c:	f7fe fb5e 	bl	80001fc <__adddf3>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4640      	mov	r0, r8
 8001b46:	4649      	mov	r1, r9
 8001b48:	f7fe fd0e 	bl	8000568 <__aeabi_dmul>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4610      	mov	r0, r2
 8001b52:	4619      	mov	r1, r3
 8001b54:	f04f 0200 	mov.w	r2, #0
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <IntegrationForVolume+0xd4>)
 8001b5a:	f7fe fd05 	bl	8000568 <__aeabi_dmul>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	460b      	mov	r3, r1
 8001b62:	4620      	mov	r0, r4
 8001b64:	4629      	mov	r1, r5
 8001b66:	f7fe fb49 	bl	80001fc <__adddf3>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	4618      	mov	r0, r3
 8001b70:	4621      	mov	r1, r4
 8001b72:	f7fe ff2b 	bl	80009cc <__aeabi_d2f>
 8001b76:	4602      	mov	r2, r0
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	601a      	str	r2, [r3, #0]
	TidalVolume[1] = TidalVolume[0];
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	3304      	adds	r3, #4
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	601a      	str	r2, [r3, #0]
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b90:	3fe00000 	.word	0x3fe00000
 8001b94:	408f4000 	.word	0x408f4000
 8001b98:	ac9afe1e 	.word	0xac9afe1e
 8001b9c:	3f910f51 	.word	0x3f910f51

08001ba0 <TMCL_UART_Message>:

void TMCL_UART_Message(uint8_t moduleAddress,uint8_t commandNumber,uint8_t commandType,uint8_t motorNumber,uint32_t commandValue){
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	4608      	mov	r0, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4623      	mov	r3, r4
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	71bb      	strb	r3, [r7, #6]
 8001bb6:	460b      	mov	r3, r1
 8001bb8:	717b      	strb	r3, [r7, #5]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	713b      	strb	r3, [r7, #4]

	// Breaking a 32 bit value into 8 byte values.
	uint32_t ValueByte0 = ((commandValue >> 24) & 0xFF) ;
 8001bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc0:	0e1b      	lsrs	r3, r3, #24
 8001bc2:	617b      	str	r3, [r7, #20]
	uint32_t ValueByte1 = ((commandValue >> 16) & 0xFF) ;
 8001bc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bc6:	0c1b      	lsrs	r3, r3, #16
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	613b      	str	r3, [r7, #16]
	uint32_t ValueByte2 = ((commandValue >> 8 ) & 0XFF);
 8001bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bce:	0a1b      	lsrs	r3, r3, #8
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	60fb      	str	r3, [r7, #12]
	uint32_t ValueByte3 = (commandValue & 0XFF);
 8001bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	60bb      	str	r3, [r7, #8]

	// TMCL Command Format
	TMCL_tx_buff[0] = moduleAddress;          // Module address
 8001bda:	4a29      	ldr	r2, [pc, #164]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	7013      	strb	r3, [r2, #0]
	TMCL_tx_buff[1] = commandNumber; 	      // Command number
 8001be0:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001be2:	79bb      	ldrb	r3, [r7, #6]
 8001be4:	7053      	strb	r3, [r2, #1]
	TMCL_tx_buff[2] = commandType;            // Type number
 8001be6:	4a26      	ldr	r2, [pc, #152]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001be8:	797b      	ldrb	r3, [r7, #5]
 8001bea:	7093      	strb	r3, [r2, #2]
	TMCL_tx_buff[3] = motorNumber; 		      // Motor or bank number
 8001bec:	4a24      	ldr	r2, [pc, #144]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001bee:	793b      	ldrb	r3, [r7, #4]
 8001bf0:	70d3      	strb	r3, [r2, #3]
	TMCL_tx_buff[4] = ValueByte0; 	          // Value byte 1 (MSB first)
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	4b22      	ldr	r3, [pc, #136]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001bf8:	711a      	strb	r2, [r3, #4]
	TMCL_tx_buff[5] = ValueByte1;		      // Value byte 2
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001c00:	715a      	strb	r2, [r3, #5]
	TMCL_tx_buff[6] = ValueByte2;      		  // Value byte 3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	b2da      	uxtb	r2, r3
 8001c06:	4b1e      	ldr	r3, [pc, #120]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001c08:	719a      	strb	r2, [r3, #6]
	TMCL_tx_buff[7] = ValueByte3;        	  // Value byte 4
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001c10:	71da      	strb	r2, [r3, #7]
	TMCL_tx_buff[8] = CheckSum(TMCL_tx_buff); // Checksum
 8001c12:	481b      	ldr	r0, [pc, #108]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001c14:	f000 f99c 	bl	8001f50 <CheckSum>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001c1e:	721a      	strb	r2, [r3, #8]

	HAL_UART_Transmit(&huart2, TMCL_tx_buff, TMCLtxBufferSize,1); 	// Send message
 8001c20:	2301      	movs	r3, #1
 8001c22:	2209      	movs	r2, #9
 8001c24:	4916      	ldr	r1, [pc, #88]	; (8001c80 <TMCL_UART_Message+0xe0>)
 8001c26:	4817      	ldr	r0, [pc, #92]	; (8001c84 <TMCL_UART_Message+0xe4>)
 8001c28:	f004 fbd1 	bl	80063ce <HAL_UART_Transmit>
	for(int i = 1000;i>0;i--){
 8001c2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c30:	61fb      	str	r3, [r7, #28]
 8001c32:	e003      	b.n	8001c3c <TMCL_UART_Message+0x9c>
		__NOP();
 8001c34:	bf00      	nop
	for(int i = 1000;i>0;i--){
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	dcf8      	bgt.n	8001c34 <TMCL_UART_Message+0x94>
	}
	HAL_GPIO_WritePin(UART_RSE_GPIO_Port,UART_RSE_Pin , 0);		    // Toggle RSE pin to recieve message over RS485
 8001c42:	2200      	movs	r2, #0
 8001c44:	2110      	movs	r1, #16
 8001c46:	4810      	ldr	r0, [pc, #64]	; (8001c88 <TMCL_UART_Message+0xe8>)
 8001c48:	f002 fb44 	bl	80042d4 <HAL_GPIO_WritePin>
	HAL_UART_Receive(&huart2, TMCL_rx_buff, TMCLrxBufferSize,1);   // Receive reply
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	2209      	movs	r2, #9
 8001c50:	490e      	ldr	r1, [pc, #56]	; (8001c8c <TMCL_UART_Message+0xec>)
 8001c52:	480c      	ldr	r0, [pc, #48]	; (8001c84 <TMCL_UART_Message+0xe4>)
 8001c54:	f004 fc54 	bl	8006500 <HAL_UART_Receive>
	for(int i = 16000;i>0;i--){
 8001c58:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8001c5c:	61bb      	str	r3, [r7, #24]
 8001c5e:	e003      	b.n	8001c68 <TMCL_UART_Message+0xc8>
		__NOP();
 8001c60:	bf00      	nop
	for(int i = 16000;i>0;i--){
 8001c62:	69bb      	ldr	r3, [r7, #24]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	61bb      	str	r3, [r7, #24]
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	dcf8      	bgt.n	8001c60 <TMCL_UART_Message+0xc0>
	}
	HAL_GPIO_WritePin(UART_RSE_GPIO_Port,UART_RSE_Pin , 1);		    // Toggle RSE pin to recieve message over RS485
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2110      	movs	r1, #16
 8001c72:	4805      	ldr	r0, [pc, #20]	; (8001c88 <TMCL_UART_Message+0xe8>)
 8001c74:	f002 fb2e 	bl	80042d4 <HAL_GPIO_WritePin>
	//		TMCL_rx_buff[4] = ; // Value byte 1 (MSB first)
	//		TMCL_rx_buff[5] = ; // Value byte 2
	//		TMCL_rx_buff[6] = ; // Value byte 3
	//		TMCL_rx_buff[7] = ; // Value byte 4
	//      TMCL_rx_buff[8] = CheckSum;
}
 8001c78:	bf00      	nop
 8001c7a:	3724      	adds	r7, #36	; 0x24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}
 8001c80:	20000068 	.word	0x20000068
 8001c84:	2000050c 	.word	0x2000050c
 8001c88:	40020c00 	.word	0x40020c00
 8001c8c:	20000074 	.word	0x20000074

08001c90 <SensirionFlowSensor>:
void SensirionFlowSensor(uint8_t FlowBuffer[3], float FlowSensirion[20], float deltaFlow, float FlowSensirionTotal) {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	60b9      	str	r1, [r7, #8]
 8001c9a:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c9e:	edc7 0a00 	vstr	s1, [r7]
	// Reading in from Sensirion flow sensor
	HAL_I2C_Master_Receive(SFM3000_I2C_INS, SFM3000_I2C_ADDRESS, FlowBuffer,
 8001ca2:	23ff      	movs	r3, #255	; 0xff
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	2180      	movs	r1, #128	; 0x80
 8001cac:	4825      	ldr	r0, [pc, #148]	; (8001d44 <SensirionFlowSensor+0xb4>)
 8001cae:	f002 fd79 	bl	80047a4 <HAL_I2C_Master_Receive>
			SFM3000_READ_DATA_SIZE, 0xFF);
	// Creating an array with previous flow values
	for (int i = 7; i > 0; i--) {
 8001cb2:	2307      	movs	r3, #7
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	e00f      	b.n	8001cd8 <SensirionFlowSensor+0x48>
		FlowSensirion[i] = FlowSensirion[i - 1];
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	441a      	add	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	68b9      	ldr	r1, [r7, #8]
 8001ccc:	440b      	add	r3, r1
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	601a      	str	r2, [r3, #0]
	for (int i = 7; i > 0; i--) {
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	dcec      	bgt.n	8001cb8 <SensirionFlowSensor+0x28>
	}
	// Updating flow latest value
	FlowSensirion[0] = ((((float) ((FlowBuffer[0] << 8) | FlowBuffer[1])) - SFM3000_OFFSET_PARAMETER ) / SFM3000_SCALE_PARAMETER ); // Calculate flow from sensor output
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	021b      	lsls	r3, r3, #8
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	3201      	adds	r2, #1
 8001ce8:	7812      	ldrb	r2, [r2, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	ee07 3a90 	vmov	s15, r3
 8001cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cf4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001d48 <SensirionFlowSensor+0xb8>
 8001cf8:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8001cfc:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001d4c <SensirionFlowSensor+0xbc>
 8001d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	edc3 7a00 	vstr	s15, [r3]
	// Check for large change in Flow possibly caused by noise.
	deltaFlow = FlowSensirion[1] - FlowSensirion[0]; //Calculate change in flow
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	ed93 7a00 	vldr	s14, [r3]
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	edd3 7a00 	vldr	s15, [r3]
 8001d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d1c:	edc7 7a01 	vstr	s15, [r7, #4]
//		// Flow at this point is in slm.
//		FlowSensirion[0] = FlowSensirion[1]; // If it is let current flow val = previous flow val
//	}
	// Check to see if this is the standard method.
	// Check to see if flow sensor requires reset
	if (FlowSensirion[0] == FlowSensirion[1]) {
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	ed93 7a00 	vldr	s14, [r3]
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d36:	d101      	bne.n	8001d3c <SensirionFlowSensor+0xac>
		// Initialize sensirion flow sensor
		sfm3000initFlow();
 8001d38:	f000 fa4e 	bl	80021d8 <sfm3000initFlow>

	//		int filterValue = 2;
	//		for(int i = 2; i>= 0; i ++){
	//			FlowSensirionTotal = FlowSensirionTotal + FlowSensirion[i];
	//		}
}
 8001d3c:	bf00      	nop
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	2000020c 	.word	0x2000020c
 8001d48:	46fa0000 	.word	0x46fa0000
 8001d4c:	430c0000 	.word	0x430c0000

08001d50 <UARTSendDMA>:
void UARTSendDMA(uint8_t eightBitResult[4], float pressure,	uint8_t HMI_tx_buff[HMIBufferSize], float FlowSensirion[20],float TidalVolume[2], uint8_t HMI_rx_buff[HMIBufferSize]) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6178      	str	r0, [r7, #20]
 8001d58:	ed87 0a04 	vstr	s0, [r7, #16]
 8001d5c:	60f9      	str	r1, [r7, #12]
 8001d5e:	60ba      	str	r2, [r7, #8]
 8001d60:	607b      	str	r3, [r7, #4]
	// Pressure value for comms
	CTBVTFEBV(eightBitResult, (uint16_t) pressure);
 8001d62:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d6a:	ee17 3a90 	vmov	r3, s15
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	4619      	mov	r1, r3
 8001d72:	6978      	ldr	r0, [r7, #20]
 8001d74:	f000 f85e 	bl	8001e34 <CTBVTFEBV>
	HMI_tx_buff[0] = eightBitResult[0];
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	701a      	strb	r2, [r3, #0]
	HMI_tx_buff[1] = eightBitResult[1];
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	3301      	adds	r3, #1
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	7852      	ldrb	r2, [r2, #1]
 8001d88:	701a      	strb	r2, [r3, #0]
	if (FlowSensirion[0] < 0) {
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d98:	d512      	bpl.n	8001dc0 <UARTSendDMA+0x70>
		HMI_tx_buff[2] = (-1) * FlowSensirion[0];
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	edd3 7a00 	vldr	s15, [r3]
 8001da0:	eef1 7a67 	vneg.f32	s15, s15
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	3302      	adds	r3, #2
 8001da8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dac:	edc7 7a00 	vstr	s15, [r7]
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	b2d2      	uxtb	r2, r2
 8001db4:	701a      	strb	r2, [r3, #0]
		HMI_tx_buff[3] = 1;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	3303      	adds	r3, #3
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
 8001dbe:	e00f      	b.n	8001de0 <UARTSendDMA+0x90>
	} else {
		HMI_tx_buff[2] = FlowSensirion[0];
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	3302      	adds	r3, #2
 8001dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dce:	edc7 7a00 	vstr	s15, [r7]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	701a      	strb	r2, [r3, #0]
		HMI_tx_buff[3] = 0;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	3303      	adds	r3, #3
 8001ddc:	2200      	movs	r2, #0
 8001dde:	701a      	strb	r2, [r3, #0]
	}
	// Volume for comms
	CTBVTFEBV(eightBitResult, (uint16_t) TidalVolume[0]);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001dea:	ee17 3a90 	vmov	r3, s15
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	4619      	mov	r1, r3
 8001df2:	6978      	ldr	r0, [r7, #20]
 8001df4:	f000 f81e 	bl	8001e34 <CTBVTFEBV>
	HMI_tx_buff[4] = eightBitResult[0];
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	697a      	ldr	r2, [r7, #20]
 8001dfe:	7812      	ldrb	r2, [r2, #0]
 8001e00:	701a      	strb	r2, [r3, #0]
	HMI_tx_buff[5] = eightBitResult[1];
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	3305      	adds	r3, #5
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	7852      	ldrb	r2, [r2, #1]
 8001e0a:	701a      	strb	r2, [r3, #0]
	HMI_tx_buff[11] = 255; // Good message check
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	330b      	adds	r3, #11
 8001e10:	22ff      	movs	r2, #255	; 0xff
 8001e12:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart1, HMI_tx_buff, HMIBufferSize); // Send
 8001e14:	220c      	movs	r2, #12
 8001e16:	68f9      	ldr	r1, [r7, #12]
 8001e18:	4805      	ldr	r0, [pc, #20]	; (8001e30 <UARTSendDMA+0xe0>)
 8001e1a:	f004 fc17 	bl	800664c <HAL_UART_Transmit_DMA>
	HAL_UART_Receive_DMA(&huart1, HMI_rx_buff, HMIBufferSize); // Receive
 8001e1e:	220c      	movs	r2, #12
 8001e20:	6a39      	ldr	r1, [r7, #32]
 8001e22:	4803      	ldr	r0, [pc, #12]	; (8001e30 <UARTSendDMA+0xe0>)
 8001e24:	f004 fc7e 	bl	8006724 <HAL_UART_Receive_DMA>
}
 8001e28:	bf00      	nop
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	200004cc 	.word	0x200004cc

08001e34 <CTBVTFEBV>:
void CTBVTFEBV(uint8_t *eightBitresult,uint32_t value){  //Convert a 32 bit value to 4 bytes
 8001e34:	b480      	push	{r7}
 8001e36:	b087      	sub	sp, #28
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
	uint8_t eightBitpart1 = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	75fb      	strb	r3, [r7, #23]
	uint8_t eightBitpart2 = 0;
 8001e42:	2300      	movs	r3, #0
 8001e44:	75bb      	strb	r3, [r7, #22]
	uint8_t eightBitpart3 = 0;
 8001e46:	2300      	movs	r3, #0
 8001e48:	757b      	strb	r3, [r7, #21]
	uint8_t eightBitpart4 = 0;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	753b      	strb	r3, [r7, #20]
	int counter = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	613b      	str	r3, [r7, #16]
    int digit;

	while (value > 0) {
 8001e52:	e063      	b.n	8001f1c <CTBVTFEBV+0xe8>
	 digit = value % 10;
 8001e54:	6839      	ldr	r1, [r7, #0]
 8001e56:	4b3d      	ldr	r3, [pc, #244]	; (8001f4c <CTBVTFEBV+0x118>)
 8001e58:	fba3 2301 	umull	r2, r3, r3, r1
 8001e5c:	08da      	lsrs	r2, r3, #3
 8001e5e:	4613      	mov	r3, r2
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	4413      	add	r3, r2
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	1aca      	subs	r2, r1, r3
 8001e68:	60fa      	str	r2, [r7, #12]
	 switch(counter){
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	2b07      	cmp	r3, #7
 8001e6e:	d84b      	bhi.n	8001f08 <CTBVTFEBV+0xd4>
 8001e70:	a201      	add	r2, pc, #4	; (adr r2, 8001e78 <CTBVTFEBV+0x44>)
 8001e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e76:	bf00      	nop
 8001e78:	08001e99 	.word	0x08001e99
 8001e7c:	08001e9f 	.word	0x08001e9f
 8001e80:	08001eb5 	.word	0x08001eb5
 8001e84:	08001ebb 	.word	0x08001ebb
 8001e88:	08001ed1 	.word	0x08001ed1
 8001e8c:	08001ed7 	.word	0x08001ed7
 8001e90:	08001eed 	.word	0x08001eed
 8001e94:	08001ef3 	.word	0x08001ef3
		 case 0:
			 eightBitpart1 = digit;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	75fb      	strb	r3, [r7, #23]
	 	 	 break;
 8001e9c:	e035      	b.n	8001f0a <CTBVTFEBV+0xd6>
		 case 1:
			 eightBitpart1 = eightBitpart1 + digit*10 ;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	0092      	lsls	r2, r2, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	005b      	lsls	r3, r3, #1
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	7dfb      	ldrb	r3, [r7, #23]
 8001eae:	4413      	add	r3, r2
 8001eb0:	75fb      	strb	r3, [r7, #23]
	 	 	 break;
 8001eb2:	e02a      	b.n	8001f0a <CTBVTFEBV+0xd6>
		 case 2:
			 eightBitpart2 = digit;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	75bb      	strb	r3, [r7, #22]
	 	 	 break;
 8001eb8:	e027      	b.n	8001f0a <CTBVTFEBV+0xd6>
		 case 3:
			 eightBitpart2 = eightBitpart2 + digit*10;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	b2db      	uxtb	r3, r3
 8001ebe:	461a      	mov	r2, r3
 8001ec0:	0092      	lsls	r2, r2, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	005b      	lsls	r3, r3, #1
 8001ec6:	b2da      	uxtb	r2, r3
 8001ec8:	7dbb      	ldrb	r3, [r7, #22]
 8001eca:	4413      	add	r3, r2
 8001ecc:	75bb      	strb	r3, [r7, #22]
	 	 	 break;
 8001ece:	e01c      	b.n	8001f0a <CTBVTFEBV+0xd6>
		 case 4:
			 eightBitpart3 = digit;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	757b      	strb	r3, [r7, #21]
	 	 	 break;
 8001ed4:	e019      	b.n	8001f0a <CTBVTFEBV+0xd6>
		 case 5:
			 eightBitpart3 = eightBitpart3 + digit*10 ;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	461a      	mov	r2, r3
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	7d7b      	ldrb	r3, [r7, #21]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	757b      	strb	r3, [r7, #21]
	 	 	 break;
 8001eea:	e00e      	b.n	8001f0a <CTBVTFEBV+0xd6>
		 case 6:
			 eightBitpart4 = digit;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	753b      	strb	r3, [r7, #20]
	 	 	 break;
 8001ef0:	e00b      	b.n	8001f0a <CTBVTFEBV+0xd6>
		 case 7:
			 eightBitpart4 = eightBitpart3 + digit*10;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	0092      	lsls	r2, r2, #2
 8001efa:	4413      	add	r3, r2
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	7d7b      	ldrb	r3, [r7, #21]
 8001f02:	4413      	add	r3, r2
 8001f04:	753b      	strb	r3, [r7, #20]
	 	 	 break;
 8001f06:	e000      	b.n	8001f0a <CTBVTFEBV+0xd6>
		default:
		 	 break;
 8001f08:	bf00      	nop
	 }
	 counter ++;
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
	 value /= 10;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4a0e      	ldr	r2, [pc, #56]	; (8001f4c <CTBVTFEBV+0x118>)
 8001f14:	fba2 2303 	umull	r2, r3, r2, r3
 8001f18:	08db      	lsrs	r3, r3, #3
 8001f1a:	603b      	str	r3, [r7, #0]
	while (value > 0) {
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d198      	bne.n	8001e54 <CTBVTFEBV+0x20>
	}
	eightBitresult[0] = eightBitpart1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7dfa      	ldrb	r2, [r7, #23]
 8001f26:	701a      	strb	r2, [r3, #0]
	eightBitresult[1] = eightBitpart2;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	7dba      	ldrb	r2, [r7, #22]
 8001f2e:	701a      	strb	r2, [r3, #0]
	eightBitresult[2] = eightBitpart3;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3302      	adds	r3, #2
 8001f34:	7d7a      	ldrb	r2, [r7, #21]
 8001f36:	701a      	strb	r2, [r3, #0]
	eightBitresult[3] = eightBitpart4;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3303      	adds	r3, #3
 8001f3c:	7d3a      	ldrb	r2, [r7, #20]
 8001f3e:	701a      	strb	r2, [r3, #0]
}
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	cccccccd 	.word	0xcccccccd

08001f50 <CheckSum>:
uint8_t CheckSum(uint8_t CommandArray[]){
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
	uint8_t CheckSum = 0;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	73fb      	strb	r3, [r7, #15]

	for(int i = 0; i<8; i ++){
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	60bb      	str	r3, [r7, #8]
 8001f60:	e009      	b.n	8001f76 <CheckSum+0x26>
		CheckSum += CommandArray[i];
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	4413      	add	r3, r2
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	7bfb      	ldrb	r3, [r7, #15]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	73fb      	strb	r3, [r7, #15]
	for(int i = 0; i<8; i ++){
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3301      	adds	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2b07      	cmp	r3, #7
 8001f7a:	ddf2      	ble.n	8001f62 <CheckSum+0x12>
	}
	return CheckSum;
 8001f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3714      	adds	r7, #20
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <HoneyWellPressure>:
void HoneyWellPressure(uint8_t PressureBuffer[4], uint8_t StatusHoneywell,uint8_t PressureHoneywell, uint8_t TempHoneywell) {
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	b082      	sub	sp, #8
 8001f8e:	af00      	add	r7, sp, #0
 8001f90:	6078      	str	r0, [r7, #4]
 8001f92:	4608      	mov	r0, r1
 8001f94:	4611      	mov	r1, r2
 8001f96:	461a      	mov	r2, r3
 8001f98:	4603      	mov	r3, r0
 8001f9a:	70fb      	strb	r3, [r7, #3]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70bb      	strb	r3, [r7, #2]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	707b      	strb	r3, [r7, #1]
	// Reading in from Honeywell pressure sensor

	// *** fix this ***//
	I2C_read(0x28 << 1, 0x28 << 1, PressureBuffer, PressureBuffer);		  // Read in status
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	2150      	movs	r1, #80	; 0x50
 8001faa:	2050      	movs	r0, #80	; 0x50
 8001fac:	f000 f896 	bl	80020dc <I2C_read>
	StatusHoneywell = (PressureBuffer[0] & 0xc0);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fb8:	70fb      	strb	r3, [r7, #3]
	PressureHoneywell = (((PressureBuffer[0] << 8) | PressureBuffer[1])); // Read in Pressure
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	021b      	lsls	r3, r3, #8
 8001fc0:	b25a      	sxtb	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	b25b      	sxtb	r3, r3
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	b25b      	sxtb	r3, r3
 8001fce:	70bb      	strb	r3, [r7, #2]
	TempHoneywell = (((PressureBuffer[3] << 8) | PressureBuffer[4])); 	  // Read in Temperature
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b25a      	sxtb	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	3304      	adds	r3, #4
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	b25b      	sxtb	r3, r3
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	b25b      	sxtb	r3, r3
 8001fe6:	707b      	strb	r3, [r7, #1]
}
 8001fe8:	bf00      	nop
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	// Function that is called at the end of each ADC conversion.
	pressure = (((float)value_adc[0]*10)/(4096-2055)-10.0686)*10.1972;  // Pressure in kPa -> cm H2O
 8001ff8:	4b1b      	ldr	r3, [pc, #108]	; (8002068 <HAL_ADC_ConvCpltCallback+0x78>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	ee07 3a90 	vmov	s15, r3
 8002000:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002004:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002008:	ee67 7a87 	vmul.f32	s15, s15, s14
 800200c:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800206c <HAL_ADC_ConvCpltCallback+0x7c>
 8002010:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002014:	ee16 0a90 	vmov	r0, s13
 8002018:	f7fe fa4e 	bl	80004b8 <__aeabi_f2d>
 800201c:	a30e      	add	r3, pc, #56	; (adr r3, 8002058 <HAL_ADC_ConvCpltCallback+0x68>)
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f7fe f8e9 	bl	80001f8 <__aeabi_dsub>
 8002026:	4603      	mov	r3, r0
 8002028:	460c      	mov	r4, r1
 800202a:	4618      	mov	r0, r3
 800202c:	4621      	mov	r1, r4
 800202e:	a30c      	add	r3, pc, #48	; (adr r3, 8002060 <HAL_ADC_ConvCpltCallback+0x70>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe fa98 	bl	8000568 <__aeabi_dmul>
 8002038:	4603      	mov	r3, r0
 800203a:	460c      	mov	r4, r1
 800203c:	4618      	mov	r0, r3
 800203e:	4621      	mov	r1, r4
 8002040:	f7fe fcc4 	bl	80009cc <__aeabi_d2f>
 8002044:	4602      	mov	r2, r0
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_ADC_ConvCpltCallback+0x80>)
 8002048:	601a      	str	r2, [r3, #0]
	//pressure = value_adc[0];
	HAL_ADC_Stop_DMA(&hadc1);
 800204a:	480a      	ldr	r0, [pc, #40]	; (8002074 <HAL_ADC_ConvCpltCallback+0x84>)
 800204c:	f000 fede 	bl	8002e0c <HAL_ADC_Stop_DMA>
}
 8002050:	bf00      	nop
 8002052:	370c      	adds	r7, #12
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}
 8002058:	8a0902de 	.word	0x8a0902de
 800205c:	4024231f 	.word	0x4024231f
 8002060:	65fd8adb 	.word	0x65fd8adb
 8002064:	402464f7 	.word	0x402464f7
 8002068:	20000298 	.word	0x20000298
 800206c:	44ff2000 	.word	0x44ff2000
 8002070:	2000027c 	.word	0x2000027c
 8002074:	200000fc 	.word	0x200000fc

08002078 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
	//HAL_UART_DMAStop(&huart1);

	if(huart == &huart2){
	  //HAL_GPIO_WritePin(UART_RSE_GPIO_Port,UART_RSE_Pin, 0); // Toggle RSE pin to send message over RS485
	}
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
	if(huart == &huart2){
		//HAL_GPIO_WritePin(UART_RSE_GPIO_Port,UART_RSE_Pin, GPIO_PIN_SET); // Toggle RSE pin to send message over RS485
	}

    // Messages received from HMI
	if(huart == &huart1){
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a0f      	ldr	r2, [pc, #60]	; (80020d4 <HAL_UART_RxCpltCallback+0x48>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d111      	bne.n	80020c0 <HAL_UART_RxCpltCallback+0x34>
		   switch (HMI_rx_buff[0])
 800209c:	4b0e      	ldr	r3, [pc, #56]	; (80020d8 <HAL_UART_RxCpltCallback+0x4c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	2b04      	cmp	r3, #4
 80020a2:	d80f      	bhi.n	80020c4 <HAL_UART_RxCpltCallback+0x38>
 80020a4:	a201      	add	r2, pc, #4	; (adr r2, 80020ac <HAL_UART_RxCpltCallback+0x20>)
 80020a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020aa:	bf00      	nop
 80020ac:	080020c5 	.word	0x080020c5
 80020b0:	080020c5 	.word	0x080020c5
 80020b4:	080020c5 	.word	0x080020c5
 80020b8:	080020c5 	.word	0x080020c5
 80020bc:	080020c5 	.word	0x080020c5
			   case 4:
				   break;

			   default:	break;
		   }
	}
 80020c0:	bf00      	nop
 80020c2:	e000      	b.n	80020c6 <HAL_UART_RxCpltCallback+0x3a>
			   default:	break;
 80020c4:	bf00      	nop

	HAL_UART_DMAStop(&huart1);	// Close DMA stream
 80020c6:	4803      	ldr	r0, [pc, #12]	; (80020d4 <HAL_UART_RxCpltCallback+0x48>)
 80020c8:	f004 fbac 	bl	8006824 <HAL_UART_DMAStop>
}
 80020cc:	bf00      	nop
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200004cc 	.word	0x200004cc
 80020d8:	2000005c 	.word	0x2000005c

080020dc <I2C_read>:
void I2C_read(uint8_t Device_Addr, uint16_t Device_reg, uint8_t I2C_tx_buff[], uint8_t I2C_rx_buff[]){
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60ba      	str	r2, [r7, #8]
 80020e4:	607b      	str	r3, [r7, #4]
 80020e6:	4603      	mov	r3, r0
 80020e8:	73fb      	strb	r3, [r7, #15]
 80020ea:	460b      	mov	r3, r1
 80020ec:	81bb      	strh	r3, [r7, #12]
	  // Counter to avoid infinite while loop
	  int counter = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	617b      	str	r3, [r7, #20]
	  int counterLimit = 100;
 80020f2:	2364      	movs	r3, #100	; 0x64
 80020f4:	613b      	str	r3, [r7, #16]
	  // I2C_tx_buff[0] = Device_reg;
	  // I2C_tx_buff[0] = byteCommand[0];
	  // I2C_tx_buff[1] = byteCommand[1];

	  if (HAL_I2C_Master_Transmit(&hi2c3, Device_Addr, I2C_tx_buff, 1, 100) != HAL_OK){
 80020f6:	7bfb      	ldrb	r3, [r7, #15]
 80020f8:	b299      	uxth	r1, r3
 80020fa:	2364      	movs	r3, #100	; 0x64
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2301      	movs	r3, #1
 8002100:	68ba      	ldr	r2, [r7, #8]
 8002102:	4812      	ldr	r0, [pc, #72]	; (800214c <I2C_read+0x70>)
 8002104:	f002 fa50 	bl	80045a8 <HAL_I2C_Master_Transmit>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <I2C_read+0x36>
		  __NOP();
 800210e:	bf00      	nop
//				  HAL_UART_Transmit(&huart2,I2C_rx_buff,strlen((char*)I2C_rx_buff), 100);
				  break;
			  }
		  }
	  }
}
 8002110:	e017      	b.n	8002142 <I2C_read+0x66>
			  if (HAL_I2C_Master_Receive(&hi2c3, Device_Addr, I2C_rx_buff,4, 100) != HAL_OK){
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	b299      	uxth	r1, r3
 8002116:	2364      	movs	r3, #100	; 0x64
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2304      	movs	r3, #4
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	480b      	ldr	r0, [pc, #44]	; (800214c <I2C_read+0x70>)
 8002120:	f002 fb40 	bl	80047a4 <HAL_I2C_Master_Receive>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00a      	beq.n	8002140 <I2C_read+0x64>
					 if(counter >= counterLimit){
 800212a:	697a      	ldr	r2, [r7, #20]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	db03      	blt.n	800213a <I2C_read+0x5e>
						 counter ++;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	3301      	adds	r3, #1
 8002136:	617b      	str	r3, [r7, #20]
 8002138:	e7eb      	b.n	8002112 <I2C_read+0x36>
						 counter = 0;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
						 break;
 800213e:	e000      	b.n	8002142 <I2C_read+0x66>
				  break;
 8002140:	bf00      	nop
}
 8002142:	bf00      	nop
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	200001b8 	.word	0x200001b8

08002150 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	af00      	add	r7, sp, #0

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_RTC_Init+0x44>)
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <MX_RTC_Init+0x48>)
 8002168:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_RTC_Init+0x44>)
 800216c:	2200      	movs	r2, #0
 800216e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_RTC_Init+0x44>)
 8002172:	227f      	movs	r2, #127	; 0x7f
 8002174:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_RTC_Init+0x44>)
 8002178:	22ff      	movs	r2, #255	; 0xff
 800217a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_RTC_Init+0x44>)
 800217e:	2200      	movs	r2, #0
 8002180:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_RTC_Init+0x44>)
 8002184:	2200      	movs	r2, #0
 8002186:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_RTC_Init+0x44>)
 800218a:	2200      	movs	r2, #0
 800218c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_RTC_Init+0x44>)
 8002190:	f003 ff20 	bl	8005fd4 <HAL_RTC_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800219a:	f7ff ffd9 	bl	8002150 <Error_Handler>
  }

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	200002ec 	.word	0x200002ec
 80021a8:	40002800 	.word	0x40002800

080021ac <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a05      	ldr	r2, [pc, #20]	; (80021d0 <HAL_RTC_MspInit+0x24>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d102      	bne.n	80021c4 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RTC_MspInit+0x28>)
 80021c0:	2201      	movs	r2, #1
 80021c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40002800 	.word	0x40002800
 80021d4:	42470e3c 	.word	0x42470e3c

080021d8 <sfm3000initFlow>:
 */

#include "sfm3000.h"

//  Initiates the data reading for flow.
uint8_t sfm3000initFlow(void){
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
	// Two byte command to start continuous measurement.
	uint8_t Buffer[SFM3000_DEVICE_I2C_COMMAND_SIZE];
	Buffer[0] = READ_FLOW_DATA_BYTE_1;
 80021de:	2310      	movs	r3, #16
 80021e0:	713b      	strb	r3, [r7, #4]
	Buffer[1] = READ_FLOW_DATA_BYTE_2;
 80021e2:	2300      	movs	r3, #0
 80021e4:	717b      	strb	r3, [r7, #5]
	return (uint8_t) I2CwriteBytes(SFM3000_I2C_ADDRESS, Buffer, SFM3000_DEVICE_I2C_COMMAND_SIZE);
 80021e6:	1d3b      	adds	r3, r7, #4
 80021e8:	2202      	movs	r2, #2
 80021ea:	4619      	mov	r1, r3
 80021ec:	2080      	movs	r0, #128	; 0x80
 80021ee:	f000 f805 	bl	80021fc <I2CwriteBytes>
 80021f2:	4603      	mov	r3, r0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <I2CwriteBytes>:
		return HAL_ERROR;
}


// Library can be used with different I2C libraries by only changing these functions without changing the SFM3000 related functions.
uint8_t I2CwriteBytes(uint16_t devAddr, uint8_t * buffer, uint8_t size){
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af02      	add	r7, sp, #8
 8002202:	4603      	mov	r3, r0
 8002204:	6039      	str	r1, [r7, #0]
 8002206:	80fb      	strh	r3, [r7, #6]
 8002208:	4613      	mov	r3, r2
 800220a:	717b      	strb	r3, [r7, #5]
	return (uint8_t) HAL_I2C_Master_Transmit(SFM3000_I2C_INS, devAddr, buffer, size, 0xFF);
 800220c:	797b      	ldrb	r3, [r7, #5]
 800220e:	b29a      	uxth	r2, r3
 8002210:	88f9      	ldrh	r1, [r7, #6]
 8002212:	23ff      	movs	r3, #255	; 0xff
 8002214:	9300      	str	r3, [sp, #0]
 8002216:	4613      	mov	r3, r2
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	4804      	ldr	r0, [pc, #16]	; (800222c <I2CwriteBytes+0x30>)
 800221c:	f002 f9c4 	bl	80045a8 <HAL_I2C_Master_Transmit>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	2000020c 	.word	0x2000020c

08002230 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	607b      	str	r3, [r7, #4]
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_MspInit+0x4c>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800223e:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_MspInit+0x4c>)
 8002240:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002244:	6453      	str	r3, [r2, #68]	; 0x44
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_MspInit+0x4c>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800224e:	607b      	str	r3, [r7, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	603b      	str	r3, [r7, #0]
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <HAL_MspInit+0x4c>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	4a08      	ldr	r2, [pc, #32]	; (800227c <HAL_MspInit+0x4c>)
 800225c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002260:	6413      	str	r3, [r2, #64]	; 0x40
 8002262:	4b06      	ldr	r3, [pc, #24]	; (800227c <HAL_MspInit+0x4c>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226a:	603b      	str	r3, [r7, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800226e:	bf00      	nop
 8002270:	370c      	adds	r7, #12
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800

08002280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002292:	e7fe      	b.n	8002292 <HardFault_Handler+0x4>

08002294 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002294:	b480      	push	{r7}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002298:	e7fe      	b.n	8002298 <MemManage_Handler+0x4>

0800229a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800229e:	e7fe      	b.n	800229e <BusFault_Handler+0x4>

080022a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a4:	e7fe      	b.n	80022a4 <UsageFault_Handler+0x4>

080022a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c2:	b480      	push	{r7}
 80022c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d4:	f000 fb04 	bl	80028e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022d8:	bf00      	nop
 80022da:	bd80      	pop	{r7, pc}

080022dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022e0:	4802      	ldr	r0, [pc, #8]	; (80022ec <DMA1_Stream5_IRQHandler+0x10>)
 80022e2:	f001 fbcd 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	2000030c 	.word	0x2000030c

080022f0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022f4:	4802      	ldr	r0, [pc, #8]	; (8002300 <DMA1_Stream6_IRQHandler+0x10>)
 80022f6:	f001 fbc3 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022fa:	bf00      	nop
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	2000046c 	.word	0x2000046c

08002304 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002308:	4802      	ldr	r0, [pc, #8]	; (8002314 <ADC_IRQHandler+0x10>)
 800230a:	f000 fb4c 	bl	80029a6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800230e:	bf00      	nop
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200000fc 	.word	0x200000fc

08002318 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 800231c:	2040      	movs	r0, #64	; 0x40
 800231e:	f001 fff3 	bl	8004308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
	...

08002328 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800232c:	4802      	ldr	r0, [pc, #8]	; (8002338 <USART1_IRQHandler+0x10>)
 800232e:	f004 fad5 	bl	80068dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200004cc 	.word	0x200004cc

0800233c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002340:	4802      	ldr	r0, [pc, #8]	; (800234c <USART2_IRQHandler+0x10>)
 8002342:	f004 facb 	bl	80068dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	2000050c 	.word	0x2000050c

08002350 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002354:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002358:	f001 ffd6 	bl	8004308 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002364:	4802      	ldr	r0, [pc, #8]	; (8002370 <DMA2_Stream0_IRQHandler+0x10>)
 8002366:	f001 fb8b 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800236a:	bf00      	nop
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	20000144 	.word	0x20000144

08002374 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002378:	4802      	ldr	r0, [pc, #8]	; (8002384 <DMA2_Stream2_IRQHandler+0x10>)
 800237a:	f001 fb81 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000040c 	.word	0x2000040c

08002388 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800238c:	4802      	ldr	r0, [pc, #8]	; (8002398 <DMA2_Stream7_IRQHandler+0x10>)
 800238e:	f001 fb77 	bl	8003a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200003ac 	.word	0x200003ac

0800239c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800239c:	b480      	push	{r7}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <SystemInit+0x28>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	4a07      	ldr	r2, [pc, #28]	; (80023c4 <SystemInit+0x28>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <SystemInit+0x28>)
 80023b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023b6:	609a      	str	r2, [r3, #8]
#endif
}
 80023b8:	bf00      	nop
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
 80023c2:	bf00      	nop
 80023c4:	e000ed00 	.word	0xe000ed00

080023c8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80023cc:	4b12      	ldr	r3, [pc, #72]	; (8002418 <MX_USART1_UART_Init+0x50>)
 80023ce:	4a13      	ldr	r2, [pc, #76]	; (800241c <MX_USART1_UART_Init+0x54>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023d2:	4b11      	ldr	r3, [pc, #68]	; (8002418 <MX_USART1_UART_Init+0x50>)
 80023d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_9B;
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <MX_USART1_UART_Init+0x50>)
 80023dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023e0:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 80023e2:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <MX_USART1_UART_Init+0x50>)
 80023e4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <MX_USART1_UART_Init+0x50>)
 80023ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023f0:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023f2:	4b09      	ldr	r3, [pc, #36]	; (8002418 <MX_USART1_UART_Init+0x50>)
 80023f4:	220c      	movs	r2, #12
 80023f6:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <MX_USART1_UART_Init+0x50>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <MX_USART1_UART_Init+0x50>)
 8002400:	2200      	movs	r2, #0
 8002402:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002404:	4804      	ldr	r0, [pc, #16]	; (8002418 <MX_USART1_UART_Init+0x50>)
 8002406:	f003 ff95 	bl	8006334 <HAL_UART_Init>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d001      	beq.n	8002414 <MX_USART1_UART_Init+0x4c>
  {
    Error_Handler();
 8002410:	f7ff fe9e 	bl	8002150 <Error_Handler>
  }

}
 8002414:	bf00      	nop
 8002416:	bd80      	pop	{r7, pc}
 8002418:	200004cc 	.word	0x200004cc
 800241c:	40011000 	.word	0x40011000

08002420 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8002424:	4b11      	ldr	r3, [pc, #68]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002426:	4a12      	ldr	r2, [pc, #72]	; (8002470 <MX_USART2_UART_Init+0x50>)
 8002428:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800242a:	4b10      	ldr	r3, [pc, #64]	; (800246c <MX_USART2_UART_Init+0x4c>)
 800242c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002430:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002434:	2200      	movs	r2, #0
 8002436:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002438:	4b0c      	ldr	r3, [pc, #48]	; (800246c <MX_USART2_UART_Init+0x4c>)
 800243a:	2200      	movs	r2, #0
 800243c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800243e:	4b0b      	ldr	r3, [pc, #44]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002444:	4b09      	ldr	r3, [pc, #36]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002446:	220c      	movs	r2, #12
 8002448:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <MX_USART2_UART_Init+0x4c>)
 800244c:	2200      	movs	r2, #0
 800244e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002450:	4b06      	ldr	r3, [pc, #24]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002452:	2200      	movs	r2, #0
 8002454:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <MX_USART2_UART_Init+0x4c>)
 8002458:	f003 ff6c 	bl	8006334 <HAL_UART_Init>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002462:	f7ff fe75 	bl	8002150 <Error_Handler>
  }

}
 8002466:	bf00      	nop
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	2000050c 	.word	0x2000050c
 8002470:	40004400 	.word	0x40004400

08002474 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 800247a:	4a12      	ldr	r2, [pc, #72]	; (80024c4 <MX_USART3_UART_Init+0x50>)
 800247c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 128000;
 800247e:	4b10      	ldr	r3, [pc, #64]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 8002480:	f44f 32fa 	mov.w	r2, #128000	; 0x1f400
 8002484:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002486:	4b0e      	ldr	r3, [pc, #56]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800248c:	4b0c      	ldr	r3, [pc, #48]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 8002494:	2200      	movs	r2, #0
 8002496:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 800249a:	220c      	movs	r2, #12
 800249c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024aa:	4805      	ldr	r0, [pc, #20]	; (80024c0 <MX_USART3_UART_Init+0x4c>)
 80024ac:	f003 ff42 	bl	8006334 <HAL_UART_Init>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d001      	beq.n	80024ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80024b6:	f7ff fe4b 	bl	8002150 <Error_Handler>
  }

}
 80024ba:	bf00      	nop
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	2000036c 	.word	0x2000036c
 80024c4:	40004800 	.word	0x40004800

080024c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08e      	sub	sp, #56	; 0x38
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a96      	ldr	r2, [pc, #600]	; (8002740 <HAL_UART_MspInit+0x278>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	f040 8092 	bne.w	8002610 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	623b      	str	r3, [r7, #32]
 80024f0:	4b94      	ldr	r3, [pc, #592]	; (8002744 <HAL_UART_MspInit+0x27c>)
 80024f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f4:	4a93      	ldr	r2, [pc, #588]	; (8002744 <HAL_UART_MspInit+0x27c>)
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	6453      	str	r3, [r2, #68]	; 0x44
 80024fc:	4b91      	ldr	r3, [pc, #580]	; (8002744 <HAL_UART_MspInit+0x27c>)
 80024fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002500:	f003 0310 	and.w	r3, r3, #16
 8002504:	623b      	str	r3, [r7, #32]
 8002506:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002508:	2300      	movs	r3, #0
 800250a:	61fb      	str	r3, [r7, #28]
 800250c:	4b8d      	ldr	r3, [pc, #564]	; (8002744 <HAL_UART_MspInit+0x27c>)
 800250e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002510:	4a8c      	ldr	r2, [pc, #560]	; (8002744 <HAL_UART_MspInit+0x27c>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6313      	str	r3, [r2, #48]	; 0x30
 8002518:	4b8a      	ldr	r3, [pc, #552]	; (8002744 <HAL_UART_MspInit+0x27c>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
 8002522:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002524:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800252a:	2302      	movs	r3, #2
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002532:	2303      	movs	r3, #3
 8002534:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002536:	2307      	movs	r3, #7
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800253a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800253e:	4619      	mov	r1, r3
 8002540:	4881      	ldr	r0, [pc, #516]	; (8002748 <HAL_UART_MspInit+0x280>)
 8002542:	f001 fd05 	bl	8003f50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002546:	4b81      	ldr	r3, [pc, #516]	; (800274c <HAL_UART_MspInit+0x284>)
 8002548:	4a81      	ldr	r2, [pc, #516]	; (8002750 <HAL_UART_MspInit+0x288>)
 800254a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800254c:	4b7f      	ldr	r3, [pc, #508]	; (800274c <HAL_UART_MspInit+0x284>)
 800254e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002552:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002554:	4b7d      	ldr	r3, [pc, #500]	; (800274c <HAL_UART_MspInit+0x284>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800255a:	4b7c      	ldr	r3, [pc, #496]	; (800274c <HAL_UART_MspInit+0x284>)
 800255c:	2200      	movs	r2, #0
 800255e:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002560:	4b7a      	ldr	r3, [pc, #488]	; (800274c <HAL_UART_MspInit+0x284>)
 8002562:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002566:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002568:	4b78      	ldr	r3, [pc, #480]	; (800274c <HAL_UART_MspInit+0x284>)
 800256a:	2200      	movs	r2, #0
 800256c:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800256e:	4b77      	ldr	r3, [pc, #476]	; (800274c <HAL_UART_MspInit+0x284>)
 8002570:	2200      	movs	r2, #0
 8002572:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002574:	4b75      	ldr	r3, [pc, #468]	; (800274c <HAL_UART_MspInit+0x284>)
 8002576:	2200      	movs	r2, #0
 8002578:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800257a:	4b74      	ldr	r3, [pc, #464]	; (800274c <HAL_UART_MspInit+0x284>)
 800257c:	2200      	movs	r2, #0
 800257e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002580:	4b72      	ldr	r3, [pc, #456]	; (800274c <HAL_UART_MspInit+0x284>)
 8002582:	2200      	movs	r2, #0
 8002584:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002586:	4871      	ldr	r0, [pc, #452]	; (800274c <HAL_UART_MspInit+0x284>)
 8002588:	f001 f8e2 	bl	8003750 <HAL_DMA_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002592:	f7ff fddd 	bl	8002150 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a6c      	ldr	r2, [pc, #432]	; (800274c <HAL_UART_MspInit+0x284>)
 800259a:	635a      	str	r2, [r3, #52]	; 0x34
 800259c:	4a6b      	ldr	r2, [pc, #428]	; (800274c <HAL_UART_MspInit+0x284>)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 80025a2:	4b6c      	ldr	r3, [pc, #432]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025a4:	4a6c      	ldr	r2, [pc, #432]	; (8002758 <HAL_UART_MspInit+0x290>)
 80025a6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 80025a8:	4b6a      	ldr	r3, [pc, #424]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025aa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025ae:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80025b0:	4b68      	ldr	r3, [pc, #416]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025b2:	2240      	movs	r2, #64	; 0x40
 80025b4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80025bc:	4b65      	ldr	r3, [pc, #404]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025c2:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025c4:	4b63      	ldr	r3, [pc, #396]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025ca:	4b62      	ldr	r3, [pc, #392]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80025d0:	4b60      	ldr	r3, [pc, #384]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80025d6:	4b5f      	ldr	r3, [pc, #380]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025d8:	2200      	movs	r2, #0
 80025da:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025dc:	4b5d      	ldr	r3, [pc, #372]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025de:	2200      	movs	r2, #0
 80025e0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80025e2:	485c      	ldr	r0, [pc, #368]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025e4:	f001 f8b4 	bl	8003750 <HAL_DMA_Init>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80025ee:	f7ff fdaf 	bl	8002150 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a57      	ldr	r2, [pc, #348]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
 80025f8:	4a56      	ldr	r2, [pc, #344]	; (8002754 <HAL_UART_MspInit+0x28c>)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 80025fe:	2200      	movs	r2, #0
 8002600:	2101      	movs	r1, #1
 8002602:	2025      	movs	r0, #37	; 0x25
 8002604:	f000 ffff 	bl	8003606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002608:	2025      	movs	r0, #37	; 0x25
 800260a:	f001 f818 	bl	800363e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800260e:	e0e1      	b.n	80027d4 <HAL_UART_MspInit+0x30c>
  else if(uartHandle->Instance==USART2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a51      	ldr	r2, [pc, #324]	; (800275c <HAL_UART_MspInit+0x294>)
 8002616:	4293      	cmp	r3, r2
 8002618:	f040 80aa 	bne.w	8002770 <HAL_UART_MspInit+0x2a8>
    __HAL_RCC_USART2_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
 8002620:	4b48      	ldr	r3, [pc, #288]	; (8002744 <HAL_UART_MspInit+0x27c>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_UART_MspInit+0x27c>)
 8002626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800262a:	6413      	str	r3, [r2, #64]	; 0x40
 800262c:	4b45      	ldr	r3, [pc, #276]	; (8002744 <HAL_UART_MspInit+0x27c>)
 800262e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002630:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002634:	61bb      	str	r3, [r7, #24]
 8002636:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_UART_MspInit+0x27c>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	4a40      	ldr	r2, [pc, #256]	; (8002744 <HAL_UART_MspInit+0x27c>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	6313      	str	r3, [r2, #48]	; 0x30
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_UART_MspInit+0x27c>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	617b      	str	r3, [r7, #20]
 8002652:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002654:	230c      	movs	r3, #12
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002658:	2302      	movs	r3, #2
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002660:	2303      	movs	r3, #3
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002664:	2307      	movs	r3, #7
 8002666:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800266c:	4619      	mov	r1, r3
 800266e:	4836      	ldr	r0, [pc, #216]	; (8002748 <HAL_UART_MspInit+0x280>)
 8002670:	f001 fc6e 	bl	8003f50 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_UART_MspInit+0x298>)
 8002676:	4a3b      	ldr	r2, [pc, #236]	; (8002764 <HAL_UART_MspInit+0x29c>)
 8002678:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_UART_MspInit+0x298>)
 800267c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002680:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002682:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_UART_MspInit+0x298>)
 8002684:	2200      	movs	r2, #0
 8002686:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002688:	4b35      	ldr	r3, [pc, #212]	; (8002760 <HAL_UART_MspInit+0x298>)
 800268a:	2200      	movs	r2, #0
 800268c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800268e:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_UART_MspInit+0x298>)
 8002690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002694:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002696:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_UART_MspInit+0x298>)
 8002698:	2200      	movs	r2, #0
 800269a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800269c:	4b30      	ldr	r3, [pc, #192]	; (8002760 <HAL_UART_MspInit+0x298>)
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80026a2:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_UART_MspInit+0x298>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026a8:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_UART_MspInit+0x298>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026ae:	4b2c      	ldr	r3, [pc, #176]	; (8002760 <HAL_UART_MspInit+0x298>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80026b4:	482a      	ldr	r0, [pc, #168]	; (8002760 <HAL_UART_MspInit+0x298>)
 80026b6:	f001 f84b 	bl	8003750 <HAL_DMA_Init>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d001      	beq.n	80026c4 <HAL_UART_MspInit+0x1fc>
      Error_Handler();
 80026c0:	f7ff fd46 	bl	8002150 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a26      	ldr	r2, [pc, #152]	; (8002760 <HAL_UART_MspInit+0x298>)
 80026c8:	635a      	str	r2, [r3, #52]	; 0x34
 80026ca:	4a25      	ldr	r2, [pc, #148]	; (8002760 <HAL_UART_MspInit+0x298>)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80026d0:	4b25      	ldr	r3, [pc, #148]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 80026d2:	4a26      	ldr	r2, [pc, #152]	; (800276c <HAL_UART_MspInit+0x2a4>)
 80026d4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80026d6:	4b24      	ldr	r3, [pc, #144]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 80026d8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026dc:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 80026e0:	2240      	movs	r2, #64	; 0x40
 80026e2:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 80026ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 8002700:	2200      	movs	r2, #0
 8002702:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 8002706:	2200      	movs	r2, #0
 8002708:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002710:	4815      	ldr	r0, [pc, #84]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 8002712:	f001 f81d 	bl	8003750 <HAL_DMA_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_MspInit+0x258>
      Error_Handler();
 800271c:	f7ff fd18 	bl	8002150 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a11      	ldr	r2, [pc, #68]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 8002724:	631a      	str	r2, [r3, #48]	; 0x30
 8002726:	4a10      	ldr	r2, [pc, #64]	; (8002768 <HAL_UART_MspInit+0x2a0>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2101      	movs	r1, #1
 8002730:	2026      	movs	r0, #38	; 0x26
 8002732:	f000 ff68 	bl	8003606 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002736:	2026      	movs	r0, #38	; 0x26
 8002738:	f000 ff81 	bl	800363e <HAL_NVIC_EnableIRQ>
}
 800273c:	e04a      	b.n	80027d4 <HAL_UART_MspInit+0x30c>
 800273e:	bf00      	nop
 8002740:	40011000 	.word	0x40011000
 8002744:	40023800 	.word	0x40023800
 8002748:	40020000 	.word	0x40020000
 800274c:	2000040c 	.word	0x2000040c
 8002750:	40026440 	.word	0x40026440
 8002754:	200003ac 	.word	0x200003ac
 8002758:	400264b8 	.word	0x400264b8
 800275c:	40004400 	.word	0x40004400
 8002760:	2000030c 	.word	0x2000030c
 8002764:	40026088 	.word	0x40026088
 8002768:	2000046c 	.word	0x2000046c
 800276c:	400260a0 	.word	0x400260a0
  else if(uartHandle->Instance==USART3)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a19      	ldr	r2, [pc, #100]	; (80027dc <HAL_UART_MspInit+0x314>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d12c      	bne.n	80027d4 <HAL_UART_MspInit+0x30c>
    __HAL_RCC_USART3_CLK_ENABLE();
 800277a:	2300      	movs	r3, #0
 800277c:	613b      	str	r3, [r7, #16]
 800277e:	4b18      	ldr	r3, [pc, #96]	; (80027e0 <HAL_UART_MspInit+0x318>)
 8002780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002782:	4a17      	ldr	r2, [pc, #92]	; (80027e0 <HAL_UART_MspInit+0x318>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	6413      	str	r3, [r2, #64]	; 0x40
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_UART_MspInit+0x318>)
 800278c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <HAL_UART_MspInit+0x318>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	4a10      	ldr	r2, [pc, #64]	; (80027e0 <HAL_UART_MspInit+0x318>)
 80027a0:	f043 0302 	orr.w	r3, r3, #2
 80027a4:	6313      	str	r3, [r2, #48]	; 0x30
 80027a6:	4b0e      	ldr	r3, [pc, #56]	; (80027e0 <HAL_UART_MspInit+0x318>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027b2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b8:	2302      	movs	r3, #2
 80027ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027bc:	2300      	movs	r3, #0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c0:	2303      	movs	r3, #3
 80027c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80027c4:	2307      	movs	r3, #7
 80027c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027cc:	4619      	mov	r1, r3
 80027ce:	4805      	ldr	r0, [pc, #20]	; (80027e4 <HAL_UART_MspInit+0x31c>)
 80027d0:	f001 fbbe 	bl	8003f50 <HAL_GPIO_Init>
}
 80027d4:	bf00      	nop
 80027d6:	3738      	adds	r7, #56	; 0x38
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40004800 	.word	0x40004800
 80027e0:	40023800 	.word	0x40023800
 80027e4:	40020400 	.word	0x40020400

080027e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002820 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027ec:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027ee:	e003      	b.n	80027f8 <LoopCopyDataInit>

080027f0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80027f0:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80027f2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027f4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027f6:	3104      	adds	r1, #4

080027f8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027f8:	480b      	ldr	r0, [pc, #44]	; (8002828 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027fa:	4b0c      	ldr	r3, [pc, #48]	; (800282c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027fc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027fe:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002800:	d3f6      	bcc.n	80027f0 <CopyDataInit>
  ldr  r2, =_sbss
 8002802:	4a0b      	ldr	r2, [pc, #44]	; (8002830 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002804:	e002      	b.n	800280c <LoopFillZerobss>

08002806 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002806:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002808:	f842 3b04 	str.w	r3, [r2], #4

0800280c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800280e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002810:	d3f9      	bcc.n	8002806 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002812:	f7ff fdc3 	bl	800239c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002816:	f004 ff3f 	bl	8007698 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800281a:	f7fe fe39 	bl	8001490 <main>
  bx  lr    
 800281e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002820:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002824:	08007738 	.word	0x08007738
  ldr  r0, =_sdata
 8002828:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800282c:	2000002c 	.word	0x2000002c
  ldr  r2, =_sbss
 8002830:	2000002c 	.word	0x2000002c
  ldr  r3, = _ebss
 8002834:	20000550 	.word	0x20000550

08002838 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002838:	e7fe      	b.n	8002838 <CAN1_RX0_IRQHandler>
	...

0800283c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002840:	4b0e      	ldr	r3, [pc, #56]	; (800287c <HAL_Init+0x40>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a0d      	ldr	r2, [pc, #52]	; (800287c <HAL_Init+0x40>)
 8002846:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800284a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800284c:	4b0b      	ldr	r3, [pc, #44]	; (800287c <HAL_Init+0x40>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a0a      	ldr	r2, [pc, #40]	; (800287c <HAL_Init+0x40>)
 8002852:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002856:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002858:	4b08      	ldr	r3, [pc, #32]	; (800287c <HAL_Init+0x40>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a07      	ldr	r2, [pc, #28]	; (800287c <HAL_Init+0x40>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002864:	2003      	movs	r0, #3
 8002866:	f000 fec3 	bl	80035f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800286a:	2000      	movs	r0, #0
 800286c:	f000 f808 	bl	8002880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002870:	f7ff fcde 	bl	8002230 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023c00 	.word	0x40023c00

08002880 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b082      	sub	sp, #8
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002888:	4b12      	ldr	r3, [pc, #72]	; (80028d4 <HAL_InitTick+0x54>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b12      	ldr	r3, [pc, #72]	; (80028d8 <HAL_InitTick+0x58>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	4619      	mov	r1, r3
 8002892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002896:	fbb3 f3f1 	udiv	r3, r3, r1
 800289a:	fbb2 f3f3 	udiv	r3, r2, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fedb 	bl	800365a <HAL_SYSTICK_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e00e      	b.n	80028cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2b0f      	cmp	r3, #15
 80028b2:	d80a      	bhi.n	80028ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028b4:	2200      	movs	r2, #0
 80028b6:	6879      	ldr	r1, [r7, #4]
 80028b8:	f04f 30ff 	mov.w	r0, #4294967295
 80028bc:	f000 fea3 	bl	8003606 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c0:	4a06      	ldr	r2, [pc, #24]	; (80028dc <HAL_InitTick+0x5c>)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	e000      	b.n	80028cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3708      	adds	r7, #8
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	20000020 	.word	0x20000020
 80028d8:	20000028 	.word	0x20000028
 80028dc:	20000024 	.word	0x20000024

080028e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028e4:	4b06      	ldr	r3, [pc, #24]	; (8002900 <HAL_IncTick+0x20>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	461a      	mov	r2, r3
 80028ea:	4b06      	ldr	r3, [pc, #24]	; (8002904 <HAL_IncTick+0x24>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4413      	add	r3, r2
 80028f0:	4a04      	ldr	r2, [pc, #16]	; (8002904 <HAL_IncTick+0x24>)
 80028f2:	6013      	str	r3, [r2, #0]
}
 80028f4:	bf00      	nop
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	20000028 	.word	0x20000028
 8002904:	2000054c 	.word	0x2000054c

08002908 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return uwTick;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <HAL_GetTick+0x14>)
 800290e:	681b      	ldr	r3, [r3, #0]
}
 8002910:	4618      	mov	r0, r3
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop
 800291c:	2000054c 	.word	0x2000054c

08002920 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e033      	b.n	800299e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	2b00      	cmp	r3, #0
 800293c:	d109      	bne.n	8002952 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f7fe fa66 	bl	8000e10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b00      	cmp	r3, #0
 800295c:	d118      	bne.n	8002990 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002966:	f023 0302 	bic.w	r3, r3, #2
 800296a:	f043 0202 	orr.w	r2, r3, #2
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 fbe4 	bl	8003140 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f023 0303 	bic.w	r3, r3, #3
 8002986:	f043 0201 	orr.w	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	641a      	str	r2, [r3, #64]	; 0x40
 800298e:	e001      	b.n	8002994 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800299c:	7bfb      	ldrb	r3, [r7, #15]
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b084      	sub	sp, #16
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f003 0302 	and.w	r3, r3, #2
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	bf0c      	ite	eq
 80029c4:	2301      	moveq	r3, #1
 80029c6:	2300      	movne	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	bf0c      	ite	eq
 80029da:	2301      	moveq	r3, #1
 80029dc:	2300      	movne	r3, #0
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d049      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xd6>
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d046      	beq.n	8002a7c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d105      	bne.n	8002a06 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d12b      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d127      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a22:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d006      	beq.n	8002a38 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d119      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f022 0220 	bic.w	r2, r2, #32
 8002a46:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f043 0201 	orr.w	r2, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f7ff fabf 	bl	8001ff0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f06f 0212 	mvn.w	r2, #18
 8002a7a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0304 	and.w	r3, r3, #4
 8002a86:	2b04      	cmp	r3, #4
 8002a88:	bf0c      	ite	eq
 8002a8a:	2301      	moveq	r3, #1
 8002a8c:	2300      	movne	r3, #0
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9c:	2b80      	cmp	r3, #128	; 0x80
 8002a9e:	bf0c      	ite	eq
 8002aa0:	2301      	moveq	r3, #1
 8002aa2:	2300      	movne	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d057      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x1b8>
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d054      	beq.n	8002b5e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab8:	f003 0310 	and.w	r3, r3, #16
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d139      	bne.n	8002b4e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d006      	beq.n	8002af6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d12b      	bne.n	8002b4e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d124      	bne.n	8002b4e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d11d      	bne.n	8002b4e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d119      	bne.n	8002b4e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b28:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d105      	bne.n	8002b4e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0201 	orr.w	r2, r3, #1
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fc74 	bl	800343c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 020c 	mvn.w	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7e:	2b40      	cmp	r3, #64	; 0x40
 8002b80:	bf0c      	ite	eq
 8002b82:	2301      	moveq	r3, #1
 8002b84:	2300      	movne	r3, #0
 8002b86:	b2db      	uxtb	r3, r3
 8002b88:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d017      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x21a>
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d014      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0301 	and.w	r3, r3, #1
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d10d      	bne.n	8002bc0 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f97f 	bl	8002eb4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f06f 0201 	mvn.w	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b20      	cmp	r3, #32
 8002bcc:	bf0c      	ite	eq
 8002bce:	2301      	moveq	r3, #1
 8002bd0:	2300      	movne	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002be4:	bf0c      	ite	eq
 8002be6:	2301      	moveq	r3, #1
 8002be8:	2300      	movne	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x27a>
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfe:	f043 0202 	orr.w	r2, r3, #2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f06f 0220 	mvn.w	r2, #32
 8002c0e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 f959 	bl	8002ec8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f06f 0220 	mvn.w	r2, #32
 8002c1e:	601a      	str	r2, [r3, #0]
  }
}
 8002c20:	bf00      	nop
 8002c22:	3710      	adds	r7, #16
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d101      	bne.n	8002c46 <HAL_ADC_Start_DMA+0x1e>
 8002c42:	2302      	movs	r3, #2
 8002c44:	e0cc      	b.n	8002de0 <HAL_ADC_Start_DMA+0x1b8>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b01      	cmp	r3, #1
 8002c5a:	d018      	beq.n	8002c8e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689a      	ldr	r2, [r3, #8]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0201 	orr.w	r2, r2, #1
 8002c6a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c6c:	4b5e      	ldr	r3, [pc, #376]	; (8002de8 <HAL_ADC_Start_DMA+0x1c0>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5e      	ldr	r2, [pc, #376]	; (8002dec <HAL_ADC_Start_DMA+0x1c4>)
 8002c72:	fba2 2303 	umull	r2, r3, r2, r3
 8002c76:	0c9a      	lsrs	r2, r3, #18
 8002c78:	4613      	mov	r3, r2
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	4413      	add	r3, r2
 8002c7e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c80:	e002      	b.n	8002c88 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	3b01      	subs	r3, #1
 8002c86:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1f9      	bne.n	8002c82 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 0301 	and.w	r3, r3, #1
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	f040 80a0 	bne.w	8002dde <HAL_ADC_Start_DMA+0x1b6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ca6:	f023 0301 	bic.w	r3, r3, #1
 8002caa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d007      	beq.n	8002cd0 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002cc8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cdc:	d106      	bne.n	8002cec <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f023 0206 	bic.w	r2, r3, #6
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
 8002cea:	e002      	b.n	8002cf2 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cfa:	4b3d      	ldr	r3, [pc, #244]	; (8002df0 <HAL_ADC_Start_DMA+0x1c8>)
 8002cfc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	4a3c      	ldr	r2, [pc, #240]	; (8002df4 <HAL_ADC_Start_DMA+0x1cc>)
 8002d04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d0a:	4a3b      	ldr	r2, [pc, #236]	; (8002df8 <HAL_ADC_Start_DMA+0x1d0>)
 8002d0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d12:	4a3a      	ldr	r2, [pc, #232]	; (8002dfc <HAL_ADC_Start_DMA+0x1d4>)
 8002d14:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002d1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d2e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d3e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	334c      	adds	r3, #76	; 0x4c
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	68ba      	ldr	r2, [r7, #8]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f000 fdac 	bl	80038ac <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d12a      	bne.n	8002db6 <HAL_ADC_Start_DMA+0x18e>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a26      	ldr	r2, [pc, #152]	; (8002e00 <HAL_ADC_Start_DMA+0x1d8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d015      	beq.n	8002d96 <HAL_ADC_Start_DMA+0x16e>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a25      	ldr	r2, [pc, #148]	; (8002e04 <HAL_ADC_Start_DMA+0x1dc>)
 8002d70:	4293      	cmp	r3, r2
 8002d72:	d105      	bne.n	8002d80 <HAL_ADC_Start_DMA+0x158>
 8002d74:	4b1e      	ldr	r3, [pc, #120]	; (8002df0 <HAL_ADC_Start_DMA+0x1c8>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f003 031f 	and.w	r3, r3, #31
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_ADC_Start_DMA+0x16e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <HAL_ADC_Start_DMA+0x1e0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d129      	bne.n	8002dde <HAL_ADC_Start_DMA+0x1b6>
 8002d8a:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_ADC_Start_DMA+0x1c8>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	2b0f      	cmp	r3, #15
 8002d94:	d823      	bhi.n	8002dde <HAL_ADC_Start_DMA+0x1b6>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d11c      	bne.n	8002dde <HAL_ADC_Start_DMA+0x1b6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	689a      	ldr	r2, [r3, #8]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002db2:	609a      	str	r2, [r3, #8]
 8002db4:	e013      	b.n	8002dde <HAL_ADC_Start_DMA+0x1b6>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a11      	ldr	r2, [pc, #68]	; (8002e00 <HAL_ADC_Start_DMA+0x1d8>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10e      	bne.n	8002dde <HAL_ADC_Start_DMA+0x1b6>
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d107      	bne.n	8002dde <HAL_ADC_Start_DMA+0x1b6>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002ddc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	20000020 	.word	0x20000020
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	40012300 	.word	0x40012300
 8002df4:	08003339 	.word	0x08003339
 8002df8:	080033f3 	.word	0x080033f3
 8002dfc:	0800340f 	.word	0x0800340f
 8002e00:	40012000 	.word	0x40012000
 8002e04:	40012100 	.word	0x40012100
 8002e08:	40012200 	.word	0x40012200

08002e0c <HAL_ADC_Stop_DMA>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Stop_DMA+0x1a>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e038      	b.n	8002e98 <HAL_ADC_Stop_DMA+0x8c>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689a      	ldr	r2, [r3, #8]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f022 0201 	bic.w	r2, r2, #1
 8002e3c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d120      	bne.n	8002e8e <HAL_ADC_Stop_DMA+0x82>
  {
    /* Disable the selected ADC DMA mode */
    hadc->Instance->CR2 &= ~ADC_CR2_DMA;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e5a:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 fd7b 	bl	800395c <HAL_DMA_Abort>
 8002e66:	4603      	mov	r3, r0
 8002e68:	73fb      	strb	r3, [r7, #15]
    
    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8002e78:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	f043 0201 	orr.w	r2, r3, #1
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3710      	adds	r7, #16
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b083      	sub	sp, #12
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d101      	bne.n	8002ef8 <HAL_ADC_ConfigChannel+0x1c>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	e113      	b.n	8003120 <HAL_ADC_ConfigChannel+0x244>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b09      	cmp	r3, #9
 8002f06:	d925      	bls.n	8002f54 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68d9      	ldr	r1, [r3, #12]
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	461a      	mov	r2, r3
 8002f16:	4613      	mov	r3, r2
 8002f18:	005b      	lsls	r3, r3, #1
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3b1e      	subs	r3, #30
 8002f1e:	2207      	movs	r2, #7
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43da      	mvns	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	400a      	ands	r2, r1
 8002f2c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	68d9      	ldr	r1, [r3, #12]
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4618      	mov	r0, r3
 8002f40:	4603      	mov	r3, r0
 8002f42:	005b      	lsls	r3, r3, #1
 8002f44:	4403      	add	r3, r0
 8002f46:	3b1e      	subs	r3, #30
 8002f48:	409a      	lsls	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	60da      	str	r2, [r3, #12]
 8002f52:	e022      	b.n	8002f9a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6919      	ldr	r1, [r3, #16]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	461a      	mov	r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	4413      	add	r3, r2
 8002f68:	2207      	movs	r2, #7
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	400a      	ands	r2, r1
 8002f76:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	6919      	ldr	r1, [r3, #16]
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	4618      	mov	r0, r3
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4403      	add	r3, r0
 8002f90:	409a      	lsls	r2, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	430a      	orrs	r2, r1
 8002f98:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	2b06      	cmp	r3, #6
 8002fa0:	d824      	bhi.n	8002fec <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	4413      	add	r3, r2
 8002fb2:	3b05      	subs	r3, #5
 8002fb4:	221f      	movs	r2, #31
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	400a      	ands	r2, r1
 8002fc2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685a      	ldr	r2, [r3, #4]
 8002fd6:	4613      	mov	r3, r2
 8002fd8:	009b      	lsls	r3, r3, #2
 8002fda:	4413      	add	r3, r2
 8002fdc:	3b05      	subs	r3, #5
 8002fde:	fa00 f203 	lsl.w	r2, r0, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	430a      	orrs	r2, r1
 8002fe8:	635a      	str	r2, [r3, #52]	; 0x34
 8002fea:	e04c      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	2b0c      	cmp	r3, #12
 8002ff2:	d824      	bhi.n	800303e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	3b23      	subs	r3, #35	; 0x23
 8003006:	221f      	movs	r2, #31
 8003008:	fa02 f303 	lsl.w	r3, r2, r3
 800300c:	43da      	mvns	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	400a      	ands	r2, r1
 8003014:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	b29b      	uxth	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4413      	add	r3, r2
 800302e:	3b23      	subs	r3, #35	; 0x23
 8003030:	fa00 f203 	lsl.w	r2, r0, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
 800303c:	e023      	b.n	8003086 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685a      	ldr	r2, [r3, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4413      	add	r3, r2
 800304e:	3b41      	subs	r3, #65	; 0x41
 8003050:	221f      	movs	r2, #31
 8003052:	fa02 f303 	lsl.w	r3, r2, r3
 8003056:	43da      	mvns	r2, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	400a      	ands	r2, r1
 800305e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	4618      	mov	r0, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	3b41      	subs	r3, #65	; 0x41
 800307a:	fa00 f203 	lsl.w	r2, r0, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003086:	4b29      	ldr	r3, [pc, #164]	; (800312c <HAL_ADC_ConfigChannel+0x250>)
 8003088:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a28      	ldr	r2, [pc, #160]	; (8003130 <HAL_ADC_ConfigChannel+0x254>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d10f      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1d8>
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2b12      	cmp	r3, #18
 800309a:	d10b      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a1d      	ldr	r2, [pc, #116]	; (8003130 <HAL_ADC_ConfigChannel+0x254>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d12b      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x23a>
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x1f4>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b11      	cmp	r3, #17
 80030ce:	d122      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a11      	ldr	r2, [pc, #68]	; (8003134 <HAL_ADC_ConfigChannel+0x258>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d111      	bne.n	8003116 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80030f2:	4b11      	ldr	r3, [pc, #68]	; (8003138 <HAL_ADC_ConfigChannel+0x25c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a11      	ldr	r2, [pc, #68]	; (800313c <HAL_ADC_ConfigChannel+0x260>)
 80030f8:	fba2 2303 	umull	r2, r3, r2, r3
 80030fc:	0c9a      	lsrs	r2, r3, #18
 80030fe:	4613      	mov	r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003108:	e002      	b.n	8003110 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3b01      	subs	r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f9      	bne.n	800310a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3714      	adds	r7, #20
 8003124:	46bd      	mov	sp, r7
 8003126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312a:	4770      	bx	lr
 800312c:	40012300 	.word	0x40012300
 8003130:	40012000 	.word	0x40012000
 8003134:	10000012 	.word	0x10000012
 8003138:	20000020 	.word	0x20000020
 800313c:	431bde83 	.word	0x431bde83

08003140 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003148:	4b79      	ldr	r3, [pc, #484]	; (8003330 <ADC_Init+0x1f0>)
 800314a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685a      	ldr	r2, [r3, #4]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	431a      	orrs	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003174:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6859      	ldr	r1, [r3, #4]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	021a      	lsls	r2, r3, #8
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	685a      	ldr	r2, [r3, #4]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003198:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689a      	ldr	r2, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6899      	ldr	r1, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68da      	ldr	r2, [r3, #12]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	4a58      	ldr	r2, [pc, #352]	; (8003334 <ADC_Init+0x1f4>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d022      	beq.n	800321e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031e6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6899      	ldr	r1, [r3, #8]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003208:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6899      	ldr	r1, [r3, #8]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	e00f      	b.n	800323e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	689a      	ldr	r2, [r3, #8]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800322c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800323c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0202 	bic.w	r2, r2, #2
 800324c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	6899      	ldr	r1, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	7e1b      	ldrb	r3, [r3, #24]
 8003258:	005a      	lsls	r2, r3, #1
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	430a      	orrs	r2, r1
 8003260:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685a      	ldr	r2, [r3, #4]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800328a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6859      	ldr	r1, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	3b01      	subs	r3, #1
 8003298:	035a      	lsls	r2, r3, #13
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
 80032a2:	e007      	b.n	80032b4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032b2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80032c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	3b01      	subs	r3, #1
 80032d0:	051a      	lsls	r2, r3, #20
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80032e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6899      	ldr	r1, [r3, #8]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80032f6:	025a      	lsls	r2, r3, #9
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	689a      	ldr	r2, [r3, #8]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6899      	ldr	r1, [r3, #8]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	029a      	lsls	r2, r3, #10
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	3714      	adds	r7, #20
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	40012300 	.word	0x40012300
 8003334:	0f000001 	.word	0x0f000001

08003338 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003344:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800334e:	2b00      	cmp	r3, #0
 8003350:	d13c      	bne.n	80033cc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003356:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d12b      	bne.n	80033c4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003370:	2b00      	cmp	r3, #0
 8003372:	d127      	bne.n	80033c4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800337e:	2b00      	cmp	r3, #0
 8003380:	d006      	beq.n	8003390 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800338c:	2b00      	cmp	r3, #0
 800338e:	d119      	bne.n	80033c4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	685a      	ldr	r2, [r3, #4]
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0220 	bic.w	r2, r2, #32
 800339e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80033c4:	68f8      	ldr	r0, [r7, #12]
 80033c6:	f7fe fe13 	bl	8001ff0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80033ca:	e00e      	b.n	80033ea <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f7ff fd75 	bl	8002ec8 <HAL_ADC_ErrorCallback>
}
 80033de:	e004      	b.n	80033ea <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	4798      	blx	r3
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}

080033f2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80033f2:	b580      	push	{r7, lr}
 80033f4:	b084      	sub	sp, #16
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033fe:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f7ff fd4d 	bl	8002ea0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003406:	bf00      	nop
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800340e:	b580      	push	{r7, lr}
 8003410:	b084      	sub	sp, #16
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800341a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2240      	movs	r2, #64	; 0x40
 8003420:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003426:	f043 0204 	orr.w	r2, r3, #4
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff fd4a 	bl	8002ec8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800346c:	4013      	ands	r3, r2
 800346e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003478:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800347c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003482:	4a04      	ldr	r2, [pc, #16]	; (8003494 <__NVIC_SetPriorityGrouping+0x44>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	60d3      	str	r3, [r2, #12]
}
 8003488:	bf00      	nop
 800348a:	3714      	adds	r7, #20
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800349c:	4b04      	ldr	r3, [pc, #16]	; (80034b0 <__NVIC_GetPriorityGrouping+0x18>)
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	0a1b      	lsrs	r3, r3, #8
 80034a2:	f003 0307 	and.w	r3, r3, #7
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000ed00 	.word	0xe000ed00

080034b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	db0b      	blt.n	80034de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034c6:	79fb      	ldrb	r3, [r7, #7]
 80034c8:	f003 021f 	and.w	r2, r3, #31
 80034cc:	4907      	ldr	r1, [pc, #28]	; (80034ec <__NVIC_EnableIRQ+0x38>)
 80034ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d2:	095b      	lsrs	r3, r3, #5
 80034d4:	2001      	movs	r0, #1
 80034d6:	fa00 f202 	lsl.w	r2, r0, r2
 80034da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
 80034ea:	bf00      	nop
 80034ec:	e000e100 	.word	0xe000e100

080034f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	6039      	str	r1, [r7, #0]
 80034fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003500:	2b00      	cmp	r3, #0
 8003502:	db0a      	blt.n	800351a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	b2da      	uxtb	r2, r3
 8003508:	490c      	ldr	r1, [pc, #48]	; (800353c <__NVIC_SetPriority+0x4c>)
 800350a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350e:	0112      	lsls	r2, r2, #4
 8003510:	b2d2      	uxtb	r2, r2
 8003512:	440b      	add	r3, r1
 8003514:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003518:	e00a      	b.n	8003530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	b2da      	uxtb	r2, r3
 800351e:	4908      	ldr	r1, [pc, #32]	; (8003540 <__NVIC_SetPriority+0x50>)
 8003520:	79fb      	ldrb	r3, [r7, #7]
 8003522:	f003 030f 	and.w	r3, r3, #15
 8003526:	3b04      	subs	r3, #4
 8003528:	0112      	lsls	r2, r2, #4
 800352a:	b2d2      	uxtb	r2, r2
 800352c:	440b      	add	r3, r1
 800352e:	761a      	strb	r2, [r3, #24]
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	e000e100 	.word	0xe000e100
 8003540:	e000ed00 	.word	0xe000ed00

08003544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003544:	b480      	push	{r7}
 8003546:	b089      	sub	sp, #36	; 0x24
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003558:	69fb      	ldr	r3, [r7, #28]
 800355a:	f1c3 0307 	rsb	r3, r3, #7
 800355e:	2b04      	cmp	r3, #4
 8003560:	bf28      	it	cs
 8003562:	2304      	movcs	r3, #4
 8003564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	3304      	adds	r3, #4
 800356a:	2b06      	cmp	r3, #6
 800356c:	d902      	bls.n	8003574 <NVIC_EncodePriority+0x30>
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	3b03      	subs	r3, #3
 8003572:	e000      	b.n	8003576 <NVIC_EncodePriority+0x32>
 8003574:	2300      	movs	r3, #0
 8003576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003578:	f04f 32ff 	mov.w	r2, #4294967295
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fa02 f303 	lsl.w	r3, r2, r3
 8003582:	43da      	mvns	r2, r3
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	401a      	ands	r2, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800358c:	f04f 31ff 	mov.w	r1, #4294967295
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	fa01 f303 	lsl.w	r3, r1, r3
 8003596:	43d9      	mvns	r1, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	4313      	orrs	r3, r2
         );
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3724      	adds	r7, #36	; 0x24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
	...

080035ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	3b01      	subs	r3, #1
 80035b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035bc:	d301      	bcc.n	80035c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035be:	2301      	movs	r3, #1
 80035c0:	e00f      	b.n	80035e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <SysTick_Config+0x40>)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	3b01      	subs	r3, #1
 80035c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ca:	210f      	movs	r1, #15
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f7ff ff8e 	bl	80034f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035d4:	4b05      	ldr	r3, [pc, #20]	; (80035ec <SysTick_Config+0x40>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035da:	4b04      	ldr	r3, [pc, #16]	; (80035ec <SysTick_Config+0x40>)
 80035dc:	2207      	movs	r2, #7
 80035de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	e000e010 	.word	0xe000e010

080035f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b082      	sub	sp, #8
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f7ff ff29 	bl	8003450 <__NVIC_SetPriorityGrouping>
}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003606:	b580      	push	{r7, lr}
 8003608:	b086      	sub	sp, #24
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003618:	f7ff ff3e 	bl	8003498 <__NVIC_GetPriorityGrouping>
 800361c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	68b9      	ldr	r1, [r7, #8]
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f7ff ff8e 	bl	8003544 <NVIC_EncodePriority>
 8003628:	4602      	mov	r2, r0
 800362a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800362e:	4611      	mov	r1, r2
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff ff5d 	bl	80034f0 <__NVIC_SetPriority>
}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	4603      	mov	r3, r0
 8003646:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff ff31 	bl	80034b4 <__NVIC_EnableIRQ>
}
 8003652:	bf00      	nop
 8003654:	3708      	adds	r7, #8
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800365a:	b580      	push	{r7, lr}
 800365c:	b082      	sub	sp, #8
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff ffa2 	bl	80035ac <SysTick_Config>
 8003668:	4603      	mov	r3, r0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b082      	sub	sp, #8
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d101      	bne.n	8003684 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e014      	b.n	80036ae <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	791b      	ldrb	r3, [r3, #4]
 8003688:	b2db      	uxtb	r3, r3
 800368a:	2b00      	cmp	r3, #0
 800368c:	d105      	bne.n	800369a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f7fd fc6f 	bl	8000f78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}

080036b6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80036b6:	b480      	push	{r7}
 80036b8:	b087      	sub	sp, #28
 80036ba:	af00      	add	r7, sp, #0
 80036bc:	60f8      	str	r0, [r7, #12]
 80036be:	60b9      	str	r1, [r7, #8]
 80036c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	2300      	movs	r3, #0
 80036c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	795b      	ldrb	r3, [r3, #5]
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_DAC_ConfigChannel+0x20>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e036      	b.n	8003744 <HAL_DAC_ConfigChannel+0x8e>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2202      	movs	r2, #2
 80036e0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80036ea:	f640 72fe 	movw	r2, #4094	; 0xffe
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	fa02 f303 	lsl.w	r3, r2, r3
 80036f4:	43db      	mvns	r3, r3
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4013      	ands	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	681a      	ldr	r2, [r3, #0]
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	4313      	orrs	r3, r2
 8003706:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	fa02 f303 	lsl.w	r3, r2, r3
 8003710:	697a      	ldr	r2, [r7, #20]
 8003712:	4313      	orrs	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6819      	ldr	r1, [r3, #0]
 8003724:	22c0      	movs	r2, #192	; 0xc0
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	fa02 f303 	lsl.w	r3, r2, r3
 800372c:	43da      	mvns	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	400a      	ands	r2, r1
 8003734:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8003742:	2300      	movs	r3, #0
}
 8003744:	4618      	mov	r0, r3
 8003746:	371c      	adds	r7, #28
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b086      	sub	sp, #24
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003758:	2300      	movs	r3, #0
 800375a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800375c:	f7ff f8d4 	bl	8002908 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e099      	b.n	80038a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f022 0201 	bic.w	r2, r2, #1
 800378a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800378c:	e00f      	b.n	80037ae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800378e:	f7ff f8bb 	bl	8002908 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	2b05      	cmp	r3, #5
 800379a:	d908      	bls.n	80037ae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2220      	movs	r2, #32
 80037a0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2203      	movs	r2, #3
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e078      	b.n	80038a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d1e8      	bne.n	800378e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4b38      	ldr	r3, [pc, #224]	; (80038a8 <HAL_DMA_Init+0x158>)
 80037c8:	4013      	ands	r3, r2
 80037ca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037da:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80037e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80037f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	2b04      	cmp	r3, #4
 8003806:	d107      	bne.n	8003818 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003810:	4313      	orrs	r3, r2
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	f023 0307 	bic.w	r3, r3, #7
 800382e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003834:	697a      	ldr	r2, [r7, #20]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383e:	2b04      	cmp	r3, #4
 8003840:	d117      	bne.n	8003872 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003850:	2b00      	cmp	r3, #0
 8003852:	d00e      	beq.n	8003872 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fb01 	bl	8003e5c <DMA_CheckFifoParam>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d008      	beq.n	8003872 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2240      	movs	r2, #64	; 0x40
 8003864:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800386e:	2301      	movs	r3, #1
 8003870:	e016      	b.n	80038a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	697a      	ldr	r2, [r7, #20]
 8003878:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 fab8 	bl	8003df0 <DMA_CalcBaseAndBitshift>
 8003880:	4603      	mov	r3, r0
 8003882:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	223f      	movs	r2, #63	; 0x3f
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2200      	movs	r2, #0
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800389e:	2300      	movs	r3, #0
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3718      	adds	r7, #24
 80038a4:	46bd      	mov	sp, r7
 80038a6:	bd80      	pop	{r7, pc}
 80038a8:	f010803f 	.word	0xf010803f

080038ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b086      	sub	sp, #24
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ba:	2300      	movs	r3, #0
 80038bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_DMA_Start_IT+0x26>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e040      	b.n	8003954 <HAL_DMA_Start_IT+0xa8>
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d12f      	bne.n	8003946 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2202      	movs	r2, #2
 80038ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	68b9      	ldr	r1, [r7, #8]
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 fa4a 	bl	8003d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003904:	223f      	movs	r2, #63	; 0x3f
 8003906:	409a      	lsls	r2, r3
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f042 0216 	orr.w	r2, r2, #22
 800391a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	2b00      	cmp	r3, #0
 8003922:	d007      	beq.n	8003934 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0208 	orr.w	r2, r2, #8
 8003932:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e005      	b.n	8003952 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800394e:	2302      	movs	r3, #2
 8003950:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003952:	7dfb      	ldrb	r3, [r7, #23]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3718      	adds	r7, #24
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800396a:	f7fe ffcd 	bl	8002908 <HAL_GetTick>
 800396e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b02      	cmp	r3, #2
 800397a:	d008      	beq.n	800398e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e052      	b.n	8003a34 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0216 	bic.w	r2, r2, #22
 800399c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	695a      	ldr	r2, [r3, #20]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039ac:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d103      	bne.n	80039be <HAL_DMA_Abort+0x62>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d007      	beq.n	80039ce <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0208 	bic.w	r2, r2, #8
 80039cc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80039de:	e013      	b.n	8003a08 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80039e0:	f7fe ff92 	bl	8002908 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b05      	cmp	r3, #5
 80039ec:	d90c      	bls.n	8003a08 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2220      	movs	r2, #32
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2203      	movs	r2, #3
 8003a00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e015      	b.n	8003a34 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1e4      	bne.n	80039e0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	223f      	movs	r2, #63	; 0x3f
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003a32:	2300      	movs	r3, #0
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}

08003a3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a4a:	b2db      	uxtb	r3, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d004      	beq.n	8003a5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e00c      	b.n	8003a74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2205      	movs	r2, #5
 8003a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f022 0201 	bic.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b086      	sub	sp, #24
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a8c:	4b92      	ldr	r3, [pc, #584]	; (8003cd8 <HAL_DMA_IRQHandler+0x258>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a92      	ldr	r2, [pc, #584]	; (8003cdc <HAL_DMA_IRQHandler+0x25c>)
 8003a92:	fba2 2303 	umull	r2, r3, r2, r3
 8003a96:	0a9b      	lsrs	r3, r3, #10
 8003a98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aaa:	2208      	movs	r2, #8
 8003aac:	409a      	lsls	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d01a      	beq.n	8003aec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 0304 	and.w	r3, r3, #4
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d013      	beq.n	8003aec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0204 	bic.w	r2, r2, #4
 8003ad2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	2208      	movs	r2, #8
 8003ada:	409a      	lsls	r2, r3
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae4:	f043 0201 	orr.w	r2, r3, #1
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003af0:	2201      	movs	r2, #1
 8003af2:	409a      	lsls	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	4013      	ands	r3, r2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d012      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b0e:	2201      	movs	r2, #1
 8003b10:	409a      	lsls	r2, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b1a:	f043 0202 	orr.w	r2, r3, #2
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b26:	2204      	movs	r2, #4
 8003b28:	409a      	lsls	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0302 	and.w	r3, r3, #2
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b44:	2204      	movs	r2, #4
 8003b46:	409a      	lsls	r2, r3
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b50:	f043 0204 	orr.w	r2, r3, #4
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5c:	2210      	movs	r2, #16
 8003b5e:	409a      	lsls	r2, r3
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	4013      	ands	r3, r2
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d043      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0308 	and.w	r3, r3, #8
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d03c      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b7a:	2210      	movs	r2, #16
 8003b7c:	409a      	lsls	r2, r3
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d018      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d024      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3
 8003bae:	e01f      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d01b      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	4798      	blx	r3
 8003bc0:	e016      	b.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d107      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0208 	bic.w	r2, r2, #8
 8003bde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d003      	beq.n	8003bf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	2220      	movs	r2, #32
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	f000 808e 	beq.w	8003d1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0310 	and.w	r3, r3, #16
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8086 	beq.w	8003d1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c16:	2220      	movs	r2, #32
 8003c18:	409a      	lsls	r2, r3
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003c24:	b2db      	uxtb	r3, r3
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	d136      	bne.n	8003c98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 0216 	bic.w	r2, r2, #22
 8003c38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	695a      	ldr	r2, [r3, #20]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d103      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x1da>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d007      	beq.n	8003c6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f022 0208 	bic.w	r2, r2, #8
 8003c68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c6e:	223f      	movs	r2, #63	; 0x3f
 8003c70:	409a      	lsls	r2, r3
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d07d      	beq.n	8003d8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	4798      	blx	r3
        }
        return;
 8003c96:	e078      	b.n	8003d8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d01c      	beq.n	8003ce0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d108      	bne.n	8003cc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d030      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	4798      	blx	r3
 8003cc4:	e02b      	b.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d027      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	4798      	blx	r3
 8003cd6:	e022      	b.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
 8003cd8:	20000020 	.word	0x20000020
 8003cdc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f022 0210 	bic.w	r2, r2, #16
 8003cfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d032      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d022      	beq.n	8003d78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2205      	movs	r2, #5
 8003d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	3301      	adds	r3, #1
 8003d4e:	60bb      	str	r3, [r7, #8]
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d307      	bcc.n	8003d66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1f2      	bne.n	8003d4a <HAL_DMA_IRQHandler+0x2ca>
 8003d64:	e000      	b.n	8003d68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003d66:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2201      	movs	r2, #1
 8003d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d005      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	4798      	blx	r3
 8003d88:	e000      	b.n	8003d8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003d8a:	bf00      	nop
    }
  }
}
 8003d8c:	3718      	adds	r7, #24
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop

08003d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
 8003da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	683a      	ldr	r2, [r7, #0]
 8003db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b40      	cmp	r3, #64	; 0x40
 8003dc0:	d108      	bne.n	8003dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	68ba      	ldr	r2, [r7, #8]
 8003dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003dd2:	e007      	b.n	8003de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	687a      	ldr	r2, [r7, #4]
 8003de2:	60da      	str	r2, [r3, #12]
}
 8003de4:	bf00      	nop
 8003de6:	3714      	adds	r7, #20
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr

08003df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	3b10      	subs	r3, #16
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <DMA_CalcBaseAndBitshift+0x64>)
 8003e02:	fba2 2303 	umull	r2, r3, r2, r3
 8003e06:	091b      	lsrs	r3, r3, #4
 8003e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003e0a:	4a13      	ldr	r2, [pc, #76]	; (8003e58 <DMA_CalcBaseAndBitshift+0x68>)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	4413      	add	r3, r2
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2b03      	cmp	r3, #3
 8003e1c:	d909      	bls.n	8003e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e26:	f023 0303 	bic.w	r3, r3, #3
 8003e2a:	1d1a      	adds	r2, r3, #4
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8003e30:	e007      	b.n	8003e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003e3a:	f023 0303 	bic.w	r3, r3, #3
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3714      	adds	r7, #20
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	aaaaaaab 	.word	0xaaaaaaab
 8003e58:	08007720 	.word	0x08007720

08003e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b085      	sub	sp, #20
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	699b      	ldr	r3, [r3, #24]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d11f      	bne.n	8003eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b03      	cmp	r3, #3
 8003e7a:	d855      	bhi.n	8003f28 <DMA_CheckFifoParam+0xcc>
 8003e7c:	a201      	add	r2, pc, #4	; (adr r2, 8003e84 <DMA_CheckFifoParam+0x28>)
 8003e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e82:	bf00      	nop
 8003e84:	08003e95 	.word	0x08003e95
 8003e88:	08003ea7 	.word	0x08003ea7
 8003e8c:	08003e95 	.word	0x08003e95
 8003e90:	08003f29 	.word	0x08003f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d045      	beq.n	8003f2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ea4:	e042      	b.n	8003f2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003eae:	d13f      	bne.n	8003f30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003eb4:	e03c      	b.n	8003f30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ebe:	d121      	bne.n	8003f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d836      	bhi.n	8003f34 <DMA_CheckFifoParam+0xd8>
 8003ec6:	a201      	add	r2, pc, #4	; (adr r2, 8003ecc <DMA_CheckFifoParam+0x70>)
 8003ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ecc:	08003edd 	.word	0x08003edd
 8003ed0:	08003ee3 	.word	0x08003ee3
 8003ed4:	08003edd 	.word	0x08003edd
 8003ed8:	08003ef5 	.word	0x08003ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
      break;
 8003ee0:	e02f      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d024      	beq.n	8003f38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ef2:	e021      	b.n	8003f38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003efc:	d11e      	bne.n	8003f3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003f02:	e01b      	b.n	8003f3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d902      	bls.n	8003f10 <DMA_CheckFifoParam+0xb4>
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d003      	beq.n	8003f16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003f0e:	e018      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
      break;
 8003f14:	e015      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	73fb      	strb	r3, [r7, #15]
      break;
 8003f26:	e00b      	b.n	8003f40 <DMA_CheckFifoParam+0xe4>
      break;
 8003f28:	bf00      	nop
 8003f2a:	e00a      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f2c:	bf00      	nop
 8003f2e:	e008      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f30:	bf00      	nop
 8003f32:	e006      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f34:	bf00      	nop
 8003f36:	e004      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f38:	bf00      	nop
 8003f3a:	e002      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;   
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <DMA_CheckFifoParam+0xe6>
      break;
 8003f40:	bf00      	nop
    }
  } 
  
  return status; 
 8003f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b089      	sub	sp, #36	; 0x24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f62:	2300      	movs	r3, #0
 8003f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f66:	2300      	movs	r3, #0
 8003f68:	61fb      	str	r3, [r7, #28]
 8003f6a:	e177      	b.n	800425c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	697a      	ldr	r2, [r7, #20]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	f040 8166 	bne.w	8004256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d00b      	beq.n	8003faa <HAL_GPIO_Init+0x5a>
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d007      	beq.n	8003faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003f9e:	2b11      	cmp	r3, #17
 8003fa0:	d003      	beq.n	8003faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	2b12      	cmp	r3, #18
 8003fa8:	d130      	bne.n	800400c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	2203      	movs	r2, #3
 8003fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003fba:	43db      	mvns	r3, r3
 8003fbc:	69ba      	ldr	r2, [r7, #24]
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	69ba      	ldr	r2, [r7, #24]
 8003fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	091b      	lsrs	r3, r3, #4
 8003ff6:	f003 0201 	and.w	r2, r3, #1
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8004000:	69ba      	ldr	r2, [r7, #24]
 8004002:	4313      	orrs	r3, r2
 8004004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	005b      	lsls	r3, r3, #1
 8004016:	2203      	movs	r2, #3
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b02      	cmp	r3, #2
 8004042:	d003      	beq.n	800404c <HAL_GPIO_Init+0xfc>
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2b12      	cmp	r3, #18
 800404a:	d123      	bne.n	8004094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	08da      	lsrs	r2, r3, #3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	3208      	adds	r2, #8
 8004054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	f003 0307 	and.w	r3, r3, #7
 8004060:	009b      	lsls	r3, r3, #2
 8004062:	220f      	movs	r2, #15
 8004064:	fa02 f303 	lsl.w	r3, r2, r3
 8004068:	43db      	mvns	r3, r3
 800406a:	69ba      	ldr	r2, [r7, #24]
 800406c:	4013      	ands	r3, r2
 800406e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	691a      	ldr	r2, [r3, #16]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0307 	and.w	r3, r3, #7
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	fa02 f303 	lsl.w	r3, r2, r3
 8004080:	69ba      	ldr	r2, [r7, #24]
 8004082:	4313      	orrs	r3, r2
 8004084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	08da      	lsrs	r2, r3, #3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	3208      	adds	r2, #8
 800408e:	69b9      	ldr	r1, [r7, #24]
 8004090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	2203      	movs	r2, #3
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f003 0203 	and.w	r2, r3, #3
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	685b      	ldr	r3, [r3, #4]
 80040cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	f000 80c0 	beq.w	8004256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
 80040da:	4b65      	ldr	r3, [pc, #404]	; (8004270 <HAL_GPIO_Init+0x320>)
 80040dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040de:	4a64      	ldr	r2, [pc, #400]	; (8004270 <HAL_GPIO_Init+0x320>)
 80040e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040e4:	6453      	str	r3, [r2, #68]	; 0x44
 80040e6:	4b62      	ldr	r3, [pc, #392]	; (8004270 <HAL_GPIO_Init+0x320>)
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040f2:	4a60      	ldr	r2, [pc, #384]	; (8004274 <HAL_GPIO_Init+0x324>)
 80040f4:	69fb      	ldr	r3, [r7, #28]
 80040f6:	089b      	lsrs	r3, r3, #2
 80040f8:	3302      	adds	r3, #2
 80040fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	220f      	movs	r2, #15
 800410a:	fa02 f303 	lsl.w	r3, r2, r3
 800410e:	43db      	mvns	r3, r3
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	4013      	ands	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a57      	ldr	r2, [pc, #348]	; (8004278 <HAL_GPIO_Init+0x328>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d037      	beq.n	800418e <HAL_GPIO_Init+0x23e>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a56      	ldr	r2, [pc, #344]	; (800427c <HAL_GPIO_Init+0x32c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d031      	beq.n	800418a <HAL_GPIO_Init+0x23a>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a55      	ldr	r2, [pc, #340]	; (8004280 <HAL_GPIO_Init+0x330>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d02b      	beq.n	8004186 <HAL_GPIO_Init+0x236>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a54      	ldr	r2, [pc, #336]	; (8004284 <HAL_GPIO_Init+0x334>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d025      	beq.n	8004182 <HAL_GPIO_Init+0x232>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a53      	ldr	r2, [pc, #332]	; (8004288 <HAL_GPIO_Init+0x338>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01f      	beq.n	800417e <HAL_GPIO_Init+0x22e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a52      	ldr	r2, [pc, #328]	; (800428c <HAL_GPIO_Init+0x33c>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d019      	beq.n	800417a <HAL_GPIO_Init+0x22a>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a51      	ldr	r2, [pc, #324]	; (8004290 <HAL_GPIO_Init+0x340>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_GPIO_Init+0x226>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a50      	ldr	r2, [pc, #320]	; (8004294 <HAL_GPIO_Init+0x344>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00d      	beq.n	8004172 <HAL_GPIO_Init+0x222>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a4f      	ldr	r2, [pc, #316]	; (8004298 <HAL_GPIO_Init+0x348>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d007      	beq.n	800416e <HAL_GPIO_Init+0x21e>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a4e      	ldr	r2, [pc, #312]	; (800429c <HAL_GPIO_Init+0x34c>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <HAL_GPIO_Init+0x21a>
 8004166:	2309      	movs	r3, #9
 8004168:	e012      	b.n	8004190 <HAL_GPIO_Init+0x240>
 800416a:	230a      	movs	r3, #10
 800416c:	e010      	b.n	8004190 <HAL_GPIO_Init+0x240>
 800416e:	2308      	movs	r3, #8
 8004170:	e00e      	b.n	8004190 <HAL_GPIO_Init+0x240>
 8004172:	2307      	movs	r3, #7
 8004174:	e00c      	b.n	8004190 <HAL_GPIO_Init+0x240>
 8004176:	2306      	movs	r3, #6
 8004178:	e00a      	b.n	8004190 <HAL_GPIO_Init+0x240>
 800417a:	2305      	movs	r3, #5
 800417c:	e008      	b.n	8004190 <HAL_GPIO_Init+0x240>
 800417e:	2304      	movs	r3, #4
 8004180:	e006      	b.n	8004190 <HAL_GPIO_Init+0x240>
 8004182:	2303      	movs	r3, #3
 8004184:	e004      	b.n	8004190 <HAL_GPIO_Init+0x240>
 8004186:	2302      	movs	r3, #2
 8004188:	e002      	b.n	8004190 <HAL_GPIO_Init+0x240>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_GPIO_Init+0x240>
 800418e:	2300      	movs	r3, #0
 8004190:	69fa      	ldr	r2, [r7, #28]
 8004192:	f002 0203 	and.w	r2, r2, #3
 8004196:	0092      	lsls	r2, r2, #2
 8004198:	4093      	lsls	r3, r2
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4313      	orrs	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041a0:	4934      	ldr	r1, [pc, #208]	; (8004274 <HAL_GPIO_Init+0x324>)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	089b      	lsrs	r3, r3, #2
 80041a6:	3302      	adds	r3, #2
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041ae:	4b3c      	ldr	r3, [pc, #240]	; (80042a0 <HAL_GPIO_Init+0x350>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	43db      	mvns	r3, r3
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	4013      	ands	r3, r2
 80041bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80041ca:	69ba      	ldr	r2, [r7, #24]
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041d2:	4a33      	ldr	r2, [pc, #204]	; (80042a0 <HAL_GPIO_Init+0x350>)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80041d8:	4b31      	ldr	r3, [pc, #196]	; (80042a0 <HAL_GPIO_Init+0x350>)
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041de:	693b      	ldr	r3, [r7, #16]
 80041e0:	43db      	mvns	r3, r3
 80041e2:	69ba      	ldr	r2, [r7, #24]
 80041e4:	4013      	ands	r3, r2
 80041e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041f4:	69ba      	ldr	r2, [r7, #24]
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041fc:	4a28      	ldr	r2, [pc, #160]	; (80042a0 <HAL_GPIO_Init+0x350>)
 80041fe:	69bb      	ldr	r3, [r7, #24]
 8004200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004202:	4b27      	ldr	r3, [pc, #156]	; (80042a0 <HAL_GPIO_Init+0x350>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	43db      	mvns	r3, r3
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	4013      	ands	r3, r2
 8004210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	693b      	ldr	r3, [r7, #16]
 8004222:	4313      	orrs	r3, r2
 8004224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004226:	4a1e      	ldr	r2, [pc, #120]	; (80042a0 <HAL_GPIO_Init+0x350>)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800422c:	4b1c      	ldr	r3, [pc, #112]	; (80042a0 <HAL_GPIO_Init+0x350>)
 800422e:	68db      	ldr	r3, [r3, #12]
 8004230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	43db      	mvns	r3, r3
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4013      	ands	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	4313      	orrs	r3, r2
 800424e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004250:	4a13      	ldr	r2, [pc, #76]	; (80042a0 <HAL_GPIO_Init+0x350>)
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	3301      	adds	r3, #1
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	2b0f      	cmp	r3, #15
 8004260:	f67f ae84 	bls.w	8003f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004264:	bf00      	nop
 8004266:	3724      	adds	r7, #36	; 0x24
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	40023800 	.word	0x40023800
 8004274:	40013800 	.word	0x40013800
 8004278:	40020000 	.word	0x40020000
 800427c:	40020400 	.word	0x40020400
 8004280:	40020800 	.word	0x40020800
 8004284:	40020c00 	.word	0x40020c00
 8004288:	40021000 	.word	0x40021000
 800428c:	40021400 	.word	0x40021400
 8004290:	40021800 	.word	0x40021800
 8004294:	40021c00 	.word	0x40021c00
 8004298:	40022000 	.word	0x40022000
 800429c:	40022400 	.word	0x40022400
 80042a0:	40013c00 	.word	0x40013c00

080042a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	691a      	ldr	r2, [r3, #16]
 80042b4:	887b      	ldrh	r3, [r7, #2]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d002      	beq.n	80042c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80042bc:	2301      	movs	r3, #1
 80042be:	73fb      	strb	r3, [r7, #15]
 80042c0:	e001      	b.n	80042c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80042c2:	2300      	movs	r3, #0
 80042c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80042c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3714      	adds	r7, #20
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	460b      	mov	r3, r1
 80042de:	807b      	strh	r3, [r7, #2]
 80042e0:	4613      	mov	r3, r2
 80042e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042e4:	787b      	ldrb	r3, [r7, #1]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d003      	beq.n	80042f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042ea:	887a      	ldrh	r2, [r7, #2]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042f0:	e003      	b.n	80042fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042f2:	887b      	ldrh	r3, [r7, #2]
 80042f4:	041a      	lsls	r2, r3, #16
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	619a      	str	r2, [r3, #24]
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
	...

08004308 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b082      	sub	sp, #8
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004314:	695a      	ldr	r2, [r3, #20]
 8004316:	88fb      	ldrh	r3, [r7, #6]
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d006      	beq.n	800432c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800431e:	4a05      	ldr	r2, [pc, #20]	; (8004334 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004320:	88fb      	ldrh	r3, [r7, #6]
 8004322:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004324:	88fb      	ldrh	r3, [r7, #6]
 8004326:	4618      	mov	r0, r3
 8004328:	f7fd fb2c 	bl	8001984 <HAL_GPIO_EXTI_Callback>
  }
}
 800432c:	bf00      	nop
 800432e:	3708      	adds	r7, #8
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	40013c00 	.word	0x40013c00

08004338 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b084      	sub	sp, #16
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	e11f      	b.n	800458a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004350:	b2db      	uxtb	r3, r3
 8004352:	2b00      	cmp	r3, #0
 8004354:	d106      	bne.n	8004364 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fc fff6 	bl	8001350 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2224      	movs	r2, #36	; 0x24
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800438a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800439a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800439c:	f001 fc34 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80043a0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	4a7b      	ldr	r2, [pc, #492]	; (8004594 <HAL_I2C_Init+0x25c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d807      	bhi.n	80043bc <HAL_I2C_Init+0x84>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a7a      	ldr	r2, [pc, #488]	; (8004598 <HAL_I2C_Init+0x260>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	bf94      	ite	ls
 80043b4:	2301      	movls	r3, #1
 80043b6:	2300      	movhi	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	e006      	b.n	80043ca <HAL_I2C_Init+0x92>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4a77      	ldr	r2, [pc, #476]	; (800459c <HAL_I2C_Init+0x264>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	bf94      	ite	ls
 80043c4:	2301      	movls	r3, #1
 80043c6:	2300      	movhi	r3, #0
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d001      	beq.n	80043d2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80043ce:	2301      	movs	r3, #1
 80043d0:	e0db      	b.n	800458a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a72      	ldr	r2, [pc, #456]	; (80045a0 <HAL_I2C_Init+0x268>)
 80043d6:	fba2 2303 	umull	r2, r3, r2, r3
 80043da:	0c9b      	lsrs	r3, r3, #18
 80043dc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	6a1b      	ldr	r3, [r3, #32]
 80043f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	4a64      	ldr	r2, [pc, #400]	; (8004594 <HAL_I2C_Init+0x25c>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d802      	bhi.n	800440c <HAL_I2C_Init+0xd4>
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	3301      	adds	r3, #1
 800440a:	e009      	b.n	8004420 <HAL_I2C_Init+0xe8>
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004412:	fb02 f303 	mul.w	r3, r2, r3
 8004416:	4a63      	ldr	r2, [pc, #396]	; (80045a4 <HAL_I2C_Init+0x26c>)
 8004418:	fba2 2303 	umull	r2, r3, r2, r3
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	3301      	adds	r3, #1
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6812      	ldr	r2, [r2, #0]
 8004424:	430b      	orrs	r3, r1
 8004426:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004432:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4956      	ldr	r1, [pc, #344]	; (8004594 <HAL_I2C_Init+0x25c>)
 800443c:	428b      	cmp	r3, r1
 800443e:	d80d      	bhi.n	800445c <HAL_I2C_Init+0x124>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	1e59      	subs	r1, r3, #1
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	fbb1 f3f3 	udiv	r3, r1, r3
 800444e:	3301      	adds	r3, #1
 8004450:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004454:	2b04      	cmp	r3, #4
 8004456:	bf38      	it	cc
 8004458:	2304      	movcc	r3, #4
 800445a:	e04f      	b.n	80044fc <HAL_I2C_Init+0x1c4>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d111      	bne.n	8004488 <HAL_I2C_Init+0x150>
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	1e58      	subs	r0, r3, #1
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6859      	ldr	r1, [r3, #4]
 800446c:	460b      	mov	r3, r1
 800446e:	005b      	lsls	r3, r3, #1
 8004470:	440b      	add	r3, r1
 8004472:	fbb0 f3f3 	udiv	r3, r0, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	2b00      	cmp	r3, #0
 800447e:	bf0c      	ite	eq
 8004480:	2301      	moveq	r3, #1
 8004482:	2300      	movne	r3, #0
 8004484:	b2db      	uxtb	r3, r3
 8004486:	e012      	b.n	80044ae <HAL_I2C_Init+0x176>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	1e58      	subs	r0, r3, #1
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6859      	ldr	r1, [r3, #4]
 8004490:	460b      	mov	r3, r1
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	0099      	lsls	r1, r3, #2
 8004498:	440b      	add	r3, r1
 800449a:	fbb0 f3f3 	udiv	r3, r0, r3
 800449e:	3301      	adds	r3, #1
 80044a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	bf0c      	ite	eq
 80044a8:	2301      	moveq	r3, #1
 80044aa:	2300      	movne	r3, #0
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d001      	beq.n	80044b6 <HAL_I2C_Init+0x17e>
 80044b2:	2301      	movs	r3, #1
 80044b4:	e022      	b.n	80044fc <HAL_I2C_Init+0x1c4>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <HAL_I2C_Init+0x1a4>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1e58      	subs	r0, r3, #1
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6859      	ldr	r1, [r3, #4]
 80044c6:	460b      	mov	r3, r1
 80044c8:	005b      	lsls	r3, r3, #1
 80044ca:	440b      	add	r3, r1
 80044cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80044d0:	3301      	adds	r3, #1
 80044d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044da:	e00f      	b.n	80044fc <HAL_I2C_Init+0x1c4>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	1e58      	subs	r0, r3, #1
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6859      	ldr	r1, [r3, #4]
 80044e4:	460b      	mov	r3, r1
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	0099      	lsls	r1, r3, #2
 80044ec:	440b      	add	r3, r1
 80044ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80044f2:	3301      	adds	r3, #1
 80044f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	6809      	ldr	r1, [r1, #0]
 8004500:	4313      	orrs	r3, r2
 8004502:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	69da      	ldr	r2, [r3, #28]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	431a      	orrs	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800452a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6911      	ldr	r1, [r2, #16]
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	68d2      	ldr	r2, [r2, #12]
 8004536:	4311      	orrs	r1, r2
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	430b      	orrs	r3, r1
 800453e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695a      	ldr	r2, [r3, #20]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f042 0201 	orr.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2220      	movs	r2, #32
 8004576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3710      	adds	r7, #16
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	000186a0 	.word	0x000186a0
 8004598:	001e847f 	.word	0x001e847f
 800459c:	003d08ff 	.word	0x003d08ff
 80045a0:	431bde83 	.word	0x431bde83
 80045a4:	10624dd3 	.word	0x10624dd3

080045a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af02      	add	r7, sp, #8
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	607a      	str	r2, [r7, #4]
 80045b2:	461a      	mov	r2, r3
 80045b4:	460b      	mov	r3, r1
 80045b6:	817b      	strh	r3, [r7, #10]
 80045b8:	4613      	mov	r3, r2
 80045ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045bc:	f7fe f9a4 	bl	8002908 <HAL_GetTick>
 80045c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b20      	cmp	r3, #32
 80045cc:	f040 80e0 	bne.w	8004790 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	2319      	movs	r3, #25
 80045d6:	2201      	movs	r2, #1
 80045d8:	4970      	ldr	r1, [pc, #448]	; (800479c <HAL_I2C_Master_Transmit+0x1f4>)
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f000 fc58 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 80045e0:	4603      	mov	r3, r0
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80045e6:	2302      	movs	r3, #2
 80045e8:	e0d3      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_I2C_Master_Transmit+0x50>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e0cc      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f003 0301 	and.w	r3, r3, #1
 800460a:	2b01      	cmp	r3, #1
 800460c:	d007      	beq.n	800461e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f042 0201 	orr.w	r2, r2, #1
 800461c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800462c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2221      	movs	r2, #33	; 0x21
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	2210      	movs	r2, #16
 800463a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	893a      	ldrh	r2, [r7, #8]
 800464e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004654:	b29a      	uxth	r2, r3
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800465e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004660:	8979      	ldrh	r1, [r7, #10]
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	6a3a      	ldr	r2, [r7, #32]
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f000 fac2 	bl	8004bf0 <I2C_MasterRequestWrite>
 800466c:	4603      	mov	r3, r0
 800466e:	2b00      	cmp	r3, #0
 8004670:	d001      	beq.n	8004676 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e08d      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004676:	2300      	movs	r3, #0
 8004678:	613b      	str	r3, [r7, #16]
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	695b      	ldr	r3, [r3, #20]
 8004680:	613b      	str	r3, [r7, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	613b      	str	r3, [r7, #16]
 800468a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800468c:	e066      	b.n	800475c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	6a39      	ldr	r1, [r7, #32]
 8004692:	68f8      	ldr	r0, [r7, #12]
 8004694:	f000 fcd2 	bl	800503c <I2C_WaitOnTXEFlagUntilTimeout>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00d      	beq.n	80046ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a2:	2b04      	cmp	r3, #4
 80046a4:	d107      	bne.n	80046b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e06b      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046be:	781a      	ldrb	r2, [r3, #0]
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ca:	1c5a      	adds	r2, r3, #1
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d4:	b29b      	uxth	r3, r3
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b29a      	uxth	r2, r3
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e2:	3b01      	subs	r3, #1
 80046e4:	b29a      	uxth	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b04      	cmp	r3, #4
 80046f6:	d11b      	bne.n	8004730 <HAL_I2C_Master_Transmit+0x188>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d017      	beq.n	8004730 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004728:	3b01      	subs	r3, #1
 800472a:	b29a      	uxth	r2, r3
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	6a39      	ldr	r1, [r7, #32]
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fcc2 	bl	80050be <I2C_WaitOnBTFFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	2b04      	cmp	r3, #4
 8004746:	d107      	bne.n	8004758 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004756:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e01a      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004760:	2b00      	cmp	r3, #0
 8004762:	d194      	bne.n	800468e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004772:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	2220      	movs	r2, #32
 8004778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3718      	adds	r7, #24
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	00100002 	.word	0x00100002
 80047a0:	ffff0000 	.word	0xffff0000

080047a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08c      	sub	sp, #48	; 0x30
 80047a8:	af02      	add	r7, sp, #8
 80047aa:	60f8      	str	r0, [r7, #12]
 80047ac:	607a      	str	r2, [r7, #4]
 80047ae:	461a      	mov	r2, r3
 80047b0:	460b      	mov	r3, r1
 80047b2:	817b      	strh	r3, [r7, #10]
 80047b4:	4613      	mov	r3, r2
 80047b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80047b8:	f7fe f8a6 	bl	8002908 <HAL_GetTick>
 80047bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b20      	cmp	r3, #32
 80047c8:	f040 820b 	bne.w	8004be2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	9300      	str	r3, [sp, #0]
 80047d0:	2319      	movs	r3, #25
 80047d2:	2201      	movs	r2, #1
 80047d4:	497c      	ldr	r1, [pc, #496]	; (80049c8 <HAL_I2C_Master_Receive+0x224>)
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f000 fb5a 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80047e2:	2302      	movs	r3, #2
 80047e4:	e1fe      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d101      	bne.n	80047f4 <HAL_I2C_Master_Receive+0x50>
 80047f0:	2302      	movs	r3, #2
 80047f2:	e1f7      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b01      	cmp	r3, #1
 8004808:	d007      	beq.n	800481a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f042 0201 	orr.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004828:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2222      	movs	r2, #34	; 0x22
 800482e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2210      	movs	r2, #16
 8004836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	2200      	movs	r2, #0
 800483e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	893a      	ldrh	r2, [r7, #8]
 800484a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004850:	b29a      	uxth	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	4a5c      	ldr	r2, [pc, #368]	; (80049cc <HAL_I2C_Master_Receive+0x228>)
 800485a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800485c:	8979      	ldrh	r1, [r7, #10]
 800485e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004860:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fa46 	bl	8004cf4 <I2C_MasterRequestRead>
 8004868:	4603      	mov	r3, r0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e1b8      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004876:	2b00      	cmp	r3, #0
 8004878:	d113      	bne.n	80048a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800487a:	2300      	movs	r3, #0
 800487c:	623b      	str	r3, [r7, #32]
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	695b      	ldr	r3, [r3, #20]
 8004884:	623b      	str	r3, [r7, #32]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800489e:	601a      	str	r2, [r3, #0]
 80048a0:	e18c      	b.n	8004bbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d11b      	bne.n	80048e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ba:	2300      	movs	r3, #0
 80048bc:	61fb      	str	r3, [r7, #28]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	61fb      	str	r3, [r7, #28]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	699b      	ldr	r3, [r3, #24]
 80048cc:	61fb      	str	r3, [r7, #28]
 80048ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048de:	601a      	str	r2, [r3, #0]
 80048e0:	e16c      	b.n	8004bbc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d11b      	bne.n	8004922 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004908:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800490a:	2300      	movs	r3, #0
 800490c:	61bb      	str	r3, [r7, #24]
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	61bb      	str	r3, [r7, #24]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	61bb      	str	r3, [r7, #24]
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	e14c      	b.n	8004bbc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004930:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004932:	2300      	movs	r3, #0
 8004934:	617b      	str	r3, [r7, #20]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	617b      	str	r3, [r7, #20]
 8004946:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004948:	e138      	b.n	8004bbc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800494e:	2b03      	cmp	r3, #3
 8004950:	f200 80f1 	bhi.w	8004b36 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004958:	2b01      	cmp	r3, #1
 800495a:	d123      	bne.n	80049a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800495c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800495e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fbed 	bl	8005140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e139      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691a      	ldr	r2, [r3, #16]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497a:	b2d2      	uxtb	r2, r2
 800497c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800498c:	3b01      	subs	r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004998:	b29b      	uxth	r3, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	b29a      	uxth	r2, r3
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80049a2:	e10b      	b.n	8004bbc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049a8:	2b02      	cmp	r3, #2
 80049aa:	d14e      	bne.n	8004a4a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ae:	9300      	str	r3, [sp, #0]
 80049b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b2:	2200      	movs	r2, #0
 80049b4:	4906      	ldr	r1, [pc, #24]	; (80049d0 <HAL_I2C_Master_Receive+0x22c>)
 80049b6:	68f8      	ldr	r0, [r7, #12]
 80049b8:	f000 fa6a 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d008      	beq.n	80049d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e10e      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
 80049c6:	bf00      	nop
 80049c8:	00100002 	.word	0x00100002
 80049cc:	ffff0000 	.word	0xffff0000
 80049d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	691a      	ldr	r2, [r3, #16]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ee:	b2d2      	uxtb	r2, r2
 80049f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	691a      	ldr	r2, [r3, #16]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a20:	b2d2      	uxtb	r2, r2
 8004a22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	1c5a      	adds	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a32:	3b01      	subs	r3, #1
 8004a34:	b29a      	uxth	r2, r3
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	3b01      	subs	r3, #1
 8004a42:	b29a      	uxth	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a48:	e0b8      	b.n	8004bbc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a50:	2200      	movs	r2, #0
 8004a52:	4966      	ldr	r1, [pc, #408]	; (8004bec <HAL_I2C_Master_Receive+0x448>)
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f000 fa1b 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d001      	beq.n	8004a64 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e0bf      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a72:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a7e:	b2d2      	uxtb	r2, r2
 8004a80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a86:	1c5a      	adds	r2, r3, #1
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a90:	3b01      	subs	r3, #1
 8004a92:	b29a      	uxth	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a9c:	b29b      	uxth	r3, r3
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	b29a      	uxth	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa8:	9300      	str	r3, [sp, #0]
 8004aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aac:	2200      	movs	r2, #0
 8004aae:	494f      	ldr	r1, [pc, #316]	; (8004bec <HAL_I2C_Master_Receive+0x448>)
 8004ab0:	68f8      	ldr	r0, [r7, #12]
 8004ab2:	f000 f9ed 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d001      	beq.n	8004ac0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e091      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681a      	ldr	r2, [r3, #0]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	691a      	ldr	r2, [r3, #16]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae2:	1c5a      	adds	r2, r3, #1
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aec:	3b01      	subs	r3, #1
 8004aee:	b29a      	uxth	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	3b01      	subs	r3, #1
 8004afc:	b29a      	uxth	r2, r3
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	691a      	ldr	r2, [r3, #16]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b0c:	b2d2      	uxtb	r2, r2
 8004b0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1e:	3b01      	subs	r3, #1
 8004b20:	b29a      	uxth	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	3b01      	subs	r3, #1
 8004b2e:	b29a      	uxth	r2, r3
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b34:	e042      	b.n	8004bbc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b38:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b3a:	68f8      	ldr	r0, [r7, #12]
 8004b3c:	f000 fb00 	bl	8005140 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004b40:	4603      	mov	r3, r0
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e04c      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0304 	and.w	r3, r3, #4
 8004b86:	2b04      	cmp	r3, #4
 8004b88:	d118      	bne.n	8004bbc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	691a      	ldr	r2, [r3, #16]
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b94:	b2d2      	uxtb	r2, r2
 8004b96:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9c:	1c5a      	adds	r2, r3, #1
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ba6:	3b01      	subs	r3, #1
 8004ba8:	b29a      	uxth	r2, r3
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	3b01      	subs	r3, #1
 8004bb6:	b29a      	uxth	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f47f aec2 	bne.w	800494a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004bde:	2300      	movs	r3, #0
 8004be0:	e000      	b.n	8004be4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
  }
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3728      	adds	r7, #40	; 0x28
 8004be8:	46bd      	mov	sp, r7
 8004bea:	bd80      	pop	{r7, pc}
 8004bec:	00010004 	.word	0x00010004

08004bf0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b088      	sub	sp, #32
 8004bf4:	af02      	add	r7, sp, #8
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	607a      	str	r2, [r7, #4]
 8004bfa:	603b      	str	r3, [r7, #0]
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c04:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c06:	697b      	ldr	r3, [r7, #20]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d006      	beq.n	8004c1a <I2C_MasterRequestWrite+0x2a>
 8004c0c:	697b      	ldr	r3, [r7, #20]
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d003      	beq.n	8004c1a <I2C_MasterRequestWrite+0x2a>
 8004c12:	697b      	ldr	r3, [r7, #20]
 8004c14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c18:	d108      	bne.n	8004c2c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e00b      	b.n	8004c44 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c30:	2b12      	cmp	r3, #18
 8004c32:	d107      	bne.n	8004c44 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c42:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	9300      	str	r3, [sp, #0]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c50:	68f8      	ldr	r0, [r7, #12]
 8004c52:	f000 f91d 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00d      	beq.n	8004c78 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c6a:	d103      	bne.n	8004c74 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c72:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e035      	b.n	8004ce4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c80:	d108      	bne.n	8004c94 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c82:	897b      	ldrh	r3, [r7, #10]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	461a      	mov	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004c90:	611a      	str	r2, [r3, #16]
 8004c92:	e01b      	b.n	8004ccc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c94:	897b      	ldrh	r3, [r7, #10]
 8004c96:	11db      	asrs	r3, r3, #7
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	f003 0306 	and.w	r3, r3, #6
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f063 030f 	orn	r3, r3, #15
 8004ca4:	b2da      	uxtb	r2, r3
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	490e      	ldr	r1, [pc, #56]	; (8004cec <I2C_MasterRequestWrite+0xfc>)
 8004cb2:	68f8      	ldr	r0, [r7, #12]
 8004cb4:	f000 f943 	bl	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d001      	beq.n	8004cc2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e010      	b.n	8004ce4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004cc2:	897b      	ldrh	r3, [r7, #10]
 8004cc4:	b2da      	uxtb	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	4907      	ldr	r1, [pc, #28]	; (8004cf0 <I2C_MasterRequestWrite+0x100>)
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f933 	bl	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e000      	b.n	8004ce4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3718      	adds	r7, #24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	00010008 	.word	0x00010008
 8004cf0:	00010002 	.word	0x00010002

08004cf4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af02      	add	r7, sp, #8
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	607a      	str	r2, [r7, #4]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	460b      	mov	r3, r1
 8004d02:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d08:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004d18:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b08      	cmp	r3, #8
 8004d1e:	d006      	beq.n	8004d2e <I2C_MasterRequestRead+0x3a>
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d003      	beq.n	8004d2e <I2C_MasterRequestRead+0x3a>
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d2c:	d108      	bne.n	8004d40 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d3c:	601a      	str	r2, [r3, #0]
 8004d3e:	e00b      	b.n	8004d58 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d44:	2b11      	cmp	r3, #17
 8004d46:	d107      	bne.n	8004d58 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d56:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d64:	68f8      	ldr	r0, [r7, #12]
 8004d66:	f000 f893 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00d      	beq.n	8004d8c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7e:	d103      	bne.n	8004d88 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d86:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004d88:	2303      	movs	r3, #3
 8004d8a:	e079      	b.n	8004e80 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	691b      	ldr	r3, [r3, #16]
 8004d90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004d94:	d108      	bne.n	8004da8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d96:	897b      	ldrh	r3, [r7, #10]
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	f043 0301 	orr.w	r3, r3, #1
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	611a      	str	r2, [r3, #16]
 8004da6:	e05f      	b.n	8004e68 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004da8:	897b      	ldrh	r3, [r7, #10]
 8004daa:	11db      	asrs	r3, r3, #7
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	f003 0306 	and.w	r3, r3, #6
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f063 030f 	orn	r3, r3, #15
 8004db8:	b2da      	uxtb	r2, r3
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	4930      	ldr	r1, [pc, #192]	; (8004e88 <I2C_MasterRequestRead+0x194>)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f000 f8b9 	bl	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e054      	b.n	8004e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004dd6:	897b      	ldrh	r3, [r7, #10]
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	4929      	ldr	r1, [pc, #164]	; (8004e8c <I2C_MasterRequestRead+0x198>)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f8a9 	bl	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e044      	b.n	8004e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004df6:	2300      	movs	r3, #0
 8004df8:	613b      	str	r3, [r7, #16]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	695b      	ldr	r3, [r3, #20]
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	613b      	str	r3, [r7, #16]
 8004e0a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681a      	ldr	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e1a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e28:	68f8      	ldr	r0, [r7, #12]
 8004e2a:	f000 f831 	bl	8004e90 <I2C_WaitOnFlagUntilTimeout>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d00d      	beq.n	8004e50 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e42:	d103      	bne.n	8004e4c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004e4a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e017      	b.n	8004e80 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e50:	897b      	ldrh	r3, [r7, #10]
 8004e52:	11db      	asrs	r3, r3, #7
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	f003 0306 	and.w	r3, r3, #6
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	f063 030e 	orn	r3, r3, #14
 8004e60:	b2da      	uxtb	r2, r3
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	4907      	ldr	r1, [pc, #28]	; (8004e8c <I2C_MasterRequestRead+0x198>)
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f865 	bl	8004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d001      	beq.n	8004e7e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3718      	adds	r7, #24
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}
 8004e88:	00010008 	.word	0x00010008
 8004e8c:	00010002 	.word	0x00010002

08004e90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	603b      	str	r3, [r7, #0]
 8004e9c:	4613      	mov	r3, r2
 8004e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ea0:	e025      	b.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ea8:	d021      	beq.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004eaa:	f7fd fd2d 	bl	8002908 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d302      	bcc.n	8004ec0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d116      	bne.n	8004eee <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2220      	movs	r2, #32
 8004eca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	f043 0220 	orr.w	r2, r3, #32
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e023      	b.n	8004f36 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	2b01      	cmp	r3, #1
 8004ef6:	d10d      	bne.n	8004f14 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	43da      	mvns	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4013      	ands	r3, r2
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bf0c      	ite	eq
 8004f0a:	2301      	moveq	r3, #1
 8004f0c:	2300      	movne	r3, #0
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	461a      	mov	r2, r3
 8004f12:	e00c      	b.n	8004f2e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	43da      	mvns	r2, r3
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	b29b      	uxth	r3, r3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d0b6      	beq.n	8004ea2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}

08004f3e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f3e:	b580      	push	{r7, lr}
 8004f40:	b084      	sub	sp, #16
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	60f8      	str	r0, [r7, #12]
 8004f46:	60b9      	str	r1, [r7, #8]
 8004f48:	607a      	str	r2, [r7, #4]
 8004f4a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f4c:	e051      	b.n	8004ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f5c:	d123      	bne.n	8004fa6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f6c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004f76:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f92:	f043 0204 	orr.w	r2, r3, #4
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	e046      	b.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d021      	beq.n	8004ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fae:	f7fd fcab 	bl	8002908 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d302      	bcc.n	8004fc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d116      	bne.n	8004ff2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2220      	movs	r2, #32
 8004fce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fde:	f043 0220 	orr.w	r2, r3, #32
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e020      	b.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	0c1b      	lsrs	r3, r3, #16
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d10c      	bne.n	8005016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	43da      	mvns	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4013      	ands	r3, r2
 8005008:	b29b      	uxth	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	bf14      	ite	ne
 800500e:	2301      	movne	r3, #1
 8005010:	2300      	moveq	r3, #0
 8005012:	b2db      	uxtb	r3, r3
 8005014:	e00b      	b.n	800502e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	43da      	mvns	r2, r3
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	4013      	ands	r3, r2
 8005022:	b29b      	uxth	r3, r3
 8005024:	2b00      	cmp	r3, #0
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d18d      	bne.n	8004f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005048:	e02d      	b.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f8ce 	bl	80051ec <I2C_IsAcknowledgeFailed>
 8005050:	4603      	mov	r3, r0
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	e02d      	b.n	80050b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005060:	d021      	beq.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005062:	f7fd fc51 	bl	8002908 <HAL_GetTick>
 8005066:	4602      	mov	r2, r0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	1ad3      	subs	r3, r2, r3
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	429a      	cmp	r2, r3
 8005070:	d302      	bcc.n	8005078 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d116      	bne.n	80050a6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2200      	movs	r2, #0
 800507c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005092:	f043 0220 	orr.w	r2, r3, #32
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e007      	b.n	80050b6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050b0:	2b80      	cmp	r3, #128	; 0x80
 80050b2:	d1ca      	bne.n	800504a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050b4:	2300      	movs	r3, #0
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3710      	adds	r7, #16
 80050ba:	46bd      	mov	sp, r7
 80050bc:	bd80      	pop	{r7, pc}

080050be <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050be:	b580      	push	{r7, lr}
 80050c0:	b084      	sub	sp, #16
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	60f8      	str	r0, [r7, #12]
 80050c6:	60b9      	str	r1, [r7, #8]
 80050c8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050ca:	e02d      	b.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050cc:	68f8      	ldr	r0, [r7, #12]
 80050ce:	f000 f88d 	bl	80051ec <I2C_IsAcknowledgeFailed>
 80050d2:	4603      	mov	r3, r0
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d001      	beq.n	80050dc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050d8:	2301      	movs	r3, #1
 80050da:	e02d      	b.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d021      	beq.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e4:	f7fd fc10 	bl	8002908 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	68ba      	ldr	r2, [r7, #8]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d302      	bcc.n	80050fa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d116      	bne.n	8005128 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2200      	movs	r2, #0
 80050fe:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2220      	movs	r2, #32
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f043 0220 	orr.w	r2, r3, #32
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	e007      	b.n	8005138 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b04      	cmp	r3, #4
 8005134:	d1ca      	bne.n	80050cc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800514c:	e042      	b.n	80051d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	695b      	ldr	r3, [r3, #20]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b10      	cmp	r3, #16
 800515a:	d119      	bne.n	8005190 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0210 	mvn.w	r2, #16
 8005164:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2220      	movs	r2, #32
 8005170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e029      	b.n	80051e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005190:	f7fd fbba 	bl	8002908 <HAL_GetTick>
 8005194:	4602      	mov	r2, r0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	1ad3      	subs	r3, r2, r3
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	429a      	cmp	r2, r3
 800519e:	d302      	bcc.n	80051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d116      	bne.n	80051d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2220      	movs	r2, #32
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2200      	movs	r2, #0
 80051b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e007      	b.n	80051e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051de:	2b40      	cmp	r3, #64	; 0x40
 80051e0:	d1b5      	bne.n	800514e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3710      	adds	r7, #16
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}

080051ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005202:	d11b      	bne.n	800523c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800520c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005228:	f043 0204 	orr.w	r2, r3, #4
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr

0800524a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800524a:	b480      	push	{r7}
 800524c:	b083      	sub	sp, #12
 800524e:	af00      	add	r7, sp, #0
 8005250:	6078      	str	r0, [r7, #4]
 8005252:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b20      	cmp	r3, #32
 800525e:	d129      	bne.n	80052b4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	; 0x24
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0210 	bic.w	r2, r2, #16
 8005286:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681a      	ldr	r2, [r3, #0]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2220      	movs	r2, #32
 80052ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	370c      	adds	r7, #12
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr

080052c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80052c2:	b480      	push	{r7}
 80052c4:	b085      	sub	sp, #20
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	6078      	str	r0, [r7, #4]
 80052ca:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d6:	b2db      	uxtb	r3, r3
 80052d8:	2b20      	cmp	r3, #32
 80052da:	d12a      	bne.n	8005332 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2224      	movs	r2, #36	; 0x24
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f022 0201 	bic.w	r2, r2, #1
 80052f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052fa:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80052fc:	89fb      	ldrh	r3, [r7, #14]
 80052fe:	f023 030f 	bic.w	r3, r3, #15
 8005302:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	b29a      	uxth	r2, r3
 8005308:	89fb      	ldrh	r3, [r7, #14]
 800530a:	4313      	orrs	r3, r2
 800530c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	89fa      	ldrh	r2, [r7, #14]
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f042 0201 	orr.w	r2, r2, #1
 8005324:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2220      	movs	r2, #32
 800532a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800532e:	2300      	movs	r3, #0
 8005330:	e000      	b.n	8005334 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005332:	2302      	movs	r3, #2
  }
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800534a:	2300      	movs	r3, #0
 800534c:	603b      	str	r3, [r7, #0]
 800534e:	4b20      	ldr	r3, [pc, #128]	; (80053d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005352:	4a1f      	ldr	r2, [pc, #124]	; (80053d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8005354:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005358:	6413      	str	r3, [r2, #64]	; 0x40
 800535a:	4b1d      	ldr	r3, [pc, #116]	; (80053d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800535c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005362:	603b      	str	r3, [r7, #0]
 8005364:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8005366:	4b1b      	ldr	r3, [pc, #108]	; (80053d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8005368:	2201      	movs	r2, #1
 800536a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800536c:	f7fd facc 	bl	8002908 <HAL_GetTick>
 8005370:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005372:	e009      	b.n	8005388 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005374:	f7fd fac8 	bl	8002908 <HAL_GetTick>
 8005378:	4602      	mov	r2, r0
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005382:	d901      	bls.n	8005388 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e01f      	b.n	80053c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005388:	4b13      	ldr	r3, [pc, #76]	; (80053d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005394:	d1ee      	bne.n	8005374 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005396:	4b11      	ldr	r3, [pc, #68]	; (80053dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8005398:	2201      	movs	r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800539c:	f7fd fab4 	bl	8002908 <HAL_GetTick>
 80053a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053a2:	e009      	b.n	80053b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80053a4:	f7fd fab0 	bl	8002908 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053b2:	d901      	bls.n	80053b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e007      	b.n	80053c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80053b8:	4b07      	ldr	r3, [pc, #28]	; (80053d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80053c4:	d1ee      	bne.n	80053a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}
 80053d0:	40023800 	.word	0x40023800
 80053d4:	420e0040 	.word	0x420e0040
 80053d8:	40007000 	.word	0x40007000
 80053dc:	420e0044 	.word	0x420e0044

080053e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053ee:	2301      	movs	r3, #1
 80053f0:	e25b      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0301 	and.w	r3, r3, #1
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d075      	beq.n	80054ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053fe:	4ba3      	ldr	r3, [pc, #652]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 030c 	and.w	r3, r3, #12
 8005406:	2b04      	cmp	r3, #4
 8005408:	d00c      	beq.n	8005424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800540a:	4ba0      	ldr	r3, [pc, #640]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005412:	2b08      	cmp	r3, #8
 8005414:	d112      	bne.n	800543c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005416:	4b9d      	ldr	r3, [pc, #628]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005422:	d10b      	bne.n	800543c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005424:	4b99      	ldr	r3, [pc, #612]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d05b      	beq.n	80054e8 <HAL_RCC_OscConfig+0x108>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d157      	bne.n	80054e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e236      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d106      	bne.n	8005454 <HAL_RCC_OscConfig+0x74>
 8005446:	4b91      	ldr	r3, [pc, #580]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a90      	ldr	r2, [pc, #576]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800544c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005450:	6013      	str	r3, [r2, #0]
 8005452:	e01d      	b.n	8005490 <HAL_RCC_OscConfig+0xb0>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800545c:	d10c      	bne.n	8005478 <HAL_RCC_OscConfig+0x98>
 800545e:	4b8b      	ldr	r3, [pc, #556]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a8a      	ldr	r2, [pc, #552]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005468:	6013      	str	r3, [r2, #0]
 800546a:	4b88      	ldr	r3, [pc, #544]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a87      	ldr	r2, [pc, #540]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005474:	6013      	str	r3, [r2, #0]
 8005476:	e00b      	b.n	8005490 <HAL_RCC_OscConfig+0xb0>
 8005478:	4b84      	ldr	r3, [pc, #528]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a83      	ldr	r2, [pc, #524]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800547e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005482:	6013      	str	r3, [r2, #0]
 8005484:	4b81      	ldr	r3, [pc, #516]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a80      	ldr	r2, [pc, #512]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800548a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800548e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d013      	beq.n	80054c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005498:	f7fd fa36 	bl	8002908 <HAL_GetTick>
 800549c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800549e:	e008      	b.n	80054b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054a0:	f7fd fa32 	bl	8002908 <HAL_GetTick>
 80054a4:	4602      	mov	r2, r0
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	1ad3      	subs	r3, r2, r3
 80054aa:	2b64      	cmp	r3, #100	; 0x64
 80054ac:	d901      	bls.n	80054b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054ae:	2303      	movs	r3, #3
 80054b0:	e1fb      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054b2:	4b76      	ldr	r3, [pc, #472]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d0f0      	beq.n	80054a0 <HAL_RCC_OscConfig+0xc0>
 80054be:	e014      	b.n	80054ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c0:	f7fd fa22 	bl	8002908 <HAL_GetTick>
 80054c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054c6:	e008      	b.n	80054da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054c8:	f7fd fa1e 	bl	8002908 <HAL_GetTick>
 80054cc:	4602      	mov	r2, r0
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	2b64      	cmp	r3, #100	; 0x64
 80054d4:	d901      	bls.n	80054da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054d6:	2303      	movs	r3, #3
 80054d8:	e1e7      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054da:	4b6c      	ldr	r3, [pc, #432]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d1f0      	bne.n	80054c8 <HAL_RCC_OscConfig+0xe8>
 80054e6:	e000      	b.n	80054ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 0302 	and.w	r3, r3, #2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d063      	beq.n	80055be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054f6:	4b65      	ldr	r3, [pc, #404]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	f003 030c 	and.w	r3, r3, #12
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00b      	beq.n	800551a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005502:	4b62      	ldr	r3, [pc, #392]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800550a:	2b08      	cmp	r3, #8
 800550c:	d11c      	bne.n	8005548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800550e:	4b5f      	ldr	r3, [pc, #380]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005516:	2b00      	cmp	r3, #0
 8005518:	d116      	bne.n	8005548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800551a:	4b5c      	ldr	r3, [pc, #368]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <HAL_RCC_OscConfig+0x152>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	2b01      	cmp	r3, #1
 800552c:	d001      	beq.n	8005532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800552e:	2301      	movs	r3, #1
 8005530:	e1bb      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005532:	4b56      	ldr	r3, [pc, #344]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	00db      	lsls	r3, r3, #3
 8005540:	4952      	ldr	r1, [pc, #328]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005542:	4313      	orrs	r3, r2
 8005544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005546:	e03a      	b.n	80055be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	68db      	ldr	r3, [r3, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d020      	beq.n	8005592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005550:	4b4f      	ldr	r3, [pc, #316]	; (8005690 <HAL_RCC_OscConfig+0x2b0>)
 8005552:	2201      	movs	r2, #1
 8005554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005556:	f7fd f9d7 	bl	8002908 <HAL_GetTick>
 800555a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800555c:	e008      	b.n	8005570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800555e:	f7fd f9d3 	bl	8002908 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e19c      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005570:	4b46      	ldr	r3, [pc, #280]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 0302 	and.w	r3, r3, #2
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800557c:	4b43      	ldr	r3, [pc, #268]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	00db      	lsls	r3, r3, #3
 800558a:	4940      	ldr	r1, [pc, #256]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]
 8005590:	e015      	b.n	80055be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005592:	4b3f      	ldr	r3, [pc, #252]	; (8005690 <HAL_RCC_OscConfig+0x2b0>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005598:	f7fd f9b6 	bl	8002908 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055a0:	f7fd f9b2 	bl	8002908 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e17b      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055b2:	4b36      	ldr	r3, [pc, #216]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0302 	and.w	r3, r3, #2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f003 0308 	and.w	r3, r3, #8
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d030      	beq.n	800562c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	695b      	ldr	r3, [r3, #20]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d016      	beq.n	8005600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055d2:	4b30      	ldr	r3, [pc, #192]	; (8005694 <HAL_RCC_OscConfig+0x2b4>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d8:	f7fd f996 	bl	8002908 <HAL_GetTick>
 80055dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055de:	e008      	b.n	80055f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055e0:	f7fd f992 	bl	8002908 <HAL_GetTick>
 80055e4:	4602      	mov	r2, r0
 80055e6:	693b      	ldr	r3, [r7, #16]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d901      	bls.n	80055f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055ee:	2303      	movs	r3, #3
 80055f0:	e15b      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055f2:	4b26      	ldr	r3, [pc, #152]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 80055f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0f0      	beq.n	80055e0 <HAL_RCC_OscConfig+0x200>
 80055fe:	e015      	b.n	800562c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005600:	4b24      	ldr	r3, [pc, #144]	; (8005694 <HAL_RCC_OscConfig+0x2b4>)
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005606:	f7fd f97f 	bl	8002908 <HAL_GetTick>
 800560a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800560c:	e008      	b.n	8005620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800560e:	f7fd f97b 	bl	8002908 <HAL_GetTick>
 8005612:	4602      	mov	r2, r0
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	1ad3      	subs	r3, r2, r3
 8005618:	2b02      	cmp	r3, #2
 800561a:	d901      	bls.n	8005620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800561c:	2303      	movs	r3, #3
 800561e:	e144      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005620:	4b1a      	ldr	r3, [pc, #104]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1f0      	bne.n	800560e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80a0 	beq.w	800577a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800563e:	4b13      	ldr	r3, [pc, #76]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10f      	bne.n	800566a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800564a:	2300      	movs	r3, #0
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	4b0f      	ldr	r3, [pc, #60]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005652:	4a0e      	ldr	r2, [pc, #56]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 8005654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005658:	6413      	str	r3, [r2, #64]	; 0x40
 800565a:	4b0c      	ldr	r3, [pc, #48]	; (800568c <HAL_RCC_OscConfig+0x2ac>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005662:	60bb      	str	r3, [r7, #8]
 8005664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005666:	2301      	movs	r3, #1
 8005668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <HAL_RCC_OscConfig+0x2b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005672:	2b00      	cmp	r3, #0
 8005674:	d121      	bne.n	80056ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005676:	4b08      	ldr	r3, [pc, #32]	; (8005698 <HAL_RCC_OscConfig+0x2b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a07      	ldr	r2, [pc, #28]	; (8005698 <HAL_RCC_OscConfig+0x2b8>)
 800567c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005682:	f7fd f941 	bl	8002908 <HAL_GetTick>
 8005686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005688:	e011      	b.n	80056ae <HAL_RCC_OscConfig+0x2ce>
 800568a:	bf00      	nop
 800568c:	40023800 	.word	0x40023800
 8005690:	42470000 	.word	0x42470000
 8005694:	42470e80 	.word	0x42470e80
 8005698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569c:	f7fd f934 	bl	8002908 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	2b02      	cmp	r3, #2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0fd      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056ae:	4b81      	ldr	r3, [pc, #516]	; (80058b4 <HAL_RCC_OscConfig+0x4d4>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d0f0      	beq.n	800569c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b01      	cmp	r3, #1
 80056c0:	d106      	bne.n	80056d0 <HAL_RCC_OscConfig+0x2f0>
 80056c2:	4b7d      	ldr	r3, [pc, #500]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80056c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056c6:	4a7c      	ldr	r2, [pc, #496]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	6713      	str	r3, [r2, #112]	; 0x70
 80056ce:	e01c      	b.n	800570a <HAL_RCC_OscConfig+0x32a>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	2b05      	cmp	r3, #5
 80056d6:	d10c      	bne.n	80056f2 <HAL_RCC_OscConfig+0x312>
 80056d8:	4b77      	ldr	r3, [pc, #476]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4a76      	ldr	r2, [pc, #472]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80056de:	f043 0304 	orr.w	r3, r3, #4
 80056e2:	6713      	str	r3, [r2, #112]	; 0x70
 80056e4:	4b74      	ldr	r3, [pc, #464]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80056e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e8:	4a73      	ldr	r2, [pc, #460]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80056ea:	f043 0301 	orr.w	r3, r3, #1
 80056ee:	6713      	str	r3, [r2, #112]	; 0x70
 80056f0:	e00b      	b.n	800570a <HAL_RCC_OscConfig+0x32a>
 80056f2:	4b71      	ldr	r3, [pc, #452]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f6:	4a70      	ldr	r2, [pc, #448]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80056f8:	f023 0301 	bic.w	r3, r3, #1
 80056fc:	6713      	str	r3, [r2, #112]	; 0x70
 80056fe:	4b6e      	ldr	r3, [pc, #440]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 8005700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005702:	4a6d      	ldr	r2, [pc, #436]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 8005704:	f023 0304 	bic.w	r3, r3, #4
 8005708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d015      	beq.n	800573e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005712:	f7fd f8f9 	bl	8002908 <HAL_GetTick>
 8005716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005718:	e00a      	b.n	8005730 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800571a:	f7fd f8f5 	bl	8002908 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	f241 3288 	movw	r2, #5000	; 0x1388
 8005728:	4293      	cmp	r3, r2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e0bc      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005730:	4b61      	ldr	r3, [pc, #388]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 8005732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005734:	f003 0302 	and.w	r3, r3, #2
 8005738:	2b00      	cmp	r3, #0
 800573a:	d0ee      	beq.n	800571a <HAL_RCC_OscConfig+0x33a>
 800573c:	e014      	b.n	8005768 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800573e:	f7fd f8e3 	bl	8002908 <HAL_GetTick>
 8005742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005744:	e00a      	b.n	800575c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005746:	f7fd f8df 	bl	8002908 <HAL_GetTick>
 800574a:	4602      	mov	r2, r0
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	f241 3288 	movw	r2, #5000	; 0x1388
 8005754:	4293      	cmp	r3, r2
 8005756:	d901      	bls.n	800575c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005758:	2303      	movs	r3, #3
 800575a:	e0a6      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800575c:	4b56      	ldr	r3, [pc, #344]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 800575e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005760:	f003 0302 	and.w	r3, r3, #2
 8005764:	2b00      	cmp	r3, #0
 8005766:	d1ee      	bne.n	8005746 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005768:	7dfb      	ldrb	r3, [r7, #23]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d105      	bne.n	800577a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800576e:	4b52      	ldr	r3, [pc, #328]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	4a51      	ldr	r2, [pc, #324]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 8005774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	2b00      	cmp	r3, #0
 8005780:	f000 8092 	beq.w	80058a8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005784:	4b4c      	ldr	r3, [pc, #304]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 030c 	and.w	r3, r3, #12
 800578c:	2b08      	cmp	r3, #8
 800578e:	d05c      	beq.n	800584a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	699b      	ldr	r3, [r3, #24]
 8005794:	2b02      	cmp	r3, #2
 8005796:	d141      	bne.n	800581c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005798:	4b48      	ldr	r3, [pc, #288]	; (80058bc <HAL_RCC_OscConfig+0x4dc>)
 800579a:	2200      	movs	r2, #0
 800579c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800579e:	f7fd f8b3 	bl	8002908 <HAL_GetTick>
 80057a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057a6:	f7fd f8af 	bl	8002908 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e078      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057b8:	4b3f      	ldr	r3, [pc, #252]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d1f0      	bne.n	80057a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	69da      	ldr	r2, [r3, #28]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a1b      	ldr	r3, [r3, #32]
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	019b      	lsls	r3, r3, #6
 80057d4:	431a      	orrs	r2, r3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	085b      	lsrs	r3, r3, #1
 80057dc:	3b01      	subs	r3, #1
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057e6:	061b      	lsls	r3, r3, #24
 80057e8:	4933      	ldr	r1, [pc, #204]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057ee:	4b33      	ldr	r3, [pc, #204]	; (80058bc <HAL_RCC_OscConfig+0x4dc>)
 80057f0:	2201      	movs	r2, #1
 80057f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f4:	f7fd f888 	bl	8002908 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057fc:	f7fd f884 	bl	8002908 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e04d      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800580e:	4b2a      	ldr	r3, [pc, #168]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005816:	2b00      	cmp	r3, #0
 8005818:	d0f0      	beq.n	80057fc <HAL_RCC_OscConfig+0x41c>
 800581a:	e045      	b.n	80058a8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800581c:	4b27      	ldr	r3, [pc, #156]	; (80058bc <HAL_RCC_OscConfig+0x4dc>)
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005822:	f7fd f871 	bl	8002908 <HAL_GetTick>
 8005826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005828:	e008      	b.n	800583c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800582a:	f7fd f86d 	bl	8002908 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	2b02      	cmp	r3, #2
 8005836:	d901      	bls.n	800583c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005838:	2303      	movs	r3, #3
 800583a:	e036      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800583c:	4b1e      	ldr	r3, [pc, #120]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f0      	bne.n	800582a <HAL_RCC_OscConfig+0x44a>
 8005848:	e02e      	b.n	80058a8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	699b      	ldr	r3, [r3, #24]
 800584e:	2b01      	cmp	r3, #1
 8005850:	d101      	bne.n	8005856 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005852:	2301      	movs	r3, #1
 8005854:	e029      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005856:	4b18      	ldr	r3, [pc, #96]	; (80058b8 <HAL_RCC_OscConfig+0x4d8>)
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	69db      	ldr	r3, [r3, #28]
 8005866:	429a      	cmp	r2, r3
 8005868:	d11c      	bne.n	80058a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d115      	bne.n	80058a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800587e:	4013      	ands	r3, r2
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005884:	4293      	cmp	r3, r2
 8005886:	d10d      	bne.n	80058a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d106      	bne.n	80058a4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d001      	beq.n	80058a8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3718      	adds	r7, #24
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}
 80058b2:	bf00      	nop
 80058b4:	40007000 	.word	0x40007000
 80058b8:	40023800 	.word	0x40023800
 80058bc:	42470060 	.word	0x42470060

080058c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
 80058c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d101      	bne.n	80058d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0cc      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d4:	4b68      	ldr	r3, [pc, #416]	; (8005a78 <HAL_RCC_ClockConfig+0x1b8>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 030f 	and.w	r3, r3, #15
 80058dc:	683a      	ldr	r2, [r7, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d90c      	bls.n	80058fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e2:	4b65      	ldr	r3, [pc, #404]	; (8005a78 <HAL_RCC_ClockConfig+0x1b8>)
 80058e4:	683a      	ldr	r2, [r7, #0]
 80058e6:	b2d2      	uxtb	r2, r2
 80058e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ea:	4b63      	ldr	r3, [pc, #396]	; (8005a78 <HAL_RCC_ClockConfig+0x1b8>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 030f 	and.w	r3, r3, #15
 80058f2:	683a      	ldr	r2, [r7, #0]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d001      	beq.n	80058fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e0b8      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f003 0302 	and.w	r3, r3, #2
 8005904:	2b00      	cmp	r3, #0
 8005906:	d020      	beq.n	800594a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005914:	4b59      	ldr	r3, [pc, #356]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005916:	689b      	ldr	r3, [r3, #8]
 8005918:	4a58      	ldr	r2, [pc, #352]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 800591a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800591e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d005      	beq.n	8005938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800592c:	4b53      	ldr	r3, [pc, #332]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	4a52      	ldr	r2, [pc, #328]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005938:	4b50      	ldr	r3, [pc, #320]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	494d      	ldr	r1, [pc, #308]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005946:	4313      	orrs	r3, r2
 8005948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d044      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	2b01      	cmp	r3, #1
 800595c:	d107      	bne.n	800596e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800595e:	4b47      	ldr	r3, [pc, #284]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d119      	bne.n	800599e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e07f      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d003      	beq.n	800597e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800597a:	2b03      	cmp	r3, #3
 800597c:	d107      	bne.n	800598e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800597e:	4b3f      	ldr	r3, [pc, #252]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d109      	bne.n	800599e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e06f      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800598e:	4b3b      	ldr	r3, [pc, #236]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e067      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800599e:	4b37      	ldr	r3, [pc, #220]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f023 0203 	bic.w	r2, r3, #3
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	4934      	ldr	r1, [pc, #208]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 80059ac:	4313      	orrs	r3, r2
 80059ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059b0:	f7fc ffaa 	bl	8002908 <HAL_GetTick>
 80059b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059b6:	e00a      	b.n	80059ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059b8:	f7fc ffa6 	bl	8002908 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d901      	bls.n	80059ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ca:	2303      	movs	r3, #3
 80059cc:	e04f      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ce:	4b2b      	ldr	r3, [pc, #172]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f003 020c 	and.w	r2, r3, #12
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	009b      	lsls	r3, r3, #2
 80059dc:	429a      	cmp	r2, r3
 80059de:	d1eb      	bne.n	80059b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80059e0:	4b25      	ldr	r3, [pc, #148]	; (8005a78 <HAL_RCC_ClockConfig+0x1b8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 030f 	and.w	r3, r3, #15
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d20c      	bcs.n	8005a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059ee:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <HAL_RCC_ClockConfig+0x1b8>)
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	b2d2      	uxtb	r2, r2
 80059f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059f6:	4b20      	ldr	r3, [pc, #128]	; (8005a78 <HAL_RCC_ClockConfig+0x1b8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f003 030f 	and.w	r3, r3, #15
 80059fe:	683a      	ldr	r2, [r7, #0]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d001      	beq.n	8005a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e032      	b.n	8005a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0304 	and.w	r3, r3, #4
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a14:	4b19      	ldr	r3, [pc, #100]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	4916      	ldr	r1, [pc, #88]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d009      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a32:	4b12      	ldr	r3, [pc, #72]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	691b      	ldr	r3, [r3, #16]
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	490e      	ldr	r1, [pc, #56]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a46:	f000 f821 	bl	8005a8c <HAL_RCC_GetSysClockFreq>
 8005a4a:	4601      	mov	r1, r0
 8005a4c:	4b0b      	ldr	r3, [pc, #44]	; (8005a7c <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	f003 030f 	and.w	r3, r3, #15
 8005a56:	4a0a      	ldr	r2, [pc, #40]	; (8005a80 <HAL_RCC_ClockConfig+0x1c0>)
 8005a58:	5cd3      	ldrb	r3, [r2, r3]
 8005a5a:	fa21 f303 	lsr.w	r3, r1, r3
 8005a5e:	4a09      	ldr	r2, [pc, #36]	; (8005a84 <HAL_RCC_ClockConfig+0x1c4>)
 8005a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a62:	4b09      	ldr	r3, [pc, #36]	; (8005a88 <HAL_RCC_ClockConfig+0x1c8>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7fc ff0a 	bl	8002880 <HAL_InitTick>

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	40023c00 	.word	0x40023c00
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	08007708 	.word	0x08007708
 8005a84:	20000020 	.word	0x20000020
 8005a88:	20000024 	.word	0x20000024

08005a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	2300      	movs	r3, #0
 8005a98:	60fb      	str	r3, [r7, #12]
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005aa2:	4b50      	ldr	r3, [pc, #320]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 030c 	and.w	r3, r3, #12
 8005aaa:	2b04      	cmp	r3, #4
 8005aac:	d007      	beq.n	8005abe <HAL_RCC_GetSysClockFreq+0x32>
 8005aae:	2b08      	cmp	r3, #8
 8005ab0:	d008      	beq.n	8005ac4 <HAL_RCC_GetSysClockFreq+0x38>
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f040 808d 	bne.w	8005bd2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ab8:	4b4b      	ldr	r3, [pc, #300]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005aba:	60bb      	str	r3, [r7, #8]
       break;
 8005abc:	e08c      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005abe:	4b4b      	ldr	r3, [pc, #300]	; (8005bec <HAL_RCC_GetSysClockFreq+0x160>)
 8005ac0:	60bb      	str	r3, [r7, #8]
      break;
 8005ac2:	e089      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ac4:	4b47      	ldr	r3, [pc, #284]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005acc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005ace:	4b45      	ldr	r3, [pc, #276]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d023      	beq.n	8005b22 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005ada:	4b42      	ldr	r3, [pc, #264]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	099b      	lsrs	r3, r3, #6
 8005ae0:	f04f 0400 	mov.w	r4, #0
 8005ae4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	ea03 0501 	and.w	r5, r3, r1
 8005af0:	ea04 0602 	and.w	r6, r4, r2
 8005af4:	4a3d      	ldr	r2, [pc, #244]	; (8005bec <HAL_RCC_GetSysClockFreq+0x160>)
 8005af6:	fb02 f106 	mul.w	r1, r2, r6
 8005afa:	2200      	movs	r2, #0
 8005afc:	fb02 f205 	mul.w	r2, r2, r5
 8005b00:	440a      	add	r2, r1
 8005b02:	493a      	ldr	r1, [pc, #232]	; (8005bec <HAL_RCC_GetSysClockFreq+0x160>)
 8005b04:	fba5 0101 	umull	r0, r1, r5, r1
 8005b08:	1853      	adds	r3, r2, r1
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f04f 0400 	mov.w	r4, #0
 8005b12:	461a      	mov	r2, r3
 8005b14:	4623      	mov	r3, r4
 8005b16:	f7fa ffa9 	bl	8000a6c <__aeabi_uldivmod>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	60fb      	str	r3, [r7, #12]
 8005b20:	e049      	b.n	8005bb6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b22:	4b30      	ldr	r3, [pc, #192]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	099b      	lsrs	r3, r3, #6
 8005b28:	f04f 0400 	mov.w	r4, #0
 8005b2c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005b30:	f04f 0200 	mov.w	r2, #0
 8005b34:	ea03 0501 	and.w	r5, r3, r1
 8005b38:	ea04 0602 	and.w	r6, r4, r2
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4632      	mov	r2, r6
 8005b40:	f04f 0300 	mov.w	r3, #0
 8005b44:	f04f 0400 	mov.w	r4, #0
 8005b48:	0154      	lsls	r4, r2, #5
 8005b4a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005b4e:	014b      	lsls	r3, r1, #5
 8005b50:	4619      	mov	r1, r3
 8005b52:	4622      	mov	r2, r4
 8005b54:	1b49      	subs	r1, r1, r5
 8005b56:	eb62 0206 	sbc.w	r2, r2, r6
 8005b5a:	f04f 0300 	mov.w	r3, #0
 8005b5e:	f04f 0400 	mov.w	r4, #0
 8005b62:	0194      	lsls	r4, r2, #6
 8005b64:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005b68:	018b      	lsls	r3, r1, #6
 8005b6a:	1a5b      	subs	r3, r3, r1
 8005b6c:	eb64 0402 	sbc.w	r4, r4, r2
 8005b70:	f04f 0100 	mov.w	r1, #0
 8005b74:	f04f 0200 	mov.w	r2, #0
 8005b78:	00e2      	lsls	r2, r4, #3
 8005b7a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005b7e:	00d9      	lsls	r1, r3, #3
 8005b80:	460b      	mov	r3, r1
 8005b82:	4614      	mov	r4, r2
 8005b84:	195b      	adds	r3, r3, r5
 8005b86:	eb44 0406 	adc.w	r4, r4, r6
 8005b8a:	f04f 0100 	mov.w	r1, #0
 8005b8e:	f04f 0200 	mov.w	r2, #0
 8005b92:	02a2      	lsls	r2, r4, #10
 8005b94:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005b98:	0299      	lsls	r1, r3, #10
 8005b9a:	460b      	mov	r3, r1
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f04f 0400 	mov.w	r4, #0
 8005ba8:	461a      	mov	r2, r3
 8005baa:	4623      	mov	r3, r4
 8005bac:	f7fa ff5e 	bl	8000a6c <__aeabi_uldivmod>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	460c      	mov	r4, r1
 8005bb4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005bb6:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <HAL_RCC_GetSysClockFreq+0x158>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	0c1b      	lsrs	r3, r3, #16
 8005bbc:	f003 0303 	and.w	r3, r3, #3
 8005bc0:	3301      	adds	r3, #1
 8005bc2:	005b      	lsls	r3, r3, #1
 8005bc4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005bc6:	68fa      	ldr	r2, [r7, #12]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bce:	60bb      	str	r3, [r7, #8]
      break;
 8005bd0:	e002      	b.n	8005bd8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005bd2:	4b05      	ldr	r3, [pc, #20]	; (8005be8 <HAL_RCC_GetSysClockFreq+0x15c>)
 8005bd4:	60bb      	str	r3, [r7, #8]
      break;
 8005bd6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
}
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3714      	adds	r7, #20
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be2:	bf00      	nop
 8005be4:	40023800 	.word	0x40023800
 8005be8:	00f42400 	.word	0x00f42400
 8005bec:	017d7840 	.word	0x017d7840

08005bf0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bf4:	4b03      	ldr	r3, [pc, #12]	; (8005c04 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
 8005c02:	bf00      	nop
 8005c04:	20000020 	.word	0x20000020

08005c08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c0c:	f7ff fff0 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c10:	4601      	mov	r1, r0
 8005c12:	4b05      	ldr	r3, [pc, #20]	; (8005c28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	0a9b      	lsrs	r3, r3, #10
 8005c18:	f003 0307 	and.w	r3, r3, #7
 8005c1c:	4a03      	ldr	r2, [pc, #12]	; (8005c2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	08007718 	.word	0x08007718

08005c30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c34:	f7ff ffdc 	bl	8005bf0 <HAL_RCC_GetHCLKFreq>
 8005c38:	4601      	mov	r1, r0
 8005c3a:	4b05      	ldr	r3, [pc, #20]	; (8005c50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	0b5b      	lsrs	r3, r3, #13
 8005c40:	f003 0307 	and.w	r3, r3, #7
 8005c44:	4a03      	ldr	r2, [pc, #12]	; (8005c54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c46:	5cd3      	ldrb	r3, [r2, r3]
 8005c48:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	bd80      	pop	{r7, pc}
 8005c50:	40023800 	.word	0x40023800
 8005c54:	08007718 	.word	0x08007718

08005c58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005c60:	2300      	movs	r3, #0
 8005c62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f003 0301 	and.w	r3, r3, #1
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d10b      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d105      	bne.n	8005c8c <HAL_RCCEx_PeriphCLKConfig+0x34>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d075      	beq.n	8005d78 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005c8c:	4bad      	ldr	r3, [pc, #692]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c92:	f7fc fe39 	bl	8002908 <HAL_GetTick>
 8005c96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005c98:	e008      	b.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005c9a:	f7fc fe35 	bl	8002908 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	2b02      	cmp	r3, #2
 8005ca6:	d901      	bls.n	8005cac <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	e18b      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005cac:	4ba6      	ldr	r3, [pc, #664]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d1f0      	bne.n	8005c9a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d009      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	019a      	lsls	r2, r3, #6
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	071b      	lsls	r3, r3, #28
 8005cd0:	499d      	ldr	r1, [pc, #628]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0302 	and.w	r3, r3, #2
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d01f      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005ce4:	4b98      	ldr	r3, [pc, #608]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ce6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cea:	0f1b      	lsrs	r3, r3, #28
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	019a      	lsls	r2, r3, #6
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	061b      	lsls	r3, r3, #24
 8005cfe:	431a      	orrs	r2, r3
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	071b      	lsls	r3, r3, #28
 8005d04:	4990      	ldr	r1, [pc, #576]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d06:	4313      	orrs	r3, r2
 8005d08:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005d0c:	4b8e      	ldr	r3, [pc, #568]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d12:	f023 021f 	bic.w	r2, r3, #31
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	69db      	ldr	r3, [r3, #28]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	498a      	ldr	r1, [pc, #552]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00d      	beq.n	8005d4c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	019a      	lsls	r2, r3, #6
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	061b      	lsls	r3, r3, #24
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	071b      	lsls	r3, r3, #28
 8005d44:	4980      	ldr	r1, [pc, #512]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d46:	4313      	orrs	r3, r2
 8005d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d4c:	4b7d      	ldr	r3, [pc, #500]	; (8005f44 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005d4e:	2201      	movs	r2, #1
 8005d50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d52:	f7fc fdd9 	bl	8002908 <HAL_GetTick>
 8005d56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d58:	e008      	b.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d5a:	f7fc fdd5 	bl	8002908 <HAL_GetTick>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	1ad3      	subs	r3, r2, r3
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d901      	bls.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e12b      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d6c:	4b76      	ldr	r3, [pc, #472]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d0f0      	beq.n	8005d5a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f003 0304 	and.w	r3, r3, #4
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0x138>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 0308 	and.w	r3, r3, #8
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d079      	beq.n	8005e84 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005d90:	4b6e      	ldr	r3, [pc, #440]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d96:	f7fc fdb7 	bl	8002908 <HAL_GetTick>
 8005d9a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005d9c:	e008      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005d9e:	f7fc fdb3 	bl	8002908 <HAL_GetTick>
 8005da2:	4602      	mov	r2, r0
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	1ad3      	subs	r3, r2, r3
 8005da8:	2b02      	cmp	r3, #2
 8005daa:	d901      	bls.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dac:	2303      	movs	r3, #3
 8005dae:	e109      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005db0:	4b65      	ldr	r3, [pc, #404]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005dbc:	d0ef      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f003 0304 	and.w	r3, r3, #4
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d020      	beq.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005dca:	4b5f      	ldr	r3, [pc, #380]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dd0:	0f1b      	lsrs	r3, r3, #28
 8005dd2:	f003 0307 	and.w	r3, r3, #7
 8005dd6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691b      	ldr	r3, [r3, #16]
 8005ddc:	019a      	lsls	r2, r3, #6
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	061b      	lsls	r3, r3, #24
 8005de4:	431a      	orrs	r2, r3
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	071b      	lsls	r3, r3, #28
 8005dea:	4957      	ldr	r1, [pc, #348]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005df2:	4b55      	ldr	r3, [pc, #340]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005df8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	3b01      	subs	r3, #1
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	4950      	ldr	r1, [pc, #320]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f003 0308 	and.w	r3, r3, #8
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01e      	beq.n	8005e56 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005e18:	4b4b      	ldr	r3, [pc, #300]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e1e:	0e1b      	lsrs	r3, r3, #24
 8005e20:	f003 030f 	and.w	r3, r3, #15
 8005e24:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	019a      	lsls	r2, r3, #6
 8005e2c:	693b      	ldr	r3, [r7, #16]
 8005e2e:	061b      	lsls	r3, r3, #24
 8005e30:	431a      	orrs	r2, r3
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	699b      	ldr	r3, [r3, #24]
 8005e36:	071b      	lsls	r3, r3, #28
 8005e38:	4943      	ldr	r1, [pc, #268]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e3a:	4313      	orrs	r3, r2
 8005e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e40:	4b41      	ldr	r3, [pc, #260]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e46:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	493e      	ldr	r1, [pc, #248]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e50:	4313      	orrs	r3, r2
 8005e52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e56:	4b3d      	ldr	r3, [pc, #244]	; (8005f4c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005e58:	2201      	movs	r2, #1
 8005e5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e5c:	f7fc fd54 	bl	8002908 <HAL_GetTick>
 8005e60:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e62:	e008      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8005e64:	f7fc fd50 	bl	8002908 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e0a6      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e76:	4b34      	ldr	r3, [pc, #208]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e82:	d1ef      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	f000 808d 	beq.w	8005fac <HAL_RCCEx_PeriphCLKConfig+0x354>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e92:	2300      	movs	r3, #0
 8005e94:	60fb      	str	r3, [r7, #12]
 8005e96:	4b2c      	ldr	r3, [pc, #176]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9a:	4a2b      	ldr	r2, [pc, #172]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8005ea2:	4b29      	ldr	r3, [pc, #164]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	60fb      	str	r3, [r7, #12]
 8005eac:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005eae:	4b28      	ldr	r3, [pc, #160]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a27      	ldr	r2, [pc, #156]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eb8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005eba:	f7fc fd25 	bl	8002908 <HAL_GetTick>
 8005ebe:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ec0:	e008      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ec2:	f7fc fd21 	bl	8002908 <HAL_GetTick>
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	1ad3      	subs	r3, r2, r3
 8005ecc:	2b02      	cmp	r3, #2
 8005ece:	d901      	bls.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x27c>
      {
        return HAL_TIMEOUT;
 8005ed0:	2303      	movs	r3, #3
 8005ed2:	e077      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005ed4:	4b1e      	ldr	r3, [pc, #120]	; (8005f50 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0f0      	beq.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ee0:	4b19      	ldr	r3, [pc, #100]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d039      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef8:	693a      	ldr	r2, [r7, #16]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d032      	beq.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005efe:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f06:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005f08:	4b12      	ldr	r3, [pc, #72]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005f0e:	4b11      	ldr	r3, [pc, #68]	; (8005f54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005f14:	4a0c      	ldr	r2, [pc, #48]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 8005f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f1e:	f003 0301 	and.w	r3, r3, #1
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d11e      	bne.n	8005f64 <HAL_RCCEx_PeriphCLKConfig+0x30c>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005f26:	f7fc fcef 	bl	8002908 <HAL_GetTick>
 8005f2a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f2c:	e014      	b.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x300>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f2e:	f7fc fceb 	bl	8002908 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d90b      	bls.n	8005f58 <HAL_RCCEx_PeriphCLKConfig+0x300>
          {
            return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e03f      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 8005f44:	42470068 	.word	0x42470068
 8005f48:	40023800 	.word	0x40023800
 8005f4c:	42470070 	.word	0x42470070
 8005f50:	40007000 	.word	0x40007000
 8005f54:	42470e40 	.word	0x42470e40
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f58:	4b1c      	ldr	r3, [pc, #112]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5c:	f003 0302 	and.w	r3, r3, #2
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d0e4      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f70:	d10d      	bne.n	8005f8e <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005f72:	4b16      	ldr	r3, [pc, #88]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	4911      	ldr	r1, [pc, #68]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	608b      	str	r3, [r1, #8]
 8005f8c:	e005      	b.n	8005f9a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005f8e:	4b0f      	ldr	r3, [pc, #60]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	4a0e      	ldr	r2, [pc, #56]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f94:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f98:	6093      	str	r3, [r2, #8]
 8005f9a:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005f9c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa6:	4909      	ldr	r1, [pc, #36]	; (8005fcc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0310 	and.w	r3, r3, #16
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d004      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005fbe:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005fc0:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3718      	adds	r7, #24
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}
 8005fcc:	40023800 	.word	0x40023800
 8005fd0:	424711e0 	.word	0x424711e0

08005fd4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e083      	b.n	80060ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	7f5b      	ldrb	r3, [r3, #29]
 8005fea:	b2db      	uxtb	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d105      	bne.n	8005ffc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fc f8d8 	bl	80021ac <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	22ca      	movs	r2, #202	; 0xca
 8006008:	625a      	str	r2, [r3, #36]	; 0x24
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2253      	movs	r2, #83	; 0x53
 8006010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 f944 	bl	80062a0 <RTC_EnterInitMode>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d008      	beq.n	8006030 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	22ff      	movs	r2, #255	; 0xff
 8006024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2204      	movs	r2, #4
 800602a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e05e      	b.n	80060ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800603e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006042:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	6899      	ldr	r1, [r3, #8]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	685a      	ldr	r2, [r3, #4]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	695b      	ldr	r3, [r3, #20]
 8006058:	431a      	orrs	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	687a      	ldr	r2, [r7, #4]
 8006068:	68d2      	ldr	r2, [r2, #12]
 800606a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6919      	ldr	r1, [r3, #16]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	041a      	lsls	r2, r3, #16
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	68da      	ldr	r2, [r3, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800608e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	f003 0320 	and.w	r3, r3, #32
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10e      	bne.n	80060bc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f8d6 	bl	8006250 <HAL_RTC_WaitForSynchro>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d008      	beq.n	80060bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	22ff      	movs	r2, #255	; 0xff
 80060b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2204      	movs	r2, #4
 80060b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e018      	b.n	80060ee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80060ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	430a      	orrs	r2, r1
 80060dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	22ff      	movs	r2, #255	; 0xff
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2201      	movs	r2, #1
 80060ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80060ec:	2300      	movs	r3, #0
  }
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}

080060f6 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80060f6:	b580      	push	{r7, lr}
 80060f8:	b086      	sub	sp, #24
 80060fa:	af00      	add	r7, sp, #0
 80060fc:	60f8      	str	r0, [r7, #12]
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006128:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800612c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	0c1b      	lsrs	r3, r3, #16
 8006132:	b2db      	uxtb	r3, r3
 8006134:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006138:	b2da      	uxtb	r2, r3
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	0a1b      	lsrs	r3, r3, #8
 8006142:	b2db      	uxtb	r3, r3
 8006144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006148:	b2da      	uxtb	r2, r3
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	b2db      	uxtb	r3, r3
 8006152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006156:	b2da      	uxtb	r2, r3
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	0c1b      	lsrs	r3, r3, #16
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	b2da      	uxtb	r2, r3
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d11a      	bne.n	80061a8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	4618      	mov	r0, r3
 8006178:	f000 f8be 	bl	80062f8 <RTC_Bcd2ToByte>
 800617c:	4603      	mov	r3, r0
 800617e:	461a      	mov	r2, r3
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8006184:	68bb      	ldr	r3, [r7, #8]
 8006186:	785b      	ldrb	r3, [r3, #1]
 8006188:	4618      	mov	r0, r3
 800618a:	f000 f8b5 	bl	80062f8 <RTC_Bcd2ToByte>
 800618e:	4603      	mov	r3, r0
 8006190:	461a      	mov	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	789b      	ldrb	r3, [r3, #2]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f8ac 	bl	80062f8 <RTC_Bcd2ToByte>
 80061a0:	4603      	mov	r3, r0
 80061a2:	461a      	mov	r2, r3
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b086      	sub	sp, #24
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	60f8      	str	r0, [r7, #12]
 80061ba:	60b9      	str	r1, [r7, #8]
 80061bc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	685b      	ldr	r3, [r3, #4]
 80061c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80061cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80061d0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	0a1b      	lsrs	r3, r3, #8
 80061e0:	b2db      	uxtb	r3, r3
 80061e2:	f003 031f 	and.w	r3, r3, #31
 80061e6:	b2da      	uxtb	r2, r3
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	0b5b      	lsrs	r3, r3, #13
 80061fe:	b2db      	uxtb	r3, r3
 8006200:	f003 0307 	and.w	r3, r3, #7
 8006204:	b2da      	uxtb	r2, r3
 8006206:	68bb      	ldr	r3, [r7, #8]
 8006208:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11a      	bne.n	8006246 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	78db      	ldrb	r3, [r3, #3]
 8006214:	4618      	mov	r0, r3
 8006216:	f000 f86f 	bl	80062f8 <RTC_Bcd2ToByte>
 800621a:	4603      	mov	r3, r0
 800621c:	461a      	mov	r2, r3
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	785b      	ldrb	r3, [r3, #1]
 8006226:	4618      	mov	r0, r3
 8006228:	f000 f866 	bl	80062f8 <RTC_Bcd2ToByte>
 800622c:	4603      	mov	r3, r0
 800622e:	461a      	mov	r2, r3
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	789b      	ldrb	r3, [r3, #2]
 8006238:	4618      	mov	r0, r3
 800623a:	f000 f85d 	bl	80062f8 <RTC_Bcd2ToByte>
 800623e:	4603      	mov	r3, r0
 8006240:	461a      	mov	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800626a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800626c:	f7fc fb4c 	bl	8002908 <HAL_GetTick>
 8006270:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006272:	e009      	b.n	8006288 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006274:	f7fc fb48 	bl	8002908 <HAL_GetTick>
 8006278:	4602      	mov	r2, r0
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	1ad3      	subs	r3, r2, r3
 800627e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006282:	d901      	bls.n	8006288 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006284:	2303      	movs	r3, #3
 8006286:	e007      	b.n	8006298 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b00      	cmp	r3, #0
 8006294:	d0ee      	beq.n	8006274 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68db      	ldr	r3, [r3, #12]
 80062b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d119      	bne.n	80062ee <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f04f 32ff 	mov.w	r2, #4294967295
 80062c2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80062c4:	f7fc fb20 	bl	8002908 <HAL_GetTick>
 80062c8:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062ca:	e009      	b.n	80062e0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80062cc:	f7fc fb1c 	bl	8002908 <HAL_GetTick>
 80062d0:	4602      	mov	r2, r0
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062da:	d901      	bls.n	80062e0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e007      	b.n	80062f0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d0ee      	beq.n	80062cc <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80062f8:	b480      	push	{r7}
 80062fa:	b085      	sub	sp, #20
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	4603      	mov	r3, r0
 8006300:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8006306:	79fb      	ldrb	r3, [r7, #7]
 8006308:	091b      	lsrs	r3, r3, #4
 800630a:	b2db      	uxtb	r3, r3
 800630c:	461a      	mov	r2, r3
 800630e:	4613      	mov	r3, r2
 8006310:	009b      	lsls	r3, r3, #2
 8006312:	4413      	add	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8006318:	79fb      	ldrb	r3, [r7, #7]
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	b2da      	uxtb	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	b2db      	uxtb	r3, r3
 8006324:	4413      	add	r3, r2
 8006326:	b2db      	uxtb	r3, r3
}
 8006328:	4618      	mov	r0, r3
 800632a:	3714      	adds	r7, #20
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e03f      	b.n	80063c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fc f8b4 	bl	80024c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2224      	movs	r2, #36	; 0x24
 8006364:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006376:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fe11 	bl	8006fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	691a      	ldr	r2, [r3, #16]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800638c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	695a      	ldr	r2, [r3, #20]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800639c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2220      	movs	r2, #32
 80063b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2220      	movs	r2, #32
 80063c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063ce:	b580      	push	{r7, lr}
 80063d0:	b088      	sub	sp, #32
 80063d2:	af02      	add	r7, sp, #8
 80063d4:	60f8      	str	r0, [r7, #12]
 80063d6:	60b9      	str	r1, [r7, #8]
 80063d8:	603b      	str	r3, [r7, #0]
 80063da:	4613      	mov	r3, r2
 80063dc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80063e8:	b2db      	uxtb	r3, r3
 80063ea:	2b20      	cmp	r3, #32
 80063ec:	f040 8083 	bne.w	80064f6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d002      	beq.n	80063fc <HAL_UART_Transmit+0x2e>
 80063f6:	88fb      	ldrh	r3, [r7, #6]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80063fc:	2301      	movs	r3, #1
 80063fe:	e07b      	b.n	80064f8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_UART_Transmit+0x40>
 800640a:	2302      	movs	r3, #2
 800640c:	e074      	b.n	80064f8 <HAL_UART_Transmit+0x12a>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2200      	movs	r2, #0
 800641a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2221      	movs	r2, #33	; 0x21
 8006420:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006424:	f7fc fa70 	bl	8002908 <HAL_GetTick>
 8006428:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	88fa      	ldrh	r2, [r7, #6]
 800642e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	88fa      	ldrh	r2, [r7, #6]
 8006434:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2200      	movs	r2, #0
 800643a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800643e:	e042      	b.n	80064c6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006444:	b29b      	uxth	r3, r3
 8006446:	3b01      	subs	r3, #1
 8006448:	b29a      	uxth	r2, r3
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006456:	d122      	bne.n	800649e <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	9300      	str	r3, [sp, #0]
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	2200      	movs	r2, #0
 8006460:	2180      	movs	r1, #128	; 0x80
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fc1b 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 8006468:	4603      	mov	r3, r0
 800646a:	2b00      	cmp	r3, #0
 800646c:	d001      	beq.n	8006472 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800646e:	2303      	movs	r3, #3
 8006470:	e042      	b.n	80064f8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	881b      	ldrh	r3, [r3, #0]
 800647a:	461a      	mov	r2, r3
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006484:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d103      	bne.n	8006496 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	3302      	adds	r3, #2
 8006492:	60bb      	str	r3, [r7, #8]
 8006494:	e017      	b.n	80064c6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	3301      	adds	r3, #1
 800649a:	60bb      	str	r3, [r7, #8]
 800649c:	e013      	b.n	80064c6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	2200      	movs	r2, #0
 80064a6:	2180      	movs	r1, #128	; 0x80
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fbf8 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 80064ae:	4603      	mov	r3, r0
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d001      	beq.n	80064b8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e01f      	b.n	80064f8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80064b8:	68bb      	ldr	r3, [r7, #8]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	60ba      	str	r2, [r7, #8]
 80064be:	781a      	ldrb	r2, [r3, #0]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d1b7      	bne.n	8006440 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	9300      	str	r3, [sp, #0]
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	2200      	movs	r2, #0
 80064d8:	2140      	movs	r1, #64	; 0x40
 80064da:	68f8      	ldr	r0, [r7, #12]
 80064dc:	f000 fbdf 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e006      	b.n	80064f8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2220      	movs	r2, #32
 80064ee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e000      	b.n	80064f8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80064f6:	2302      	movs	r3, #2
  }
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3718      	adds	r7, #24
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	603b      	str	r3, [r7, #0]
 800650c:	4613      	mov	r3, r2
 800650e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8006510:	2300      	movs	r3, #0
 8006512:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800651a:	b2db      	uxtb	r3, r3
 800651c:	2b20      	cmp	r3, #32
 800651e:	f040 8090 	bne.w	8006642 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d002      	beq.n	800652e <HAL_UART_Receive+0x2e>
 8006528:	88fb      	ldrh	r3, [r7, #6]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d101      	bne.n	8006532 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e088      	b.n	8006644 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <HAL_UART_Receive+0x40>
 800653c:	2302      	movs	r3, #2
 800653e:	e081      	b.n	8006644 <HAL_UART_Receive+0x144>
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	2201      	movs	r2, #1
 8006544:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2222      	movs	r2, #34	; 0x22
 8006552:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8006556:	f7fc f9d7 	bl	8002908 <HAL_GetTick>
 800655a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	88fa      	ldrh	r2, [r7, #6]
 8006560:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	88fa      	ldrh	r2, [r7, #6]
 8006566:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006570:	e05c      	b.n	800662c <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006576:	b29b      	uxth	r3, r3
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	689b      	ldr	r3, [r3, #8]
 8006584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006588:	d12b      	bne.n	80065e2 <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	2200      	movs	r2, #0
 8006592:	2120      	movs	r1, #32
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f000 fb82 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d001      	beq.n	80065a4 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e04f      	b.n	8006644 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10c      	bne.n	80065ca <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065bc:	b29a      	uxth	r2, r3
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80065c2:	68bb      	ldr	r3, [r7, #8]
 80065c4:	3302      	adds	r3, #2
 80065c6:	60bb      	str	r3, [r7, #8]
 80065c8:	e030      	b.n	800662c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	3301      	adds	r3, #1
 80065de:	60bb      	str	r3, [r7, #8]
 80065e0:	e024      	b.n	800662c <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2200      	movs	r2, #0
 80065ea:	2120      	movs	r1, #32
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fb56 	bl	8006c9e <UART_WaitOnFlagUntilTimeout>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e023      	b.n	8006644 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	691b      	ldr	r3, [r3, #16]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d108      	bne.n	8006616 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6859      	ldr	r1, [r3, #4]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	60ba      	str	r2, [r7, #8]
 8006610:	b2ca      	uxtb	r2, r1
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	e00a      	b.n	800662c <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	b2da      	uxtb	r2, r3
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	1c59      	adds	r1, r3, #1
 8006622:	60b9      	str	r1, [r7, #8]
 8006624:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006628:	b2d2      	uxtb	r2, r2
 800662a:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006630:	b29b      	uxth	r3, r3
 8006632:	2b00      	cmp	r3, #0
 8006634:	d19d      	bne.n	8006572 <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2220      	movs	r2, #32
 800663a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800663e:	2300      	movs	r3, #0
 8006640:	e000      	b.n	8006644 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8006642:	2302      	movs	r3, #2
  }
}
 8006644:	4618      	mov	r0, r3
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	4613      	mov	r3, r2
 8006658:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006660:	b2db      	uxtb	r3, r3
 8006662:	2b20      	cmp	r3, #32
 8006664:	d153      	bne.n	800670e <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d002      	beq.n	8006672 <HAL_UART_Transmit_DMA+0x26>
 800666c:	88fb      	ldrh	r3, [r7, #6]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8006672:	2301      	movs	r3, #1
 8006674:	e04c      	b.n	8006710 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800667c:	2b01      	cmp	r3, #1
 800667e:	d101      	bne.n	8006684 <HAL_UART_Transmit_DMA+0x38>
 8006680:	2302      	movs	r3, #2
 8006682:	e045      	b.n	8006710 <HAL_UART_Transmit_DMA+0xc4>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	88fa      	ldrh	r2, [r7, #6]
 8006696:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	88fa      	ldrh	r2, [r7, #6]
 800669c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2221      	movs	r2, #33	; 0x21
 80066a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	4a19      	ldr	r2, [pc, #100]	; (8006718 <HAL_UART_Transmit_DMA+0xcc>)
 80066b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b8:	4a18      	ldr	r2, [pc, #96]	; (800671c <HAL_UART_Transmit_DMA+0xd0>)
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c0:	4a17      	ldr	r2, [pc, #92]	; (8006720 <HAL_UART_Transmit_DMA+0xd4>)
 80066c2:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c8:	2200      	movs	r2, #0
 80066ca:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 80066cc:	f107 0308 	add.w	r3, r7, #8
 80066d0:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	6819      	ldr	r1, [r3, #0]
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	3304      	adds	r3, #4
 80066e0:	461a      	mov	r2, r3
 80066e2:	88fb      	ldrh	r3, [r7, #6]
 80066e4:	f7fd f8e2 	bl	80038ac <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80066f0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	695a      	ldr	r2, [r3, #20]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006708:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800670a:	2300      	movs	r3, #0
 800670c:	e000      	b.n	8006710 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800670e:	2302      	movs	r3, #2
  }
}
 8006710:	4618      	mov	r0, r3
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	08006b19 	.word	0x08006b19
 800671c:	08006b6b 	.word	0x08006b6b
 8006720:	08006c0b 	.word	0x08006c0b

08006724 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	4613      	mov	r3, r2
 8006730:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b20      	cmp	r3, #32
 800673c:	d166      	bne.n	800680c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_UART_Receive_DMA+0x26>
 8006744:	88fb      	ldrh	r3, [r7, #6]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d101      	bne.n	800674e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	e05f      	b.n	800680e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006754:	2b01      	cmp	r3, #1
 8006756:	d101      	bne.n	800675c <HAL_UART_Receive_DMA+0x38>
 8006758:	2302      	movs	r3, #2
 800675a:	e058      	b.n	800680e <HAL_UART_Receive_DMA+0xea>
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	88fa      	ldrh	r2, [r7, #6]
 800676e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2222      	movs	r2, #34	; 0x22
 800677a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006782:	4a25      	ldr	r2, [pc, #148]	; (8006818 <HAL_UART_Receive_DMA+0xf4>)
 8006784:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678a:	4a24      	ldr	r2, [pc, #144]	; (800681c <HAL_UART_Receive_DMA+0xf8>)
 800678c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006792:	4a23      	ldr	r2, [pc, #140]	; (8006820 <HAL_UART_Receive_DMA+0xfc>)
 8006794:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800679a:	2200      	movs	r2, #0
 800679c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800679e:	f107 0308 	add.w	r3, r7, #8
 80067a2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	3304      	adds	r3, #4
 80067ae:	4619      	mov	r1, r3
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	88fb      	ldrh	r3, [r7, #6]
 80067b6:	f7fd f879 	bl	80038ac <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 80067ba:	2300      	movs	r3, #0
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	613b      	str	r3, [r7, #16]
 80067ce:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067e6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	695a      	ldr	r2, [r3, #20]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f042 0201 	orr.w	r2, r2, #1
 80067f6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	695a      	ldr	r2, [r3, #20]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006806:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8006808:	2300      	movs	r3, #0
 800680a:	e000      	b.n	800680e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800680c:	2302      	movs	r3, #2
  }
}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	08006b87 	.word	0x08006b87
 800681c:	08006bef 	.word	0x08006bef
 8006820:	08006c0b 	.word	0x08006c0b

08006824 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	695b      	ldr	r3, [r3, #20]
 8006836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683a:	2b80      	cmp	r3, #128	; 0x80
 800683c:	bf0c      	ite	eq
 800683e:	2301      	moveq	r3, #1
 8006840:	2300      	movne	r3, #0
 8006842:	b2db      	uxtb	r3, r3
 8006844:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b21      	cmp	r3, #33	; 0x21
 8006850:	d116      	bne.n	8006880 <HAL_UART_DMAStop+0x5c>
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d013      	beq.n	8006880 <HAL_UART_DMAStop+0x5c>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	695a      	ldr	r2, [r3, #20]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006866:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800686c:	2b00      	cmp	r3, #0
 800686e:	d004      	beq.n	800687a <HAL_UART_DMAStop+0x56>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006874:	4618      	mov	r0, r3
 8006876:	f7fd f871 	bl	800395c <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fa59 	bl	8006d32 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	695b      	ldr	r3, [r3, #20]
 8006886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800688a:	2b40      	cmp	r3, #64	; 0x40
 800688c:	bf0c      	ite	eq
 800688e:	2301      	moveq	r3, #1
 8006890:	2300      	movne	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b22      	cmp	r3, #34	; 0x22
 80068a0:	d116      	bne.n	80068d0 <HAL_UART_DMAStop+0xac>
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d013      	beq.n	80068d0 <HAL_UART_DMAStop+0xac>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	695a      	ldr	r2, [r3, #20]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b6:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <HAL_UART_DMAStop+0xa6>
    {
      HAL_DMA_Abort(huart->hdmarx);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068c4:	4618      	mov	r0, r3
 80068c6:	f7fd f849 	bl	800395c <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 fa47 	bl	8006d5e <UART_EndRxTransfer>
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}
	...

080068dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b088      	sub	sp, #32
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68db      	ldr	r3, [r3, #12]
 80068f2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80068fc:	2300      	movs	r3, #0
 80068fe:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f003 030f 	and.w	r3, r3, #15
 800690a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006912:	69fb      	ldr	r3, [r7, #28]
 8006914:	f003 0320 	and.w	r3, r3, #32
 8006918:	2b00      	cmp	r3, #0
 800691a:	d008      	beq.n	800692e <HAL_UART_IRQHandler+0x52>
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	f003 0320 	and.w	r3, r3, #32
 8006922:	2b00      	cmp	r3, #0
 8006924:	d003      	beq.n	800692e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fab9 	bl	8006e9e <UART_Receive_IT>
      return;
 800692c:	e0d1      	b.n	8006ad2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	2b00      	cmp	r3, #0
 8006932:	f000 80b0 	beq.w	8006a96 <HAL_UART_IRQHandler+0x1ba>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d105      	bne.n	800694c <HAL_UART_IRQHandler+0x70>
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006946:	2b00      	cmp	r3, #0
 8006948:	f000 80a5 	beq.w	8006a96 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <HAL_UART_IRQHandler+0x90>
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006964:	f043 0201 	orr.w	r2, r3, #1
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800696c:	69fb      	ldr	r3, [r7, #28]
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <HAL_UART_IRQHandler+0xb0>
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	f003 0301 	and.w	r3, r3, #1
 800697c:	2b00      	cmp	r3, #0
 800697e:	d005      	beq.n	800698c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006984:	f043 0202 	orr.w	r2, r3, #2
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	f003 0302 	and.w	r3, r3, #2
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00a      	beq.n	80069ac <HAL_UART_IRQHandler+0xd0>
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f003 0301 	and.w	r3, r3, #1
 800699c:	2b00      	cmp	r3, #0
 800699e:	d005      	beq.n	80069ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069a4:	f043 0204 	orr.w	r2, r3, #4
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	f003 0308 	and.w	r3, r3, #8
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d00f      	beq.n	80069d6 <HAL_UART_IRQHandler+0xfa>
 80069b6:	69bb      	ldr	r3, [r7, #24]
 80069b8:	f003 0320 	and.w	r3, r3, #32
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d104      	bne.n	80069ca <HAL_UART_IRQHandler+0xee>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d005      	beq.n	80069d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ce:	f043 0208 	orr.w	r2, r3, #8
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d078      	beq.n	8006ad0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	f003 0320 	and.w	r3, r3, #32
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d007      	beq.n	80069f8 <HAL_UART_IRQHandler+0x11c>
 80069e8:	69bb      	ldr	r3, [r7, #24]
 80069ea:	f003 0320 	and.w	r3, r3, #32
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d002      	beq.n	80069f8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80069f2:	6878      	ldr	r0, [r7, #4]
 80069f4:	f000 fa53 	bl	8006e9e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a02:	2b40      	cmp	r3, #64	; 0x40
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a12:	f003 0308 	and.w	r3, r3, #8
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d102      	bne.n	8006a20 <HAL_UART_IRQHandler+0x144>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d031      	beq.n	8006a84 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f000 f99c 	bl	8006d5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b40      	cmp	r3, #64	; 0x40
 8006a32:	d123      	bne.n	8006a7c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	695a      	ldr	r2, [r3, #20]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a42:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d013      	beq.n	8006a74 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a50:	4a21      	ldr	r2, [pc, #132]	; (8006ad8 <HAL_UART_IRQHandler+0x1fc>)
 8006a52:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fc ffef 	bl	8003a3c <HAL_DMA_Abort_IT>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d016      	beq.n	8006a92 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006a6e:	4610      	mov	r0, r2
 8006a70:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a72:	e00e      	b.n	8006a92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f845 	bl	8006b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a7a:	e00a      	b.n	8006a92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f841 	bl	8006b04 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a82:	e006      	b.n	8006a92 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f83d 	bl	8006b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006a90:	e01e      	b.n	8006ad0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a92:	bf00      	nop
    return;
 8006a94:	e01c      	b.n	8006ad0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d008      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x1d6>
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d003      	beq.n	8006ab2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f000 f989 	bl	8006dc2 <UART_Transmit_IT>
    return;
 8006ab0:	e00f      	b.n	8006ad2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1f6>
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d005      	beq.n	8006ad2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f9d1 	bl	8006e6e <UART_EndTransmit_IT>
    return;
 8006acc:	bf00      	nop
 8006ace:	e000      	b.n	8006ad2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006ad0:	bf00      	nop
  }
}
 8006ad2:	3720      	adds	r7, #32
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	08006d9b 	.word	0x08006d9b

08006adc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b083      	sub	sp, #12
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006af8:	bf00      	nop
 8006afa:	370c      	adds	r7, #12
 8006afc:	46bd      	mov	sp, r7
 8006afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b02:	4770      	bx	lr

08006b04 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006b0c:	bf00      	nop
 8006b0e:	370c      	adds	r7, #12
 8006b10:	46bd      	mov	sp, r7
 8006b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b16:	4770      	bx	lr

08006b18 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b24:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d113      	bne.n	8006b5c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695a      	ldr	r2, [r3, #20]
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b48:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68da      	ldr	r2, [r3, #12]
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b58:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b5a:	e002      	b.n	8006b62 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8006b5c:	68f8      	ldr	r0, [r7, #12]
 8006b5e:	f7fb fa8b 	bl	8002078 <HAL_UART_TxCpltCallback>
}
 8006b62:	bf00      	nop
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}

08006b6a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b76:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f7ff ffaf 	bl	8006adc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b7e:	bf00      	nop
 8006b80:	3710      	adds	r7, #16
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b92:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d11e      	bne.n	8006be0 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68da      	ldr	r2, [r3, #12]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	695a      	ldr	r2, [r3, #20]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f022 0201 	bic.w	r2, r2, #1
 8006bc6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695a      	ldr	r2, [r3, #20]
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bd6:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7fb fa53 	bl	800208c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}

08006bee <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006bee:	b580      	push	{r7, lr}
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfa:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f7ff ff77 	bl	8006af0 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c02:	bf00      	nop
 8006c04:	3710      	adds	r7, #16
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}

08006c0a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006c0a:	b580      	push	{r7, lr}
 8006c0c:	b084      	sub	sp, #16
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006c12:	2300      	movs	r3, #0
 8006c14:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c26:	2b80      	cmp	r3, #128	; 0x80
 8006c28:	bf0c      	ite	eq
 8006c2a:	2301      	moveq	r3, #1
 8006c2c:	2300      	movne	r3, #0
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b21      	cmp	r3, #33	; 0x21
 8006c3c:	d108      	bne.n	8006c50 <UART_DMAError+0x46>
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d005      	beq.n	8006c50 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2200      	movs	r2, #0
 8006c48:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006c4a:	68b8      	ldr	r0, [r7, #8]
 8006c4c:	f000 f871 	bl	8006d32 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5a:	2b40      	cmp	r3, #64	; 0x40
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006c6c:	b2db      	uxtb	r3, r3
 8006c6e:	2b22      	cmp	r3, #34	; 0x22
 8006c70:	d108      	bne.n	8006c84 <UART_DMAError+0x7a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d005      	beq.n	8006c84 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006c7e:	68b8      	ldr	r0, [r7, #8]
 8006c80:	f000 f86d 	bl	8006d5e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c88:	f043 0210 	orr.w	r2, r3, #16
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006c90:	68b8      	ldr	r0, [r7, #8]
 8006c92:	f7ff ff37 	bl	8006b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c96:	bf00      	nop
 8006c98:	3710      	adds	r7, #16
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	60f8      	str	r0, [r7, #12]
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	603b      	str	r3, [r7, #0]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cae:	e02c      	b.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cb0:	69bb      	ldr	r3, [r7, #24]
 8006cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cb6:	d028      	beq.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <UART_WaitOnFlagUntilTimeout+0x30>
 8006cbe:	f7fb fe23 	bl	8002908 <HAL_GetTick>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	429a      	cmp	r2, r3
 8006ccc:	d21d      	bcs.n	8006d0a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68da      	ldr	r2, [r3, #12]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006cdc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	695a      	ldr	r2, [r3, #20]
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2200      	movs	r2, #0
 8006d02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8006d06:	2303      	movs	r3, #3
 8006d08:	e00f      	b.n	8006d2a <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	681a      	ldr	r2, [r3, #0]
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4013      	ands	r3, r2
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	bf0c      	ite	eq
 8006d1a:	2301      	moveq	r3, #1
 8006d1c:	2300      	movne	r3, #0
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	461a      	mov	r2, r3
 8006d22:	79fb      	ldrb	r3, [r7, #7]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d0c3      	beq.n	8006cb0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d28:	2300      	movs	r3, #0
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3710      	adds	r7, #16
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}

08006d32 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	68da      	ldr	r2, [r3, #12]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006d48:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	2220      	movs	r2, #32
 8006d4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006d52:	bf00      	nop
 8006d54:	370c      	adds	r7, #12
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr

08006d5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006d5e:	b480      	push	{r7}
 8006d60:	b083      	sub	sp, #12
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	68da      	ldr	r2, [r3, #12]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006d74:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	695a      	ldr	r2, [r3, #20]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	2220      	movs	r2, #32
 8006d8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006d8e:	bf00      	nop
 8006d90:	370c      	adds	r7, #12
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr

08006d9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d9a:	b580      	push	{r7, lr}
 8006d9c:	b084      	sub	sp, #16
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006da6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	2200      	movs	r2, #0
 8006db2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f7ff fea5 	bl	8006b04 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dba:	bf00      	nop
 8006dbc:	3710      	adds	r7, #16
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}

08006dc2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	2b21      	cmp	r3, #33	; 0x21
 8006dd4:	d144      	bne.n	8006e60 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dde:	d11a      	bne.n	8006e16 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6a1b      	ldr	r3, [r3, #32]
 8006de4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	881b      	ldrh	r3, [r3, #0]
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006df4:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d105      	bne.n	8006e0a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	6a1b      	ldr	r3, [r3, #32]
 8006e02:	1c9a      	adds	r2, r3, #2
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	621a      	str	r2, [r3, #32]
 8006e08:	e00e      	b.n	8006e28 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	621a      	str	r2, [r3, #32]
 8006e14:	e008      	b.n	8006e28 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6a1b      	ldr	r3, [r3, #32]
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	6211      	str	r1, [r2, #32]
 8006e20:	781a      	ldrb	r2, [r3, #0]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	3b01      	subs	r3, #1
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	4619      	mov	r1, r3
 8006e36:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d10f      	bne.n	8006e5c <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	68da      	ldr	r2, [r3, #12]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e4a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68da      	ldr	r2, [r3, #12]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e5a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	e000      	b.n	8006e62 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006e60:	2302      	movs	r3, #2
  }
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr

08006e6e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b082      	sub	sp, #8
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	68da      	ldr	r2, [r3, #12]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e84:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2220      	movs	r2, #32
 8006e8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7fb f8f2 	bl	8002078 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006e94:	2300      	movs	r3, #0
}
 8006e96:	4618      	mov	r0, r3
 8006e98:	3708      	adds	r7, #8
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}

08006e9e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e9e:	b580      	push	{r7, lr}
 8006ea0:	b084      	sub	sp, #16
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b22      	cmp	r3, #34	; 0x22
 8006eb0:	d171      	bne.n	8006f96 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eba:	d123      	bne.n	8006f04 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ec0:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	691b      	ldr	r3, [r3, #16]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d10e      	bne.n	8006ee8 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	685b      	ldr	r3, [r3, #4]
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ee0:	1c9a      	adds	r2, r3, #2
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	629a      	str	r2, [r3, #40]	; 0x28
 8006ee6:	e029      	b.n	8006f3c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	b29a      	uxth	r2, r3
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	1c5a      	adds	r2, r3, #1
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	629a      	str	r2, [r3, #40]	; 0x28
 8006f02:	e01b      	b.n	8006f3c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6858      	ldr	r0, [r3, #4]
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	1c59      	adds	r1, r3, #1
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	6291      	str	r1, [r2, #40]	; 0x28
 8006f1c:	b2c2      	uxtb	r2, r0
 8006f1e:	701a      	strb	r2, [r3, #0]
 8006f20:	e00c      	b.n	8006f3c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f2e:	1c58      	adds	r0, r3, #1
 8006f30:	6879      	ldr	r1, [r7, #4]
 8006f32:	6288      	str	r0, [r1, #40]	; 0x28
 8006f34:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006f38:	b2d2      	uxtb	r2, r2
 8006f3a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4619      	mov	r1, r3
 8006f4a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d120      	bne.n	8006f92 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68da      	ldr	r2, [r3, #12]
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f022 0220 	bic.w	r2, r2, #32
 8006f5e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	68da      	ldr	r2, [r3, #12]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006f6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	695a      	ldr	r2, [r3, #20]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f022 0201 	bic.w	r2, r2, #1
 8006f7e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2220      	movs	r2, #32
 8006f84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f7fb f87f 	bl	800208c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	e002      	b.n	8006f98 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006f92:	2300      	movs	r3, #0
 8006f94:	e000      	b.n	8006f98 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006f96:	2302      	movs	r3, #2
  }
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3710      	adds	r7, #16
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}

08006fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fa4:	b085      	sub	sp, #20
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	68da      	ldr	r2, [r3, #12]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	430a      	orrs	r2, r1
 8006fbe:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	691b      	ldr	r3, [r3, #16]
 8006fc8:	431a      	orrs	r2, r3
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	431a      	orrs	r2, r3
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	69db      	ldr	r3, [r3, #28]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006fe2:	f023 030c 	bic.w	r3, r3, #12
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	6812      	ldr	r2, [r2, #0]
 8006fea:	68f9      	ldr	r1, [r7, #12]
 8006fec:	430b      	orrs	r3, r1
 8006fee:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	695b      	ldr	r3, [r3, #20]
 8006ff6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	699a      	ldr	r2, [r3, #24]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800700e:	f040 818b 	bne.w	8007328 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4ac1      	ldr	r2, [pc, #772]	; (800731c <UART_SetConfig+0x37c>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d005      	beq.n	8007028 <UART_SetConfig+0x88>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4abf      	ldr	r2, [pc, #764]	; (8007320 <UART_SetConfig+0x380>)
 8007022:	4293      	cmp	r3, r2
 8007024:	f040 80bd 	bne.w	80071a2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007028:	f7fe fe02 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 800702c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	461d      	mov	r5, r3
 8007032:	f04f 0600 	mov.w	r6, #0
 8007036:	46a8      	mov	r8, r5
 8007038:	46b1      	mov	r9, r6
 800703a:	eb18 0308 	adds.w	r3, r8, r8
 800703e:	eb49 0409 	adc.w	r4, r9, r9
 8007042:	4698      	mov	r8, r3
 8007044:	46a1      	mov	r9, r4
 8007046:	eb18 0805 	adds.w	r8, r8, r5
 800704a:	eb49 0906 	adc.w	r9, r9, r6
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800705a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800705e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007062:	4688      	mov	r8, r1
 8007064:	4691      	mov	r9, r2
 8007066:	eb18 0005 	adds.w	r0, r8, r5
 800706a:	eb49 0106 	adc.w	r1, r9, r6
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	461d      	mov	r5, r3
 8007074:	f04f 0600 	mov.w	r6, #0
 8007078:	196b      	adds	r3, r5, r5
 800707a:	eb46 0406 	adc.w	r4, r6, r6
 800707e:	461a      	mov	r2, r3
 8007080:	4623      	mov	r3, r4
 8007082:	f7f9 fcf3 	bl	8000a6c <__aeabi_uldivmod>
 8007086:	4603      	mov	r3, r0
 8007088:	460c      	mov	r4, r1
 800708a:	461a      	mov	r2, r3
 800708c:	4ba5      	ldr	r3, [pc, #660]	; (8007324 <UART_SetConfig+0x384>)
 800708e:	fba3 2302 	umull	r2, r3, r3, r2
 8007092:	095b      	lsrs	r3, r3, #5
 8007094:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	461d      	mov	r5, r3
 800709c:	f04f 0600 	mov.w	r6, #0
 80070a0:	46a9      	mov	r9, r5
 80070a2:	46b2      	mov	sl, r6
 80070a4:	eb19 0309 	adds.w	r3, r9, r9
 80070a8:	eb4a 040a 	adc.w	r4, sl, sl
 80070ac:	4699      	mov	r9, r3
 80070ae:	46a2      	mov	sl, r4
 80070b0:	eb19 0905 	adds.w	r9, r9, r5
 80070b4:	eb4a 0a06 	adc.w	sl, sl, r6
 80070b8:	f04f 0100 	mov.w	r1, #0
 80070bc:	f04f 0200 	mov.w	r2, #0
 80070c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80070c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80070c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80070cc:	4689      	mov	r9, r1
 80070ce:	4692      	mov	sl, r2
 80070d0:	eb19 0005 	adds.w	r0, r9, r5
 80070d4:	eb4a 0106 	adc.w	r1, sl, r6
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	461d      	mov	r5, r3
 80070de:	f04f 0600 	mov.w	r6, #0
 80070e2:	196b      	adds	r3, r5, r5
 80070e4:	eb46 0406 	adc.w	r4, r6, r6
 80070e8:	461a      	mov	r2, r3
 80070ea:	4623      	mov	r3, r4
 80070ec:	f7f9 fcbe 	bl	8000a6c <__aeabi_uldivmod>
 80070f0:	4603      	mov	r3, r0
 80070f2:	460c      	mov	r4, r1
 80070f4:	461a      	mov	r2, r3
 80070f6:	4b8b      	ldr	r3, [pc, #556]	; (8007324 <UART_SetConfig+0x384>)
 80070f8:	fba3 1302 	umull	r1, r3, r3, r2
 80070fc:	095b      	lsrs	r3, r3, #5
 80070fe:	2164      	movs	r1, #100	; 0x64
 8007100:	fb01 f303 	mul.w	r3, r1, r3
 8007104:	1ad3      	subs	r3, r2, r3
 8007106:	00db      	lsls	r3, r3, #3
 8007108:	3332      	adds	r3, #50	; 0x32
 800710a:	4a86      	ldr	r2, [pc, #536]	; (8007324 <UART_SetConfig+0x384>)
 800710c:	fba2 2303 	umull	r2, r3, r2, r3
 8007110:	095b      	lsrs	r3, r3, #5
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007118:	4498      	add	r8, r3
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	461d      	mov	r5, r3
 800711e:	f04f 0600 	mov.w	r6, #0
 8007122:	46a9      	mov	r9, r5
 8007124:	46b2      	mov	sl, r6
 8007126:	eb19 0309 	adds.w	r3, r9, r9
 800712a:	eb4a 040a 	adc.w	r4, sl, sl
 800712e:	4699      	mov	r9, r3
 8007130:	46a2      	mov	sl, r4
 8007132:	eb19 0905 	adds.w	r9, r9, r5
 8007136:	eb4a 0a06 	adc.w	sl, sl, r6
 800713a:	f04f 0100 	mov.w	r1, #0
 800713e:	f04f 0200 	mov.w	r2, #0
 8007142:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007146:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800714a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800714e:	4689      	mov	r9, r1
 8007150:	4692      	mov	sl, r2
 8007152:	eb19 0005 	adds.w	r0, r9, r5
 8007156:	eb4a 0106 	adc.w	r1, sl, r6
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	461d      	mov	r5, r3
 8007160:	f04f 0600 	mov.w	r6, #0
 8007164:	196b      	adds	r3, r5, r5
 8007166:	eb46 0406 	adc.w	r4, r6, r6
 800716a:	461a      	mov	r2, r3
 800716c:	4623      	mov	r3, r4
 800716e:	f7f9 fc7d 	bl	8000a6c <__aeabi_uldivmod>
 8007172:	4603      	mov	r3, r0
 8007174:	460c      	mov	r4, r1
 8007176:	461a      	mov	r2, r3
 8007178:	4b6a      	ldr	r3, [pc, #424]	; (8007324 <UART_SetConfig+0x384>)
 800717a:	fba3 1302 	umull	r1, r3, r3, r2
 800717e:	095b      	lsrs	r3, r3, #5
 8007180:	2164      	movs	r1, #100	; 0x64
 8007182:	fb01 f303 	mul.w	r3, r1, r3
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	00db      	lsls	r3, r3, #3
 800718a:	3332      	adds	r3, #50	; 0x32
 800718c:	4a65      	ldr	r2, [pc, #404]	; (8007324 <UART_SetConfig+0x384>)
 800718e:	fba2 2303 	umull	r2, r3, r2, r3
 8007192:	095b      	lsrs	r3, r3, #5
 8007194:	f003 0207 	and.w	r2, r3, #7
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4442      	add	r2, r8
 800719e:	609a      	str	r2, [r3, #8]
 80071a0:	e26f      	b.n	8007682 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071a2:	f7fe fd31 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80071a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	461d      	mov	r5, r3
 80071ac:	f04f 0600 	mov.w	r6, #0
 80071b0:	46a8      	mov	r8, r5
 80071b2:	46b1      	mov	r9, r6
 80071b4:	eb18 0308 	adds.w	r3, r8, r8
 80071b8:	eb49 0409 	adc.w	r4, r9, r9
 80071bc:	4698      	mov	r8, r3
 80071be:	46a1      	mov	r9, r4
 80071c0:	eb18 0805 	adds.w	r8, r8, r5
 80071c4:	eb49 0906 	adc.w	r9, r9, r6
 80071c8:	f04f 0100 	mov.w	r1, #0
 80071cc:	f04f 0200 	mov.w	r2, #0
 80071d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80071d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80071d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80071dc:	4688      	mov	r8, r1
 80071de:	4691      	mov	r9, r2
 80071e0:	eb18 0005 	adds.w	r0, r8, r5
 80071e4:	eb49 0106 	adc.w	r1, r9, r6
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	461d      	mov	r5, r3
 80071ee:	f04f 0600 	mov.w	r6, #0
 80071f2:	196b      	adds	r3, r5, r5
 80071f4:	eb46 0406 	adc.w	r4, r6, r6
 80071f8:	461a      	mov	r2, r3
 80071fa:	4623      	mov	r3, r4
 80071fc:	f7f9 fc36 	bl	8000a6c <__aeabi_uldivmod>
 8007200:	4603      	mov	r3, r0
 8007202:	460c      	mov	r4, r1
 8007204:	461a      	mov	r2, r3
 8007206:	4b47      	ldr	r3, [pc, #284]	; (8007324 <UART_SetConfig+0x384>)
 8007208:	fba3 2302 	umull	r2, r3, r3, r2
 800720c:	095b      	lsrs	r3, r3, #5
 800720e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	461d      	mov	r5, r3
 8007216:	f04f 0600 	mov.w	r6, #0
 800721a:	46a9      	mov	r9, r5
 800721c:	46b2      	mov	sl, r6
 800721e:	eb19 0309 	adds.w	r3, r9, r9
 8007222:	eb4a 040a 	adc.w	r4, sl, sl
 8007226:	4699      	mov	r9, r3
 8007228:	46a2      	mov	sl, r4
 800722a:	eb19 0905 	adds.w	r9, r9, r5
 800722e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007232:	f04f 0100 	mov.w	r1, #0
 8007236:	f04f 0200 	mov.w	r2, #0
 800723a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800723e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007242:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007246:	4689      	mov	r9, r1
 8007248:	4692      	mov	sl, r2
 800724a:	eb19 0005 	adds.w	r0, r9, r5
 800724e:	eb4a 0106 	adc.w	r1, sl, r6
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	685b      	ldr	r3, [r3, #4]
 8007256:	461d      	mov	r5, r3
 8007258:	f04f 0600 	mov.w	r6, #0
 800725c:	196b      	adds	r3, r5, r5
 800725e:	eb46 0406 	adc.w	r4, r6, r6
 8007262:	461a      	mov	r2, r3
 8007264:	4623      	mov	r3, r4
 8007266:	f7f9 fc01 	bl	8000a6c <__aeabi_uldivmod>
 800726a:	4603      	mov	r3, r0
 800726c:	460c      	mov	r4, r1
 800726e:	461a      	mov	r2, r3
 8007270:	4b2c      	ldr	r3, [pc, #176]	; (8007324 <UART_SetConfig+0x384>)
 8007272:	fba3 1302 	umull	r1, r3, r3, r2
 8007276:	095b      	lsrs	r3, r3, #5
 8007278:	2164      	movs	r1, #100	; 0x64
 800727a:	fb01 f303 	mul.w	r3, r1, r3
 800727e:	1ad3      	subs	r3, r2, r3
 8007280:	00db      	lsls	r3, r3, #3
 8007282:	3332      	adds	r3, #50	; 0x32
 8007284:	4a27      	ldr	r2, [pc, #156]	; (8007324 <UART_SetConfig+0x384>)
 8007286:	fba2 2303 	umull	r2, r3, r2, r3
 800728a:	095b      	lsrs	r3, r3, #5
 800728c:	005b      	lsls	r3, r3, #1
 800728e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007292:	4498      	add	r8, r3
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	461d      	mov	r5, r3
 8007298:	f04f 0600 	mov.w	r6, #0
 800729c:	46a9      	mov	r9, r5
 800729e:	46b2      	mov	sl, r6
 80072a0:	eb19 0309 	adds.w	r3, r9, r9
 80072a4:	eb4a 040a 	adc.w	r4, sl, sl
 80072a8:	4699      	mov	r9, r3
 80072aa:	46a2      	mov	sl, r4
 80072ac:	eb19 0905 	adds.w	r9, r9, r5
 80072b0:	eb4a 0a06 	adc.w	sl, sl, r6
 80072b4:	f04f 0100 	mov.w	r1, #0
 80072b8:	f04f 0200 	mov.w	r2, #0
 80072bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80072c0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80072c4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80072c8:	4689      	mov	r9, r1
 80072ca:	4692      	mov	sl, r2
 80072cc:	eb19 0005 	adds.w	r0, r9, r5
 80072d0:	eb4a 0106 	adc.w	r1, sl, r6
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	461d      	mov	r5, r3
 80072da:	f04f 0600 	mov.w	r6, #0
 80072de:	196b      	adds	r3, r5, r5
 80072e0:	eb46 0406 	adc.w	r4, r6, r6
 80072e4:	461a      	mov	r2, r3
 80072e6:	4623      	mov	r3, r4
 80072e8:	f7f9 fbc0 	bl	8000a6c <__aeabi_uldivmod>
 80072ec:	4603      	mov	r3, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	461a      	mov	r2, r3
 80072f2:	4b0c      	ldr	r3, [pc, #48]	; (8007324 <UART_SetConfig+0x384>)
 80072f4:	fba3 1302 	umull	r1, r3, r3, r2
 80072f8:	095b      	lsrs	r3, r3, #5
 80072fa:	2164      	movs	r1, #100	; 0x64
 80072fc:	fb01 f303 	mul.w	r3, r1, r3
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	3332      	adds	r3, #50	; 0x32
 8007306:	4a07      	ldr	r2, [pc, #28]	; (8007324 <UART_SetConfig+0x384>)
 8007308:	fba2 2303 	umull	r2, r3, r2, r3
 800730c:	095b      	lsrs	r3, r3, #5
 800730e:	f003 0207 	and.w	r2, r3, #7
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4442      	add	r2, r8
 8007318:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800731a:	e1b2      	b.n	8007682 <UART_SetConfig+0x6e2>
 800731c:	40011000 	.word	0x40011000
 8007320:	40011400 	.word	0x40011400
 8007324:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4ad7      	ldr	r2, [pc, #860]	; (800768c <UART_SetConfig+0x6ec>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d005      	beq.n	800733e <UART_SetConfig+0x39e>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4ad6      	ldr	r2, [pc, #856]	; (8007690 <UART_SetConfig+0x6f0>)
 8007338:	4293      	cmp	r3, r2
 800733a:	f040 80d1 	bne.w	80074e0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800733e:	f7fe fc77 	bl	8005c30 <HAL_RCC_GetPCLK2Freq>
 8007342:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	469a      	mov	sl, r3
 8007348:	f04f 0b00 	mov.w	fp, #0
 800734c:	46d0      	mov	r8, sl
 800734e:	46d9      	mov	r9, fp
 8007350:	eb18 0308 	adds.w	r3, r8, r8
 8007354:	eb49 0409 	adc.w	r4, r9, r9
 8007358:	4698      	mov	r8, r3
 800735a:	46a1      	mov	r9, r4
 800735c:	eb18 080a 	adds.w	r8, r8, sl
 8007360:	eb49 090b 	adc.w	r9, r9, fp
 8007364:	f04f 0100 	mov.w	r1, #0
 8007368:	f04f 0200 	mov.w	r2, #0
 800736c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007370:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007374:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007378:	4688      	mov	r8, r1
 800737a:	4691      	mov	r9, r2
 800737c:	eb1a 0508 	adds.w	r5, sl, r8
 8007380:	eb4b 0609 	adc.w	r6, fp, r9
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	4619      	mov	r1, r3
 800738a:	f04f 0200 	mov.w	r2, #0
 800738e:	f04f 0300 	mov.w	r3, #0
 8007392:	f04f 0400 	mov.w	r4, #0
 8007396:	0094      	lsls	r4, r2, #2
 8007398:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800739c:	008b      	lsls	r3, r1, #2
 800739e:	461a      	mov	r2, r3
 80073a0:	4623      	mov	r3, r4
 80073a2:	4628      	mov	r0, r5
 80073a4:	4631      	mov	r1, r6
 80073a6:	f7f9 fb61 	bl	8000a6c <__aeabi_uldivmod>
 80073aa:	4603      	mov	r3, r0
 80073ac:	460c      	mov	r4, r1
 80073ae:	461a      	mov	r2, r3
 80073b0:	4bb8      	ldr	r3, [pc, #736]	; (8007694 <UART_SetConfig+0x6f4>)
 80073b2:	fba3 2302 	umull	r2, r3, r3, r2
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	469b      	mov	fp, r3
 80073c0:	f04f 0c00 	mov.w	ip, #0
 80073c4:	46d9      	mov	r9, fp
 80073c6:	46e2      	mov	sl, ip
 80073c8:	eb19 0309 	adds.w	r3, r9, r9
 80073cc:	eb4a 040a 	adc.w	r4, sl, sl
 80073d0:	4699      	mov	r9, r3
 80073d2:	46a2      	mov	sl, r4
 80073d4:	eb19 090b 	adds.w	r9, r9, fp
 80073d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 80073dc:	f04f 0100 	mov.w	r1, #0
 80073e0:	f04f 0200 	mov.w	r2, #0
 80073e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80073e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80073ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80073f0:	4689      	mov	r9, r1
 80073f2:	4692      	mov	sl, r2
 80073f4:	eb1b 0509 	adds.w	r5, fp, r9
 80073f8:	eb4c 060a 	adc.w	r6, ip, sl
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	4619      	mov	r1, r3
 8007402:	f04f 0200 	mov.w	r2, #0
 8007406:	f04f 0300 	mov.w	r3, #0
 800740a:	f04f 0400 	mov.w	r4, #0
 800740e:	0094      	lsls	r4, r2, #2
 8007410:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007414:	008b      	lsls	r3, r1, #2
 8007416:	461a      	mov	r2, r3
 8007418:	4623      	mov	r3, r4
 800741a:	4628      	mov	r0, r5
 800741c:	4631      	mov	r1, r6
 800741e:	f7f9 fb25 	bl	8000a6c <__aeabi_uldivmod>
 8007422:	4603      	mov	r3, r0
 8007424:	460c      	mov	r4, r1
 8007426:	461a      	mov	r2, r3
 8007428:	4b9a      	ldr	r3, [pc, #616]	; (8007694 <UART_SetConfig+0x6f4>)
 800742a:	fba3 1302 	umull	r1, r3, r3, r2
 800742e:	095b      	lsrs	r3, r3, #5
 8007430:	2164      	movs	r1, #100	; 0x64
 8007432:	fb01 f303 	mul.w	r3, r1, r3
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	011b      	lsls	r3, r3, #4
 800743a:	3332      	adds	r3, #50	; 0x32
 800743c:	4a95      	ldr	r2, [pc, #596]	; (8007694 <UART_SetConfig+0x6f4>)
 800743e:	fba2 2303 	umull	r2, r3, r2, r3
 8007442:	095b      	lsrs	r3, r3, #5
 8007444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007448:	4498      	add	r8, r3
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	469b      	mov	fp, r3
 800744e:	f04f 0c00 	mov.w	ip, #0
 8007452:	46d9      	mov	r9, fp
 8007454:	46e2      	mov	sl, ip
 8007456:	eb19 0309 	adds.w	r3, r9, r9
 800745a:	eb4a 040a 	adc.w	r4, sl, sl
 800745e:	4699      	mov	r9, r3
 8007460:	46a2      	mov	sl, r4
 8007462:	eb19 090b 	adds.w	r9, r9, fp
 8007466:	eb4a 0a0c 	adc.w	sl, sl, ip
 800746a:	f04f 0100 	mov.w	r1, #0
 800746e:	f04f 0200 	mov.w	r2, #0
 8007472:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007476:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800747a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800747e:	4689      	mov	r9, r1
 8007480:	4692      	mov	sl, r2
 8007482:	eb1b 0509 	adds.w	r5, fp, r9
 8007486:	eb4c 060a 	adc.w	r6, ip, sl
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	4619      	mov	r1, r3
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	f04f 0400 	mov.w	r4, #0
 800749c:	0094      	lsls	r4, r2, #2
 800749e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80074a2:	008b      	lsls	r3, r1, #2
 80074a4:	461a      	mov	r2, r3
 80074a6:	4623      	mov	r3, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	4631      	mov	r1, r6
 80074ac:	f7f9 fade 	bl	8000a6c <__aeabi_uldivmod>
 80074b0:	4603      	mov	r3, r0
 80074b2:	460c      	mov	r4, r1
 80074b4:	461a      	mov	r2, r3
 80074b6:	4b77      	ldr	r3, [pc, #476]	; (8007694 <UART_SetConfig+0x6f4>)
 80074b8:	fba3 1302 	umull	r1, r3, r3, r2
 80074bc:	095b      	lsrs	r3, r3, #5
 80074be:	2164      	movs	r1, #100	; 0x64
 80074c0:	fb01 f303 	mul.w	r3, r1, r3
 80074c4:	1ad3      	subs	r3, r2, r3
 80074c6:	011b      	lsls	r3, r3, #4
 80074c8:	3332      	adds	r3, #50	; 0x32
 80074ca:	4a72      	ldr	r2, [pc, #456]	; (8007694 <UART_SetConfig+0x6f4>)
 80074cc:	fba2 2303 	umull	r2, r3, r2, r3
 80074d0:	095b      	lsrs	r3, r3, #5
 80074d2:	f003 020f 	and.w	r2, r3, #15
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4442      	add	r2, r8
 80074dc:	609a      	str	r2, [r3, #8]
 80074de:	e0d0      	b.n	8007682 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80074e0:	f7fe fb92 	bl	8005c08 <HAL_RCC_GetPCLK1Freq>
 80074e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	469a      	mov	sl, r3
 80074ea:	f04f 0b00 	mov.w	fp, #0
 80074ee:	46d0      	mov	r8, sl
 80074f0:	46d9      	mov	r9, fp
 80074f2:	eb18 0308 	adds.w	r3, r8, r8
 80074f6:	eb49 0409 	adc.w	r4, r9, r9
 80074fa:	4698      	mov	r8, r3
 80074fc:	46a1      	mov	r9, r4
 80074fe:	eb18 080a 	adds.w	r8, r8, sl
 8007502:	eb49 090b 	adc.w	r9, r9, fp
 8007506:	f04f 0100 	mov.w	r1, #0
 800750a:	f04f 0200 	mov.w	r2, #0
 800750e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007512:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007516:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800751a:	4688      	mov	r8, r1
 800751c:	4691      	mov	r9, r2
 800751e:	eb1a 0508 	adds.w	r5, sl, r8
 8007522:	eb4b 0609 	adc.w	r6, fp, r9
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	4619      	mov	r1, r3
 800752c:	f04f 0200 	mov.w	r2, #0
 8007530:	f04f 0300 	mov.w	r3, #0
 8007534:	f04f 0400 	mov.w	r4, #0
 8007538:	0094      	lsls	r4, r2, #2
 800753a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800753e:	008b      	lsls	r3, r1, #2
 8007540:	461a      	mov	r2, r3
 8007542:	4623      	mov	r3, r4
 8007544:	4628      	mov	r0, r5
 8007546:	4631      	mov	r1, r6
 8007548:	f7f9 fa90 	bl	8000a6c <__aeabi_uldivmod>
 800754c:	4603      	mov	r3, r0
 800754e:	460c      	mov	r4, r1
 8007550:	461a      	mov	r2, r3
 8007552:	4b50      	ldr	r3, [pc, #320]	; (8007694 <UART_SetConfig+0x6f4>)
 8007554:	fba3 2302 	umull	r2, r3, r3, r2
 8007558:	095b      	lsrs	r3, r3, #5
 800755a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	469b      	mov	fp, r3
 8007562:	f04f 0c00 	mov.w	ip, #0
 8007566:	46d9      	mov	r9, fp
 8007568:	46e2      	mov	sl, ip
 800756a:	eb19 0309 	adds.w	r3, r9, r9
 800756e:	eb4a 040a 	adc.w	r4, sl, sl
 8007572:	4699      	mov	r9, r3
 8007574:	46a2      	mov	sl, r4
 8007576:	eb19 090b 	adds.w	r9, r9, fp
 800757a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800757e:	f04f 0100 	mov.w	r1, #0
 8007582:	f04f 0200 	mov.w	r2, #0
 8007586:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800758a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800758e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007592:	4689      	mov	r9, r1
 8007594:	4692      	mov	sl, r2
 8007596:	eb1b 0509 	adds.w	r5, fp, r9
 800759a:	eb4c 060a 	adc.w	r6, ip, sl
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	685b      	ldr	r3, [r3, #4]
 80075a2:	4619      	mov	r1, r3
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	f04f 0400 	mov.w	r4, #0
 80075b0:	0094      	lsls	r4, r2, #2
 80075b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80075b6:	008b      	lsls	r3, r1, #2
 80075b8:	461a      	mov	r2, r3
 80075ba:	4623      	mov	r3, r4
 80075bc:	4628      	mov	r0, r5
 80075be:	4631      	mov	r1, r6
 80075c0:	f7f9 fa54 	bl	8000a6c <__aeabi_uldivmod>
 80075c4:	4603      	mov	r3, r0
 80075c6:	460c      	mov	r4, r1
 80075c8:	461a      	mov	r2, r3
 80075ca:	4b32      	ldr	r3, [pc, #200]	; (8007694 <UART_SetConfig+0x6f4>)
 80075cc:	fba3 1302 	umull	r1, r3, r3, r2
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	2164      	movs	r1, #100	; 0x64
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	3332      	adds	r3, #50	; 0x32
 80075de:	4a2d      	ldr	r2, [pc, #180]	; (8007694 <UART_SetConfig+0x6f4>)
 80075e0:	fba2 2303 	umull	r2, r3, r2, r3
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075ea:	4498      	add	r8, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	469b      	mov	fp, r3
 80075f0:	f04f 0c00 	mov.w	ip, #0
 80075f4:	46d9      	mov	r9, fp
 80075f6:	46e2      	mov	sl, ip
 80075f8:	eb19 0309 	adds.w	r3, r9, r9
 80075fc:	eb4a 040a 	adc.w	r4, sl, sl
 8007600:	4699      	mov	r9, r3
 8007602:	46a2      	mov	sl, r4
 8007604:	eb19 090b 	adds.w	r9, r9, fp
 8007608:	eb4a 0a0c 	adc.w	sl, sl, ip
 800760c:	f04f 0100 	mov.w	r1, #0
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800761c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007620:	4689      	mov	r9, r1
 8007622:	4692      	mov	sl, r2
 8007624:	eb1b 0509 	adds.w	r5, fp, r9
 8007628:	eb4c 060a 	adc.w	r6, ip, sl
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4619      	mov	r1, r3
 8007632:	f04f 0200 	mov.w	r2, #0
 8007636:	f04f 0300 	mov.w	r3, #0
 800763a:	f04f 0400 	mov.w	r4, #0
 800763e:	0094      	lsls	r4, r2, #2
 8007640:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007644:	008b      	lsls	r3, r1, #2
 8007646:	461a      	mov	r2, r3
 8007648:	4623      	mov	r3, r4
 800764a:	4628      	mov	r0, r5
 800764c:	4631      	mov	r1, r6
 800764e:	f7f9 fa0d 	bl	8000a6c <__aeabi_uldivmod>
 8007652:	4603      	mov	r3, r0
 8007654:	460c      	mov	r4, r1
 8007656:	461a      	mov	r2, r3
 8007658:	4b0e      	ldr	r3, [pc, #56]	; (8007694 <UART_SetConfig+0x6f4>)
 800765a:	fba3 1302 	umull	r1, r3, r3, r2
 800765e:	095b      	lsrs	r3, r3, #5
 8007660:	2164      	movs	r1, #100	; 0x64
 8007662:	fb01 f303 	mul.w	r3, r1, r3
 8007666:	1ad3      	subs	r3, r2, r3
 8007668:	011b      	lsls	r3, r3, #4
 800766a:	3332      	adds	r3, #50	; 0x32
 800766c:	4a09      	ldr	r2, [pc, #36]	; (8007694 <UART_SetConfig+0x6f4>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	f003 020f 	and.w	r2, r3, #15
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4442      	add	r2, r8
 800767e:	609a      	str	r2, [r3, #8]
}
 8007680:	e7ff      	b.n	8007682 <UART_SetConfig+0x6e2>
 8007682:	bf00      	nop
 8007684:	3714      	adds	r7, #20
 8007686:	46bd      	mov	sp, r7
 8007688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800768c:	40011000 	.word	0x40011000
 8007690:	40011400 	.word	0x40011400
 8007694:	51eb851f 	.word	0x51eb851f

08007698 <__libc_init_array>:
 8007698:	b570      	push	{r4, r5, r6, lr}
 800769a:	4e0d      	ldr	r6, [pc, #52]	; (80076d0 <__libc_init_array+0x38>)
 800769c:	4c0d      	ldr	r4, [pc, #52]	; (80076d4 <__libc_init_array+0x3c>)
 800769e:	1ba4      	subs	r4, r4, r6
 80076a0:	10a4      	asrs	r4, r4, #2
 80076a2:	2500      	movs	r5, #0
 80076a4:	42a5      	cmp	r5, r4
 80076a6:	d109      	bne.n	80076bc <__libc_init_array+0x24>
 80076a8:	4e0b      	ldr	r6, [pc, #44]	; (80076d8 <__libc_init_array+0x40>)
 80076aa:	4c0c      	ldr	r4, [pc, #48]	; (80076dc <__libc_init_array+0x44>)
 80076ac:	f000 f820 	bl	80076f0 <_init>
 80076b0:	1ba4      	subs	r4, r4, r6
 80076b2:	10a4      	asrs	r4, r4, #2
 80076b4:	2500      	movs	r5, #0
 80076b6:	42a5      	cmp	r5, r4
 80076b8:	d105      	bne.n	80076c6 <__libc_init_array+0x2e>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076c0:	4798      	blx	r3
 80076c2:	3501      	adds	r5, #1
 80076c4:	e7ee      	b.n	80076a4 <__libc_init_array+0xc>
 80076c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80076ca:	4798      	blx	r3
 80076cc:	3501      	adds	r5, #1
 80076ce:	e7f2      	b.n	80076b6 <__libc_init_array+0x1e>
 80076d0:	08007730 	.word	0x08007730
 80076d4:	08007730 	.word	0x08007730
 80076d8:	08007730 	.word	0x08007730
 80076dc:	08007734 	.word	0x08007734

080076e0 <memset>:
 80076e0:	4402      	add	r2, r0
 80076e2:	4603      	mov	r3, r0
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d100      	bne.n	80076ea <memset+0xa>
 80076e8:	4770      	bx	lr
 80076ea:	f803 1b01 	strb.w	r1, [r3], #1
 80076ee:	e7f9      	b.n	80076e4 <memset+0x4>

080076f0 <_init>:
 80076f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076f2:	bf00      	nop
 80076f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076f6:	bc08      	pop	{r3}
 80076f8:	469e      	mov	lr, r3
 80076fa:	4770      	bx	lr

080076fc <_fini>:
 80076fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076fe:	bf00      	nop
 8007700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007702:	bc08      	pop	{r3}
 8007704:	469e      	mov	lr, r3
 8007706:	4770      	bx	lr
