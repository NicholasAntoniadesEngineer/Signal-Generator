
STM32F439ZIT6U Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b66c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000280  0800b820  0800b820  0001b820  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800baa0  0800baa0  00020214  2**0
                  CONTENTS
  4 .ARM          00000008  0800baa0  0800baa0  0001baa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baa8  0800baa8  00020214  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baa8  0800baa8  0001baa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baac  0800baac  0001baac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000214  20000000  0800bab0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb8  20000214  0800bcc4  00020214  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021cc  0800bcc4  000221cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY
 12 .debug_info   000204fd  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004641  00000000  00000000  00040741  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001880  00000000  00000000  00044d88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001670  00000000  00000000  00046608  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029e84  00000000  00000000  00047c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018927  00000000  00000000  00071afc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e85b7  00000000  00000000  0008a423  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001729da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c94  00000000  00000000  00172a58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000214 	.word	0x20000214
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b804 	.word	0x0800b804

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000218 	.word	0x20000218
 80001ec:	0800b804 	.word	0x0800b804

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_d2uiz>:
 8000b9c:	004a      	lsls	r2, r1, #1
 8000b9e:	d211      	bcs.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba4:	d211      	bcs.n	8000bca <__aeabi_d2uiz+0x2e>
 8000ba6:	d50d      	bpl.n	8000bc4 <__aeabi_d2uiz+0x28>
 8000ba8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb0:	d40e      	bmi.n	8000bd0 <__aeabi_d2uiz+0x34>
 8000bb2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	4770      	bx	lr
 8000bc4:	f04f 0000 	mov.w	r0, #0
 8000bc8:	4770      	bx	lr
 8000bca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bce:	d102      	bne.n	8000bd6 <__aeabi_d2uiz+0x3a>
 8000bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd4:	4770      	bx	lr
 8000bd6:	f04f 0000 	mov.w	r0, #0
 8000bda:	4770      	bx	lr

08000bdc <__aeabi_uldivmod>:
 8000bdc:	b953      	cbnz	r3, 8000bf4 <__aeabi_uldivmod+0x18>
 8000bde:	b94a      	cbnz	r2, 8000bf4 <__aeabi_uldivmod+0x18>
 8000be0:	2900      	cmp	r1, #0
 8000be2:	bf08      	it	eq
 8000be4:	2800      	cmpeq	r0, #0
 8000be6:	bf1c      	itt	ne
 8000be8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bec:	f04f 30ff 	movne.w	r0, #4294967295
 8000bf0:	f000 b972 	b.w	8000ed8 <__aeabi_idiv0>
 8000bf4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bfc:	f000 f806 	bl	8000c0c <__udivmoddi4>
 8000c00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c08:	b004      	add	sp, #16
 8000c0a:	4770      	bx	lr

08000c0c <__udivmoddi4>:
 8000c0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c10:	9e08      	ldr	r6, [sp, #32]
 8000c12:	4604      	mov	r4, r0
 8000c14:	4688      	mov	r8, r1
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d14b      	bne.n	8000cb2 <__udivmoddi4+0xa6>
 8000c1a:	428a      	cmp	r2, r1
 8000c1c:	4615      	mov	r5, r2
 8000c1e:	d967      	bls.n	8000cf0 <__udivmoddi4+0xe4>
 8000c20:	fab2 f282 	clz	r2, r2
 8000c24:	b14a      	cbz	r2, 8000c3a <__udivmoddi4+0x2e>
 8000c26:	f1c2 0720 	rsb	r7, r2, #32
 8000c2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c32:	4095      	lsls	r5, r2
 8000c34:	ea47 0803 	orr.w	r8, r7, r3
 8000c38:	4094      	lsls	r4, r2
 8000c3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c3e:	0c23      	lsrs	r3, r4, #16
 8000c40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c44:	fa1f fc85 	uxth.w	ip, r5
 8000c48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c50:	fb07 f10c 	mul.w	r1, r7, ip
 8000c54:	4299      	cmp	r1, r3
 8000c56:	d909      	bls.n	8000c6c <__udivmoddi4+0x60>
 8000c58:	18eb      	adds	r3, r5, r3
 8000c5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c5e:	f080 811b 	bcs.w	8000e98 <__udivmoddi4+0x28c>
 8000c62:	4299      	cmp	r1, r3
 8000c64:	f240 8118 	bls.w	8000e98 <__udivmoddi4+0x28c>
 8000c68:	3f02      	subs	r7, #2
 8000c6a:	442b      	add	r3, r5
 8000c6c:	1a5b      	subs	r3, r3, r1
 8000c6e:	b2a4      	uxth	r4, r4
 8000c70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c80:	45a4      	cmp	ip, r4
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x8c>
 8000c84:	192c      	adds	r4, r5, r4
 8000c86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8a:	f080 8107 	bcs.w	8000e9c <__udivmoddi4+0x290>
 8000c8e:	45a4      	cmp	ip, r4
 8000c90:	f240 8104 	bls.w	8000e9c <__udivmoddi4+0x290>
 8000c94:	3802      	subs	r0, #2
 8000c96:	442c      	add	r4, r5
 8000c98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c9c:	eba4 040c 	sub.w	r4, r4, ip
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	b11e      	cbz	r6, 8000cac <__udivmoddi4+0xa0>
 8000ca4:	40d4      	lsrs	r4, r2
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	e9c6 4300 	strd	r4, r3, [r6]
 8000cac:	4639      	mov	r1, r7
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d909      	bls.n	8000cca <__udivmoddi4+0xbe>
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	f000 80eb 	beq.w	8000e92 <__udivmoddi4+0x286>
 8000cbc:	2700      	movs	r7, #0
 8000cbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000cc2:	4638      	mov	r0, r7
 8000cc4:	4639      	mov	r1, r7
 8000cc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cca:	fab3 f783 	clz	r7, r3
 8000cce:	2f00      	cmp	r7, #0
 8000cd0:	d147      	bne.n	8000d62 <__udivmoddi4+0x156>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d302      	bcc.n	8000cdc <__udivmoddi4+0xd0>
 8000cd6:	4282      	cmp	r2, r0
 8000cd8:	f200 80fa 	bhi.w	8000ed0 <__udivmoddi4+0x2c4>
 8000cdc:	1a84      	subs	r4, r0, r2
 8000cde:	eb61 0303 	sbc.w	r3, r1, r3
 8000ce2:	2001      	movs	r0, #1
 8000ce4:	4698      	mov	r8, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d0e0      	beq.n	8000cac <__udivmoddi4+0xa0>
 8000cea:	e9c6 4800 	strd	r4, r8, [r6]
 8000cee:	e7dd      	b.n	8000cac <__udivmoddi4+0xa0>
 8000cf0:	b902      	cbnz	r2, 8000cf4 <__udivmoddi4+0xe8>
 8000cf2:	deff      	udf	#255	; 0xff
 8000cf4:	fab2 f282 	clz	r2, r2
 8000cf8:	2a00      	cmp	r2, #0
 8000cfa:	f040 808f 	bne.w	8000e1c <__udivmoddi4+0x210>
 8000cfe:	1b49      	subs	r1, r1, r5
 8000d00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d04:	fa1f f885 	uxth.w	r8, r5
 8000d08:	2701      	movs	r7, #1
 8000d0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d0e:	0c23      	lsrs	r3, r4, #16
 8000d10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb08 f10c 	mul.w	r1, r8, ip
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d907      	bls.n	8000d30 <__udivmoddi4+0x124>
 8000d20:	18eb      	adds	r3, r5, r3
 8000d22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d26:	d202      	bcs.n	8000d2e <__udivmoddi4+0x122>
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	f200 80cd 	bhi.w	8000ec8 <__udivmoddi4+0x2bc>
 8000d2e:	4684      	mov	ip, r0
 8000d30:	1a59      	subs	r1, r3, r1
 8000d32:	b2a3      	uxth	r3, r4
 8000d34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d40:	fb08 f800 	mul.w	r8, r8, r0
 8000d44:	45a0      	cmp	r8, r4
 8000d46:	d907      	bls.n	8000d58 <__udivmoddi4+0x14c>
 8000d48:	192c      	adds	r4, r5, r4
 8000d4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d4e:	d202      	bcs.n	8000d56 <__udivmoddi4+0x14a>
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	f200 80b6 	bhi.w	8000ec2 <__udivmoddi4+0x2b6>
 8000d56:	4618      	mov	r0, r3
 8000d58:	eba4 0408 	sub.w	r4, r4, r8
 8000d5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d60:	e79f      	b.n	8000ca2 <__udivmoddi4+0x96>
 8000d62:	f1c7 0c20 	rsb	ip, r7, #32
 8000d66:	40bb      	lsls	r3, r7
 8000d68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d70:	fa01 f407 	lsl.w	r4, r1, r7
 8000d74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d80:	4325      	orrs	r5, r4
 8000d82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d86:	0c2c      	lsrs	r4, r5, #16
 8000d88:	fb08 3319 	mls	r3, r8, r9, r3
 8000d8c:	fa1f fa8e 	uxth.w	sl, lr
 8000d90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d94:	fb09 f40a 	mul.w	r4, r9, sl
 8000d98:	429c      	cmp	r4, r3
 8000d9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000da2:	d90b      	bls.n	8000dbc <__udivmoddi4+0x1b0>
 8000da4:	eb1e 0303 	adds.w	r3, lr, r3
 8000da8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dac:	f080 8087 	bcs.w	8000ebe <__udivmoddi4+0x2b2>
 8000db0:	429c      	cmp	r4, r3
 8000db2:	f240 8084 	bls.w	8000ebe <__udivmoddi4+0x2b2>
 8000db6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dba:	4473      	add	r3, lr
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	b2ad      	uxth	r5, r5
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000dc8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dcc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dd0:	45a2      	cmp	sl, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1da>
 8000dd4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ddc:	d26b      	bcs.n	8000eb6 <__udivmoddi4+0x2aa>
 8000dde:	45a2      	cmp	sl, r4
 8000de0:	d969      	bls.n	8000eb6 <__udivmoddi4+0x2aa>
 8000de2:	3802      	subs	r0, #2
 8000de4:	4474      	add	r4, lr
 8000de6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dea:	fba0 8902 	umull	r8, r9, r0, r2
 8000dee:	eba4 040a 	sub.w	r4, r4, sl
 8000df2:	454c      	cmp	r4, r9
 8000df4:	46c2      	mov	sl, r8
 8000df6:	464b      	mov	r3, r9
 8000df8:	d354      	bcc.n	8000ea4 <__udivmoddi4+0x298>
 8000dfa:	d051      	beq.n	8000ea0 <__udivmoddi4+0x294>
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d069      	beq.n	8000ed4 <__udivmoddi4+0x2c8>
 8000e00:	ebb1 050a 	subs.w	r5, r1, sl
 8000e04:	eb64 0403 	sbc.w	r4, r4, r3
 8000e08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e0c:	40fd      	lsrs	r5, r7
 8000e0e:	40fc      	lsrs	r4, r7
 8000e10:	ea4c 0505 	orr.w	r5, ip, r5
 8000e14:	e9c6 5400 	strd	r5, r4, [r6]
 8000e18:	2700      	movs	r7, #0
 8000e1a:	e747      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e1c:	f1c2 0320 	rsb	r3, r2, #32
 8000e20:	fa20 f703 	lsr.w	r7, r0, r3
 8000e24:	4095      	lsls	r5, r2
 8000e26:	fa01 f002 	lsl.w	r0, r1, r2
 8000e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e32:	4338      	orrs	r0, r7
 8000e34:	0c01      	lsrs	r1, r0, #16
 8000e36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e3a:	fa1f f885 	uxth.w	r8, r5
 8000e3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e46:	fb07 f308 	mul.w	r3, r7, r8
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e50:	d907      	bls.n	8000e62 <__udivmoddi4+0x256>
 8000e52:	1869      	adds	r1, r5, r1
 8000e54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e58:	d22f      	bcs.n	8000eba <__udivmoddi4+0x2ae>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d92d      	bls.n	8000eba <__udivmoddi4+0x2ae>
 8000e5e:	3f02      	subs	r7, #2
 8000e60:	4429      	add	r1, r5
 8000e62:	1acb      	subs	r3, r1, r3
 8000e64:	b281      	uxth	r1, r0
 8000e66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb00 f308 	mul.w	r3, r0, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x27e>
 8000e7a:	1869      	adds	r1, r5, r1
 8000e7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e80:	d217      	bcs.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d915      	bls.n	8000eb2 <__udivmoddi4+0x2a6>
 8000e86:	3802      	subs	r0, #2
 8000e88:	4429      	add	r1, r5
 8000e8a:	1ac9      	subs	r1, r1, r3
 8000e8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e90:	e73b      	b.n	8000d0a <__udivmoddi4+0xfe>
 8000e92:	4637      	mov	r7, r6
 8000e94:	4630      	mov	r0, r6
 8000e96:	e709      	b.n	8000cac <__udivmoddi4+0xa0>
 8000e98:	4607      	mov	r7, r0
 8000e9a:	e6e7      	b.n	8000c6c <__udivmoddi4+0x60>
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	e6fb      	b.n	8000c98 <__udivmoddi4+0x8c>
 8000ea0:	4541      	cmp	r1, r8
 8000ea2:	d2ab      	bcs.n	8000dfc <__udivmoddi4+0x1f0>
 8000ea4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ea8:	eb69 020e 	sbc.w	r2, r9, lr
 8000eac:	3801      	subs	r0, #1
 8000eae:	4613      	mov	r3, r2
 8000eb0:	e7a4      	b.n	8000dfc <__udivmoddi4+0x1f0>
 8000eb2:	4660      	mov	r0, ip
 8000eb4:	e7e9      	b.n	8000e8a <__udivmoddi4+0x27e>
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	e795      	b.n	8000de6 <__udivmoddi4+0x1da>
 8000eba:	4667      	mov	r7, ip
 8000ebc:	e7d1      	b.n	8000e62 <__udivmoddi4+0x256>
 8000ebe:	4681      	mov	r9, r0
 8000ec0:	e77c      	b.n	8000dbc <__udivmoddi4+0x1b0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	442c      	add	r4, r5
 8000ec6:	e747      	b.n	8000d58 <__udivmoddi4+0x14c>
 8000ec8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ecc:	442b      	add	r3, r5
 8000ece:	e72f      	b.n	8000d30 <__udivmoddi4+0x124>
 8000ed0:	4638      	mov	r0, r7
 8000ed2:	e708      	b.n	8000ce6 <__udivmoddi4+0xda>
 8000ed4:	4637      	mov	r7, r6
 8000ed6:	e6e9      	b.n	8000cac <__udivmoddi4+0xa0>

08000ed8 <__aeabi_idiv0>:
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop

08000edc <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eee:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <MX_ADC1_Init+0x9c>)
 8000ef2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef4:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efa:	4b1e      	ldr	r3, [pc, #120]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f00:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f06:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0c:	4b19      	ldr	r3, [pc, #100]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1a:	4b16      	ldr	r3, [pc, #88]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f1c:	4a17      	ldr	r2, [pc, #92]	; (8000f7c <MX_ADC1_Init+0xa0>)
 8000f1e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f26:	4b13      	ldr	r3, [pc, #76]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f28:	2201      	movs	r2, #1
 8000f2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f3c:	f001 f886 	bl	800204c <HAL_ADC_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000f46:	f000 fcc9 	bl	80018dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f56:	463b      	mov	r3, r7
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4806      	ldr	r0, [pc, #24]	; (8000f74 <MX_ADC1_Init+0x98>)
 8000f5c:	f001 f8ba 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000f66:	f000 fcb9 	bl	80018dc <Error_Handler>
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	20000288 	.word	0x20000288
 8000f78:	40012000 	.word	0x40012000
 8000f7c:	0f000001 	.word	0x0f000001

08000f80 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f86:	463b      	mov	r3, r7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000f92:	4b21      	ldr	r3, [pc, #132]	; (8001018 <MX_ADC2_Init+0x98>)
 8000f94:	4a21      	ldr	r2, [pc, #132]	; (800101c <MX_ADC2_Init+0x9c>)
 8000f96:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f98:	4b1f      	ldr	r3, [pc, #124]	; (8001018 <MX_ADC2_Init+0x98>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f9e:	4b1e      	ldr	r3, [pc, #120]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000fa4:	4b1c      	ldr	r3, [pc, #112]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000faa:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000fb0:	4b19      	ldr	r3, [pc, #100]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fb8:	4b17      	ldr	r3, [pc, #92]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fbe:	4b16      	ldr	r3, [pc, #88]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fc0:	4a17      	ldr	r2, [pc, #92]	; (8001020 <MX_ADC2_Init+0xa0>)
 8000fc2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000fca:	4b13      	ldr	r3, [pc, #76]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fcc:	2201      	movs	r2, #1
 8000fce:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000fd0:	4b11      	ldr	r3, [pc, #68]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000fde:	480e      	ldr	r0, [pc, #56]	; (8001018 <MX_ADC2_Init+0x98>)
 8000fe0:	f001 f834 	bl	800204c <HAL_ADC_Init>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 fc77 	bl	80018dc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_ADC2_Init+0x98>)
 8001000:	f001 f868 	bl	80020d4 <HAL_ADC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800100a:	f000 fc67 	bl	80018dc <Error_Handler>
  }

}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000240 	.word	0x20000240
 800101c:	40012100 	.word	0x40012100
 8001020:	0f000001 	.word	0x0f000001

08001024 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a2e      	ldr	r2, [pc, #184]	; (80010fc <HAL_ADC_MspInit+0xd8>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d128      	bne.n	8001098 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
 800104a:	4b2d      	ldr	r3, [pc, #180]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 8001050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001054:	6453      	str	r3, [r2, #68]	; 0x44
 8001056:	4b2a      	ldr	r3, [pc, #168]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800105e:	61bb      	str	r3, [r7, #24]
 8001060:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
 8001066:	4b26      	ldr	r3, [pc, #152]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a25      	ldr	r2, [pc, #148]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 800106c:	f043 0301 	orr.w	r3, r3, #1
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b23      	ldr	r3, [pc, #140]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0301 	and.w	r3, r3, #1
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800107e:	2301      	movs	r3, #1
 8001080:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001082:	2303      	movs	r3, #3
 8001084:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	481c      	ldr	r0, [pc, #112]	; (8001104 <HAL_ADC_MspInit+0xe0>)
 8001092:	f001 ff5d 	bl	8002f50 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001096:	e02c      	b.n	80010f2 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a1a      	ldr	r2, [pc, #104]	; (8001108 <HAL_ADC_MspInit+0xe4>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d127      	bne.n	80010f2 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	613b      	str	r3, [r7, #16]
 80010a6:	4b16      	ldr	r3, [pc, #88]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010aa:	4a15      	ldr	r2, [pc, #84]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010b0:	6453      	str	r3, [r2, #68]	; 0x44
 80010b2:	4b13      	ldr	r3, [pc, #76]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b0f      	ldr	r3, [pc, #60]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a0e      	ldr	r2, [pc, #56]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b0c      	ldr	r3, [pc, #48]	; (8001100 <HAL_ADC_MspInit+0xdc>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010da:	2302      	movs	r3, #2
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010de:	2303      	movs	r3, #3
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e6:	f107 031c 	add.w	r3, r7, #28
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <HAL_ADC_MspInit+0xe0>)
 80010ee:	f001 ff2f 	bl	8002f50 <HAL_GPIO_Init>
}
 80010f2:	bf00      	nop
 80010f4:	3730      	adds	r7, #48	; 0x30
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40012000 	.word	0x40012000
 8001100:	40023800 	.word	0x40023800
 8001104:	40020000 	.word	0x40020000
 8001108:	40012100 	.word	0x40012100

0800110c <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001112:	463b      	mov	r3, r7
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800111a:	4b15      	ldr	r3, [pc, #84]	; (8001170 <MX_DAC_Init+0x64>)
 800111c:	4a15      	ldr	r2, [pc, #84]	; (8001174 <MX_DAC_Init+0x68>)
 800111e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001120:	4813      	ldr	r0, [pc, #76]	; (8001170 <MX_DAC_Init+0x64>)
 8001122:	f001 fb16 	bl	8002752 <HAL_DAC_Init>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800112c:	f000 fbd6 	bl	80018dc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001130:	2324      	movs	r3, #36	; 0x24
 8001132:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001134:	2300      	movs	r3, #0
 8001136:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001138:	463b      	mov	r3, r7
 800113a:	2200      	movs	r2, #0
 800113c:	4619      	mov	r1, r3
 800113e:	480c      	ldr	r0, [pc, #48]	; (8001170 <MX_DAC_Init+0x64>)
 8001140:	f001 fb29 	bl	8002796 <HAL_DAC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800114a:	f000 fbc7 	bl	80018dc <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800114e:	232c      	movs	r3, #44	; 0x2c
 8001150:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2210      	movs	r2, #16
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <MX_DAC_Init+0x64>)
 800115a:	f001 fb1c 	bl	8002796 <HAL_DAC_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 8001164:	f000 fbba 	bl	80018dc <Error_Handler>
  }

}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000330 	.word	0x20000330
 8001174:	40007400 	.word	0x40007400

08001178 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08a      	sub	sp, #40	; 0x28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001180:	f107 0314 	add.w	r3, r7, #20
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a48      	ldr	r2, [pc, #288]	; (80012b8 <HAL_DAC_MspInit+0x140>)
 8001196:	4293      	cmp	r3, r2
 8001198:	f040 808a 	bne.w	80012b0 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	613b      	str	r3, [r7, #16]
 80011a0:	4b46      	ldr	r3, [pc, #280]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a45      	ldr	r2, [pc, #276]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b43      	ldr	r3, [pc, #268]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80011b4:	613b      	str	r3, [r7, #16]
 80011b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c0:	4a3e      	ldr	r2, [pc, #248]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	6313      	str	r3, [r2, #48]	; 0x30
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <HAL_DAC_MspInit+0x144>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011d4:	2330      	movs	r3, #48	; 0x30
 80011d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d8:	2303      	movs	r3, #3
 80011da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4836      	ldr	r0, [pc, #216]	; (80012c0 <HAL_DAC_MspInit+0x148>)
 80011e8:	f001 feb2 	bl	8002f50 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80011ec:	4b35      	ldr	r3, [pc, #212]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 80011ee:	4a36      	ldr	r2, [pc, #216]	; (80012c8 <HAL_DAC_MspInit+0x150>)
 80011f0:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 80011f4:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011f8:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011fa:	4b32      	ldr	r3, [pc, #200]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 80011fc:	2240      	movs	r2, #64	; 0x40
 80011fe:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001200:	4b30      	ldr	r3, [pc, #192]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001206:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001208:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800120c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800120e:	4b2d      	ldr	r3, [pc, #180]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001210:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001214:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001216:	4b2b      	ldr	r3, [pc, #172]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001218:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800121c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001220:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001224:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001228:	2200      	movs	r2, #0
 800122a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800122c:	4b25      	ldr	r3, [pc, #148]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 800122e:	2200      	movs	r2, #0
 8001230:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001232:	4824      	ldr	r0, [pc, #144]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001234:	f001 fafc 	bl	8002830 <HAL_DMA_Init>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800123e:	f000 fb4d 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4a1f      	ldr	r2, [pc, #124]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	4a1e      	ldr	r2, [pc, #120]	; (80012c4 <HAL_DAC_MspInit+0x14c>)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001250:	4a1f      	ldr	r2, [pc, #124]	; (80012d0 <HAL_DAC_MspInit+0x158>)
 8001252:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8001254:	4b1d      	ldr	r3, [pc, #116]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001256:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800125a:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800125c:	4b1b      	ldr	r3, [pc, #108]	; (80012cc <HAL_DAC_MspInit+0x154>)
 800125e:	2240      	movs	r2, #64	; 0x40
 8001260:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001262:	4b1a      	ldr	r3, [pc, #104]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001264:	2200      	movs	r2, #0
 8001266:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 8001268:	4b18      	ldr	r3, [pc, #96]	; (80012cc <HAL_DAC_MspInit+0x154>)
 800126a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800126e:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001270:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001272:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001276:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001278:	4b14      	ldr	r3, [pc, #80]	; (80012cc <HAL_DAC_MspInit+0x154>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001282:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001286:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 8001288:	4b10      	ldr	r3, [pc, #64]	; (80012cc <HAL_DAC_MspInit+0x154>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 8001294:	480d      	ldr	r0, [pc, #52]	; (80012cc <HAL_DAC_MspInit+0x154>)
 8001296:	f001 facb 	bl	8002830 <HAL_DMA_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80012a0:	f000 fb1c 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <HAL_DAC_MspInit+0x154>)
 80012a8:	60da      	str	r2, [r3, #12]
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_DAC_MspInit+0x154>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80012b0:	bf00      	nop
 80012b2:	3728      	adds	r7, #40	; 0x28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40007400 	.word	0x40007400
 80012bc:	40023800 	.word	0x40023800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	200002d0 	.word	0x200002d0
 80012c8:	40026088 	.word	0x40026088
 80012cc:	20000344 	.word	0x20000344
 80012d0:	400260a0 	.word	0x400260a0

080012d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <MX_DMA_Init+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a1e      	ldr	r2, [pc, #120]	; (800135c <MX_DMA_Init+0x88>)
 80012e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_DMA_Init+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	603b      	str	r3, [r7, #0]
 80012fa:	4b18      	ldr	r3, [pc, #96]	; (800135c <MX_DMA_Init+0x88>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	4a17      	ldr	r2, [pc, #92]	; (800135c <MX_DMA_Init+0x88>)
 8001300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001304:	6313      	str	r3, [r2, #48]	; 0x30
 8001306:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_DMA_Init+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130e:	603b      	str	r3, [r7, #0]
 8001310:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	2010      	movs	r0, #16
 8001318:	f001 f9e5 	bl	80026e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800131c:	2010      	movs	r0, #16
 800131e:	f001 f9fe 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2011      	movs	r0, #17
 8001328:	f001 f9dd 	bl	80026e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800132c:	2011      	movs	r0, #17
 800132e:	f001 f9f6 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001332:	2200      	movs	r2, #0
 8001334:	2100      	movs	r1, #0
 8001336:	203a      	movs	r0, #58	; 0x3a
 8001338:	f001 f9d5 	bl	80026e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800133c:	203a      	movs	r0, #58	; 0x3a
 800133e:	f001 f9ee 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001342:	2200      	movs	r2, #0
 8001344:	2100      	movs	r1, #0
 8001346:	2046      	movs	r0, #70	; 0x46
 8001348:	f001 f9cd 	bl	80026e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800134c:	2046      	movs	r0, #70	; 0x46
 800134e:	f001 f9e6 	bl	800271e <HAL_NVIC_EnableIRQ>

}
 8001352:	bf00      	nop
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	60fb      	str	r3, [r7, #12]
 800136a:	4b17      	ldr	r3, [pc, #92]	; (80013c8 <MX_GPIO_Init+0x68>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <MX_GPIO_Init+0x68>)
 8001370:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001374:	6313      	str	r3, [r2, #48]	; 0x30
 8001376:	4b14      	ldr	r3, [pc, #80]	; (80013c8 <MX_GPIO_Init+0x68>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137e:	60fb      	str	r3, [r7, #12]
 8001380:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
 8001386:	4b10      	ldr	r3, [pc, #64]	; (80013c8 <MX_GPIO_Init+0x68>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138a:	4a0f      	ldr	r2, [pc, #60]	; (80013c8 <MX_GPIO_Init+0x68>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6313      	str	r3, [r2, #48]	; 0x30
 8001392:	4b0d      	ldr	r3, [pc, #52]	; (80013c8 <MX_GPIO_Init+0x68>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60bb      	str	r3, [r7, #8]
 800139c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <MX_GPIO_Init+0x68>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <MX_GPIO_Init+0x68>)
 80013a8:	f043 0302 	orr.w	r3, r3, #2
 80013ac:	6313      	str	r3, [r2, #48]	; 0x30
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <MX_GPIO_Init+0x68>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
 80013b8:	687b      	ldr	r3, [r7, #4]

}
 80013ba:	bf00      	nop
 80013bc:	3714      	adds	r7, #20
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800

080013cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <MX_I2C1_Init+0x74>)
 80013d2:	4a1c      	ldr	r2, [pc, #112]	; (8001444 <MX_I2C1_Init+0x78>)
 80013d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80013d6:	4b1a      	ldr	r3, [pc, #104]	; (8001440 <MX_I2C1_Init+0x74>)
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <MX_I2C1_Init+0x7c>)
 80013da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <MX_I2C1_Init+0x74>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <MX_I2C1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013e8:	4b15      	ldr	r3, [pc, #84]	; (8001440 <MX_I2C1_Init+0x74>)
 80013ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_I2C1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80013f6:	4b12      	ldr	r3, [pc, #72]	; (8001440 <MX_I2C1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013fc:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_I2C1_Init+0x74>)
 80013fe:	2200      	movs	r2, #0
 8001400:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001402:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <MX_I2C1_Init+0x74>)
 8001404:	2200      	movs	r2, #0
 8001406:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001408:	480d      	ldr	r0, [pc, #52]	; (8001440 <MX_I2C1_Init+0x74>)
 800140a:	f001 ff4b 	bl	80032a4 <HAL_I2C_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001414:	f000 fa62 	bl	80018dc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001418:	2100      	movs	r1, #0
 800141a:	4809      	ldr	r0, [pc, #36]	; (8001440 <MX_I2C1_Init+0x74>)
 800141c:	f002 f87a 	bl	8003514 <HAL_I2CEx_ConfigAnalogFilter>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001426:	f000 fa59 	bl	80018dc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800142a:	2100      	movs	r1, #0
 800142c:	4804      	ldr	r0, [pc, #16]	; (8001440 <MX_I2C1_Init+0x74>)
 800142e:	f002 f8ad 	bl	800358c <HAL_I2CEx_ConfigDigitalFilter>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001438:	f000 fa50 	bl	80018dc <Error_Handler>
  }

}
 800143c:	bf00      	nop
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003a4 	.word	0x200003a4
 8001444:	40005400 	.word	0x40005400
 8001448:	000186a0 	.word	0x000186a0

0800144c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	; (80014d0 <HAL_I2C_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12b      	bne.n	80014c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a17      	ldr	r2, [pc, #92]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001478:	f043 0302 	orr.w	r3, r3, #2
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800148a:	23c0      	movs	r3, #192	; 0xc0
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800148e:	2312      	movs	r3, #18
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001492:	2301      	movs	r3, #1
 8001494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800149a:	2304      	movs	r3, #4
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149e:	f107 0314 	add.w	r3, r7, #20
 80014a2:	4619      	mov	r1, r3
 80014a4:	480c      	ldr	r0, [pc, #48]	; (80014d8 <HAL_I2C_MspInit+0x8c>)
 80014a6:	f001 fd53 	bl	8002f50 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	60fb      	str	r3, [r7, #12]
 80014ae:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	4a08      	ldr	r2, [pc, #32]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014b8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ba:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_I2C_MspInit+0x88>)
 80014bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40005400 	.word	0x40005400
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400
 80014dc:	00000000 	.word	0x00000000

080014e0 <get_sine_val>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 72000000;	// APB1 Timer Clocks
int Period = 1;				// Tim2 Period


void get_sine_val(void){
 80014e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 80014e6:	2300      	movs	r3, #0
 80014e8:	607b      	str	r3, [r7, #4]
 80014ea:	e06b      	b.n	80015c4 <get_sine_val+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff f827 	bl	8000544 <__aeabi_i2d>
 80014f6:	a340      	add	r3, pc, #256	; (adr r3, 80015f8 <get_sine_val+0x118>)
 80014f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fc:	f7ff f88c 	bl	8000618 <__aeabi_dmul>
 8001500:	4603      	mov	r3, r0
 8001502:	460c      	mov	r4, r1
 8001504:	4618      	mov	r0, r3
 8001506:	4621      	mov	r1, r4
 8001508:	f04f 0200 	mov.w	r2, #0
 800150c:	4b34      	ldr	r3, [pc, #208]	; (80015e0 <get_sine_val+0x100>)
 800150e:	f7ff f9ad 	bl	800086c <__aeabi_ddiv>
 8001512:	4603      	mov	r3, r0
 8001514:	460c      	mov	r4, r1
 8001516:	ec44 3b17 	vmov	d7, r3, r4
 800151a:	eeb0 0a47 	vmov.f32	s0, s14
 800151e:	eef0 0a67 	vmov.f32	s1, s15
 8001522:	f009 f95d 	bl	800a7e0 <sin>
 8001526:	ec51 0b10 	vmov	r0, r1, d0
 800152a:	f04f 0200 	mov.w	r2, #0
 800152e:	4b2d      	ldr	r3, [pc, #180]	; (80015e4 <get_sine_val+0x104>)
 8001530:	f7fe febc 	bl	80002ac <__adddf3>
 8001534:	4603      	mov	r3, r0
 8001536:	460c      	mov	r4, r1
 8001538:	4625      	mov	r5, r4
 800153a:	461c      	mov	r4, r3
 800153c:	4b2a      	ldr	r3, [pc, #168]	; (80015e8 <get_sine_val+0x108>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	0fda      	lsrs	r2, r3, #31
 8001542:	4413      	add	r3, r2
 8001544:	105b      	asrs	r3, r3, #1
 8001546:	4618      	mov	r0, r3
 8001548:	f7fe fffc 	bl	8000544 <__aeabi_i2d>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff f860 	bl	8000618 <__aeabi_dmul>
 8001558:	4603      	mov	r3, r0
 800155a:	460c      	mov	r4, r1
 800155c:	4618      	mov	r0, r3
 800155e:	4621      	mov	r1, r4
 8001560:	f7ff fb1c 	bl	8000b9c <__aeabi_d2uiz>
 8001564:	4601      	mov	r1, r0
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <get_sine_val+0x10c>)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <get_sine_val+0x110>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7fe ffe6 	bl	8000544 <__aeabi_i2d>
 8001578:	4605      	mov	r5, r0
 800157a:	460e      	mov	r6, r1
 800157c:	4a1b      	ldr	r2, [pc, #108]	; (80015ec <get_sine_val+0x10c>)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe ffcd 	bl	8000524 <__aeabi_ui2d>
 800158a:	4b1a      	ldr	r3, [pc, #104]	; (80015f4 <get_sine_val+0x114>)
 800158c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001590:	461a      	mov	r2, r3
 8001592:	4623      	mov	r3, r4
 8001594:	f7ff f840 	bl	8000618 <__aeabi_dmul>
 8001598:	4603      	mov	r3, r0
 800159a:	460c      	mov	r4, r1
 800159c:	461a      	mov	r2, r3
 800159e:	4623      	mov	r3, r4
 80015a0:	4628      	mov	r0, r5
 80015a2:	4631      	mov	r1, r6
 80015a4:	f7fe fe82 	bl	80002ac <__adddf3>
 80015a8:	4603      	mov	r3, r0
 80015aa:	460c      	mov	r4, r1
 80015ac:	4618      	mov	r0, r3
 80015ae:	4621      	mov	r1, r4
 80015b0:	f7ff faf4 	bl	8000b9c <__aeabi_d2uiz>
 80015b4:	4601      	mov	r1, r0
 80015b6:	4a0d      	ldr	r2, [pc, #52]	; (80015ec <get_sine_val+0x10c>)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	3301      	adds	r3, #1
 80015c2:	607b      	str	r3, [r7, #4]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2bc7      	cmp	r3, #199	; 0xc7
 80015c8:	dd90      	ble.n	80014ec <get_sine_val+0xc>
	}
	sine_val[Ns] = 0;
 80015ca:	4b08      	ldr	r3, [pc, #32]	; (80015ec <get_sine_val+0x10c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015da:	bf00      	nop
 80015dc:	f3af 8000 	nop.w
 80015e0:	40690000 	.word	0x40690000
 80015e4:	3ff00000 	.word	0x3ff00000
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000404 	.word	0x20000404
 80015f0:	20000010 	.word	0x20000010
 80015f4:	20000008 	.word	0x20000008
 80015f8:	4d12d84a 	.word	0x4d12d84a
 80015fc:	400921fb 	.word	0x400921fb

08001600 <set_clock_TIM2>:



void set_clock_TIM2(void){
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_1*(Period + 1) ) - 1;
 8001604:	4b15      	ldr	r3, [pc, #84]	; (800165c <set_clock_TIM2+0x5c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a15      	ldr	r2, [pc, #84]	; (8001660 <set_clock_TIM2+0x60>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	099b      	lsrs	r3, r3, #6
 8001610:	4a14      	ldr	r2, [pc, #80]	; (8001664 <set_clock_TIM2+0x64>)
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	3201      	adds	r2, #1
 8001616:	4914      	ldr	r1, [pc, #80]	; (8001668 <set_clock_TIM2+0x68>)
 8001618:	6809      	ldr	r1, [r1, #0]
 800161a:	fb01 f202 	mul.w	r2, r1, r2
 800161e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001622:	3b01      	subs	r3, #1
 8001624:	461a      	mov	r2, r3
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <set_clock_TIM2+0x6c>)
 8001628:	601a      	str	r2, [r3, #0]

	  htim2.Instance = TIM2;
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <set_clock_TIM2+0x70>)
 800162c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001630:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 8001632:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <set_clock_TIM2+0x64>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <set_clock_TIM2+0x70>)
 800163a:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 800163c:	4b0b      	ldr	r3, [pc, #44]	; (800166c <set_clock_TIM2+0x6c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <set_clock_TIM2+0x70>)
 8001644:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001646:	480a      	ldr	r0, [pc, #40]	; (8001670 <set_clock_TIM2+0x70>)
 8001648:	f003 fdc4 	bl	80051d4 <HAL_TIM_Base_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <set_clock_TIM2+0x56>
	  {
	    Error_Handler();
 8001652:	f000 f943 	bl	80018dc <Error_Handler>
	  }
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000001c 	.word	0x2000001c
 8001660:	51eb851f 	.word	0x51eb851f
 8001664:	20000020 	.word	0x20000020
 8001668:	20000014 	.word	0x20000014
 800166c:	20000400 	.word	0x20000400
 8001670:	2000076c 	.word	0x2000076c

08001674 <set_clock_TIM4>:

void set_clock_TIM4(void){
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_2*(Period + 1) ) - 1;
 8001678:	4b14      	ldr	r3, [pc, #80]	; (80016cc <set_clock_TIM4+0x58>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <set_clock_TIM4+0x5c>)
 800167e:	fba2 2303 	umull	r2, r3, r2, r3
 8001682:	099b      	lsrs	r3, r3, #6
 8001684:	4a13      	ldr	r2, [pc, #76]	; (80016d4 <set_clock_TIM4+0x60>)
 8001686:	6812      	ldr	r2, [r2, #0]
 8001688:	3201      	adds	r2, #1
 800168a:	4913      	ldr	r1, [pc, #76]	; (80016d8 <set_clock_TIM4+0x64>)
 800168c:	6809      	ldr	r1, [r1, #0]
 800168e:	fb01 f202 	mul.w	r2, r1, r2
 8001692:	fbb3 f3f2 	udiv	r3, r3, r2
 8001696:	3b01      	subs	r3, #1
 8001698:	461a      	mov	r2, r3
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <set_clock_TIM4+0x68>)
 800169c:	601a      	str	r2, [r3, #0]

	  htim4.Instance = TIM4;
 800169e:	4b10      	ldr	r3, [pc, #64]	; (80016e0 <set_clock_TIM4+0x6c>)
 80016a0:	4a10      	ldr	r2, [pc, #64]	; (80016e4 <set_clock_TIM4+0x70>)
 80016a2:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period = Period; //+1
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <set_clock_TIM4+0x60>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <set_clock_TIM4+0x6c>)
 80016ac:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <set_clock_TIM4+0x68>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <set_clock_TIM4+0x6c>)
 80016b6:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016b8:	4809      	ldr	r0, [pc, #36]	; (80016e0 <set_clock_TIM4+0x6c>)
 80016ba:	f003 fd8b 	bl	80051d4 <HAL_TIM_Base_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <set_clock_TIM4+0x54>
	  {
	    Error_Handler();
 80016c4:	f000 f90a 	bl	80018dc <Error_Handler>
	  }
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000001c 	.word	0x2000001c
 80016d0:	51eb851f 	.word	0x51eb851f
 80016d4:	20000020 	.word	0x20000020
 80016d8:	20000018 	.word	0x20000018
 80016dc:	20000400 	.word	0x20000400
 80016e0:	2000072c 	.word	0x2000072c
 80016e4:	40000800 	.word	0x40000800

080016e8 <HAL_UART_RxCpltCallback>:
/* Setting up UART communications*/
#define uartSize 8
uint8_t rx_buff[uartSize];
uint8_t tx_buff[] = {0,1,2,3,4,5,6,7};

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

	// Do something

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 80016f0:	2208      	movs	r2, #8
 80016f2:	4904      	ldr	r1, [pc, #16]	; (8001704 <HAL_UART_RxCpltCallback+0x1c>)
 80016f4:	4804      	ldr	r0, [pc, #16]	; (8001708 <HAL_UART_RxCpltCallback+0x20>)
 80016f6:	f004 f8e3 	bl	80058c0 <HAL_UART_Receive_DMA>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200003f8 	.word	0x200003f8
 8001708:	2000086c 	.word	0x2000086c

0800170c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	int i = 100;
 8001714:	2364      	movs	r3, #100	; 0x64
 8001716:	60fb      	str	r3, [r7, #12]
	while(i>0){
 8001718:	e002      	b.n	8001720 <HAL_UART_TxCpltCallback+0x14>
		i = i -1;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	3b01      	subs	r3, #1
 800171e:	60fb      	str	r3, [r7, #12]
	while(i>0){
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	2b00      	cmp	r3, #0
 8001724:	dcf9      	bgt.n	800171a <HAL_UART_TxCpltCallback+0xe>
	}

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 8001726:	2208      	movs	r2, #8
 8001728:	4903      	ldr	r1, [pc, #12]	; (8001738 <HAL_UART_TxCpltCallback+0x2c>)
 800172a:	4804      	ldr	r0, [pc, #16]	; (800173c <HAL_UART_TxCpltCallback+0x30>)
 800172c:	f004 f8c8 	bl	80058c0 <HAL_UART_Receive_DMA>
}
 8001730:	bf00      	nop
 8001732:	3710      	adds	r7, #16
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	200003f8 	.word	0x200003f8
 800173c:	2000086c 	.word	0x2000086c

08001740 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001744:	f000 fbee 	bl	8001f24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001748:	f000 f85e 	bl	8001808 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800174c:	f7ff fe08 	bl	8001360 <MX_GPIO_Init>
  MX_DMA_Init();
 8001750:	f7ff fdc0 	bl	80012d4 <MX_DMA_Init>
  MX_DAC_Init();
 8001754:	f7ff fcda 	bl	800110c <MX_DAC_Init>
  MX_TIM2_Init();
 8001758:	f000 f9a6 	bl	8001aa8 <MX_TIM2_Init>
  MX_TIM4_Init();
 800175c:	f000 f9f0 	bl	8001b40 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 8001760:	f007 fef4 	bl	800954c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8001764:	f7ff fbba 	bl	8000edc <MX_ADC1_Init>
  MX_ADC2_Init();
 8001768:	f7ff fc0a 	bl	8000f80 <MX_ADC2_Init>
  MX_I2C1_Init();
 800176c:	f7ff fe2e 	bl	80013cc <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8001770:	f000 fa68 	bl	8001c44 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001774:	f000 fa90 	bl	8001c98 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Sine function */
  set_clock_TIM2();						// Setting frequency of timer 2
 8001778:	f7ff ff42 	bl	8001600 <set_clock_TIM2>
  set_clock_TIM4();						// Setting frequency of timer 4
 800177c:	f7ff ff7a 	bl	8001674 <set_clock_TIM4>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 8001780:	4819      	ldr	r0, [pc, #100]	; (80017e8 <main+0xa8>)
 8001782:	f003 fd52 	bl	800522a <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);			// Start timer 4
 8001786:	4819      	ldr	r0, [pc, #100]	; (80017ec <main+0xac>)
 8001788:	f003 fd4f 	bl	800522a <HAL_TIM_Base_Start>
  get_sine_val();						// Call get sineval function
 800178c:	f7ff fea8 	bl	80014e0 <get_sine_val>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
 8001790:	2208      	movs	r2, #8
 8001792:	4917      	ldr	r1, [pc, #92]	; (80017f0 <main+0xb0>)
 8001794:	4817      	ldr	r0, [pc, #92]	; (80017f4 <main+0xb4>)
 8001796:	f004 f893 	bl	80058c0 <HAL_UART_Receive_DMA>
	HAL_Delay(100);
 800179a:	2064      	movs	r0, #100	; 0x64
 800179c:	f000 fc34 	bl	8002008 <HAL_Delay>
	HAL_UART_Transmit_DMA(&huart1, tx_buff, uartSize);
 80017a0:	2208      	movs	r2, #8
 80017a2:	4915      	ldr	r1, [pc, #84]	; (80017f8 <main+0xb8>)
 80017a4:	4813      	ldr	r0, [pc, #76]	; (80017f4 <main+0xb4>)
 80017a6:	f004 f81f 	bl	80057e8 <HAL_UART_Transmit_DMA>

	sprintf(txBuf, "%u\r\n", count);
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <main+0xbc>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4913      	ldr	r1, [pc, #76]	; (8001800 <main+0xc0>)
 80017b2:	4814      	ldr	r0, [pc, #80]	; (8001804 <main+0xc4>)
 80017b4:	f008 fcc4 	bl	800a140 <siprintf>
	count++;
 80017b8:	4b10      	ldr	r3, [pc, #64]	; (80017fc <main+0xbc>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	3301      	adds	r3, #1
 80017be:	b2da      	uxtb	r2, r3
 80017c0:	4b0e      	ldr	r3, [pc, #56]	; (80017fc <main+0xbc>)
 80017c2:	701a      	strb	r2, [r3, #0]

	if (count>100){
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <main+0xbc>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	2b64      	cmp	r3, #100	; 0x64
 80017ca:	d902      	bls.n	80017d2 <main+0x92>
		count = 1;
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <main+0xbc>)
 80017ce:	2201      	movs	r2, #1
 80017d0:	701a      	strb	r2, [r3, #0]
	}

	CDC_Transmit_FS((uint8_t *) txBuf, strlen(txBuf));
 80017d2:	480c      	ldr	r0, [pc, #48]	; (8001804 <main+0xc4>)
 80017d4:	f7fe fd0c 	bl	80001f0 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	b29b      	uxth	r3, r3
 80017dc:	4619      	mov	r1, r3
 80017de:	4809      	ldr	r0, [pc, #36]	; (8001804 <main+0xc4>)
 80017e0:	f007 ff72 	bl	80096c8 <CDC_Transmit_FS>
	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
 80017e4:	e7d4      	b.n	8001790 <main+0x50>
 80017e6:	bf00      	nop
 80017e8:	2000076c 	.word	0x2000076c
 80017ec:	2000072c 	.word	0x2000072c
 80017f0:	200003f8 	.word	0x200003f8
 80017f4:	2000086c 	.word	0x2000086c
 80017f8:	20000024 	.word	0x20000024
 80017fc:	2000002c 	.word	0x2000002c
 8001800:	0800b820 	.word	0x0800b820
 8001804:	20000724 	.word	0x20000724

08001808 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b094      	sub	sp, #80	; 0x50
 800180c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800180e:	f107 0320 	add.w	r3, r7, #32
 8001812:	2230      	movs	r2, #48	; 0x30
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f008 fbd2 	bl	8009fc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800181c:	f107 030c 	add.w	r3, r7, #12
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]
 8001824:	605a      	str	r2, [r3, #4]
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	60da      	str	r2, [r3, #12]
 800182a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b28      	ldr	r3, [pc, #160]	; (80018d4 <SystemClock_Config+0xcc>)
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	4a27      	ldr	r2, [pc, #156]	; (80018d4 <SystemClock_Config+0xcc>)
 8001836:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800183a:	6413      	str	r3, [r2, #64]	; 0x40
 800183c:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <SystemClock_Config+0xcc>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001848:	2300      	movs	r3, #0
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	4b22      	ldr	r3, [pc, #136]	; (80018d8 <SystemClock_Config+0xd0>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001854:	4a20      	ldr	r2, [pc, #128]	; (80018d8 <SystemClock_Config+0xd0>)
 8001856:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	4b1e      	ldr	r3, [pc, #120]	; (80018d8 <SystemClock_Config+0xd0>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001868:	2301      	movs	r3, #1
 800186a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800186c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001870:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001872:	2302      	movs	r3, #2
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001876:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800187c:	2304      	movs	r3, #4
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001880:	2348      	movs	r3, #72	; 0x48
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001884:	2302      	movs	r3, #2
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001888:	2303      	movs	r3, #3
 800188a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f83d 	bl	8004910 <HAL_RCC_OscConfig>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800189c:	f000 f81e 	bl	80018dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018a0:	230f      	movs	r3, #15
 80018a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018a4:	2302      	movs	r3, #2
 80018a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018b6:	f107 030c 	add.w	r3, r7, #12
 80018ba:	2102      	movs	r1, #2
 80018bc:	4618      	mov	r0, r3
 80018be:	f003 fa97 	bl	8004df0 <HAL_RCC_ClockConfig>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80018c8:	f000 f808 	bl	80018dc <Error_Handler>
  }
}
 80018cc:	bf00      	nop
 80018ce:	3750      	adds	r7, #80	; 0x50
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40023800 	.word	0x40023800
 80018d8:	40007000 	.word	0x40007000

080018dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
	...

080018ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <HAL_MspInit+0x4c>)
 80018f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fa:	4a0f      	ldr	r2, [pc, #60]	; (8001938 <HAL_MspInit+0x4c>)
 80018fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001900:	6453      	str	r3, [r2, #68]	; 0x44
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_MspInit+0x4c>)
 8001904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001906:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	4b09      	ldr	r3, [pc, #36]	; (8001938 <HAL_MspInit+0x4c>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	4a08      	ldr	r2, [pc, #32]	; (8001938 <HAL_MspInit+0x4c>)
 8001918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800191c:	6413      	str	r3, [r2, #64]	; 0x40
 800191e:	4b06      	ldr	r3, [pc, #24]	; (8001938 <HAL_MspInit+0x4c>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001926:	603b      	str	r3, [r7, #0]
 8001928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800

0800193c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001940:	bf00      	nop
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <HardFault_Handler+0x4>

08001950 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <MemManage_Handler+0x4>

08001956 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <BusFault_Handler+0x4>

0800195c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <UsageFault_Handler+0x4>

08001962 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198a:	4770      	bx	lr

0800198c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001990:	f000 fb1a 	bl	8001fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001994:	bf00      	nop
 8001996:	bd80      	pop	{r7, pc}

08001998 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 800199c:	4802      	ldr	r0, [pc, #8]	; (80019a8 <DMA1_Stream5_IRQHandler+0x10>)
 800199e:	f001 f86f 	bl	8002a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200002d0 	.word	0x200002d0

080019ac <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80019b0:	4802      	ldr	r0, [pc, #8]	; (80019bc <DMA1_Stream6_IRQHandler+0x10>)
 80019b2:	f001 f865 	bl	8002a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	20000344 	.word	0x20000344

080019c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80019c4:	4802      	ldr	r0, [pc, #8]	; (80019d0 <USART1_IRQHandler+0x10>)
 80019c6:	f003 fffb 	bl	80059c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	2000086c 	.word	0x2000086c

080019d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019d8:	4802      	ldr	r0, [pc, #8]	; (80019e4 <USART2_IRQHandler+0x10>)
 80019da:	f003 fff1 	bl	80059c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200008ac 	.word	0x200008ac

080019e8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <DMA2_Stream2_IRQHandler+0x10>)
 80019ee:	f001 f847 	bl	8002a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	2000080c 	.word	0x2000080c

080019fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <OTG_FS_IRQHandler+0x10>)
 8001a02:	f001 ff52 	bl	80038aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	20001dc0 	.word	0x20001dc0

08001a10 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <DMA2_Stream7_IRQHandler+0x10>)
 8001a16:	f001 f833 	bl	8002a80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200007ac 	.word	0x200007ac

08001a24 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <_sbrk+0x50>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d102      	bne.n	8001a3a <_sbrk+0x16>
		heap_end = &end;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <_sbrk+0x50>)
 8001a36:	4a10      	ldr	r2, [pc, #64]	; (8001a78 <_sbrk+0x54>)
 8001a38:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <_sbrk+0x50>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <_sbrk+0x50>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4413      	add	r3, r2
 8001a48:	466a      	mov	r2, sp
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d907      	bls.n	8001a5e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001a4e:	f008 fa7d 	bl	8009f4c <__errno>
 8001a52:	4602      	mov	r2, r0
 8001a54:	230c      	movs	r3, #12
 8001a56:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001a58:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5c:	e006      	b.n	8001a6c <_sbrk+0x48>
	}

	heap_end += incr;
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <_sbrk+0x50>)
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4413      	add	r3, r2
 8001a66:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <_sbrk+0x50>)
 8001a68:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000230 	.word	0x20000230
 8001a78:	200021d0 	.word	0x200021d0

08001a7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <SystemInit+0x28>)
 8001a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a86:	4a07      	ldr	r2, [pc, #28]	; (8001aa4 <SystemInit+0x28>)
 8001a88:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a8c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a90:	4b04      	ldr	r3, [pc, #16]	; (8001aa4 <SystemInit+0x28>)
 8001a92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a96:	609a      	str	r2, [r3, #8]
#endif
}
 8001a98:	bf00      	nop
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	e000ed00 	.word	0xe000ed00

08001aa8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aae:	f107 0308 	add.w	r3, r7, #8
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001abc:	463b      	mov	r3, r7
 8001abe:	2200      	movs	r2, #0
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ac6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001aca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ad2:	4b1a      	ldr	r3, [pc, #104]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001ad8:	4b18      	ldr	r3, [pc, #96]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ade:	4b17      	ldr	r3, [pc, #92]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001ae4:	4b15      	ldr	r3, [pc, #84]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001ae6:	2280      	movs	r2, #128	; 0x80
 8001ae8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001aea:	4814      	ldr	r0, [pc, #80]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001aec:	f003 fb72 	bl	80051d4 <HAL_TIM_Base_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001af6:	f7ff fef1 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001afa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b00:	f107 0308 	add.w	r3, r7, #8
 8001b04:	4619      	mov	r1, r3
 8001b06:	480d      	ldr	r0, [pc, #52]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001b08:	f003 fbb3 	bl	8005272 <HAL_TIM_ConfigClockSource>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001b12:	f7ff fee3 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b16:	2320      	movs	r3, #32
 8001b18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b1e:	463b      	mov	r3, r7
 8001b20:	4619      	mov	r1, r3
 8001b22:	4806      	ldr	r0, [pc, #24]	; (8001b3c <MX_TIM2_Init+0x94>)
 8001b24:	f003 fd96 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001b2e:	f7ff fed5 	bl	80018dc <Error_Handler>
  }

}
 8001b32:	bf00      	nop
 8001b34:	3718      	adds	r7, #24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	2000076c 	.word	0x2000076c

08001b40 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b086      	sub	sp, #24
 8001b44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b46:	f107 0308 	add.w	r3, r7, #8
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	601a      	str	r2, [r3, #0]
 8001b4e:	605a      	str	r2, [r3, #4]
 8001b50:	609a      	str	r2, [r3, #8]
 8001b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b54:	463b      	mov	r3, r7
 8001b56:	2200      	movs	r2, #0
 8001b58:	601a      	str	r2, [r3, #0]
 8001b5a:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b5e:	4a1d      	ldr	r2, [pc, #116]	; (8001bd4 <MX_TIM4_Init+0x94>)
 8001b60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001b62:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b64:	2201      	movs	r2, #1
 8001b66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8001b6e:	4b18      	ldr	r3, [pc, #96]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b70:	2201      	movs	r2, #1
 8001b72:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b16      	ldr	r3, [pc, #88]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b7a:	4b15      	ldr	r3, [pc, #84]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b7c:	2280      	movs	r2, #128	; 0x80
 8001b7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b82:	f003 fb27 	bl	80051d4 <HAL_TIM_Base_Init>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001b8c:	f7ff fea6 	bl	80018dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b96:	f107 0308 	add.w	r3, r7, #8
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001b9e:	f003 fb68 	bl	8005272 <HAL_TIM_ConfigClockSource>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001ba8:	f7ff fe98 	bl	80018dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bac:	2320      	movs	r3, #32
 8001bae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_TIM4_Init+0x90>)
 8001bba:	f003 fd4b 	bl	8005654 <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001bc4:	f7ff fe8a 	bl	80018dc <Error_Handler>
  }

}
 8001bc8:	bf00      	nop
 8001bca:	3718      	adds	r7, #24
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000072c 	.word	0x2000072c
 8001bd4:	40000800 	.word	0x40000800

08001bd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001be8:	d10e      	bne.n	8001c08 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	60fb      	str	r3, [r7, #12]
 8001bee:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_TIM_Base_MspInit+0x64>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <HAL_TIM_Base_MspInit+0x64>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <HAL_TIM_Base_MspInit+0x64>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	60fb      	str	r3, [r7, #12]
 8001c04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001c06:	e012      	b.n	8001c2e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a0c      	ldr	r2, [pc, #48]	; (8001c40 <HAL_TIM_Base_MspInit+0x68>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d10d      	bne.n	8001c2e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c12:	2300      	movs	r3, #0
 8001c14:	60bb      	str	r3, [r7, #8]
 8001c16:	4b09      	ldr	r3, [pc, #36]	; (8001c3c <HAL_TIM_Base_MspInit+0x64>)
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <HAL_TIM_Base_MspInit+0x64>)
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6413      	str	r3, [r2, #64]	; 0x40
 8001c22:	4b06      	ldr	r3, [pc, #24]	; (8001c3c <HAL_TIM_Base_MspInit+0x64>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
}
 8001c2e:	bf00      	nop
 8001c30:	3714      	adds	r7, #20
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40000800 	.word	0x40000800

08001c44 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001c48:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c4a:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_USART1_UART_Init+0x50>)
 8001c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8001c4e:	4b10      	ldr	r3, [pc, #64]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c50:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_2;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c62:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c64:	4b0a      	ldr	r3, [pc, #40]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c6a:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c6c:	220c      	movs	r2, #12
 8001c6e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c70:	4b07      	ldr	r3, [pc, #28]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c76:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7c:	4804      	ldr	r0, [pc, #16]	; (8001c90 <MX_USART1_UART_Init+0x4c>)
 8001c7e:	f003 fd65 	bl	800574c <HAL_UART_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_USART1_UART_Init+0x48>
  {
    Error_Handler();
 8001c88:	f7ff fe28 	bl	80018dc <Error_Handler>
  }

}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}
 8001c90:	2000086c 	.word	0x2000086c
 8001c94:	40011000 	.word	0x40011000

08001c98 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001c9c:	4b11      	ldr	r3, [pc, #68]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	4a12      	ldr	r2, [pc, #72]	; (8001ce8 <MX_USART2_UART_Init+0x50>)
 8001ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ca2:	4b10      	ldr	r3, [pc, #64]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001caa:	4b0e      	ldr	r3, [pc, #56]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cbc:	4b09      	ldr	r3, [pc, #36]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cbe:	220c      	movs	r2, #12
 8001cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cc2:	4b08      	ldr	r3, [pc, #32]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cce:	4805      	ldr	r0, [pc, #20]	; (8001ce4 <MX_USART2_UART_Init+0x4c>)
 8001cd0:	f003 fd3c 	bl	800574c <HAL_UART_Init>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cda:	f7ff fdff 	bl	80018dc <Error_Handler>
  }

}
 8001cde:	bf00      	nop
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	200008ac 	.word	0x200008ac
 8001ce8:	40004400 	.word	0x40004400

08001cec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	; 0x30
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	605a      	str	r2, [r3, #4]
 8001cfe:	609a      	str	r2, [r3, #8]
 8001d00:	60da      	str	r2, [r3, #12]
 8001d02:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a69      	ldr	r2, [pc, #420]	; (8001eb0 <HAL_UART_MspInit+0x1c4>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	f040 8092 	bne.w	8001e34 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d10:	2300      	movs	r3, #0
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	4b67      	ldr	r3, [pc, #412]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d18:	4a66      	ldr	r2, [pc, #408]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001d1a:	f043 0310 	orr.w	r3, r3, #16
 8001d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8001d20:	4b64      	ldr	r3, [pc, #400]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d24:	f003 0310 	and.w	r3, r3, #16
 8001d28:	61bb      	str	r3, [r7, #24]
 8001d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	4b60      	ldr	r3, [pc, #384]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d34:	4a5f      	ldr	r2, [pc, #380]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3c:	4b5d      	ldr	r3, [pc, #372]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	617b      	str	r3, [r7, #20]
 8001d46:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001d48:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001d4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d56:	2303      	movs	r3, #3
 8001d58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001d5a:	2307      	movs	r3, #7
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d5e:	f107 031c 	add.w	r3, r7, #28
 8001d62:	4619      	mov	r1, r3
 8001d64:	4854      	ldr	r0, [pc, #336]	; (8001eb8 <HAL_UART_MspInit+0x1cc>)
 8001d66:	f001 f8f3 	bl	8002f50 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001d6a:	4b54      	ldr	r3, [pc, #336]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001d6c:	4a54      	ldr	r2, [pc, #336]	; (8001ec0 <HAL_UART_MspInit+0x1d4>)
 8001d6e:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001d70:	4b52      	ldr	r3, [pc, #328]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001d72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d76:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d78:	4b50      	ldr	r3, [pc, #320]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d7e:	4b4f      	ldr	r3, [pc, #316]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d84:	4b4d      	ldr	r3, [pc, #308]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001d86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d8a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d8c:	4b4b      	ldr	r3, [pc, #300]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d92:	4b4a      	ldr	r3, [pc, #296]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001d98:	4b48      	ldr	r3, [pc, #288]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d9e:	4b47      	ldr	r3, [pc, #284]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001da4:	4b45      	ldr	r3, [pc, #276]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001daa:	4844      	ldr	r0, [pc, #272]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001dac:	f000 fd40 	bl	8002830 <HAL_DMA_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001db6:	f7ff fd91 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
 8001dc0:	4a3e      	ldr	r2, [pc, #248]	; (8001ebc <HAL_UART_MspInit+0x1d0>)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001dc6:	4b3f      	ldr	r3, [pc, #252]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001dc8:	4a3f      	ldr	r2, [pc, #252]	; (8001ec8 <HAL_UART_MspInit+0x1dc>)
 8001dca:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001dcc:	4b3d      	ldr	r3, [pc, #244]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001dce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001dd2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001dd6:	2240      	movs	r2, #64	; 0x40
 8001dd8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dda:	4b3a      	ldr	r3, [pc, #232]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001de0:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001de2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001de8:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001dea:	2200      	movs	r2, #0
 8001dec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001dee:	4b35      	ldr	r3, [pc, #212]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001df4:	4b33      	ldr	r3, [pc, #204]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001dfa:	4b32      	ldr	r3, [pc, #200]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e00:	4b30      	ldr	r3, [pc, #192]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001e02:	2200      	movs	r2, #0
 8001e04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001e06:	482f      	ldr	r0, [pc, #188]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001e08:	f000 fd12 	bl	8002830 <HAL_DMA_Init>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001e12:	f7ff fd63 	bl	80018dc <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a2a      	ldr	r2, [pc, #168]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e1c:	4a29      	ldr	r2, [pc, #164]	; (8001ec4 <HAL_UART_MspInit+0x1d8>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e22:	2200      	movs	r2, #0
 8001e24:	2100      	movs	r1, #0
 8001e26:	2025      	movs	r0, #37	; 0x25
 8001e28:	f000 fc5d 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e2c:	2025      	movs	r0, #37	; 0x25
 8001e2e:	f000 fc76 	bl	800271e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001e32:	e038      	b.n	8001ea6 <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <HAL_UART_MspInit+0x1e0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d133      	bne.n	8001ea6 <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	4a1b      	ldr	r2, [pc, #108]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	60fb      	str	r3, [r7, #12]
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	4a14      	ldr	r2, [pc, #80]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6a:	4b12      	ldr	r3, [pc, #72]	; (8001eb4 <HAL_UART_MspInit+0x1c8>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001e76:	230c      	movs	r3, #12
 8001e78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e82:	2303      	movs	r3, #3
 8001e84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e86:	2307      	movs	r3, #7
 8001e88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e8a:	f107 031c 	add.w	r3, r7, #28
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4809      	ldr	r0, [pc, #36]	; (8001eb8 <HAL_UART_MspInit+0x1cc>)
 8001e92:	f001 f85d 	bl	8002f50 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2100      	movs	r1, #0
 8001e9a:	2026      	movs	r0, #38	; 0x26
 8001e9c:	f000 fc23 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001ea0:	2026      	movs	r0, #38	; 0x26
 8001ea2:	f000 fc3c 	bl	800271e <HAL_NVIC_EnableIRQ>
}
 8001ea6:	bf00      	nop
 8001ea8:	3730      	adds	r7, #48	; 0x30
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	40011000 	.word	0x40011000
 8001eb4:	40023800 	.word	0x40023800
 8001eb8:	40020000 	.word	0x40020000
 8001ebc:	2000080c 	.word	0x2000080c
 8001ec0:	40026440 	.word	0x40026440
 8001ec4:	200007ac 	.word	0x200007ac
 8001ec8:	400264b8 	.word	0x400264b8
 8001ecc:	40004400 	.word	0x40004400

08001ed0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ed0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ed4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ed6:	e003      	b.n	8001ee0 <LoopCopyDataInit>

08001ed8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001eda:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001edc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001ede:	3104      	adds	r1, #4

08001ee0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001ee0:	480b      	ldr	r0, [pc, #44]	; (8001f10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001ee2:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001ee4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001ee6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001ee8:	d3f6      	bcc.n	8001ed8 <CopyDataInit>
  ldr  r2, =_sbss
 8001eea:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001eec:	e002      	b.n	8001ef4 <LoopFillZerobss>

08001eee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001eee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001ef0:	f842 3b04 	str.w	r3, [r2], #4

08001ef4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001ef4:	4b09      	ldr	r3, [pc, #36]	; (8001f1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001ef6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ef8:	d3f9      	bcc.n	8001eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001efa:	f7ff fdbf 	bl	8001a7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001efe:	f008 f82b 	bl	8009f58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f02:	f7ff fc1d 	bl	8001740 <main>
  bx  lr    
 8001f06:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001f08:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001f0c:	0800bab0 	.word	0x0800bab0
  ldr  r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f14:	20000214 	.word	0x20000214
  ldr  r2, =_sbss
 8001f18:	20000214 	.word	0x20000214
  ldr  r3, = _ebss
 8001f1c:	200021cc 	.word	0x200021cc

08001f20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f20:	e7fe      	b.n	8001f20 <ADC_IRQHandler>
	...

08001f24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0d      	ldr	r2, [pc, #52]	; (8001f64 <HAL_Init+0x40>)
 8001f2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a0a      	ldr	r2, [pc, #40]	; (8001f64 <HAL_Init+0x40>)
 8001f3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f40:	4b08      	ldr	r3, [pc, #32]	; (8001f64 <HAL_Init+0x40>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a07      	ldr	r2, [pc, #28]	; (8001f64 <HAL_Init+0x40>)
 8001f46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f4c:	2003      	movs	r0, #3
 8001f4e:	f000 fbbf 	bl	80026d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f52:	2000      	movs	r0, #0
 8001f54:	f000 f808 	bl	8001f68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f58:	f7ff fcc8 	bl	80018ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023c00 	.word	0x40023c00

08001f68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <HAL_InitTick+0x54>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <HAL_InitTick+0x58>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	f000 fbd7 	bl	800273a <HAL_SYSTICK_Config>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e00e      	b.n	8001fb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b0f      	cmp	r3, #15
 8001f9a:	d80a      	bhi.n	8001fb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa4:	f000 fb9f 	bl	80026e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fa8:	4a06      	ldr	r2, [pc, #24]	; (8001fc4 <HAL_InitTick+0x5c>)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	e000      	b.n	8001fb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
}
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	20000030 	.word	0x20000030
 8001fc0:	20000038 	.word	0x20000038
 8001fc4:	20000034 	.word	0x20000034

08001fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <HAL_IncTick+0x20>)
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b06      	ldr	r3, [pc, #24]	; (8001fec <HAL_IncTick+0x24>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	4a04      	ldr	r2, [pc, #16]	; (8001fec <HAL_IncTick+0x24>)
 8001fda:	6013      	str	r3, [r2, #0]
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000038 	.word	0x20000038
 8001fec:	200008ec 	.word	0x200008ec

08001ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <HAL_GetTick+0x14>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	200008ec 	.word	0x200008ec

08002008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002010:	f7ff ffee 	bl	8001ff0 <HAL_GetTick>
 8002014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002020:	d005      	beq.n	800202e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_Delay+0x40>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	461a      	mov	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800202e:	bf00      	nop
 8002030:	f7ff ffde 	bl	8001ff0 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	429a      	cmp	r2, r3
 800203e:	d8f7      	bhi.n	8002030 <HAL_Delay+0x28>
  {
  }
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	20000038 	.word	0x20000038

0800204c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002054:	2300      	movs	r3, #0
 8002056:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d101      	bne.n	8002062 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e033      	b.n	80020ca <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	2b00      	cmp	r3, #0
 8002068:	d109      	bne.n	800207e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7fe ffda 	bl	8001024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2200      	movs	r2, #0
 8002074:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002082:	f003 0310 	and.w	r3, r3, #16
 8002086:	2b00      	cmp	r3, #0
 8002088:	d118      	bne.n	80020bc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002092:	f023 0302 	bic.w	r3, r3, #2
 8002096:	f043 0202 	orr.w	r2, r3, #2
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f94a 	bl	8002338 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	f043 0201 	orr.w	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	641a      	str	r2, [r3, #64]	; 0x40
 80020ba:	e001      	b.n	80020c0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
	...

080020d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d101      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1c>
 80020ec:	2302      	movs	r3, #2
 80020ee:	e113      	b.n	8002318 <HAL_ADC_ConfigChannel+0x244>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2201      	movs	r2, #1
 80020f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b09      	cmp	r3, #9
 80020fe:	d925      	bls.n	800214c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68d9      	ldr	r1, [r3, #12]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	4613      	mov	r3, r2
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	4413      	add	r3, r2
 8002114:	3b1e      	subs	r3, #30
 8002116:	2207      	movs	r2, #7
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	43da      	mvns	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	400a      	ands	r2, r1
 8002124:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68d9      	ldr	r1, [r3, #12]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	689a      	ldr	r2, [r3, #8]
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	b29b      	uxth	r3, r3
 8002136:	4618      	mov	r0, r3
 8002138:	4603      	mov	r3, r0
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	4403      	add	r3, r0
 800213e:	3b1e      	subs	r3, #30
 8002140:	409a      	lsls	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	e022      	b.n	8002192 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6919      	ldr	r1, [r3, #16]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	461a      	mov	r2, r3
 800215a:	4613      	mov	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4413      	add	r3, r2
 8002160:	2207      	movs	r2, #7
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43da      	mvns	r2, r3
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	400a      	ands	r2, r1
 800216e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6919      	ldr	r1, [r3, #16]
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	b29b      	uxth	r3, r3
 8002180:	4618      	mov	r0, r3
 8002182:	4603      	mov	r3, r0
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	4403      	add	r3, r0
 8002188:	409a      	lsls	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	430a      	orrs	r2, r1
 8002190:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b06      	cmp	r3, #6
 8002198:	d824      	bhi.n	80021e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685a      	ldr	r2, [r3, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	3b05      	subs	r3, #5
 80021ac:	221f      	movs	r2, #31
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43da      	mvns	r2, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	400a      	ands	r2, r1
 80021ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	4618      	mov	r0, r3
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	3b05      	subs	r3, #5
 80021d6:	fa00 f203 	lsl.w	r2, r0, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
 80021e2:	e04c      	b.n	800227e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	2b0c      	cmp	r3, #12
 80021ea:	d824      	bhi.n	8002236 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	3b23      	subs	r3, #35	; 0x23
 80021fe:	221f      	movs	r2, #31
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43da      	mvns	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	400a      	ands	r2, r1
 800220c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	b29b      	uxth	r3, r3
 800221a:	4618      	mov	r0, r3
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	4613      	mov	r3, r2
 8002222:	009b      	lsls	r3, r3, #2
 8002224:	4413      	add	r3, r2
 8002226:	3b23      	subs	r3, #35	; 0x23
 8002228:	fa00 f203 	lsl.w	r2, r0, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	430a      	orrs	r2, r1
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
 8002234:	e023      	b.n	800227e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	4613      	mov	r3, r2
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	3b41      	subs	r3, #65	; 0x41
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43da      	mvns	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	400a      	ands	r2, r1
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b29b      	uxth	r3, r3
 8002264:	4618      	mov	r0, r3
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685a      	ldr	r2, [r3, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	3b41      	subs	r3, #65	; 0x41
 8002272:	fa00 f203 	lsl.w	r2, r0, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	430a      	orrs	r2, r1
 800227c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800227e:	4b29      	ldr	r3, [pc, #164]	; (8002324 <HAL_ADC_ConfigChannel+0x250>)
 8002280:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a28      	ldr	r2, [pc, #160]	; (8002328 <HAL_ADC_ConfigChannel+0x254>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d10f      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d8>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2b12      	cmp	r3, #18
 8002292:	d10b      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_ADC_ConfigChannel+0x254>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12b      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a1c      	ldr	r2, [pc, #112]	; (800232c <HAL_ADC_ConfigChannel+0x258>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <HAL_ADC_ConfigChannel+0x1f4>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b11      	cmp	r3, #17
 80022c6:	d122      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a11      	ldr	r2, [pc, #68]	; (800232c <HAL_ADC_ConfigChannel+0x258>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d111      	bne.n	800230e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022ea:	4b11      	ldr	r3, [pc, #68]	; (8002330 <HAL_ADC_ConfigChannel+0x25c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a11      	ldr	r2, [pc, #68]	; (8002334 <HAL_ADC_ConfigChannel+0x260>)
 80022f0:	fba2 2303 	umull	r2, r3, r2, r3
 80022f4:	0c9a      	lsrs	r2, r3, #18
 80022f6:	4613      	mov	r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	4413      	add	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002300:	e002      	b.n	8002308 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3b01      	subs	r3, #1
 8002306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f9      	bne.n	8002302 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2200      	movs	r2, #0
 8002312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40012300 	.word	0x40012300
 8002328:	40012000 	.word	0x40012000
 800232c:	10000012 	.word	0x10000012
 8002330:	20000030 	.word	0x20000030
 8002334:	431bde83 	.word	0x431bde83

08002338 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002340:	4b79      	ldr	r3, [pc, #484]	; (8002528 <ADC_Init+0x1f0>)
 8002342:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	431a      	orrs	r2, r3
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800236c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6859      	ldr	r1, [r3, #4]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	021a      	lsls	r2, r3, #8
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002390:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	6859      	ldr	r1, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6899      	ldr	r1, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	430a      	orrs	r2, r1
 80023c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023ca:	4a58      	ldr	r2, [pc, #352]	; (800252c <ADC_Init+0x1f4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	689a      	ldr	r2, [r3, #8]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002400:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	6899      	ldr	r1, [r3, #8]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	609a      	str	r2, [r3, #8]
 8002414:	e00f      	b.n	8002436 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002424:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002434:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0202 	bic.w	r2, r2, #2
 8002444:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	6899      	ldr	r1, [r3, #8]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	7e1b      	ldrb	r3, [r3, #24]
 8002450:	005a      	lsls	r2, r3, #1
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	430a      	orrs	r2, r1
 8002458:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d01b      	beq.n	800249c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002472:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002482:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	6859      	ldr	r1, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	3b01      	subs	r3, #1
 8002490:	035a      	lsls	r2, r3, #13
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	430a      	orrs	r2, r1
 8002498:	605a      	str	r2, [r3, #4]
 800249a:	e007      	b.n	80024ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	051a      	lsls	r2, r3, #20
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	430a      	orrs	r2, r1
 80024d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6899      	ldr	r1, [r3, #8]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024ee:	025a      	lsls	r2, r3, #9
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	430a      	orrs	r2, r1
 80024f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689a      	ldr	r2, [r3, #8]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002506:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	695b      	ldr	r3, [r3, #20]
 8002512:	029a      	lsls	r2, r3, #10
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	430a      	orrs	r2, r1
 800251a:	609a      	str	r2, [r3, #8]
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40012300 	.word	0x40012300
 800252c:	0f000001 	.word	0x0f000001

08002530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002530:	b480      	push	{r7}
 8002532:	b085      	sub	sp, #20
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f003 0307 	and.w	r3, r3, #7
 800253e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002540:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	68db      	ldr	r3, [r3, #12]
 8002544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002546:	68ba      	ldr	r2, [r7, #8]
 8002548:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800254c:	4013      	ands	r3, r2
 800254e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002558:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800255c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <__NVIC_SetPriorityGrouping+0x44>)
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	60d3      	str	r3, [r2, #12]
}
 8002568:	bf00      	nop
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <__NVIC_GetPriorityGrouping+0x18>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	0a1b      	lsrs	r3, r3, #8
 8002582:	f003 0307 	and.w	r3, r3, #7
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	4603      	mov	r3, r0
 800259c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	db0b      	blt.n	80025be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	f003 021f 	and.w	r2, r3, #31
 80025ac:	4907      	ldr	r1, [pc, #28]	; (80025cc <__NVIC_EnableIRQ+0x38>)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2001      	movs	r0, #1
 80025b6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	4603      	mov	r3, r0
 80025d8:	6039      	str	r1, [r7, #0]
 80025da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	db0a      	blt.n	80025fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	b2da      	uxtb	r2, r3
 80025e8:	490c      	ldr	r1, [pc, #48]	; (800261c <__NVIC_SetPriority+0x4c>)
 80025ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	440b      	add	r3, r1
 80025f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025f8:	e00a      	b.n	8002610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	4908      	ldr	r1, [pc, #32]	; (8002620 <__NVIC_SetPriority+0x50>)
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	3b04      	subs	r3, #4
 8002608:	0112      	lsls	r2, r2, #4
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	440b      	add	r3, r1
 800260e:	761a      	strb	r2, [r3, #24]
}
 8002610:	bf00      	nop
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr
 800261c:	e000e100 	.word	0xe000e100
 8002620:	e000ed00 	.word	0xe000ed00

08002624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002624:	b480      	push	{r7}
 8002626:	b089      	sub	sp, #36	; 0x24
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f003 0307 	and.w	r3, r3, #7
 8002636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	f1c3 0307 	rsb	r3, r3, #7
 800263e:	2b04      	cmp	r3, #4
 8002640:	bf28      	it	cs
 8002642:	2304      	movcs	r3, #4
 8002644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3304      	adds	r3, #4
 800264a:	2b06      	cmp	r3, #6
 800264c:	d902      	bls.n	8002654 <NVIC_EncodePriority+0x30>
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	3b03      	subs	r3, #3
 8002652:	e000      	b.n	8002656 <NVIC_EncodePriority+0x32>
 8002654:	2300      	movs	r3, #0
 8002656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002658:	f04f 32ff 	mov.w	r2, #4294967295
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43da      	mvns	r2, r3
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	401a      	ands	r2, r3
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800266c:	f04f 31ff 	mov.w	r1, #4294967295
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43d9      	mvns	r1, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800267c:	4313      	orrs	r3, r2
         );
}
 800267e:	4618      	mov	r0, r3
 8002680:	3724      	adds	r7, #36	; 0x24
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800269c:	d301      	bcc.n	80026a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800269e:	2301      	movs	r3, #1
 80026a0:	e00f      	b.n	80026c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026a2:	4a0a      	ldr	r2, [pc, #40]	; (80026cc <SysTick_Config+0x40>)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3b01      	subs	r3, #1
 80026a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026aa:	210f      	movs	r1, #15
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f7ff ff8e 	bl	80025d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026b4:	4b05      	ldr	r3, [pc, #20]	; (80026cc <SysTick_Config+0x40>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ba:	4b04      	ldr	r3, [pc, #16]	; (80026cc <SysTick_Config+0x40>)
 80026bc:	2207      	movs	r2, #7
 80026be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	e000e010 	.word	0xe000e010

080026d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f7ff ff29 	bl	8002530 <__NVIC_SetPriorityGrouping>
}
 80026de:	bf00      	nop
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	4603      	mov	r3, r0
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026f4:	2300      	movs	r3, #0
 80026f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f8:	f7ff ff3e 	bl	8002578 <__NVIC_GetPriorityGrouping>
 80026fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68b9      	ldr	r1, [r7, #8]
 8002702:	6978      	ldr	r0, [r7, #20]
 8002704:	f7ff ff8e 	bl	8002624 <NVIC_EncodePriority>
 8002708:	4602      	mov	r2, r0
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	4611      	mov	r1, r2
 8002710:	4618      	mov	r0, r3
 8002712:	f7ff ff5d 	bl	80025d0 <__NVIC_SetPriority>
}
 8002716:	bf00      	nop
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800271e:	b580      	push	{r7, lr}
 8002720:	b082      	sub	sp, #8
 8002722:	af00      	add	r7, sp, #0
 8002724:	4603      	mov	r3, r0
 8002726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff31 	bl	8002594 <__NVIC_EnableIRQ>
}
 8002732:	bf00      	nop
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff ffa2 	bl	800268c <SysTick_Config>
 8002748:	4603      	mov	r3, r0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e014      	b.n	800278e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	791b      	ldrb	r3, [r3, #4]
 8002768:	b2db      	uxtb	r3, r3
 800276a:	2b00      	cmp	r3, #0
 800276c:	d105      	bne.n	800277a <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f7fe fcff 	bl	8001178 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2202      	movs	r2, #2
 800277e:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800278c:	2300      	movs	r3, #0
}
 800278e:	4618      	mov	r0, r3
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002796:	b480      	push	{r7}
 8002798:	b087      	sub	sp, #28
 800279a:	af00      	add	r7, sp, #0
 800279c:	60f8      	str	r0, [r7, #12]
 800279e:	60b9      	str	r1, [r7, #8]
 80027a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	795b      	ldrb	r3, [r3, #5]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d101      	bne.n	80027b6 <HAL_DAC_ConfigChannel+0x20>
 80027b2:	2302      	movs	r3, #2
 80027b4:	e036      	b.n	8002824 <HAL_DAC_ConfigChannel+0x8e>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2201      	movs	r2, #1
 80027ba:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2202      	movs	r2, #2
 80027c0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80027ca:	f640 72fe 	movw	r2, #4094	; 0xffe
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	4013      	ands	r3, r2
 80027da:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80027e8:	693a      	ldr	r2, [r7, #16]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	697a      	ldr	r2, [r7, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	697a      	ldr	r2, [r7, #20]
 80027fc:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	22c0      	movs	r2, #192	; 0xc0
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	43da      	mvns	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	400a      	ands	r2, r1
 8002814:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	371c      	adds	r7, #28
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002838:	2300      	movs	r3, #0
 800283a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff fbd8 	bl	8001ff0 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e099      	b.n	8002980 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2202      	movs	r2, #2
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800286c:	e00f      	b.n	800288e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286e:	f7ff fbbf 	bl	8001ff0 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	693b      	ldr	r3, [r7, #16]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b05      	cmp	r3, #5
 800287a:	d908      	bls.n	800288e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e078      	b.n	8002980 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0301 	and.w	r3, r3, #1
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e8      	bne.n	800286e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	4b38      	ldr	r3, [pc, #224]	; (8002988 <HAL_DMA_Init+0x158>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691b      	ldr	r3, [r3, #16]
 80028c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028da:	697a      	ldr	r2, [r7, #20]
 80028dc:	4313      	orrs	r3, r2
 80028de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	2b04      	cmp	r3, #4
 80028e6:	d107      	bne.n	80028f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f0:	4313      	orrs	r3, r2
 80028f2:	697a      	ldr	r2, [r7, #20]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	697a      	ldr	r2, [r7, #20]
 80028fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	695b      	ldr	r3, [r3, #20]
 8002906:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	697a      	ldr	r2, [r7, #20]
 8002916:	4313      	orrs	r3, r2
 8002918:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b04      	cmp	r3, #4
 8002920:	d117      	bne.n	8002952 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002930:	2b00      	cmp	r3, #0
 8002932:	d00e      	beq.n	8002952 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 fa91 	bl	8002e5c <DMA_CheckFifoParam>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d008      	beq.n	8002952 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2240      	movs	r2, #64	; 0x40
 8002944:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800294e:	2301      	movs	r3, #1
 8002950:	e016      	b.n	8002980 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 fa48 	bl	8002df0 <DMA_CalcBaseAndBitshift>
 8002960:	4603      	mov	r3, r0
 8002962:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002968:	223f      	movs	r2, #63	; 0x3f
 800296a:	409a      	lsls	r2, r3
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	f010803f 	.word	0xf010803f

0800298c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800299a:	2300      	movs	r3, #0
 800299c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d101      	bne.n	80029b2 <HAL_DMA_Start_IT+0x26>
 80029ae:	2302      	movs	r3, #2
 80029b0:	e040      	b.n	8002a34 <HAL_DMA_Start_IT+0xa8>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d12f      	bne.n	8002a26 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2202      	movs	r2, #2
 80029ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	2200      	movs	r2, #0
 80029d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f9da 	bl	8002d94 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029e4:	223f      	movs	r2, #63	; 0x3f
 80029e6:	409a      	lsls	r2, r3
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0216 	orr.w	r2, r2, #22
 80029fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f042 0208 	orr.w	r2, r2, #8
 8002a12:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f042 0201 	orr.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e005      	b.n	8002a32 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a2e:	2302      	movs	r3, #2
 8002a30:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3718      	adds	r7, #24
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d004      	beq.n	8002a5a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00c      	b.n	8002a74 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f022 0201 	bic.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a8c:	4b92      	ldr	r3, [pc, #584]	; (8002cd8 <HAL_DMA_IRQHandler+0x258>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a92      	ldr	r2, [pc, #584]	; (8002cdc <HAL_DMA_IRQHandler+0x25c>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	0a9b      	lsrs	r3, r3, #10
 8002a98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aaa:	2208      	movs	r2, #8
 8002aac:	409a      	lsls	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01a      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0304 	and.w	r3, r3, #4
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d013      	beq.n	8002aec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0204 	bic.w	r2, r2, #4
 8002ad2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad8:	2208      	movs	r2, #8
 8002ada:	409a      	lsls	r2, r3
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae4:	f043 0201 	orr.w	r2, r3, #1
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af0:	2201      	movs	r2, #1
 8002af2:	409a      	lsls	r2, r3
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d012      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d00b      	beq.n	8002b22 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0e:	2201      	movs	r2, #1
 8002b10:	409a      	lsls	r2, r3
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	f043 0202 	orr.w	r2, r3, #2
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b26:	2204      	movs	r2, #4
 8002b28:	409a      	lsls	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00b      	beq.n	8002b58 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	2204      	movs	r2, #4
 8002b46:	409a      	lsls	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b50:	f043 0204 	orr.w	r2, r3, #4
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	4013      	ands	r3, r2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d043      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d03c      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7a:	2210      	movs	r2, #16
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d018      	beq.n	8002bc2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d108      	bne.n	8002bb0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d024      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	4798      	blx	r3
 8002bae:	e01f      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01b      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	4798      	blx	r3
 8002bc0:	e016      	b.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d107      	bne.n	8002be0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0208 	bic.w	r2, r2, #8
 8002bde:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d003      	beq.n	8002bf0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	f000 808e 	beq.w	8002d1e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8086 	beq.w	8002d1e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c16:	2220      	movs	r2, #32
 8002c18:	409a      	lsls	r2, r3
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b05      	cmp	r3, #5
 8002c28:	d136      	bne.n	8002c98 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681a      	ldr	r2, [r3, #0]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 0216 	bic.w	r2, r2, #22
 8002c38:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	695a      	ldr	r2, [r3, #20]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c48:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d103      	bne.n	8002c5a <HAL_DMA_IRQHandler+0x1da>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d007      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0208 	bic.w	r2, r2, #8
 8002c68:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	223f      	movs	r2, #63	; 0x3f
 8002c70:	409a      	lsls	r2, r3
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d07d      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	4798      	blx	r3
        }
        return;
 8002c96:	e078      	b.n	8002d8a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01c      	beq.n	8002ce0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d108      	bne.n	8002cc6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d030      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
 8002cc4:	e02b      	b.n	8002d1e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d027      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	4798      	blx	r3
 8002cd6:	e022      	b.n	8002d1e <HAL_DMA_IRQHandler+0x29e>
 8002cd8:	20000030 	.word	0x20000030
 8002cdc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d10f      	bne.n	8002d0e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0210 	bic.w	r2, r2, #16
 8002cfc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d032      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d022      	beq.n	8002d78 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2205      	movs	r2, #5
 8002d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f022 0201 	bic.w	r2, r2, #1
 8002d48:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	697a      	ldr	r2, [r7, #20]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d307      	bcc.n	8002d66 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0301 	and.w	r3, r3, #1
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d1f2      	bne.n	8002d4a <HAL_DMA_IRQHandler+0x2ca>
 8002d64:	e000      	b.n	8002d68 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002d66:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e000      	b.n	8002d8c <HAL_DMA_IRQHandler+0x30c>
        return;
 8002d8a:	bf00      	nop
    }
  }
}
 8002d8c:	3718      	adds	r7, #24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
 8002d92:	bf00      	nop

08002d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002db0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d108      	bne.n	8002dd4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dd2:	e007      	b.n	8002de4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	68ba      	ldr	r2, [r7, #8]
 8002dda:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	60da      	str	r2, [r3, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	3b10      	subs	r3, #16
 8002e00:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <DMA_CalcBaseAndBitshift+0x64>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	091b      	lsrs	r3, r3, #4
 8002e08:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e0a:	4a13      	ldr	r2, [pc, #76]	; (8002e58 <DMA_CalcBaseAndBitshift+0x68>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	781b      	ldrb	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	d909      	bls.n	8002e32 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e26:	f023 0303 	bic.w	r3, r3, #3
 8002e2a:	1d1a      	adds	r2, r3, #4
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	659a      	str	r2, [r3, #88]	; 0x58
 8002e30:	e007      	b.n	8002e42 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002e3a:	f023 0303 	bic.w	r3, r3, #3
 8002e3e:	687a      	ldr	r2, [r7, #4]
 8002e40:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3714      	adds	r7, #20
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
 8002e52:	bf00      	nop
 8002e54:	aaaaaaab 	.word	0xaaaaaaab
 8002e58:	0800b888 	.word	0x0800b888

08002e5c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d11f      	bne.n	8002eb6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d855      	bhi.n	8002f28 <DMA_CheckFifoParam+0xcc>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <DMA_CheckFifoParam+0x28>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea7 	.word	0x08002ea7
 8002e8c:	08002e95 	.word	0x08002e95
 8002e90:	08002f29 	.word	0x08002f29
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d045      	beq.n	8002f2c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea4:	e042      	b.n	8002f2c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eaa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002eae:	d13f      	bne.n	8002f30 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb4:	e03c      	b.n	8002f30 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ebe:	d121      	bne.n	8002f04 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d836      	bhi.n	8002f34 <DMA_CheckFifoParam+0xd8>
 8002ec6:	a201      	add	r2, pc, #4	; (adr r2, 8002ecc <DMA_CheckFifoParam+0x70>)
 8002ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ecc:	08002edd 	.word	0x08002edd
 8002ed0:	08002ee3 	.word	0x08002ee3
 8002ed4:	08002edd 	.word	0x08002edd
 8002ed8:	08002ef5 	.word	0x08002ef5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee0:	e02f      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d024      	beq.n	8002f38 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ef2:	e021      	b.n	8002f38 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002efc:	d11e      	bne.n	8002f3c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f02:	e01b      	b.n	8002f3c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d902      	bls.n	8002f10 <DMA_CheckFifoParam+0xb4>
 8002f0a:	2b03      	cmp	r3, #3
 8002f0c:	d003      	beq.n	8002f16 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f0e:	e018      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	73fb      	strb	r3, [r7, #15]
      break;
 8002f14:	e015      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f1a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d00e      	beq.n	8002f40 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	73fb      	strb	r3, [r7, #15]
      break;
 8002f26:	e00b      	b.n	8002f40 <DMA_CheckFifoParam+0xe4>
      break;
 8002f28:	bf00      	nop
 8002f2a:	e00a      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f2c:	bf00      	nop
 8002f2e:	e008      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f30:	bf00      	nop
 8002f32:	e006      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f34:	bf00      	nop
 8002f36:	e004      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f38:	bf00      	nop
 8002f3a:	e002      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;   
 8002f3c:	bf00      	nop
 8002f3e:	e000      	b.n	8002f42 <DMA_CheckFifoParam+0xe6>
      break;
 8002f40:	bf00      	nop
    }
  } 
  
  return status; 
 8002f42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3714      	adds	r7, #20
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b089      	sub	sp, #36	; 0x24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f62:	2300      	movs	r3, #0
 8002f64:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
 8002f6a:	e177      	b.n	800325c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f80:	693a      	ldr	r2, [r7, #16]
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	429a      	cmp	r2, r3
 8002f86:	f040 8166 	bne.w	8003256 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d00b      	beq.n	8002faa <HAL_GPIO_Init+0x5a>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	2b02      	cmp	r3, #2
 8002f98:	d007      	beq.n	8002faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f9e:	2b11      	cmp	r3, #17
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b12      	cmp	r3, #18
 8002fa8:	d130      	bne.n	800300c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	2203      	movs	r2, #3
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43db      	mvns	r3, r3
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	68da      	ldr	r2, [r3, #12]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	69ba      	ldr	r2, [r7, #24]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 0201 	and.w	r2, r3, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	2203      	movs	r2, #3
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	43db      	mvns	r3, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4013      	ands	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	fa02 f303 	lsl.w	r3, r2, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	69ba      	ldr	r2, [r7, #24]
 800303a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d003      	beq.n	800304c <HAL_GPIO_Init+0xfc>
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b12      	cmp	r3, #18
 800304a:	d123      	bne.n	8003094 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	08da      	lsrs	r2, r3, #3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3208      	adds	r2, #8
 8003054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	f003 0307 	and.w	r3, r3, #7
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	220f      	movs	r2, #15
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	43db      	mvns	r3, r3
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	4013      	ands	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	4313      	orrs	r3, r2
 8003084:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	08da      	lsrs	r2, r3, #3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	3208      	adds	r2, #8
 800308e:	69b9      	ldr	r1, [r7, #24]
 8003090:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	2203      	movs	r2, #3
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f003 0203 	and.w	r2, r3, #3
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	fa02 f303 	lsl.w	r3, r2, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4313      	orrs	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	f000 80c0 	beq.w	8003256 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b65      	ldr	r3, [pc, #404]	; (8003270 <HAL_GPIO_Init+0x320>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a64      	ldr	r2, [pc, #400]	; (8003270 <HAL_GPIO_Init+0x320>)
 80030e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b62      	ldr	r3, [pc, #392]	; (8003270 <HAL_GPIO_Init+0x320>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f2:	4a60      	ldr	r2, [pc, #384]	; (8003274 <HAL_GPIO_Init+0x324>)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	089b      	lsrs	r3, r3, #2
 80030f8:	3302      	adds	r3, #2
 80030fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	220f      	movs	r2, #15
 800310a:	fa02 f303 	lsl.w	r3, r2, r3
 800310e:	43db      	mvns	r3, r3
 8003110:	69ba      	ldr	r2, [r7, #24]
 8003112:	4013      	ands	r3, r2
 8003114:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a57      	ldr	r2, [pc, #348]	; (8003278 <HAL_GPIO_Init+0x328>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d037      	beq.n	800318e <HAL_GPIO_Init+0x23e>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a56      	ldr	r2, [pc, #344]	; (800327c <HAL_GPIO_Init+0x32c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d031      	beq.n	800318a <HAL_GPIO_Init+0x23a>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a55      	ldr	r2, [pc, #340]	; (8003280 <HAL_GPIO_Init+0x330>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d02b      	beq.n	8003186 <HAL_GPIO_Init+0x236>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a54      	ldr	r2, [pc, #336]	; (8003284 <HAL_GPIO_Init+0x334>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d025      	beq.n	8003182 <HAL_GPIO_Init+0x232>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a53      	ldr	r2, [pc, #332]	; (8003288 <HAL_GPIO_Init+0x338>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d01f      	beq.n	800317e <HAL_GPIO_Init+0x22e>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_GPIO_Init+0x33c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d019      	beq.n	800317a <HAL_GPIO_Init+0x22a>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a51      	ldr	r2, [pc, #324]	; (8003290 <HAL_GPIO_Init+0x340>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d013      	beq.n	8003176 <HAL_GPIO_Init+0x226>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a50      	ldr	r2, [pc, #320]	; (8003294 <HAL_GPIO_Init+0x344>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d00d      	beq.n	8003172 <HAL_GPIO_Init+0x222>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a4f      	ldr	r2, [pc, #316]	; (8003298 <HAL_GPIO_Init+0x348>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d007      	beq.n	800316e <HAL_GPIO_Init+0x21e>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a4e      	ldr	r2, [pc, #312]	; (800329c <HAL_GPIO_Init+0x34c>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d101      	bne.n	800316a <HAL_GPIO_Init+0x21a>
 8003166:	2309      	movs	r3, #9
 8003168:	e012      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800316a:	230a      	movs	r3, #10
 800316c:	e010      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800316e:	2308      	movs	r3, #8
 8003170:	e00e      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003172:	2307      	movs	r3, #7
 8003174:	e00c      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003176:	2306      	movs	r3, #6
 8003178:	e00a      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800317a:	2305      	movs	r3, #5
 800317c:	e008      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800317e:	2304      	movs	r3, #4
 8003180:	e006      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003182:	2303      	movs	r3, #3
 8003184:	e004      	b.n	8003190 <HAL_GPIO_Init+0x240>
 8003186:	2302      	movs	r3, #2
 8003188:	e002      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800318a:	2301      	movs	r3, #1
 800318c:	e000      	b.n	8003190 <HAL_GPIO_Init+0x240>
 800318e:	2300      	movs	r3, #0
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f002 0203 	and.w	r2, r2, #3
 8003196:	0092      	lsls	r2, r2, #2
 8003198:	4093      	lsls	r3, r2
 800319a:	69ba      	ldr	r2, [r7, #24]
 800319c:	4313      	orrs	r3, r2
 800319e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031a0:	4934      	ldr	r1, [pc, #208]	; (8003274 <HAL_GPIO_Init+0x324>)
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	089b      	lsrs	r3, r3, #2
 80031a6:	3302      	adds	r3, #2
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ae:	4b3c      	ldr	r3, [pc, #240]	; (80032a0 <HAL_GPIO_Init+0x350>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d2:	4a33      	ldr	r2, [pc, #204]	; (80032a0 <HAL_GPIO_Init+0x350>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80031d8:	4b31      	ldr	r3, [pc, #196]	; (80032a0 <HAL_GPIO_Init+0x350>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031fc:	4a28      	ldr	r2, [pc, #160]	; (80032a0 <HAL_GPIO_Init+0x350>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_GPIO_Init+0x350>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800321e:	69ba      	ldr	r2, [r7, #24]
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003226:	4a1e      	ldr	r2, [pc, #120]	; (80032a0 <HAL_GPIO_Init+0x350>)
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800322c:	4b1c      	ldr	r3, [pc, #112]	; (80032a0 <HAL_GPIO_Init+0x350>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	43db      	mvns	r3, r3
 8003236:	69ba      	ldr	r2, [r7, #24]
 8003238:	4013      	ands	r3, r2
 800323a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4313      	orrs	r3, r2
 800324e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003250:	4a13      	ldr	r2, [pc, #76]	; (80032a0 <HAL_GPIO_Init+0x350>)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3301      	adds	r3, #1
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	2b0f      	cmp	r3, #15
 8003260:	f67f ae84 	bls.w	8002f6c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003264:	bf00      	nop
 8003266:	3724      	adds	r7, #36	; 0x24
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr
 8003270:	40023800 	.word	0x40023800
 8003274:	40013800 	.word	0x40013800
 8003278:	40020000 	.word	0x40020000
 800327c:	40020400 	.word	0x40020400
 8003280:	40020800 	.word	0x40020800
 8003284:	40020c00 	.word	0x40020c00
 8003288:	40021000 	.word	0x40021000
 800328c:	40021400 	.word	0x40021400
 8003290:	40021800 	.word	0x40021800
 8003294:	40021c00 	.word	0x40021c00
 8003298:	40022000 	.word	0x40022000
 800329c:	40022400 	.word	0x40022400
 80032a0:	40013c00 	.word	0x40013c00

080032a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e11f      	b.n	80034f6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d106      	bne.n	80032d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fe f8be 	bl	800144c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2224      	movs	r2, #36	; 0x24
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003308:	f001 ff3c 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 800330c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	4a7b      	ldr	r2, [pc, #492]	; (8003500 <HAL_I2C_Init+0x25c>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d807      	bhi.n	8003328 <HAL_I2C_Init+0x84>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	4a7a      	ldr	r2, [pc, #488]	; (8003504 <HAL_I2C_Init+0x260>)
 800331c:	4293      	cmp	r3, r2
 800331e:	bf94      	ite	ls
 8003320:	2301      	movls	r3, #1
 8003322:	2300      	movhi	r3, #0
 8003324:	b2db      	uxtb	r3, r3
 8003326:	e006      	b.n	8003336 <HAL_I2C_Init+0x92>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4a77      	ldr	r2, [pc, #476]	; (8003508 <HAL_I2C_Init+0x264>)
 800332c:	4293      	cmp	r3, r2
 800332e:	bf94      	ite	ls
 8003330:	2301      	movls	r3, #1
 8003332:	2300      	movhi	r3, #0
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e0db      	b.n	80034f6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4a72      	ldr	r2, [pc, #456]	; (800350c <HAL_I2C_Init+0x268>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	0c9b      	lsrs	r3, r3, #18
 8003348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	4a64      	ldr	r2, [pc, #400]	; (8003500 <HAL_I2C_Init+0x25c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d802      	bhi.n	8003378 <HAL_I2C_Init+0xd4>
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	3301      	adds	r3, #1
 8003376:	e009      	b.n	800338c <HAL_I2C_Init+0xe8>
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800337e:	fb02 f303 	mul.w	r3, r2, r3
 8003382:	4a63      	ldr	r2, [pc, #396]	; (8003510 <HAL_I2C_Init+0x26c>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	3301      	adds	r3, #1
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	6812      	ldr	r2, [r2, #0]
 8003390:	430b      	orrs	r3, r1
 8003392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	69db      	ldr	r3, [r3, #28]
 800339a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800339e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4956      	ldr	r1, [pc, #344]	; (8003500 <HAL_I2C_Init+0x25c>)
 80033a8:	428b      	cmp	r3, r1
 80033aa:	d80d      	bhi.n	80033c8 <HAL_I2C_Init+0x124>
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1e59      	subs	r1, r3, #1
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ba:	3301      	adds	r3, #1
 80033bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033c0:	2b04      	cmp	r3, #4
 80033c2:	bf38      	it	cc
 80033c4:	2304      	movcc	r3, #4
 80033c6:	e04f      	b.n	8003468 <HAL_I2C_Init+0x1c4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d111      	bne.n	80033f4 <HAL_I2C_Init+0x150>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	1e58      	subs	r0, r3, #1
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6859      	ldr	r1, [r3, #4]
 80033d8:	460b      	mov	r3, r1
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	440b      	add	r3, r1
 80033de:	fbb0 f3f3 	udiv	r3, r0, r3
 80033e2:	3301      	adds	r3, #1
 80033e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	bf0c      	ite	eq
 80033ec:	2301      	moveq	r3, #1
 80033ee:	2300      	movne	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e012      	b.n	800341a <HAL_I2C_Init+0x176>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	1e58      	subs	r0, r3, #1
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6859      	ldr	r1, [r3, #4]
 80033fc:	460b      	mov	r3, r1
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	0099      	lsls	r1, r3, #2
 8003404:	440b      	add	r3, r1
 8003406:	fbb0 f3f3 	udiv	r3, r0, r3
 800340a:	3301      	adds	r3, #1
 800340c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <HAL_I2C_Init+0x17e>
 800341e:	2301      	movs	r3, #1
 8003420:	e022      	b.n	8003468 <HAL_I2C_Init+0x1c4>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <HAL_I2C_Init+0x1a4>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1e58      	subs	r0, r3, #1
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6859      	ldr	r1, [r3, #4]
 8003432:	460b      	mov	r3, r1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	440b      	add	r3, r1
 8003438:	fbb0 f3f3 	udiv	r3, r0, r3
 800343c:	3301      	adds	r3, #1
 800343e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003442:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003446:	e00f      	b.n	8003468 <HAL_I2C_Init+0x1c4>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6859      	ldr	r1, [r3, #4]
 8003450:	460b      	mov	r3, r1
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	0099      	lsls	r1, r3, #2
 8003458:	440b      	add	r3, r1
 800345a:	fbb0 f3f3 	udiv	r3, r0, r3
 800345e:	3301      	adds	r3, #1
 8003460:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003464:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	6809      	ldr	r1, [r1, #0]
 800346c:	4313      	orrs	r3, r2
 800346e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69da      	ldr	r2, [r3, #28]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6a1b      	ldr	r3, [r3, #32]
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003496:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6911      	ldr	r1, [r2, #16]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	68d2      	ldr	r2, [r2, #12]
 80034a2:	4311      	orrs	r1, r2
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	6812      	ldr	r2, [r2, #0]
 80034a8:	430b      	orrs	r3, r1
 80034aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	695a      	ldr	r2, [r3, #20]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	699b      	ldr	r3, [r3, #24]
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f042 0201 	orr.w	r2, r2, #1
 80034d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3710      	adds	r7, #16
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
 80034fe:	bf00      	nop
 8003500:	000186a0 	.word	0x000186a0
 8003504:	001e847f 	.word	0x001e847f
 8003508:	003d08ff 	.word	0x003d08ff
 800350c:	431bde83 	.word	0x431bde83
 8003510:	10624dd3 	.word	0x10624dd3

08003514 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b20      	cmp	r3, #32
 8003528:	d129      	bne.n	800357e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2224      	movs	r2, #36	; 0x24
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 0210 	bic.w	r2, r2, #16
 8003550:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	430a      	orrs	r2, r1
 8003560:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0201 	orr.w	r2, r2, #1
 8003570:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2220      	movs	r2, #32
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	e000      	b.n	8003580 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800357e:	2302      	movs	r3, #2
  }
}
 8003580:	4618      	mov	r0, r3
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003596:	2300      	movs	r3, #0
 8003598:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b20      	cmp	r3, #32
 80035a4:	d12a      	bne.n	80035fc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2224      	movs	r2, #36	; 0x24
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f022 0201 	bic.w	r2, r2, #1
 80035bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80035c6:	89fb      	ldrh	r3, [r7, #14]
 80035c8:	f023 030f 	bic.w	r3, r3, #15
 80035cc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	89fb      	ldrh	r3, [r7, #14]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	89fa      	ldrh	r2, [r7, #14]
 80035de:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f042 0201 	orr.w	r2, r2, #1
 80035ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80035fc:	2302      	movs	r3, #2
  }
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3714      	adds	r7, #20
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800360a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800360c:	b08f      	sub	sp, #60	; 0x3c
 800360e:	af0a      	add	r7, sp, #40	; 0x28
 8003610:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e10f      	b.n	800383c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b00      	cmp	r3, #0
 800362c:	d106      	bne.n	800363c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f006 f98c 	bl	8009954 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2203      	movs	r2, #3
 8003640:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d102      	bne.n	8003656 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f003 f959 	bl	8006912 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	603b      	str	r3, [r7, #0]
 8003666:	687e      	ldr	r6, [r7, #4]
 8003668:	466d      	mov	r5, sp
 800366a:	f106 0410 	add.w	r4, r6, #16
 800366e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003670:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003672:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003674:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003676:	e894 0003 	ldmia.w	r4, {r0, r1}
 800367a:	e885 0003 	stmia.w	r5, {r0, r1}
 800367e:	1d33      	adds	r3, r6, #4
 8003680:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003682:	6838      	ldr	r0, [r7, #0]
 8003684:	f003 f830 	bl	80066e8 <USB_CoreInit>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2202      	movs	r2, #2
 8003692:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e0d0      	b.n	800383c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2100      	movs	r1, #0
 80036a0:	4618      	mov	r0, r3
 80036a2:	f003 f947 	bl	8006934 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e04a      	b.n	8003742 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036ac:	7bfa      	ldrb	r2, [r7, #15]
 80036ae:	6879      	ldr	r1, [r7, #4]
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	1a9b      	subs	r3, r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	440b      	add	r3, r1
 80036ba:	333d      	adds	r3, #61	; 0x3d
 80036bc:	2201      	movs	r2, #1
 80036be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	333c      	adds	r3, #60	; 0x3c
 80036d0:	7bfa      	ldrb	r2, [r7, #15]
 80036d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036d4:	7bfa      	ldrb	r2, [r7, #15]
 80036d6:	7bfb      	ldrb	r3, [r7, #15]
 80036d8:	b298      	uxth	r0, r3
 80036da:	6879      	ldr	r1, [r7, #4]
 80036dc:	4613      	mov	r3, r2
 80036de:	00db      	lsls	r3, r3, #3
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	440b      	add	r3, r1
 80036e6:	3342      	adds	r3, #66	; 0x42
 80036e8:	4602      	mov	r2, r0
 80036ea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036ec:	7bfa      	ldrb	r2, [r7, #15]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	00db      	lsls	r3, r3, #3
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	333f      	adds	r3, #63	; 0x3f
 80036fc:	2200      	movs	r2, #0
 80036fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003700:	7bfa      	ldrb	r2, [r7, #15]
 8003702:	6879      	ldr	r1, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	1a9b      	subs	r3, r3, r2
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	440b      	add	r3, r1
 800370e:	3344      	adds	r3, #68	; 0x44
 8003710:	2200      	movs	r2, #0
 8003712:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003714:	7bfa      	ldrb	r2, [r7, #15]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	3348      	adds	r3, #72	; 0x48
 8003724:	2200      	movs	r2, #0
 8003726:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003728:	7bfa      	ldrb	r2, [r7, #15]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3350      	adds	r3, #80	; 0x50
 8003738:	2200      	movs	r2, #0
 800373a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800373c:	7bfb      	ldrb	r3, [r7, #15]
 800373e:	3301      	adds	r3, #1
 8003740:	73fb      	strb	r3, [r7, #15]
 8003742:	7bfa      	ldrb	r2, [r7, #15]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	429a      	cmp	r2, r3
 800374a:	d3af      	bcc.n	80036ac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800374c:	2300      	movs	r3, #0
 800374e:	73fb      	strb	r3, [r7, #15]
 8003750:	e044      	b.n	80037dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003752:	7bfa      	ldrb	r2, [r7, #15]
 8003754:	6879      	ldr	r1, [r7, #4]
 8003756:	4613      	mov	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	1a9b      	subs	r3, r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	440b      	add	r3, r1
 8003760:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003768:	7bfa      	ldrb	r2, [r7, #15]
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	4613      	mov	r3, r2
 800376e:	00db      	lsls	r3, r3, #3
 8003770:	1a9b      	subs	r3, r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	440b      	add	r3, r1
 8003776:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800377a:	7bfa      	ldrb	r2, [r7, #15]
 800377c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800377e:	7bfa      	ldrb	r2, [r7, #15]
 8003780:	6879      	ldr	r1, [r7, #4]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	440b      	add	r3, r1
 800378c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003790:	2200      	movs	r2, #0
 8003792:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003794:	7bfa      	ldrb	r2, [r7, #15]
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	4613      	mov	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	440b      	add	r3, r1
 80037a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037aa:	7bfa      	ldrb	r2, [r7, #15]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	00db      	lsls	r3, r3, #3
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037c0:	7bfa      	ldrb	r2, [r7, #15]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
 80037d8:	3301      	adds	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	7bfa      	ldrb	r2, [r7, #15]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d3b5      	bcc.n	8003752 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	603b      	str	r3, [r7, #0]
 80037ec:	687e      	ldr	r6, [r7, #4]
 80037ee:	466d      	mov	r5, sp
 80037f0:	f106 0410 	add.w	r4, r6, #16
 80037f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003800:	e885 0003 	stmia.w	r5, {r0, r1}
 8003804:	1d33      	adds	r3, r6, #4
 8003806:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003808:	6838      	ldr	r0, [r7, #0]
 800380a:	f003 f8bd 	bl	8006988 <USB_DevInit>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e00d      	b.n	800383c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4618      	mov	r0, r3
 8003836:	f004 f905 	bl	8007a44 <USB_DevDisconnect>

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	3714      	adds	r7, #20
 8003840:	46bd      	mov	sp, r7
 8003842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003844 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_PCD_Start+0x1c>
 800385c:	2302      	movs	r3, #2
 800385e:	e020      	b.n	80038a2 <HAL_PCD_Start+0x5e>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800386c:	2b01      	cmp	r3, #1
 800386e:	d109      	bne.n	8003884 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003874:	2b01      	cmp	r3, #1
 8003876:	d005      	beq.n	8003884 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f003 f831 	bl	80068f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f004 f8b5 	bl	8007a02 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2200      	movs	r2, #0
 800389c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80038aa:	b590      	push	{r4, r7, lr}
 80038ac:	b08d      	sub	sp, #52	; 0x34
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038b8:	6a3b      	ldr	r3, [r7, #32]
 80038ba:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4618      	mov	r0, r3
 80038c2:	f004 f973 	bl	8007bac <USB_GetMode>
 80038c6:	4603      	mov	r3, r0
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	f040 839d 	bne.w	8004008 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 f8d7 	bl	8007a86 <USB_ReadInterrupts>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 8393 	beq.w	8004006 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f004 f8ce 	bl	8007a86 <USB_ReadInterrupts>
 80038ea:	4603      	mov	r3, r0
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d107      	bne.n	8003904 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	695a      	ldr	r2, [r3, #20]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f002 0202 	and.w	r2, r2, #2
 8003902:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4618      	mov	r0, r3
 800390a:	f004 f8bc 	bl	8007a86 <USB_ReadInterrupts>
 800390e:	4603      	mov	r3, r0
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b10      	cmp	r3, #16
 8003916:	d161      	bne.n	80039dc <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699a      	ldr	r2, [r3, #24]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0210 	bic.w	r2, r2, #16
 8003926:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003928:	6a3b      	ldr	r3, [r7, #32]
 800392a:	6a1b      	ldr	r3, [r3, #32]
 800392c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	f003 020f 	and.w	r2, r3, #15
 8003934:	4613      	mov	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003940:	687a      	ldr	r2, [r7, #4]
 8003942:	4413      	add	r3, r2
 8003944:	3304      	adds	r3, #4
 8003946:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	0c5b      	lsrs	r3, r3, #17
 800394c:	f003 030f 	and.w	r3, r3, #15
 8003950:	2b02      	cmp	r3, #2
 8003952:	d124      	bne.n	800399e <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800395a:	4013      	ands	r3, r2
 800395c:	2b00      	cmp	r3, #0
 800395e:	d035      	beq.n	80039cc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800396a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800396e:	b29b      	uxth	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	6a38      	ldr	r0, [r7, #32]
 8003974:	f003 ff22 	bl	80077bc <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	68da      	ldr	r2, [r3, #12]
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	091b      	lsrs	r3, r3, #4
 8003980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003984:	441a      	add	r2, r3
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	091b      	lsrs	r3, r3, #4
 8003992:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003996:	441a      	add	r2, r3
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	619a      	str	r2, [r3, #24]
 800399c:	e016      	b.n	80039cc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	0c5b      	lsrs	r3, r3, #17
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	2b06      	cmp	r3, #6
 80039a8:	d110      	bne.n	80039cc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80039b0:	2208      	movs	r2, #8
 80039b2:	4619      	mov	r1, r3
 80039b4:	6a38      	ldr	r0, [r7, #32]
 80039b6:	f003 ff01 	bl	80077bc <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	699a      	ldr	r2, [r3, #24]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	091b      	lsrs	r3, r3, #4
 80039c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039c6:	441a      	add	r2, r3
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	699a      	ldr	r2, [r3, #24]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f042 0210 	orr.w	r2, r2, #16
 80039da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f004 f850 	bl	8007a86 <USB_ReadInterrupts>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039f0:	d16e      	bne.n	8003ad0 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 f856 	bl	8007aac <USB_ReadDevAllOutEpInterrupt>
 8003a00:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003a02:	e062      	b.n	8003aca <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d057      	beq.n	8003abe <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	b2d2      	uxtb	r2, r2
 8003a16:	4611      	mov	r1, r2
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f004 f87b 	bl	8007b14 <USB_ReadDevOutEPInterrupt>
 8003a1e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d00c      	beq.n	8003a44 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2c:	015a      	lsls	r2, r3, #5
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	4413      	add	r3, r2
 8003a32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a36:	461a      	mov	r2, r3
 8003a38:	2301      	movs	r3, #1
 8003a3a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fdb0 	bl	80045a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00c      	beq.n	8003a68 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	2308      	movs	r3, #8
 8003a5e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 feaa 	bl	80047bc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	f003 0310 	and.w	r3, r3, #16
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a74:	015a      	lsls	r2, r3, #5
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	4413      	add	r3, r2
 8003a7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7e:	461a      	mov	r2, r3
 8003a80:	2310      	movs	r3, #16
 8003a82:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	f003 0320 	and.w	r3, r3, #32
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d008      	beq.n	8003aa0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d009      	beq.n	8003abe <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	015a      	lsls	r2, r3, #5
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4413      	add	r3, r2
 8003ab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003abc:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	3301      	adds	r3, #1
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	085b      	lsrs	r3, r3, #1
 8003ac8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d199      	bne.n	8003a04 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f003 ffd6 	bl	8007a86 <USB_ReadInterrupts>
 8003ada:	4603      	mov	r3, r0
 8003adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ae4:	f040 80c0 	bne.w	8003c68 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f003 fff7 	bl	8007ae0 <USB_ReadDevAllInEpInterrupt>
 8003af2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003af8:	e0b2      	b.n	8003c60 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80a7 	beq.w	8003c54 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b0c:	b2d2      	uxtb	r2, r2
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4618      	mov	r0, r3
 8003b12:	f004 f81d 	bl	8007b50 <USB_ReadDevInEPInterrupt>
 8003b16:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d057      	beq.n	8003bd2 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	2201      	movs	r2, #1
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	69f9      	ldr	r1, [r7, #28]
 8003b3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b42:	4013      	ands	r3, r2
 8003b44:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003b46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b52:	461a      	mov	r2, r3
 8003b54:	2301      	movs	r3, #1
 8003b56:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d132      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b64:	4613      	mov	r3, r2
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	3348      	adds	r3, #72	; 0x48
 8003b70:	6819      	ldr	r1, [r3, #0]
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	4613      	mov	r3, r2
 8003b78:	00db      	lsls	r3, r3, #3
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4403      	add	r3, r0
 8003b80:	3344      	adds	r3, #68	; 0x44
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4419      	add	r1, r3
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	1a9b      	subs	r3, r3, r2
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4403      	add	r3, r0
 8003b94:	3348      	adds	r3, #72	; 0x48
 8003b96:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d113      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x31c>
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	00db      	lsls	r3, r3, #3
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	3350      	adds	r3, #80	; 0x50
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d108      	bne.n	8003bc6 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6818      	ldr	r0, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	f004 f825 	bl	8007c10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc8:	b2db      	uxtb	r3, r3
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f005 ff42 	bl	8009a56 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	461a      	mov	r2, r3
 8003bea:	2308      	movs	r3, #8
 8003bec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	f003 0310 	and.w	r3, r3, #16
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d008      	beq.n	8003c0a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfa:	015a      	lsls	r2, r3, #5
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	4413      	add	r3, r2
 8003c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c04:	461a      	mov	r2, r3
 8003c06:	2310      	movs	r3, #16
 8003c08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c20:	461a      	mov	r2, r3
 8003c22:	2340      	movs	r3, #64	; 0x40
 8003c24:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d008      	beq.n	8003c42 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	015a      	lsls	r2, r3, #5
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	4413      	add	r3, r2
 8003c38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2302      	movs	r3, #2
 8003c40:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d003      	beq.n	8003c54 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003c4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fc1b 	bl	800448a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	3301      	adds	r3, #1
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c5c:	085b      	lsrs	r3, r3, #1
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f47f af49 	bne.w	8003afa <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f003 ff0a 	bl	8007a86 <USB_ReadInterrupts>
 8003c72:	4603      	mov	r3, r0
 8003c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7c:	d122      	bne.n	8003cc4 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c8c:	f023 0301 	bic.w	r3, r3, #1
 8003c90:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d108      	bne.n	8003cae <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f000 fe26 	bl	80048f8 <HAL_PCDEx_LPM_Callback>
 8003cac:	e002      	b.n	8003cb4 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f005 ff48 	bl	8009b44 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	695a      	ldr	r2, [r3, #20]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003cc2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 fedc 	bl	8007a86 <USB_ReadInterrupts>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd8:	d112      	bne.n	8003d00 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 0301 	and.w	r3, r3, #1
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d102      	bne.n	8003cf0 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f005 ff04 	bl	8009af8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	695a      	ldr	r2, [r3, #20]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003cfe:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4618      	mov	r0, r3
 8003d06:	f003 febe 	bl	8007a86 <USB_ReadInterrupts>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d14:	f040 80c7 	bne.w	8003ea6 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d26:	f023 0301 	bic.w	r3, r3, #1
 8003d2a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2110      	movs	r1, #16
 8003d32:	4618      	mov	r0, r3
 8003d34:	f002 ff8c 	bl	8006c50 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d3c:	e056      	b.n	8003dec <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003d50:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d62:	0151      	lsls	r1, r2, #5
 8003d64:	69fa      	ldr	r2, [r7, #28]
 8003d66:	440a      	add	r2, r1
 8003d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d6c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003d70:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d74:	015a      	lsls	r2, r3, #5
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d82:	0151      	lsls	r1, r2, #5
 8003d84:	69fa      	ldr	r2, [r7, #28]
 8003d86:	440a      	add	r2, r1
 8003d88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d90:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003da4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003da8:	015a      	lsls	r2, r3, #5
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	4413      	add	r3, r2
 8003dae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003db6:	0151      	lsls	r1, r2, #5
 8003db8:	69fa      	ldr	r2, [r7, #28]
 8003dba:	440a      	add	r2, r1
 8003dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003dc4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc8:	015a      	lsls	r2, r3, #5
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	4413      	add	r3, r2
 8003dce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd6:	0151      	lsls	r1, r2, #5
 8003dd8:	69fa      	ldr	r2, [r7, #28]
 8003dda:	440a      	add	r2, r1
 8003ddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003de0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003de4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de8:	3301      	adds	r3, #1
 8003dea:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d3a3      	bcc.n	8003d3e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	69fa      	ldr	r2, [r7, #28]
 8003e00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e04:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003e08:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d016      	beq.n	8003e40 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e1c:	69fa      	ldr	r2, [r7, #28]
 8003e1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e22:	f043 030b 	orr.w	r3, r3, #11
 8003e26:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003e2a:	69fb      	ldr	r3, [r7, #28]
 8003e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e32:	69fa      	ldr	r2, [r7, #28]
 8003e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e38:	f043 030b 	orr.w	r3, r3, #11
 8003e3c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e3e:	e015      	b.n	8003e6c <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003e40:	69fb      	ldr	r3, [r7, #28]
 8003e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	69fa      	ldr	r2, [r7, #28]
 8003e4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003e52:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003e56:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	69fa      	ldr	r2, [r7, #28]
 8003e62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e66:	f043 030b 	orr.w	r3, r3, #11
 8003e6a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	69fa      	ldr	r2, [r7, #28]
 8003e76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e7a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003e7e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003e90:	461a      	mov	r2, r3
 8003e92:	f003 febd 	bl	8007c10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	695a      	ldr	r2, [r3, #20]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4618      	mov	r0, r3
 8003eac:	f003 fdeb 	bl	8007a86 <USB_ReadInterrupts>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003eb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eba:	d124      	bne.n	8003f06 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f003 fe81 	bl	8007bc8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f002 ff21 	bl	8006d12 <USB_GetDevSpeed>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681c      	ldr	r4, [r3, #0]
 8003edc:	f001 f946 	bl	800516c <HAL_RCC_GetHCLKFreq>
 8003ee0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4620      	mov	r0, r4
 8003eec:	f002 fc5e 	bl	80067ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f005 fdd8 	bl	8009aa6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	695a      	ldr	r2, [r3, #20]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003f04:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f003 fdbb 	bl	8007a86 <USB_ReadInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f003 0308 	and.w	r3, r3, #8
 8003f16:	2b08      	cmp	r3, #8
 8003f18:	d10a      	bne.n	8003f30 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f005 fdb5 	bl	8009a8a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695a      	ldr	r2, [r3, #20]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f002 0208 	and.w	r2, r2, #8
 8003f2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f003 fda6 	bl	8007a86 <USB_ReadInterrupts>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f44:	d10f      	bne.n	8003f66 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	4619      	mov	r1, r3
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f005 fe17 	bl	8009b84 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003f64:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f003 fd8b 	bl	8007a86 <USB_ReadInterrupts>
 8003f70:	4603      	mov	r3, r0
 8003f72:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f76:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f7a:	d10f      	bne.n	8003f9c <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	4619      	mov	r1, r3
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f005 fdea 	bl	8009b60 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	695a      	ldr	r2, [r3, #20]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003f9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f003 fd70 	bl	8007a86 <USB_ReadInterrupts>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fb0:	d10a      	bne.n	8003fc8 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f005 fdf8 	bl	8009ba8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	695a      	ldr	r2, [r3, #20]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f003 fd5a 	bl	8007a86 <USB_ReadInterrupts>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d115      	bne.n	8004008 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	f003 0304 	and.w	r3, r3, #4
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d002      	beq.n	8003ff4 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f005 fde8 	bl	8009bc4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	6859      	ldr	r1, [r3, #4]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	430a      	orrs	r2, r1
 8004002:	605a      	str	r2, [r3, #4]
 8004004:	e000      	b.n	8004008 <HAL_PCD_IRQHandler+0x75e>
      return;
 8004006:	bf00      	nop
    }
  }
}
 8004008:	3734      	adds	r7, #52	; 0x34
 800400a:	46bd      	mov	sp, r7
 800400c:	bd90      	pop	{r4, r7, pc}

0800400e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800400e:	b580      	push	{r7, lr}
 8004010:	b082      	sub	sp, #8
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	460b      	mov	r3, r1
 8004018:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_PCD_SetAddress+0x1a>
 8004024:	2302      	movs	r3, #2
 8004026:	e013      	b.n	8004050 <HAL_PCD_SetAddress+0x42>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	4611      	mov	r1, r2
 8004040:	4618      	mov	r0, r3
 8004042:	f003 fcb8 	bl	80079b6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	4608      	mov	r0, r1
 8004062:	4611      	mov	r1, r2
 8004064:	461a      	mov	r2, r3
 8004066:	4603      	mov	r3, r0
 8004068:	70fb      	strb	r3, [r7, #3]
 800406a:	460b      	mov	r3, r1
 800406c:	803b      	strh	r3, [r7, #0]
 800406e:	4613      	mov	r3, r2
 8004070:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004072:	2300      	movs	r3, #0
 8004074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800407a:	2b00      	cmp	r3, #0
 800407c:	da0f      	bge.n	800409e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	3338      	adds	r3, #56	; 0x38
 800408e:	687a      	ldr	r2, [r7, #4]
 8004090:	4413      	add	r3, r2
 8004092:	3304      	adds	r3, #4
 8004094:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2201      	movs	r2, #1
 800409a:	705a      	strb	r2, [r3, #1]
 800409c:	e00f      	b.n	80040be <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	f003 020f 	and.w	r2, r3, #15
 80040a4:	4613      	mov	r3, r2
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	1a9b      	subs	r3, r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	4413      	add	r3, r2
 80040b4:	3304      	adds	r3, #4
 80040b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80040be:	78fb      	ldrb	r3, [r7, #3]
 80040c0:	f003 030f 	and.w	r3, r3, #15
 80040c4:	b2da      	uxtb	r2, r3
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80040ca:	883a      	ldrh	r2, [r7, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	78ba      	ldrb	r2, [r7, #2]
 80040d4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	785b      	ldrb	r3, [r3, #1]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d004      	beq.n	80040e8 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	b29a      	uxth	r2, r3
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040e8:	78bb      	ldrb	r3, [r7, #2]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d102      	bne.n	80040f4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_PCD_EP_Open+0xaa>
 80040fe:	2302      	movs	r3, #2
 8004100:	e00e      	b.n	8004120 <HAL_PCD_EP_Open+0xc8>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68f9      	ldr	r1, [r7, #12]
 8004110:	4618      	mov	r0, r3
 8004112:	f002 fe23 	bl	8006d5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800411e:	7afb      	ldrb	r3, [r7, #11]
}
 8004120:	4618      	mov	r0, r3
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	460b      	mov	r3, r1
 8004132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004134:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004138:	2b00      	cmp	r3, #0
 800413a:	da0f      	bge.n	800415c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	1a9b      	subs	r3, r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	3338      	adds	r3, #56	; 0x38
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	4413      	add	r3, r2
 8004150:	3304      	adds	r3, #4
 8004152:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2201      	movs	r2, #1
 8004158:	705a      	strb	r2, [r3, #1]
 800415a:	e00f      	b.n	800417c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 020f 	and.w	r2, r3, #15
 8004162:	4613      	mov	r3, r2
 8004164:	00db      	lsls	r3, r3, #3
 8004166:	1a9b      	subs	r3, r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	4413      	add	r3, r2
 8004172:	3304      	adds	r3, #4
 8004174:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800417c:	78fb      	ldrb	r3, [r7, #3]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	b2da      	uxtb	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_PCD_EP_Close+0x6e>
 8004192:	2302      	movs	r3, #2
 8004194:	e00e      	b.n	80041b4 <HAL_PCD_EP_Close+0x8c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f002 fe61 	bl	8006e6c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3710      	adds	r7, #16
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	60f8      	str	r0, [r7, #12]
 80041c4:	607a      	str	r2, [r7, #4]
 80041c6:	603b      	str	r3, [r7, #0]
 80041c8:	460b      	mov	r3, r1
 80041ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041cc:	7afb      	ldrb	r3, [r7, #11]
 80041ce:	f003 020f 	and.w	r2, r3, #15
 80041d2:	4613      	mov	r3, r2
 80041d4:	00db      	lsls	r3, r3, #3
 80041d6:	1a9b      	subs	r3, r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	3304      	adds	r3, #4
 80041e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	683a      	ldr	r2, [r7, #0]
 80041f0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	2200      	movs	r2, #0
 80041fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041fe:	7afb      	ldrb	r3, [r7, #11]
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	b2da      	uxtb	r2, r3
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	691b      	ldr	r3, [r3, #16]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d102      	bne.n	8004218 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004218:	7afb      	ldrb	r3, [r7, #11]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6818      	ldr	r0, [r3, #0]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	b2db      	uxtb	r3, r3
 800422c:	461a      	mov	r2, r3
 800422e:	6979      	ldr	r1, [r7, #20]
 8004230:	f003 f93c 	bl	80074ac <USB_EP0StartXfer>
 8004234:	e008      	b.n	8004248 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6818      	ldr	r0, [r3, #0]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	461a      	mov	r2, r3
 8004242:	6979      	ldr	r1, [r7, #20]
 8004244:	f002 feee 	bl	8007024 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3718      	adds	r7, #24
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	460b      	mov	r3, r1
 800425c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	f003 020f 	and.w	r2, r3, #15
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	00db      	lsls	r3, r3, #3
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004274:	681b      	ldr	r3, [r3, #0]
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b086      	sub	sp, #24
 8004286:	af00      	add	r7, sp, #0
 8004288:	60f8      	str	r0, [r7, #12]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
 800428e:	460b      	mov	r3, r1
 8004290:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004292:	7afb      	ldrb	r3, [r7, #11]
 8004294:	f003 020f 	and.w	r2, r3, #15
 8004298:	4613      	mov	r3, r2
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	1a9b      	subs	r3, r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	3338      	adds	r3, #56	; 0x38
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	3304      	adds	r3, #4
 80042a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	683a      	ldr	r2, [r7, #0]
 80042b4:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2201      	movs	r2, #1
 80042c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80042c2:	7afb      	ldrb	r3, [r7, #11]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	691b      	ldr	r3, [r3, #16]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d102      	bne.n	80042dc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80042dc:	7afb      	ldrb	r3, [r7, #11]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	461a      	mov	r2, r3
 80042f2:	6979      	ldr	r1, [r7, #20]
 80042f4:	f003 f8da 	bl	80074ac <USB_EP0StartXfer>
 80042f8:	e008      	b.n	800430c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6818      	ldr	r0, [r3, #0]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	691b      	ldr	r3, [r3, #16]
 8004302:	b2db      	uxtb	r3, r3
 8004304:	461a      	mov	r2, r3
 8004306:	6979      	ldr	r1, [r7, #20]
 8004308:	f002 fe8c 	bl	8007024 <USB_EPStartXfer>
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004316:	b580      	push	{r7, lr}
 8004318:	b084      	sub	sp, #16
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
 800431e:	460b      	mov	r3, r1
 8004320:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004322:	78fb      	ldrb	r3, [r7, #3]
 8004324:	f003 020f 	and.w	r2, r3, #15
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	429a      	cmp	r2, r3
 800432e:	d901      	bls.n	8004334 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	e050      	b.n	80043d6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004334:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004338:	2b00      	cmp	r3, #0
 800433a:	da0f      	bge.n	800435c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 020f 	and.w	r2, r3, #15
 8004342:	4613      	mov	r3, r2
 8004344:	00db      	lsls	r3, r3, #3
 8004346:	1a9b      	subs	r3, r3, r2
 8004348:	009b      	lsls	r3, r3, #2
 800434a:	3338      	adds	r3, #56	; 0x38
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	4413      	add	r3, r2
 8004350:	3304      	adds	r3, #4
 8004352:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	705a      	strb	r2, [r3, #1]
 800435a:	e00d      	b.n	8004378 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800435c:	78fa      	ldrb	r2, [r7, #3]
 800435e:	4613      	mov	r3, r2
 8004360:	00db      	lsls	r3, r3, #3
 8004362:	1a9b      	subs	r3, r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	4413      	add	r3, r2
 800436e:	3304      	adds	r3, #4
 8004370:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2201      	movs	r2, #1
 800437c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800437e:	78fb      	ldrb	r3, [r7, #3]
 8004380:	f003 030f 	and.w	r3, r3, #15
 8004384:	b2da      	uxtb	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004390:	2b01      	cmp	r3, #1
 8004392:	d101      	bne.n	8004398 <HAL_PCD_EP_SetStall+0x82>
 8004394:	2302      	movs	r3, #2
 8004396:	e01e      	b.n	80043d6 <HAL_PCD_EP_SetStall+0xc0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68f9      	ldr	r1, [r7, #12]
 80043a6:	4618      	mov	r0, r3
 80043a8:	f003 fa31 	bl	800780e <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043ac:	78fb      	ldrb	r3, [r7, #3]
 80043ae:	f003 030f 	and.w	r3, r3, #15
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6818      	ldr	r0, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	b2d9      	uxtb	r1, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043c6:	461a      	mov	r2, r3
 80043c8:	f003 fc22 	bl	8007c10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2200      	movs	r2, #0
 80043d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80043d4:	2300      	movs	r3, #0
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3710      	adds	r7, #16
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}

080043de <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
 80043e6:	460b      	mov	r3, r1
 80043e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80043ea:	78fb      	ldrb	r3, [r7, #3]
 80043ec:	f003 020f 	and.w	r2, r3, #15
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d901      	bls.n	80043fc <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80043f8:	2301      	movs	r3, #1
 80043fa:	e042      	b.n	8004482 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80043fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004400:	2b00      	cmp	r3, #0
 8004402:	da0f      	bge.n	8004424 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	f003 020f 	and.w	r2, r3, #15
 800440a:	4613      	mov	r3, r2
 800440c:	00db      	lsls	r3, r3, #3
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	009b      	lsls	r3, r3, #2
 8004412:	3338      	adds	r3, #56	; 0x38
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	4413      	add	r3, r2
 8004418:	3304      	adds	r3, #4
 800441a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2201      	movs	r2, #1
 8004420:	705a      	strb	r2, [r3, #1]
 8004422:	e00f      	b.n	8004444 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	f003 020f 	and.w	r2, r3, #15
 800442a:	4613      	mov	r3, r2
 800442c:	00db      	lsls	r3, r3, #3
 800442e:	1a9b      	subs	r3, r3, r2
 8004430:	009b      	lsls	r3, r3, #2
 8004432:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004436:	687a      	ldr	r2, [r7, #4]
 8004438:	4413      	add	r3, r2
 800443a:	3304      	adds	r3, #4
 800443c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	f003 030f 	and.w	r3, r3, #15
 8004450:	b2da      	uxtb	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800445c:	2b01      	cmp	r3, #1
 800445e:	d101      	bne.n	8004464 <HAL_PCD_EP_ClrStall+0x86>
 8004460:	2302      	movs	r3, #2
 8004462:	e00e      	b.n	8004482 <HAL_PCD_EP_ClrStall+0xa4>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2201      	movs	r2, #1
 8004468:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	68f9      	ldr	r1, [r7, #12]
 8004472:	4618      	mov	r0, r3
 8004474:	f003 fa39 	bl	80078ea <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004480:	2300      	movs	r3, #0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b08a      	sub	sp, #40	; 0x28
 800448e:	af02      	add	r7, sp, #8
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	1a9b      	subs	r3, r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3338      	adds	r3, #56	; 0x38
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d901      	bls.n	80044c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06c      	b.n	800459c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	695a      	ldr	r2, [r3, #20]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d902      	bls.n	80044de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3303      	adds	r3, #3
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e6:	e02b      	b.n	8004540 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	695a      	ldr	r2, [r3, #20]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d902      	bls.n	8004504 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	3303      	adds	r3, #3
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68d9      	ldr	r1, [r3, #12]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800451c:	b2db      	uxtb	r3, r3
 800451e:	9300      	str	r3, [sp, #0]
 8004520:	4603      	mov	r3, r0
 8004522:	6978      	ldr	r0, [r7, #20]
 8004524:	f003 f915 	bl	8007752 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68da      	ldr	r2, [r3, #12]
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	441a      	add	r2, r3
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	699a      	ldr	r2, [r3, #24]
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	441a      	add	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	015a      	lsls	r2, r3, #5
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	4413      	add	r3, r2
 8004548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	b29b      	uxth	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	429a      	cmp	r2, r3
 8004554:	d809      	bhi.n	800456a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800455e:	429a      	cmp	r2, r3
 8004560:	d203      	bcs.n	800456a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	695b      	ldr	r3, [r3, #20]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d1be      	bne.n	80044e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	695a      	ldr	r2, [r3, #20]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	699b      	ldr	r3, [r3, #24]
 8004572:	429a      	cmp	r2, r3
 8004574:	d811      	bhi.n	800459a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	f003 030f 	and.w	r3, r3, #15
 800457c:	2201      	movs	r2, #1
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	43db      	mvns	r3, r3
 8004590:	6939      	ldr	r1, [r7, #16]
 8004592:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004596:	4013      	ands	r3, r2
 8004598:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3720      	adds	r7, #32
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}

080045a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b086      	sub	sp, #24
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	333c      	adds	r3, #60	; 0x3c
 80045bc:	3304      	adds	r3, #4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	f040 80a0 	bne.w	800471c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	f003 0308 	and.w	r3, r3, #8
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d015      	beq.n	8004612 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	4a72      	ldr	r2, [pc, #456]	; (80047b4 <PCD_EP_OutXfrComplete_int+0x210>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	f240 80dd 	bls.w	80047aa <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 80d7 	beq.w	80047aa <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	015a      	lsls	r2, r3, #5
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	4413      	add	r3, r2
 8004604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004608:	461a      	mov	r2, r3
 800460a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460e:	6093      	str	r3, [r2, #8]
 8004610:	e0cb      	b.n	80047aa <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	f003 0320 	and.w	r3, r3, #32
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	461a      	mov	r2, r3
 800462a:	2320      	movs	r3, #32
 800462c:	6093      	str	r3, [r2, #8]
 800462e:	e0bc      	b.n	80047aa <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004636:	2b00      	cmp	r3, #0
 8004638:	f040 80b7 	bne.w	80047aa <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	4a5d      	ldr	r2, [pc, #372]	; (80047b4 <PCD_EP_OutXfrComplete_int+0x210>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d90f      	bls.n	8004664 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00a      	beq.n	8004664 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	015a      	lsls	r2, r3, #5
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	4413      	add	r3, r2
 8004656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800465a:	461a      	mov	r2, r3
 800465c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004660:	6093      	str	r3, [r2, #8]
 8004662:	e0a2      	b.n	80047aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004664:	6879      	ldr	r1, [r7, #4]
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	4613      	mov	r3, r2
 800466a:	00db      	lsls	r3, r3, #3
 800466c:	1a9b      	subs	r3, r3, r2
 800466e:	009b      	lsls	r3, r3, #2
 8004670:	440b      	add	r3, r1
 8004672:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004676:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	0159      	lsls	r1, r3, #5
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	440b      	add	r3, r1
 8004680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800468a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	683a      	ldr	r2, [r7, #0]
 8004690:	4613      	mov	r3, r2
 8004692:	00db      	lsls	r3, r3, #3
 8004694:	1a9b      	subs	r3, r3, r2
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4403      	add	r3, r0
 800469a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800469e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	4613      	mov	r3, r2
 80046a6:	00db      	lsls	r3, r3, #3
 80046a8:	1a9b      	subs	r3, r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	440b      	add	r3, r1
 80046ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046b2:	6819      	ldr	r1, [r3, #0]
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	4613      	mov	r3, r2
 80046ba:	00db      	lsls	r3, r3, #3
 80046bc:	1a9b      	subs	r3, r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	4403      	add	r3, r0
 80046c2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4419      	add	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	4613      	mov	r3, r2
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	1a9b      	subs	r3, r3, r2
 80046d4:	009b      	lsls	r3, r3, #2
 80046d6:	4403      	add	r3, r0
 80046d8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80046dc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d114      	bne.n	800470e <PCD_EP_OutXfrComplete_int+0x16a>
 80046e4:	6879      	ldr	r1, [r7, #4]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	4613      	mov	r3, r2
 80046ea:	00db      	lsls	r3, r3, #3
 80046ec:	1a9b      	subs	r3, r3, r2
 80046ee:	009b      	lsls	r3, r3, #2
 80046f0:	440b      	add	r3, r1
 80046f2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d108      	bne.n	800470e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6818      	ldr	r0, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004706:	461a      	mov	r2, r3
 8004708:	2101      	movs	r1, #1
 800470a:	f003 fa81 	bl	8007c10 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f005 f983 	bl	8009a20 <HAL_PCD_DataOutStageCallback>
 800471a:	e046      	b.n	80047aa <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4a26      	ldr	r2, [pc, #152]	; (80047b8 <PCD_EP_OutXfrComplete_int+0x214>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d124      	bne.n	800476e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00a      	beq.n	8004744 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	015a      	lsls	r2, r3, #5
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	4413      	add	r3, r2
 8004736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473a:	461a      	mov	r2, r3
 800473c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004740:	6093      	str	r3, [r2, #8]
 8004742:	e032      	b.n	80047aa <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d008      	beq.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475a:	461a      	mov	r2, r3
 800475c:	2320      	movs	r3, #32
 800475e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	b2db      	uxtb	r3, r3
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f005 f95a 	bl	8009a20 <HAL_PCD_DataOutStageCallback>
 800476c:	e01d      	b.n	80047aa <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d114      	bne.n	800479e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004774:	6879      	ldr	r1, [r7, #4]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4613      	mov	r3, r2
 800477a:	00db      	lsls	r3, r3, #3
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d108      	bne.n	800479e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6818      	ldr	r0, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004796:	461a      	mov	r2, r3
 8004798:	2100      	movs	r1, #0
 800479a:	f003 fa39 	bl	8007c10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f005 f93b 	bl	8009a20 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	4f54300a 	.word	0x4f54300a
 80047b8:	4f54310a 	.word	0x4f54310a

080047bc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b086      	sub	sp, #24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	333c      	adds	r3, #60	; 0x3c
 80047d4:	3304      	adds	r3, #4
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80047da:	683b      	ldr	r3, [r7, #0]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	693b      	ldr	r3, [r7, #16]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	4a15      	ldr	r2, [pc, #84]	; (8004844 <PCD_EP_OutSetupPacket_int+0x88>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d90e      	bls.n	8004810 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d009      	beq.n	8004810 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	461a      	mov	r2, r3
 800480a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800480e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f005 f8f3 	bl	80099fc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	4a0a      	ldr	r2, [pc, #40]	; (8004844 <PCD_EP_OutSetupPacket_int+0x88>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d90c      	bls.n	8004838 <PCD_EP_OutSetupPacket_int+0x7c>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d108      	bne.n	8004838 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6818      	ldr	r0, [r3, #0]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004830:	461a      	mov	r2, r3
 8004832:	2101      	movs	r1, #1
 8004834:	f003 f9ec 	bl	8007c10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	4f54300a 	.word	0x4f54300a

08004848 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
 8004850:	460b      	mov	r3, r1
 8004852:	70fb      	strb	r3, [r7, #3]
 8004854:	4613      	mov	r3, r2
 8004856:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d107      	bne.n	8004876 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004866:	883b      	ldrh	r3, [r7, #0]
 8004868:	0419      	lsls	r1, r3, #16
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	430a      	orrs	r2, r1
 8004872:	629a      	str	r2, [r3, #40]	; 0x28
 8004874:	e028      	b.n	80048c8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	0c1b      	lsrs	r3, r3, #16
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	4413      	add	r3, r2
 8004882:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004884:	2300      	movs	r3, #0
 8004886:	73fb      	strb	r3, [r7, #15]
 8004888:	e00d      	b.n	80048a6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	7bfb      	ldrb	r3, [r7, #15]
 8004890:	3340      	adds	r3, #64	; 0x40
 8004892:	009b      	lsls	r3, r3, #2
 8004894:	4413      	add	r3, r2
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	68ba      	ldr	r2, [r7, #8]
 800489c:	4413      	add	r3, r2
 800489e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	3301      	adds	r3, #1
 80048a4:	73fb      	strb	r3, [r7, #15]
 80048a6:	7bfa      	ldrb	r2, [r7, #15]
 80048a8:	78fb      	ldrb	r3, [r7, #3]
 80048aa:	3b01      	subs	r3, #1
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d3ec      	bcc.n	800488a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80048b0:	883b      	ldrh	r3, [r7, #0]
 80048b2:	0418      	lsls	r0, r3, #16
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6819      	ldr	r1, [r3, #0]
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	68ba      	ldr	r2, [r7, #8]
 80048be:	4302      	orrs	r2, r0
 80048c0:	3340      	adds	r3, #64	; 0x40
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80048c8:	2300      	movs	r3, #0
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	460b      	mov	r3, r1
 80048e0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	887a      	ldrh	r2, [r7, #2]
 80048e8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80048ea:	2300      	movs	r3, #0
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	370c      	adds	r7, #12
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr

080048f8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b086      	sub	sp, #24
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e25b      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0301 	and.w	r3, r3, #1
 800492a:	2b00      	cmp	r3, #0
 800492c:	d075      	beq.n	8004a1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492e:	4ba3      	ldr	r3, [pc, #652]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
 8004936:	2b04      	cmp	r3, #4
 8004938:	d00c      	beq.n	8004954 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800493a:	4ba0      	ldr	r3, [pc, #640]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004942:	2b08      	cmp	r3, #8
 8004944:	d112      	bne.n	800496c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004946:	4b9d      	ldr	r3, [pc, #628]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800494e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004952:	d10b      	bne.n	800496c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	4b99      	ldr	r3, [pc, #612]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d05b      	beq.n	8004a18 <HAL_RCC_OscConfig+0x108>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d157      	bne.n	8004a18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e236      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004974:	d106      	bne.n	8004984 <HAL_RCC_OscConfig+0x74>
 8004976:	4b91      	ldr	r3, [pc, #580]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a90      	ldr	r2, [pc, #576]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800497c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004980:	6013      	str	r3, [r2, #0]
 8004982:	e01d      	b.n	80049c0 <HAL_RCC_OscConfig+0xb0>
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800498c:	d10c      	bne.n	80049a8 <HAL_RCC_OscConfig+0x98>
 800498e:	4b8b      	ldr	r3, [pc, #556]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	4a8a      	ldr	r2, [pc, #552]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004994:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004998:	6013      	str	r3, [r2, #0]
 800499a:	4b88      	ldr	r3, [pc, #544]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a87      	ldr	r2, [pc, #540]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e00b      	b.n	80049c0 <HAL_RCC_OscConfig+0xb0>
 80049a8:	4b84      	ldr	r3, [pc, #528]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a83      	ldr	r2, [pc, #524]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	4b81      	ldr	r3, [pc, #516]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a80      	ldr	r2, [pc, #512]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d013      	beq.n	80049f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049c8:	f7fd fb12 	bl	8001ff0 <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049d0:	f7fd fb0e 	bl	8001ff0 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b64      	cmp	r3, #100	; 0x64
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e1fb      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049e2:	4b76      	ldr	r3, [pc, #472]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0xc0>
 80049ee:	e014      	b.n	8004a1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f0:	f7fd fafe 	bl	8001ff0 <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	e008      	b.n	8004a0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049f8:	f7fd fafa 	bl	8001ff0 <HAL_GetTick>
 80049fc:	4602      	mov	r2, r0
 80049fe:	693b      	ldr	r3, [r7, #16]
 8004a00:	1ad3      	subs	r3, r2, r3
 8004a02:	2b64      	cmp	r3, #100	; 0x64
 8004a04:	d901      	bls.n	8004a0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e1e7      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a0a:	4b6c      	ldr	r3, [pc, #432]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1f0      	bne.n	80049f8 <HAL_RCC_OscConfig+0xe8>
 8004a16:	e000      	b.n	8004a1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d063      	beq.n	8004aee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a26:	4b65      	ldr	r3, [pc, #404]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d00b      	beq.n	8004a4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a32:	4b62      	ldr	r3, [pc, #392]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a3a:	2b08      	cmp	r3, #8
 8004a3c:	d11c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a3e:	4b5f      	ldr	r3, [pc, #380]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d116      	bne.n	8004a78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a4a:	4b5c      	ldr	r3, [pc, #368]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d005      	beq.n	8004a62 <HAL_RCC_OscConfig+0x152>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	2b01      	cmp	r3, #1
 8004a5c:	d001      	beq.n	8004a62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e1bb      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a62:	4b56      	ldr	r3, [pc, #344]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	691b      	ldr	r3, [r3, #16]
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	4952      	ldr	r1, [pc, #328]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	e03a      	b.n	8004aee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d020      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a80:	4b4f      	ldr	r3, [pc, #316]	; (8004bc0 <HAL_RCC_OscConfig+0x2b0>)
 8004a82:	2201      	movs	r2, #1
 8004a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a86:	f7fd fab3 	bl	8001ff0 <HAL_GetTick>
 8004a8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a8e:	f7fd faaf 	bl	8001ff0 <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e19c      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aa0:	4b46      	ldr	r3, [pc, #280]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0302 	and.w	r3, r3, #2
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d0f0      	beq.n	8004a8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004aac:	4b43      	ldr	r3, [pc, #268]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	00db      	lsls	r3, r3, #3
 8004aba:	4940      	ldr	r1, [pc, #256]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	600b      	str	r3, [r1, #0]
 8004ac0:	e015      	b.n	8004aee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ac2:	4b3f      	ldr	r3, [pc, #252]	; (8004bc0 <HAL_RCC_OscConfig+0x2b0>)
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac8:	f7fd fa92 	bl	8001ff0 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ad0:	f7fd fa8e 	bl	8001ff0 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e17b      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ae2:	4b36      	ldr	r3, [pc, #216]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f0      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d030      	beq.n	8004b5c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d016      	beq.n	8004b30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b02:	4b30      	ldr	r3, [pc, #192]	; (8004bc4 <HAL_RCC_OscConfig+0x2b4>)
 8004b04:	2201      	movs	r2, #1
 8004b06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b08:	f7fd fa72 	bl	8001ff0 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b10:	f7fd fa6e 	bl	8001ff0 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e15b      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b22:	4b26      	ldr	r3, [pc, #152]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d0f0      	beq.n	8004b10 <HAL_RCC_OscConfig+0x200>
 8004b2e:	e015      	b.n	8004b5c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b30:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <HAL_RCC_OscConfig+0x2b4>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b36:	f7fd fa5b 	bl	8001ff0 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3e:	f7fd fa57 	bl	8001ff0 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e144      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b50:	4b1a      	ldr	r3, [pc, #104]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1f0      	bne.n	8004b3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	f000 80a0 	beq.w	8004caa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b6e:	4b13      	ldr	r3, [pc, #76]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d10f      	bne.n	8004b9a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	60bb      	str	r3, [r7, #8]
 8004b7e:	4b0f      	ldr	r3, [pc, #60]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a0e      	ldr	r2, [pc, #56]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8a:	4b0c      	ldr	r3, [pc, #48]	; (8004bbc <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	60bb      	str	r3, [r7, #8]
 8004b94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b96:	2301      	movs	r3, #1
 8004b98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b9a:	4b0b      	ldr	r3, [pc, #44]	; (8004bc8 <HAL_RCC_OscConfig+0x2b8>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d121      	bne.n	8004bea <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ba6:	4b08      	ldr	r3, [pc, #32]	; (8004bc8 <HAL_RCC_OscConfig+0x2b8>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a07      	ldr	r2, [pc, #28]	; (8004bc8 <HAL_RCC_OscConfig+0x2b8>)
 8004bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bb2:	f7fd fa1d 	bl	8001ff0 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bb8:	e011      	b.n	8004bde <HAL_RCC_OscConfig+0x2ce>
 8004bba:	bf00      	nop
 8004bbc:	40023800 	.word	0x40023800
 8004bc0:	42470000 	.word	0x42470000
 8004bc4:	42470e80 	.word	0x42470e80
 8004bc8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bcc:	f7fd fa10 	bl	8001ff0 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e0fd      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bde:	4b81      	ldr	r3, [pc, #516]	; (8004de4 <HAL_RCC_OscConfig+0x4d4>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d0f0      	beq.n	8004bcc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x2f0>
 8004bf2:	4b7d      	ldr	r3, [pc, #500]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf6:	4a7c      	ldr	r2, [pc, #496]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	6713      	str	r3, [r2, #112]	; 0x70
 8004bfe:	e01c      	b.n	8004c3a <HAL_RCC_OscConfig+0x32a>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	2b05      	cmp	r3, #5
 8004c06:	d10c      	bne.n	8004c22 <HAL_RCC_OscConfig+0x312>
 8004c08:	4b77      	ldr	r3, [pc, #476]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4a76      	ldr	r2, [pc, #472]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c0e:	f043 0304 	orr.w	r3, r3, #4
 8004c12:	6713      	str	r3, [r2, #112]	; 0x70
 8004c14:	4b74      	ldr	r3, [pc, #464]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c18:	4a73      	ldr	r2, [pc, #460]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c1a:	f043 0301 	orr.w	r3, r3, #1
 8004c1e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c20:	e00b      	b.n	8004c3a <HAL_RCC_OscConfig+0x32a>
 8004c22:	4b71      	ldr	r3, [pc, #452]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c26:	4a70      	ldr	r2, [pc, #448]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c28:	f023 0301 	bic.w	r3, r3, #1
 8004c2c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2e:	4b6e      	ldr	r3, [pc, #440]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c32:	4a6d      	ldr	r2, [pc, #436]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c34:	f023 0304 	bic.w	r3, r3, #4
 8004c38:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d015      	beq.n	8004c6e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c42:	f7fd f9d5 	bl	8001ff0 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c48:	e00a      	b.n	8004c60 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c4a:	f7fd f9d1 	bl	8001ff0 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e0bc      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c60:	4b61      	ldr	r3, [pc, #388]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ee      	beq.n	8004c4a <HAL_RCC_OscConfig+0x33a>
 8004c6c:	e014      	b.n	8004c98 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c6e:	f7fd f9bf 	bl	8001ff0 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fd f9bb 	bl	8001ff0 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0a6      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c8c:	4b56      	ldr	r3, [pc, #344]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1ee      	bne.n	8004c76 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d105      	bne.n	8004caa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c9e:	4b52      	ldr	r3, [pc, #328]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca2:	4a51      	ldr	r2, [pc, #324]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004ca4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ca8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	f000 8092 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004cb4:	4b4c      	ldr	r3, [pc, #304]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	f003 030c 	and.w	r3, r3, #12
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d05c      	beq.n	8004d7a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d141      	bne.n	8004d4c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cc8:	4b48      	ldr	r3, [pc, #288]	; (8004dec <HAL_RCC_OscConfig+0x4dc>)
 8004cca:	2200      	movs	r2, #0
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fd f98f 	bl	8001ff0 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cd6:	f7fd f98b 	bl	8001ff0 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e078      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce8:	4b3f      	ldr	r3, [pc, #252]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1f0      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	69da      	ldr	r2, [r3, #28]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d02:	019b      	lsls	r3, r3, #6
 8004d04:	431a      	orrs	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0a:	085b      	lsrs	r3, r3, #1
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	431a      	orrs	r2, r3
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d16:	061b      	lsls	r3, r3, #24
 8004d18:	4933      	ldr	r1, [pc, #204]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d1e:	4b33      	ldr	r3, [pc, #204]	; (8004dec <HAL_RCC_OscConfig+0x4dc>)
 8004d20:	2201      	movs	r2, #1
 8004d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d24:	f7fd f964 	bl	8001ff0 <HAL_GetTick>
 8004d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	e008      	b.n	8004d3e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d2c:	f7fd f960 	bl	8001ff0 <HAL_GetTick>
 8004d30:	4602      	mov	r2, r0
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	1ad3      	subs	r3, r2, r3
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d901      	bls.n	8004d3e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d3a:	2303      	movs	r3, #3
 8004d3c:	e04d      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3e:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0f0      	beq.n	8004d2c <HAL_RCC_OscConfig+0x41c>
 8004d4a:	e045      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d4c:	4b27      	ldr	r3, [pc, #156]	; (8004dec <HAL_RCC_OscConfig+0x4dc>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d52:	f7fd f94d 	bl	8001ff0 <HAL_GetTick>
 8004d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d58:	e008      	b.n	8004d6c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d5a:	f7fd f949 	bl	8001ff0 <HAL_GetTick>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	1ad3      	subs	r3, r2, r3
 8004d64:	2b02      	cmp	r3, #2
 8004d66:	d901      	bls.n	8004d6c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	e036      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6c:	4b1e      	ldr	r3, [pc, #120]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1f0      	bne.n	8004d5a <HAL_RCC_OscConfig+0x44a>
 8004d78:	e02e      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d101      	bne.n	8004d86 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e029      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d86:	4b18      	ldr	r3, [pc, #96]	; (8004de8 <HAL_RCC_OscConfig+0x4d8>)
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69db      	ldr	r3, [r3, #28]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d11c      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d115      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004dae:	4013      	ands	r3, r2
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d10d      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d106      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e000      	b.n	8004dda <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3718      	adds	r7, #24
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40007000 	.word	0x40007000
 8004de8:	40023800 	.word	0x40023800
 8004dec:	42470060 	.word	0x42470060

08004df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	e0cc      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e04:	4b68      	ldr	r3, [pc, #416]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d90c      	bls.n	8004e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b65      	ldr	r3, [pc, #404]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b63      	ldr	r3, [pc, #396]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e0b8      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d020      	beq.n	8004e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f003 0304 	and.w	r3, r3, #4
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d005      	beq.n	8004e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e44:	4b59      	ldr	r3, [pc, #356]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	4a58      	ldr	r2, [pc, #352]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0308 	and.w	r3, r3, #8
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d005      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e5c:	4b53      	ldr	r3, [pc, #332]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a52      	ldr	r2, [pc, #328]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e68:	4b50      	ldr	r3, [pc, #320]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	494d      	ldr	r1, [pc, #308]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d044      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d107      	bne.n	8004e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8e:	4b47      	ldr	r3, [pc, #284]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d119      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e07f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b02      	cmp	r3, #2
 8004ea4:	d003      	beq.n	8004eae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eaa:	2b03      	cmp	r3, #3
 8004eac:	d107      	bne.n	8004ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eae:	4b3f      	ldr	r3, [pc, #252]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e06f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ebe:	4b3b      	ldr	r3, [pc, #236]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0302 	and.w	r3, r3, #2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	e067      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ece:	4b37      	ldr	r3, [pc, #220]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f023 0203 	bic.w	r2, r3, #3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	4934      	ldr	r1, [pc, #208]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ee0:	f7fd f886 	bl	8001ff0 <HAL_GetTick>
 8004ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee8:	f7fd f882 	bl	8001ff0 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e04f      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efe:	4b2b      	ldr	r3, [pc, #172]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 020c 	and.w	r2, r3, #12
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	009b      	lsls	r3, r3, #2
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d1eb      	bne.n	8004ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f10:	4b25      	ldr	r3, [pc, #148]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f003 030f 	and.w	r3, r3, #15
 8004f18:	683a      	ldr	r2, [r7, #0]
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d20c      	bcs.n	8004f38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1e:	4b22      	ldr	r3, [pc, #136]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f26:	4b20      	ldr	r3, [pc, #128]	; (8004fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 030f 	and.w	r3, r3, #15
 8004f2e:	683a      	ldr	r2, [r7, #0]
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d001      	beq.n	8004f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f34:	2301      	movs	r3, #1
 8004f36:	e032      	b.n	8004f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f003 0304 	and.w	r3, r3, #4
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d008      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f44:	4b19      	ldr	r3, [pc, #100]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	4916      	ldr	r1, [pc, #88]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0308 	and.w	r3, r3, #8
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f62:	4b12      	ldr	r3, [pc, #72]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	691b      	ldr	r3, [r3, #16]
 8004f6e:	00db      	lsls	r3, r3, #3
 8004f70:	490e      	ldr	r1, [pc, #56]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	4313      	orrs	r3, r2
 8004f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f76:	f000 f821 	bl	8004fbc <HAL_RCC_GetSysClockFreq>
 8004f7a:	4601      	mov	r1, r0
 8004f7c:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	4a0a      	ldr	r2, [pc, #40]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004f88:	5cd3      	ldrb	r3, [r2, r3]
 8004f8a:	fa21 f303 	lsr.w	r3, r1, r3
 8004f8e:	4a09      	ldr	r2, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f92:	4b09      	ldr	r3, [pc, #36]	; (8004fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4618      	mov	r0, r3
 8004f98:	f7fc ffe6 	bl	8001f68 <HAL_InitTick>

  return HAL_OK;
 8004f9c:	2300      	movs	r3, #0
}
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}
 8004fa6:	bf00      	nop
 8004fa8:	40023c00 	.word	0x40023c00
 8004fac:	40023800 	.word	0x40023800
 8004fb0:	0800b870 	.word	0x0800b870
 8004fb4:	20000030 	.word	0x20000030
 8004fb8:	20000034 	.word	0x20000034

08004fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	607b      	str	r3, [r7, #4]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	2300      	movs	r3, #0
 8004fcc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd2:	4b63      	ldr	r3, [pc, #396]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	f003 030c 	and.w	r3, r3, #12
 8004fda:	2b04      	cmp	r3, #4
 8004fdc:	d007      	beq.n	8004fee <HAL_RCC_GetSysClockFreq+0x32>
 8004fde:	2b08      	cmp	r3, #8
 8004fe0:	d008      	beq.n	8004ff4 <HAL_RCC_GetSysClockFreq+0x38>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f040 80b4 	bne.w	8005150 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fe8:	4b5e      	ldr	r3, [pc, #376]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004fea:	60bb      	str	r3, [r7, #8]
       break;
 8004fec:	e0b3      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fee:	4b5e      	ldr	r3, [pc, #376]	; (8005168 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ff0:	60bb      	str	r3, [r7, #8]
      break;
 8004ff2:	e0b0      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff4:	4b5a      	ldr	r3, [pc, #360]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ffc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ffe:	4b58      	ldr	r3, [pc, #352]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04a      	beq.n	80050a0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500a:	4b55      	ldr	r3, [pc, #340]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	099b      	lsrs	r3, r3, #6
 8005010:	f04f 0400 	mov.w	r4, #0
 8005014:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	ea03 0501 	and.w	r5, r3, r1
 8005020:	ea04 0602 	and.w	r6, r4, r2
 8005024:	4629      	mov	r1, r5
 8005026:	4632      	mov	r2, r6
 8005028:	f04f 0300 	mov.w	r3, #0
 800502c:	f04f 0400 	mov.w	r4, #0
 8005030:	0154      	lsls	r4, r2, #5
 8005032:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005036:	014b      	lsls	r3, r1, #5
 8005038:	4619      	mov	r1, r3
 800503a:	4622      	mov	r2, r4
 800503c:	1b49      	subs	r1, r1, r5
 800503e:	eb62 0206 	sbc.w	r2, r2, r6
 8005042:	f04f 0300 	mov.w	r3, #0
 8005046:	f04f 0400 	mov.w	r4, #0
 800504a:	0194      	lsls	r4, r2, #6
 800504c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005050:	018b      	lsls	r3, r1, #6
 8005052:	1a5b      	subs	r3, r3, r1
 8005054:	eb64 0402 	sbc.w	r4, r4, r2
 8005058:	f04f 0100 	mov.w	r1, #0
 800505c:	f04f 0200 	mov.w	r2, #0
 8005060:	00e2      	lsls	r2, r4, #3
 8005062:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005066:	00d9      	lsls	r1, r3, #3
 8005068:	460b      	mov	r3, r1
 800506a:	4614      	mov	r4, r2
 800506c:	195b      	adds	r3, r3, r5
 800506e:	eb44 0406 	adc.w	r4, r4, r6
 8005072:	f04f 0100 	mov.w	r1, #0
 8005076:	f04f 0200 	mov.w	r2, #0
 800507a:	0262      	lsls	r2, r4, #9
 800507c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005080:	0259      	lsls	r1, r3, #9
 8005082:	460b      	mov	r3, r1
 8005084:	4614      	mov	r4, r2
 8005086:	4618      	mov	r0, r3
 8005088:	4621      	mov	r1, r4
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f04f 0400 	mov.w	r4, #0
 8005090:	461a      	mov	r2, r3
 8005092:	4623      	mov	r3, r4
 8005094:	f7fb fda2 	bl	8000bdc <__aeabi_uldivmod>
 8005098:	4603      	mov	r3, r0
 800509a:	460c      	mov	r4, r1
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e049      	b.n	8005134 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a0:	4b2f      	ldr	r3, [pc, #188]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	099b      	lsrs	r3, r3, #6
 80050a6:	f04f 0400 	mov.w	r4, #0
 80050aa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80050ae:	f04f 0200 	mov.w	r2, #0
 80050b2:	ea03 0501 	and.w	r5, r3, r1
 80050b6:	ea04 0602 	and.w	r6, r4, r2
 80050ba:	4629      	mov	r1, r5
 80050bc:	4632      	mov	r2, r6
 80050be:	f04f 0300 	mov.w	r3, #0
 80050c2:	f04f 0400 	mov.w	r4, #0
 80050c6:	0154      	lsls	r4, r2, #5
 80050c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80050cc:	014b      	lsls	r3, r1, #5
 80050ce:	4619      	mov	r1, r3
 80050d0:	4622      	mov	r2, r4
 80050d2:	1b49      	subs	r1, r1, r5
 80050d4:	eb62 0206 	sbc.w	r2, r2, r6
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	f04f 0400 	mov.w	r4, #0
 80050e0:	0194      	lsls	r4, r2, #6
 80050e2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80050e6:	018b      	lsls	r3, r1, #6
 80050e8:	1a5b      	subs	r3, r3, r1
 80050ea:	eb64 0402 	sbc.w	r4, r4, r2
 80050ee:	f04f 0100 	mov.w	r1, #0
 80050f2:	f04f 0200 	mov.w	r2, #0
 80050f6:	00e2      	lsls	r2, r4, #3
 80050f8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80050fc:	00d9      	lsls	r1, r3, #3
 80050fe:	460b      	mov	r3, r1
 8005100:	4614      	mov	r4, r2
 8005102:	195b      	adds	r3, r3, r5
 8005104:	eb44 0406 	adc.w	r4, r4, r6
 8005108:	f04f 0100 	mov.w	r1, #0
 800510c:	f04f 0200 	mov.w	r2, #0
 8005110:	02a2      	lsls	r2, r4, #10
 8005112:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005116:	0299      	lsls	r1, r3, #10
 8005118:	460b      	mov	r3, r1
 800511a:	4614      	mov	r4, r2
 800511c:	4618      	mov	r0, r3
 800511e:	4621      	mov	r1, r4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f04f 0400 	mov.w	r4, #0
 8005126:	461a      	mov	r2, r3
 8005128:	4623      	mov	r3, r4
 800512a:	f7fb fd57 	bl	8000bdc <__aeabi_uldivmod>
 800512e:	4603      	mov	r3, r0
 8005130:	460c      	mov	r4, r1
 8005132:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005134:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	0c1b      	lsrs	r3, r3, #16
 800513a:	f003 0303 	and.w	r3, r3, #3
 800513e:	3301      	adds	r3, #1
 8005140:	005b      	lsls	r3, r3, #1
 8005142:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	fbb2 f3f3 	udiv	r3, r2, r3
 800514c:	60bb      	str	r3, [r7, #8]
      break;
 800514e:	e002      	b.n	8005156 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005152:	60bb      	str	r3, [r7, #8]
      break;
 8005154:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005156:	68bb      	ldr	r3, [r7, #8]
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005160:	40023800 	.word	0x40023800
 8005164:	00f42400 	.word	0x00f42400
 8005168:	007a1200 	.word	0x007a1200

0800516c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005170:	4b03      	ldr	r3, [pc, #12]	; (8005180 <HAL_RCC_GetHCLKFreq+0x14>)
 8005172:	681b      	ldr	r3, [r3, #0]
}
 8005174:	4618      	mov	r0, r3
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr
 800517e:	bf00      	nop
 8005180:	20000030 	.word	0x20000030

08005184 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005188:	f7ff fff0 	bl	800516c <HAL_RCC_GetHCLKFreq>
 800518c:	4601      	mov	r1, r0
 800518e:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	0a9b      	lsrs	r3, r3, #10
 8005194:	f003 0307 	and.w	r3, r3, #7
 8005198:	4a03      	ldr	r2, [pc, #12]	; (80051a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800519a:	5cd3      	ldrb	r3, [r2, r3]
 800519c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	40023800 	.word	0x40023800
 80051a8:	0800b880 	.word	0x0800b880

080051ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051b0:	f7ff ffdc 	bl	800516c <HAL_RCC_GetHCLKFreq>
 80051b4:	4601      	mov	r1, r0
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0b5b      	lsrs	r3, r3, #13
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4a03      	ldr	r2, [pc, #12]	; (80051d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051c2:	5cd3      	ldrb	r3, [r2, r3]
 80051c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	0800b880 	.word	0x0800b880

080051d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e2:	2301      	movs	r3, #1
 80051e4:	e01d      	b.n	8005222 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d106      	bne.n	8005200 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f7fc fcec 	bl	8001bd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2202      	movs	r2, #2
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	3304      	adds	r3, #4
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 f8e4 	bl	80053e0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3708      	adds	r7, #8
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}

0800522a <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800522a:	b480      	push	{r7}
 800522c:	b085      	sub	sp, #20
 800522e:	af00      	add	r7, sp, #0
 8005230:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2202      	movs	r2, #2
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	689b      	ldr	r3, [r3, #8]
 8005240:	f003 0307 	and.w	r3, r3, #7
 8005244:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b06      	cmp	r3, #6
 800524a:	d007      	beq.n	800525c <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005264:	2300      	movs	r3, #0
}
 8005266:	4618      	mov	r0, r3
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr

08005272 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b084      	sub	sp, #16
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_TIM_ConfigClockSource+0x18>
 8005286:	2302      	movs	r3, #2
 8005288:	e0a6      	b.n	80053d8 <HAL_TIM_ConfigClockSource+0x166>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2202      	movs	r2, #2
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052a8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052b0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68fa      	ldr	r2, [r7, #12]
 80052b8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2b40      	cmp	r3, #64	; 0x40
 80052c0:	d067      	beq.n	8005392 <HAL_TIM_ConfigClockSource+0x120>
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d80b      	bhi.n	80052de <HAL_TIM_ConfigClockSource+0x6c>
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d073      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x140>
 80052ca:	2b10      	cmp	r3, #16
 80052cc:	d802      	bhi.n	80052d4 <HAL_TIM_ConfigClockSource+0x62>
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d06f      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80052d2:	e078      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052d4:	2b20      	cmp	r3, #32
 80052d6:	d06c      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x140>
 80052d8:	2b30      	cmp	r3, #48	; 0x30
 80052da:	d06a      	beq.n	80053b2 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80052dc:	e073      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052de:	2b70      	cmp	r3, #112	; 0x70
 80052e0:	d00d      	beq.n	80052fe <HAL_TIM_ConfigClockSource+0x8c>
 80052e2:	2b70      	cmp	r3, #112	; 0x70
 80052e4:	d804      	bhi.n	80052f0 <HAL_TIM_ConfigClockSource+0x7e>
 80052e6:	2b50      	cmp	r3, #80	; 0x50
 80052e8:	d033      	beq.n	8005352 <HAL_TIM_ConfigClockSource+0xe0>
 80052ea:	2b60      	cmp	r3, #96	; 0x60
 80052ec:	d041      	beq.n	8005372 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80052ee:	e06a      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80052f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f4:	d066      	beq.n	80053c4 <HAL_TIM_ConfigClockSource+0x152>
 80052f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fa:	d017      	beq.n	800532c <HAL_TIM_ConfigClockSource+0xba>
      break;
 80052fc:	e063      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6818      	ldr	r0, [r3, #0]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685a      	ldr	r2, [r3, #4]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	f000 f981 	bl	8005614 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005320:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	609a      	str	r2, [r3, #8]
      break;
 800532a:	e04c      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6818      	ldr	r0, [r3, #0]
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	6899      	ldr	r1, [r3, #8]
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	685a      	ldr	r2, [r3, #4]
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	f000 f96a 	bl	8005614 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	689a      	ldr	r2, [r3, #8]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800534e:	609a      	str	r2, [r3, #8]
      break;
 8005350:	e039      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6818      	ldr	r0, [r3, #0]
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	68db      	ldr	r3, [r3, #12]
 800535e:	461a      	mov	r2, r3
 8005360:	f000 f8de 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	2150      	movs	r1, #80	; 0x50
 800536a:	4618      	mov	r0, r3
 800536c:	f000 f937 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005370:	e029      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6818      	ldr	r0, [r3, #0]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	6859      	ldr	r1, [r3, #4]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	461a      	mov	r2, r3
 8005380:	f000 f8fd 	bl	800557e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2160      	movs	r1, #96	; 0x60
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f927 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 8005390:	e019      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6818      	ldr	r0, [r3, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	6859      	ldr	r1, [r3, #4]
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	461a      	mov	r2, r3
 80053a0:	f000 f8be 	bl	8005520 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 f917 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 80053b0:	e009      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f000 f90e 	bl	80055de <TIM_ITRx_SetConfig>
      break;
 80053c2:	e000      	b.n	80053c6 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80053c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a40      	ldr	r2, [pc, #256]	; (80054f4 <TIM_Base_SetConfig+0x114>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d013      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fe:	d00f      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	4a3d      	ldr	r2, [pc, #244]	; (80054f8 <TIM_Base_SetConfig+0x118>)
 8005404:	4293      	cmp	r3, r2
 8005406:	d00b      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a3c      	ldr	r2, [pc, #240]	; (80054fc <TIM_Base_SetConfig+0x11c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d007      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a3b      	ldr	r2, [pc, #236]	; (8005500 <TIM_Base_SetConfig+0x120>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d003      	beq.n	8005420 <TIM_Base_SetConfig+0x40>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a3a      	ldr	r2, [pc, #232]	; (8005504 <TIM_Base_SetConfig+0x124>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d108      	bne.n	8005432 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	68fa      	ldr	r2, [r7, #12]
 800542e:	4313      	orrs	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a2f      	ldr	r2, [pc, #188]	; (80054f4 <TIM_Base_SetConfig+0x114>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d02b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005440:	d027      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a2c      	ldr	r2, [pc, #176]	; (80054f8 <TIM_Base_SetConfig+0x118>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d023      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	4a2b      	ldr	r2, [pc, #172]	; (80054fc <TIM_Base_SetConfig+0x11c>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d01f      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	4a2a      	ldr	r2, [pc, #168]	; (8005500 <TIM_Base_SetConfig+0x120>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d01b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	4a29      	ldr	r2, [pc, #164]	; (8005504 <TIM_Base_SetConfig+0x124>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d017      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a28      	ldr	r2, [pc, #160]	; (8005508 <TIM_Base_SetConfig+0x128>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d013      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a27      	ldr	r2, [pc, #156]	; (800550c <TIM_Base_SetConfig+0x12c>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d00f      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a26      	ldr	r2, [pc, #152]	; (8005510 <TIM_Base_SetConfig+0x130>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d00b      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a25      	ldr	r2, [pc, #148]	; (8005514 <TIM_Base_SetConfig+0x134>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d007      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a24      	ldr	r2, [pc, #144]	; (8005518 <TIM_Base_SetConfig+0x138>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d003      	beq.n	8005492 <TIM_Base_SetConfig+0xb2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a23      	ldr	r2, [pc, #140]	; (800551c <TIM_Base_SetConfig+0x13c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d108      	bne.n	80054a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005498:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	695b      	ldr	r3, [r3, #20]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	689a      	ldr	r2, [r3, #8]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a0a      	ldr	r2, [pc, #40]	; (80054f4 <TIM_Base_SetConfig+0x114>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d003      	beq.n	80054d8 <TIM_Base_SetConfig+0xf8>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a0c      	ldr	r2, [pc, #48]	; (8005504 <TIM_Base_SetConfig+0x124>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d103      	bne.n	80054e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	691a      	ldr	r2, [r3, #16]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	615a      	str	r2, [r3, #20]
}
 80054e6:	bf00      	nop
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40010000 	.word	0x40010000
 80054f8:	40000400 	.word	0x40000400
 80054fc:	40000800 	.word	0x40000800
 8005500:	40000c00 	.word	0x40000c00
 8005504:	40010400 	.word	0x40010400
 8005508:	40014000 	.word	0x40014000
 800550c:	40014400 	.word	0x40014400
 8005510:	40014800 	.word	0x40014800
 8005514:	40001800 	.word	0x40001800
 8005518:	40001c00 	.word	0x40001c00
 800551c:	40002000 	.word	0x40002000

08005520 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005520:	b480      	push	{r7}
 8005522:	b087      	sub	sp, #28
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6a1b      	ldr	r3, [r3, #32]
 8005536:	f023 0201 	bic.w	r2, r3, #1
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	699b      	ldr	r3, [r3, #24]
 8005542:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800554a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	011b      	lsls	r3, r3, #4
 8005550:	693a      	ldr	r2, [r7, #16]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005556:	697b      	ldr	r3, [r7, #20]
 8005558:	f023 030a 	bic.w	r3, r3, #10
 800555c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	693a      	ldr	r2, [r7, #16]
 800556a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	621a      	str	r2, [r3, #32]
}
 8005572:	bf00      	nop
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557e:	b480      	push	{r7}
 8005580:	b087      	sub	sp, #28
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a1b      	ldr	r3, [r3, #32]
 800558e:	f023 0210 	bic.w	r2, r3, #16
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a1b      	ldr	r3, [r3, #32]
 80055a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	031b      	lsls	r3, r3, #12
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055ba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	697a      	ldr	r2, [r7, #20]
 80055ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	693a      	ldr	r2, [r7, #16]
 80055d0:	621a      	str	r2, [r3, #32]
}
 80055d2:	bf00      	nop
 80055d4:	371c      	adds	r7, #28
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80055de:	b480      	push	{r7}
 80055e0:	b085      	sub	sp, #20
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
 80055e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80055f6:	683a      	ldr	r2, [r7, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f043 0307 	orr.w	r3, r3, #7
 8005600:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	609a      	str	r2, [r3, #8]
}
 8005608:	bf00      	nop
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005614:	b480      	push	{r7}
 8005616:	b087      	sub	sp, #28
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800562e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	021a      	lsls	r2, r3, #8
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	431a      	orrs	r2, r3
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	609a      	str	r2, [r3, #8]
}
 8005648:	bf00      	nop
 800564a:	371c      	adds	r7, #28
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr

08005654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005664:	2b01      	cmp	r3, #1
 8005666:	d101      	bne.n	800566c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005668:	2302      	movs	r3, #2
 800566a:	e05a      	b.n	8005722 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2202      	movs	r2, #2
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a21      	ldr	r2, [pc, #132]	; (8005730 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d022      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b8:	d01d      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a1d      	ldr	r2, [pc, #116]	; (8005734 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d018      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1b      	ldr	r2, [pc, #108]	; (8005738 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d013      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	4a1a      	ldr	r2, [pc, #104]	; (800573c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d00e      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a18      	ldr	r2, [pc, #96]	; (8005740 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d009      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a17      	ldr	r2, [pc, #92]	; (8005744 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d004      	beq.n	80056f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a15      	ldr	r2, [pc, #84]	; (8005748 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d10c      	bne.n	8005710 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	68ba      	ldr	r2, [r7, #8]
 8005704:	4313      	orrs	r3, r2
 8005706:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	40010000 	.word	0x40010000
 8005734:	40000400 	.word	0x40000400
 8005738:	40000800 	.word	0x40000800
 800573c:	40000c00 	.word	0x40000c00
 8005740:	40010400 	.word	0x40010400
 8005744:	40014000 	.word	0x40014000
 8005748:	40001800 	.word	0x40001800

0800574c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	e03f      	b.n	80057de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005764:	b2db      	uxtb	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2200      	movs	r2, #0
 800576e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f7fc faba 	bl	8001cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2224      	movs	r2, #36	; 0x24
 800577c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68da      	ldr	r2, [r3, #12]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800578e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f000 fc2d 	bl	8005ff0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2220      	movs	r2, #32
 80057d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2220      	movs	r2, #32
 80057d8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
	...

080057e8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b086      	sub	sp, #24
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	60f8      	str	r0, [r7, #12]
 80057f0:	60b9      	str	r1, [r7, #8]
 80057f2:	4613      	mov	r3, r2
 80057f4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b20      	cmp	r3, #32
 8005800:	d153      	bne.n	80058aa <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <HAL_UART_Transmit_DMA+0x26>
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d101      	bne.n	8005812 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800580e:	2301      	movs	r3, #1
 8005810:	e04c      	b.n	80058ac <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005818:	2b01      	cmp	r3, #1
 800581a:	d101      	bne.n	8005820 <HAL_UART_Transmit_DMA+0x38>
 800581c:	2302      	movs	r3, #2
 800581e:	e045      	b.n	80058ac <HAL_UART_Transmit_DMA+0xc4>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005828:	68ba      	ldr	r2, [r7, #8]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	88fa      	ldrh	r2, [r7, #6]
 8005832:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	88fa      	ldrh	r2, [r7, #6]
 8005838:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2221      	movs	r2, #33	; 0x21
 8005844:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800584c:	4a19      	ldr	r2, [pc, #100]	; (80058b4 <HAL_UART_Transmit_DMA+0xcc>)
 800584e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005854:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <HAL_UART_Transmit_DMA+0xd0>)
 8005856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800585c:	4a17      	ldr	r2, [pc, #92]	; (80058bc <HAL_UART_Transmit_DMA+0xd4>)
 800585e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005864:	2200      	movs	r2, #0
 8005866:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005868:	f107 0308 	add.w	r3, r7, #8
 800586c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	6819      	ldr	r1, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	3304      	adds	r3, #4
 800587c:	461a      	mov	r2, r3
 800587e:	88fb      	ldrh	r3, [r7, #6]
 8005880:	f7fd f884 	bl	800298c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800588c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80058a4:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e000      	b.n	80058ac <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 80058aa:	2302      	movs	r3, #2
  }
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	08005bfd 	.word	0x08005bfd
 80058b8:	08005c4f 	.word	0x08005c4f
 80058bc:	08005cef 	.word	0x08005cef

080058c0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b086      	sub	sp, #24
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	2b20      	cmp	r3, #32
 80058d8:	d166      	bne.n	80059a8 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d002      	beq.n	80058e6 <HAL_UART_Receive_DMA+0x26>
 80058e0:	88fb      	ldrh	r3, [r7, #6]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d101      	bne.n	80058ea <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e05f      	b.n	80059aa <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Receive_DMA+0x38>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e058      	b.n	80059aa <HAL_UART_Receive_DMA+0xea>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005900:	68ba      	ldr	r2, [r7, #8]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	88fa      	ldrh	r2, [r7, #6]
 800590a:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2222      	movs	r2, #34	; 0x22
 8005916:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591e:	4a25      	ldr	r2, [pc, #148]	; (80059b4 <HAL_UART_Receive_DMA+0xf4>)
 8005920:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005926:	4a24      	ldr	r2, [pc, #144]	; (80059b8 <HAL_UART_Receive_DMA+0xf8>)
 8005928:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592e:	4a23      	ldr	r2, [pc, #140]	; (80059bc <HAL_UART_Receive_DMA+0xfc>)
 8005930:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005936:	2200      	movs	r2, #0
 8005938:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800593a:	f107 0308 	add.w	r3, r7, #8
 800593e:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3304      	adds	r3, #4
 800594a:	4619      	mov	r1, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	f7fd f81b 	bl	800298c <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	613b      	str	r3, [r7, #16]
 800596a:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68da      	ldr	r2, [r3, #12]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005982:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	695a      	ldr	r2, [r3, #20]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f042 0201 	orr.w	r2, r2, #1
 8005992:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695a      	ldr	r2, [r3, #20]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059a2:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	08005c6b 	.word	0x08005c6b
 80059b8:	08005cd3 	.word	0x08005cd3
 80059bc:	08005cef 	.word	0x08005cef

080059c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b088      	sub	sp, #32
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80059e0:	2300      	movs	r3, #0
 80059e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80059e4:	2300      	movs	r3, #0
 80059e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10d      	bne.n	8005a12 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d008      	beq.n	8005a12 <HAL_UART_IRQHandler+0x52>
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa6f 	bl	8005eee <UART_Receive_IT>
      return;
 8005a10:	e0d1      	b.n	8005bb6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 80b0 	beq.w	8005b7a <HAL_UART_IRQHandler+0x1ba>
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d105      	bne.n	8005a30 <HAL_UART_IRQHandler+0x70>
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	f000 80a5 	beq.w	8005b7a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00a      	beq.n	8005a50 <HAL_UART_IRQHandler+0x90>
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a48:	f043 0201 	orr.w	r2, r3, #1
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	f003 0304 	and.w	r3, r3, #4
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_UART_IRQHandler+0xb0>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d005      	beq.n	8005a70 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a68:	f043 0202 	orr.w	r2, r3, #2
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d00a      	beq.n	8005a90 <HAL_UART_IRQHandler+0xd0>
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f003 0301 	and.w	r3, r3, #1
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d005      	beq.n	8005a90 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a88:	f043 0204 	orr.w	r2, r3, #4
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00f      	beq.n	8005aba <HAL_UART_IRQHandler+0xfa>
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	f003 0320 	and.w	r3, r3, #32
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d104      	bne.n	8005aae <HAL_UART_IRQHandler+0xee>
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	f003 0301 	and.w	r3, r3, #1
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d005      	beq.n	8005aba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	f043 0208 	orr.w	r2, r3, #8
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d078      	beq.n	8005bb4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d007      	beq.n	8005adc <HAL_UART_IRQHandler+0x11c>
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	f003 0320 	and.w	r3, r3, #32
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 fa09 	bl	8005eee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ae6:	2b40      	cmp	r3, #64	; 0x40
 8005ae8:	bf0c      	ite	eq
 8005aea:	2301      	moveq	r3, #1
 8005aec:	2300      	movne	r3, #0
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d102      	bne.n	8005b04 <HAL_UART_IRQHandler+0x144>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d031      	beq.n	8005b68 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	f000 f952 	bl	8005dae <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	695b      	ldr	r3, [r3, #20]
 8005b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	d123      	bne.n	8005b60 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b26:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d013      	beq.n	8005b58 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b34:	4a21      	ldr	r2, [pc, #132]	; (8005bbc <HAL_UART_IRQHandler+0x1fc>)
 8005b36:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	f7fc ff7d 	bl	8002a3c <HAL_DMA_Abort_IT>
 8005b42:	4603      	mov	r3, r0
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d016      	beq.n	8005b76 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b52:	4610      	mov	r0, r2
 8005b54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b56:	e00e      	b.n	8005b76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b58:	6878      	ldr	r0, [r7, #4]
 8005b5a:	f000 f845 	bl	8005be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b5e:	e00a      	b.n	8005b76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f841 	bl	8005be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b66:	e006      	b.n	8005b76 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f83d 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005b74:	e01e      	b.n	8005bb4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b76:	bf00      	nop
    return;
 8005b78:	e01c      	b.n	8005bb4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d008      	beq.n	8005b96 <HAL_UART_IRQHandler+0x1d6>
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 f93f 	bl	8005e12 <UART_Transmit_IT>
    return;
 8005b94:	e00f      	b.n	8005bb6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d00a      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x1f6>
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 f987 	bl	8005ebe <UART_EndTransmit_IT>
    return;
 8005bb0:	bf00      	nop
 8005bb2:	e000      	b.n	8005bb6 <HAL_UART_IRQHandler+0x1f6>
    return;
 8005bb4:	bf00      	nop
  }
}
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	08005deb 	.word	0x08005deb

08005bc0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c08:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d113      	bne.n	8005c40 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	695a      	ldr	r2, [r3, #20]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c2c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	68da      	ldr	r2, [r3, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c3c:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005c3e:	e002      	b.n	8005c46 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7fb fd63 	bl	800170c <HAL_UART_TxCpltCallback>
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005c5c:	68f8      	ldr	r0, [r7, #12]
 8005c5e:	f7ff ffaf 	bl	8005bc0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c62:	bf00      	nop
 8005c64:	3710      	adds	r7, #16
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}

08005c6a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b084      	sub	sp, #16
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c76:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d11e      	bne.n	8005cc4 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68da      	ldr	r2, [r3, #12]
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c9a:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	695a      	ldr	r2, [r3, #20]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	695a      	ldr	r2, [r3, #20]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cba:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005cc4:	68f8      	ldr	r0, [r7, #12]
 8005cc6:	f7fb fd0f 	bl	80016e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cca:	bf00      	nop
 8005ccc:	3710      	adds	r7, #16
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd80      	pop	{r7, pc}

08005cd2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	b084      	sub	sp, #16
 8005cd6:	af00      	add	r7, sp, #0
 8005cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f7ff ff77 	bl	8005bd4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ce6:	bf00      	nop
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005cee:	b580      	push	{r7, lr}
 8005cf0:	b084      	sub	sp, #16
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cfe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d0a:	2b80      	cmp	r3, #128	; 0x80
 8005d0c:	bf0c      	ite	eq
 8005d0e:	2301      	moveq	r3, #1
 8005d10:	2300      	movne	r3, #0
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b21      	cmp	r3, #33	; 0x21
 8005d20:	d108      	bne.n	8005d34 <UART_DMAError+0x46>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d005      	beq.n	8005d34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005d2e:	68b8      	ldr	r0, [r7, #8]
 8005d30:	f000 f827 	bl	8005d82 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	695b      	ldr	r3, [r3, #20]
 8005d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d3e:	2b40      	cmp	r3, #64	; 0x40
 8005d40:	bf0c      	ite	eq
 8005d42:	2301      	moveq	r3, #1
 8005d44:	2300      	movne	r3, #0
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b22      	cmp	r3, #34	; 0x22
 8005d54:	d108      	bne.n	8005d68 <UART_DMAError+0x7a>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d005      	beq.n	8005d68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005d62:	68b8      	ldr	r0, [r7, #8]
 8005d64:	f000 f823 	bl	8005dae <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6c:	f043 0210 	orr.w	r2, r3, #16
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d74:	68b8      	ldr	r0, [r7, #8]
 8005d76:	f7ff ff37 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d7a:	bf00      	nop
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d82:	b480      	push	{r7}
 8005d84:	b083      	sub	sp, #12
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005d98:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr

08005dae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005dae:	b480      	push	{r7}
 8005db0:	b083      	sub	sp, #12
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	68da      	ldr	r2, [r3, #12]
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005dc4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	695a      	ldr	r2, [r3, #20]
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f022 0201 	bic.w	r2, r2, #1
 8005dd4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005dde:	bf00      	nop
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr

08005dea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b084      	sub	sp, #16
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e04:	68f8      	ldr	r0, [r7, #12]
 8005e06:	f7ff feef 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e12:	b480      	push	{r7}
 8005e14:	b085      	sub	sp, #20
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b21      	cmp	r3, #33	; 0x21
 8005e24:	d144      	bne.n	8005eb0 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	689b      	ldr	r3, [r3, #8]
 8005e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e2e:	d11a      	bne.n	8005e66 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6a1b      	ldr	r3, [r3, #32]
 8005e34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	881b      	ldrh	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e44:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d105      	bne.n	8005e5a <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	1c9a      	adds	r2, r3, #2
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	621a      	str	r2, [r3, #32]
 8005e58:	e00e      	b.n	8005e78 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a1b      	ldr	r3, [r3, #32]
 8005e5e:	1c5a      	adds	r2, r3, #1
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	621a      	str	r2, [r3, #32]
 8005e64:	e008      	b.n	8005e78 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	1c59      	adds	r1, r3, #1
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6211      	str	r1, [r2, #32]
 8005e70:	781a      	ldrb	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	687a      	ldr	r2, [r7, #4]
 8005e84:	4619      	mov	r1, r3
 8005e86:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d10f      	bne.n	8005eac <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68da      	ldr	r2, [r3, #12]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e9a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eaa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr

08005ebe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ebe:	b580      	push	{r7, lr}
 8005ec0:	b082      	sub	sp, #8
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68da      	ldr	r2, [r3, #12]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7fb fc14 	bl	800170c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3708      	adds	r7, #8
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b22      	cmp	r3, #34	; 0x22
 8005f00:	d171      	bne.n	8005fe6 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	689b      	ldr	r3, [r3, #8]
 8005f06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0a:	d123      	bne.n	8005f54 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f10:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10e      	bne.n	8005f38 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f30:	1c9a      	adds	r2, r3, #2
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	629a      	str	r2, [r3, #40]	; 0x28
 8005f36:	e029      	b.n	8005f8c <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
 8005f52:	e01b      	b.n	8005f8c <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d10a      	bne.n	8005f72 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6858      	ldr	r0, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	1c59      	adds	r1, r3, #1
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	6291      	str	r1, [r2, #40]	; 0x28
 8005f6c:	b2c2      	uxtb	r2, r0
 8005f6e:	701a      	strb	r2, [r3, #0]
 8005f70:	e00c      	b.n	8005f8c <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	b2da      	uxtb	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7e:	1c58      	adds	r0, r3, #1
 8005f80:	6879      	ldr	r1, [r7, #4]
 8005f82:	6288      	str	r0, [r1, #40]	; 0x28
 8005f84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f88:	b2d2      	uxtb	r2, r2
 8005f8a:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	3b01      	subs	r3, #1
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	687a      	ldr	r2, [r7, #4]
 8005f98:	4619      	mov	r1, r3
 8005f9a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d120      	bne.n	8005fe2 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f022 0220 	bic.w	r2, r2, #32
 8005fae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fbe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0201 	bic.w	r2, r2, #1
 8005fce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2220      	movs	r2, #32
 8005fd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fb fb85 	bl	80016e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005fde:	2300      	movs	r3, #0
 8005fe0:	e002      	b.n	8005fe8 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	e000      	b.n	8005fe8 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005fe6:	2302      	movs	r3, #2
  }
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	b085      	sub	sp, #20
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	430a      	orrs	r2, r1
 800600e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	689a      	ldr	r2, [r3, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	691b      	ldr	r3, [r3, #16]
 8006018:	431a      	orrs	r2, r3
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	695b      	ldr	r3, [r3, #20]
 800601e:	431a      	orrs	r2, r3
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	69db      	ldr	r3, [r3, #28]
 8006024:	4313      	orrs	r3, r2
 8006026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006032:	f023 030c 	bic.w	r3, r3, #12
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	68f9      	ldr	r1, [r7, #12]
 800603c:	430b      	orrs	r3, r1
 800603e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699a      	ldr	r2, [r3, #24]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	430a      	orrs	r2, r1
 8006054:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	69db      	ldr	r3, [r3, #28]
 800605a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800605e:	f040 818b 	bne.w	8006378 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4ac1      	ldr	r2, [pc, #772]	; (800636c <UART_SetConfig+0x37c>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d005      	beq.n	8006078 <UART_SetConfig+0x88>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4abf      	ldr	r2, [pc, #764]	; (8006370 <UART_SetConfig+0x380>)
 8006072:	4293      	cmp	r3, r2
 8006074:	f040 80bd 	bne.w	80061f2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006078:	f7ff f898 	bl	80051ac <HAL_RCC_GetPCLK2Freq>
 800607c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	461d      	mov	r5, r3
 8006082:	f04f 0600 	mov.w	r6, #0
 8006086:	46a8      	mov	r8, r5
 8006088:	46b1      	mov	r9, r6
 800608a:	eb18 0308 	adds.w	r3, r8, r8
 800608e:	eb49 0409 	adc.w	r4, r9, r9
 8006092:	4698      	mov	r8, r3
 8006094:	46a1      	mov	r9, r4
 8006096:	eb18 0805 	adds.w	r8, r8, r5
 800609a:	eb49 0906 	adc.w	r9, r9, r6
 800609e:	f04f 0100 	mov.w	r1, #0
 80060a2:	f04f 0200 	mov.w	r2, #0
 80060a6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80060aa:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060ae:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060b2:	4688      	mov	r8, r1
 80060b4:	4691      	mov	r9, r2
 80060b6:	eb18 0005 	adds.w	r0, r8, r5
 80060ba:	eb49 0106 	adc.w	r1, r9, r6
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	461d      	mov	r5, r3
 80060c4:	f04f 0600 	mov.w	r6, #0
 80060c8:	196b      	adds	r3, r5, r5
 80060ca:	eb46 0406 	adc.w	r4, r6, r6
 80060ce:	461a      	mov	r2, r3
 80060d0:	4623      	mov	r3, r4
 80060d2:	f7fa fd83 	bl	8000bdc <__aeabi_uldivmod>
 80060d6:	4603      	mov	r3, r0
 80060d8:	460c      	mov	r4, r1
 80060da:	461a      	mov	r2, r3
 80060dc:	4ba5      	ldr	r3, [pc, #660]	; (8006374 <UART_SetConfig+0x384>)
 80060de:	fba3 2302 	umull	r2, r3, r3, r2
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	461d      	mov	r5, r3
 80060ec:	f04f 0600 	mov.w	r6, #0
 80060f0:	46a9      	mov	r9, r5
 80060f2:	46b2      	mov	sl, r6
 80060f4:	eb19 0309 	adds.w	r3, r9, r9
 80060f8:	eb4a 040a 	adc.w	r4, sl, sl
 80060fc:	4699      	mov	r9, r3
 80060fe:	46a2      	mov	sl, r4
 8006100:	eb19 0905 	adds.w	r9, r9, r5
 8006104:	eb4a 0a06 	adc.w	sl, sl, r6
 8006108:	f04f 0100 	mov.w	r1, #0
 800610c:	f04f 0200 	mov.w	r2, #0
 8006110:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006114:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006118:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800611c:	4689      	mov	r9, r1
 800611e:	4692      	mov	sl, r2
 8006120:	eb19 0005 	adds.w	r0, r9, r5
 8006124:	eb4a 0106 	adc.w	r1, sl, r6
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	461d      	mov	r5, r3
 800612e:	f04f 0600 	mov.w	r6, #0
 8006132:	196b      	adds	r3, r5, r5
 8006134:	eb46 0406 	adc.w	r4, r6, r6
 8006138:	461a      	mov	r2, r3
 800613a:	4623      	mov	r3, r4
 800613c:	f7fa fd4e 	bl	8000bdc <__aeabi_uldivmod>
 8006140:	4603      	mov	r3, r0
 8006142:	460c      	mov	r4, r1
 8006144:	461a      	mov	r2, r3
 8006146:	4b8b      	ldr	r3, [pc, #556]	; (8006374 <UART_SetConfig+0x384>)
 8006148:	fba3 1302 	umull	r1, r3, r3, r2
 800614c:	095b      	lsrs	r3, r3, #5
 800614e:	2164      	movs	r1, #100	; 0x64
 8006150:	fb01 f303 	mul.w	r3, r1, r3
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	3332      	adds	r3, #50	; 0x32
 800615a:	4a86      	ldr	r2, [pc, #536]	; (8006374 <UART_SetConfig+0x384>)
 800615c:	fba2 2303 	umull	r2, r3, r2, r3
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	005b      	lsls	r3, r3, #1
 8006164:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006168:	4498      	add	r8, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	461d      	mov	r5, r3
 800616e:	f04f 0600 	mov.w	r6, #0
 8006172:	46a9      	mov	r9, r5
 8006174:	46b2      	mov	sl, r6
 8006176:	eb19 0309 	adds.w	r3, r9, r9
 800617a:	eb4a 040a 	adc.w	r4, sl, sl
 800617e:	4699      	mov	r9, r3
 8006180:	46a2      	mov	sl, r4
 8006182:	eb19 0905 	adds.w	r9, r9, r5
 8006186:	eb4a 0a06 	adc.w	sl, sl, r6
 800618a:	f04f 0100 	mov.w	r1, #0
 800618e:	f04f 0200 	mov.w	r2, #0
 8006192:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006196:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800619a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800619e:	4689      	mov	r9, r1
 80061a0:	4692      	mov	sl, r2
 80061a2:	eb19 0005 	adds.w	r0, r9, r5
 80061a6:	eb4a 0106 	adc.w	r1, sl, r6
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	461d      	mov	r5, r3
 80061b0:	f04f 0600 	mov.w	r6, #0
 80061b4:	196b      	adds	r3, r5, r5
 80061b6:	eb46 0406 	adc.w	r4, r6, r6
 80061ba:	461a      	mov	r2, r3
 80061bc:	4623      	mov	r3, r4
 80061be:	f7fa fd0d 	bl	8000bdc <__aeabi_uldivmod>
 80061c2:	4603      	mov	r3, r0
 80061c4:	460c      	mov	r4, r1
 80061c6:	461a      	mov	r2, r3
 80061c8:	4b6a      	ldr	r3, [pc, #424]	; (8006374 <UART_SetConfig+0x384>)
 80061ca:	fba3 1302 	umull	r1, r3, r3, r2
 80061ce:	095b      	lsrs	r3, r3, #5
 80061d0:	2164      	movs	r1, #100	; 0x64
 80061d2:	fb01 f303 	mul.w	r3, r1, r3
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	3332      	adds	r3, #50	; 0x32
 80061dc:	4a65      	ldr	r2, [pc, #404]	; (8006374 <UART_SetConfig+0x384>)
 80061de:	fba2 2303 	umull	r2, r3, r2, r3
 80061e2:	095b      	lsrs	r3, r3, #5
 80061e4:	f003 0207 	and.w	r2, r3, #7
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4442      	add	r2, r8
 80061ee:	609a      	str	r2, [r3, #8]
 80061f0:	e26f      	b.n	80066d2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80061f2:	f7fe ffc7 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 80061f6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	461d      	mov	r5, r3
 80061fc:	f04f 0600 	mov.w	r6, #0
 8006200:	46a8      	mov	r8, r5
 8006202:	46b1      	mov	r9, r6
 8006204:	eb18 0308 	adds.w	r3, r8, r8
 8006208:	eb49 0409 	adc.w	r4, r9, r9
 800620c:	4698      	mov	r8, r3
 800620e:	46a1      	mov	r9, r4
 8006210:	eb18 0805 	adds.w	r8, r8, r5
 8006214:	eb49 0906 	adc.w	r9, r9, r6
 8006218:	f04f 0100 	mov.w	r1, #0
 800621c:	f04f 0200 	mov.w	r2, #0
 8006220:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006224:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006228:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800622c:	4688      	mov	r8, r1
 800622e:	4691      	mov	r9, r2
 8006230:	eb18 0005 	adds.w	r0, r8, r5
 8006234:	eb49 0106 	adc.w	r1, r9, r6
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	461d      	mov	r5, r3
 800623e:	f04f 0600 	mov.w	r6, #0
 8006242:	196b      	adds	r3, r5, r5
 8006244:	eb46 0406 	adc.w	r4, r6, r6
 8006248:	461a      	mov	r2, r3
 800624a:	4623      	mov	r3, r4
 800624c:	f7fa fcc6 	bl	8000bdc <__aeabi_uldivmod>
 8006250:	4603      	mov	r3, r0
 8006252:	460c      	mov	r4, r1
 8006254:	461a      	mov	r2, r3
 8006256:	4b47      	ldr	r3, [pc, #284]	; (8006374 <UART_SetConfig+0x384>)
 8006258:	fba3 2302 	umull	r2, r3, r3, r2
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	461d      	mov	r5, r3
 8006266:	f04f 0600 	mov.w	r6, #0
 800626a:	46a9      	mov	r9, r5
 800626c:	46b2      	mov	sl, r6
 800626e:	eb19 0309 	adds.w	r3, r9, r9
 8006272:	eb4a 040a 	adc.w	r4, sl, sl
 8006276:	4699      	mov	r9, r3
 8006278:	46a2      	mov	sl, r4
 800627a:	eb19 0905 	adds.w	r9, r9, r5
 800627e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006282:	f04f 0100 	mov.w	r1, #0
 8006286:	f04f 0200 	mov.w	r2, #0
 800628a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800628e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006292:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006296:	4689      	mov	r9, r1
 8006298:	4692      	mov	sl, r2
 800629a:	eb19 0005 	adds.w	r0, r9, r5
 800629e:	eb4a 0106 	adc.w	r1, sl, r6
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	461d      	mov	r5, r3
 80062a8:	f04f 0600 	mov.w	r6, #0
 80062ac:	196b      	adds	r3, r5, r5
 80062ae:	eb46 0406 	adc.w	r4, r6, r6
 80062b2:	461a      	mov	r2, r3
 80062b4:	4623      	mov	r3, r4
 80062b6:	f7fa fc91 	bl	8000bdc <__aeabi_uldivmod>
 80062ba:	4603      	mov	r3, r0
 80062bc:	460c      	mov	r4, r1
 80062be:	461a      	mov	r2, r3
 80062c0:	4b2c      	ldr	r3, [pc, #176]	; (8006374 <UART_SetConfig+0x384>)
 80062c2:	fba3 1302 	umull	r1, r3, r3, r2
 80062c6:	095b      	lsrs	r3, r3, #5
 80062c8:	2164      	movs	r1, #100	; 0x64
 80062ca:	fb01 f303 	mul.w	r3, r1, r3
 80062ce:	1ad3      	subs	r3, r2, r3
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	3332      	adds	r3, #50	; 0x32
 80062d4:	4a27      	ldr	r2, [pc, #156]	; (8006374 <UART_SetConfig+0x384>)
 80062d6:	fba2 2303 	umull	r2, r3, r2, r3
 80062da:	095b      	lsrs	r3, r3, #5
 80062dc:	005b      	lsls	r3, r3, #1
 80062de:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062e2:	4498      	add	r8, r3
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	461d      	mov	r5, r3
 80062e8:	f04f 0600 	mov.w	r6, #0
 80062ec:	46a9      	mov	r9, r5
 80062ee:	46b2      	mov	sl, r6
 80062f0:	eb19 0309 	adds.w	r3, r9, r9
 80062f4:	eb4a 040a 	adc.w	r4, sl, sl
 80062f8:	4699      	mov	r9, r3
 80062fa:	46a2      	mov	sl, r4
 80062fc:	eb19 0905 	adds.w	r9, r9, r5
 8006300:	eb4a 0a06 	adc.w	sl, sl, r6
 8006304:	f04f 0100 	mov.w	r1, #0
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006310:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006314:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006318:	4689      	mov	r9, r1
 800631a:	4692      	mov	sl, r2
 800631c:	eb19 0005 	adds.w	r0, r9, r5
 8006320:	eb4a 0106 	adc.w	r1, sl, r6
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	461d      	mov	r5, r3
 800632a:	f04f 0600 	mov.w	r6, #0
 800632e:	196b      	adds	r3, r5, r5
 8006330:	eb46 0406 	adc.w	r4, r6, r6
 8006334:	461a      	mov	r2, r3
 8006336:	4623      	mov	r3, r4
 8006338:	f7fa fc50 	bl	8000bdc <__aeabi_uldivmod>
 800633c:	4603      	mov	r3, r0
 800633e:	460c      	mov	r4, r1
 8006340:	461a      	mov	r2, r3
 8006342:	4b0c      	ldr	r3, [pc, #48]	; (8006374 <UART_SetConfig+0x384>)
 8006344:	fba3 1302 	umull	r1, r3, r3, r2
 8006348:	095b      	lsrs	r3, r3, #5
 800634a:	2164      	movs	r1, #100	; 0x64
 800634c:	fb01 f303 	mul.w	r3, r1, r3
 8006350:	1ad3      	subs	r3, r2, r3
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	3332      	adds	r3, #50	; 0x32
 8006356:	4a07      	ldr	r2, [pc, #28]	; (8006374 <UART_SetConfig+0x384>)
 8006358:	fba2 2303 	umull	r2, r3, r2, r3
 800635c:	095b      	lsrs	r3, r3, #5
 800635e:	f003 0207 	and.w	r2, r3, #7
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4442      	add	r2, r8
 8006368:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800636a:	e1b2      	b.n	80066d2 <UART_SetConfig+0x6e2>
 800636c:	40011000 	.word	0x40011000
 8006370:	40011400 	.word	0x40011400
 8006374:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4ad7      	ldr	r2, [pc, #860]	; (80066dc <UART_SetConfig+0x6ec>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d005      	beq.n	800638e <UART_SetConfig+0x39e>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4ad6      	ldr	r2, [pc, #856]	; (80066e0 <UART_SetConfig+0x6f0>)
 8006388:	4293      	cmp	r3, r2
 800638a:	f040 80d1 	bne.w	8006530 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800638e:	f7fe ff0d 	bl	80051ac <HAL_RCC_GetPCLK2Freq>
 8006392:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	469a      	mov	sl, r3
 8006398:	f04f 0b00 	mov.w	fp, #0
 800639c:	46d0      	mov	r8, sl
 800639e:	46d9      	mov	r9, fp
 80063a0:	eb18 0308 	adds.w	r3, r8, r8
 80063a4:	eb49 0409 	adc.w	r4, r9, r9
 80063a8:	4698      	mov	r8, r3
 80063aa:	46a1      	mov	r9, r4
 80063ac:	eb18 080a 	adds.w	r8, r8, sl
 80063b0:	eb49 090b 	adc.w	r9, r9, fp
 80063b4:	f04f 0100 	mov.w	r1, #0
 80063b8:	f04f 0200 	mov.w	r2, #0
 80063bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80063c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80063c8:	4688      	mov	r8, r1
 80063ca:	4691      	mov	r9, r2
 80063cc:	eb1a 0508 	adds.w	r5, sl, r8
 80063d0:	eb4b 0609 	adc.w	r6, fp, r9
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4619      	mov	r1, r3
 80063da:	f04f 0200 	mov.w	r2, #0
 80063de:	f04f 0300 	mov.w	r3, #0
 80063e2:	f04f 0400 	mov.w	r4, #0
 80063e6:	0094      	lsls	r4, r2, #2
 80063e8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80063ec:	008b      	lsls	r3, r1, #2
 80063ee:	461a      	mov	r2, r3
 80063f0:	4623      	mov	r3, r4
 80063f2:	4628      	mov	r0, r5
 80063f4:	4631      	mov	r1, r6
 80063f6:	f7fa fbf1 	bl	8000bdc <__aeabi_uldivmod>
 80063fa:	4603      	mov	r3, r0
 80063fc:	460c      	mov	r4, r1
 80063fe:	461a      	mov	r2, r3
 8006400:	4bb8      	ldr	r3, [pc, #736]	; (80066e4 <UART_SetConfig+0x6f4>)
 8006402:	fba3 2302 	umull	r2, r3, r3, r2
 8006406:	095b      	lsrs	r3, r3, #5
 8006408:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	469b      	mov	fp, r3
 8006410:	f04f 0c00 	mov.w	ip, #0
 8006414:	46d9      	mov	r9, fp
 8006416:	46e2      	mov	sl, ip
 8006418:	eb19 0309 	adds.w	r3, r9, r9
 800641c:	eb4a 040a 	adc.w	r4, sl, sl
 8006420:	4699      	mov	r9, r3
 8006422:	46a2      	mov	sl, r4
 8006424:	eb19 090b 	adds.w	r9, r9, fp
 8006428:	eb4a 0a0c 	adc.w	sl, sl, ip
 800642c:	f04f 0100 	mov.w	r1, #0
 8006430:	f04f 0200 	mov.w	r2, #0
 8006434:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006438:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800643c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006440:	4689      	mov	r9, r1
 8006442:	4692      	mov	sl, r2
 8006444:	eb1b 0509 	adds.w	r5, fp, r9
 8006448:	eb4c 060a 	adc.w	r6, ip, sl
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4619      	mov	r1, r3
 8006452:	f04f 0200 	mov.w	r2, #0
 8006456:	f04f 0300 	mov.w	r3, #0
 800645a:	f04f 0400 	mov.w	r4, #0
 800645e:	0094      	lsls	r4, r2, #2
 8006460:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006464:	008b      	lsls	r3, r1, #2
 8006466:	461a      	mov	r2, r3
 8006468:	4623      	mov	r3, r4
 800646a:	4628      	mov	r0, r5
 800646c:	4631      	mov	r1, r6
 800646e:	f7fa fbb5 	bl	8000bdc <__aeabi_uldivmod>
 8006472:	4603      	mov	r3, r0
 8006474:	460c      	mov	r4, r1
 8006476:	461a      	mov	r2, r3
 8006478:	4b9a      	ldr	r3, [pc, #616]	; (80066e4 <UART_SetConfig+0x6f4>)
 800647a:	fba3 1302 	umull	r1, r3, r3, r2
 800647e:	095b      	lsrs	r3, r3, #5
 8006480:	2164      	movs	r1, #100	; 0x64
 8006482:	fb01 f303 	mul.w	r3, r1, r3
 8006486:	1ad3      	subs	r3, r2, r3
 8006488:	011b      	lsls	r3, r3, #4
 800648a:	3332      	adds	r3, #50	; 0x32
 800648c:	4a95      	ldr	r2, [pc, #596]	; (80066e4 <UART_SetConfig+0x6f4>)
 800648e:	fba2 2303 	umull	r2, r3, r2, r3
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006498:	4498      	add	r8, r3
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	469b      	mov	fp, r3
 800649e:	f04f 0c00 	mov.w	ip, #0
 80064a2:	46d9      	mov	r9, fp
 80064a4:	46e2      	mov	sl, ip
 80064a6:	eb19 0309 	adds.w	r3, r9, r9
 80064aa:	eb4a 040a 	adc.w	r4, sl, sl
 80064ae:	4699      	mov	r9, r3
 80064b0:	46a2      	mov	sl, r4
 80064b2:	eb19 090b 	adds.w	r9, r9, fp
 80064b6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80064ba:	f04f 0100 	mov.w	r1, #0
 80064be:	f04f 0200 	mov.w	r2, #0
 80064c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064ce:	4689      	mov	r9, r1
 80064d0:	4692      	mov	sl, r2
 80064d2:	eb1b 0509 	adds.w	r5, fp, r9
 80064d6:	eb4c 060a 	adc.w	r6, ip, sl
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	4619      	mov	r1, r3
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	f04f 0400 	mov.w	r4, #0
 80064ec:	0094      	lsls	r4, r2, #2
 80064ee:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80064f2:	008b      	lsls	r3, r1, #2
 80064f4:	461a      	mov	r2, r3
 80064f6:	4623      	mov	r3, r4
 80064f8:	4628      	mov	r0, r5
 80064fa:	4631      	mov	r1, r6
 80064fc:	f7fa fb6e 	bl	8000bdc <__aeabi_uldivmod>
 8006500:	4603      	mov	r3, r0
 8006502:	460c      	mov	r4, r1
 8006504:	461a      	mov	r2, r3
 8006506:	4b77      	ldr	r3, [pc, #476]	; (80066e4 <UART_SetConfig+0x6f4>)
 8006508:	fba3 1302 	umull	r1, r3, r3, r2
 800650c:	095b      	lsrs	r3, r3, #5
 800650e:	2164      	movs	r1, #100	; 0x64
 8006510:	fb01 f303 	mul.w	r3, r1, r3
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	3332      	adds	r3, #50	; 0x32
 800651a:	4a72      	ldr	r2, [pc, #456]	; (80066e4 <UART_SetConfig+0x6f4>)
 800651c:	fba2 2303 	umull	r2, r3, r2, r3
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	f003 020f 	and.w	r2, r3, #15
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4442      	add	r2, r8
 800652c:	609a      	str	r2, [r3, #8]
 800652e:	e0d0      	b.n	80066d2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006530:	f7fe fe28 	bl	8005184 <HAL_RCC_GetPCLK1Freq>
 8006534:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	469a      	mov	sl, r3
 800653a:	f04f 0b00 	mov.w	fp, #0
 800653e:	46d0      	mov	r8, sl
 8006540:	46d9      	mov	r9, fp
 8006542:	eb18 0308 	adds.w	r3, r8, r8
 8006546:	eb49 0409 	adc.w	r4, r9, r9
 800654a:	4698      	mov	r8, r3
 800654c:	46a1      	mov	r9, r4
 800654e:	eb18 080a 	adds.w	r8, r8, sl
 8006552:	eb49 090b 	adc.w	r9, r9, fp
 8006556:	f04f 0100 	mov.w	r1, #0
 800655a:	f04f 0200 	mov.w	r2, #0
 800655e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006562:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006566:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800656a:	4688      	mov	r8, r1
 800656c:	4691      	mov	r9, r2
 800656e:	eb1a 0508 	adds.w	r5, sl, r8
 8006572:	eb4b 0609 	adc.w	r6, fp, r9
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	4619      	mov	r1, r3
 800657c:	f04f 0200 	mov.w	r2, #0
 8006580:	f04f 0300 	mov.w	r3, #0
 8006584:	f04f 0400 	mov.w	r4, #0
 8006588:	0094      	lsls	r4, r2, #2
 800658a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800658e:	008b      	lsls	r3, r1, #2
 8006590:	461a      	mov	r2, r3
 8006592:	4623      	mov	r3, r4
 8006594:	4628      	mov	r0, r5
 8006596:	4631      	mov	r1, r6
 8006598:	f7fa fb20 	bl	8000bdc <__aeabi_uldivmod>
 800659c:	4603      	mov	r3, r0
 800659e:	460c      	mov	r4, r1
 80065a0:	461a      	mov	r2, r3
 80065a2:	4b50      	ldr	r3, [pc, #320]	; (80066e4 <UART_SetConfig+0x6f4>)
 80065a4:	fba3 2302 	umull	r2, r3, r3, r2
 80065a8:	095b      	lsrs	r3, r3, #5
 80065aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	469b      	mov	fp, r3
 80065b2:	f04f 0c00 	mov.w	ip, #0
 80065b6:	46d9      	mov	r9, fp
 80065b8:	46e2      	mov	sl, ip
 80065ba:	eb19 0309 	adds.w	r3, r9, r9
 80065be:	eb4a 040a 	adc.w	r4, sl, sl
 80065c2:	4699      	mov	r9, r3
 80065c4:	46a2      	mov	sl, r4
 80065c6:	eb19 090b 	adds.w	r9, r9, fp
 80065ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80065ce:	f04f 0100 	mov.w	r1, #0
 80065d2:	f04f 0200 	mov.w	r2, #0
 80065d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80065da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80065de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80065e2:	4689      	mov	r9, r1
 80065e4:	4692      	mov	sl, r2
 80065e6:	eb1b 0509 	adds.w	r5, fp, r9
 80065ea:	eb4c 060a 	adc.w	r6, ip, sl
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	685b      	ldr	r3, [r3, #4]
 80065f2:	4619      	mov	r1, r3
 80065f4:	f04f 0200 	mov.w	r2, #0
 80065f8:	f04f 0300 	mov.w	r3, #0
 80065fc:	f04f 0400 	mov.w	r4, #0
 8006600:	0094      	lsls	r4, r2, #2
 8006602:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006606:	008b      	lsls	r3, r1, #2
 8006608:	461a      	mov	r2, r3
 800660a:	4623      	mov	r3, r4
 800660c:	4628      	mov	r0, r5
 800660e:	4631      	mov	r1, r6
 8006610:	f7fa fae4 	bl	8000bdc <__aeabi_uldivmod>
 8006614:	4603      	mov	r3, r0
 8006616:	460c      	mov	r4, r1
 8006618:	461a      	mov	r2, r3
 800661a:	4b32      	ldr	r3, [pc, #200]	; (80066e4 <UART_SetConfig+0x6f4>)
 800661c:	fba3 1302 	umull	r1, r3, r3, r2
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	2164      	movs	r1, #100	; 0x64
 8006624:	fb01 f303 	mul.w	r3, r1, r3
 8006628:	1ad3      	subs	r3, r2, r3
 800662a:	011b      	lsls	r3, r3, #4
 800662c:	3332      	adds	r3, #50	; 0x32
 800662e:	4a2d      	ldr	r2, [pc, #180]	; (80066e4 <UART_SetConfig+0x6f4>)
 8006630:	fba2 2303 	umull	r2, r3, r2, r3
 8006634:	095b      	lsrs	r3, r3, #5
 8006636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800663a:	4498      	add	r8, r3
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	469b      	mov	fp, r3
 8006640:	f04f 0c00 	mov.w	ip, #0
 8006644:	46d9      	mov	r9, fp
 8006646:	46e2      	mov	sl, ip
 8006648:	eb19 0309 	adds.w	r3, r9, r9
 800664c:	eb4a 040a 	adc.w	r4, sl, sl
 8006650:	4699      	mov	r9, r3
 8006652:	46a2      	mov	sl, r4
 8006654:	eb19 090b 	adds.w	r9, r9, fp
 8006658:	eb4a 0a0c 	adc.w	sl, sl, ip
 800665c:	f04f 0100 	mov.w	r1, #0
 8006660:	f04f 0200 	mov.w	r2, #0
 8006664:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006668:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800666c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006670:	4689      	mov	r9, r1
 8006672:	4692      	mov	sl, r2
 8006674:	eb1b 0509 	adds.w	r5, fp, r9
 8006678:	eb4c 060a 	adc.w	r6, ip, sl
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	4619      	mov	r1, r3
 8006682:	f04f 0200 	mov.w	r2, #0
 8006686:	f04f 0300 	mov.w	r3, #0
 800668a:	f04f 0400 	mov.w	r4, #0
 800668e:	0094      	lsls	r4, r2, #2
 8006690:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006694:	008b      	lsls	r3, r1, #2
 8006696:	461a      	mov	r2, r3
 8006698:	4623      	mov	r3, r4
 800669a:	4628      	mov	r0, r5
 800669c:	4631      	mov	r1, r6
 800669e:	f7fa fa9d 	bl	8000bdc <__aeabi_uldivmod>
 80066a2:	4603      	mov	r3, r0
 80066a4:	460c      	mov	r4, r1
 80066a6:	461a      	mov	r2, r3
 80066a8:	4b0e      	ldr	r3, [pc, #56]	; (80066e4 <UART_SetConfig+0x6f4>)
 80066aa:	fba3 1302 	umull	r1, r3, r3, r2
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2164      	movs	r1, #100	; 0x64
 80066b2:	fb01 f303 	mul.w	r3, r1, r3
 80066b6:	1ad3      	subs	r3, r2, r3
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	3332      	adds	r3, #50	; 0x32
 80066bc:	4a09      	ldr	r2, [pc, #36]	; (80066e4 <UART_SetConfig+0x6f4>)
 80066be:	fba2 2303 	umull	r2, r3, r2, r3
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	f003 020f 	and.w	r2, r3, #15
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	4442      	add	r2, r8
 80066ce:	609a      	str	r2, [r3, #8]
}
 80066d0:	e7ff      	b.n	80066d2 <UART_SetConfig+0x6e2>
 80066d2:	bf00      	nop
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066dc:	40011000 	.word	0x40011000
 80066e0:	40011400 	.word	0x40011400
 80066e4:	51eb851f 	.word	0x51eb851f

080066e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80066e8:	b084      	sub	sp, #16
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	f107 001c 	add.w	r0, r7, #28
 80066f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80066fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d122      	bne.n	8006746 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006704:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	68db      	ldr	r3, [r3, #12]
 8006710:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800672a:	2b01      	cmp	r3, #1
 800672c:	d105      	bne.n	800673a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 fac6 	bl	8007ccc <USB_CoreReset>
 8006740:	4603      	mov	r3, r0
 8006742:	73fb      	strb	r3, [r7, #15]
 8006744:	e01a      	b.n	800677c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006752:	6878      	ldr	r0, [r7, #4]
 8006754:	f001 faba 	bl	8007ccc <USB_CoreReset>
 8006758:	4603      	mov	r3, r0
 800675a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800675c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800675e:	2b00      	cmp	r3, #0
 8006760:	d106      	bne.n	8006770 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006766:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
 800676e:	e005      	b.n	800677c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006774:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800677c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800677e:	2b01      	cmp	r3, #1
 8006780:	d10b      	bne.n	800679a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f043 0206 	orr.w	r2, r3, #6
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f043 0220 	orr.w	r2, r3, #32
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800679a:	7bfb      	ldrb	r3, [r7, #15]
}
 800679c:	4618      	mov	r0, r3
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067a6:	b004      	add	sp, #16
 80067a8:	4770      	bx	lr
	...

080067ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b087      	sub	sp, #28
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	4613      	mov	r3, r2
 80067b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80067ba:	79fb      	ldrb	r3, [r7, #7]
 80067bc:	2b02      	cmp	r3, #2
 80067be:	d165      	bne.n	800688c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	4a41      	ldr	r2, [pc, #260]	; (80068c8 <USB_SetTurnaroundTime+0x11c>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d906      	bls.n	80067d6 <USB_SetTurnaroundTime+0x2a>
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	4a40      	ldr	r2, [pc, #256]	; (80068cc <USB_SetTurnaroundTime+0x120>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d802      	bhi.n	80067d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80067d0:	230f      	movs	r3, #15
 80067d2:	617b      	str	r3, [r7, #20]
 80067d4:	e062      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4a3c      	ldr	r2, [pc, #240]	; (80068cc <USB_SetTurnaroundTime+0x120>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d906      	bls.n	80067ec <USB_SetTurnaroundTime+0x40>
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	4a3b      	ldr	r2, [pc, #236]	; (80068d0 <USB_SetTurnaroundTime+0x124>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d802      	bhi.n	80067ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80067e6:	230e      	movs	r3, #14
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e057      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	4a38      	ldr	r2, [pc, #224]	; (80068d0 <USB_SetTurnaroundTime+0x124>)
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d906      	bls.n	8006802 <USB_SetTurnaroundTime+0x56>
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	4a37      	ldr	r2, [pc, #220]	; (80068d4 <USB_SetTurnaroundTime+0x128>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d802      	bhi.n	8006802 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80067fc:	230d      	movs	r3, #13
 80067fe:	617b      	str	r3, [r7, #20]
 8006800:	e04c      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	4a33      	ldr	r2, [pc, #204]	; (80068d4 <USB_SetTurnaroundTime+0x128>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d906      	bls.n	8006818 <USB_SetTurnaroundTime+0x6c>
 800680a:	68bb      	ldr	r3, [r7, #8]
 800680c:	4a32      	ldr	r2, [pc, #200]	; (80068d8 <USB_SetTurnaroundTime+0x12c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d802      	bhi.n	8006818 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006812:	230c      	movs	r3, #12
 8006814:	617b      	str	r3, [r7, #20]
 8006816:	e041      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <USB_SetTurnaroundTime+0x12c>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d906      	bls.n	800682e <USB_SetTurnaroundTime+0x82>
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	4a2e      	ldr	r2, [pc, #184]	; (80068dc <USB_SetTurnaroundTime+0x130>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d802      	bhi.n	800682e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006828:	230b      	movs	r3, #11
 800682a:	617b      	str	r3, [r7, #20]
 800682c:	e036      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <USB_SetTurnaroundTime+0x130>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d906      	bls.n	8006844 <USB_SetTurnaroundTime+0x98>
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	4a29      	ldr	r2, [pc, #164]	; (80068e0 <USB_SetTurnaroundTime+0x134>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d802      	bhi.n	8006844 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800683e:	230a      	movs	r3, #10
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e02b      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4a26      	ldr	r2, [pc, #152]	; (80068e0 <USB_SetTurnaroundTime+0x134>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d906      	bls.n	800685a <USB_SetTurnaroundTime+0xae>
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	4a25      	ldr	r2, [pc, #148]	; (80068e4 <USB_SetTurnaroundTime+0x138>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d802      	bhi.n	800685a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006854:	2309      	movs	r3, #9
 8006856:	617b      	str	r3, [r7, #20]
 8006858:	e020      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	4a21      	ldr	r2, [pc, #132]	; (80068e4 <USB_SetTurnaroundTime+0x138>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d906      	bls.n	8006870 <USB_SetTurnaroundTime+0xc4>
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	4a20      	ldr	r2, [pc, #128]	; (80068e8 <USB_SetTurnaroundTime+0x13c>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d802      	bhi.n	8006870 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800686a:	2308      	movs	r3, #8
 800686c:	617b      	str	r3, [r7, #20]
 800686e:	e015      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4a1d      	ldr	r2, [pc, #116]	; (80068e8 <USB_SetTurnaroundTime+0x13c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d906      	bls.n	8006886 <USB_SetTurnaroundTime+0xda>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4a1c      	ldr	r2, [pc, #112]	; (80068ec <USB_SetTurnaroundTime+0x140>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d802      	bhi.n	8006886 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006880:	2307      	movs	r3, #7
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e00a      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006886:	2306      	movs	r3, #6
 8006888:	617b      	str	r3, [r7, #20]
 800688a:	e007      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800688c:	79fb      	ldrb	r3, [r7, #7]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d102      	bne.n	8006898 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006892:	2309      	movs	r3, #9
 8006894:	617b      	str	r3, [r7, #20]
 8006896:	e001      	b.n	800689c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006898:	2309      	movs	r3, #9
 800689a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	68da      	ldr	r2, [r3, #12]
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	029b      	lsls	r3, r3, #10
 80068b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80068b4:	431a      	orrs	r2, r3
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr
 80068c8:	00d8acbf 	.word	0x00d8acbf
 80068cc:	00e4e1bf 	.word	0x00e4e1bf
 80068d0:	00f423ff 	.word	0x00f423ff
 80068d4:	0106737f 	.word	0x0106737f
 80068d8:	011a499f 	.word	0x011a499f
 80068dc:	01312cff 	.word	0x01312cff
 80068e0:	014ca43f 	.word	0x014ca43f
 80068e4:	016e35ff 	.word	0x016e35ff
 80068e8:	01a6ab1f 	.word	0x01a6ab1f
 80068ec:	01e847ff 	.word	0x01e847ff

080068f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	f043 0201 	orr.w	r2, r3, #1
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006904:	2300      	movs	r3, #0
}
 8006906:	4618      	mov	r0, r3
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr

08006912 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006912:	b480      	push	{r7}
 8006914:	b083      	sub	sp, #12
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f023 0201 	bic.w	r2, r3, #1
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	460b      	mov	r3, r1
 800693e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800694c:	78fb      	ldrb	r3, [r7, #3]
 800694e:	2b01      	cmp	r3, #1
 8006950:	d106      	bne.n	8006960 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	60da      	str	r2, [r3, #12]
 800695e:	e00b      	b.n	8006978 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006960:	78fb      	ldrb	r3, [r7, #3]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d106      	bne.n	8006974 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	60da      	str	r2, [r3, #12]
 8006972:	e001      	b.n	8006978 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e003      	b.n	8006980 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006978:	2032      	movs	r0, #50	; 0x32
 800697a:	f7fb fb45 	bl	8002008 <HAL_Delay>

  return HAL_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006988:	b084      	sub	sp, #16
 800698a:	b580      	push	{r7, lr}
 800698c:	b086      	sub	sp, #24
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800699a:	2300      	movs	r3, #0
 800699c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80069a2:	2300      	movs	r3, #0
 80069a4:	613b      	str	r3, [r7, #16]
 80069a6:	e009      	b.n	80069bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80069a8:	687a      	ldr	r2, [r7, #4]
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	3340      	adds	r3, #64	; 0x40
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	4413      	add	r3, r2
 80069b2:	2200      	movs	r2, #0
 80069b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	3301      	adds	r3, #1
 80069ba:	613b      	str	r3, [r7, #16]
 80069bc:	693b      	ldr	r3, [r7, #16]
 80069be:	2b0e      	cmp	r3, #14
 80069c0:	d9f2      	bls.n	80069a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80069c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d11c      	bne.n	8006a02 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069d6:	f043 0302 	orr.w	r3, r3, #2
 80069da:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ec:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069f8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	639a      	str	r2, [r3, #56]	; 0x38
 8006a00:	e00b      	b.n	8006a1a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a12:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006a20:	461a      	mov	r2, r3
 8006a22:	2300      	movs	r3, #0
 8006a24:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a2c:	4619      	mov	r1, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a34:	461a      	mov	r2, r3
 8006a36:	680b      	ldr	r3, [r1, #0]
 8006a38:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3c:	2b01      	cmp	r3, #1
 8006a3e:	d10c      	bne.n	8006a5a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d104      	bne.n	8006a50 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006a46:	2100      	movs	r1, #0
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 f949 	bl	8006ce0 <USB_SetDevSpeed>
 8006a4e:	e008      	b.n	8006a62 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006a50:	2101      	movs	r1, #1
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f944 	bl	8006ce0 <USB_SetDevSpeed>
 8006a58:	e003      	b.n	8006a62 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006a5a:	2103      	movs	r1, #3
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	f000 f93f 	bl	8006ce0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006a62:	2110      	movs	r1, #16
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 f8f3 	bl	8006c50 <USB_FlushTxFifo>
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d001      	beq.n	8006a74 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006a70:	2301      	movs	r3, #1
 8006a72:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f911 	bl	8006c9c <USB_FlushRxFifo>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d001      	beq.n	8006a84 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006a80:	2301      	movs	r3, #1
 8006a82:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a96:	461a      	mov	r2, r3
 8006a98:	2300      	movs	r3, #0
 8006a9a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	613b      	str	r3, [r7, #16]
 8006aac:	e043      	b.n	8006b36 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ac4:	d118      	bne.n	8006af8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10a      	bne.n	8006ae2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad8:	461a      	mov	r2, r3
 8006ada:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e013      	b.n	8006b0a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aee:	461a      	mov	r2, r3
 8006af0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	e008      	b.n	8006b0a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	015a      	lsls	r2, r3, #5
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	4413      	add	r3, r2
 8006b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b04:	461a      	mov	r2, r3
 8006b06:	2300      	movs	r3, #0
 8006b08:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	015a      	lsls	r2, r3, #5
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4413      	add	r3, r2
 8006b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b16:	461a      	mov	r2, r3
 8006b18:	2300      	movs	r3, #0
 8006b1a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	015a      	lsls	r2, r3, #5
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4413      	add	r3, r2
 8006b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b28:	461a      	mov	r2, r3
 8006b2a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b2e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b30:	693b      	ldr	r3, [r7, #16]
 8006b32:	3301      	adds	r3, #1
 8006b34:	613b      	str	r3, [r7, #16]
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d3b7      	bcc.n	8006aae <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b3e:	2300      	movs	r3, #0
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	e043      	b.n	8006bcc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b5a:	d118      	bne.n	8006b8e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10a      	bne.n	8006b78 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	015a      	lsls	r2, r3, #5
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	4413      	add	r3, r2
 8006b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b6e:	461a      	mov	r2, r3
 8006b70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	e013      	b.n	8006ba0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	015a      	lsls	r2, r3, #5
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	4413      	add	r3, r2
 8006b80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b84:	461a      	mov	r2, r3
 8006b86:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006b8a:	6013      	str	r3, [r2, #0]
 8006b8c:	e008      	b.n	8006ba0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	015a      	lsls	r2, r3, #5
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	4413      	add	r3, r2
 8006b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	015a      	lsls	r2, r3, #5
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bac:	461a      	mov	r2, r3
 8006bae:	2300      	movs	r3, #0
 8006bb0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bc4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bc6:	693b      	ldr	r3, [r7, #16]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d3b7      	bcc.n	8006b44 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bda:	691b      	ldr	r3, [r3, #16]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006be2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006be6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006bf4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d105      	bne.n	8006c08 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	699b      	ldr	r3, [r3, #24]
 8006c00:	f043 0210 	orr.w	r2, r3, #16
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699a      	ldr	r2, [r3, #24]
 8006c0c:	4b0f      	ldr	r3, [pc, #60]	; (8006c4c <USB_DevInit+0x2c4>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	687a      	ldr	r2, [r7, #4]
 8006c12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006c14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d005      	beq.n	8006c26 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	f043 0208 	orr.w	r2, r3, #8
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006c26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d107      	bne.n	8006c3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	699b      	ldr	r3, [r3, #24]
 8006c30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c34:	f043 0304 	orr.w	r3, r3, #4
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c48:	b004      	add	sp, #16
 8006c4a:	4770      	bx	lr
 8006c4c:	803c3800 	.word	0x803c3800

08006c50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c50:	b480      	push	{r7}
 8006c52:	b085      	sub	sp, #20
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	019b      	lsls	r3, r3, #6
 8006c62:	f043 0220 	orr.w	r2, r3, #32
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4a09      	ldr	r2, [pc, #36]	; (8006c98 <USB_FlushTxFifo+0x48>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d901      	bls.n	8006c7c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006c78:	2303      	movs	r3, #3
 8006c7a:	e006      	b.n	8006c8a <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	691b      	ldr	r3, [r3, #16]
 8006c80:	f003 0320 	and.w	r3, r3, #32
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	d0f0      	beq.n	8006c6a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3714      	adds	r7, #20
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr
 8006c96:	bf00      	nop
 8006c98:	00030d40 	.word	0x00030d40

08006c9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b085      	sub	sp, #20
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2210      	movs	r2, #16
 8006cac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	3301      	adds	r3, #1
 8006cb2:	60fb      	str	r3, [r7, #12]
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	4a09      	ldr	r2, [pc, #36]	; (8006cdc <USB_FlushRxFifo+0x40>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d901      	bls.n	8006cc0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e006      	b.n	8006cce <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f003 0310 	and.w	r3, r3, #16
 8006cc8:	2b10      	cmp	r3, #16
 8006cca:	d0f0      	beq.n	8006cae <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ccc:	2300      	movs	r3, #0
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr
 8006cda:	bf00      	nop
 8006cdc:	00030d40 	.word	0x00030d40

08006ce0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b085      	sub	sp, #20
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	460b      	mov	r3, r1
 8006cea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf6:	681a      	ldr	r2, [r3, #0]
 8006cf8:	78fb      	ldrb	r3, [r7, #3]
 8006cfa:	68f9      	ldr	r1, [r7, #12]
 8006cfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d00:	4313      	orrs	r3, r2
 8006d02:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3714      	adds	r7, #20
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d10:	4770      	bx	lr

08006d12 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b087      	sub	sp, #28
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d24:	689b      	ldr	r3, [r3, #8]
 8006d26:	f003 0306 	and.w	r3, r3, #6
 8006d2a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d102      	bne.n	8006d38 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006d32:	2300      	movs	r3, #0
 8006d34:	75fb      	strb	r3, [r7, #23]
 8006d36:	e00a      	b.n	8006d4e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2b02      	cmp	r3, #2
 8006d3c:	d002      	beq.n	8006d44 <USB_GetDevSpeed+0x32>
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b06      	cmp	r3, #6
 8006d42:	d102      	bne.n	8006d4a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006d44:	2302      	movs	r3, #2
 8006d46:	75fb      	strb	r3, [r7, #23]
 8006d48:	e001      	b.n	8006d4e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006d4a:	230f      	movs	r3, #15
 8006d4c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	371c      	adds	r7, #28
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	785b      	ldrb	r3, [r3, #1]
 8006d74:	2b01      	cmp	r3, #1
 8006d76:	d13a      	bne.n	8006dee <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d7e:	69da      	ldr	r2, [r3, #28]
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	f003 030f 	and.w	r3, r3, #15
 8006d88:	2101      	movs	r1, #1
 8006d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d8e:	b29b      	uxth	r3, r3
 8006d90:	68f9      	ldr	r1, [r7, #12]
 8006d92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d96:	4313      	orrs	r3, r2
 8006d98:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	015a      	lsls	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	4413      	add	r3, r2
 8006da2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d155      	bne.n	8006e5c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	015a      	lsls	r2, r3, #5
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	4413      	add	r3, r2
 8006db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	78db      	ldrb	r3, [r3, #3]
 8006dca:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006dcc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	059b      	lsls	r3, r3, #22
 8006dd2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	0151      	lsls	r1, r2, #5
 8006dda:	68fa      	ldr	r2, [r7, #12]
 8006ddc:	440a      	add	r2, r1
 8006dde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dea:	6013      	str	r3, [r2, #0]
 8006dec:	e036      	b.n	8006e5c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df4:	69da      	ldr	r2, [r3, #28]
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	781b      	ldrb	r3, [r3, #0]
 8006dfa:	f003 030f 	and.w	r3, r3, #15
 8006dfe:	2101      	movs	r1, #1
 8006e00:	fa01 f303 	lsl.w	r3, r1, r3
 8006e04:	041b      	lsls	r3, r3, #16
 8006e06:	68f9      	ldr	r1, [r7, #12]
 8006e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d11a      	bne.n	8006e5c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	015a      	lsls	r2, r3, #5
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	78db      	ldrb	r3, [r3, #3]
 8006e40:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006e42:	430b      	orrs	r3, r1
 8006e44:	4313      	orrs	r3, r2
 8006e46:	68ba      	ldr	r2, [r7, #8]
 8006e48:	0151      	lsls	r1, r2, #5
 8006e4a:	68fa      	ldr	r2, [r7, #12]
 8006e4c:	440a      	add	r2, r1
 8006e4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e5a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3714      	adds	r7, #20
 8006e62:	46bd      	mov	sp, r7
 8006e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e68:	4770      	bx	lr
	...

08006e6c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b085      	sub	sp, #20
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	781b      	ldrb	r3, [r3, #0]
 8006e7e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	785b      	ldrb	r3, [r3, #1]
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d161      	bne.n	8006f4c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	015a      	lsls	r2, r3, #5
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e9e:	d11f      	bne.n	8006ee0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	015a      	lsls	r2, r3, #5
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	4413      	add	r3, r2
 8006ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	0151      	lsls	r1, r2, #5
 8006eb2:	68fa      	ldr	r2, [r7, #12]
 8006eb4:	440a      	add	r2, r1
 8006eb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ebe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	0151      	lsls	r1, r2, #5
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	440a      	add	r2, r1
 8006ed6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006ede:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	f003 030f 	and.w	r3, r3, #15
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	68f9      	ldr	r1, [r7, #12]
 8006efc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f00:	4013      	ands	r3, r2
 8006f02:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f003 030f 	and.w	r3, r3, #15
 8006f14:	2101      	movs	r1, #1
 8006f16:	fa01 f303 	lsl.w	r3, r1, r3
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	43db      	mvns	r3, r3
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f24:	4013      	ands	r3, r2
 8006f26:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f34:	681a      	ldr	r2, [r3, #0]
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	0159      	lsls	r1, r3, #5
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	440b      	add	r3, r1
 8006f3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f42:	4619      	mov	r1, r3
 8006f44:	4b35      	ldr	r3, [pc, #212]	; (800701c <USB_DeactivateEndpoint+0x1b0>)
 8006f46:	4013      	ands	r3, r2
 8006f48:	600b      	str	r3, [r1, #0]
 8006f4a:	e060      	b.n	800700e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	015a      	lsls	r2, r3, #5
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	4413      	add	r3, r2
 8006f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f62:	d11f      	bne.n	8006fa4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	015a      	lsls	r2, r3, #5
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4413      	add	r3, r2
 8006f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f82:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	015a      	lsls	r2, r3, #5
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	4413      	add	r3, r2
 8006f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	68ba      	ldr	r2, [r7, #8]
 8006f94:	0151      	lsls	r1, r2, #5
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	440a      	add	r2, r1
 8006f9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006fa2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	f003 030f 	and.w	r3, r3, #15
 8006fb4:	2101      	movs	r1, #1
 8006fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006fba:	041b      	lsls	r3, r3, #16
 8006fbc:	43db      	mvns	r3, r3
 8006fbe:	68f9      	ldr	r1, [r7, #12]
 8006fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	69da      	ldr	r2, [r3, #28]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 030f 	and.w	r3, r3, #15
 8006fd8:	2101      	movs	r1, #1
 8006fda:	fa01 f303 	lsl.w	r3, r1, r3
 8006fde:	041b      	lsls	r3, r3, #16
 8006fe0:	43db      	mvns	r3, r3
 8006fe2:	68f9      	ldr	r1, [r7, #12]
 8006fe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe8:	4013      	ands	r3, r2
 8006fea:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff8:	681a      	ldr	r2, [r3, #0]
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	0159      	lsls	r1, r3, #5
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	440b      	add	r3, r1
 8007002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007006:	4619      	mov	r1, r3
 8007008:	4b05      	ldr	r3, [pc, #20]	; (8007020 <USB_DeactivateEndpoint+0x1b4>)
 800700a:	4013      	ands	r3, r2
 800700c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3714      	adds	r7, #20
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr
 800701c:	ec337800 	.word	0xec337800
 8007020:	eff37800 	.word	0xeff37800

08007024 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b08a      	sub	sp, #40	; 0x28
 8007028:	af02      	add	r7, sp, #8
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	60b9      	str	r1, [r7, #8]
 800702e:	4613      	mov	r3, r2
 8007030:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b01      	cmp	r3, #1
 8007042:	f040 815c 	bne.w	80072fe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007046:	68bb      	ldr	r3, [r7, #8]
 8007048:	695b      	ldr	r3, [r3, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d132      	bne.n	80070b4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800704e:	69bb      	ldr	r3, [r7, #24]
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	0151      	lsls	r1, r2, #5
 8007060:	69fa      	ldr	r2, [r7, #28]
 8007062:	440a      	add	r2, r1
 8007064:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007068:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800706c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007070:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	015a      	lsls	r2, r3, #5
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	4413      	add	r3, r2
 800707a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	0151      	lsls	r1, r2, #5
 8007084:	69fa      	ldr	r2, [r7, #28]
 8007086:	440a      	add	r2, r1
 8007088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007090:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	015a      	lsls	r2, r3, #5
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	4413      	add	r3, r2
 800709a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	69ba      	ldr	r2, [r7, #24]
 80070a2:	0151      	lsls	r1, r2, #5
 80070a4:	69fa      	ldr	r2, [r7, #28]
 80070a6:	440a      	add	r2, r1
 80070a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ac:	0cdb      	lsrs	r3, r3, #19
 80070ae:	04db      	lsls	r3, r3, #19
 80070b0:	6113      	str	r3, [r2, #16]
 80070b2:	e074      	b.n	800719e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070c0:	691b      	ldr	r3, [r3, #16]
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ce:	0cdb      	lsrs	r3, r3, #19
 80070d0:	04db      	lsls	r3, r3, #19
 80070d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80070d4:	69bb      	ldr	r3, [r7, #24]
 80070d6:	015a      	lsls	r2, r3, #5
 80070d8:	69fb      	ldr	r3, [r7, #28]
 80070da:	4413      	add	r3, r2
 80070dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	0151      	lsls	r1, r2, #5
 80070e6:	69fa      	ldr	r2, [r7, #28]
 80070e8:	440a      	add	r2, r1
 80070ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070ee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80070f2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80070f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	6959      	ldr	r1, [r3, #20]
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	440b      	add	r3, r1
 8007110:	1e59      	subs	r1, r3, #1
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	fbb1 f3f3 	udiv	r3, r1, r3
 800711a:	04d9      	lsls	r1, r3, #19
 800711c:	4b9d      	ldr	r3, [pc, #628]	; (8007394 <USB_EPStartXfer+0x370>)
 800711e:	400b      	ands	r3, r1
 8007120:	69b9      	ldr	r1, [r7, #24]
 8007122:	0148      	lsls	r0, r1, #5
 8007124:	69f9      	ldr	r1, [r7, #28]
 8007126:	4401      	add	r1, r0
 8007128:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800712c:	4313      	orrs	r3, r2
 800712e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007130:	69bb      	ldr	r3, [r7, #24]
 8007132:	015a      	lsls	r2, r3, #5
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	4413      	add	r3, r2
 8007138:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007146:	69b9      	ldr	r1, [r7, #24]
 8007148:	0148      	lsls	r0, r1, #5
 800714a:	69f9      	ldr	r1, [r7, #28]
 800714c:	4401      	add	r1, r0
 800714e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007152:	4313      	orrs	r3, r2
 8007154:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	78db      	ldrb	r3, [r3, #3]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d11f      	bne.n	800719e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800715e:	69bb      	ldr	r3, [r7, #24]
 8007160:	015a      	lsls	r2, r3, #5
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	4413      	add	r3, r2
 8007166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716a:	691b      	ldr	r3, [r3, #16]
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	0151      	lsls	r1, r2, #5
 8007170:	69fa      	ldr	r2, [r7, #28]
 8007172:	440a      	add	r2, r1
 8007174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007178:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800717c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800717e:	69bb      	ldr	r3, [r7, #24]
 8007180:	015a      	lsls	r2, r3, #5
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	4413      	add	r3, r2
 8007186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	69ba      	ldr	r2, [r7, #24]
 800718e:	0151      	lsls	r1, r2, #5
 8007190:	69fa      	ldr	r2, [r7, #28]
 8007192:	440a      	add	r2, r1
 8007194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007198:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800719c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800719e:	79fb      	ldrb	r3, [r7, #7]
 80071a0:	2b01      	cmp	r3, #1
 80071a2:	d14b      	bne.n	800723c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80071a4:	68bb      	ldr	r3, [r7, #8]
 80071a6:	691b      	ldr	r3, [r3, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d009      	beq.n	80071c0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80071ac:	69bb      	ldr	r3, [r7, #24]
 80071ae:	015a      	lsls	r2, r3, #5
 80071b0:	69fb      	ldr	r3, [r7, #28]
 80071b2:	4413      	add	r3, r2
 80071b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b8:	461a      	mov	r2, r3
 80071ba:	68bb      	ldr	r3, [r7, #8]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	78db      	ldrb	r3, [r3, #3]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d128      	bne.n	800721a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d110      	bne.n	80071fa <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80071f6:	6013      	str	r3, [r2, #0]
 80071f8:	e00f      	b.n	800721a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	015a      	lsls	r2, r3, #5
 80071fe:	69fb      	ldr	r3, [r7, #28]
 8007200:	4413      	add	r3, r2
 8007202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	0151      	lsls	r1, r2, #5
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	440a      	add	r2, r1
 8007210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007218:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800721a:	69bb      	ldr	r3, [r7, #24]
 800721c:	015a      	lsls	r2, r3, #5
 800721e:	69fb      	ldr	r3, [r7, #28]
 8007220:	4413      	add	r3, r2
 8007222:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	69ba      	ldr	r2, [r7, #24]
 800722a:	0151      	lsls	r1, r2, #5
 800722c:	69fa      	ldr	r2, [r7, #28]
 800722e:	440a      	add	r2, r1
 8007230:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007234:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007238:	6013      	str	r3, [r2, #0]
 800723a:	e12f      	b.n	800749c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007256:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800725a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	78db      	ldrb	r3, [r3, #3]
 8007260:	2b01      	cmp	r3, #1
 8007262:	d015      	beq.n	8007290 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	695b      	ldr	r3, [r3, #20]
 8007268:	2b00      	cmp	r3, #0
 800726a:	f000 8117 	beq.w	800749c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007274:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	f003 030f 	and.w	r3, r3, #15
 800727e:	2101      	movs	r1, #1
 8007280:	fa01 f303 	lsl.w	r3, r1, r3
 8007284:	69f9      	ldr	r1, [r7, #28]
 8007286:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800728a:	4313      	orrs	r3, r2
 800728c:	634b      	str	r3, [r1, #52]	; 0x34
 800728e:	e105      	b.n	800749c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800729c:	2b00      	cmp	r3, #0
 800729e:	d110      	bne.n	80072c2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	015a      	lsls	r2, r3, #5
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	4413      	add	r3, r2
 80072a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	69ba      	ldr	r2, [r7, #24]
 80072b0:	0151      	lsls	r1, r2, #5
 80072b2:	69fa      	ldr	r2, [r7, #28]
 80072b4:	440a      	add	r2, r1
 80072b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072ba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072be:	6013      	str	r3, [r2, #0]
 80072c0:	e00f      	b.n	80072e2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	015a      	lsls	r2, r3, #5
 80072c6:	69fb      	ldr	r3, [r7, #28]
 80072c8:	4413      	add	r3, r2
 80072ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	0151      	lsls	r1, r2, #5
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	440a      	add	r2, r1
 80072d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072e0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	68d9      	ldr	r1, [r3, #12]
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	781a      	ldrb	r2, [r3, #0]
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	695b      	ldr	r3, [r3, #20]
 80072ee:	b298      	uxth	r0, r3
 80072f0:	79fb      	ldrb	r3, [r7, #7]
 80072f2:	9300      	str	r3, [sp, #0]
 80072f4:	4603      	mov	r3, r0
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f000 fa2b 	bl	8007752 <USB_WritePacket>
 80072fc:	e0ce      	b.n	800749c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	015a      	lsls	r2, r3, #5
 8007302:	69fb      	ldr	r3, [r7, #28]
 8007304:	4413      	add	r3, r2
 8007306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	69ba      	ldr	r2, [r7, #24]
 800730e:	0151      	lsls	r1, r2, #5
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	440a      	add	r2, r1
 8007314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007318:	0cdb      	lsrs	r3, r3, #19
 800731a:	04db      	lsls	r3, r3, #19
 800731c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	015a      	lsls	r2, r3, #5
 8007322:	69fb      	ldr	r3, [r7, #28]
 8007324:	4413      	add	r3, r2
 8007326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800732a:	691b      	ldr	r3, [r3, #16]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	0151      	lsls	r1, r2, #5
 8007330:	69fa      	ldr	r2, [r7, #28]
 8007332:	440a      	add	r2, r1
 8007334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007338:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800733c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007340:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d126      	bne.n	8007398 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007360:	69b9      	ldr	r1, [r7, #24]
 8007362:	0148      	lsls	r0, r1, #5
 8007364:	69f9      	ldr	r1, [r7, #28]
 8007366:	4401      	add	r1, r0
 8007368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800736c:	4313      	orrs	r3, r2
 800736e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007370:	69bb      	ldr	r3, [r7, #24]
 8007372:	015a      	lsls	r2, r3, #5
 8007374:	69fb      	ldr	r3, [r7, #28]
 8007376:	4413      	add	r3, r2
 8007378:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737c:	691b      	ldr	r3, [r3, #16]
 800737e:	69ba      	ldr	r2, [r7, #24]
 8007380:	0151      	lsls	r1, r2, #5
 8007382:	69fa      	ldr	r2, [r7, #28]
 8007384:	440a      	add	r2, r1
 8007386:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800738a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800738e:	6113      	str	r3, [r2, #16]
 8007390:	e036      	b.n	8007400 <USB_EPStartXfer+0x3dc>
 8007392:	bf00      	nop
 8007394:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	695a      	ldr	r2, [r3, #20]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	4413      	add	r3, r2
 80073a2:	1e5a      	subs	r2, r3, #1
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ac:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80073ae:	69bb      	ldr	r3, [r7, #24]
 80073b0:	015a      	lsls	r2, r3, #5
 80073b2:	69fb      	ldr	r3, [r7, #28]
 80073b4:	4413      	add	r3, r2
 80073b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ba:	691a      	ldr	r2, [r3, #16]
 80073bc:	8afb      	ldrh	r3, [r7, #22]
 80073be:	04d9      	lsls	r1, r3, #19
 80073c0:	4b39      	ldr	r3, [pc, #228]	; (80074a8 <USB_EPStartXfer+0x484>)
 80073c2:	400b      	ands	r3, r1
 80073c4:	69b9      	ldr	r1, [r7, #24]
 80073c6:	0148      	lsls	r0, r1, #5
 80073c8:	69f9      	ldr	r1, [r7, #28]
 80073ca:	4401      	add	r1, r0
 80073cc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073d0:	4313      	orrs	r3, r2
 80073d2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80073d4:	69bb      	ldr	r3, [r7, #24]
 80073d6:	015a      	lsls	r2, r3, #5
 80073d8:	69fb      	ldr	r3, [r7, #28]
 80073da:	4413      	add	r3, r2
 80073dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073e0:	691a      	ldr	r2, [r3, #16]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	689b      	ldr	r3, [r3, #8]
 80073e6:	8af9      	ldrh	r1, [r7, #22]
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073f0:	69b9      	ldr	r1, [r7, #24]
 80073f2:	0148      	lsls	r0, r1, #5
 80073f4:	69f9      	ldr	r1, [r7, #28]
 80073f6:	4401      	add	r1, r0
 80073f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073fc:	4313      	orrs	r3, r2
 80073fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007400:	79fb      	ldrb	r3, [r7, #7]
 8007402:	2b01      	cmp	r3, #1
 8007404:	d10d      	bne.n	8007422 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	68db      	ldr	r3, [r3, #12]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d009      	beq.n	8007422 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	68d9      	ldr	r1, [r3, #12]
 8007412:	69bb      	ldr	r3, [r7, #24]
 8007414:	015a      	lsls	r2, r3, #5
 8007416:	69fb      	ldr	r3, [r7, #28]
 8007418:	4413      	add	r3, r2
 800741a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800741e:	460a      	mov	r2, r1
 8007420:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	78db      	ldrb	r3, [r3, #3]
 8007426:	2b01      	cmp	r3, #1
 8007428:	d128      	bne.n	800747c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800742a:	69fb      	ldr	r3, [r7, #28]
 800742c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007436:	2b00      	cmp	r3, #0
 8007438:	d110      	bne.n	800745c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	015a      	lsls	r2, r3, #5
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69ba      	ldr	r2, [r7, #24]
 800744a:	0151      	lsls	r1, r2, #5
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	440a      	add	r2, r1
 8007450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007454:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	e00f      	b.n	800747c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800745c:	69bb      	ldr	r3, [r7, #24]
 800745e:	015a      	lsls	r2, r3, #5
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	4413      	add	r3, r2
 8007464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	69ba      	ldr	r2, [r7, #24]
 800746c:	0151      	lsls	r1, r2, #5
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	440a      	add	r2, r1
 8007472:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800747a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	015a      	lsls	r2, r3, #5
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	4413      	add	r3, r2
 8007484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69ba      	ldr	r2, [r7, #24]
 800748c:	0151      	lsls	r1, r2, #5
 800748e:	69fa      	ldr	r2, [r7, #28]
 8007490:	440a      	add	r2, r1
 8007492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007496:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800749a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800749c:	2300      	movs	r3, #0
}
 800749e:	4618      	mov	r0, r3
 80074a0:	3720      	adds	r7, #32
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	1ff80000 	.word	0x1ff80000

080074ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	60b9      	str	r1, [r7, #8]
 80074b6:	4613      	mov	r3, r2
 80074b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	781b      	ldrb	r3, [r3, #0]
 80074c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	785b      	ldrb	r3, [r3, #1]
 80074c8:	2b01      	cmp	r3, #1
 80074ca:	f040 80cd 	bne.w	8007668 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d132      	bne.n	800753c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	0151      	lsls	r1, r2, #5
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	440a      	add	r2, r1
 80074ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80074fa:	693b      	ldr	r3, [r7, #16]
 80074fc:	015a      	lsls	r2, r3, #5
 80074fe:	697b      	ldr	r3, [r7, #20]
 8007500:	4413      	add	r3, r2
 8007502:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	693a      	ldr	r2, [r7, #16]
 800750a:	0151      	lsls	r1, r2, #5
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	440a      	add	r2, r1
 8007510:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007514:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007518:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800751a:	693b      	ldr	r3, [r7, #16]
 800751c:	015a      	lsls	r2, r3, #5
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	4413      	add	r3, r2
 8007522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	693a      	ldr	r2, [r7, #16]
 800752a:	0151      	lsls	r1, r2, #5
 800752c:	697a      	ldr	r2, [r7, #20]
 800752e:	440a      	add	r2, r1
 8007530:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007534:	0cdb      	lsrs	r3, r3, #19
 8007536:	04db      	lsls	r3, r3, #19
 8007538:	6113      	str	r3, [r2, #16]
 800753a:	e04e      	b.n	80075da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	015a      	lsls	r2, r3, #5
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	4413      	add	r3, r2
 8007544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	693a      	ldr	r2, [r7, #16]
 800754c:	0151      	lsls	r1, r2, #5
 800754e:	697a      	ldr	r2, [r7, #20]
 8007550:	440a      	add	r2, r1
 8007552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007556:	0cdb      	lsrs	r3, r3, #19
 8007558:	04db      	lsls	r3, r3, #19
 800755a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007568:	691b      	ldr	r3, [r3, #16]
 800756a:	693a      	ldr	r2, [r7, #16]
 800756c:	0151      	lsls	r1, r2, #5
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	440a      	add	r2, r1
 8007572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007576:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800757a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800757e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	695a      	ldr	r2, [r3, #20]
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	429a      	cmp	r2, r3
 800758a:	d903      	bls.n	8007594 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	689a      	ldr	r2, [r3, #8]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007594:	693b      	ldr	r3, [r7, #16]
 8007596:	015a      	lsls	r2, r3, #5
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	4413      	add	r3, r2
 800759c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075a0:	691b      	ldr	r3, [r3, #16]
 80075a2:	693a      	ldr	r2, [r7, #16]
 80075a4:	0151      	lsls	r1, r2, #5
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	440a      	add	r2, r1
 80075aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80075b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80075b4:	693b      	ldr	r3, [r7, #16]
 80075b6:	015a      	lsls	r2, r3, #5
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	4413      	add	r3, r2
 80075bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075c0:	691a      	ldr	r2, [r3, #16]
 80075c2:	68bb      	ldr	r3, [r7, #8]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075ca:	6939      	ldr	r1, [r7, #16]
 80075cc:	0148      	lsls	r0, r1, #5
 80075ce:	6979      	ldr	r1, [r7, #20]
 80075d0:	4401      	add	r1, r0
 80075d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80075d6:	4313      	orrs	r3, r2
 80075d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d11e      	bne.n	800761e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	691b      	ldr	r3, [r3, #16]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d009      	beq.n	80075fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	015a      	lsls	r2, r3, #5
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	4413      	add	r3, r2
 80075f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075f4:	461a      	mov	r2, r3
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	691b      	ldr	r3, [r3, #16]
 80075fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	0151      	lsls	r1, r2, #5
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	440a      	add	r2, r1
 8007612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007616:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800761a:	6013      	str	r3, [r2, #0]
 800761c:	e092      	b.n	8007744 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	015a      	lsls	r2, r3, #5
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	4413      	add	r3, r2
 8007626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	693a      	ldr	r2, [r7, #16]
 800762e:	0151      	lsls	r1, r2, #5
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	440a      	add	r2, r1
 8007634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007638:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800763c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d07e      	beq.n	8007744 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007646:	697b      	ldr	r3, [r7, #20]
 8007648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800764c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	f003 030f 	and.w	r3, r3, #15
 8007656:	2101      	movs	r1, #1
 8007658:	fa01 f303 	lsl.w	r3, r1, r3
 800765c:	6979      	ldr	r1, [r7, #20]
 800765e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007662:	4313      	orrs	r3, r2
 8007664:	634b      	str	r3, [r1, #52]	; 0x34
 8007666:	e06d      	b.n	8007744 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007674:	691b      	ldr	r3, [r3, #16]
 8007676:	693a      	ldr	r2, [r7, #16]
 8007678:	0151      	lsls	r1, r2, #5
 800767a:	697a      	ldr	r2, [r7, #20]
 800767c:	440a      	add	r2, r1
 800767e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007682:	0cdb      	lsrs	r3, r3, #19
 8007684:	04db      	lsls	r3, r3, #19
 8007686:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	693a      	ldr	r2, [r7, #16]
 8007698:	0151      	lsls	r1, r2, #5
 800769a:	697a      	ldr	r2, [r7, #20]
 800769c:	440a      	add	r2, r1
 800769e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076aa:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	695b      	ldr	r3, [r3, #20]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d003      	beq.n	80076bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	689a      	ldr	r2, [r3, #8]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	015a      	lsls	r2, r3, #5
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	4413      	add	r3, r2
 80076c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	693a      	ldr	r2, [r7, #16]
 80076cc:	0151      	lsls	r1, r2, #5
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	440a      	add	r2, r1
 80076d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	015a      	lsls	r2, r3, #5
 80076e0:	697b      	ldr	r3, [r7, #20]
 80076e2:	4413      	add	r3, r2
 80076e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076e8:	691a      	ldr	r2, [r3, #16]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076f2:	6939      	ldr	r1, [r7, #16]
 80076f4:	0148      	lsls	r0, r1, #5
 80076f6:	6979      	ldr	r1, [r7, #20]
 80076f8:	4401      	add	r1, r0
 80076fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076fe:	4313      	orrs	r3, r2
 8007700:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007702:	79fb      	ldrb	r3, [r7, #7]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d10d      	bne.n	8007724 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	68db      	ldr	r3, [r3, #12]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d009      	beq.n	8007724 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	68d9      	ldr	r1, [r3, #12]
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007720:	460a      	mov	r2, r1
 8007722:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	015a      	lsls	r2, r3, #5
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	4413      	add	r3, r2
 800772c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	693a      	ldr	r2, [r7, #16]
 8007734:	0151      	lsls	r1, r2, #5
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	440a      	add	r2, r1
 800773a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800773e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007742:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	371c      	adds	r7, #28
 800774a:	46bd      	mov	sp, r7
 800774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007750:	4770      	bx	lr

08007752 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007752:	b480      	push	{r7}
 8007754:	b089      	sub	sp, #36	; 0x24
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	60b9      	str	r1, [r7, #8]
 800775c:	4611      	mov	r1, r2
 800775e:	461a      	mov	r2, r3
 8007760:	460b      	mov	r3, r1
 8007762:	71fb      	strb	r3, [r7, #7]
 8007764:	4613      	mov	r3, r2
 8007766:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007770:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007774:	2b00      	cmp	r3, #0
 8007776:	d11a      	bne.n	80077ae <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007778:	88bb      	ldrh	r3, [r7, #4]
 800777a:	3303      	adds	r3, #3
 800777c:	089b      	lsrs	r3, r3, #2
 800777e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007780:	2300      	movs	r3, #0
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e00f      	b.n	80077a6 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007786:	79fb      	ldrb	r3, [r7, #7]
 8007788:	031a      	lsls	r2, r3, #12
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	4413      	add	r3, r2
 800778e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007792:	461a      	mov	r2, r3
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	6013      	str	r3, [r2, #0]
      pSrc++;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3304      	adds	r3, #4
 800779e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	3301      	adds	r3, #1
 80077a4:	61bb      	str	r3, [r7, #24]
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d3eb      	bcc.n	8007786 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3724      	adds	r7, #36	; 0x24
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr

080077bc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80077bc:	b480      	push	{r7}
 80077be:	b089      	sub	sp, #36	; 0x24
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	60b9      	str	r1, [r7, #8]
 80077c6:	4613      	mov	r3, r2
 80077c8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80077d2:	88fb      	ldrh	r3, [r7, #6]
 80077d4:	3303      	adds	r3, #3
 80077d6:	089b      	lsrs	r3, r3, #2
 80077d8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80077da:	2300      	movs	r3, #0
 80077dc:	61bb      	str	r3, [r7, #24]
 80077de:	e00b      	b.n	80077f8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	3304      	adds	r3, #4
 80077f0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	3301      	adds	r3, #1
 80077f6:	61bb      	str	r3, [r7, #24]
 80077f8:	69ba      	ldr	r2, [r7, #24]
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	429a      	cmp	r2, r3
 80077fe:	d3ef      	bcc.n	80077e0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8007800:	69fb      	ldr	r3, [r7, #28]
}
 8007802:	4618      	mov	r0, r3
 8007804:	3724      	adds	r7, #36	; 0x24
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800780e:	b480      	push	{r7}
 8007810:	b085      	sub	sp, #20
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800781c:	683b      	ldr	r3, [r7, #0]
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	785b      	ldrb	r3, [r3, #1]
 8007826:	2b01      	cmp	r3, #1
 8007828:	d12c      	bne.n	8007884 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	2b00      	cmp	r3, #0
 800783a:	db12      	blt.n	8007862 <USB_EPSetStall+0x54>
 800783c:	68bb      	ldr	r3, [r7, #8]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d00f      	beq.n	8007862 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	015a      	lsls	r2, r3, #5
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	4413      	add	r3, r2
 800784a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	68ba      	ldr	r2, [r7, #8]
 8007852:	0151      	lsls	r1, r2, #5
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	440a      	add	r2, r1
 8007858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800785c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007860:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007862:	68bb      	ldr	r3, [r7, #8]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	68ba      	ldr	r2, [r7, #8]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	440a      	add	r2, r1
 8007878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800787c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	e02b      	b.n	80078dc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	015a      	lsls	r2, r3, #5
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	4413      	add	r3, r2
 800788c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	db12      	blt.n	80078bc <USB_EPSetStall+0xae>
 8007896:	68bb      	ldr	r3, [r7, #8]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d00f      	beq.n	80078bc <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	015a      	lsls	r2, r3, #5
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	4413      	add	r3, r2
 80078a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68ba      	ldr	r2, [r7, #8]
 80078ac:	0151      	lsls	r1, r2, #5
 80078ae:	68fa      	ldr	r2, [r7, #12]
 80078b0:	440a      	add	r2, r1
 80078b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078b6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078ba:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68ba      	ldr	r2, [r7, #8]
 80078cc:	0151      	lsls	r1, r2, #5
 80078ce:	68fa      	ldr	r2, [r7, #12]
 80078d0:	440a      	add	r2, r1
 80078d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80078da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80078dc:	2300      	movs	r3, #0
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3714      	adds	r7, #20
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b085      	sub	sp, #20
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
 80078f2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	785b      	ldrb	r3, [r3, #1]
 8007902:	2b01      	cmp	r3, #1
 8007904:	d128      	bne.n	8007958 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	015a      	lsls	r2, r3, #5
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	4413      	add	r3, r2
 800790e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	68ba      	ldr	r2, [r7, #8]
 8007916:	0151      	lsls	r1, r2, #5
 8007918:	68fa      	ldr	r2, [r7, #12]
 800791a:	440a      	add	r2, r1
 800791c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007920:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007924:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	78db      	ldrb	r3, [r3, #3]
 800792a:	2b03      	cmp	r3, #3
 800792c:	d003      	beq.n	8007936 <USB_EPClearStall+0x4c>
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	78db      	ldrb	r3, [r3, #3]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d138      	bne.n	80079a8 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68ba      	ldr	r2, [r7, #8]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	440a      	add	r2, r1
 800794c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007954:	6013      	str	r3, [r2, #0]
 8007956:	e027      	b.n	80079a8 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	0151      	lsls	r1, r2, #5
 800796a:	68fa      	ldr	r2, [r7, #12]
 800796c:	440a      	add	r2, r1
 800796e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007976:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	78db      	ldrb	r3, [r3, #3]
 800797c:	2b03      	cmp	r3, #3
 800797e:	d003      	beq.n	8007988 <USB_EPClearStall+0x9e>
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	78db      	ldrb	r3, [r3, #3]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d10f      	bne.n	80079a8 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	015a      	lsls	r2, r3, #5
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	4413      	add	r3, r2
 8007990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	68ba      	ldr	r2, [r7, #8]
 8007998:	0151      	lsls	r1, r2, #5
 800799a:	68fa      	ldr	r2, [r7, #12]
 800799c:	440a      	add	r2, r1
 800799e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a6:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80079a8:	2300      	movs	r3, #0
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	3714      	adds	r7, #20
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr

080079b6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80079b6:	b480      	push	{r7}
 80079b8:	b085      	sub	sp, #20
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	6078      	str	r0, [r7, #4]
 80079be:	460b      	mov	r3, r1
 80079c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	68fa      	ldr	r2, [r7, #12]
 80079d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80079d4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80079d8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	78fb      	ldrb	r3, [r7, #3]
 80079e4:	011b      	lsls	r3, r3, #4
 80079e6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80079ea:	68f9      	ldr	r1, [r7, #12]
 80079ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079f0:	4313      	orrs	r3, r2
 80079f2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80079f4:	2300      	movs	r3, #0
}
 80079f6:	4618      	mov	r0, r3
 80079f8:	3714      	adds	r7, #20
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr

08007a02 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a02:	b480      	push	{r7}
 8007a04:	b085      	sub	sp, #20
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	68fa      	ldr	r2, [r7, #12]
 8007a18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a1c:	f023 0303 	bic.w	r3, r3, #3
 8007a20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	68fa      	ldr	r2, [r7, #12]
 8007a2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a30:	f023 0302 	bic.w	r3, r3, #2
 8007a34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a36:	2300      	movs	r3, #0
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b085      	sub	sp, #20
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68fa      	ldr	r2, [r7, #12]
 8007a5a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a5e:	f023 0303 	bic.w	r3, r3, #3
 8007a62:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3714      	adds	r7, #20
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a84:	4770      	bx	lr

08007a86 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007a86:	b480      	push	{r7}
 8007a88:	b085      	sub	sp, #20
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	695b      	ldr	r3, [r3, #20]
 8007a92:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	699b      	ldr	r3, [r3, #24]
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr

08007aac <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007aac:	b480      	push	{r7}
 8007aae:	b085      	sub	sp, #20
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007abe:	699b      	ldr	r3, [r3, #24]
 8007ac0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ac8:	69db      	ldr	r3, [r3, #28]
 8007aca:	68ba      	ldr	r2, [r7, #8]
 8007acc:	4013      	ands	r3, r2
 8007ace:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	0c1b      	lsrs	r3, r3, #16
}
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	3714      	adds	r7, #20
 8007ad8:	46bd      	mov	sp, r7
 8007ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ade:	4770      	bx	lr

08007ae0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b085      	sub	sp, #20
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007af2:	699b      	ldr	r3, [r3, #24]
 8007af4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007afc:	69db      	ldr	r3, [r3, #28]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	4013      	ands	r3, r2
 8007b02:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	b29b      	uxth	r3, r3
}
 8007b08:	4618      	mov	r0, r3
 8007b0a:	3714      	adds	r7, #20
 8007b0c:	46bd      	mov	sp, r7
 8007b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b12:	4770      	bx	lr

08007b14 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b085      	sub	sp, #20
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
 8007b1c:	460b      	mov	r3, r1
 8007b1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	015a      	lsls	r2, r3, #5
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	4413      	add	r3, r2
 8007b2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	68ba      	ldr	r2, [r7, #8]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b42:	68bb      	ldr	r3, [r7, #8]
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3714      	adds	r7, #20
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4e:	4770      	bx	lr

08007b50 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007b50:	b480      	push	{r7}
 8007b52:	b087      	sub	sp, #28
 8007b54:	af00      	add	r7, sp, #0
 8007b56:	6078      	str	r0, [r7, #4]
 8007b58:	460b      	mov	r3, r1
 8007b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b72:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007b74:	78fb      	ldrb	r3, [r7, #3]
 8007b76:	f003 030f 	and.w	r3, r3, #15
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	fa22 f303 	lsr.w	r3, r2, r3
 8007b80:	01db      	lsls	r3, r3, #7
 8007b82:	b2db      	uxtb	r3, r3
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	015a      	lsls	r2, r3, #5
 8007b8e:	697b      	ldr	r3, [r7, #20]
 8007b90:	4413      	add	r3, r2
 8007b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b96:	689b      	ldr	r3, [r3, #8]
 8007b98:	693a      	ldr	r2, [r7, #16]
 8007b9a:	4013      	ands	r3, r2
 8007b9c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007b9e:	68bb      	ldr	r3, [r7, #8]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	371c      	adds	r7, #28
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr

08007bac <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007bac:	b480      	push	{r7}
 8007bae:	b083      	sub	sp, #12
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	695b      	ldr	r3, [r3, #20]
 8007bb8:	f003 0301 	and.w	r3, r3, #1
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b085      	sub	sp, #20
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	68fa      	ldr	r2, [r7, #12]
 8007bde:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007be2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007be6:	f023 0307 	bic.w	r3, r3, #7
 8007bea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	68fa      	ldr	r2, [r7, #12]
 8007bf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3714      	adds	r7, #20
 8007c06:	46bd      	mov	sp, r7
 8007c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0c:	4770      	bx	lr
	...

08007c10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b087      	sub	sp, #28
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	460b      	mov	r3, r1
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	333c      	adds	r3, #60	; 0x3c
 8007c26:	3304      	adds	r3, #4
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	4a26      	ldr	r2, [pc, #152]	; (8007cc8 <USB_EP0_OutStart+0xb8>)
 8007c30:	4293      	cmp	r3, r2
 8007c32:	d90a      	bls.n	8007c4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007c40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007c44:	d101      	bne.n	8007c4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007c46:	2300      	movs	r3, #0
 8007c48:	e037      	b.n	8007cba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c50:	461a      	mov	r2, r3
 8007c52:	2300      	movs	r3, #0
 8007c54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	697a      	ldr	r2, [r7, #20]
 8007c74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c78:	f043 0318 	orr.w	r3, r3, #24
 8007c7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007c90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007c92:	7afb      	ldrb	r3, [r7, #11]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d10f      	bne.n	8007cb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	697a      	ldr	r2, [r7, #20]
 8007cae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007cb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cb8:	2300      	movs	r3, #0
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	371c      	adds	r7, #28
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	4f54300a 	.word	0x4f54300a

08007ccc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	4a13      	ldr	r2, [pc, #76]	; (8007d30 <USB_CoreReset+0x64>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d901      	bls.n	8007cea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e01b      	b.n	8007d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	daf2      	bge.n	8007cd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f043 0201 	orr.w	r2, r3, #1
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	3301      	adds	r3, #1
 8007d06:	60fb      	str	r3, [r7, #12]
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	4a09      	ldr	r2, [pc, #36]	; (8007d30 <USB_CoreReset+0x64>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d901      	bls.n	8007d14 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007d10:	2303      	movs	r3, #3
 8007d12:	e006      	b.n	8007d22 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	691b      	ldr	r3, [r3, #16]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b01      	cmp	r3, #1
 8007d1e:	d0f0      	beq.n	8007d02 <USB_CoreReset+0x36>

  return HAL_OK;
 8007d20:	2300      	movs	r3, #0
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	00030d40 	.word	0x00030d40

08007d34 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007d34:	b580      	push	{r7, lr}
 8007d36:	b084      	sub	sp, #16
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007d40:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007d44:	f002 f92c 	bl	8009fa0 <malloc>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d105      	bne.n	8007d5e <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007d5a:	2302      	movs	r3, #2
 8007d5c:	e066      	b.n	8007e2c <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	68fa      	ldr	r2, [r7, #12]
 8007d62:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	7c1b      	ldrb	r3, [r3, #16]
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d119      	bne.n	8007da2 <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007d6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d72:	2202      	movs	r2, #2
 8007d74:	2181      	movs	r1, #129	; 0x81
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f001 ff99 	bl	8009cae <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007d82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007d86:	2202      	movs	r2, #2
 8007d88:	2101      	movs	r1, #1
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f001 ff8f 	bl	8009cae <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2210      	movs	r2, #16
 8007d9c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007da0:	e016      	b.n	8007dd0 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007da2:	2340      	movs	r3, #64	; 0x40
 8007da4:	2202      	movs	r2, #2
 8007da6:	2181      	movs	r1, #129	; 0x81
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f001 ff80 	bl	8009cae <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2201      	movs	r2, #1
 8007db2:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007db4:	2340      	movs	r3, #64	; 0x40
 8007db6:	2202      	movs	r2, #2
 8007db8:	2101      	movs	r1, #1
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	f001 ff77 	bl	8009cae <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2210      	movs	r2, #16
 8007dcc:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007dd0:	2308      	movs	r3, #8
 8007dd2:	2203      	movs	r2, #3
 8007dd4:	2182      	movs	r1, #130	; 0x82
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f001 ff69 	bl	8009cae <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	7c1b      	ldrb	r3, [r3, #16]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d109      	bne.n	8007e1a <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e10:	2101      	movs	r1, #1
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f002 f83a 	bl	8009e8c <USBD_LL_PrepareReceive>
 8007e18:	e007      	b.n	8007e2a <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007e20:	2340      	movs	r3, #64	; 0x40
 8007e22:	2101      	movs	r1, #1
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f002 f831 	bl	8009e8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007e2a:	2300      	movs	r3, #0
}
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8007e40:	2300      	movs	r3, #0
 8007e42:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007e44:	2181      	movs	r1, #129	; 0x81
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f001 ff57 	bl	8009cfa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007e52:	2101      	movs	r1, #1
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f001 ff50 	bl	8009cfa <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007e62:	2182      	movs	r1, #130	; 0x82
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f001 ff48 	bl	8009cfa <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2200      	movs	r2, #0
 8007e76:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00e      	beq.n	8007ea2 <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e8a:	685b      	ldr	r3, [r3, #4]
 8007e8c:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007e94:	4618      	mov	r0, r3
 8007e96:	f002 f88b 	bl	8009fb0 <free>
    pdev->pClassData = NULL;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 8007ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007ebc:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d03a      	beq.n	8007f4c <USBD_CDC_Setup+0xa0>
 8007ed6:	2b20      	cmp	r3, #32
 8007ed8:	f040 8097 	bne.w	800800a <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	88db      	ldrh	r3, [r3, #6]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d029      	beq.n	8007f38 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	b25b      	sxtb	r3, r3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	da11      	bge.n	8007f12 <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	683a      	ldr	r2, [r7, #0]
 8007ef8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 8007efa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007efc:	683a      	ldr	r2, [r7, #0]
 8007efe:	88d2      	ldrh	r2, [r2, #6]
 8007f00:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f02:	6939      	ldr	r1, [r7, #16]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	88db      	ldrh	r3, [r3, #6]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 fa9d 	bl	800944a <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 8007f10:	e082      	b.n	8008018 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 8007f12:	683b      	ldr	r3, [r7, #0]
 8007f14:	785a      	ldrb	r2, [r3, #1]
 8007f16:	693b      	ldr	r3, [r7, #16]
 8007f18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	88db      	ldrh	r3, [r3, #6]
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	693b      	ldr	r3, [r7, #16]
 8007f24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8007f28:	6939      	ldr	r1, [r7, #16]
 8007f2a:	683b      	ldr	r3, [r7, #0]
 8007f2c:	88db      	ldrh	r3, [r3, #6]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f001 fab6 	bl	80094a2 <USBD_CtlPrepareRx>
    break;
 8007f36:	e06f      	b.n	8008018 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	7850      	ldrb	r0, [r2, #1]
 8007f44:	2200      	movs	r2, #0
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	4798      	blx	r3
    break;
 8007f4a:	e065      	b.n	8008018 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	785b      	ldrb	r3, [r3, #1]
 8007f50:	2b0b      	cmp	r3, #11
 8007f52:	d84f      	bhi.n	8007ff4 <USBD_CDC_Setup+0x148>
 8007f54:	a201      	add	r2, pc, #4	; (adr r2, 8007f5c <USBD_CDC_Setup+0xb0>)
 8007f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f5a:	bf00      	nop
 8007f5c:	08007f8d 	.word	0x08007f8d
 8007f60:	08008003 	.word	0x08008003
 8007f64:	08007ff5 	.word	0x08007ff5
 8007f68:	08007ff5 	.word	0x08007ff5
 8007f6c:	08007ff5 	.word	0x08007ff5
 8007f70:	08007ff5 	.word	0x08007ff5
 8007f74:	08007ff5 	.word	0x08007ff5
 8007f78:	08007ff5 	.word	0x08007ff5
 8007f7c:	08007ff5 	.word	0x08007ff5
 8007f80:	08007ff5 	.word	0x08007ff5
 8007f84:	08007fb5 	.word	0x08007fb5
 8007f88:	08007fdd 	.word	0x08007fdd
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d107      	bne.n	8007fa6 <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007f96:	f107 030c 	add.w	r3, r7, #12
 8007f9a:	2202      	movs	r2, #2
 8007f9c:	4619      	mov	r1, r3
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f001 fa53 	bl	800944a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007fa4:	e030      	b.n	8008008 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f001 f9dd 	bl	8009368 <USBD_CtlError>
        ret = USBD_FAIL;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007fb2:	e029      	b.n	8008008 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fba:	2b03      	cmp	r3, #3
 8007fbc:	d107      	bne.n	8007fce <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8007fbe:	f107 030f 	add.w	r3, r7, #15
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 fa3f 	bl	800944a <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8007fcc:	e01c      	b.n	8008008 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 8007fce:	6839      	ldr	r1, [r7, #0]
 8007fd0:	6878      	ldr	r0, [r7, #4]
 8007fd2:	f001 f9c9 	bl	8009368 <USBD_CtlError>
        ret = USBD_FAIL;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	75fb      	strb	r3, [r7, #23]
      break;
 8007fda:	e015      	b.n	8008008 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe2:	2b03      	cmp	r3, #3
 8007fe4:	d00f      	beq.n	8008006 <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f001 f9bd 	bl	8009368 <USBD_CtlError>
        ret = USBD_FAIL;
 8007fee:	2303      	movs	r3, #3
 8007ff0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007ff2:	e008      	b.n	8008006 <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8007ff4:	6839      	ldr	r1, [r7, #0]
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f001 f9b6 	bl	8009368 <USBD_CtlError>
      ret = USBD_FAIL;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8008000:	e002      	b.n	8008008 <USBD_CDC_Setup+0x15c>
      break;
 8008002:	bf00      	nop
 8008004:	e008      	b.n	8008018 <USBD_CDC_Setup+0x16c>
      break;
 8008006:	bf00      	nop
    }
    break;
 8008008:	e006      	b.n	8008018 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f001 f9ab 	bl	8009368 <USBD_CtlError>
    ret = USBD_FAIL;
 8008012:	2303      	movs	r3, #3
 8008014:	75fb      	strb	r3, [r7, #23]
    break;
 8008016:	bf00      	nop
  }

  return (uint8_t)ret;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3718      	adds	r7, #24
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop

08008024 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008024:	b580      	push	{r7, lr}
 8008026:	b084      	sub	sp, #16
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	460b      	mov	r3, r1
 800802e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008036:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800803e:	2b00      	cmp	r3, #0
 8008040:	d101      	bne.n	8008046 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008042:	2303      	movs	r3, #3
 8008044:	e049      	b.n	80080da <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800804c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800804e:	78fa      	ldrb	r2, [r7, #3]
 8008050:	6879      	ldr	r1, [r7, #4]
 8008052:	4613      	mov	r3, r2
 8008054:	009b      	lsls	r3, r3, #2
 8008056:	4413      	add	r3, r2
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	440b      	add	r3, r1
 800805c:	3318      	adds	r3, #24
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2b00      	cmp	r3, #0
 8008062:	d029      	beq.n	80080b8 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8008064:	78fa      	ldrb	r2, [r7, #3]
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	4613      	mov	r3, r2
 800806a:	009b      	lsls	r3, r3, #2
 800806c:	4413      	add	r3, r2
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	440b      	add	r3, r1
 8008072:	3318      	adds	r3, #24
 8008074:	681a      	ldr	r2, [r3, #0]
 8008076:	78f9      	ldrb	r1, [r7, #3]
 8008078:	68f8      	ldr	r0, [r7, #12]
 800807a:	460b      	mov	r3, r1
 800807c:	00db      	lsls	r3, r3, #3
 800807e:	1a5b      	subs	r3, r3, r1
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4403      	add	r3, r0
 8008084:	3344      	adds	r3, #68	; 0x44
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	fbb2 f1f3 	udiv	r1, r2, r3
 800808c:	fb03 f301 	mul.w	r3, r3, r1
 8008090:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008092:	2b00      	cmp	r3, #0
 8008094:	d110      	bne.n	80080b8 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8008096:	78fa      	ldrb	r2, [r7, #3]
 8008098:	6879      	ldr	r1, [r7, #4]
 800809a:	4613      	mov	r3, r2
 800809c:	009b      	lsls	r3, r3, #2
 800809e:	4413      	add	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	440b      	add	r3, r1
 80080a4:	3318      	adds	r3, #24
 80080a6:	2200      	movs	r2, #0
 80080a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80080aa:	78f9      	ldrb	r1, [r7, #3]
 80080ac:	2300      	movs	r3, #0
 80080ae:	2200      	movs	r2, #0
 80080b0:	6878      	ldr	r0, [r7, #4]
 80080b2:	f001 feca 	bl	8009e4a <USBD_LL_Transmit>
 80080b6:	e00f      	b.n	80080d8 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80080ce:	68ba      	ldr	r2, [r7, #8]
 80080d0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80080d4:	78fa      	ldrb	r2, [r7, #3]
 80080d6:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80080d8:	2300      	movs	r3, #0
}
 80080da:	4618      	mov	r0, r3
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}

080080e2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80080e2:	b580      	push	{r7, lr}
 80080e4:	b084      	sub	sp, #16
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	6078      	str	r0, [r7, #4]
 80080ea:	460b      	mov	r3, r1
 80080ec:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080f4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008100:	2303      	movs	r3, #3
 8008102:	e015      	b.n	8008130 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008104:	78fb      	ldrb	r3, [r7, #3]
 8008106:	4619      	mov	r1, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 fee0 	bl	8009ece <USBD_LL_GetRxDataSize>
 800810e:	4602      	mov	r2, r0
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800811c:	68db      	ldr	r3, [r3, #12]
 800811e:	68fa      	ldr	r2, [r7, #12]
 8008120:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800812a:	4611      	mov	r1, r2
 800812c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800812e:	2300      	movs	r3, #0
}
 8008130:	4618      	mov	r0, r3
 8008132:	3710      	adds	r7, #16
 8008134:	46bd      	mov	sp, r7
 8008136:	bd80      	pop	{r7, pc}

08008138 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b084      	sub	sp, #16
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008146:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d015      	beq.n	800817e <USBD_CDC_EP0_RxReady+0x46>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008158:	2bff      	cmp	r3, #255	; 0xff
 800815a:	d010      	beq.n	800817e <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008162:	689b      	ldr	r3, [r3, #8]
 8008164:	68fa      	ldr	r2, [r7, #12]
 8008166:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800816a:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800816c:	68fa      	ldr	r2, [r7, #12]
 800816e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008172:	b292      	uxth	r2, r2
 8008174:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	22ff      	movs	r2, #255	; 0xff
 800817a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 800817e:	2300      	movs	r3, #0
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}

08008188 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008188:	b480      	push	{r7}
 800818a:	b083      	sub	sp, #12
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2243      	movs	r2, #67	; 0x43
 8008194:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8008196:	4b03      	ldr	r3, [pc, #12]	; (80081a4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008198:	4618      	mov	r0, r3
 800819a:	370c      	adds	r7, #12
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr
 80081a4:	200000c4 	.word	0x200000c4

080081a8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2243      	movs	r2, #67	; 0x43
 80081b4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80081b6:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	20000080 	.word	0x20000080

080081c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2243      	movs	r2, #67	; 0x43
 80081d4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80081d6:	4b03      	ldr	r3, [pc, #12]	; (80081e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr
 80081e4:	20000108 	.word	0x20000108

080081e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	220a      	movs	r2, #10
 80081f4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80081f6:	4b03      	ldr	r3, [pc, #12]	; (8008204 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr
 8008204:	2000003c 	.word	0x2000003c

08008208 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d101      	bne.n	800821c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008218:	2303      	movs	r3, #3
 800821a:	e004      	b.n	8008226 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	683a      	ldr	r2, [r7, #0]
 8008220:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008224:	2300      	movs	r3, #0
}
 8008226:	4618      	mov	r0, r3
 8008228:	370c      	adds	r7, #12
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr

08008232 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008232:	b480      	push	{r7}
 8008234:	b087      	sub	sp, #28
 8008236:	af00      	add	r7, sp, #0
 8008238:	60f8      	str	r0, [r7, #12]
 800823a:	60b9      	str	r1, [r7, #8]
 800823c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008244:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	68ba      	ldr	r2, [r7, #8]
 800824a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	687a      	ldr	r2, [r7, #4]
 8008252:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008256:	2300      	movs	r3, #0
}
 8008258:	4618      	mov	r0, r3
 800825a:	371c      	adds	r7, #28
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008274:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	683a      	ldr	r2, [r7, #0]
 800827a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800827e:	2300      	movs	r3, #0
}
 8008280:	4618      	mov	r0, r3
 8008282:	3714      	adds	r7, #20
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800829a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800829c:	2301      	movs	r3, #1
 800829e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d101      	bne.n	80082ae <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082aa:	2303      	movs	r3, #3
 80082ac:	e01a      	b.n	80082e4 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d114      	bne.n	80082e2 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80082ca:	68bb      	ldr	r3, [r7, #8]
 80082cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80082d6:	2181      	movs	r1, #129	; 0x81
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f001 fdb6 	bl	8009e4a <USBD_LL_Transmit>

    ret = USBD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80082e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3710      	adds	r7, #16
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}

080082ec <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008302:	2b00      	cmp	r3, #0
 8008304:	d101      	bne.n	800830a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8008306:	2303      	movs	r3, #3
 8008308:	e016      	b.n	8008338 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	7c1b      	ldrb	r3, [r3, #16]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d109      	bne.n	8008326 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008318:	f44f 7300 	mov.w	r3, #512	; 0x200
 800831c:	2101      	movs	r1, #1
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f001 fdb4 	bl	8009e8c <USBD_LL_PrepareReceive>
 8008324:	e007      	b.n	8008336 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800832c:	2340      	movs	r3, #64	; 0x40
 800832e:	2101      	movs	r1, #1
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 fdab 	bl	8009e8c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008336:	2300      	movs	r3, #0
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8008354:	2303      	movs	r3, #3
 8008356:	e025      	b.n	80083a4 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2200      	movs	r2, #0
 8008366:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8008370:	2b00      	cmp	r3, #0
 8008372:	d003      	beq.n	800837c <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	2200      	movs	r2, #0
 8008378:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d003      	beq.n	800838a <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	68ba      	ldr	r2, [r7, #8]
 8008386:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	2201      	movs	r2, #1
 800838e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	79fa      	ldrb	r2, [r7, #7]
 8008396:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008398:	68f8      	ldr	r0, [r7, #12]
 800839a:	f001 fc21 	bl	8009be0 <USBD_LL_Init>
 800839e:	4603      	mov	r3, r0
 80083a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80083a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083b6:	2300      	movs	r3, #0
 80083b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d101      	bne.n	80083c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80083c0:	2303      	movs	r3, #3
 80083c2:	e010      	b.n	80083e6 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80083d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083d4:	f107 020e 	add.w	r2, r7, #14
 80083d8:	4610      	mov	r0, r2
 80083da:	4798      	blx	r3
 80083dc:	4602      	mov	r2, r0
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 80083e4:	2300      	movs	r3, #0
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3710      	adds	r7, #16
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}

080083ee <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80083ee:	b580      	push	{r7, lr}
 80083f0:	b082      	sub	sp, #8
 80083f2:	af00      	add	r7, sp, #0
 80083f4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80083f6:	6878      	ldr	r0, [r7, #4]
 80083f8:	f001 fc3e 	bl	8009c78 <USBD_LL_Start>
 80083fc:	4603      	mov	r3, r0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3708      	adds	r7, #8
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}

08008406 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008406:	b480      	push	{r7}
 8008408:	b083      	sub	sp, #12
 800840a:	af00      	add	r7, sp, #0
 800840c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800840e:	2300      	movs	r3, #0
}
 8008410:	4618      	mov	r0, r3
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008428:	2303      	movs	r3, #3
 800842a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008432:	2b00      	cmp	r3, #0
 8008434:	d009      	beq.n	800844a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	78fa      	ldrb	r2, [r7, #3]
 8008440:	4611      	mov	r1, r2
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	4798      	blx	r3
 8008446:	4603      	mov	r3, r0
 8008448:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800844a:	7bfb      	ldrb	r3, [r7, #15]
}
 800844c:	4618      	mov	r0, r3
 800844e:	3710      	adds	r7, #16
 8008450:	46bd      	mov	sp, r7
 8008452:	bd80      	pop	{r7, pc}

08008454 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	460b      	mov	r3, r1
 800845e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008466:	2b00      	cmp	r3, #0
 8008468:	d007      	beq.n	800847a <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008470:	685b      	ldr	r3, [r3, #4]
 8008472:	78fa      	ldrb	r2, [r7, #3]
 8008474:	4611      	mov	r1, r2
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	4798      	blx	r3
  }

  return USBD_OK;
 800847a:	2300      	movs	r3, #0
}
 800847c:	4618      	mov	r0, r3
 800847e:	3708      	adds	r7, #8
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
 800848c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 ff2c 	bl	80092f4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2201      	movs	r2, #1
 80084a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80084aa:	461a      	mov	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80084b8:	f003 031f 	and.w	r3, r3, #31
 80084bc:	2b01      	cmp	r3, #1
 80084be:	d00e      	beq.n	80084de <USBD_LL_SetupStage+0x5a>
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d302      	bcc.n	80084ca <USBD_LL_SetupStage+0x46>
 80084c4:	2b02      	cmp	r3, #2
 80084c6:	d014      	beq.n	80084f2 <USBD_LL_SetupStage+0x6e>
 80084c8:	e01d      	b.n	8008506 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 fa18 	bl	8008908 <USBD_StdDevReq>
 80084d8:	4603      	mov	r3, r0
 80084da:	73fb      	strb	r3, [r7, #15]
      break;
 80084dc:	e020      	b.n	8008520 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 fa7c 	bl	80089e4 <USBD_StdItfReq>
 80084ec:	4603      	mov	r3, r0
 80084ee:	73fb      	strb	r3, [r7, #15]
      break;
 80084f0:	e016      	b.n	8008520 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80084f8:	4619      	mov	r1, r3
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 fab8 	bl	8008a70 <USBD_StdEPReq>
 8008500:	4603      	mov	r3, r0
 8008502:	73fb      	strb	r3, [r7, #15]
      break;
 8008504:	e00c      	b.n	8008520 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800850c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008510:	b2db      	uxtb	r3, r3
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f001 fc0f 	bl	8009d38 <USBD_LL_StallEP>
 800851a:	4603      	mov	r3, r0
 800851c:	73fb      	strb	r3, [r7, #15]
      break;
 800851e:	bf00      	nop
  }

  return ret;
 8008520:	7bfb      	ldrb	r3, [r7, #15]
}
 8008522:	4618      	mov	r0, r3
 8008524:	3710      	adds	r7, #16
 8008526:	46bd      	mov	sp, r7
 8008528:	bd80      	pop	{r7, pc}

0800852a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800852a:	b580      	push	{r7, lr}
 800852c:	b086      	sub	sp, #24
 800852e:	af00      	add	r7, sp, #0
 8008530:	60f8      	str	r0, [r7, #12]
 8008532:	460b      	mov	r3, r1
 8008534:	607a      	str	r2, [r7, #4]
 8008536:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008538:	7afb      	ldrb	r3, [r7, #11]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d137      	bne.n	80085ae <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008544:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800854c:	2b03      	cmp	r3, #3
 800854e:	d14a      	bne.n	80085e6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8008550:	693b      	ldr	r3, [r7, #16]
 8008552:	689a      	ldr	r2, [r3, #8]
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	68db      	ldr	r3, [r3, #12]
 8008558:	429a      	cmp	r2, r3
 800855a:	d913      	bls.n	8008584 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800855c:	693b      	ldr	r3, [r7, #16]
 800855e:	689a      	ldr	r2, [r3, #8]
 8008560:	693b      	ldr	r3, [r7, #16]
 8008562:	68db      	ldr	r3, [r3, #12]
 8008564:	1ad2      	subs	r2, r2, r3
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	68da      	ldr	r2, [r3, #12]
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	4293      	cmp	r3, r2
 8008574:	bf28      	it	cs
 8008576:	4613      	movcs	r3, r2
 8008578:	461a      	mov	r2, r3
 800857a:	6879      	ldr	r1, [r7, #4]
 800857c:	68f8      	ldr	r0, [r7, #12]
 800857e:	f000 ffad 	bl	80094dc <USBD_CtlContinueRx>
 8008582:	e030      	b.n	80085e6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d00a      	beq.n	80085a6 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008596:	2b03      	cmp	r3, #3
 8008598:	d105      	bne.n	80085a6 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085a0:	691b      	ldr	r3, [r3, #16]
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 80085a6:	68f8      	ldr	r0, [r7, #12]
 80085a8:	f000 ffa9 	bl	80094fe <USBD_CtlSendStatus>
 80085ac:	e01b      	b.n	80085e6 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b4:	699b      	ldr	r3, [r3, #24]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d013      	beq.n	80085e2 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80085c0:	2b03      	cmp	r3, #3
 80085c2:	d10e      	bne.n	80085e2 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	7afa      	ldrb	r2, [r7, #11]
 80085ce:	4611      	mov	r1, r2
 80085d0:	68f8      	ldr	r0, [r7, #12]
 80085d2:	4798      	blx	r3
 80085d4:	4603      	mov	r3, r0
 80085d6:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80085d8:	7dfb      	ldrb	r3, [r7, #23]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 80085de:	7dfb      	ldrb	r3, [r7, #23]
 80085e0:	e002      	b.n	80085e8 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80085e2:	2303      	movs	r3, #3
 80085e4:	e000      	b.n	80085e8 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 80085e6:	2300      	movs	r3, #0
}
 80085e8:	4618      	mov	r0, r3
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b086      	sub	sp, #24
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	460b      	mov	r3, r1
 80085fa:	607a      	str	r2, [r7, #4]
 80085fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80085fe:	7afb      	ldrb	r3, [r7, #11]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d16a      	bne.n	80086da <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	3314      	adds	r3, #20
 8008608:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008610:	2b02      	cmp	r3, #2
 8008612:	d155      	bne.n	80086c0 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	689a      	ldr	r2, [r3, #8]
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	429a      	cmp	r2, r3
 800861e:	d914      	bls.n	800864a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	689a      	ldr	r2, [r3, #8]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	1ad2      	subs	r2, r2, r3
 800862a:	693b      	ldr	r3, [r7, #16]
 800862c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	461a      	mov	r2, r3
 8008634:	6879      	ldr	r1, [r7, #4]
 8008636:	68f8      	ldr	r0, [r7, #12]
 8008638:	f000 ff22 	bl	8009480 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800863c:	2300      	movs	r3, #0
 800863e:	2200      	movs	r2, #0
 8008640:	2100      	movs	r1, #0
 8008642:	68f8      	ldr	r0, [r7, #12]
 8008644:	f001 fc22 	bl	8009e8c <USBD_LL_PrepareReceive>
 8008648:	e03a      	b.n	80086c0 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	693b      	ldr	r3, [r7, #16]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	429a      	cmp	r2, r3
 8008654:	d11c      	bne.n	8008690 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	685a      	ldr	r2, [r3, #4]
 800865a:	693b      	ldr	r3, [r7, #16]
 800865c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800865e:	429a      	cmp	r2, r3
 8008660:	d316      	bcc.n	8008690 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	685a      	ldr	r2, [r3, #4]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800866c:	429a      	cmp	r2, r3
 800866e:	d20f      	bcs.n	8008690 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008670:	2200      	movs	r2, #0
 8008672:	2100      	movs	r1, #0
 8008674:	68f8      	ldr	r0, [r7, #12]
 8008676:	f000 ff03 	bl	8009480 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2200      	movs	r2, #0
 800867e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008682:	2300      	movs	r3, #0
 8008684:	2200      	movs	r2, #0
 8008686:	2100      	movs	r1, #0
 8008688:	68f8      	ldr	r0, [r7, #12]
 800868a:	f001 fbff 	bl	8009e8c <USBD_LL_PrepareReceive>
 800868e:	e017      	b.n	80086c0 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d00a      	beq.n	80086b2 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80086a2:	2b03      	cmp	r3, #3
 80086a4:	d105      	bne.n	80086b2 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086ac:	68db      	ldr	r3, [r3, #12]
 80086ae:	68f8      	ldr	r0, [r7, #12]
 80086b0:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80086b2:	2180      	movs	r1, #128	; 0x80
 80086b4:	68f8      	ldr	r0, [r7, #12]
 80086b6:	f001 fb3f 	bl	8009d38 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80086ba:	68f8      	ldr	r0, [r7, #12]
 80086bc:	f000 ff32 	bl	8009524 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80086c6:	2b01      	cmp	r3, #1
 80086c8:	d123      	bne.n	8008712 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f7ff fe9b 	bl	8008406 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80086d8:	e01b      	b.n	8008712 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d013      	beq.n	800870e <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d10e      	bne.n	800870e <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086f6:	695b      	ldr	r3, [r3, #20]
 80086f8:	7afa      	ldrb	r2, [r7, #11]
 80086fa:	4611      	mov	r1, r2
 80086fc:	68f8      	ldr	r0, [r7, #12]
 80086fe:	4798      	blx	r3
 8008700:	4603      	mov	r3, r0
 8008702:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008704:	7dfb      	ldrb	r3, [r7, #23]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800870a:	7dfb      	ldrb	r3, [r7, #23]
 800870c:	e002      	b.n	8008714 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800870e:	2303      	movs	r3, #3
 8008710:	e000      	b.n	8008714 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3718      	adds	r7, #24
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2200      	movs	r2, #0
 8008730:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008748:	2b00      	cmp	r3, #0
 800874a:	d009      	beq.n	8008760 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	687a      	ldr	r2, [r7, #4]
 8008756:	6852      	ldr	r2, [r2, #4]
 8008758:	b2d2      	uxtb	r2, r2
 800875a:	4611      	mov	r1, r2
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008760:	2340      	movs	r3, #64	; 0x40
 8008762:	2200      	movs	r2, #0
 8008764:	2100      	movs	r1, #0
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f001 faa1 	bl	8009cae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2240      	movs	r2, #64	; 0x40
 8008778:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800877c:	2340      	movs	r3, #64	; 0x40
 800877e:	2200      	movs	r2, #0
 8008780:	2180      	movs	r1, #128	; 0x80
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f001 fa93 	bl	8009cae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2240      	movs	r2, #64	; 0x40
 8008792:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008794:	2300      	movs	r3, #0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	78fa      	ldrb	r2, [r7, #3]
 80087ae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	370c      	adds	r7, #12
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr

080087be <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80087be:	b480      	push	{r7}
 80087c0:	b083      	sub	sp, #12
 80087c2:	af00      	add	r7, sp, #0
 80087c4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2204      	movs	r2, #4
 80087d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80087da:	2300      	movs	r3, #0
}
 80087dc:	4618      	mov	r0, r3
 80087de:	370c      	adds	r7, #12
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80087e8:	b480      	push	{r7}
 80087ea:	b083      	sub	sp, #12
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087f6:	2b04      	cmp	r3, #4
 80087f8:	d105      	bne.n	8008806 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008806:	2300      	movs	r3, #0
}
 8008808:	4618      	mov	r0, r3
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008822:	2b03      	cmp	r3, #3
 8008824:	d10b      	bne.n	800883e <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800882c:	69db      	ldr	r3, [r3, #28]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d005      	beq.n	800883e <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	3708      	adds	r7, #8
 8008844:	46bd      	mov	sp, r7
 8008846:	bd80      	pop	{r7, pc}

08008848 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	460b      	mov	r3, r1
 8008852:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	370c      	adds	r7, #12
 800885a:	46bd      	mov	sp, r7
 800885c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008860:	4770      	bx	lr

08008862 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008862:	b480      	push	{r7}
 8008864:	b083      	sub	sp, #12
 8008866:	af00      	add	r7, sp, #0
 8008868:	6078      	str	r0, [r7, #4]
 800886a:	460b      	mov	r3, r1
 800886c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	370c      	adds	r7, #12
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b082      	sub	sp, #8
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d009      	beq.n	80088c0 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b2:	685b      	ldr	r3, [r3, #4]
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6852      	ldr	r2, [r2, #4]
 80088b8:	b2d2      	uxtb	r2, r2
 80088ba:	4611      	mov	r1, r2
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	4798      	blx	r3
  }

  return USBD_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80088ca:	b480      	push	{r7}
 80088cc:	b087      	sub	sp, #28
 80088ce:	af00      	add	r7, sp, #0
 80088d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	781b      	ldrb	r3, [r3, #0]
 80088da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80088dc:	697b      	ldr	r3, [r7, #20]
 80088de:	3301      	adds	r3, #1
 80088e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80088e8:	8a3b      	ldrh	r3, [r7, #16]
 80088ea:	021b      	lsls	r3, r3, #8
 80088ec:	b21a      	sxth	r2, r3
 80088ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	b21b      	sxth	r3, r3
 80088f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80088f8:	89fb      	ldrh	r3, [r7, #14]
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	371c      	adds	r7, #28
 80088fe:	46bd      	mov	sp, r7
 8008900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008904:	4770      	bx	lr
	...

08008908 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008916:	683b      	ldr	r3, [r7, #0]
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800891e:	2b20      	cmp	r3, #32
 8008920:	d004      	beq.n	800892c <USBD_StdDevReq+0x24>
 8008922:	2b40      	cmp	r3, #64	; 0x40
 8008924:	d002      	beq.n	800892c <USBD_StdDevReq+0x24>
 8008926:	2b00      	cmp	r3, #0
 8008928:	d00a      	beq.n	8008940 <USBD_StdDevReq+0x38>
 800892a:	e050      	b.n	80089ce <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008932:	689b      	ldr	r3, [r3, #8]
 8008934:	6839      	ldr	r1, [r7, #0]
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	4798      	blx	r3
 800893a:	4603      	mov	r3, r0
 800893c:	73fb      	strb	r3, [r7, #15]
    break;
 800893e:	e04b      	b.n	80089d8 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008940:	683b      	ldr	r3, [r7, #0]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	2b09      	cmp	r3, #9
 8008946:	d83c      	bhi.n	80089c2 <USBD_StdDevReq+0xba>
 8008948:	a201      	add	r2, pc, #4	; (adr r2, 8008950 <USBD_StdDevReq+0x48>)
 800894a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800894e:	bf00      	nop
 8008950:	080089a5 	.word	0x080089a5
 8008954:	080089b9 	.word	0x080089b9
 8008958:	080089c3 	.word	0x080089c3
 800895c:	080089af 	.word	0x080089af
 8008960:	080089c3 	.word	0x080089c3
 8008964:	08008983 	.word	0x08008983
 8008968:	08008979 	.word	0x08008979
 800896c:	080089c3 	.word	0x080089c3
 8008970:	0800899b 	.word	0x0800899b
 8008974:	0800898d 	.word	0x0800898d
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008978:	6839      	ldr	r1, [r7, #0]
 800897a:	6878      	ldr	r0, [r7, #4]
 800897c:	f000 f9ce 	bl	8008d1c <USBD_GetDescriptor>
      break;
 8008980:	e024      	b.n	80089cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008982:	6839      	ldr	r1, [r7, #0]
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fb33 	bl	8008ff0 <USBD_SetAddress>
      break;
 800898a:	e01f      	b.n	80089cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800898c:	6839      	ldr	r1, [r7, #0]
 800898e:	6878      	ldr	r0, [r7, #4]
 8008990:	f000 fb70 	bl	8009074 <USBD_SetConfig>
 8008994:	4603      	mov	r3, r0
 8008996:	73fb      	strb	r3, [r7, #15]
      break;
 8008998:	e018      	b.n	80089cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800899a:	6839      	ldr	r1, [r7, #0]
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 fc0d 	bl	80091bc <USBD_GetConfig>
      break;
 80089a2:	e013      	b.n	80089cc <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 fc3c 	bl	8009224 <USBD_GetStatus>
      break;
 80089ac:	e00e      	b.n	80089cc <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80089ae:	6839      	ldr	r1, [r7, #0]
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f000 fc6a 	bl	800928a <USBD_SetFeature>
      break;
 80089b6:	e009      	b.n	80089cc <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80089b8:	6839      	ldr	r1, [r7, #0]
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 fc79 	bl	80092b2 <USBD_ClrFeature>
      break;
 80089c0:	e004      	b.n	80089cc <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fccf 	bl	8009368 <USBD_CtlError>
      break;
 80089ca:	bf00      	nop
    }
    break;
 80089cc:	e004      	b.n	80089d8 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80089ce:	6839      	ldr	r1, [r7, #0]
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f000 fcc9 	bl	8009368 <USBD_CtlError>
    break;
 80089d6:	bf00      	nop
  }

  return ret;
 80089d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3710      	adds	r7, #16
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop

080089e4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	781b      	ldrb	r3, [r3, #0]
 80089f6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80089fa:	2b20      	cmp	r3, #32
 80089fc:	d003      	beq.n	8008a06 <USBD_StdItfReq+0x22>
 80089fe:	2b40      	cmp	r3, #64	; 0x40
 8008a00:	d001      	beq.n	8008a06 <USBD_StdItfReq+0x22>
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d12a      	bne.n	8008a5c <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a0c:	3b01      	subs	r3, #1
 8008a0e:	2b02      	cmp	r3, #2
 8008a10:	d81d      	bhi.n	8008a4e <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	889b      	ldrh	r3, [r3, #4]
 8008a16:	b2db      	uxtb	r3, r3
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d813      	bhi.n	8008a44 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	6839      	ldr	r1, [r7, #0]
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	4798      	blx	r3
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008a2e:	683b      	ldr	r3, [r7, #0]
 8008a30:	88db      	ldrh	r3, [r3, #6]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d110      	bne.n	8008a58 <USBD_StdItfReq+0x74>
 8008a36:	7bfb      	ldrb	r3, [r7, #15]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d10d      	bne.n	8008a58 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f000 fd5e 	bl	80094fe <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008a42:	e009      	b.n	8008a58 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	6878      	ldr	r0, [r7, #4]
 8008a48:	f000 fc8e 	bl	8009368 <USBD_CtlError>
      break;
 8008a4c:	e004      	b.n	8008a58 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008a4e:	6839      	ldr	r1, [r7, #0]
 8008a50:	6878      	ldr	r0, [r7, #4]
 8008a52:	f000 fc89 	bl	8009368 <USBD_CtlError>
      break;
 8008a56:	e000      	b.n	8008a5a <USBD_StdItfReq+0x76>
      break;
 8008a58:	bf00      	nop
    }
    break;
 8008a5a:	e004      	b.n	8008a66 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008a5c:	6839      	ldr	r1, [r7, #0]
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fc82 	bl	8009368 <USBD_CtlError>
    break;
 8008a64:	bf00      	nop
  }

  return ret;
 8008a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b084      	sub	sp, #16
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	889b      	ldrh	r3, [r3, #4]
 8008a82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	781b      	ldrb	r3, [r3, #0]
 8008a88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d004      	beq.n	8008a9a <USBD_StdEPReq+0x2a>
 8008a90:	2b40      	cmp	r3, #64	; 0x40
 8008a92:	d002      	beq.n	8008a9a <USBD_StdEPReq+0x2a>
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00a      	beq.n	8008aae <USBD_StdEPReq+0x3e>
 8008a98:	e135      	b.n	8008d06 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	6839      	ldr	r1, [r7, #0]
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	4798      	blx	r3
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8008aac:	e130      	b.n	8008d10 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	785b      	ldrb	r3, [r3, #1]
 8008ab2:	2b01      	cmp	r3, #1
 8008ab4:	d03e      	beq.n	8008b34 <USBD_StdEPReq+0xc4>
 8008ab6:	2b03      	cmp	r3, #3
 8008ab8:	d002      	beq.n	8008ac0 <USBD_StdEPReq+0x50>
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d077      	beq.n	8008bae <USBD_StdEPReq+0x13e>
 8008abe:	e11c      	b.n	8008cfa <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ac6:	2b02      	cmp	r3, #2
 8008ac8:	d002      	beq.n	8008ad0 <USBD_StdEPReq+0x60>
 8008aca:	2b03      	cmp	r3, #3
 8008acc:	d015      	beq.n	8008afa <USBD_StdEPReq+0x8a>
 8008ace:	e02b      	b.n	8008b28 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ad0:	7bbb      	ldrb	r3, [r7, #14]
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d00c      	beq.n	8008af0 <USBD_StdEPReq+0x80>
 8008ad6:	7bbb      	ldrb	r3, [r7, #14]
 8008ad8:	2b80      	cmp	r3, #128	; 0x80
 8008ada:	d009      	beq.n	8008af0 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008adc:	7bbb      	ldrb	r3, [r7, #14]
 8008ade:	4619      	mov	r1, r3
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f001 f929 	bl	8009d38 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008ae6:	2180      	movs	r1, #128	; 0x80
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 f925 	bl	8009d38 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008aee:	e020      	b.n	8008b32 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 fc38 	bl	8009368 <USBD_CtlError>
        break;
 8008af8:	e01b      	b.n	8008b32 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	885b      	ldrh	r3, [r3, #2]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d10e      	bne.n	8008b20 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008b02:	7bbb      	ldrb	r3, [r7, #14]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d00b      	beq.n	8008b20 <USBD_StdEPReq+0xb0>
 8008b08:	7bbb      	ldrb	r3, [r7, #14]
 8008b0a:	2b80      	cmp	r3, #128	; 0x80
 8008b0c:	d008      	beq.n	8008b20 <USBD_StdEPReq+0xb0>
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	88db      	ldrh	r3, [r3, #6]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d104      	bne.n	8008b20 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b16:	7bbb      	ldrb	r3, [r7, #14]
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f001 f90c 	bl	8009d38 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008b20:	6878      	ldr	r0, [r7, #4]
 8008b22:	f000 fcec 	bl	80094fe <USBD_CtlSendStatus>

        break;
 8008b26:	e004      	b.n	8008b32 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008b28:	6839      	ldr	r1, [r7, #0]
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 fc1c 	bl	8009368 <USBD_CtlError>
        break;
 8008b30:	bf00      	nop
      }
      break;
 8008b32:	e0e7      	b.n	8008d04 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d002      	beq.n	8008b44 <USBD_StdEPReq+0xd4>
 8008b3e:	2b03      	cmp	r3, #3
 8008b40:	d015      	beq.n	8008b6e <USBD_StdEPReq+0xfe>
 8008b42:	e02d      	b.n	8008ba0 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d00c      	beq.n	8008b64 <USBD_StdEPReq+0xf4>
 8008b4a:	7bbb      	ldrb	r3, [r7, #14]
 8008b4c:	2b80      	cmp	r3, #128	; 0x80
 8008b4e:	d009      	beq.n	8008b64 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008b50:	7bbb      	ldrb	r3, [r7, #14]
 8008b52:	4619      	mov	r1, r3
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f001 f8ef 	bl	8009d38 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008b5a:	2180      	movs	r1, #128	; 0x80
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f001 f8eb 	bl	8009d38 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008b62:	e023      	b.n	8008bac <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008b64:	6839      	ldr	r1, [r7, #0]
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	f000 fbfe 	bl	8009368 <USBD_CtlError>
        break;
 8008b6c:	e01e      	b.n	8008bac <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	885b      	ldrh	r3, [r3, #2]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d119      	bne.n	8008baa <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008b76:	7bbb      	ldrb	r3, [r7, #14]
 8008b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d004      	beq.n	8008b8a <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008b80:	7bbb      	ldrb	r3, [r7, #14]
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f001 f8f6 	bl	8009d76 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fcb7 	bl	80094fe <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	6839      	ldr	r1, [r7, #0]
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	4798      	blx	r3
        }
        break;
 8008b9e:	e004      	b.n	8008baa <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008ba0:	6839      	ldr	r1, [r7, #0]
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f000 fbe0 	bl	8009368 <USBD_CtlError>
        break;
 8008ba8:	e000      	b.n	8008bac <USBD_StdEPReq+0x13c>
        break;
 8008baa:	bf00      	nop
      }
      break;
 8008bac:	e0aa      	b.n	8008d04 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb4:	2b02      	cmp	r3, #2
 8008bb6:	d002      	beq.n	8008bbe <USBD_StdEPReq+0x14e>
 8008bb8:	2b03      	cmp	r3, #3
 8008bba:	d032      	beq.n	8008c22 <USBD_StdEPReq+0x1b2>
 8008bbc:	e097      	b.n	8008cee <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008bbe:	7bbb      	ldrb	r3, [r7, #14]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d007      	beq.n	8008bd4 <USBD_StdEPReq+0x164>
 8008bc4:	7bbb      	ldrb	r3, [r7, #14]
 8008bc6:	2b80      	cmp	r3, #128	; 0x80
 8008bc8:	d004      	beq.n	8008bd4 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008bca:	6839      	ldr	r1, [r7, #0]
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fbcb 	bl	8009368 <USBD_CtlError>
          break;
 8008bd2:	e091      	b.n	8008cf8 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bd4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da0b      	bge.n	8008bf4 <USBD_StdEPReq+0x184>
 8008bdc:	7bbb      	ldrb	r3, [r7, #14]
 8008bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008be2:	4613      	mov	r3, r2
 8008be4:	009b      	lsls	r3, r3, #2
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	3310      	adds	r3, #16
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	4413      	add	r3, r2
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	e00b      	b.n	8008c0c <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008bf4:	7bbb      	ldrb	r3, [r7, #14]
 8008bf6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008bfa:	4613      	mov	r3, r2
 8008bfc:	009b      	lsls	r3, r3, #2
 8008bfe:	4413      	add	r3, r2
 8008c00:	009b      	lsls	r3, r3, #2
 8008c02:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	4413      	add	r3, r2
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	2200      	movs	r2, #0
 8008c12:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2202      	movs	r2, #2
 8008c18:	4619      	mov	r1, r3
 8008c1a:	6878      	ldr	r0, [r7, #4]
 8008c1c:	f000 fc15 	bl	800944a <USBD_CtlSendData>
        break;
 8008c20:	e06a      	b.n	8008cf8 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008c22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	da11      	bge.n	8008c4e <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008c2a:	7bbb      	ldrb	r3, [r7, #14]
 8008c2c:	f003 020f 	and.w	r2, r3, #15
 8008c30:	6879      	ldr	r1, [r7, #4]
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	009b      	lsls	r3, r3, #2
 8008c3a:	440b      	add	r3, r1
 8008c3c:	3324      	adds	r3, #36	; 0x24
 8008c3e:	881b      	ldrh	r3, [r3, #0]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d117      	bne.n	8008c74 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008c44:	6839      	ldr	r1, [r7, #0]
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f000 fb8e 	bl	8009368 <USBD_CtlError>
            break;
 8008c4c:	e054      	b.n	8008cf8 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	6879      	ldr	r1, [r7, #4]
 8008c56:	4613      	mov	r3, r2
 8008c58:	009b      	lsls	r3, r3, #2
 8008c5a:	4413      	add	r3, r2
 8008c5c:	009b      	lsls	r3, r3, #2
 8008c5e:	440b      	add	r3, r1
 8008c60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008c64:	881b      	ldrh	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d104      	bne.n	8008c74 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008c6a:	6839      	ldr	r1, [r7, #0]
 8008c6c:	6878      	ldr	r0, [r7, #4]
 8008c6e:	f000 fb7b 	bl	8009368 <USBD_CtlError>
            break;
 8008c72:	e041      	b.n	8008cf8 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	da0b      	bge.n	8008c94 <USBD_StdEPReq+0x224>
 8008c7c:	7bbb      	ldrb	r3, [r7, #14]
 8008c7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008c82:	4613      	mov	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	4413      	add	r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	3310      	adds	r3, #16
 8008c8c:	687a      	ldr	r2, [r7, #4]
 8008c8e:	4413      	add	r3, r2
 8008c90:	3304      	adds	r3, #4
 8008c92:	e00b      	b.n	8008cac <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008c94:	7bbb      	ldrb	r3, [r7, #14]
 8008c96:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008c9a:	4613      	mov	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	4413      	add	r3, r2
 8008ca0:	009b      	lsls	r3, r3, #2
 8008ca2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008ca6:	687a      	ldr	r2, [r7, #4]
 8008ca8:	4413      	add	r3, r2
 8008caa:	3304      	adds	r3, #4
 8008cac:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008cae:	7bbb      	ldrb	r3, [r7, #14]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d002      	beq.n	8008cba <USBD_StdEPReq+0x24a>
 8008cb4:	7bbb      	ldrb	r3, [r7, #14]
 8008cb6:	2b80      	cmp	r3, #128	; 0x80
 8008cb8:	d103      	bne.n	8008cc2 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008cba:	68bb      	ldr	r3, [r7, #8]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	e00e      	b.n	8008ce0 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008cc2:	7bbb      	ldrb	r3, [r7, #14]
 8008cc4:	4619      	mov	r1, r3
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f001 f874 	bl	8009db4 <USBD_LL_IsStallEP>
 8008ccc:	4603      	mov	r3, r0
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	2201      	movs	r2, #1
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	e002      	b.n	8008ce0 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	2202      	movs	r2, #2
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fbaf 	bl	800944a <USBD_CtlSendData>
          break;
 8008cec:	e004      	b.n	8008cf8 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 fb39 	bl	8009368 <USBD_CtlError>
        break;
 8008cf6:	bf00      	nop
      }
      break;
 8008cf8:	e004      	b.n	8008d04 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008cfa:	6839      	ldr	r1, [r7, #0]
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f000 fb33 	bl	8009368 <USBD_CtlError>
      break;
 8008d02:	bf00      	nop
    }
    break;
 8008d04:	e004      	b.n	8008d10 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008d06:	6839      	ldr	r1, [r7, #0]
 8008d08:	6878      	ldr	r0, [r7, #4]
 8008d0a:	f000 fb2d 	bl	8009368 <USBD_CtlError>
    break;
 8008d0e:	bf00      	nop
  }

  return ret;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008d26:	2300      	movs	r3, #0
 8008d28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	885b      	ldrh	r3, [r3, #2]
 8008d36:	0a1b      	lsrs	r3, r3, #8
 8008d38:	b29b      	uxth	r3, r3
 8008d3a:	3b01      	subs	r3, #1
 8008d3c:	2b06      	cmp	r3, #6
 8008d3e:	f200 8128 	bhi.w	8008f92 <USBD_GetDescriptor+0x276>
 8008d42:	a201      	add	r2, pc, #4	; (adr r2, 8008d48 <USBD_GetDescriptor+0x2c>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008d65 	.word	0x08008d65
 8008d4c:	08008d7d 	.word	0x08008d7d
 8008d50:	08008dbd 	.word	0x08008dbd
 8008d54:	08008f93 	.word	0x08008f93
 8008d58:	08008f93 	.word	0x08008f93
 8008d5c:	08008f33 	.word	0x08008f33
 8008d60:	08008f5f 	.word	0x08008f5f
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	7c12      	ldrb	r2, [r2, #16]
 8008d70:	f107 0108 	add.w	r1, r7, #8
 8008d74:	4610      	mov	r0, r2
 8008d76:	4798      	blx	r3
 8008d78:	60f8      	str	r0, [r7, #12]
    break;
 8008d7a:	e112      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	7c1b      	ldrb	r3, [r3, #16]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d10d      	bne.n	8008da0 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d8c:	f107 0208 	add.w	r2, r7, #8
 8008d90:	4610      	mov	r0, r2
 8008d92:	4798      	blx	r3
 8008d94:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008d9e:	e100      	b.n	8008fa2 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	f107 0208 	add.w	r2, r7, #8
 8008dac:	4610      	mov	r0, r2
 8008dae:	4798      	blx	r3
 8008db0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	3301      	adds	r3, #1
 8008db6:	2202      	movs	r2, #2
 8008db8:	701a      	strb	r2, [r3, #0]
    break;
 8008dba:	e0f2      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	885b      	ldrh	r3, [r3, #2]
 8008dc0:	b2db      	uxtb	r3, r3
 8008dc2:	2b05      	cmp	r3, #5
 8008dc4:	f200 80ac 	bhi.w	8008f20 <USBD_GetDescriptor+0x204>
 8008dc8:	a201      	add	r2, pc, #4	; (adr r2, 8008dd0 <USBD_GetDescriptor+0xb4>)
 8008dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dce:	bf00      	nop
 8008dd0:	08008de9 	.word	0x08008de9
 8008dd4:	08008e1d 	.word	0x08008e1d
 8008dd8:	08008e51 	.word	0x08008e51
 8008ddc:	08008e85 	.word	0x08008e85
 8008de0:	08008eb9 	.word	0x08008eb9
 8008de4:	08008eed 	.word	0x08008eed
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dee:	685b      	ldr	r3, [r3, #4]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	7c12      	ldrb	r2, [r2, #16]
 8008e00:	f107 0108 	add.w	r1, r7, #8
 8008e04:	4610      	mov	r0, r2
 8008e06:	4798      	blx	r3
 8008e08:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e0a:	e091      	b.n	8008f30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e0c:	6839      	ldr	r1, [r7, #0]
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 faaa 	bl	8009368 <USBD_CtlError>
        err++;
 8008e14:	7afb      	ldrb	r3, [r7, #11]
 8008e16:	3301      	adds	r3, #1
 8008e18:	72fb      	strb	r3, [r7, #11]
      break;
 8008e1a:	e089      	b.n	8008f30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e22:	689b      	ldr	r3, [r3, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d00b      	beq.n	8008e40 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	687a      	ldr	r2, [r7, #4]
 8008e32:	7c12      	ldrb	r2, [r2, #16]
 8008e34:	f107 0108 	add.w	r1, r7, #8
 8008e38:	4610      	mov	r0, r2
 8008e3a:	4798      	blx	r3
 8008e3c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e3e:	e077      	b.n	8008f30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e40:	6839      	ldr	r1, [r7, #0]
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fa90 	bl	8009368 <USBD_CtlError>
        err++;
 8008e48:	7afb      	ldrb	r3, [r7, #11]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	72fb      	strb	r3, [r7, #11]
      break;
 8008e4e:	e06f      	b.n	8008f30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e56:	68db      	ldr	r3, [r3, #12]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d00b      	beq.n	8008e74 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e62:	68db      	ldr	r3, [r3, #12]
 8008e64:	687a      	ldr	r2, [r7, #4]
 8008e66:	7c12      	ldrb	r2, [r2, #16]
 8008e68:	f107 0108 	add.w	r1, r7, #8
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	4798      	blx	r3
 8008e70:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008e72:	e05d      	b.n	8008f30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008e74:	6839      	ldr	r1, [r7, #0]
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fa76 	bl	8009368 <USBD_CtlError>
        err++;
 8008e7c:	7afb      	ldrb	r3, [r7, #11]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	72fb      	strb	r3, [r7, #11]
      break;
 8008e82:	e055      	b.n	8008f30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e8a:	691b      	ldr	r3, [r3, #16]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d00b      	beq.n	8008ea8 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008e96:	691b      	ldr	r3, [r3, #16]
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	7c12      	ldrb	r2, [r2, #16]
 8008e9c:	f107 0108 	add.w	r1, r7, #8
 8008ea0:	4610      	mov	r0, r2
 8008ea2:	4798      	blx	r3
 8008ea4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008ea6:	e043      	b.n	8008f30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008ea8:	6839      	ldr	r1, [r7, #0]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f000 fa5c 	bl	8009368 <USBD_CtlError>
        err++;
 8008eb0:	7afb      	ldrb	r3, [r7, #11]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	72fb      	strb	r3, [r7, #11]
      break;
 8008eb6:	e03b      	b.n	8008f30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ebe:	695b      	ldr	r3, [r3, #20]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d00b      	beq.n	8008edc <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008eca:	695b      	ldr	r3, [r3, #20]
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	7c12      	ldrb	r2, [r2, #16]
 8008ed0:	f107 0108 	add.w	r1, r7, #8
 8008ed4:	4610      	mov	r0, r2
 8008ed6:	4798      	blx	r3
 8008ed8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008eda:	e029      	b.n	8008f30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008edc:	6839      	ldr	r1, [r7, #0]
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 fa42 	bl	8009368 <USBD_CtlError>
        err++;
 8008ee4:	7afb      	ldrb	r3, [r7, #11]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	72fb      	strb	r3, [r7, #11]
      break;
 8008eea:	e021      	b.n	8008f30 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00b      	beq.n	8008f10 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	687a      	ldr	r2, [r7, #4]
 8008f02:	7c12      	ldrb	r2, [r2, #16]
 8008f04:	f107 0108 	add.w	r1, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f0e:	e00f      	b.n	8008f30 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f10:	6839      	ldr	r1, [r7, #0]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f000 fa28 	bl	8009368 <USBD_CtlError>
        err++;
 8008f18:	7afb      	ldrb	r3, [r7, #11]
 8008f1a:	3301      	adds	r3, #1
 8008f1c:	72fb      	strb	r3, [r7, #11]
      break;
 8008f1e:	e007      	b.n	8008f30 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8008f20:	6839      	ldr	r1, [r7, #0]
 8008f22:	6878      	ldr	r0, [r7, #4]
 8008f24:	f000 fa20 	bl	8009368 <USBD_CtlError>
      err++;
 8008f28:	7afb      	ldrb	r3, [r7, #11]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8008f2e:	bf00      	nop
    }
    break;
 8008f30:	e037      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7c1b      	ldrb	r3, [r3, #16]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f42:	f107 0208 	add.w	r2, r7, #8
 8008f46:	4610      	mov	r0, r2
 8008f48:	4798      	blx	r3
 8008f4a:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f4c:	e029      	b.n	8008fa2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008f4e:	6839      	ldr	r1, [r7, #0]
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f000 fa09 	bl	8009368 <USBD_CtlError>
      err++;
 8008f56:	7afb      	ldrb	r3, [r7, #11]
 8008f58:	3301      	adds	r3, #1
 8008f5a:	72fb      	strb	r3, [r7, #11]
    break;
 8008f5c:	e021      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	7c1b      	ldrb	r3, [r3, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d10d      	bne.n	8008f82 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	f107 0208 	add.w	r2, r7, #8
 8008f72:	4610      	mov	r0, r2
 8008f74:	4798      	blx	r3
 8008f76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	3301      	adds	r3, #1
 8008f7c:	2207      	movs	r2, #7
 8008f7e:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8008f80:	e00f      	b.n	8008fa2 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8008f82:	6839      	ldr	r1, [r7, #0]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	f000 f9ef 	bl	8009368 <USBD_CtlError>
      err++;
 8008f8a:	7afb      	ldrb	r3, [r7, #11]
 8008f8c:	3301      	adds	r3, #1
 8008f8e:	72fb      	strb	r3, [r7, #11]
    break;
 8008f90:	e007      	b.n	8008fa2 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8008f92:	6839      	ldr	r1, [r7, #0]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f000 f9e7 	bl	8009368 <USBD_CtlError>
    err++;
 8008f9a:	7afb      	ldrb	r3, [r7, #11]
 8008f9c:	3301      	adds	r3, #1
 8008f9e:	72fb      	strb	r3, [r7, #11]
    break;
 8008fa0:	bf00      	nop
  }

  if (err != 0U)
 8008fa2:	7afb      	ldrb	r3, [r7, #11]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d11e      	bne.n	8008fe6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	88db      	ldrh	r3, [r3, #6]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d016      	beq.n	8008fde <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8008fb0:	893b      	ldrh	r3, [r7, #8]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d00e      	beq.n	8008fd4 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	88da      	ldrh	r2, [r3, #6]
 8008fba:	893b      	ldrh	r3, [r7, #8]
 8008fbc:	4293      	cmp	r3, r2
 8008fbe:	bf28      	it	cs
 8008fc0:	4613      	movcs	r3, r2
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8008fc6:	893b      	ldrh	r3, [r7, #8]
 8008fc8:	461a      	mov	r2, r3
 8008fca:	68f9      	ldr	r1, [r7, #12]
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 fa3c 	bl	800944a <USBD_CtlSendData>
 8008fd2:	e009      	b.n	8008fe8 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8008fd4:	6839      	ldr	r1, [r7, #0]
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f000 f9c6 	bl	8009368 <USBD_CtlError>
 8008fdc:	e004      	b.n	8008fe8 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f000 fa8d 	bl	80094fe <USBD_CtlSendStatus>
 8008fe4:	e000      	b.n	8008fe8 <USBD_GetDescriptor+0x2cc>
    return;
 8008fe6:	bf00      	nop
    }
  }
}
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop

08008ff0 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ff0:	b580      	push	{r7, lr}
 8008ff2:	b084      	sub	sp, #16
 8008ff4:	af00      	add	r7, sp, #0
 8008ff6:	6078      	str	r0, [r7, #4]
 8008ff8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	889b      	ldrh	r3, [r3, #4]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d130      	bne.n	8009064 <USBD_SetAddress+0x74>
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	88db      	ldrh	r3, [r3, #6]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d12c      	bne.n	8009064 <USBD_SetAddress+0x74>
 800900a:	683b      	ldr	r3, [r7, #0]
 800900c:	885b      	ldrh	r3, [r3, #2]
 800900e:	2b7f      	cmp	r3, #127	; 0x7f
 8009010:	d828      	bhi.n	8009064 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	885b      	ldrh	r3, [r3, #2]
 8009016:	b2db      	uxtb	r3, r3
 8009018:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800901c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009024:	2b03      	cmp	r3, #3
 8009026:	d104      	bne.n	8009032 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8009028:	6839      	ldr	r1, [r7, #0]
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 f99c 	bl	8009368 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009030:	e01c      	b.n	800906c <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	7bfa      	ldrb	r2, [r7, #15]
 8009036:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800903a:	7bfb      	ldrb	r3, [r7, #15]
 800903c:	4619      	mov	r1, r3
 800903e:	6878      	ldr	r0, [r7, #4]
 8009040:	f000 fee4 	bl	8009e0c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fa5a 	bl	80094fe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800904a:	7bfb      	ldrb	r3, [r7, #15]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d004      	beq.n	800905a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2202      	movs	r2, #2
 8009054:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009058:	e008      	b.n	800906c <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009062:	e003      	b.n	800906c <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009064:	6839      	ldr	r1, [r7, #0]
 8009066:	6878      	ldr	r0, [r7, #4]
 8009068:	f000 f97e 	bl	8009368 <USBD_CtlError>
  }
}
 800906c:	bf00      	nop
 800906e:	3710      	adds	r7, #16
 8009070:	46bd      	mov	sp, r7
 8009072:	bd80      	pop	{r7, pc}

08009074 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009074:	b580      	push	{r7, lr}
 8009076:	b084      	sub	sp, #16
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
 800907c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800907e:	2300      	movs	r3, #0
 8009080:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	885b      	ldrh	r3, [r3, #2]
 8009086:	b2da      	uxtb	r2, r3
 8009088:	4b4b      	ldr	r3, [pc, #300]	; (80091b8 <USBD_SetConfig+0x144>)
 800908a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800908c:	4b4a      	ldr	r3, [pc, #296]	; (80091b8 <USBD_SetConfig+0x144>)
 800908e:	781b      	ldrb	r3, [r3, #0]
 8009090:	2b01      	cmp	r3, #1
 8009092:	d905      	bls.n	80090a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009094:	6839      	ldr	r1, [r7, #0]
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 f966 	bl	8009368 <USBD_CtlError>
    return USBD_FAIL;
 800909c:	2303      	movs	r3, #3
 800909e:	e087      	b.n	80091b0 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a6:	2b02      	cmp	r3, #2
 80090a8:	d002      	beq.n	80090b0 <USBD_SetConfig+0x3c>
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d025      	beq.n	80090fa <USBD_SetConfig+0x86>
 80090ae:	e071      	b.n	8009194 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80090b0:	4b41      	ldr	r3, [pc, #260]	; (80091b8 <USBD_SetConfig+0x144>)
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d01c      	beq.n	80090f2 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80090b8:	4b3f      	ldr	r3, [pc, #252]	; (80091b8 <USBD_SetConfig+0x144>)
 80090ba:	781b      	ldrb	r3, [r3, #0]
 80090bc:	461a      	mov	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80090c2:	4b3d      	ldr	r3, [pc, #244]	; (80091b8 <USBD_SetConfig+0x144>)
 80090c4:	781b      	ldrb	r3, [r3, #0]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f7ff f9a7 	bl	800841c <USBD_SetClassConfig>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d004      	beq.n	80090e2 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 80090d8:	6839      	ldr	r1, [r7, #0]
 80090da:	6878      	ldr	r0, [r7, #4]
 80090dc:	f000 f944 	bl	8009368 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80090e0:	e065      	b.n	80091ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 fa0b 	bl	80094fe <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	2203      	movs	r2, #3
 80090ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80090f0:	e05d      	b.n	80091ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa03 	bl	80094fe <USBD_CtlSendStatus>
    break;
 80090f8:	e059      	b.n	80091ae <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 80090fa:	4b2f      	ldr	r3, [pc, #188]	; (80091b8 <USBD_SetConfig+0x144>)
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d112      	bne.n	8009128 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800910a:	4b2b      	ldr	r3, [pc, #172]	; (80091b8 <USBD_SetConfig+0x144>)
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009114:	4b28      	ldr	r3, [pc, #160]	; (80091b8 <USBD_SetConfig+0x144>)
 8009116:	781b      	ldrb	r3, [r3, #0]
 8009118:	4619      	mov	r1, r3
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7ff f99a 	bl	8008454 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 f9ec 	bl	80094fe <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009126:	e042      	b.n	80091ae <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8009128:	4b23      	ldr	r3, [pc, #140]	; (80091b8 <USBD_SetConfig+0x144>)
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	461a      	mov	r2, r3
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
 8009132:	429a      	cmp	r2, r3
 8009134:	d02a      	beq.n	800918c <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	4619      	mov	r1, r3
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff f988 	bl	8008454 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8009144:	4b1c      	ldr	r3, [pc, #112]	; (80091b8 <USBD_SetConfig+0x144>)
 8009146:	781b      	ldrb	r3, [r3, #0]
 8009148:	461a      	mov	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800914e:	4b1a      	ldr	r3, [pc, #104]	; (80091b8 <USBD_SetConfig+0x144>)
 8009150:	781b      	ldrb	r3, [r3, #0]
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7ff f961 	bl	800841c <USBD_SetClassConfig>
 800915a:	4603      	mov	r3, r0
 800915c:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800915e:	7bfb      	ldrb	r3, [r7, #15]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00f      	beq.n	8009184 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8009164:	6839      	ldr	r1, [r7, #0]
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 f8fe 	bl	8009368 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	685b      	ldr	r3, [r3, #4]
 8009170:	b2db      	uxtb	r3, r3
 8009172:	4619      	mov	r1, r3
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff f96d 	bl	8008454 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2202      	movs	r2, #2
 800917e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009182:	e014      	b.n	80091ae <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 f9ba 	bl	80094fe <USBD_CtlSendStatus>
    break;
 800918a:	e010      	b.n	80091ae <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f9b6 	bl	80094fe <USBD_CtlSendStatus>
    break;
 8009192:	e00c      	b.n	80091ae <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f8e6 	bl	8009368 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800919c:	4b06      	ldr	r3, [pc, #24]	; (80091b8 <USBD_SetConfig+0x144>)
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	4619      	mov	r1, r3
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f7ff f956 	bl	8008454 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80091a8:	2303      	movs	r3, #3
 80091aa:	73fb      	strb	r3, [r7, #15]
    break;
 80091ac:	bf00      	nop
  }

  return ret;
 80091ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3710      	adds	r7, #16
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20000234 	.word	0x20000234

080091bc <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
 80091c4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	88db      	ldrh	r3, [r3, #6]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d004      	beq.n	80091d8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f000 f8c9 	bl	8009368 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 80091d6:	e021      	b.n	800921c <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091de:	2b01      	cmp	r3, #1
 80091e0:	db17      	blt.n	8009212 <USBD_GetConfig+0x56>
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	dd02      	ble.n	80091ec <USBD_GetConfig+0x30>
 80091e6:	2b03      	cmp	r3, #3
 80091e8:	d00b      	beq.n	8009202 <USBD_GetConfig+0x46>
 80091ea:	e012      	b.n	8009212 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	3308      	adds	r3, #8
 80091f6:	2201      	movs	r2, #1
 80091f8:	4619      	mov	r1, r3
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f000 f925 	bl	800944a <USBD_CtlSendData>
      break;
 8009200:	e00c      	b.n	800921c <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	3304      	adds	r3, #4
 8009206:	2201      	movs	r2, #1
 8009208:	4619      	mov	r1, r3
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 f91d 	bl	800944a <USBD_CtlSendData>
      break;
 8009210:	e004      	b.n	800921c <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8009212:	6839      	ldr	r1, [r7, #0]
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f000 f8a7 	bl	8009368 <USBD_CtlError>
      break;
 800921a:	bf00      	nop
}
 800921c:	bf00      	nop
 800921e:	3708      	adds	r7, #8
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b082      	sub	sp, #8
 8009228:	af00      	add	r7, sp, #0
 800922a:	6078      	str	r0, [r7, #4]
 800922c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009234:	3b01      	subs	r3, #1
 8009236:	2b02      	cmp	r3, #2
 8009238:	d81e      	bhi.n	8009278 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	88db      	ldrh	r3, [r3, #6]
 800923e:	2b02      	cmp	r3, #2
 8009240:	d004      	beq.n	800924c <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8009242:	6839      	ldr	r1, [r7, #0]
 8009244:	6878      	ldr	r0, [r7, #4]
 8009246:	f000 f88f 	bl	8009368 <USBD_CtlError>
      break;
 800924a:	e01a      	b.n	8009282 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2201      	movs	r2, #1
 8009250:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	68db      	ldr	r3, [r3, #12]
 8009260:	f043 0202 	orr.w	r2, r3, #2
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	330c      	adds	r3, #12
 800926c:	2202      	movs	r2, #2
 800926e:	4619      	mov	r1, r3
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f000 f8ea 	bl	800944a <USBD_CtlSendData>
    break;
 8009276:	e004      	b.n	8009282 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8009278:	6839      	ldr	r1, [r7, #0]
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f874 	bl	8009368 <USBD_CtlError>
    break;
 8009280:	bf00      	nop
  }
}
 8009282:	bf00      	nop
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b082      	sub	sp, #8
 800928e:	af00      	add	r7, sp, #0
 8009290:	6078      	str	r0, [r7, #4]
 8009292:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	885b      	ldrh	r3, [r3, #2]
 8009298:	2b01      	cmp	r3, #1
 800929a:	d106      	bne.n	80092aa <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80092a4:	6878      	ldr	r0, [r7, #4]
 80092a6:	f000 f92a 	bl	80094fe <USBD_CtlSendStatus>
  }
}
 80092aa:	bf00      	nop
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}

080092b2 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
 80092ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092c2:	3b01      	subs	r3, #1
 80092c4:	2b02      	cmp	r3, #2
 80092c6:	d80b      	bhi.n	80092e0 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	885b      	ldrh	r3, [r3, #2]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	d10c      	bne.n	80092ea <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 f910 	bl	80094fe <USBD_CtlSendStatus>
      }
      break;
 80092de:	e004      	b.n	80092ea <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80092e0:	6839      	ldr	r1, [r7, #0]
 80092e2:	6878      	ldr	r0, [r7, #4]
 80092e4:	f000 f840 	bl	8009368 <USBD_CtlError>
      break;
 80092e8:	e000      	b.n	80092ec <USBD_ClrFeature+0x3a>
      break;
 80092ea:	bf00      	nop
  }
}
 80092ec:	bf00      	nop
 80092ee:	3708      	adds	r7, #8
 80092f0:	46bd      	mov	sp, r7
 80092f2:	bd80      	pop	{r7, pc}

080092f4 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b084      	sub	sp, #16
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	781a      	ldrb	r2, [r3, #0]
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3301      	adds	r3, #1
 800930e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	781a      	ldrb	r2, [r3, #0]
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3301      	adds	r3, #1
 800931c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800931e:	68f8      	ldr	r0, [r7, #12]
 8009320:	f7ff fad3 	bl	80088ca <SWAPBYTE>
 8009324:	4603      	mov	r3, r0
 8009326:	461a      	mov	r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	3301      	adds	r3, #1
 8009330:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3301      	adds	r3, #1
 8009336:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009338:	68f8      	ldr	r0, [r7, #12]
 800933a:	f7ff fac6 	bl	80088ca <SWAPBYTE>
 800933e:	4603      	mov	r3, r0
 8009340:	461a      	mov	r2, r3
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	3301      	adds	r3, #1
 800934a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	3301      	adds	r3, #1
 8009350:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009352:	68f8      	ldr	r0, [r7, #12]
 8009354:	f7ff fab9 	bl	80088ca <SWAPBYTE>
 8009358:	4603      	mov	r3, r0
 800935a:	461a      	mov	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	80da      	strh	r2, [r3, #6]
}
 8009360:	bf00      	nop
 8009362:	3710      	adds	r7, #16
 8009364:	46bd      	mov	sp, r7
 8009366:	bd80      	pop	{r7, pc}

08009368 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b082      	sub	sp, #8
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009372:	2180      	movs	r1, #128	; 0x80
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f000 fcdf 	bl	8009d38 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800937a:	2100      	movs	r1, #0
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 fcdb 	bl	8009d38 <USBD_LL_StallEP>
}
 8009382:	bf00      	nop
 8009384:	3708      	adds	r7, #8
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b086      	sub	sp, #24
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009396:	2300      	movs	r3, #0
 8009398:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d036      	beq.n	800940e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80093a4:	6938      	ldr	r0, [r7, #16]
 80093a6:	f000 f836 	bl	8009416 <USBD_GetLen>
 80093aa:	4603      	mov	r3, r0
 80093ac:	3301      	adds	r3, #1
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	005b      	lsls	r3, r3, #1
 80093b2:	b29a      	uxth	r2, r3
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80093b8:	7dfb      	ldrb	r3, [r7, #23]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	4413      	add	r3, r2
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	7812      	ldrb	r2, [r2, #0]
 80093c2:	701a      	strb	r2, [r3, #0]
  idx++;
 80093c4:	7dfb      	ldrb	r3, [r7, #23]
 80093c6:	3301      	adds	r3, #1
 80093c8:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80093ca:	7dfb      	ldrb	r3, [r7, #23]
 80093cc:	68ba      	ldr	r2, [r7, #8]
 80093ce:	4413      	add	r3, r2
 80093d0:	2203      	movs	r2, #3
 80093d2:	701a      	strb	r2, [r3, #0]
  idx++;
 80093d4:	7dfb      	ldrb	r3, [r7, #23]
 80093d6:	3301      	adds	r3, #1
 80093d8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80093da:	e013      	b.n	8009404 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80093dc:	7dfb      	ldrb	r3, [r7, #23]
 80093de:	68ba      	ldr	r2, [r7, #8]
 80093e0:	4413      	add	r3, r2
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	7812      	ldrb	r2, [r2, #0]
 80093e6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	3301      	adds	r3, #1
 80093ec:	613b      	str	r3, [r7, #16]
    idx++;
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	3301      	adds	r3, #1
 80093f2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80093f4:	7dfb      	ldrb	r3, [r7, #23]
 80093f6:	68ba      	ldr	r2, [r7, #8]
 80093f8:	4413      	add	r3, r2
 80093fa:	2200      	movs	r2, #0
 80093fc:	701a      	strb	r2, [r3, #0]
    idx++;
 80093fe:	7dfb      	ldrb	r3, [r7, #23]
 8009400:	3301      	adds	r3, #1
 8009402:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	781b      	ldrb	r3, [r3, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d1e7      	bne.n	80093dc <USBD_GetString+0x52>
 800940c:	e000      	b.n	8009410 <USBD_GetString+0x86>
    return;
 800940e:	bf00      	nop
  }
}
 8009410:	3718      	adds	r7, #24
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009416:	b480      	push	{r7}
 8009418:	b085      	sub	sp, #20
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800941e:	2300      	movs	r3, #0
 8009420:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009426:	e005      	b.n	8009434 <USBD_GetLen+0x1e>
  {
    len++;
 8009428:	7bfb      	ldrb	r3, [r7, #15]
 800942a:	3301      	adds	r3, #1
 800942c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	3301      	adds	r3, #1
 8009432:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009434:	68bb      	ldr	r3, [r7, #8]
 8009436:	781b      	ldrb	r3, [r3, #0]
 8009438:	2b00      	cmp	r3, #0
 800943a:	d1f5      	bne.n	8009428 <USBD_GetLen+0x12>
  }

  return len;
 800943c:	7bfb      	ldrb	r3, [r7, #15]
}
 800943e:	4618      	mov	r0, r3
 8009440:	3714      	adds	r7, #20
 8009442:	46bd      	mov	sp, r7
 8009444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009448:	4770      	bx	lr

0800944a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	60f8      	str	r0, [r7, #12]
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	2202      	movs	r2, #2
 800945a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	687a      	ldr	r2, [r7, #4]
 8009462:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	2100      	movs	r1, #0
 8009470:	68f8      	ldr	r0, [r7, #12]
 8009472:	f000 fcea 	bl	8009e4a <USBD_LL_Transmit>

  return USBD_OK;
 8009476:	2300      	movs	r3, #0
}
 8009478:	4618      	mov	r0, r3
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	68ba      	ldr	r2, [r7, #8]
 8009490:	2100      	movs	r1, #0
 8009492:	68f8      	ldr	r0, [r7, #12]
 8009494:	f000 fcd9 	bl	8009e4a <USBD_LL_Transmit>

  return USBD_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b084      	sub	sp, #16
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	60f8      	str	r0, [r7, #12]
 80094aa:	60b9      	str	r1, [r7, #8]
 80094ac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2203      	movs	r2, #3
 80094b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	687a      	ldr	r2, [r7, #4]
 80094ba:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	687a      	ldr	r2, [r7, #4]
 80094c2:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	68ba      	ldr	r2, [r7, #8]
 80094ca:	2100      	movs	r1, #0
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f000 fcdd 	bl	8009e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	60f8      	str	r0, [r7, #12]
 80094e4:	60b9      	str	r1, [r7, #8]
 80094e6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	68ba      	ldr	r2, [r7, #8]
 80094ec:	2100      	movs	r1, #0
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	f000 fccc 	bl	8009e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80094f4:	2300      	movs	r3, #0
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3710      	adds	r7, #16
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}

080094fe <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b082      	sub	sp, #8
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	2204      	movs	r2, #4
 800950a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800950e:	2300      	movs	r3, #0
 8009510:	2200      	movs	r2, #0
 8009512:	2100      	movs	r1, #0
 8009514:	6878      	ldr	r0, [r7, #4]
 8009516:	f000 fc98 	bl	8009e4a <USBD_LL_Transmit>

  return USBD_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3708      	adds	r7, #8
 8009520:	46bd      	mov	sp, r7
 8009522:	bd80      	pop	{r7, pc}

08009524 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2205      	movs	r2, #5
 8009530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009534:	2300      	movs	r3, #0
 8009536:	2200      	movs	r2, #0
 8009538:	2100      	movs	r1, #0
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f000 fca6 	bl	8009e8c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009550:	2200      	movs	r2, #0
 8009552:	4912      	ldr	r1, [pc, #72]	; (800959c <MX_USB_DEVICE_Init+0x50>)
 8009554:	4812      	ldr	r0, [pc, #72]	; (80095a0 <MX_USB_DEVICE_Init+0x54>)
 8009556:	f7fe fef3 	bl	8008340 <USBD_Init>
 800955a:	4603      	mov	r3, r0
 800955c:	2b00      	cmp	r3, #0
 800955e:	d001      	beq.n	8009564 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009560:	f7f8 f9bc 	bl	80018dc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009564:	490f      	ldr	r1, [pc, #60]	; (80095a4 <MX_USB_DEVICE_Init+0x58>)
 8009566:	480e      	ldr	r0, [pc, #56]	; (80095a0 <MX_USB_DEVICE_Init+0x54>)
 8009568:	f7fe ff20 	bl	80083ac <USBD_RegisterClass>
 800956c:	4603      	mov	r3, r0
 800956e:	2b00      	cmp	r3, #0
 8009570:	d001      	beq.n	8009576 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009572:	f7f8 f9b3 	bl	80018dc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009576:	490c      	ldr	r1, [pc, #48]	; (80095a8 <MX_USB_DEVICE_Init+0x5c>)
 8009578:	4809      	ldr	r0, [pc, #36]	; (80095a0 <MX_USB_DEVICE_Init+0x54>)
 800957a:	f7fe fe45 	bl	8008208 <USBD_CDC_RegisterInterface>
 800957e:	4603      	mov	r3, r0
 8009580:	2b00      	cmp	r3, #0
 8009582:	d001      	beq.n	8009588 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009584:	f7f8 f9aa 	bl	80018dc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009588:	4805      	ldr	r0, [pc, #20]	; (80095a0 <MX_USB_DEVICE_Init+0x54>)
 800958a:	f7fe ff30 	bl	80083ee <USBD_Start>
 800958e:	4603      	mov	r3, r0
 8009590:	2b00      	cmp	r3, #0
 8009592:	d001      	beq.n	8009598 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009594:	f7f8 f9a2 	bl	80018dc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009598:	bf00      	nop
 800959a:	bd80      	pop	{r7, pc}
 800959c:	20000160 	.word	0x20000160
 80095a0:	200008f0 	.word	0x200008f0
 80095a4:	20000048 	.word	0x20000048
 80095a8:	2000014c 	.word	0x2000014c

080095ac <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80095b0:	2200      	movs	r2, #0
 80095b2:	4905      	ldr	r1, [pc, #20]	; (80095c8 <CDC_Init_FS+0x1c>)
 80095b4:	4805      	ldr	r0, [pc, #20]	; (80095cc <CDC_Init_FS+0x20>)
 80095b6:	f7fe fe3c 	bl	8008232 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80095ba:	4905      	ldr	r1, [pc, #20]	; (80095d0 <CDC_Init_FS+0x24>)
 80095bc:	4803      	ldr	r0, [pc, #12]	; (80095cc <CDC_Init_FS+0x20>)
 80095be:	f7fe fe51 	bl	8008264 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80095c2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80095c4:	4618      	mov	r0, r3
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	200013c0 	.word	0x200013c0
 80095cc:	200008f0 	.word	0x200008f0
 80095d0:	20000bc0 	.word	0x20000bc0

080095d4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80095d4:	b480      	push	{r7}
 80095d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80095d8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80095da:	4618      	mov	r0, r3
 80095dc:	46bd      	mov	sp, r7
 80095de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e2:	4770      	bx	lr

080095e4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	4603      	mov	r3, r0
 80095ec:	6039      	str	r1, [r7, #0]
 80095ee:	71fb      	strb	r3, [r7, #7]
 80095f0:	4613      	mov	r3, r2
 80095f2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80095f4:	79fb      	ldrb	r3, [r7, #7]
 80095f6:	2b23      	cmp	r3, #35	; 0x23
 80095f8:	d84a      	bhi.n	8009690 <CDC_Control_FS+0xac>
 80095fa:	a201      	add	r2, pc, #4	; (adr r2, 8009600 <CDC_Control_FS+0x1c>)
 80095fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009600:	08009691 	.word	0x08009691
 8009604:	08009691 	.word	0x08009691
 8009608:	08009691 	.word	0x08009691
 800960c:	08009691 	.word	0x08009691
 8009610:	08009691 	.word	0x08009691
 8009614:	08009691 	.word	0x08009691
 8009618:	08009691 	.word	0x08009691
 800961c:	08009691 	.word	0x08009691
 8009620:	08009691 	.word	0x08009691
 8009624:	08009691 	.word	0x08009691
 8009628:	08009691 	.word	0x08009691
 800962c:	08009691 	.word	0x08009691
 8009630:	08009691 	.word	0x08009691
 8009634:	08009691 	.word	0x08009691
 8009638:	08009691 	.word	0x08009691
 800963c:	08009691 	.word	0x08009691
 8009640:	08009691 	.word	0x08009691
 8009644:	08009691 	.word	0x08009691
 8009648:	08009691 	.word	0x08009691
 800964c:	08009691 	.word	0x08009691
 8009650:	08009691 	.word	0x08009691
 8009654:	08009691 	.word	0x08009691
 8009658:	08009691 	.word	0x08009691
 800965c:	08009691 	.word	0x08009691
 8009660:	08009691 	.word	0x08009691
 8009664:	08009691 	.word	0x08009691
 8009668:	08009691 	.word	0x08009691
 800966c:	08009691 	.word	0x08009691
 8009670:	08009691 	.word	0x08009691
 8009674:	08009691 	.word	0x08009691
 8009678:	08009691 	.word	0x08009691
 800967c:	08009691 	.word	0x08009691
 8009680:	08009691 	.word	0x08009691
 8009684:	08009691 	.word	0x08009691
 8009688:	08009691 	.word	0x08009691
 800968c:	08009691 	.word	0x08009691
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009690:	bf00      	nop
  }

  return (USBD_OK);
 8009692:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009694:	4618      	mov	r0, r3
 8009696:	370c      	adds	r7, #12
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	4805      	ldr	r0, [pc, #20]	; (80096c4 <CDC_Receive_FS+0x24>)
 80096ae:	f7fe fdd9 	bl	8008264 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80096b2:	4804      	ldr	r0, [pc, #16]	; (80096c4 <CDC_Receive_FS+0x24>)
 80096b4:	f7fe fe1a 	bl	80082ec <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80096b8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
 80096c2:	bf00      	nop
 80096c4:	200008f0 	.word	0x200008f0

080096c8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	460b      	mov	r3, r1
 80096d2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80096d4:	2300      	movs	r3, #0
 80096d6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80096d8:	4b0d      	ldr	r3, [pc, #52]	; (8009710 <CDC_Transmit_FS+0x48>)
 80096da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80096de:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80096ea:	2301      	movs	r3, #1
 80096ec:	e00b      	b.n	8009706 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80096ee:	887b      	ldrh	r3, [r7, #2]
 80096f0:	461a      	mov	r2, r3
 80096f2:	6879      	ldr	r1, [r7, #4]
 80096f4:	4806      	ldr	r0, [pc, #24]	; (8009710 <CDC_Transmit_FS+0x48>)
 80096f6:	f7fe fd9c 	bl	8008232 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80096fa:	4805      	ldr	r0, [pc, #20]	; (8009710 <CDC_Transmit_FS+0x48>)
 80096fc:	f7fe fdc6 	bl	800828c <USBD_CDC_TransmitPacket>
 8009700:	4603      	mov	r3, r0
 8009702:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009704:	7bfb      	ldrb	r3, [r7, #15]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3710      	adds	r7, #16
 800970a:	46bd      	mov	sp, r7
 800970c:	bd80      	pop	{r7, pc}
 800970e:	bf00      	nop
 8009710:	200008f0 	.word	0x200008f0

08009714 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	60b9      	str	r1, [r7, #8]
 800971e:	4613      	mov	r3, r2
 8009720:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009722:	2300      	movs	r3, #0
 8009724:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009726:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800972a:	4618      	mov	r0, r3
 800972c:	371c      	adds	r7, #28
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
	...

08009738 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	4603      	mov	r3, r0
 8009740:	6039      	str	r1, [r7, #0]
 8009742:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009744:	683b      	ldr	r3, [r7, #0]
 8009746:	2212      	movs	r2, #18
 8009748:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800974a:	4b03      	ldr	r3, [pc, #12]	; (8009758 <USBD_FS_DeviceDescriptor+0x20>)
}
 800974c:	4618      	mov	r0, r3
 800974e:	370c      	adds	r7, #12
 8009750:	46bd      	mov	sp, r7
 8009752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009756:	4770      	bx	lr
 8009758:	2000017c 	.word	0x2000017c

0800975c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2204      	movs	r2, #4
 800976c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800976e:	4b03      	ldr	r3, [pc, #12]	; (800977c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009770:	4618      	mov	r0, r3
 8009772:	370c      	adds	r7, #12
 8009774:	46bd      	mov	sp, r7
 8009776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977a:	4770      	bx	lr
 800977c:	20000190 	.word	0x20000190

08009780 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	4603      	mov	r3, r0
 8009788:	6039      	str	r1, [r7, #0]
 800978a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d105      	bne.n	800979e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	4907      	ldr	r1, [pc, #28]	; (80097b4 <USBD_FS_ProductStrDescriptor+0x34>)
 8009796:	4808      	ldr	r0, [pc, #32]	; (80097b8 <USBD_FS_ProductStrDescriptor+0x38>)
 8009798:	f7ff fdf7 	bl	800938a <USBD_GetString>
 800979c:	e004      	b.n	80097a8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800979e:	683a      	ldr	r2, [r7, #0]
 80097a0:	4904      	ldr	r1, [pc, #16]	; (80097b4 <USBD_FS_ProductStrDescriptor+0x34>)
 80097a2:	4805      	ldr	r0, [pc, #20]	; (80097b8 <USBD_FS_ProductStrDescriptor+0x38>)
 80097a4:	f7ff fdf1 	bl	800938a <USBD_GetString>
  }
  return USBD_StrDesc;
 80097a8:	4b02      	ldr	r3, [pc, #8]	; (80097b4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20001bc0 	.word	0x20001bc0
 80097b8:	0800b828 	.word	0x0800b828

080097bc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b082      	sub	sp, #8
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	4603      	mov	r3, r0
 80097c4:	6039      	str	r1, [r7, #0]
 80097c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80097c8:	683a      	ldr	r2, [r7, #0]
 80097ca:	4904      	ldr	r1, [pc, #16]	; (80097dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80097cc:	4804      	ldr	r0, [pc, #16]	; (80097e0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80097ce:	f7ff fddc 	bl	800938a <USBD_GetString>
  return USBD_StrDesc;
 80097d2:	4b02      	ldr	r3, [pc, #8]	; (80097dc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	20001bc0 	.word	0x20001bc0
 80097e0:	0800b840 	.word	0x0800b840

080097e4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	4603      	mov	r3, r0
 80097ec:	6039      	str	r1, [r7, #0]
 80097ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	221a      	movs	r2, #26
 80097f4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80097f6:	f000 f843 	bl	8009880 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80097fa:	4b02      	ldr	r3, [pc, #8]	; (8009804 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80097fc:	4618      	mov	r0, r3
 80097fe:	3708      	adds	r7, #8
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	20000194 	.word	0x20000194

08009808 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
 800980e:	4603      	mov	r3, r0
 8009810:	6039      	str	r1, [r7, #0]
 8009812:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009814:	79fb      	ldrb	r3, [r7, #7]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d105      	bne.n	8009826 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800981a:	683a      	ldr	r2, [r7, #0]
 800981c:	4907      	ldr	r1, [pc, #28]	; (800983c <USBD_FS_ConfigStrDescriptor+0x34>)
 800981e:	4808      	ldr	r0, [pc, #32]	; (8009840 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009820:	f7ff fdb3 	bl	800938a <USBD_GetString>
 8009824:	e004      	b.n	8009830 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009826:	683a      	ldr	r2, [r7, #0]
 8009828:	4904      	ldr	r1, [pc, #16]	; (800983c <USBD_FS_ConfigStrDescriptor+0x34>)
 800982a:	4805      	ldr	r0, [pc, #20]	; (8009840 <USBD_FS_ConfigStrDescriptor+0x38>)
 800982c:	f7ff fdad 	bl	800938a <USBD_GetString>
  }
  return USBD_StrDesc;
 8009830:	4b02      	ldr	r3, [pc, #8]	; (800983c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	20001bc0 	.word	0x20001bc0
 8009840:	0800b854 	.word	0x0800b854

08009844 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009844:	b580      	push	{r7, lr}
 8009846:	b082      	sub	sp, #8
 8009848:	af00      	add	r7, sp, #0
 800984a:	4603      	mov	r3, r0
 800984c:	6039      	str	r1, [r7, #0]
 800984e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009850:	79fb      	ldrb	r3, [r7, #7]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d105      	bne.n	8009862 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009856:	683a      	ldr	r2, [r7, #0]
 8009858:	4907      	ldr	r1, [pc, #28]	; (8009878 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800985a:	4808      	ldr	r0, [pc, #32]	; (800987c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800985c:	f7ff fd95 	bl	800938a <USBD_GetString>
 8009860:	e004      	b.n	800986c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	4904      	ldr	r1, [pc, #16]	; (8009878 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009866:	4805      	ldr	r0, [pc, #20]	; (800987c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009868:	f7ff fd8f 	bl	800938a <USBD_GetString>
  }
  return USBD_StrDesc;
 800986c:	4b02      	ldr	r3, [pc, #8]	; (8009878 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20001bc0 	.word	0x20001bc0
 800987c:	0800b860 	.word	0x0800b860

08009880 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b084      	sub	sp, #16
 8009884:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009886:	4b0f      	ldr	r3, [pc, #60]	; (80098c4 <Get_SerialNum+0x44>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800988c:	4b0e      	ldr	r3, [pc, #56]	; (80098c8 <Get_SerialNum+0x48>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009892:	4b0e      	ldr	r3, [pc, #56]	; (80098cc <Get_SerialNum+0x4c>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009898:	68fa      	ldr	r2, [r7, #12]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	4413      	add	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d009      	beq.n	80098ba <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80098a6:	2208      	movs	r2, #8
 80098a8:	4909      	ldr	r1, [pc, #36]	; (80098d0 <Get_SerialNum+0x50>)
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f814 	bl	80098d8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80098b0:	2204      	movs	r2, #4
 80098b2:	4908      	ldr	r1, [pc, #32]	; (80098d4 <Get_SerialNum+0x54>)
 80098b4:	68b8      	ldr	r0, [r7, #8]
 80098b6:	f000 f80f 	bl	80098d8 <IntToUnicode>
  }
}
 80098ba:	bf00      	nop
 80098bc:	3710      	adds	r7, #16
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}
 80098c2:	bf00      	nop
 80098c4:	1fff7a10 	.word	0x1fff7a10
 80098c8:	1fff7a14 	.word	0x1fff7a14
 80098cc:	1fff7a18 	.word	0x1fff7a18
 80098d0:	20000196 	.word	0x20000196
 80098d4:	200001a6 	.word	0x200001a6

080098d8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80098d8:	b480      	push	{r7}
 80098da:	b087      	sub	sp, #28
 80098dc:	af00      	add	r7, sp, #0
 80098de:	60f8      	str	r0, [r7, #12]
 80098e0:	60b9      	str	r1, [r7, #8]
 80098e2:	4613      	mov	r3, r2
 80098e4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80098e6:	2300      	movs	r3, #0
 80098e8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80098ea:	2300      	movs	r3, #0
 80098ec:	75fb      	strb	r3, [r7, #23]
 80098ee:	e027      	b.n	8009940 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	0f1b      	lsrs	r3, r3, #28
 80098f4:	2b09      	cmp	r3, #9
 80098f6:	d80b      	bhi.n	8009910 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	0f1b      	lsrs	r3, r3, #28
 80098fc:	b2da      	uxtb	r2, r3
 80098fe:	7dfb      	ldrb	r3, [r7, #23]
 8009900:	005b      	lsls	r3, r3, #1
 8009902:	4619      	mov	r1, r3
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	440b      	add	r3, r1
 8009908:	3230      	adds	r2, #48	; 0x30
 800990a:	b2d2      	uxtb	r2, r2
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	e00a      	b.n	8009926 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	0f1b      	lsrs	r3, r3, #28
 8009914:	b2da      	uxtb	r2, r3
 8009916:	7dfb      	ldrb	r3, [r7, #23]
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	4619      	mov	r1, r3
 800991c:	68bb      	ldr	r3, [r7, #8]
 800991e:	440b      	add	r3, r1
 8009920:	3237      	adds	r2, #55	; 0x37
 8009922:	b2d2      	uxtb	r2, r2
 8009924:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	011b      	lsls	r3, r3, #4
 800992a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800992c:	7dfb      	ldrb	r3, [r7, #23]
 800992e:	005b      	lsls	r3, r3, #1
 8009930:	3301      	adds	r3, #1
 8009932:	68ba      	ldr	r2, [r7, #8]
 8009934:	4413      	add	r3, r2
 8009936:	2200      	movs	r2, #0
 8009938:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800993a:	7dfb      	ldrb	r3, [r7, #23]
 800993c:	3301      	adds	r3, #1
 800993e:	75fb      	strb	r3, [r7, #23]
 8009940:	7dfa      	ldrb	r2, [r7, #23]
 8009942:	79fb      	ldrb	r3, [r7, #7]
 8009944:	429a      	cmp	r2, r3
 8009946:	d3d3      	bcc.n	80098f0 <IntToUnicode+0x18>
  }
}
 8009948:	bf00      	nop
 800994a:	371c      	adds	r7, #28
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b08a      	sub	sp, #40	; 0x28
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800995c:	f107 0314 	add.w	r3, r7, #20
 8009960:	2200      	movs	r2, #0
 8009962:	601a      	str	r2, [r3, #0]
 8009964:	605a      	str	r2, [r3, #4]
 8009966:	609a      	str	r2, [r3, #8]
 8009968:	60da      	str	r2, [r3, #12]
 800996a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009974:	d13a      	bne.n	80099ec <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009976:	2300      	movs	r3, #0
 8009978:	613b      	str	r3, [r7, #16]
 800997a:	4b1e      	ldr	r3, [pc, #120]	; (80099f4 <HAL_PCD_MspInit+0xa0>)
 800997c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800997e:	4a1d      	ldr	r2, [pc, #116]	; (80099f4 <HAL_PCD_MspInit+0xa0>)
 8009980:	f043 0301 	orr.w	r3, r3, #1
 8009984:	6313      	str	r3, [r2, #48]	; 0x30
 8009986:	4b1b      	ldr	r3, [pc, #108]	; (80099f4 <HAL_PCD_MspInit+0xa0>)
 8009988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800998a:	f003 0301 	and.w	r3, r3, #1
 800998e:	613b      	str	r3, [r7, #16]
 8009990:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009992:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009998:	2302      	movs	r3, #2
 800999a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800999c:	2300      	movs	r3, #0
 800999e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80099a0:	2303      	movs	r3, #3
 80099a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80099a4:	230a      	movs	r3, #10
 80099a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80099a8:	f107 0314 	add.w	r3, r7, #20
 80099ac:	4619      	mov	r1, r3
 80099ae:	4812      	ldr	r0, [pc, #72]	; (80099f8 <HAL_PCD_MspInit+0xa4>)
 80099b0:	f7f9 face 	bl	8002f50 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80099b4:	4b0f      	ldr	r3, [pc, #60]	; (80099f4 <HAL_PCD_MspInit+0xa0>)
 80099b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80099b8:	4a0e      	ldr	r2, [pc, #56]	; (80099f4 <HAL_PCD_MspInit+0xa0>)
 80099ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099be:	6353      	str	r3, [r2, #52]	; 0x34
 80099c0:	2300      	movs	r3, #0
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	4b0b      	ldr	r3, [pc, #44]	; (80099f4 <HAL_PCD_MspInit+0xa0>)
 80099c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c8:	4a0a      	ldr	r2, [pc, #40]	; (80099f4 <HAL_PCD_MspInit+0xa0>)
 80099ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80099ce:	6453      	str	r3, [r2, #68]	; 0x44
 80099d0:	4b08      	ldr	r3, [pc, #32]	; (80099f4 <HAL_PCD_MspInit+0xa0>)
 80099d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80099d8:	60fb      	str	r3, [r7, #12]
 80099da:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80099dc:	2200      	movs	r2, #0
 80099de:	2100      	movs	r1, #0
 80099e0:	2043      	movs	r0, #67	; 0x43
 80099e2:	f7f8 fe80 	bl	80026e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80099e6:	2043      	movs	r0, #67	; 0x43
 80099e8:	f7f8 fe99 	bl	800271e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80099ec:	bf00      	nop
 80099ee:	3728      	adds	r7, #40	; 0x28
 80099f0:	46bd      	mov	sp, r7
 80099f2:	bd80      	pop	{r7, pc}
 80099f4:	40023800 	.word	0x40023800
 80099f8:	40020000 	.word	0x40020000

080099fc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80099fc:	b580      	push	{r7, lr}
 80099fe:	b082      	sub	sp, #8
 8009a00:	af00      	add	r7, sp, #0
 8009a02:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009a10:	4619      	mov	r1, r3
 8009a12:	4610      	mov	r0, r2
 8009a14:	f7fe fd36 	bl	8008484 <USBD_LL_SetupStage>
}
 8009a18:	bf00      	nop
 8009a1a:	3708      	adds	r7, #8
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b082      	sub	sp, #8
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
 8009a28:	460b      	mov	r3, r1
 8009a2a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a32:	78fa      	ldrb	r2, [r7, #3]
 8009a34:	6879      	ldr	r1, [r7, #4]
 8009a36:	4613      	mov	r3, r2
 8009a38:	00db      	lsls	r3, r3, #3
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	440b      	add	r3, r1
 8009a40:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a44:	681a      	ldr	r2, [r3, #0]
 8009a46:	78fb      	ldrb	r3, [r7, #3]
 8009a48:	4619      	mov	r1, r3
 8009a4a:	f7fe fd6e 	bl	800852a <USBD_LL_DataOutStage>
}
 8009a4e:	bf00      	nop
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	460b      	mov	r3, r1
 8009a60:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009a68:	78fa      	ldrb	r2, [r7, #3]
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	4613      	mov	r3, r2
 8009a6e:	00db      	lsls	r3, r3, #3
 8009a70:	1a9b      	subs	r3, r3, r2
 8009a72:	009b      	lsls	r3, r3, #2
 8009a74:	440b      	add	r3, r1
 8009a76:	3348      	adds	r3, #72	; 0x48
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	78fb      	ldrb	r3, [r7, #3]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f7fe fdb7 	bl	80085f0 <USBD_LL_DataInStage>
}
 8009a82:	bf00      	nop
 8009a84:	3708      	adds	r7, #8
 8009a86:	46bd      	mov	sp, r7
 8009a88:	bd80      	pop	{r7, pc}

08009a8a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009a8a:	b580      	push	{r7, lr}
 8009a8c:	b082      	sub	sp, #8
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009a98:	4618      	mov	r0, r3
 8009a9a:	f7fe febb 	bl	8008814 <USBD_LL_SOF>
}
 8009a9e:	bf00      	nop
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}

08009aa6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009aa6:	b580      	push	{r7, lr}
 8009aa8:	b084      	sub	sp, #16
 8009aaa:	af00      	add	r7, sp, #0
 8009aac:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	68db      	ldr	r3, [r3, #12]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d102      	bne.n	8009ac0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]
 8009abe:	e008      	b.n	8009ad2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	68db      	ldr	r3, [r3, #12]
 8009ac4:	2b02      	cmp	r3, #2
 8009ac6:	d102      	bne.n	8009ace <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73fb      	strb	r3, [r7, #15]
 8009acc:	e001      	b.n	8009ad2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009ace:	f7f7 ff05 	bl	80018dc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ad8:	7bfa      	ldrb	r2, [r7, #15]
 8009ada:	4611      	mov	r1, r2
 8009adc:	4618      	mov	r0, r3
 8009ade:	f7fe fe5e 	bl	800879e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ae8:	4618      	mov	r0, r3
 8009aea:	f7fe fe17 	bl	800871c <USBD_LL_Reset>
}
 8009aee:	bf00      	nop
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
	...

08009af8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b082      	sub	sp, #8
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7fe fe59 	bl	80087be <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	687a      	ldr	r2, [r7, #4]
 8009b18:	6812      	ldr	r2, [r2, #0]
 8009b1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009b1e:	f043 0301 	orr.w	r3, r3, #1
 8009b22:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6a1b      	ldr	r3, [r3, #32]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d005      	beq.n	8009b38 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009b2c:	4b04      	ldr	r3, [pc, #16]	; (8009b40 <HAL_PCD_SuspendCallback+0x48>)
 8009b2e:	691b      	ldr	r3, [r3, #16]
 8009b30:	4a03      	ldr	r2, [pc, #12]	; (8009b40 <HAL_PCD_SuspendCallback+0x48>)
 8009b32:	f043 0306 	orr.w	r3, r3, #6
 8009b36:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009b38:	bf00      	nop
 8009b3a:	3708      	adds	r7, #8
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	e000ed00 	.word	0xe000ed00

08009b44 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b082      	sub	sp, #8
 8009b48:	af00      	add	r7, sp, #0
 8009b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b52:	4618      	mov	r0, r3
 8009b54:	f7fe fe48 	bl	80087e8 <USBD_LL_Resume>
}
 8009b58:	bf00      	nop
 8009b5a:	3708      	adds	r7, #8
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}

08009b60 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b082      	sub	sp, #8
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b72:	78fa      	ldrb	r2, [r7, #3]
 8009b74:	4611      	mov	r1, r2
 8009b76:	4618      	mov	r0, r3
 8009b78:	f7fe fe73 	bl	8008862 <USBD_LL_IsoOUTIncomplete>
}
 8009b7c:	bf00      	nop
 8009b7e:	3708      	adds	r7, #8
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}

08009b84 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	460b      	mov	r3, r1
 8009b8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009b96:	78fa      	ldrb	r2, [r7, #3]
 8009b98:	4611      	mov	r1, r2
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7fe fe54 	bl	8008848 <USBD_LL_IsoINIncomplete>
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}

08009ba8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	f7fe fe60 	bl	800887c <USBD_LL_DevConnected>
}
 8009bbc:	bf00      	nop
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f7fe fe5d 	bl	8008892 <USBD_LL_DevDisconnected>
}
 8009bd8:	bf00      	nop
 8009bda:	3708      	adds	r7, #8
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	bd80      	pop	{r7, pc}

08009be0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b082      	sub	sp, #8
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	781b      	ldrb	r3, [r3, #0]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d13c      	bne.n	8009c6a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009bf0:	4a20      	ldr	r2, [pc, #128]	; (8009c74 <USBD_LL_Init+0x94>)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	4a1e      	ldr	r2, [pc, #120]	; (8009c74 <USBD_LL_Init+0x94>)
 8009bfc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009c00:	4b1c      	ldr	r3, [pc, #112]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009c06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009c08:	4b1a      	ldr	r3, [pc, #104]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c0a:	2204      	movs	r2, #4
 8009c0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009c0e:	4b19      	ldr	r3, [pc, #100]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c10:	2202      	movs	r2, #2
 8009c12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009c14:	4b17      	ldr	r3, [pc, #92]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c16:	2200      	movs	r2, #0
 8009c18:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009c1a:	4b16      	ldr	r3, [pc, #88]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c1c:	2202      	movs	r2, #2
 8009c1e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009c20:	4b14      	ldr	r3, [pc, #80]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c22:	2200      	movs	r2, #0
 8009c24:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009c26:	4b13      	ldr	r3, [pc, #76]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c28:	2200      	movs	r2, #0
 8009c2a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009c2c:	4b11      	ldr	r3, [pc, #68]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c2e:	2200      	movs	r2, #0
 8009c30:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009c32:	4b10      	ldr	r3, [pc, #64]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c34:	2200      	movs	r2, #0
 8009c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009c38:	4b0e      	ldr	r3, [pc, #56]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009c3e:	480d      	ldr	r0, [pc, #52]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c40:	f7f9 fce3 	bl	800360a <HAL_PCD_Init>
 8009c44:	4603      	mov	r3, r0
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d001      	beq.n	8009c4e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009c4a:	f7f7 fe47 	bl	80018dc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009c4e:	2180      	movs	r1, #128	; 0x80
 8009c50:	4808      	ldr	r0, [pc, #32]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c52:	f7fa fe40 	bl	80048d6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009c56:	2240      	movs	r2, #64	; 0x40
 8009c58:	2100      	movs	r1, #0
 8009c5a:	4806      	ldr	r0, [pc, #24]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c5c:	f7fa fdf4 	bl	8004848 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009c60:	2280      	movs	r2, #128	; 0x80
 8009c62:	2101      	movs	r1, #1
 8009c64:	4803      	ldr	r0, [pc, #12]	; (8009c74 <USBD_LL_Init+0x94>)
 8009c66:	f7fa fdef 	bl	8004848 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009c6a:	2300      	movs	r3, #0
}
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	20001dc0 	.word	0x20001dc0

08009c78 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b084      	sub	sp, #16
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009c80:	2300      	movs	r3, #0
 8009c82:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009c84:	2300      	movs	r3, #0
 8009c86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009c8e:	4618      	mov	r0, r3
 8009c90:	f7f9 fdd8 	bl	8003844 <HAL_PCD_Start>
 8009c94:	4603      	mov	r3, r0
 8009c96:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009c98:	7bfb      	ldrb	r3, [r7, #15]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 f92a 	bl	8009ef4 <USBD_Get_USB_Status>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b084      	sub	sp, #16
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	4608      	mov	r0, r1
 8009cb8:	4611      	mov	r1, r2
 8009cba:	461a      	mov	r2, r3
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	70fb      	strb	r3, [r7, #3]
 8009cc0:	460b      	mov	r3, r1
 8009cc2:	70bb      	strb	r3, [r7, #2]
 8009cc4:	4613      	mov	r3, r2
 8009cc6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009cc8:	2300      	movs	r3, #0
 8009cca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009cd6:	78bb      	ldrb	r3, [r7, #2]
 8009cd8:	883a      	ldrh	r2, [r7, #0]
 8009cda:	78f9      	ldrb	r1, [r7, #3]
 8009cdc:	f7fa f9bc 	bl	8004058 <HAL_PCD_EP_Open>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f904 	bl	8009ef4 <USBD_Get_USB_Status>
 8009cec:	4603      	mov	r3, r0
 8009cee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009cf0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b084      	sub	sp, #16
 8009cfe:	af00      	add	r7, sp, #0
 8009d00:	6078      	str	r0, [r7, #4]
 8009d02:	460b      	mov	r3, r1
 8009d04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d06:	2300      	movs	r3, #0
 8009d08:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	4611      	mov	r1, r2
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f7fa fa05 	bl	8004128 <HAL_PCD_EP_Close>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f8e5 	bl	8009ef4 <USBD_Get_USB_Status>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d30:	4618      	mov	r0, r3
 8009d32:	3710      	adds	r7, #16
 8009d34:	46bd      	mov	sp, r7
 8009d36:	bd80      	pop	{r7, pc}

08009d38 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d38:	b580      	push	{r7, lr}
 8009d3a:	b084      	sub	sp, #16
 8009d3c:	af00      	add	r7, sp, #0
 8009d3e:	6078      	str	r0, [r7, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d44:	2300      	movs	r3, #0
 8009d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d48:	2300      	movs	r3, #0
 8009d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d52:	78fa      	ldrb	r2, [r7, #3]
 8009d54:	4611      	mov	r1, r2
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7fa fadd 	bl	8004316 <HAL_PCD_EP_SetStall>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	4618      	mov	r0, r3
 8009d64:	f000 f8c6 	bl	8009ef4 <USBD_Get_USB_Status>
 8009d68:	4603      	mov	r3, r0
 8009d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b084      	sub	sp, #16
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009d90:	78fa      	ldrb	r2, [r7, #3]
 8009d92:	4611      	mov	r1, r2
 8009d94:	4618      	mov	r0, r3
 8009d96:	f7fa fb22 	bl	80043de <HAL_PCD_EP_ClrStall>
 8009d9a:	4603      	mov	r3, r0
 8009d9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009d9e:	7bfb      	ldrb	r3, [r7, #15]
 8009da0:	4618      	mov	r0, r3
 8009da2:	f000 f8a7 	bl	8009ef4 <USBD_Get_USB_Status>
 8009da6:	4603      	mov	r3, r0
 8009da8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009db4:	b480      	push	{r7}
 8009db6:	b085      	sub	sp, #20
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
 8009dbc:	460b      	mov	r3, r1
 8009dbe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dc6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009dc8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	da0b      	bge.n	8009de8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009dd0:	78fb      	ldrb	r3, [r7, #3]
 8009dd2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dd6:	68f9      	ldr	r1, [r7, #12]
 8009dd8:	4613      	mov	r3, r2
 8009dda:	00db      	lsls	r3, r3, #3
 8009ddc:	1a9b      	subs	r3, r3, r2
 8009dde:	009b      	lsls	r3, r3, #2
 8009de0:	440b      	add	r3, r1
 8009de2:	333e      	adds	r3, #62	; 0x3e
 8009de4:	781b      	ldrb	r3, [r3, #0]
 8009de6:	e00b      	b.n	8009e00 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009dee:	68f9      	ldr	r1, [r7, #12]
 8009df0:	4613      	mov	r3, r2
 8009df2:	00db      	lsls	r3, r3, #3
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	440b      	add	r3, r1
 8009dfa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009dfe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009e00:	4618      	mov	r0, r3
 8009e02:	3714      	adds	r7, #20
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr

08009e0c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	460b      	mov	r3, r1
 8009e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e26:	78fa      	ldrb	r2, [r7, #3]
 8009e28:	4611      	mov	r1, r2
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f7fa f8ef 	bl	800400e <HAL_PCD_SetAddress>
 8009e30:	4603      	mov	r3, r0
 8009e32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e34:	7bfb      	ldrb	r3, [r7, #15]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f000 f85c 	bl	8009ef4 <USBD_Get_USB_Status>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e40:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b086      	sub	sp, #24
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	60f8      	str	r0, [r7, #12]
 8009e52:	607a      	str	r2, [r7, #4]
 8009e54:	603b      	str	r3, [r7, #0]
 8009e56:	460b      	mov	r3, r1
 8009e58:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e68:	7af9      	ldrb	r1, [r7, #11]
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	f7fa fa08 	bl	8004282 <HAL_PCD_EP_Transmit>
 8009e72:	4603      	mov	r3, r0
 8009e74:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e76:	7dfb      	ldrb	r3, [r7, #23]
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f000 f83b 	bl	8009ef4 <USBD_Get_USB_Status>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009e82:	7dbb      	ldrb	r3, [r7, #22]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3718      	adds	r7, #24
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	60f8      	str	r0, [r7, #12]
 8009e94:	607a      	str	r2, [r7, #4]
 8009e96:	603b      	str	r3, [r7, #0]
 8009e98:	460b      	mov	r3, r1
 8009e9a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009ea0:	2300      	movs	r3, #0
 8009ea2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009eaa:	7af9      	ldrb	r1, [r7, #11]
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	f7fa f984 	bl	80041bc <HAL_PCD_EP_Receive>
 8009eb4:	4603      	mov	r3, r0
 8009eb6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eb8:	7dfb      	ldrb	r3, [r7, #23]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f000 f81a 	bl	8009ef4 <USBD_Get_USB_Status>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ec4:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
 8009ed6:	460b      	mov	r3, r1
 8009ed8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	4611      	mov	r1, r2
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	f7fa f9b4 	bl	8004252 <HAL_PCD_EP_GetRxCount>
 8009eea:	4603      	mov	r3, r0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3708      	adds	r7, #8
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	4603      	mov	r3, r0
 8009efc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009f02:	79fb      	ldrb	r3, [r7, #7]
 8009f04:	2b03      	cmp	r3, #3
 8009f06:	d817      	bhi.n	8009f38 <USBD_Get_USB_Status+0x44>
 8009f08:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <USBD_Get_USB_Status+0x1c>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009f21 	.word	0x08009f21
 8009f14:	08009f27 	.word	0x08009f27
 8009f18:	08009f2d 	.word	0x08009f2d
 8009f1c:	08009f33 	.word	0x08009f33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
    break;
 8009f24:	e00b      	b.n	8009f3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009f26:	2303      	movs	r3, #3
 8009f28:	73fb      	strb	r3, [r7, #15]
    break;
 8009f2a:	e008      	b.n	8009f3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	73fb      	strb	r3, [r7, #15]
    break;
 8009f30:	e005      	b.n	8009f3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009f32:	2303      	movs	r3, #3
 8009f34:	73fb      	strb	r3, [r7, #15]
    break;
 8009f36:	e002      	b.n	8009f3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009f38:	2303      	movs	r3, #3
 8009f3a:	73fb      	strb	r3, [r7, #15]
    break;
 8009f3c:	bf00      	nop
  }
  return usb_status;
 8009f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f40:	4618      	mov	r0, r3
 8009f42:	3714      	adds	r7, #20
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <__errno>:
 8009f4c:	4b01      	ldr	r3, [pc, #4]	; (8009f54 <__errno+0x8>)
 8009f4e:	6818      	ldr	r0, [r3, #0]
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	200001b0 	.word	0x200001b0

08009f58 <__libc_init_array>:
 8009f58:	b570      	push	{r4, r5, r6, lr}
 8009f5a:	4e0d      	ldr	r6, [pc, #52]	; (8009f90 <__libc_init_array+0x38>)
 8009f5c:	4c0d      	ldr	r4, [pc, #52]	; (8009f94 <__libc_init_array+0x3c>)
 8009f5e:	1ba4      	subs	r4, r4, r6
 8009f60:	10a4      	asrs	r4, r4, #2
 8009f62:	2500      	movs	r5, #0
 8009f64:	42a5      	cmp	r5, r4
 8009f66:	d109      	bne.n	8009f7c <__libc_init_array+0x24>
 8009f68:	4e0b      	ldr	r6, [pc, #44]	; (8009f98 <__libc_init_array+0x40>)
 8009f6a:	4c0c      	ldr	r4, [pc, #48]	; (8009f9c <__libc_init_array+0x44>)
 8009f6c:	f001 fc4a 	bl	800b804 <_init>
 8009f70:	1ba4      	subs	r4, r4, r6
 8009f72:	10a4      	asrs	r4, r4, #2
 8009f74:	2500      	movs	r5, #0
 8009f76:	42a5      	cmp	r5, r4
 8009f78:	d105      	bne.n	8009f86 <__libc_init_array+0x2e>
 8009f7a:	bd70      	pop	{r4, r5, r6, pc}
 8009f7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f80:	4798      	blx	r3
 8009f82:	3501      	adds	r5, #1
 8009f84:	e7ee      	b.n	8009f64 <__libc_init_array+0xc>
 8009f86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009f8a:	4798      	blx	r3
 8009f8c:	3501      	adds	r5, #1
 8009f8e:	e7f2      	b.n	8009f76 <__libc_init_array+0x1e>
 8009f90:	0800baa8 	.word	0x0800baa8
 8009f94:	0800baa8 	.word	0x0800baa8
 8009f98:	0800baa8 	.word	0x0800baa8
 8009f9c:	0800baac 	.word	0x0800baac

08009fa0 <malloc>:
 8009fa0:	4b02      	ldr	r3, [pc, #8]	; (8009fac <malloc+0xc>)
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	6818      	ldr	r0, [r3, #0]
 8009fa6:	f000 b861 	b.w	800a06c <_malloc_r>
 8009faa:	bf00      	nop
 8009fac:	200001b0 	.word	0x200001b0

08009fb0 <free>:
 8009fb0:	4b02      	ldr	r3, [pc, #8]	; (8009fbc <free+0xc>)
 8009fb2:	4601      	mov	r1, r0
 8009fb4:	6818      	ldr	r0, [r3, #0]
 8009fb6:	f000 b80b 	b.w	8009fd0 <_free_r>
 8009fba:	bf00      	nop
 8009fbc:	200001b0 	.word	0x200001b0

08009fc0 <memset>:
 8009fc0:	4402      	add	r2, r0
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d100      	bne.n	8009fca <memset+0xa>
 8009fc8:	4770      	bx	lr
 8009fca:	f803 1b01 	strb.w	r1, [r3], #1
 8009fce:	e7f9      	b.n	8009fc4 <memset+0x4>

08009fd0 <_free_r>:
 8009fd0:	b538      	push	{r3, r4, r5, lr}
 8009fd2:	4605      	mov	r5, r0
 8009fd4:	2900      	cmp	r1, #0
 8009fd6:	d045      	beq.n	800a064 <_free_r+0x94>
 8009fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009fdc:	1f0c      	subs	r4, r1, #4
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	bfb8      	it	lt
 8009fe2:	18e4      	addlt	r4, r4, r3
 8009fe4:	f000 f8cc 	bl	800a180 <__malloc_lock>
 8009fe8:	4a1f      	ldr	r2, [pc, #124]	; (800a068 <_free_r+0x98>)
 8009fea:	6813      	ldr	r3, [r2, #0]
 8009fec:	4610      	mov	r0, r2
 8009fee:	b933      	cbnz	r3, 8009ffe <_free_r+0x2e>
 8009ff0:	6063      	str	r3, [r4, #4]
 8009ff2:	6014      	str	r4, [r2, #0]
 8009ff4:	4628      	mov	r0, r5
 8009ff6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ffa:	f000 b8c2 	b.w	800a182 <__malloc_unlock>
 8009ffe:	42a3      	cmp	r3, r4
 800a000:	d90c      	bls.n	800a01c <_free_r+0x4c>
 800a002:	6821      	ldr	r1, [r4, #0]
 800a004:	1862      	adds	r2, r4, r1
 800a006:	4293      	cmp	r3, r2
 800a008:	bf04      	itt	eq
 800a00a:	681a      	ldreq	r2, [r3, #0]
 800a00c:	685b      	ldreq	r3, [r3, #4]
 800a00e:	6063      	str	r3, [r4, #4]
 800a010:	bf04      	itt	eq
 800a012:	1852      	addeq	r2, r2, r1
 800a014:	6022      	streq	r2, [r4, #0]
 800a016:	6004      	str	r4, [r0, #0]
 800a018:	e7ec      	b.n	8009ff4 <_free_r+0x24>
 800a01a:	4613      	mov	r3, r2
 800a01c:	685a      	ldr	r2, [r3, #4]
 800a01e:	b10a      	cbz	r2, 800a024 <_free_r+0x54>
 800a020:	42a2      	cmp	r2, r4
 800a022:	d9fa      	bls.n	800a01a <_free_r+0x4a>
 800a024:	6819      	ldr	r1, [r3, #0]
 800a026:	1858      	adds	r0, r3, r1
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d10b      	bne.n	800a044 <_free_r+0x74>
 800a02c:	6820      	ldr	r0, [r4, #0]
 800a02e:	4401      	add	r1, r0
 800a030:	1858      	adds	r0, r3, r1
 800a032:	4282      	cmp	r2, r0
 800a034:	6019      	str	r1, [r3, #0]
 800a036:	d1dd      	bne.n	8009ff4 <_free_r+0x24>
 800a038:	6810      	ldr	r0, [r2, #0]
 800a03a:	6852      	ldr	r2, [r2, #4]
 800a03c:	605a      	str	r2, [r3, #4]
 800a03e:	4401      	add	r1, r0
 800a040:	6019      	str	r1, [r3, #0]
 800a042:	e7d7      	b.n	8009ff4 <_free_r+0x24>
 800a044:	d902      	bls.n	800a04c <_free_r+0x7c>
 800a046:	230c      	movs	r3, #12
 800a048:	602b      	str	r3, [r5, #0]
 800a04a:	e7d3      	b.n	8009ff4 <_free_r+0x24>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	1821      	adds	r1, r4, r0
 800a050:	428a      	cmp	r2, r1
 800a052:	bf04      	itt	eq
 800a054:	6811      	ldreq	r1, [r2, #0]
 800a056:	6852      	ldreq	r2, [r2, #4]
 800a058:	6062      	str	r2, [r4, #4]
 800a05a:	bf04      	itt	eq
 800a05c:	1809      	addeq	r1, r1, r0
 800a05e:	6021      	streq	r1, [r4, #0]
 800a060:	605c      	str	r4, [r3, #4]
 800a062:	e7c7      	b.n	8009ff4 <_free_r+0x24>
 800a064:	bd38      	pop	{r3, r4, r5, pc}
 800a066:	bf00      	nop
 800a068:	20000238 	.word	0x20000238

0800a06c <_malloc_r>:
 800a06c:	b570      	push	{r4, r5, r6, lr}
 800a06e:	1ccd      	adds	r5, r1, #3
 800a070:	f025 0503 	bic.w	r5, r5, #3
 800a074:	3508      	adds	r5, #8
 800a076:	2d0c      	cmp	r5, #12
 800a078:	bf38      	it	cc
 800a07a:	250c      	movcc	r5, #12
 800a07c:	2d00      	cmp	r5, #0
 800a07e:	4606      	mov	r6, r0
 800a080:	db01      	blt.n	800a086 <_malloc_r+0x1a>
 800a082:	42a9      	cmp	r1, r5
 800a084:	d903      	bls.n	800a08e <_malloc_r+0x22>
 800a086:	230c      	movs	r3, #12
 800a088:	6033      	str	r3, [r6, #0]
 800a08a:	2000      	movs	r0, #0
 800a08c:	bd70      	pop	{r4, r5, r6, pc}
 800a08e:	f000 f877 	bl	800a180 <__malloc_lock>
 800a092:	4a21      	ldr	r2, [pc, #132]	; (800a118 <_malloc_r+0xac>)
 800a094:	6814      	ldr	r4, [r2, #0]
 800a096:	4621      	mov	r1, r4
 800a098:	b991      	cbnz	r1, 800a0c0 <_malloc_r+0x54>
 800a09a:	4c20      	ldr	r4, [pc, #128]	; (800a11c <_malloc_r+0xb0>)
 800a09c:	6823      	ldr	r3, [r4, #0]
 800a09e:	b91b      	cbnz	r3, 800a0a8 <_malloc_r+0x3c>
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	f000 f83d 	bl	800a120 <_sbrk_r>
 800a0a6:	6020      	str	r0, [r4, #0]
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f000 f838 	bl	800a120 <_sbrk_r>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d124      	bne.n	800a0fe <_malloc_r+0x92>
 800a0b4:	230c      	movs	r3, #12
 800a0b6:	6033      	str	r3, [r6, #0]
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f000 f862 	bl	800a182 <__malloc_unlock>
 800a0be:	e7e4      	b.n	800a08a <_malloc_r+0x1e>
 800a0c0:	680b      	ldr	r3, [r1, #0]
 800a0c2:	1b5b      	subs	r3, r3, r5
 800a0c4:	d418      	bmi.n	800a0f8 <_malloc_r+0x8c>
 800a0c6:	2b0b      	cmp	r3, #11
 800a0c8:	d90f      	bls.n	800a0ea <_malloc_r+0x7e>
 800a0ca:	600b      	str	r3, [r1, #0]
 800a0cc:	50cd      	str	r5, [r1, r3]
 800a0ce:	18cc      	adds	r4, r1, r3
 800a0d0:	4630      	mov	r0, r6
 800a0d2:	f000 f856 	bl	800a182 <__malloc_unlock>
 800a0d6:	f104 000b 	add.w	r0, r4, #11
 800a0da:	1d23      	adds	r3, r4, #4
 800a0dc:	f020 0007 	bic.w	r0, r0, #7
 800a0e0:	1ac3      	subs	r3, r0, r3
 800a0e2:	d0d3      	beq.n	800a08c <_malloc_r+0x20>
 800a0e4:	425a      	negs	r2, r3
 800a0e6:	50e2      	str	r2, [r4, r3]
 800a0e8:	e7d0      	b.n	800a08c <_malloc_r+0x20>
 800a0ea:	428c      	cmp	r4, r1
 800a0ec:	684b      	ldr	r3, [r1, #4]
 800a0ee:	bf16      	itet	ne
 800a0f0:	6063      	strne	r3, [r4, #4]
 800a0f2:	6013      	streq	r3, [r2, #0]
 800a0f4:	460c      	movne	r4, r1
 800a0f6:	e7eb      	b.n	800a0d0 <_malloc_r+0x64>
 800a0f8:	460c      	mov	r4, r1
 800a0fa:	6849      	ldr	r1, [r1, #4]
 800a0fc:	e7cc      	b.n	800a098 <_malloc_r+0x2c>
 800a0fe:	1cc4      	adds	r4, r0, #3
 800a100:	f024 0403 	bic.w	r4, r4, #3
 800a104:	42a0      	cmp	r0, r4
 800a106:	d005      	beq.n	800a114 <_malloc_r+0xa8>
 800a108:	1a21      	subs	r1, r4, r0
 800a10a:	4630      	mov	r0, r6
 800a10c:	f000 f808 	bl	800a120 <_sbrk_r>
 800a110:	3001      	adds	r0, #1
 800a112:	d0cf      	beq.n	800a0b4 <_malloc_r+0x48>
 800a114:	6025      	str	r5, [r4, #0]
 800a116:	e7db      	b.n	800a0d0 <_malloc_r+0x64>
 800a118:	20000238 	.word	0x20000238
 800a11c:	2000023c 	.word	0x2000023c

0800a120 <_sbrk_r>:
 800a120:	b538      	push	{r3, r4, r5, lr}
 800a122:	4c06      	ldr	r4, [pc, #24]	; (800a13c <_sbrk_r+0x1c>)
 800a124:	2300      	movs	r3, #0
 800a126:	4605      	mov	r5, r0
 800a128:	4608      	mov	r0, r1
 800a12a:	6023      	str	r3, [r4, #0]
 800a12c:	f7f7 fc7a 	bl	8001a24 <_sbrk>
 800a130:	1c43      	adds	r3, r0, #1
 800a132:	d102      	bne.n	800a13a <_sbrk_r+0x1a>
 800a134:	6823      	ldr	r3, [r4, #0]
 800a136:	b103      	cbz	r3, 800a13a <_sbrk_r+0x1a>
 800a138:	602b      	str	r3, [r5, #0]
 800a13a:	bd38      	pop	{r3, r4, r5, pc}
 800a13c:	200021c8 	.word	0x200021c8

0800a140 <siprintf>:
 800a140:	b40e      	push	{r1, r2, r3}
 800a142:	b500      	push	{lr}
 800a144:	b09c      	sub	sp, #112	; 0x70
 800a146:	ab1d      	add	r3, sp, #116	; 0x74
 800a148:	9002      	str	r0, [sp, #8]
 800a14a:	9006      	str	r0, [sp, #24]
 800a14c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a150:	4809      	ldr	r0, [pc, #36]	; (800a178 <siprintf+0x38>)
 800a152:	9107      	str	r1, [sp, #28]
 800a154:	9104      	str	r1, [sp, #16]
 800a156:	4909      	ldr	r1, [pc, #36]	; (800a17c <siprintf+0x3c>)
 800a158:	f853 2b04 	ldr.w	r2, [r3], #4
 800a15c:	9105      	str	r1, [sp, #20]
 800a15e:	6800      	ldr	r0, [r0, #0]
 800a160:	9301      	str	r3, [sp, #4]
 800a162:	a902      	add	r1, sp, #8
 800a164:	f000 f868 	bl	800a238 <_svfiprintf_r>
 800a168:	9b02      	ldr	r3, [sp, #8]
 800a16a:	2200      	movs	r2, #0
 800a16c:	701a      	strb	r2, [r3, #0]
 800a16e:	b01c      	add	sp, #112	; 0x70
 800a170:	f85d eb04 	ldr.w	lr, [sp], #4
 800a174:	b003      	add	sp, #12
 800a176:	4770      	bx	lr
 800a178:	200001b0 	.word	0x200001b0
 800a17c:	ffff0208 	.word	0xffff0208

0800a180 <__malloc_lock>:
 800a180:	4770      	bx	lr

0800a182 <__malloc_unlock>:
 800a182:	4770      	bx	lr

0800a184 <__ssputs_r>:
 800a184:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a188:	688e      	ldr	r6, [r1, #8]
 800a18a:	429e      	cmp	r6, r3
 800a18c:	4682      	mov	sl, r0
 800a18e:	460c      	mov	r4, r1
 800a190:	4690      	mov	r8, r2
 800a192:	4699      	mov	r9, r3
 800a194:	d837      	bhi.n	800a206 <__ssputs_r+0x82>
 800a196:	898a      	ldrh	r2, [r1, #12]
 800a198:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a19c:	d031      	beq.n	800a202 <__ssputs_r+0x7e>
 800a19e:	6825      	ldr	r5, [r4, #0]
 800a1a0:	6909      	ldr	r1, [r1, #16]
 800a1a2:	1a6f      	subs	r7, r5, r1
 800a1a4:	6965      	ldr	r5, [r4, #20]
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1ac:	fb95 f5f3 	sdiv	r5, r5, r3
 800a1b0:	f109 0301 	add.w	r3, r9, #1
 800a1b4:	443b      	add	r3, r7
 800a1b6:	429d      	cmp	r5, r3
 800a1b8:	bf38      	it	cc
 800a1ba:	461d      	movcc	r5, r3
 800a1bc:	0553      	lsls	r3, r2, #21
 800a1be:	d530      	bpl.n	800a222 <__ssputs_r+0x9e>
 800a1c0:	4629      	mov	r1, r5
 800a1c2:	f7ff ff53 	bl	800a06c <_malloc_r>
 800a1c6:	4606      	mov	r6, r0
 800a1c8:	b950      	cbnz	r0, 800a1e0 <__ssputs_r+0x5c>
 800a1ca:	230c      	movs	r3, #12
 800a1cc:	f8ca 3000 	str.w	r3, [sl]
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a1d6:	81a3      	strh	r3, [r4, #12]
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e0:	463a      	mov	r2, r7
 800a1e2:	6921      	ldr	r1, [r4, #16]
 800a1e4:	f000 faa8 	bl	800a738 <memcpy>
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f2:	81a3      	strh	r3, [r4, #12]
 800a1f4:	6126      	str	r6, [r4, #16]
 800a1f6:	6165      	str	r5, [r4, #20]
 800a1f8:	443e      	add	r6, r7
 800a1fa:	1bed      	subs	r5, r5, r7
 800a1fc:	6026      	str	r6, [r4, #0]
 800a1fe:	60a5      	str	r5, [r4, #8]
 800a200:	464e      	mov	r6, r9
 800a202:	454e      	cmp	r6, r9
 800a204:	d900      	bls.n	800a208 <__ssputs_r+0x84>
 800a206:	464e      	mov	r6, r9
 800a208:	4632      	mov	r2, r6
 800a20a:	4641      	mov	r1, r8
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	f000 fa9e 	bl	800a74e <memmove>
 800a212:	68a3      	ldr	r3, [r4, #8]
 800a214:	1b9b      	subs	r3, r3, r6
 800a216:	60a3      	str	r3, [r4, #8]
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	441e      	add	r6, r3
 800a21c:	6026      	str	r6, [r4, #0]
 800a21e:	2000      	movs	r0, #0
 800a220:	e7dc      	b.n	800a1dc <__ssputs_r+0x58>
 800a222:	462a      	mov	r2, r5
 800a224:	f000 faac 	bl	800a780 <_realloc_r>
 800a228:	4606      	mov	r6, r0
 800a22a:	2800      	cmp	r0, #0
 800a22c:	d1e2      	bne.n	800a1f4 <__ssputs_r+0x70>
 800a22e:	6921      	ldr	r1, [r4, #16]
 800a230:	4650      	mov	r0, sl
 800a232:	f7ff fecd 	bl	8009fd0 <_free_r>
 800a236:	e7c8      	b.n	800a1ca <__ssputs_r+0x46>

0800a238 <_svfiprintf_r>:
 800a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a23c:	461d      	mov	r5, r3
 800a23e:	898b      	ldrh	r3, [r1, #12]
 800a240:	061f      	lsls	r7, r3, #24
 800a242:	b09d      	sub	sp, #116	; 0x74
 800a244:	4680      	mov	r8, r0
 800a246:	460c      	mov	r4, r1
 800a248:	4616      	mov	r6, r2
 800a24a:	d50f      	bpl.n	800a26c <_svfiprintf_r+0x34>
 800a24c:	690b      	ldr	r3, [r1, #16]
 800a24e:	b96b      	cbnz	r3, 800a26c <_svfiprintf_r+0x34>
 800a250:	2140      	movs	r1, #64	; 0x40
 800a252:	f7ff ff0b 	bl	800a06c <_malloc_r>
 800a256:	6020      	str	r0, [r4, #0]
 800a258:	6120      	str	r0, [r4, #16]
 800a25a:	b928      	cbnz	r0, 800a268 <_svfiprintf_r+0x30>
 800a25c:	230c      	movs	r3, #12
 800a25e:	f8c8 3000 	str.w	r3, [r8]
 800a262:	f04f 30ff 	mov.w	r0, #4294967295
 800a266:	e0c8      	b.n	800a3fa <_svfiprintf_r+0x1c2>
 800a268:	2340      	movs	r3, #64	; 0x40
 800a26a:	6163      	str	r3, [r4, #20]
 800a26c:	2300      	movs	r3, #0
 800a26e:	9309      	str	r3, [sp, #36]	; 0x24
 800a270:	2320      	movs	r3, #32
 800a272:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a276:	2330      	movs	r3, #48	; 0x30
 800a278:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a27c:	9503      	str	r5, [sp, #12]
 800a27e:	f04f 0b01 	mov.w	fp, #1
 800a282:	4637      	mov	r7, r6
 800a284:	463d      	mov	r5, r7
 800a286:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a28a:	b10b      	cbz	r3, 800a290 <_svfiprintf_r+0x58>
 800a28c:	2b25      	cmp	r3, #37	; 0x25
 800a28e:	d13e      	bne.n	800a30e <_svfiprintf_r+0xd6>
 800a290:	ebb7 0a06 	subs.w	sl, r7, r6
 800a294:	d00b      	beq.n	800a2ae <_svfiprintf_r+0x76>
 800a296:	4653      	mov	r3, sl
 800a298:	4632      	mov	r2, r6
 800a29a:	4621      	mov	r1, r4
 800a29c:	4640      	mov	r0, r8
 800a29e:	f7ff ff71 	bl	800a184 <__ssputs_r>
 800a2a2:	3001      	adds	r0, #1
 800a2a4:	f000 80a4 	beq.w	800a3f0 <_svfiprintf_r+0x1b8>
 800a2a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2aa:	4453      	add	r3, sl
 800a2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800a2ae:	783b      	ldrb	r3, [r7, #0]
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	f000 809d 	beq.w	800a3f0 <_svfiprintf_r+0x1b8>
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a2bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2c0:	9304      	str	r3, [sp, #16]
 800a2c2:	9307      	str	r3, [sp, #28]
 800a2c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ca:	462f      	mov	r7, r5
 800a2cc:	2205      	movs	r2, #5
 800a2ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a2d2:	4850      	ldr	r0, [pc, #320]	; (800a414 <_svfiprintf_r+0x1dc>)
 800a2d4:	f7f5 ff94 	bl	8000200 <memchr>
 800a2d8:	9b04      	ldr	r3, [sp, #16]
 800a2da:	b9d0      	cbnz	r0, 800a312 <_svfiprintf_r+0xda>
 800a2dc:	06d9      	lsls	r1, r3, #27
 800a2de:	bf44      	itt	mi
 800a2e0:	2220      	movmi	r2, #32
 800a2e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2e6:	071a      	lsls	r2, r3, #28
 800a2e8:	bf44      	itt	mi
 800a2ea:	222b      	movmi	r2, #43	; 0x2b
 800a2ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a2f0:	782a      	ldrb	r2, [r5, #0]
 800a2f2:	2a2a      	cmp	r2, #42	; 0x2a
 800a2f4:	d015      	beq.n	800a322 <_svfiprintf_r+0xea>
 800a2f6:	9a07      	ldr	r2, [sp, #28]
 800a2f8:	462f      	mov	r7, r5
 800a2fa:	2000      	movs	r0, #0
 800a2fc:	250a      	movs	r5, #10
 800a2fe:	4639      	mov	r1, r7
 800a300:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a304:	3b30      	subs	r3, #48	; 0x30
 800a306:	2b09      	cmp	r3, #9
 800a308:	d94d      	bls.n	800a3a6 <_svfiprintf_r+0x16e>
 800a30a:	b1b8      	cbz	r0, 800a33c <_svfiprintf_r+0x104>
 800a30c:	e00f      	b.n	800a32e <_svfiprintf_r+0xf6>
 800a30e:	462f      	mov	r7, r5
 800a310:	e7b8      	b.n	800a284 <_svfiprintf_r+0x4c>
 800a312:	4a40      	ldr	r2, [pc, #256]	; (800a414 <_svfiprintf_r+0x1dc>)
 800a314:	1a80      	subs	r0, r0, r2
 800a316:	fa0b f000 	lsl.w	r0, fp, r0
 800a31a:	4318      	orrs	r0, r3
 800a31c:	9004      	str	r0, [sp, #16]
 800a31e:	463d      	mov	r5, r7
 800a320:	e7d3      	b.n	800a2ca <_svfiprintf_r+0x92>
 800a322:	9a03      	ldr	r2, [sp, #12]
 800a324:	1d11      	adds	r1, r2, #4
 800a326:	6812      	ldr	r2, [r2, #0]
 800a328:	9103      	str	r1, [sp, #12]
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	db01      	blt.n	800a332 <_svfiprintf_r+0xfa>
 800a32e:	9207      	str	r2, [sp, #28]
 800a330:	e004      	b.n	800a33c <_svfiprintf_r+0x104>
 800a332:	4252      	negs	r2, r2
 800a334:	f043 0302 	orr.w	r3, r3, #2
 800a338:	9207      	str	r2, [sp, #28]
 800a33a:	9304      	str	r3, [sp, #16]
 800a33c:	783b      	ldrb	r3, [r7, #0]
 800a33e:	2b2e      	cmp	r3, #46	; 0x2e
 800a340:	d10c      	bne.n	800a35c <_svfiprintf_r+0x124>
 800a342:	787b      	ldrb	r3, [r7, #1]
 800a344:	2b2a      	cmp	r3, #42	; 0x2a
 800a346:	d133      	bne.n	800a3b0 <_svfiprintf_r+0x178>
 800a348:	9b03      	ldr	r3, [sp, #12]
 800a34a:	1d1a      	adds	r2, r3, #4
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	9203      	str	r2, [sp, #12]
 800a350:	2b00      	cmp	r3, #0
 800a352:	bfb8      	it	lt
 800a354:	f04f 33ff 	movlt.w	r3, #4294967295
 800a358:	3702      	adds	r7, #2
 800a35a:	9305      	str	r3, [sp, #20]
 800a35c:	4d2e      	ldr	r5, [pc, #184]	; (800a418 <_svfiprintf_r+0x1e0>)
 800a35e:	7839      	ldrb	r1, [r7, #0]
 800a360:	2203      	movs	r2, #3
 800a362:	4628      	mov	r0, r5
 800a364:	f7f5 ff4c 	bl	8000200 <memchr>
 800a368:	b138      	cbz	r0, 800a37a <_svfiprintf_r+0x142>
 800a36a:	2340      	movs	r3, #64	; 0x40
 800a36c:	1b40      	subs	r0, r0, r5
 800a36e:	fa03 f000 	lsl.w	r0, r3, r0
 800a372:	9b04      	ldr	r3, [sp, #16]
 800a374:	4303      	orrs	r3, r0
 800a376:	3701      	adds	r7, #1
 800a378:	9304      	str	r3, [sp, #16]
 800a37a:	7839      	ldrb	r1, [r7, #0]
 800a37c:	4827      	ldr	r0, [pc, #156]	; (800a41c <_svfiprintf_r+0x1e4>)
 800a37e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a382:	2206      	movs	r2, #6
 800a384:	1c7e      	adds	r6, r7, #1
 800a386:	f7f5 ff3b 	bl	8000200 <memchr>
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d038      	beq.n	800a400 <_svfiprintf_r+0x1c8>
 800a38e:	4b24      	ldr	r3, [pc, #144]	; (800a420 <_svfiprintf_r+0x1e8>)
 800a390:	bb13      	cbnz	r3, 800a3d8 <_svfiprintf_r+0x1a0>
 800a392:	9b03      	ldr	r3, [sp, #12]
 800a394:	3307      	adds	r3, #7
 800a396:	f023 0307 	bic.w	r3, r3, #7
 800a39a:	3308      	adds	r3, #8
 800a39c:	9303      	str	r3, [sp, #12]
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	444b      	add	r3, r9
 800a3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800a3a4:	e76d      	b.n	800a282 <_svfiprintf_r+0x4a>
 800a3a6:	fb05 3202 	mla	r2, r5, r2, r3
 800a3aa:	2001      	movs	r0, #1
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	e7a6      	b.n	800a2fe <_svfiprintf_r+0xc6>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	3701      	adds	r7, #1
 800a3b4:	9305      	str	r3, [sp, #20]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	250a      	movs	r5, #10
 800a3ba:	4638      	mov	r0, r7
 800a3bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3c0:	3a30      	subs	r2, #48	; 0x30
 800a3c2:	2a09      	cmp	r2, #9
 800a3c4:	d903      	bls.n	800a3ce <_svfiprintf_r+0x196>
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d0c8      	beq.n	800a35c <_svfiprintf_r+0x124>
 800a3ca:	9105      	str	r1, [sp, #20]
 800a3cc:	e7c6      	b.n	800a35c <_svfiprintf_r+0x124>
 800a3ce:	fb05 2101 	mla	r1, r5, r1, r2
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	4607      	mov	r7, r0
 800a3d6:	e7f0      	b.n	800a3ba <_svfiprintf_r+0x182>
 800a3d8:	ab03      	add	r3, sp, #12
 800a3da:	9300      	str	r3, [sp, #0]
 800a3dc:	4622      	mov	r2, r4
 800a3de:	4b11      	ldr	r3, [pc, #68]	; (800a424 <_svfiprintf_r+0x1ec>)
 800a3e0:	a904      	add	r1, sp, #16
 800a3e2:	4640      	mov	r0, r8
 800a3e4:	f3af 8000 	nop.w
 800a3e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a3ec:	4681      	mov	r9, r0
 800a3ee:	d1d6      	bne.n	800a39e <_svfiprintf_r+0x166>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	065b      	lsls	r3, r3, #25
 800a3f4:	f53f af35 	bmi.w	800a262 <_svfiprintf_r+0x2a>
 800a3f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a3fa:	b01d      	add	sp, #116	; 0x74
 800a3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	4622      	mov	r2, r4
 800a406:	4b07      	ldr	r3, [pc, #28]	; (800a424 <_svfiprintf_r+0x1ec>)
 800a408:	a904      	add	r1, sp, #16
 800a40a:	4640      	mov	r0, r8
 800a40c:	f000 f882 	bl	800a514 <_printf_i>
 800a410:	e7ea      	b.n	800a3e8 <_svfiprintf_r+0x1b0>
 800a412:	bf00      	nop
 800a414:	0800b890 	.word	0x0800b890
 800a418:	0800b896 	.word	0x0800b896
 800a41c:	0800b89a 	.word	0x0800b89a
 800a420:	00000000 	.word	0x00000000
 800a424:	0800a185 	.word	0x0800a185

0800a428 <_printf_common>:
 800a428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a42c:	4691      	mov	r9, r2
 800a42e:	461f      	mov	r7, r3
 800a430:	688a      	ldr	r2, [r1, #8]
 800a432:	690b      	ldr	r3, [r1, #16]
 800a434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a438:	4293      	cmp	r3, r2
 800a43a:	bfb8      	it	lt
 800a43c:	4613      	movlt	r3, r2
 800a43e:	f8c9 3000 	str.w	r3, [r9]
 800a442:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a446:	4606      	mov	r6, r0
 800a448:	460c      	mov	r4, r1
 800a44a:	b112      	cbz	r2, 800a452 <_printf_common+0x2a>
 800a44c:	3301      	adds	r3, #1
 800a44e:	f8c9 3000 	str.w	r3, [r9]
 800a452:	6823      	ldr	r3, [r4, #0]
 800a454:	0699      	lsls	r1, r3, #26
 800a456:	bf42      	ittt	mi
 800a458:	f8d9 3000 	ldrmi.w	r3, [r9]
 800a45c:	3302      	addmi	r3, #2
 800a45e:	f8c9 3000 	strmi.w	r3, [r9]
 800a462:	6825      	ldr	r5, [r4, #0]
 800a464:	f015 0506 	ands.w	r5, r5, #6
 800a468:	d107      	bne.n	800a47a <_printf_common+0x52>
 800a46a:	f104 0a19 	add.w	sl, r4, #25
 800a46e:	68e3      	ldr	r3, [r4, #12]
 800a470:	f8d9 2000 	ldr.w	r2, [r9]
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	42ab      	cmp	r3, r5
 800a478:	dc28      	bgt.n	800a4cc <_printf_common+0xa4>
 800a47a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800a47e:	6822      	ldr	r2, [r4, #0]
 800a480:	3300      	adds	r3, #0
 800a482:	bf18      	it	ne
 800a484:	2301      	movne	r3, #1
 800a486:	0692      	lsls	r2, r2, #26
 800a488:	d42d      	bmi.n	800a4e6 <_printf_common+0xbe>
 800a48a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a48e:	4639      	mov	r1, r7
 800a490:	4630      	mov	r0, r6
 800a492:	47c0      	blx	r8
 800a494:	3001      	adds	r0, #1
 800a496:	d020      	beq.n	800a4da <_printf_common+0xb2>
 800a498:	6823      	ldr	r3, [r4, #0]
 800a49a:	68e5      	ldr	r5, [r4, #12]
 800a49c:	f8d9 2000 	ldr.w	r2, [r9]
 800a4a0:	f003 0306 	and.w	r3, r3, #6
 800a4a4:	2b04      	cmp	r3, #4
 800a4a6:	bf08      	it	eq
 800a4a8:	1aad      	subeq	r5, r5, r2
 800a4aa:	68a3      	ldr	r3, [r4, #8]
 800a4ac:	6922      	ldr	r2, [r4, #16]
 800a4ae:	bf0c      	ite	eq
 800a4b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4b4:	2500      	movne	r5, #0
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	bfc4      	itt	gt
 800a4ba:	1a9b      	subgt	r3, r3, r2
 800a4bc:	18ed      	addgt	r5, r5, r3
 800a4be:	f04f 0900 	mov.w	r9, #0
 800a4c2:	341a      	adds	r4, #26
 800a4c4:	454d      	cmp	r5, r9
 800a4c6:	d11a      	bne.n	800a4fe <_printf_common+0xd6>
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e008      	b.n	800a4de <_printf_common+0xb6>
 800a4cc:	2301      	movs	r3, #1
 800a4ce:	4652      	mov	r2, sl
 800a4d0:	4639      	mov	r1, r7
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	47c0      	blx	r8
 800a4d6:	3001      	adds	r0, #1
 800a4d8:	d103      	bne.n	800a4e2 <_printf_common+0xba>
 800a4da:	f04f 30ff 	mov.w	r0, #4294967295
 800a4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e2:	3501      	adds	r5, #1
 800a4e4:	e7c3      	b.n	800a46e <_printf_common+0x46>
 800a4e6:	18e1      	adds	r1, r4, r3
 800a4e8:	1c5a      	adds	r2, r3, #1
 800a4ea:	2030      	movs	r0, #48	; 0x30
 800a4ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a4f0:	4422      	add	r2, r4
 800a4f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a4f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a4fa:	3302      	adds	r3, #2
 800a4fc:	e7c5      	b.n	800a48a <_printf_common+0x62>
 800a4fe:	2301      	movs	r3, #1
 800a500:	4622      	mov	r2, r4
 800a502:	4639      	mov	r1, r7
 800a504:	4630      	mov	r0, r6
 800a506:	47c0      	blx	r8
 800a508:	3001      	adds	r0, #1
 800a50a:	d0e6      	beq.n	800a4da <_printf_common+0xb2>
 800a50c:	f109 0901 	add.w	r9, r9, #1
 800a510:	e7d8      	b.n	800a4c4 <_printf_common+0x9c>
	...

0800a514 <_printf_i>:
 800a514:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a518:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800a51c:	460c      	mov	r4, r1
 800a51e:	7e09      	ldrb	r1, [r1, #24]
 800a520:	b085      	sub	sp, #20
 800a522:	296e      	cmp	r1, #110	; 0x6e
 800a524:	4617      	mov	r7, r2
 800a526:	4606      	mov	r6, r0
 800a528:	4698      	mov	r8, r3
 800a52a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a52c:	f000 80b3 	beq.w	800a696 <_printf_i+0x182>
 800a530:	d822      	bhi.n	800a578 <_printf_i+0x64>
 800a532:	2963      	cmp	r1, #99	; 0x63
 800a534:	d036      	beq.n	800a5a4 <_printf_i+0x90>
 800a536:	d80a      	bhi.n	800a54e <_printf_i+0x3a>
 800a538:	2900      	cmp	r1, #0
 800a53a:	f000 80b9 	beq.w	800a6b0 <_printf_i+0x19c>
 800a53e:	2958      	cmp	r1, #88	; 0x58
 800a540:	f000 8083 	beq.w	800a64a <_printf_i+0x136>
 800a544:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a548:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800a54c:	e032      	b.n	800a5b4 <_printf_i+0xa0>
 800a54e:	2964      	cmp	r1, #100	; 0x64
 800a550:	d001      	beq.n	800a556 <_printf_i+0x42>
 800a552:	2969      	cmp	r1, #105	; 0x69
 800a554:	d1f6      	bne.n	800a544 <_printf_i+0x30>
 800a556:	6820      	ldr	r0, [r4, #0]
 800a558:	6813      	ldr	r3, [r2, #0]
 800a55a:	0605      	lsls	r5, r0, #24
 800a55c:	f103 0104 	add.w	r1, r3, #4
 800a560:	d52a      	bpl.n	800a5b8 <_printf_i+0xa4>
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	6011      	str	r1, [r2, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	da03      	bge.n	800a572 <_printf_i+0x5e>
 800a56a:	222d      	movs	r2, #45	; 0x2d
 800a56c:	425b      	negs	r3, r3
 800a56e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800a572:	486f      	ldr	r0, [pc, #444]	; (800a730 <_printf_i+0x21c>)
 800a574:	220a      	movs	r2, #10
 800a576:	e039      	b.n	800a5ec <_printf_i+0xd8>
 800a578:	2973      	cmp	r1, #115	; 0x73
 800a57a:	f000 809d 	beq.w	800a6b8 <_printf_i+0x1a4>
 800a57e:	d808      	bhi.n	800a592 <_printf_i+0x7e>
 800a580:	296f      	cmp	r1, #111	; 0x6f
 800a582:	d020      	beq.n	800a5c6 <_printf_i+0xb2>
 800a584:	2970      	cmp	r1, #112	; 0x70
 800a586:	d1dd      	bne.n	800a544 <_printf_i+0x30>
 800a588:	6823      	ldr	r3, [r4, #0]
 800a58a:	f043 0320 	orr.w	r3, r3, #32
 800a58e:	6023      	str	r3, [r4, #0]
 800a590:	e003      	b.n	800a59a <_printf_i+0x86>
 800a592:	2975      	cmp	r1, #117	; 0x75
 800a594:	d017      	beq.n	800a5c6 <_printf_i+0xb2>
 800a596:	2978      	cmp	r1, #120	; 0x78
 800a598:	d1d4      	bne.n	800a544 <_printf_i+0x30>
 800a59a:	2378      	movs	r3, #120	; 0x78
 800a59c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a5a0:	4864      	ldr	r0, [pc, #400]	; (800a734 <_printf_i+0x220>)
 800a5a2:	e055      	b.n	800a650 <_printf_i+0x13c>
 800a5a4:	6813      	ldr	r3, [r2, #0]
 800a5a6:	1d19      	adds	r1, r3, #4
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	6011      	str	r1, [r2, #0]
 800a5ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e08c      	b.n	800a6d2 <_printf_i+0x1be>
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6011      	str	r1, [r2, #0]
 800a5bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a5c0:	bf18      	it	ne
 800a5c2:	b21b      	sxthne	r3, r3
 800a5c4:	e7cf      	b.n	800a566 <_printf_i+0x52>
 800a5c6:	6813      	ldr	r3, [r2, #0]
 800a5c8:	6825      	ldr	r5, [r4, #0]
 800a5ca:	1d18      	adds	r0, r3, #4
 800a5cc:	6010      	str	r0, [r2, #0]
 800a5ce:	0628      	lsls	r0, r5, #24
 800a5d0:	d501      	bpl.n	800a5d6 <_printf_i+0xc2>
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	e002      	b.n	800a5dc <_printf_i+0xc8>
 800a5d6:	0668      	lsls	r0, r5, #25
 800a5d8:	d5fb      	bpl.n	800a5d2 <_printf_i+0xbe>
 800a5da:	881b      	ldrh	r3, [r3, #0]
 800a5dc:	4854      	ldr	r0, [pc, #336]	; (800a730 <_printf_i+0x21c>)
 800a5de:	296f      	cmp	r1, #111	; 0x6f
 800a5e0:	bf14      	ite	ne
 800a5e2:	220a      	movne	r2, #10
 800a5e4:	2208      	moveq	r2, #8
 800a5e6:	2100      	movs	r1, #0
 800a5e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a5ec:	6865      	ldr	r5, [r4, #4]
 800a5ee:	60a5      	str	r5, [r4, #8]
 800a5f0:	2d00      	cmp	r5, #0
 800a5f2:	f2c0 8095 	blt.w	800a720 <_printf_i+0x20c>
 800a5f6:	6821      	ldr	r1, [r4, #0]
 800a5f8:	f021 0104 	bic.w	r1, r1, #4
 800a5fc:	6021      	str	r1, [r4, #0]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d13d      	bne.n	800a67e <_printf_i+0x16a>
 800a602:	2d00      	cmp	r5, #0
 800a604:	f040 808e 	bne.w	800a724 <_printf_i+0x210>
 800a608:	4665      	mov	r5, ip
 800a60a:	2a08      	cmp	r2, #8
 800a60c:	d10b      	bne.n	800a626 <_printf_i+0x112>
 800a60e:	6823      	ldr	r3, [r4, #0]
 800a610:	07db      	lsls	r3, r3, #31
 800a612:	d508      	bpl.n	800a626 <_printf_i+0x112>
 800a614:	6923      	ldr	r3, [r4, #16]
 800a616:	6862      	ldr	r2, [r4, #4]
 800a618:	429a      	cmp	r2, r3
 800a61a:	bfde      	ittt	le
 800a61c:	2330      	movle	r3, #48	; 0x30
 800a61e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a622:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a626:	ebac 0305 	sub.w	r3, ip, r5
 800a62a:	6123      	str	r3, [r4, #16]
 800a62c:	f8cd 8000 	str.w	r8, [sp]
 800a630:	463b      	mov	r3, r7
 800a632:	aa03      	add	r2, sp, #12
 800a634:	4621      	mov	r1, r4
 800a636:	4630      	mov	r0, r6
 800a638:	f7ff fef6 	bl	800a428 <_printf_common>
 800a63c:	3001      	adds	r0, #1
 800a63e:	d14d      	bne.n	800a6dc <_printf_i+0x1c8>
 800a640:	f04f 30ff 	mov.w	r0, #4294967295
 800a644:	b005      	add	sp, #20
 800a646:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a64a:	4839      	ldr	r0, [pc, #228]	; (800a730 <_printf_i+0x21c>)
 800a64c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800a650:	6813      	ldr	r3, [r2, #0]
 800a652:	6821      	ldr	r1, [r4, #0]
 800a654:	1d1d      	adds	r5, r3, #4
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6015      	str	r5, [r2, #0]
 800a65a:	060a      	lsls	r2, r1, #24
 800a65c:	d50b      	bpl.n	800a676 <_printf_i+0x162>
 800a65e:	07ca      	lsls	r2, r1, #31
 800a660:	bf44      	itt	mi
 800a662:	f041 0120 	orrmi.w	r1, r1, #32
 800a666:	6021      	strmi	r1, [r4, #0]
 800a668:	b91b      	cbnz	r3, 800a672 <_printf_i+0x15e>
 800a66a:	6822      	ldr	r2, [r4, #0]
 800a66c:	f022 0220 	bic.w	r2, r2, #32
 800a670:	6022      	str	r2, [r4, #0]
 800a672:	2210      	movs	r2, #16
 800a674:	e7b7      	b.n	800a5e6 <_printf_i+0xd2>
 800a676:	064d      	lsls	r5, r1, #25
 800a678:	bf48      	it	mi
 800a67a:	b29b      	uxthmi	r3, r3
 800a67c:	e7ef      	b.n	800a65e <_printf_i+0x14a>
 800a67e:	4665      	mov	r5, ip
 800a680:	fbb3 f1f2 	udiv	r1, r3, r2
 800a684:	fb02 3311 	mls	r3, r2, r1, r3
 800a688:	5cc3      	ldrb	r3, [r0, r3]
 800a68a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800a68e:	460b      	mov	r3, r1
 800a690:	2900      	cmp	r1, #0
 800a692:	d1f5      	bne.n	800a680 <_printf_i+0x16c>
 800a694:	e7b9      	b.n	800a60a <_printf_i+0xf6>
 800a696:	6813      	ldr	r3, [r2, #0]
 800a698:	6825      	ldr	r5, [r4, #0]
 800a69a:	6961      	ldr	r1, [r4, #20]
 800a69c:	1d18      	adds	r0, r3, #4
 800a69e:	6010      	str	r0, [r2, #0]
 800a6a0:	0628      	lsls	r0, r5, #24
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	d501      	bpl.n	800a6aa <_printf_i+0x196>
 800a6a6:	6019      	str	r1, [r3, #0]
 800a6a8:	e002      	b.n	800a6b0 <_printf_i+0x19c>
 800a6aa:	066a      	lsls	r2, r5, #25
 800a6ac:	d5fb      	bpl.n	800a6a6 <_printf_i+0x192>
 800a6ae:	8019      	strh	r1, [r3, #0]
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	6123      	str	r3, [r4, #16]
 800a6b4:	4665      	mov	r5, ip
 800a6b6:	e7b9      	b.n	800a62c <_printf_i+0x118>
 800a6b8:	6813      	ldr	r3, [r2, #0]
 800a6ba:	1d19      	adds	r1, r3, #4
 800a6bc:	6011      	str	r1, [r2, #0]
 800a6be:	681d      	ldr	r5, [r3, #0]
 800a6c0:	6862      	ldr	r2, [r4, #4]
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	4628      	mov	r0, r5
 800a6c6:	f7f5 fd9b 	bl	8000200 <memchr>
 800a6ca:	b108      	cbz	r0, 800a6d0 <_printf_i+0x1bc>
 800a6cc:	1b40      	subs	r0, r0, r5
 800a6ce:	6060      	str	r0, [r4, #4]
 800a6d0:	6863      	ldr	r3, [r4, #4]
 800a6d2:	6123      	str	r3, [r4, #16]
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6da:	e7a7      	b.n	800a62c <_printf_i+0x118>
 800a6dc:	6923      	ldr	r3, [r4, #16]
 800a6de:	462a      	mov	r2, r5
 800a6e0:	4639      	mov	r1, r7
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	47c0      	blx	r8
 800a6e6:	3001      	adds	r0, #1
 800a6e8:	d0aa      	beq.n	800a640 <_printf_i+0x12c>
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	079b      	lsls	r3, r3, #30
 800a6ee:	d413      	bmi.n	800a718 <_printf_i+0x204>
 800a6f0:	68e0      	ldr	r0, [r4, #12]
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	4298      	cmp	r0, r3
 800a6f6:	bfb8      	it	lt
 800a6f8:	4618      	movlt	r0, r3
 800a6fa:	e7a3      	b.n	800a644 <_printf_i+0x130>
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	464a      	mov	r2, r9
 800a700:	4639      	mov	r1, r7
 800a702:	4630      	mov	r0, r6
 800a704:	47c0      	blx	r8
 800a706:	3001      	adds	r0, #1
 800a708:	d09a      	beq.n	800a640 <_printf_i+0x12c>
 800a70a:	3501      	adds	r5, #1
 800a70c:	68e3      	ldr	r3, [r4, #12]
 800a70e:	9a03      	ldr	r2, [sp, #12]
 800a710:	1a9b      	subs	r3, r3, r2
 800a712:	42ab      	cmp	r3, r5
 800a714:	dcf2      	bgt.n	800a6fc <_printf_i+0x1e8>
 800a716:	e7eb      	b.n	800a6f0 <_printf_i+0x1dc>
 800a718:	2500      	movs	r5, #0
 800a71a:	f104 0919 	add.w	r9, r4, #25
 800a71e:	e7f5      	b.n	800a70c <_printf_i+0x1f8>
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1ac      	bne.n	800a67e <_printf_i+0x16a>
 800a724:	7803      	ldrb	r3, [r0, #0]
 800a726:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a72a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a72e:	e76c      	b.n	800a60a <_printf_i+0xf6>
 800a730:	0800b8a1 	.word	0x0800b8a1
 800a734:	0800b8b2 	.word	0x0800b8b2

0800a738 <memcpy>:
 800a738:	b510      	push	{r4, lr}
 800a73a:	1e43      	subs	r3, r0, #1
 800a73c:	440a      	add	r2, r1
 800a73e:	4291      	cmp	r1, r2
 800a740:	d100      	bne.n	800a744 <memcpy+0xc>
 800a742:	bd10      	pop	{r4, pc}
 800a744:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a748:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a74c:	e7f7      	b.n	800a73e <memcpy+0x6>

0800a74e <memmove>:
 800a74e:	4288      	cmp	r0, r1
 800a750:	b510      	push	{r4, lr}
 800a752:	eb01 0302 	add.w	r3, r1, r2
 800a756:	d807      	bhi.n	800a768 <memmove+0x1a>
 800a758:	1e42      	subs	r2, r0, #1
 800a75a:	4299      	cmp	r1, r3
 800a75c:	d00a      	beq.n	800a774 <memmove+0x26>
 800a75e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a762:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a766:	e7f8      	b.n	800a75a <memmove+0xc>
 800a768:	4283      	cmp	r3, r0
 800a76a:	d9f5      	bls.n	800a758 <memmove+0xa>
 800a76c:	1881      	adds	r1, r0, r2
 800a76e:	1ad2      	subs	r2, r2, r3
 800a770:	42d3      	cmn	r3, r2
 800a772:	d100      	bne.n	800a776 <memmove+0x28>
 800a774:	bd10      	pop	{r4, pc}
 800a776:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a77a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a77e:	e7f7      	b.n	800a770 <memmove+0x22>

0800a780 <_realloc_r>:
 800a780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a782:	4607      	mov	r7, r0
 800a784:	4614      	mov	r4, r2
 800a786:	460e      	mov	r6, r1
 800a788:	b921      	cbnz	r1, 800a794 <_realloc_r+0x14>
 800a78a:	4611      	mov	r1, r2
 800a78c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a790:	f7ff bc6c 	b.w	800a06c <_malloc_r>
 800a794:	b922      	cbnz	r2, 800a7a0 <_realloc_r+0x20>
 800a796:	f7ff fc1b 	bl	8009fd0 <_free_r>
 800a79a:	4625      	mov	r5, r4
 800a79c:	4628      	mov	r0, r5
 800a79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7a0:	f000 f814 	bl	800a7cc <_malloc_usable_size_r>
 800a7a4:	42a0      	cmp	r0, r4
 800a7a6:	d20f      	bcs.n	800a7c8 <_realloc_r+0x48>
 800a7a8:	4621      	mov	r1, r4
 800a7aa:	4638      	mov	r0, r7
 800a7ac:	f7ff fc5e 	bl	800a06c <_malloc_r>
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	2800      	cmp	r0, #0
 800a7b4:	d0f2      	beq.n	800a79c <_realloc_r+0x1c>
 800a7b6:	4631      	mov	r1, r6
 800a7b8:	4622      	mov	r2, r4
 800a7ba:	f7ff ffbd 	bl	800a738 <memcpy>
 800a7be:	4631      	mov	r1, r6
 800a7c0:	4638      	mov	r0, r7
 800a7c2:	f7ff fc05 	bl	8009fd0 <_free_r>
 800a7c6:	e7e9      	b.n	800a79c <_realloc_r+0x1c>
 800a7c8:	4635      	mov	r5, r6
 800a7ca:	e7e7      	b.n	800a79c <_realloc_r+0x1c>

0800a7cc <_malloc_usable_size_r>:
 800a7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7d0:	1f18      	subs	r0, r3, #4
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	bfbc      	itt	lt
 800a7d6:	580b      	ldrlt	r3, [r1, r0]
 800a7d8:	18c0      	addlt	r0, r0, r3
 800a7da:	4770      	bx	lr
 800a7dc:	0000      	movs	r0, r0
	...

0800a7e0 <sin>:
 800a7e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a7e2:	ec51 0b10 	vmov	r0, r1, d0
 800a7e6:	4a20      	ldr	r2, [pc, #128]	; (800a868 <sin+0x88>)
 800a7e8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	dc07      	bgt.n	800a800 <sin+0x20>
 800a7f0:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800a860 <sin+0x80>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	f000 fe37 	bl	800b468 <__kernel_sin>
 800a7fa:	ec51 0b10 	vmov	r0, r1, d0
 800a7fe:	e007      	b.n	800a810 <sin+0x30>
 800a800:	4a1a      	ldr	r2, [pc, #104]	; (800a86c <sin+0x8c>)
 800a802:	4293      	cmp	r3, r2
 800a804:	dd09      	ble.n	800a81a <sin+0x3a>
 800a806:	ee10 2a10 	vmov	r2, s0
 800a80a:	460b      	mov	r3, r1
 800a80c:	f7f5 fd4c 	bl	80002a8 <__aeabi_dsub>
 800a810:	ec41 0b10 	vmov	d0, r0, r1
 800a814:	b005      	add	sp, #20
 800a816:	f85d fb04 	ldr.w	pc, [sp], #4
 800a81a:	4668      	mov	r0, sp
 800a81c:	f000 f828 	bl	800a870 <__ieee754_rem_pio2>
 800a820:	f000 0003 	and.w	r0, r0, #3
 800a824:	2801      	cmp	r0, #1
 800a826:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a82a:	ed9d 0b00 	vldr	d0, [sp]
 800a82e:	d004      	beq.n	800a83a <sin+0x5a>
 800a830:	2802      	cmp	r0, #2
 800a832:	d005      	beq.n	800a840 <sin+0x60>
 800a834:	b970      	cbnz	r0, 800a854 <sin+0x74>
 800a836:	2001      	movs	r0, #1
 800a838:	e7dd      	b.n	800a7f6 <sin+0x16>
 800a83a:	f000 fa0d 	bl	800ac58 <__kernel_cos>
 800a83e:	e7dc      	b.n	800a7fa <sin+0x1a>
 800a840:	2001      	movs	r0, #1
 800a842:	f000 fe11 	bl	800b468 <__kernel_sin>
 800a846:	ec53 2b10 	vmov	r2, r3, d0
 800a84a:	ee10 0a10 	vmov	r0, s0
 800a84e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a852:	e7dd      	b.n	800a810 <sin+0x30>
 800a854:	f000 fa00 	bl	800ac58 <__kernel_cos>
 800a858:	e7f5      	b.n	800a846 <sin+0x66>
 800a85a:	bf00      	nop
 800a85c:	f3af 8000 	nop.w
	...
 800a868:	3fe921fb 	.word	0x3fe921fb
 800a86c:	7fefffff 	.word	0x7fefffff

0800a870 <__ieee754_rem_pio2>:
 800a870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a874:	ec57 6b10 	vmov	r6, r7, d0
 800a878:	4bc3      	ldr	r3, [pc, #780]	; (800ab88 <__ieee754_rem_pio2+0x318>)
 800a87a:	b08d      	sub	sp, #52	; 0x34
 800a87c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a880:	4598      	cmp	r8, r3
 800a882:	4604      	mov	r4, r0
 800a884:	9704      	str	r7, [sp, #16]
 800a886:	dc07      	bgt.n	800a898 <__ieee754_rem_pio2+0x28>
 800a888:	2200      	movs	r2, #0
 800a88a:	2300      	movs	r3, #0
 800a88c:	ed84 0b00 	vstr	d0, [r4]
 800a890:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a894:	2500      	movs	r5, #0
 800a896:	e027      	b.n	800a8e8 <__ieee754_rem_pio2+0x78>
 800a898:	4bbc      	ldr	r3, [pc, #752]	; (800ab8c <__ieee754_rem_pio2+0x31c>)
 800a89a:	4598      	cmp	r8, r3
 800a89c:	dc75      	bgt.n	800a98a <__ieee754_rem_pio2+0x11a>
 800a89e:	9b04      	ldr	r3, [sp, #16]
 800a8a0:	4dbb      	ldr	r5, [pc, #748]	; (800ab90 <__ieee754_rem_pio2+0x320>)
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	ee10 0a10 	vmov	r0, s0
 800a8a8:	a3a9      	add	r3, pc, #676	; (adr r3, 800ab50 <__ieee754_rem_pio2+0x2e0>)
 800a8aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	dd36      	ble.n	800a920 <__ieee754_rem_pio2+0xb0>
 800a8b2:	f7f5 fcf9 	bl	80002a8 <__aeabi_dsub>
 800a8b6:	45a8      	cmp	r8, r5
 800a8b8:	4606      	mov	r6, r0
 800a8ba:	460f      	mov	r7, r1
 800a8bc:	d018      	beq.n	800a8f0 <__ieee754_rem_pio2+0x80>
 800a8be:	a3a6      	add	r3, pc, #664	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x2e8>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fcf0 	bl	80002a8 <__aeabi_dsub>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	e9c4 2300 	strd	r2, r3, [r4]
 800a8d0:	4630      	mov	r0, r6
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	f7f5 fce8 	bl	80002a8 <__aeabi_dsub>
 800a8d8:	a39f      	add	r3, pc, #636	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x2e8>)
 800a8da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8de:	f7f5 fce3 	bl	80002a8 <__aeabi_dsub>
 800a8e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a8e6:	2501      	movs	r5, #1
 800a8e8:	4628      	mov	r0, r5
 800a8ea:	b00d      	add	sp, #52	; 0x34
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	a39b      	add	r3, pc, #620	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x2f0>)
 800a8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8f6:	f7f5 fcd7 	bl	80002a8 <__aeabi_dsub>
 800a8fa:	a39b      	add	r3, pc, #620	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x2f8>)
 800a8fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a900:	4606      	mov	r6, r0
 800a902:	460f      	mov	r7, r1
 800a904:	f7f5 fcd0 	bl	80002a8 <__aeabi_dsub>
 800a908:	4602      	mov	r2, r0
 800a90a:	460b      	mov	r3, r1
 800a90c:	e9c4 2300 	strd	r2, r3, [r4]
 800a910:	4630      	mov	r0, r6
 800a912:	4639      	mov	r1, r7
 800a914:	f7f5 fcc8 	bl	80002a8 <__aeabi_dsub>
 800a918:	a393      	add	r3, pc, #588	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x2f8>)
 800a91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a91e:	e7de      	b.n	800a8de <__ieee754_rem_pio2+0x6e>
 800a920:	f7f5 fcc4 	bl	80002ac <__adddf3>
 800a924:	45a8      	cmp	r8, r5
 800a926:	4606      	mov	r6, r0
 800a928:	460f      	mov	r7, r1
 800a92a:	d016      	beq.n	800a95a <__ieee754_rem_pio2+0xea>
 800a92c:	a38a      	add	r3, pc, #552	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x2e8>)
 800a92e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a932:	f7f5 fcbb 	bl	80002ac <__adddf3>
 800a936:	4602      	mov	r2, r0
 800a938:	460b      	mov	r3, r1
 800a93a:	e9c4 2300 	strd	r2, r3, [r4]
 800a93e:	4630      	mov	r0, r6
 800a940:	4639      	mov	r1, r7
 800a942:	f7f5 fcb1 	bl	80002a8 <__aeabi_dsub>
 800a946:	a384      	add	r3, pc, #528	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x2e8>)
 800a948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a94c:	f7f5 fcae 	bl	80002ac <__adddf3>
 800a950:	f04f 35ff 	mov.w	r5, #4294967295
 800a954:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a958:	e7c6      	b.n	800a8e8 <__ieee754_rem_pio2+0x78>
 800a95a:	a381      	add	r3, pc, #516	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x2f0>)
 800a95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a960:	f7f5 fca4 	bl	80002ac <__adddf3>
 800a964:	a380      	add	r3, pc, #512	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x2f8>)
 800a966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a96a:	4606      	mov	r6, r0
 800a96c:	460f      	mov	r7, r1
 800a96e:	f7f5 fc9d 	bl	80002ac <__adddf3>
 800a972:	4602      	mov	r2, r0
 800a974:	460b      	mov	r3, r1
 800a976:	e9c4 2300 	strd	r2, r3, [r4]
 800a97a:	4630      	mov	r0, r6
 800a97c:	4639      	mov	r1, r7
 800a97e:	f7f5 fc93 	bl	80002a8 <__aeabi_dsub>
 800a982:	a379      	add	r3, pc, #484	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x2f8>)
 800a984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a988:	e7e0      	b.n	800a94c <__ieee754_rem_pio2+0xdc>
 800a98a:	4b82      	ldr	r3, [pc, #520]	; (800ab94 <__ieee754_rem_pio2+0x324>)
 800a98c:	4598      	cmp	r8, r3
 800a98e:	f300 80d0 	bgt.w	800ab32 <__ieee754_rem_pio2+0x2c2>
 800a992:	f000 fe23 	bl	800b5dc <fabs>
 800a996:	ec57 6b10 	vmov	r6, r7, d0
 800a99a:	ee10 0a10 	vmov	r0, s0
 800a99e:	a374      	add	r3, pc, #464	; (adr r3, 800ab70 <__ieee754_rem_pio2+0x300>)
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	f7f5 fe37 	bl	8000618 <__aeabi_dmul>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	4b7a      	ldr	r3, [pc, #488]	; (800ab98 <__ieee754_rem_pio2+0x328>)
 800a9ae:	f7f5 fc7d 	bl	80002ac <__adddf3>
 800a9b2:	f7f6 f8cb 	bl	8000b4c <__aeabi_d2iz>
 800a9b6:	4605      	mov	r5, r0
 800a9b8:	f7f5 fdc4 	bl	8000544 <__aeabi_i2d>
 800a9bc:	a364      	add	r3, pc, #400	; (adr r3, 800ab50 <__ieee754_rem_pio2+0x2e0>)
 800a9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9c6:	f7f5 fe27 	bl	8000618 <__aeabi_dmul>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f5 fc69 	bl	80002a8 <__aeabi_dsub>
 800a9d6:	a360      	add	r3, pc, #384	; (adr r3, 800ab58 <__ieee754_rem_pio2+0x2e8>)
 800a9d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9dc:	4682      	mov	sl, r0
 800a9de:	468b      	mov	fp, r1
 800a9e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a9e4:	f7f5 fe18 	bl	8000618 <__aeabi_dmul>
 800a9e8:	2d1f      	cmp	r5, #31
 800a9ea:	4606      	mov	r6, r0
 800a9ec:	460f      	mov	r7, r1
 800a9ee:	dc0c      	bgt.n	800aa0a <__ieee754_rem_pio2+0x19a>
 800a9f0:	1e6a      	subs	r2, r5, #1
 800a9f2:	4b6a      	ldr	r3, [pc, #424]	; (800ab9c <__ieee754_rem_pio2+0x32c>)
 800a9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f8:	4543      	cmp	r3, r8
 800a9fa:	d006      	beq.n	800aa0a <__ieee754_rem_pio2+0x19a>
 800a9fc:	4632      	mov	r2, r6
 800a9fe:	463b      	mov	r3, r7
 800aa00:	4650      	mov	r0, sl
 800aa02:	4659      	mov	r1, fp
 800aa04:	f7f5 fc50 	bl	80002a8 <__aeabi_dsub>
 800aa08:	e00e      	b.n	800aa28 <__ieee754_rem_pio2+0x1b8>
 800aa0a:	4632      	mov	r2, r6
 800aa0c:	463b      	mov	r3, r7
 800aa0e:	4650      	mov	r0, sl
 800aa10:	4659      	mov	r1, fp
 800aa12:	f7f5 fc49 	bl	80002a8 <__aeabi_dsub>
 800aa16:	ea4f 5328 	mov.w	r3, r8, asr #20
 800aa1a:	9305      	str	r3, [sp, #20]
 800aa1c:	9a05      	ldr	r2, [sp, #20]
 800aa1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa22:	1ad3      	subs	r3, r2, r3
 800aa24:	2b10      	cmp	r3, #16
 800aa26:	dc02      	bgt.n	800aa2e <__ieee754_rem_pio2+0x1be>
 800aa28:	e9c4 0100 	strd	r0, r1, [r4]
 800aa2c:	e039      	b.n	800aaa2 <__ieee754_rem_pio2+0x232>
 800aa2e:	a34c      	add	r3, pc, #304	; (adr r3, 800ab60 <__ieee754_rem_pio2+0x2f0>)
 800aa30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa38:	f7f5 fdee 	bl	8000618 <__aeabi_dmul>
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	460f      	mov	r7, r1
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	4650      	mov	r0, sl
 800aa46:	4659      	mov	r1, fp
 800aa48:	f7f5 fc2e 	bl	80002a8 <__aeabi_dsub>
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4680      	mov	r8, r0
 800aa52:	4689      	mov	r9, r1
 800aa54:	4650      	mov	r0, sl
 800aa56:	4659      	mov	r1, fp
 800aa58:	f7f5 fc26 	bl	80002a8 <__aeabi_dsub>
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	463b      	mov	r3, r7
 800aa60:	f7f5 fc22 	bl	80002a8 <__aeabi_dsub>
 800aa64:	a340      	add	r3, pc, #256	; (adr r3, 800ab68 <__ieee754_rem_pio2+0x2f8>)
 800aa66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aa72:	f7f5 fdd1 	bl	8000618 <__aeabi_dmul>
 800aa76:	4632      	mov	r2, r6
 800aa78:	463b      	mov	r3, r7
 800aa7a:	f7f5 fc15 	bl	80002a8 <__aeabi_dsub>
 800aa7e:	4602      	mov	r2, r0
 800aa80:	460b      	mov	r3, r1
 800aa82:	4606      	mov	r6, r0
 800aa84:	460f      	mov	r7, r1
 800aa86:	4640      	mov	r0, r8
 800aa88:	4649      	mov	r1, r9
 800aa8a:	f7f5 fc0d 	bl	80002a8 <__aeabi_dsub>
 800aa8e:	9a05      	ldr	r2, [sp, #20]
 800aa90:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800aa94:	1ad3      	subs	r3, r2, r3
 800aa96:	2b31      	cmp	r3, #49	; 0x31
 800aa98:	dc20      	bgt.n	800aadc <__ieee754_rem_pio2+0x26c>
 800aa9a:	e9c4 0100 	strd	r0, r1, [r4]
 800aa9e:	46c2      	mov	sl, r8
 800aaa0:	46cb      	mov	fp, r9
 800aaa2:	e9d4 8900 	ldrd	r8, r9, [r4]
 800aaa6:	4650      	mov	r0, sl
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	464b      	mov	r3, r9
 800aaac:	4659      	mov	r1, fp
 800aaae:	f7f5 fbfb 	bl	80002a8 <__aeabi_dsub>
 800aab2:	463b      	mov	r3, r7
 800aab4:	4632      	mov	r2, r6
 800aab6:	f7f5 fbf7 	bl	80002a8 <__aeabi_dsub>
 800aaba:	9b04      	ldr	r3, [sp, #16]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800aac2:	f6bf af11 	bge.w	800a8e8 <__ieee754_rem_pio2+0x78>
 800aac6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800aaca:	6063      	str	r3, [r4, #4]
 800aacc:	f8c4 8000 	str.w	r8, [r4]
 800aad0:	60a0      	str	r0, [r4, #8]
 800aad2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aad6:	60e3      	str	r3, [r4, #12]
 800aad8:	426d      	negs	r5, r5
 800aada:	e705      	b.n	800a8e8 <__ieee754_rem_pio2+0x78>
 800aadc:	a326      	add	r3, pc, #152	; (adr r3, 800ab78 <__ieee754_rem_pio2+0x308>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae6:	f7f5 fd97 	bl	8000618 <__aeabi_dmul>
 800aaea:	4606      	mov	r6, r0
 800aaec:	460f      	mov	r7, r1
 800aaee:	4602      	mov	r2, r0
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4640      	mov	r0, r8
 800aaf4:	4649      	mov	r1, r9
 800aaf6:	f7f5 fbd7 	bl	80002a8 <__aeabi_dsub>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	4682      	mov	sl, r0
 800ab00:	468b      	mov	fp, r1
 800ab02:	4640      	mov	r0, r8
 800ab04:	4649      	mov	r1, r9
 800ab06:	f7f5 fbcf 	bl	80002a8 <__aeabi_dsub>
 800ab0a:	4632      	mov	r2, r6
 800ab0c:	463b      	mov	r3, r7
 800ab0e:	f7f5 fbcb 	bl	80002a8 <__aeabi_dsub>
 800ab12:	a31b      	add	r3, pc, #108	; (adr r3, 800ab80 <__ieee754_rem_pio2+0x310>)
 800ab14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab18:	4606      	mov	r6, r0
 800ab1a:	460f      	mov	r7, r1
 800ab1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ab20:	f7f5 fd7a 	bl	8000618 <__aeabi_dmul>
 800ab24:	4632      	mov	r2, r6
 800ab26:	463b      	mov	r3, r7
 800ab28:	f7f5 fbbe 	bl	80002a8 <__aeabi_dsub>
 800ab2c:	4606      	mov	r6, r0
 800ab2e:	460f      	mov	r7, r1
 800ab30:	e764      	b.n	800a9fc <__ieee754_rem_pio2+0x18c>
 800ab32:	4b1b      	ldr	r3, [pc, #108]	; (800aba0 <__ieee754_rem_pio2+0x330>)
 800ab34:	4598      	cmp	r8, r3
 800ab36:	dd35      	ble.n	800aba4 <__ieee754_rem_pio2+0x334>
 800ab38:	ee10 2a10 	vmov	r2, s0
 800ab3c:	463b      	mov	r3, r7
 800ab3e:	4630      	mov	r0, r6
 800ab40:	4639      	mov	r1, r7
 800ab42:	f7f5 fbb1 	bl	80002a8 <__aeabi_dsub>
 800ab46:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800ab4a:	e9c4 0100 	strd	r0, r1, [r4]
 800ab4e:	e6a1      	b.n	800a894 <__ieee754_rem_pio2+0x24>
 800ab50:	54400000 	.word	0x54400000
 800ab54:	3ff921fb 	.word	0x3ff921fb
 800ab58:	1a626331 	.word	0x1a626331
 800ab5c:	3dd0b461 	.word	0x3dd0b461
 800ab60:	1a600000 	.word	0x1a600000
 800ab64:	3dd0b461 	.word	0x3dd0b461
 800ab68:	2e037073 	.word	0x2e037073
 800ab6c:	3ba3198a 	.word	0x3ba3198a
 800ab70:	6dc9c883 	.word	0x6dc9c883
 800ab74:	3fe45f30 	.word	0x3fe45f30
 800ab78:	2e000000 	.word	0x2e000000
 800ab7c:	3ba3198a 	.word	0x3ba3198a
 800ab80:	252049c1 	.word	0x252049c1
 800ab84:	397b839a 	.word	0x397b839a
 800ab88:	3fe921fb 	.word	0x3fe921fb
 800ab8c:	4002d97b 	.word	0x4002d97b
 800ab90:	3ff921fb 	.word	0x3ff921fb
 800ab94:	413921fb 	.word	0x413921fb
 800ab98:	3fe00000 	.word	0x3fe00000
 800ab9c:	0800b8c4 	.word	0x0800b8c4
 800aba0:	7fefffff 	.word	0x7fefffff
 800aba4:	ea4f 5528 	mov.w	r5, r8, asr #20
 800aba8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800abac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800abb0:	4630      	mov	r0, r6
 800abb2:	460f      	mov	r7, r1
 800abb4:	f7f5 ffca 	bl	8000b4c <__aeabi_d2iz>
 800abb8:	f7f5 fcc4 	bl	8000544 <__aeabi_i2d>
 800abbc:	4602      	mov	r2, r0
 800abbe:	460b      	mov	r3, r1
 800abc0:	4630      	mov	r0, r6
 800abc2:	4639      	mov	r1, r7
 800abc4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800abc8:	f7f5 fb6e 	bl	80002a8 <__aeabi_dsub>
 800abcc:	2200      	movs	r2, #0
 800abce:	4b1f      	ldr	r3, [pc, #124]	; (800ac4c <__ieee754_rem_pio2+0x3dc>)
 800abd0:	f7f5 fd22 	bl	8000618 <__aeabi_dmul>
 800abd4:	460f      	mov	r7, r1
 800abd6:	4606      	mov	r6, r0
 800abd8:	f7f5 ffb8 	bl	8000b4c <__aeabi_d2iz>
 800abdc:	f7f5 fcb2 	bl	8000544 <__aeabi_i2d>
 800abe0:	4602      	mov	r2, r0
 800abe2:	460b      	mov	r3, r1
 800abe4:	4630      	mov	r0, r6
 800abe6:	4639      	mov	r1, r7
 800abe8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800abec:	f7f5 fb5c 	bl	80002a8 <__aeabi_dsub>
 800abf0:	2200      	movs	r2, #0
 800abf2:	4b16      	ldr	r3, [pc, #88]	; (800ac4c <__ieee754_rem_pio2+0x3dc>)
 800abf4:	f7f5 fd10 	bl	8000618 <__aeabi_dmul>
 800abf8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800abfc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ac00:	f04f 0803 	mov.w	r8, #3
 800ac04:	2600      	movs	r6, #0
 800ac06:	2700      	movs	r7, #0
 800ac08:	4632      	mov	r2, r6
 800ac0a:	463b      	mov	r3, r7
 800ac0c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800ac10:	f108 3aff 	add.w	sl, r8, #4294967295
 800ac14:	f7f5 ff68 	bl	8000ae8 <__aeabi_dcmpeq>
 800ac18:	b9b0      	cbnz	r0, 800ac48 <__ieee754_rem_pio2+0x3d8>
 800ac1a:	4b0d      	ldr	r3, [pc, #52]	; (800ac50 <__ieee754_rem_pio2+0x3e0>)
 800ac1c:	9301      	str	r3, [sp, #4]
 800ac1e:	2302      	movs	r3, #2
 800ac20:	9300      	str	r3, [sp, #0]
 800ac22:	462a      	mov	r2, r5
 800ac24:	4643      	mov	r3, r8
 800ac26:	4621      	mov	r1, r4
 800ac28:	a806      	add	r0, sp, #24
 800ac2a:	f000 f8dd 	bl	800ade8 <__kernel_rem_pio2>
 800ac2e:	9b04      	ldr	r3, [sp, #16]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	4605      	mov	r5, r0
 800ac34:	f6bf ae58 	bge.w	800a8e8 <__ieee754_rem_pio2+0x78>
 800ac38:	6863      	ldr	r3, [r4, #4]
 800ac3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac3e:	6063      	str	r3, [r4, #4]
 800ac40:	68e3      	ldr	r3, [r4, #12]
 800ac42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ac46:	e746      	b.n	800aad6 <__ieee754_rem_pio2+0x266>
 800ac48:	46d0      	mov	r8, sl
 800ac4a:	e7dd      	b.n	800ac08 <__ieee754_rem_pio2+0x398>
 800ac4c:	41700000 	.word	0x41700000
 800ac50:	0800b944 	.word	0x0800b944
 800ac54:	00000000 	.word	0x00000000

0800ac58 <__kernel_cos>:
 800ac58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	ec59 8b10 	vmov	r8, r9, d0
 800ac60:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800ac64:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800ac68:	ed2d 8b02 	vpush	{d8}
 800ac6c:	eeb0 8a41 	vmov.f32	s16, s2
 800ac70:	eef0 8a61 	vmov.f32	s17, s3
 800ac74:	da07      	bge.n	800ac86 <__kernel_cos+0x2e>
 800ac76:	ee10 0a10 	vmov	r0, s0
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	f7f5 ff66 	bl	8000b4c <__aeabi_d2iz>
 800ac80:	2800      	cmp	r0, #0
 800ac82:	f000 8089 	beq.w	800ad98 <__kernel_cos+0x140>
 800ac86:	4642      	mov	r2, r8
 800ac88:	464b      	mov	r3, r9
 800ac8a:	4640      	mov	r0, r8
 800ac8c:	4649      	mov	r1, r9
 800ac8e:	f7f5 fcc3 	bl	8000618 <__aeabi_dmul>
 800ac92:	2200      	movs	r2, #0
 800ac94:	4b4e      	ldr	r3, [pc, #312]	; (800add0 <__kernel_cos+0x178>)
 800ac96:	4604      	mov	r4, r0
 800ac98:	460d      	mov	r5, r1
 800ac9a:	f7f5 fcbd 	bl	8000618 <__aeabi_dmul>
 800ac9e:	a340      	add	r3, pc, #256	; (adr r3, 800ada0 <__kernel_cos+0x148>)
 800aca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca4:	4682      	mov	sl, r0
 800aca6:	468b      	mov	fp, r1
 800aca8:	4620      	mov	r0, r4
 800acaa:	4629      	mov	r1, r5
 800acac:	f7f5 fcb4 	bl	8000618 <__aeabi_dmul>
 800acb0:	a33d      	add	r3, pc, #244	; (adr r3, 800ada8 <__kernel_cos+0x150>)
 800acb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acb6:	f7f5 faf9 	bl	80002ac <__adddf3>
 800acba:	4622      	mov	r2, r4
 800acbc:	462b      	mov	r3, r5
 800acbe:	f7f5 fcab 	bl	8000618 <__aeabi_dmul>
 800acc2:	a33b      	add	r3, pc, #236	; (adr r3, 800adb0 <__kernel_cos+0x158>)
 800acc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc8:	f7f5 faee 	bl	80002a8 <__aeabi_dsub>
 800accc:	4622      	mov	r2, r4
 800acce:	462b      	mov	r3, r5
 800acd0:	f7f5 fca2 	bl	8000618 <__aeabi_dmul>
 800acd4:	a338      	add	r3, pc, #224	; (adr r3, 800adb8 <__kernel_cos+0x160>)
 800acd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acda:	f7f5 fae7 	bl	80002ac <__adddf3>
 800acde:	4622      	mov	r2, r4
 800ace0:	462b      	mov	r3, r5
 800ace2:	f7f5 fc99 	bl	8000618 <__aeabi_dmul>
 800ace6:	a336      	add	r3, pc, #216	; (adr r3, 800adc0 <__kernel_cos+0x168>)
 800ace8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acec:	f7f5 fadc 	bl	80002a8 <__aeabi_dsub>
 800acf0:	4622      	mov	r2, r4
 800acf2:	462b      	mov	r3, r5
 800acf4:	f7f5 fc90 	bl	8000618 <__aeabi_dmul>
 800acf8:	a333      	add	r3, pc, #204	; (adr r3, 800adc8 <__kernel_cos+0x170>)
 800acfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acfe:	f7f5 fad5 	bl	80002ac <__adddf3>
 800ad02:	4622      	mov	r2, r4
 800ad04:	462b      	mov	r3, r5
 800ad06:	f7f5 fc87 	bl	8000618 <__aeabi_dmul>
 800ad0a:	4622      	mov	r2, r4
 800ad0c:	462b      	mov	r3, r5
 800ad0e:	f7f5 fc83 	bl	8000618 <__aeabi_dmul>
 800ad12:	ec53 2b18 	vmov	r2, r3, d8
 800ad16:	4604      	mov	r4, r0
 800ad18:	460d      	mov	r5, r1
 800ad1a:	4640      	mov	r0, r8
 800ad1c:	4649      	mov	r1, r9
 800ad1e:	f7f5 fc7b 	bl	8000618 <__aeabi_dmul>
 800ad22:	460b      	mov	r3, r1
 800ad24:	4602      	mov	r2, r0
 800ad26:	4629      	mov	r1, r5
 800ad28:	4620      	mov	r0, r4
 800ad2a:	f7f5 fabd 	bl	80002a8 <__aeabi_dsub>
 800ad2e:	4b29      	ldr	r3, [pc, #164]	; (800add4 <__kernel_cos+0x17c>)
 800ad30:	429e      	cmp	r6, r3
 800ad32:	4680      	mov	r8, r0
 800ad34:	4689      	mov	r9, r1
 800ad36:	dc11      	bgt.n	800ad5c <__kernel_cos+0x104>
 800ad38:	4602      	mov	r2, r0
 800ad3a:	460b      	mov	r3, r1
 800ad3c:	4650      	mov	r0, sl
 800ad3e:	4659      	mov	r1, fp
 800ad40:	f7f5 fab2 	bl	80002a8 <__aeabi_dsub>
 800ad44:	460b      	mov	r3, r1
 800ad46:	4924      	ldr	r1, [pc, #144]	; (800add8 <__kernel_cos+0x180>)
 800ad48:	4602      	mov	r2, r0
 800ad4a:	2000      	movs	r0, #0
 800ad4c:	f7f5 faac 	bl	80002a8 <__aeabi_dsub>
 800ad50:	ecbd 8b02 	vpop	{d8}
 800ad54:	ec41 0b10 	vmov	d0, r0, r1
 800ad58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad5c:	4b1f      	ldr	r3, [pc, #124]	; (800addc <__kernel_cos+0x184>)
 800ad5e:	491e      	ldr	r1, [pc, #120]	; (800add8 <__kernel_cos+0x180>)
 800ad60:	429e      	cmp	r6, r3
 800ad62:	bfcc      	ite	gt
 800ad64:	4d1e      	ldrgt	r5, [pc, #120]	; (800ade0 <__kernel_cos+0x188>)
 800ad66:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800ad6a:	2400      	movs	r4, #0
 800ad6c:	4622      	mov	r2, r4
 800ad6e:	462b      	mov	r3, r5
 800ad70:	2000      	movs	r0, #0
 800ad72:	f7f5 fa99 	bl	80002a8 <__aeabi_dsub>
 800ad76:	4622      	mov	r2, r4
 800ad78:	4606      	mov	r6, r0
 800ad7a:	460f      	mov	r7, r1
 800ad7c:	462b      	mov	r3, r5
 800ad7e:	4650      	mov	r0, sl
 800ad80:	4659      	mov	r1, fp
 800ad82:	f7f5 fa91 	bl	80002a8 <__aeabi_dsub>
 800ad86:	4642      	mov	r2, r8
 800ad88:	464b      	mov	r3, r9
 800ad8a:	f7f5 fa8d 	bl	80002a8 <__aeabi_dsub>
 800ad8e:	4602      	mov	r2, r0
 800ad90:	460b      	mov	r3, r1
 800ad92:	4630      	mov	r0, r6
 800ad94:	4639      	mov	r1, r7
 800ad96:	e7d9      	b.n	800ad4c <__kernel_cos+0xf4>
 800ad98:	2000      	movs	r0, #0
 800ad9a:	490f      	ldr	r1, [pc, #60]	; (800add8 <__kernel_cos+0x180>)
 800ad9c:	e7d8      	b.n	800ad50 <__kernel_cos+0xf8>
 800ad9e:	bf00      	nop
 800ada0:	be8838d4 	.word	0xbe8838d4
 800ada4:	bda8fae9 	.word	0xbda8fae9
 800ada8:	bdb4b1c4 	.word	0xbdb4b1c4
 800adac:	3e21ee9e 	.word	0x3e21ee9e
 800adb0:	809c52ad 	.word	0x809c52ad
 800adb4:	3e927e4f 	.word	0x3e927e4f
 800adb8:	19cb1590 	.word	0x19cb1590
 800adbc:	3efa01a0 	.word	0x3efa01a0
 800adc0:	16c15177 	.word	0x16c15177
 800adc4:	3f56c16c 	.word	0x3f56c16c
 800adc8:	5555554c 	.word	0x5555554c
 800adcc:	3fa55555 	.word	0x3fa55555
 800add0:	3fe00000 	.word	0x3fe00000
 800add4:	3fd33332 	.word	0x3fd33332
 800add8:	3ff00000 	.word	0x3ff00000
 800addc:	3fe90000 	.word	0x3fe90000
 800ade0:	3fd20000 	.word	0x3fd20000
 800ade4:	00000000 	.word	0x00000000

0800ade8 <__kernel_rem_pio2>:
 800ade8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adec:	ed2d 8b02 	vpush	{d8}
 800adf0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800adf4:	1ed4      	subs	r4, r2, #3
 800adf6:	9308      	str	r3, [sp, #32]
 800adf8:	9101      	str	r1, [sp, #4]
 800adfa:	4bc5      	ldr	r3, [pc, #788]	; (800b110 <__kernel_rem_pio2+0x328>)
 800adfc:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800adfe:	9009      	str	r0, [sp, #36]	; 0x24
 800ae00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ae04:	9304      	str	r3, [sp, #16]
 800ae06:	9b08      	ldr	r3, [sp, #32]
 800ae08:	3b01      	subs	r3, #1
 800ae0a:	9307      	str	r3, [sp, #28]
 800ae0c:	2318      	movs	r3, #24
 800ae0e:	fb94 f4f3 	sdiv	r4, r4, r3
 800ae12:	f06f 0317 	mvn.w	r3, #23
 800ae16:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800ae1a:	fb04 3303 	mla	r3, r4, r3, r3
 800ae1e:	eb03 0a02 	add.w	sl, r3, r2
 800ae22:	9b04      	ldr	r3, [sp, #16]
 800ae24:	9a07      	ldr	r2, [sp, #28]
 800ae26:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800b100 <__kernel_rem_pio2+0x318>
 800ae2a:	eb03 0802 	add.w	r8, r3, r2
 800ae2e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ae30:	1aa7      	subs	r7, r4, r2
 800ae32:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ae36:	ae22      	add	r6, sp, #136	; 0x88
 800ae38:	2500      	movs	r5, #0
 800ae3a:	4545      	cmp	r5, r8
 800ae3c:	dd13      	ble.n	800ae66 <__kernel_rem_pio2+0x7e>
 800ae3e:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800b100 <__kernel_rem_pio2+0x318>
 800ae42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ae46:	2600      	movs	r6, #0
 800ae48:	9b04      	ldr	r3, [sp, #16]
 800ae4a:	429e      	cmp	r6, r3
 800ae4c:	dc32      	bgt.n	800aeb4 <__kernel_rem_pio2+0xcc>
 800ae4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae50:	9302      	str	r3, [sp, #8]
 800ae52:	9b08      	ldr	r3, [sp, #32]
 800ae54:	199d      	adds	r5, r3, r6
 800ae56:	ab22      	add	r3, sp, #136	; 0x88
 800ae58:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800ae5c:	9306      	str	r3, [sp, #24]
 800ae5e:	ec59 8b18 	vmov	r8, r9, d8
 800ae62:	2700      	movs	r7, #0
 800ae64:	e01f      	b.n	800aea6 <__kernel_rem_pio2+0xbe>
 800ae66:	42ef      	cmn	r7, r5
 800ae68:	d407      	bmi.n	800ae7a <__kernel_rem_pio2+0x92>
 800ae6a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ae6e:	f7f5 fb69 	bl	8000544 <__aeabi_i2d>
 800ae72:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ae76:	3501      	adds	r5, #1
 800ae78:	e7df      	b.n	800ae3a <__kernel_rem_pio2+0x52>
 800ae7a:	ec51 0b18 	vmov	r0, r1, d8
 800ae7e:	e7f8      	b.n	800ae72 <__kernel_rem_pio2+0x8a>
 800ae80:	9906      	ldr	r1, [sp, #24]
 800ae82:	9d02      	ldr	r5, [sp, #8]
 800ae84:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800ae88:	9106      	str	r1, [sp, #24]
 800ae8a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800ae8e:	9502      	str	r5, [sp, #8]
 800ae90:	f7f5 fbc2 	bl	8000618 <__aeabi_dmul>
 800ae94:	4602      	mov	r2, r0
 800ae96:	460b      	mov	r3, r1
 800ae98:	4640      	mov	r0, r8
 800ae9a:	4649      	mov	r1, r9
 800ae9c:	f7f5 fa06 	bl	80002ac <__adddf3>
 800aea0:	3701      	adds	r7, #1
 800aea2:	4680      	mov	r8, r0
 800aea4:	4689      	mov	r9, r1
 800aea6:	9b07      	ldr	r3, [sp, #28]
 800aea8:	429f      	cmp	r7, r3
 800aeaa:	dde9      	ble.n	800ae80 <__kernel_rem_pio2+0x98>
 800aeac:	e8eb 8902 	strd	r8, r9, [fp], #8
 800aeb0:	3601      	adds	r6, #1
 800aeb2:	e7c9      	b.n	800ae48 <__kernel_rem_pio2+0x60>
 800aeb4:	9b04      	ldr	r3, [sp, #16]
 800aeb6:	aa0e      	add	r2, sp, #56	; 0x38
 800aeb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800aebc:	930c      	str	r3, [sp, #48]	; 0x30
 800aebe:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800aec0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800aec4:	9c04      	ldr	r4, [sp, #16]
 800aec6:	930b      	str	r3, [sp, #44]	; 0x2c
 800aec8:	ab9a      	add	r3, sp, #616	; 0x268
 800aeca:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800aece:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800aed2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aed6:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800aeda:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800aede:	ab9a      	add	r3, sp, #616	; 0x268
 800aee0:	445b      	add	r3, fp
 800aee2:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800aee6:	2500      	movs	r5, #0
 800aee8:	1b63      	subs	r3, r4, r5
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	dc78      	bgt.n	800afe0 <__kernel_rem_pio2+0x1f8>
 800aeee:	4650      	mov	r0, sl
 800aef0:	ec49 8b10 	vmov	d0, r8, r9
 800aef4:	f000 fc00 	bl	800b6f8 <scalbn>
 800aef8:	ec57 6b10 	vmov	r6, r7, d0
 800aefc:	2200      	movs	r2, #0
 800aefe:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800af02:	ee10 0a10 	vmov	r0, s0
 800af06:	4639      	mov	r1, r7
 800af08:	f7f5 fb86 	bl	8000618 <__aeabi_dmul>
 800af0c:	ec41 0b10 	vmov	d0, r0, r1
 800af10:	f000 fb6e 	bl	800b5f0 <floor>
 800af14:	2200      	movs	r2, #0
 800af16:	ec51 0b10 	vmov	r0, r1, d0
 800af1a:	4b7e      	ldr	r3, [pc, #504]	; (800b114 <__kernel_rem_pio2+0x32c>)
 800af1c:	f7f5 fb7c 	bl	8000618 <__aeabi_dmul>
 800af20:	4602      	mov	r2, r0
 800af22:	460b      	mov	r3, r1
 800af24:	4630      	mov	r0, r6
 800af26:	4639      	mov	r1, r7
 800af28:	f7f5 f9be 	bl	80002a8 <__aeabi_dsub>
 800af2c:	460f      	mov	r7, r1
 800af2e:	4606      	mov	r6, r0
 800af30:	f7f5 fe0c 	bl	8000b4c <__aeabi_d2iz>
 800af34:	9006      	str	r0, [sp, #24]
 800af36:	f7f5 fb05 	bl	8000544 <__aeabi_i2d>
 800af3a:	4602      	mov	r2, r0
 800af3c:	460b      	mov	r3, r1
 800af3e:	4630      	mov	r0, r6
 800af40:	4639      	mov	r1, r7
 800af42:	f7f5 f9b1 	bl	80002a8 <__aeabi_dsub>
 800af46:	f1ba 0f00 	cmp.w	sl, #0
 800af4a:	4606      	mov	r6, r0
 800af4c:	460f      	mov	r7, r1
 800af4e:	dd6c      	ble.n	800b02a <__kernel_rem_pio2+0x242>
 800af50:	1e62      	subs	r2, r4, #1
 800af52:	ab0e      	add	r3, sp, #56	; 0x38
 800af54:	f1ca 0118 	rsb	r1, sl, #24
 800af58:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800af5c:	9d06      	ldr	r5, [sp, #24]
 800af5e:	fa40 f301 	asr.w	r3, r0, r1
 800af62:	441d      	add	r5, r3
 800af64:	408b      	lsls	r3, r1
 800af66:	1ac0      	subs	r0, r0, r3
 800af68:	ab0e      	add	r3, sp, #56	; 0x38
 800af6a:	9506      	str	r5, [sp, #24]
 800af6c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800af70:	f1ca 0317 	rsb	r3, sl, #23
 800af74:	fa40 f303 	asr.w	r3, r0, r3
 800af78:	9302      	str	r3, [sp, #8]
 800af7a:	9b02      	ldr	r3, [sp, #8]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	dd62      	ble.n	800b046 <__kernel_rem_pio2+0x25e>
 800af80:	9b06      	ldr	r3, [sp, #24]
 800af82:	2200      	movs	r2, #0
 800af84:	3301      	adds	r3, #1
 800af86:	9306      	str	r3, [sp, #24]
 800af88:	4615      	mov	r5, r2
 800af8a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800af8e:	4294      	cmp	r4, r2
 800af90:	f300 8095 	bgt.w	800b0be <__kernel_rem_pio2+0x2d6>
 800af94:	f1ba 0f00 	cmp.w	sl, #0
 800af98:	dd07      	ble.n	800afaa <__kernel_rem_pio2+0x1c2>
 800af9a:	f1ba 0f01 	cmp.w	sl, #1
 800af9e:	f000 80a2 	beq.w	800b0e6 <__kernel_rem_pio2+0x2fe>
 800afa2:	f1ba 0f02 	cmp.w	sl, #2
 800afa6:	f000 80c1 	beq.w	800b12c <__kernel_rem_pio2+0x344>
 800afaa:	9b02      	ldr	r3, [sp, #8]
 800afac:	2b02      	cmp	r3, #2
 800afae:	d14a      	bne.n	800b046 <__kernel_rem_pio2+0x25e>
 800afb0:	4632      	mov	r2, r6
 800afb2:	463b      	mov	r3, r7
 800afb4:	2000      	movs	r0, #0
 800afb6:	4958      	ldr	r1, [pc, #352]	; (800b118 <__kernel_rem_pio2+0x330>)
 800afb8:	f7f5 f976 	bl	80002a8 <__aeabi_dsub>
 800afbc:	4606      	mov	r6, r0
 800afbe:	460f      	mov	r7, r1
 800afc0:	2d00      	cmp	r5, #0
 800afc2:	d040      	beq.n	800b046 <__kernel_rem_pio2+0x25e>
 800afc4:	4650      	mov	r0, sl
 800afc6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800b108 <__kernel_rem_pio2+0x320>
 800afca:	f000 fb95 	bl	800b6f8 <scalbn>
 800afce:	4630      	mov	r0, r6
 800afd0:	4639      	mov	r1, r7
 800afd2:	ec53 2b10 	vmov	r2, r3, d0
 800afd6:	f7f5 f967 	bl	80002a8 <__aeabi_dsub>
 800afda:	4606      	mov	r6, r0
 800afdc:	460f      	mov	r7, r1
 800afde:	e032      	b.n	800b046 <__kernel_rem_pio2+0x25e>
 800afe0:	2200      	movs	r2, #0
 800afe2:	4b4e      	ldr	r3, [pc, #312]	; (800b11c <__kernel_rem_pio2+0x334>)
 800afe4:	4640      	mov	r0, r8
 800afe6:	4649      	mov	r1, r9
 800afe8:	f7f5 fb16 	bl	8000618 <__aeabi_dmul>
 800afec:	f7f5 fdae 	bl	8000b4c <__aeabi_d2iz>
 800aff0:	f7f5 faa8 	bl	8000544 <__aeabi_i2d>
 800aff4:	2200      	movs	r2, #0
 800aff6:	4b4a      	ldr	r3, [pc, #296]	; (800b120 <__kernel_rem_pio2+0x338>)
 800aff8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800affc:	f7f5 fb0c 	bl	8000618 <__aeabi_dmul>
 800b000:	4602      	mov	r2, r0
 800b002:	460b      	mov	r3, r1
 800b004:	4640      	mov	r0, r8
 800b006:	4649      	mov	r1, r9
 800b008:	f7f5 f94e 	bl	80002a8 <__aeabi_dsub>
 800b00c:	f7f5 fd9e 	bl	8000b4c <__aeabi_d2iz>
 800b010:	ab0e      	add	r3, sp, #56	; 0x38
 800b012:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800b016:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800b01a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b01e:	f7f5 f945 	bl	80002ac <__adddf3>
 800b022:	3501      	adds	r5, #1
 800b024:	4680      	mov	r8, r0
 800b026:	4689      	mov	r9, r1
 800b028:	e75e      	b.n	800aee8 <__kernel_rem_pio2+0x100>
 800b02a:	d105      	bne.n	800b038 <__kernel_rem_pio2+0x250>
 800b02c:	1e63      	subs	r3, r4, #1
 800b02e:	aa0e      	add	r2, sp, #56	; 0x38
 800b030:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b034:	15c3      	asrs	r3, r0, #23
 800b036:	e79f      	b.n	800af78 <__kernel_rem_pio2+0x190>
 800b038:	2200      	movs	r2, #0
 800b03a:	4b3a      	ldr	r3, [pc, #232]	; (800b124 <__kernel_rem_pio2+0x33c>)
 800b03c:	f7f5 fd72 	bl	8000b24 <__aeabi_dcmpge>
 800b040:	2800      	cmp	r0, #0
 800b042:	d139      	bne.n	800b0b8 <__kernel_rem_pio2+0x2d0>
 800b044:	9002      	str	r0, [sp, #8]
 800b046:	2200      	movs	r2, #0
 800b048:	2300      	movs	r3, #0
 800b04a:	4630      	mov	r0, r6
 800b04c:	4639      	mov	r1, r7
 800b04e:	f7f5 fd4b 	bl	8000ae8 <__aeabi_dcmpeq>
 800b052:	2800      	cmp	r0, #0
 800b054:	f000 80c7 	beq.w	800b1e6 <__kernel_rem_pio2+0x3fe>
 800b058:	1e65      	subs	r5, r4, #1
 800b05a:	462b      	mov	r3, r5
 800b05c:	2200      	movs	r2, #0
 800b05e:	9904      	ldr	r1, [sp, #16]
 800b060:	428b      	cmp	r3, r1
 800b062:	da6a      	bge.n	800b13a <__kernel_rem_pio2+0x352>
 800b064:	2a00      	cmp	r2, #0
 800b066:	f000 8088 	beq.w	800b17a <__kernel_rem_pio2+0x392>
 800b06a:	ab0e      	add	r3, sp, #56	; 0x38
 800b06c:	f1aa 0a18 	sub.w	sl, sl, #24
 800b070:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800b074:	2b00      	cmp	r3, #0
 800b076:	f000 80b4 	beq.w	800b1e2 <__kernel_rem_pio2+0x3fa>
 800b07a:	4650      	mov	r0, sl
 800b07c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800b108 <__kernel_rem_pio2+0x320>
 800b080:	f000 fb3a 	bl	800b6f8 <scalbn>
 800b084:	00ec      	lsls	r4, r5, #3
 800b086:	ab72      	add	r3, sp, #456	; 0x1c8
 800b088:	191e      	adds	r6, r3, r4
 800b08a:	ec59 8b10 	vmov	r8, r9, d0
 800b08e:	f106 0a08 	add.w	sl, r6, #8
 800b092:	462f      	mov	r7, r5
 800b094:	2f00      	cmp	r7, #0
 800b096:	f280 80df 	bge.w	800b258 <__kernel_rem_pio2+0x470>
 800b09a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800b100 <__kernel_rem_pio2+0x318>
 800b09e:	f04f 0a00 	mov.w	sl, #0
 800b0a2:	eba5 030a 	sub.w	r3, r5, sl
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	f2c0 810a 	blt.w	800b2c0 <__kernel_rem_pio2+0x4d8>
 800b0ac:	f8df b078 	ldr.w	fp, [pc, #120]	; 800b128 <__kernel_rem_pio2+0x340>
 800b0b0:	ec59 8b18 	vmov	r8, r9, d8
 800b0b4:	2700      	movs	r7, #0
 800b0b6:	e0f5      	b.n	800b2a4 <__kernel_rem_pio2+0x4bc>
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	9302      	str	r3, [sp, #8]
 800b0bc:	e760      	b.n	800af80 <__kernel_rem_pio2+0x198>
 800b0be:	ab0e      	add	r3, sp, #56	; 0x38
 800b0c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0c4:	b94d      	cbnz	r5, 800b0da <__kernel_rem_pio2+0x2f2>
 800b0c6:	b12b      	cbz	r3, 800b0d4 <__kernel_rem_pio2+0x2ec>
 800b0c8:	a80e      	add	r0, sp, #56	; 0x38
 800b0ca:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b0ce:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b0d2:	2301      	movs	r3, #1
 800b0d4:	3201      	adds	r2, #1
 800b0d6:	461d      	mov	r5, r3
 800b0d8:	e759      	b.n	800af8e <__kernel_rem_pio2+0x1a6>
 800b0da:	a80e      	add	r0, sp, #56	; 0x38
 800b0dc:	1acb      	subs	r3, r1, r3
 800b0de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800b0e2:	462b      	mov	r3, r5
 800b0e4:	e7f6      	b.n	800b0d4 <__kernel_rem_pio2+0x2ec>
 800b0e6:	1e62      	subs	r2, r4, #1
 800b0e8:	ab0e      	add	r3, sp, #56	; 0x38
 800b0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b0f2:	a90e      	add	r1, sp, #56	; 0x38
 800b0f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800b0f8:	e757      	b.n	800afaa <__kernel_rem_pio2+0x1c2>
 800b0fa:	bf00      	nop
 800b0fc:	f3af 8000 	nop.w
	...
 800b10c:	3ff00000 	.word	0x3ff00000
 800b110:	0800ba90 	.word	0x0800ba90
 800b114:	40200000 	.word	0x40200000
 800b118:	3ff00000 	.word	0x3ff00000
 800b11c:	3e700000 	.word	0x3e700000
 800b120:	41700000 	.word	0x41700000
 800b124:	3fe00000 	.word	0x3fe00000
 800b128:	0800ba50 	.word	0x0800ba50
 800b12c:	1e62      	subs	r2, r4, #1
 800b12e:	ab0e      	add	r3, sp, #56	; 0x38
 800b130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b134:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b138:	e7db      	b.n	800b0f2 <__kernel_rem_pio2+0x30a>
 800b13a:	a90e      	add	r1, sp, #56	; 0x38
 800b13c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800b140:	3b01      	subs	r3, #1
 800b142:	430a      	orrs	r2, r1
 800b144:	e78b      	b.n	800b05e <__kernel_rem_pio2+0x276>
 800b146:	3301      	adds	r3, #1
 800b148:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800b14c:	2900      	cmp	r1, #0
 800b14e:	d0fa      	beq.n	800b146 <__kernel_rem_pio2+0x35e>
 800b150:	9a08      	ldr	r2, [sp, #32]
 800b152:	4422      	add	r2, r4
 800b154:	00d2      	lsls	r2, r2, #3
 800b156:	a922      	add	r1, sp, #136	; 0x88
 800b158:	18e3      	adds	r3, r4, r3
 800b15a:	9206      	str	r2, [sp, #24]
 800b15c:	440a      	add	r2, r1
 800b15e:	9302      	str	r3, [sp, #8]
 800b160:	f10b 0108 	add.w	r1, fp, #8
 800b164:	f102 0308 	add.w	r3, r2, #8
 800b168:	1c66      	adds	r6, r4, #1
 800b16a:	910a      	str	r1, [sp, #40]	; 0x28
 800b16c:	2500      	movs	r5, #0
 800b16e:	930d      	str	r3, [sp, #52]	; 0x34
 800b170:	9b02      	ldr	r3, [sp, #8]
 800b172:	42b3      	cmp	r3, r6
 800b174:	da04      	bge.n	800b180 <__kernel_rem_pio2+0x398>
 800b176:	461c      	mov	r4, r3
 800b178:	e6a6      	b.n	800aec8 <__kernel_rem_pio2+0xe0>
 800b17a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b17c:	2301      	movs	r3, #1
 800b17e:	e7e3      	b.n	800b148 <__kernel_rem_pio2+0x360>
 800b180:	9b06      	ldr	r3, [sp, #24]
 800b182:	18ef      	adds	r7, r5, r3
 800b184:	ab22      	add	r3, sp, #136	; 0x88
 800b186:	441f      	add	r7, r3
 800b188:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b18a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b18e:	f7f5 f9d9 	bl	8000544 <__aeabi_i2d>
 800b192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b194:	461c      	mov	r4, r3
 800b196:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b198:	e9c7 0100 	strd	r0, r1, [r7]
 800b19c:	eb03 0b05 	add.w	fp, r3, r5
 800b1a0:	2700      	movs	r7, #0
 800b1a2:	f04f 0800 	mov.w	r8, #0
 800b1a6:	f04f 0900 	mov.w	r9, #0
 800b1aa:	9b07      	ldr	r3, [sp, #28]
 800b1ac:	429f      	cmp	r7, r3
 800b1ae:	dd08      	ble.n	800b1c2 <__kernel_rem_pio2+0x3da>
 800b1b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1b2:	aa72      	add	r2, sp, #456	; 0x1c8
 800b1b4:	18eb      	adds	r3, r5, r3
 800b1b6:	4413      	add	r3, r2
 800b1b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800b1bc:	3601      	adds	r6, #1
 800b1be:	3508      	adds	r5, #8
 800b1c0:	e7d6      	b.n	800b170 <__kernel_rem_pio2+0x388>
 800b1c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800b1c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800b1ca:	f7f5 fa25 	bl	8000618 <__aeabi_dmul>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	460b      	mov	r3, r1
 800b1d2:	4640      	mov	r0, r8
 800b1d4:	4649      	mov	r1, r9
 800b1d6:	f7f5 f869 	bl	80002ac <__adddf3>
 800b1da:	3701      	adds	r7, #1
 800b1dc:	4680      	mov	r8, r0
 800b1de:	4689      	mov	r9, r1
 800b1e0:	e7e3      	b.n	800b1aa <__kernel_rem_pio2+0x3c2>
 800b1e2:	3d01      	subs	r5, #1
 800b1e4:	e741      	b.n	800b06a <__kernel_rem_pio2+0x282>
 800b1e6:	f1ca 0000 	rsb	r0, sl, #0
 800b1ea:	ec47 6b10 	vmov	d0, r6, r7
 800b1ee:	f000 fa83 	bl	800b6f8 <scalbn>
 800b1f2:	ec57 6b10 	vmov	r6, r7, d0
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	4b99      	ldr	r3, [pc, #612]	; (800b460 <__kernel_rem_pio2+0x678>)
 800b1fa:	ee10 0a10 	vmov	r0, s0
 800b1fe:	4639      	mov	r1, r7
 800b200:	f7f5 fc90 	bl	8000b24 <__aeabi_dcmpge>
 800b204:	b1f8      	cbz	r0, 800b246 <__kernel_rem_pio2+0x45e>
 800b206:	2200      	movs	r2, #0
 800b208:	4b96      	ldr	r3, [pc, #600]	; (800b464 <__kernel_rem_pio2+0x67c>)
 800b20a:	4630      	mov	r0, r6
 800b20c:	4639      	mov	r1, r7
 800b20e:	f7f5 fa03 	bl	8000618 <__aeabi_dmul>
 800b212:	f7f5 fc9b 	bl	8000b4c <__aeabi_d2iz>
 800b216:	4680      	mov	r8, r0
 800b218:	f7f5 f994 	bl	8000544 <__aeabi_i2d>
 800b21c:	2200      	movs	r2, #0
 800b21e:	4b90      	ldr	r3, [pc, #576]	; (800b460 <__kernel_rem_pio2+0x678>)
 800b220:	f7f5 f9fa 	bl	8000618 <__aeabi_dmul>
 800b224:	460b      	mov	r3, r1
 800b226:	4602      	mov	r2, r0
 800b228:	4639      	mov	r1, r7
 800b22a:	4630      	mov	r0, r6
 800b22c:	f7f5 f83c 	bl	80002a8 <__aeabi_dsub>
 800b230:	f7f5 fc8c 	bl	8000b4c <__aeabi_d2iz>
 800b234:	1c65      	adds	r5, r4, #1
 800b236:	ab0e      	add	r3, sp, #56	; 0x38
 800b238:	f10a 0a18 	add.w	sl, sl, #24
 800b23c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b240:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800b244:	e719      	b.n	800b07a <__kernel_rem_pio2+0x292>
 800b246:	4630      	mov	r0, r6
 800b248:	4639      	mov	r1, r7
 800b24a:	f7f5 fc7f 	bl	8000b4c <__aeabi_d2iz>
 800b24e:	ab0e      	add	r3, sp, #56	; 0x38
 800b250:	4625      	mov	r5, r4
 800b252:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800b256:	e710      	b.n	800b07a <__kernel_rem_pio2+0x292>
 800b258:	ab0e      	add	r3, sp, #56	; 0x38
 800b25a:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800b25e:	f7f5 f971 	bl	8000544 <__aeabi_i2d>
 800b262:	4642      	mov	r2, r8
 800b264:	464b      	mov	r3, r9
 800b266:	f7f5 f9d7 	bl	8000618 <__aeabi_dmul>
 800b26a:	2200      	movs	r2, #0
 800b26c:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800b270:	4b7c      	ldr	r3, [pc, #496]	; (800b464 <__kernel_rem_pio2+0x67c>)
 800b272:	4640      	mov	r0, r8
 800b274:	4649      	mov	r1, r9
 800b276:	f7f5 f9cf 	bl	8000618 <__aeabi_dmul>
 800b27a:	3f01      	subs	r7, #1
 800b27c:	4680      	mov	r8, r0
 800b27e:	4689      	mov	r9, r1
 800b280:	e708      	b.n	800b094 <__kernel_rem_pio2+0x2ac>
 800b282:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b28a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800b28e:	f7f5 f9c3 	bl	8000618 <__aeabi_dmul>
 800b292:	4602      	mov	r2, r0
 800b294:	460b      	mov	r3, r1
 800b296:	4640      	mov	r0, r8
 800b298:	4649      	mov	r1, r9
 800b29a:	f7f5 f807 	bl	80002ac <__adddf3>
 800b29e:	3701      	adds	r7, #1
 800b2a0:	4680      	mov	r8, r0
 800b2a2:	4689      	mov	r9, r1
 800b2a4:	9b04      	ldr	r3, [sp, #16]
 800b2a6:	429f      	cmp	r7, r3
 800b2a8:	dc01      	bgt.n	800b2ae <__kernel_rem_pio2+0x4c6>
 800b2aa:	45ba      	cmp	sl, r7
 800b2ac:	dae9      	bge.n	800b282 <__kernel_rem_pio2+0x49a>
 800b2ae:	ab4a      	add	r3, sp, #296	; 0x128
 800b2b0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b2b4:	e9c3 8900 	strd	r8, r9, [r3]
 800b2b8:	f10a 0a01 	add.w	sl, sl, #1
 800b2bc:	3e08      	subs	r6, #8
 800b2be:	e6f0      	b.n	800b0a2 <__kernel_rem_pio2+0x2ba>
 800b2c0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800b2c2:	2b03      	cmp	r3, #3
 800b2c4:	d85b      	bhi.n	800b37e <__kernel_rem_pio2+0x596>
 800b2c6:	e8df f003 	tbb	[pc, r3]
 800b2ca:	264a      	.short	0x264a
 800b2cc:	0226      	.short	0x0226
 800b2ce:	ab9a      	add	r3, sp, #616	; 0x268
 800b2d0:	441c      	add	r4, r3
 800b2d2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b2d6:	46a2      	mov	sl, r4
 800b2d8:	46ab      	mov	fp, r5
 800b2da:	f1bb 0f00 	cmp.w	fp, #0
 800b2de:	dc6c      	bgt.n	800b3ba <__kernel_rem_pio2+0x5d2>
 800b2e0:	46a2      	mov	sl, r4
 800b2e2:	46ab      	mov	fp, r5
 800b2e4:	f1bb 0f01 	cmp.w	fp, #1
 800b2e8:	f300 8086 	bgt.w	800b3f8 <__kernel_rem_pio2+0x610>
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	2100      	movs	r1, #0
 800b2f0:	2d01      	cmp	r5, #1
 800b2f2:	f300 80a0 	bgt.w	800b436 <__kernel_rem_pio2+0x64e>
 800b2f6:	9b02      	ldr	r3, [sp, #8]
 800b2f8:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800b2fc:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800b300:	2b00      	cmp	r3, #0
 800b302:	f040 809e 	bne.w	800b442 <__kernel_rem_pio2+0x65a>
 800b306:	9b01      	ldr	r3, [sp, #4]
 800b308:	e9c3 7800 	strd	r7, r8, [r3]
 800b30c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800b310:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800b314:	e033      	b.n	800b37e <__kernel_rem_pio2+0x596>
 800b316:	3408      	adds	r4, #8
 800b318:	ab4a      	add	r3, sp, #296	; 0x128
 800b31a:	441c      	add	r4, r3
 800b31c:	462e      	mov	r6, r5
 800b31e:	2000      	movs	r0, #0
 800b320:	2100      	movs	r1, #0
 800b322:	2e00      	cmp	r6, #0
 800b324:	da3a      	bge.n	800b39c <__kernel_rem_pio2+0x5b4>
 800b326:	9b02      	ldr	r3, [sp, #8]
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d03d      	beq.n	800b3a8 <__kernel_rem_pio2+0x5c0>
 800b32c:	4602      	mov	r2, r0
 800b32e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b332:	9c01      	ldr	r4, [sp, #4]
 800b334:	e9c4 2300 	strd	r2, r3, [r4]
 800b338:	4602      	mov	r2, r0
 800b33a:	460b      	mov	r3, r1
 800b33c:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800b340:	f7f4 ffb2 	bl	80002a8 <__aeabi_dsub>
 800b344:	ae4c      	add	r6, sp, #304	; 0x130
 800b346:	2401      	movs	r4, #1
 800b348:	42a5      	cmp	r5, r4
 800b34a:	da30      	bge.n	800b3ae <__kernel_rem_pio2+0x5c6>
 800b34c:	9b02      	ldr	r3, [sp, #8]
 800b34e:	b113      	cbz	r3, 800b356 <__kernel_rem_pio2+0x56e>
 800b350:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b354:	4619      	mov	r1, r3
 800b356:	9b01      	ldr	r3, [sp, #4]
 800b358:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800b35c:	e00f      	b.n	800b37e <__kernel_rem_pio2+0x596>
 800b35e:	ab9a      	add	r3, sp, #616	; 0x268
 800b360:	441c      	add	r4, r3
 800b362:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800b366:	2000      	movs	r0, #0
 800b368:	2100      	movs	r1, #0
 800b36a:	2d00      	cmp	r5, #0
 800b36c:	da10      	bge.n	800b390 <__kernel_rem_pio2+0x5a8>
 800b36e:	9b02      	ldr	r3, [sp, #8]
 800b370:	b113      	cbz	r3, 800b378 <__kernel_rem_pio2+0x590>
 800b372:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b376:	4619      	mov	r1, r3
 800b378:	9b01      	ldr	r3, [sp, #4]
 800b37a:	e9c3 0100 	strd	r0, r1, [r3]
 800b37e:	9b06      	ldr	r3, [sp, #24]
 800b380:	f003 0007 	and.w	r0, r3, #7
 800b384:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800b388:	ecbd 8b02 	vpop	{d8}
 800b38c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b390:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b394:	f7f4 ff8a 	bl	80002ac <__adddf3>
 800b398:	3d01      	subs	r5, #1
 800b39a:	e7e6      	b.n	800b36a <__kernel_rem_pio2+0x582>
 800b39c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b3a0:	f7f4 ff84 	bl	80002ac <__adddf3>
 800b3a4:	3e01      	subs	r6, #1
 800b3a6:	e7bc      	b.n	800b322 <__kernel_rem_pio2+0x53a>
 800b3a8:	4602      	mov	r2, r0
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	e7c1      	b.n	800b332 <__kernel_rem_pio2+0x54a>
 800b3ae:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800b3b2:	f7f4 ff7b 	bl	80002ac <__adddf3>
 800b3b6:	3401      	adds	r4, #1
 800b3b8:	e7c6      	b.n	800b348 <__kernel_rem_pio2+0x560>
 800b3ba:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800b3be:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	ec53 2b17 	vmov	r2, r3, d7
 800b3c8:	4649      	mov	r1, r9
 800b3ca:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b3ce:	f7f4 ff6d 	bl	80002ac <__adddf3>
 800b3d2:	4602      	mov	r2, r0
 800b3d4:	460b      	mov	r3, r1
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	460f      	mov	r7, r1
 800b3da:	4640      	mov	r0, r8
 800b3dc:	4649      	mov	r1, r9
 800b3de:	f7f4 ff63 	bl	80002a8 <__aeabi_dsub>
 800b3e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3e6:	f7f4 ff61 	bl	80002ac <__adddf3>
 800b3ea:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b3ee:	e9ca 0100 	strd	r0, r1, [sl]
 800b3f2:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800b3f6:	e770      	b.n	800b2da <__kernel_rem_pio2+0x4f2>
 800b3f8:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800b3fc:	ed3a 7b02 	vldmdb	sl!, {d7}
 800b400:	4630      	mov	r0, r6
 800b402:	ec53 2b17 	vmov	r2, r3, d7
 800b406:	4639      	mov	r1, r7
 800b408:	ed8d 7b04 	vstr	d7, [sp, #16]
 800b40c:	f7f4 ff4e 	bl	80002ac <__adddf3>
 800b410:	4602      	mov	r2, r0
 800b412:	460b      	mov	r3, r1
 800b414:	4680      	mov	r8, r0
 800b416:	4689      	mov	r9, r1
 800b418:	4630      	mov	r0, r6
 800b41a:	4639      	mov	r1, r7
 800b41c:	f7f4 ff44 	bl	80002a8 <__aeabi_dsub>
 800b420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b424:	f7f4 ff42 	bl	80002ac <__adddf3>
 800b428:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b42c:	e9ca 0100 	strd	r0, r1, [sl]
 800b430:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800b434:	e756      	b.n	800b2e4 <__kernel_rem_pio2+0x4fc>
 800b436:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800b43a:	f7f4 ff37 	bl	80002ac <__adddf3>
 800b43e:	3d01      	subs	r5, #1
 800b440:	e756      	b.n	800b2f0 <__kernel_rem_pio2+0x508>
 800b442:	9b01      	ldr	r3, [sp, #4]
 800b444:	9a01      	ldr	r2, [sp, #4]
 800b446:	601f      	str	r7, [r3, #0]
 800b448:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800b44c:	605c      	str	r4, [r3, #4]
 800b44e:	609d      	str	r5, [r3, #8]
 800b450:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b454:	60d3      	str	r3, [r2, #12]
 800b456:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b45a:	6110      	str	r0, [r2, #16]
 800b45c:	6153      	str	r3, [r2, #20]
 800b45e:	e78e      	b.n	800b37e <__kernel_rem_pio2+0x596>
 800b460:	41700000 	.word	0x41700000
 800b464:	3e700000 	.word	0x3e700000

0800b468 <__kernel_sin>:
 800b468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b46c:	ec55 4b10 	vmov	r4, r5, d0
 800b470:	b085      	sub	sp, #20
 800b472:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b476:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b47a:	ed8d 1b00 	vstr	d1, [sp]
 800b47e:	9002      	str	r0, [sp, #8]
 800b480:	da06      	bge.n	800b490 <__kernel_sin+0x28>
 800b482:	ee10 0a10 	vmov	r0, s0
 800b486:	4629      	mov	r1, r5
 800b488:	f7f5 fb60 	bl	8000b4c <__aeabi_d2iz>
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d051      	beq.n	800b534 <__kernel_sin+0xcc>
 800b490:	4622      	mov	r2, r4
 800b492:	462b      	mov	r3, r5
 800b494:	4620      	mov	r0, r4
 800b496:	4629      	mov	r1, r5
 800b498:	f7f5 f8be 	bl	8000618 <__aeabi_dmul>
 800b49c:	4682      	mov	sl, r0
 800b49e:	468b      	mov	fp, r1
 800b4a0:	4602      	mov	r2, r0
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4620      	mov	r0, r4
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	f7f5 f8b6 	bl	8000618 <__aeabi_dmul>
 800b4ac:	a341      	add	r3, pc, #260	; (adr r3, 800b5b4 <__kernel_sin+0x14c>)
 800b4ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4b2:	4680      	mov	r8, r0
 800b4b4:	4689      	mov	r9, r1
 800b4b6:	4650      	mov	r0, sl
 800b4b8:	4659      	mov	r1, fp
 800b4ba:	f7f5 f8ad 	bl	8000618 <__aeabi_dmul>
 800b4be:	a33f      	add	r3, pc, #252	; (adr r3, 800b5bc <__kernel_sin+0x154>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	f7f4 fef0 	bl	80002a8 <__aeabi_dsub>
 800b4c8:	4652      	mov	r2, sl
 800b4ca:	465b      	mov	r3, fp
 800b4cc:	f7f5 f8a4 	bl	8000618 <__aeabi_dmul>
 800b4d0:	a33c      	add	r3, pc, #240	; (adr r3, 800b5c4 <__kernel_sin+0x15c>)
 800b4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d6:	f7f4 fee9 	bl	80002ac <__adddf3>
 800b4da:	4652      	mov	r2, sl
 800b4dc:	465b      	mov	r3, fp
 800b4de:	f7f5 f89b 	bl	8000618 <__aeabi_dmul>
 800b4e2:	a33a      	add	r3, pc, #232	; (adr r3, 800b5cc <__kernel_sin+0x164>)
 800b4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4e8:	f7f4 fede 	bl	80002a8 <__aeabi_dsub>
 800b4ec:	4652      	mov	r2, sl
 800b4ee:	465b      	mov	r3, fp
 800b4f0:	f7f5 f892 	bl	8000618 <__aeabi_dmul>
 800b4f4:	a337      	add	r3, pc, #220	; (adr r3, 800b5d4 <__kernel_sin+0x16c>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	f7f4 fed7 	bl	80002ac <__adddf3>
 800b4fe:	9b02      	ldr	r3, [sp, #8]
 800b500:	4606      	mov	r6, r0
 800b502:	460f      	mov	r7, r1
 800b504:	b9db      	cbnz	r3, 800b53e <__kernel_sin+0xd6>
 800b506:	4602      	mov	r2, r0
 800b508:	460b      	mov	r3, r1
 800b50a:	4650      	mov	r0, sl
 800b50c:	4659      	mov	r1, fp
 800b50e:	f7f5 f883 	bl	8000618 <__aeabi_dmul>
 800b512:	a325      	add	r3, pc, #148	; (adr r3, 800b5a8 <__kernel_sin+0x140>)
 800b514:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b518:	f7f4 fec6 	bl	80002a8 <__aeabi_dsub>
 800b51c:	4642      	mov	r2, r8
 800b51e:	464b      	mov	r3, r9
 800b520:	f7f5 f87a 	bl	8000618 <__aeabi_dmul>
 800b524:	4602      	mov	r2, r0
 800b526:	460b      	mov	r3, r1
 800b528:	4620      	mov	r0, r4
 800b52a:	4629      	mov	r1, r5
 800b52c:	f7f4 febe 	bl	80002ac <__adddf3>
 800b530:	4604      	mov	r4, r0
 800b532:	460d      	mov	r5, r1
 800b534:	ec45 4b10 	vmov	d0, r4, r5
 800b538:	b005      	add	sp, #20
 800b53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b53e:	2200      	movs	r2, #0
 800b540:	4b1b      	ldr	r3, [pc, #108]	; (800b5b0 <__kernel_sin+0x148>)
 800b542:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b546:	f7f5 f867 	bl	8000618 <__aeabi_dmul>
 800b54a:	4632      	mov	r2, r6
 800b54c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b550:	463b      	mov	r3, r7
 800b552:	4640      	mov	r0, r8
 800b554:	4649      	mov	r1, r9
 800b556:	f7f5 f85f 	bl	8000618 <__aeabi_dmul>
 800b55a:	4602      	mov	r2, r0
 800b55c:	460b      	mov	r3, r1
 800b55e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b562:	f7f4 fea1 	bl	80002a8 <__aeabi_dsub>
 800b566:	4652      	mov	r2, sl
 800b568:	465b      	mov	r3, fp
 800b56a:	f7f5 f855 	bl	8000618 <__aeabi_dmul>
 800b56e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b572:	f7f4 fe99 	bl	80002a8 <__aeabi_dsub>
 800b576:	a30c      	add	r3, pc, #48	; (adr r3, 800b5a8 <__kernel_sin+0x140>)
 800b578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57c:	4606      	mov	r6, r0
 800b57e:	460f      	mov	r7, r1
 800b580:	4640      	mov	r0, r8
 800b582:	4649      	mov	r1, r9
 800b584:	f7f5 f848 	bl	8000618 <__aeabi_dmul>
 800b588:	4602      	mov	r2, r0
 800b58a:	460b      	mov	r3, r1
 800b58c:	4630      	mov	r0, r6
 800b58e:	4639      	mov	r1, r7
 800b590:	f7f4 fe8c 	bl	80002ac <__adddf3>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4620      	mov	r0, r4
 800b59a:	4629      	mov	r1, r5
 800b59c:	f7f4 fe84 	bl	80002a8 <__aeabi_dsub>
 800b5a0:	e7c6      	b.n	800b530 <__kernel_sin+0xc8>
 800b5a2:	bf00      	nop
 800b5a4:	f3af 8000 	nop.w
 800b5a8:	55555549 	.word	0x55555549
 800b5ac:	3fc55555 	.word	0x3fc55555
 800b5b0:	3fe00000 	.word	0x3fe00000
 800b5b4:	5acfd57c 	.word	0x5acfd57c
 800b5b8:	3de5d93a 	.word	0x3de5d93a
 800b5bc:	8a2b9ceb 	.word	0x8a2b9ceb
 800b5c0:	3e5ae5e6 	.word	0x3e5ae5e6
 800b5c4:	57b1fe7d 	.word	0x57b1fe7d
 800b5c8:	3ec71de3 	.word	0x3ec71de3
 800b5cc:	19c161d5 	.word	0x19c161d5
 800b5d0:	3f2a01a0 	.word	0x3f2a01a0
 800b5d4:	1110f8a6 	.word	0x1110f8a6
 800b5d8:	3f811111 	.word	0x3f811111

0800b5dc <fabs>:
 800b5dc:	ec51 0b10 	vmov	r0, r1, d0
 800b5e0:	ee10 2a10 	vmov	r2, s0
 800b5e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b5e8:	ec43 2b10 	vmov	d0, r2, r3
 800b5ec:	4770      	bx	lr
	...

0800b5f0 <floor>:
 800b5f0:	ec51 0b10 	vmov	r0, r1, d0
 800b5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b5fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b600:	2e13      	cmp	r6, #19
 800b602:	460c      	mov	r4, r1
 800b604:	ee10 5a10 	vmov	r5, s0
 800b608:	4680      	mov	r8, r0
 800b60a:	dc34      	bgt.n	800b676 <floor+0x86>
 800b60c:	2e00      	cmp	r6, #0
 800b60e:	da16      	bge.n	800b63e <floor+0x4e>
 800b610:	a335      	add	r3, pc, #212	; (adr r3, 800b6e8 <floor+0xf8>)
 800b612:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b616:	f7f4 fe49 	bl	80002ac <__adddf3>
 800b61a:	2200      	movs	r2, #0
 800b61c:	2300      	movs	r3, #0
 800b61e:	f7f5 fa8b 	bl	8000b38 <__aeabi_dcmpgt>
 800b622:	b148      	cbz	r0, 800b638 <floor+0x48>
 800b624:	2c00      	cmp	r4, #0
 800b626:	da59      	bge.n	800b6dc <floor+0xec>
 800b628:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b62c:	4a30      	ldr	r2, [pc, #192]	; (800b6f0 <floor+0x100>)
 800b62e:	432b      	orrs	r3, r5
 800b630:	2500      	movs	r5, #0
 800b632:	42ab      	cmp	r3, r5
 800b634:	bf18      	it	ne
 800b636:	4614      	movne	r4, r2
 800b638:	4621      	mov	r1, r4
 800b63a:	4628      	mov	r0, r5
 800b63c:	e025      	b.n	800b68a <floor+0x9a>
 800b63e:	4f2d      	ldr	r7, [pc, #180]	; (800b6f4 <floor+0x104>)
 800b640:	4137      	asrs	r7, r6
 800b642:	ea01 0307 	and.w	r3, r1, r7
 800b646:	4303      	orrs	r3, r0
 800b648:	d01f      	beq.n	800b68a <floor+0x9a>
 800b64a:	a327      	add	r3, pc, #156	; (adr r3, 800b6e8 <floor+0xf8>)
 800b64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b650:	f7f4 fe2c 	bl	80002ac <__adddf3>
 800b654:	2200      	movs	r2, #0
 800b656:	2300      	movs	r3, #0
 800b658:	f7f5 fa6e 	bl	8000b38 <__aeabi_dcmpgt>
 800b65c:	2800      	cmp	r0, #0
 800b65e:	d0eb      	beq.n	800b638 <floor+0x48>
 800b660:	2c00      	cmp	r4, #0
 800b662:	bfbe      	ittt	lt
 800b664:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b668:	fa43 f606 	asrlt.w	r6, r3, r6
 800b66c:	19a4      	addlt	r4, r4, r6
 800b66e:	ea24 0407 	bic.w	r4, r4, r7
 800b672:	2500      	movs	r5, #0
 800b674:	e7e0      	b.n	800b638 <floor+0x48>
 800b676:	2e33      	cmp	r6, #51	; 0x33
 800b678:	dd0b      	ble.n	800b692 <floor+0xa2>
 800b67a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b67e:	d104      	bne.n	800b68a <floor+0x9a>
 800b680:	ee10 2a10 	vmov	r2, s0
 800b684:	460b      	mov	r3, r1
 800b686:	f7f4 fe11 	bl	80002ac <__adddf3>
 800b68a:	ec41 0b10 	vmov	d0, r0, r1
 800b68e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b692:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b696:	f04f 33ff 	mov.w	r3, #4294967295
 800b69a:	fa23 f707 	lsr.w	r7, r3, r7
 800b69e:	4207      	tst	r7, r0
 800b6a0:	d0f3      	beq.n	800b68a <floor+0x9a>
 800b6a2:	a311      	add	r3, pc, #68	; (adr r3, 800b6e8 <floor+0xf8>)
 800b6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a8:	f7f4 fe00 	bl	80002ac <__adddf3>
 800b6ac:	2200      	movs	r2, #0
 800b6ae:	2300      	movs	r3, #0
 800b6b0:	f7f5 fa42 	bl	8000b38 <__aeabi_dcmpgt>
 800b6b4:	2800      	cmp	r0, #0
 800b6b6:	d0bf      	beq.n	800b638 <floor+0x48>
 800b6b8:	2c00      	cmp	r4, #0
 800b6ba:	da02      	bge.n	800b6c2 <floor+0xd2>
 800b6bc:	2e14      	cmp	r6, #20
 800b6be:	d103      	bne.n	800b6c8 <floor+0xd8>
 800b6c0:	3401      	adds	r4, #1
 800b6c2:	ea25 0507 	bic.w	r5, r5, r7
 800b6c6:	e7b7      	b.n	800b638 <floor+0x48>
 800b6c8:	2301      	movs	r3, #1
 800b6ca:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b6ce:	fa03 f606 	lsl.w	r6, r3, r6
 800b6d2:	4435      	add	r5, r6
 800b6d4:	4545      	cmp	r5, r8
 800b6d6:	bf38      	it	cc
 800b6d8:	18e4      	addcc	r4, r4, r3
 800b6da:	e7f2      	b.n	800b6c2 <floor+0xd2>
 800b6dc:	2500      	movs	r5, #0
 800b6de:	462c      	mov	r4, r5
 800b6e0:	e7aa      	b.n	800b638 <floor+0x48>
 800b6e2:	bf00      	nop
 800b6e4:	f3af 8000 	nop.w
 800b6e8:	8800759c 	.word	0x8800759c
 800b6ec:	7e37e43c 	.word	0x7e37e43c
 800b6f0:	bff00000 	.word	0xbff00000
 800b6f4:	000fffff 	.word	0x000fffff

0800b6f8 <scalbn>:
 800b6f8:	b570      	push	{r4, r5, r6, lr}
 800b6fa:	ec55 4b10 	vmov	r4, r5, d0
 800b6fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b702:	4606      	mov	r6, r0
 800b704:	462b      	mov	r3, r5
 800b706:	b9aa      	cbnz	r2, 800b734 <scalbn+0x3c>
 800b708:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b70c:	4323      	orrs	r3, r4
 800b70e:	d03b      	beq.n	800b788 <scalbn+0x90>
 800b710:	4b31      	ldr	r3, [pc, #196]	; (800b7d8 <scalbn+0xe0>)
 800b712:	4629      	mov	r1, r5
 800b714:	2200      	movs	r2, #0
 800b716:	ee10 0a10 	vmov	r0, s0
 800b71a:	f7f4 ff7d 	bl	8000618 <__aeabi_dmul>
 800b71e:	4b2f      	ldr	r3, [pc, #188]	; (800b7dc <scalbn+0xe4>)
 800b720:	429e      	cmp	r6, r3
 800b722:	4604      	mov	r4, r0
 800b724:	460d      	mov	r5, r1
 800b726:	da12      	bge.n	800b74e <scalbn+0x56>
 800b728:	a327      	add	r3, pc, #156	; (adr r3, 800b7c8 <scalbn+0xd0>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	f7f4 ff73 	bl	8000618 <__aeabi_dmul>
 800b732:	e009      	b.n	800b748 <scalbn+0x50>
 800b734:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b738:	428a      	cmp	r2, r1
 800b73a:	d10c      	bne.n	800b756 <scalbn+0x5e>
 800b73c:	ee10 2a10 	vmov	r2, s0
 800b740:	4620      	mov	r0, r4
 800b742:	4629      	mov	r1, r5
 800b744:	f7f4 fdb2 	bl	80002ac <__adddf3>
 800b748:	4604      	mov	r4, r0
 800b74a:	460d      	mov	r5, r1
 800b74c:	e01c      	b.n	800b788 <scalbn+0x90>
 800b74e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b752:	460b      	mov	r3, r1
 800b754:	3a36      	subs	r2, #54	; 0x36
 800b756:	4432      	add	r2, r6
 800b758:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b75c:	428a      	cmp	r2, r1
 800b75e:	dd0b      	ble.n	800b778 <scalbn+0x80>
 800b760:	ec45 4b11 	vmov	d1, r4, r5
 800b764:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b7d0 <scalbn+0xd8>
 800b768:	f000 f83c 	bl	800b7e4 <copysign>
 800b76c:	a318      	add	r3, pc, #96	; (adr r3, 800b7d0 <scalbn+0xd8>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	ec51 0b10 	vmov	r0, r1, d0
 800b776:	e7da      	b.n	800b72e <scalbn+0x36>
 800b778:	2a00      	cmp	r2, #0
 800b77a:	dd08      	ble.n	800b78e <scalbn+0x96>
 800b77c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b780:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b784:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b788:	ec45 4b10 	vmov	d0, r4, r5
 800b78c:	bd70      	pop	{r4, r5, r6, pc}
 800b78e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b792:	da0d      	bge.n	800b7b0 <scalbn+0xb8>
 800b794:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b798:	429e      	cmp	r6, r3
 800b79a:	ec45 4b11 	vmov	d1, r4, r5
 800b79e:	dce1      	bgt.n	800b764 <scalbn+0x6c>
 800b7a0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b7c8 <scalbn+0xd0>
 800b7a4:	f000 f81e 	bl	800b7e4 <copysign>
 800b7a8:	a307      	add	r3, pc, #28	; (adr r3, 800b7c8 <scalbn+0xd0>)
 800b7aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ae:	e7e0      	b.n	800b772 <scalbn+0x7a>
 800b7b0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b7b4:	3236      	adds	r2, #54	; 0x36
 800b7b6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b7ba:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b7be:	4620      	mov	r0, r4
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	4b06      	ldr	r3, [pc, #24]	; (800b7e0 <scalbn+0xe8>)
 800b7c6:	e7b2      	b.n	800b72e <scalbn+0x36>
 800b7c8:	c2f8f359 	.word	0xc2f8f359
 800b7cc:	01a56e1f 	.word	0x01a56e1f
 800b7d0:	8800759c 	.word	0x8800759c
 800b7d4:	7e37e43c 	.word	0x7e37e43c
 800b7d8:	43500000 	.word	0x43500000
 800b7dc:	ffff3cb0 	.word	0xffff3cb0
 800b7e0:	3c900000 	.word	0x3c900000

0800b7e4 <copysign>:
 800b7e4:	ec51 0b10 	vmov	r0, r1, d0
 800b7e8:	ee11 0a90 	vmov	r0, s3
 800b7ec:	ee10 2a10 	vmov	r2, s0
 800b7f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b7f4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b7f8:	ea41 0300 	orr.w	r3, r1, r0
 800b7fc:	ec43 2b10 	vmov	d0, r2, r3
 800b800:	4770      	bx	lr
	...

0800b804 <_init>:
 800b804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b806:	bf00      	nop
 800b808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b80a:	bc08      	pop	{r3}
 800b80c:	469e      	mov	lr, r3
 800b80e:	4770      	bx	lr

0800b810 <_fini>:
 800b810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b812:	bf00      	nop
 800b814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b816:	bc08      	pop	{r3}
 800b818:	469e      	mov	lr, r3
 800b81a:	4770      	bx	lr
