
STM32F439ZIT6U Waveform Generator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0fc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000250  0800b2b0  0800b2b0  0001b2b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b500  0800b500  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800b500  0800b500  0001b500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b508  0800b508  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b508  0800b508  0001b508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b50c  0800b50c  0001b50c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800b510  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fcc  20000208  0800b718  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021d4  0800b718  000221d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020cc1  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004829  00000000  00000000  00040ef9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018f0  00000000  00000000  00045728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000016d0  00000000  00000000  00047018  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002a0c1  00000000  00000000  000486e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000191e5  00000000  00000000  000727a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e871b  00000000  00000000  0008b98e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001740a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c4c  00000000  00000000  00174124  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000208 	.word	0x20000208
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800b294 	.word	0x0800b294

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000020c 	.word	0x2000020c
 80001ec:	0800b294 	.word	0x0800b294

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b40:	f000 b972 	b.w	8000e28 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9e08      	ldr	r6, [sp, #32]
 8000b62:	4604      	mov	r4, r0
 8000b64:	4688      	mov	r8, r1
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d14b      	bne.n	8000c02 <__udivmoddi4+0xa6>
 8000b6a:	428a      	cmp	r2, r1
 8000b6c:	4615      	mov	r5, r2
 8000b6e:	d967      	bls.n	8000c40 <__udivmoddi4+0xe4>
 8000b70:	fab2 f282 	clz	r2, r2
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0720 	rsb	r7, r2, #32
 8000b7a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b7e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b82:	4095      	lsls	r5, r2
 8000b84:	ea47 0803 	orr.w	r8, r7, r3
 8000b88:	4094      	lsls	r4, r2
 8000b8a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8e:	0c23      	lsrs	r3, r4, #16
 8000b90:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b94:	fa1f fc85 	uxth.w	ip, r5
 8000b98:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b9c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d909      	bls.n	8000bbc <__udivmoddi4+0x60>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bae:	f080 811b 	bcs.w	8000de8 <__udivmoddi4+0x28c>
 8000bb2:	4299      	cmp	r1, r3
 8000bb4:	f240 8118 	bls.w	8000de8 <__udivmoddi4+0x28c>
 8000bb8:	3f02      	subs	r7, #2
 8000bba:	442b      	add	r3, r5
 8000bbc:	1a5b      	subs	r3, r3, r1
 8000bbe:	b2a4      	uxth	r4, r4
 8000bc0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bcc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd0:	45a4      	cmp	ip, r4
 8000bd2:	d909      	bls.n	8000be8 <__udivmoddi4+0x8c>
 8000bd4:	192c      	adds	r4, r5, r4
 8000bd6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bda:	f080 8107 	bcs.w	8000dec <__udivmoddi4+0x290>
 8000bde:	45a4      	cmp	ip, r4
 8000be0:	f240 8104 	bls.w	8000dec <__udivmoddi4+0x290>
 8000be4:	3802      	subs	r0, #2
 8000be6:	442c      	add	r4, r5
 8000be8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bec:	eba4 040c 	sub.w	r4, r4, ip
 8000bf0:	2700      	movs	r7, #0
 8000bf2:	b11e      	cbz	r6, 8000bfc <__udivmoddi4+0xa0>
 8000bf4:	40d4      	lsrs	r4, r2
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bfc:	4639      	mov	r1, r7
 8000bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c02:	428b      	cmp	r3, r1
 8000c04:	d909      	bls.n	8000c1a <__udivmoddi4+0xbe>
 8000c06:	2e00      	cmp	r6, #0
 8000c08:	f000 80eb 	beq.w	8000de2 <__udivmoddi4+0x286>
 8000c0c:	2700      	movs	r7, #0
 8000c0e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c12:	4638      	mov	r0, r7
 8000c14:	4639      	mov	r1, r7
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	fab3 f783 	clz	r7, r3
 8000c1e:	2f00      	cmp	r7, #0
 8000c20:	d147      	bne.n	8000cb2 <__udivmoddi4+0x156>
 8000c22:	428b      	cmp	r3, r1
 8000c24:	d302      	bcc.n	8000c2c <__udivmoddi4+0xd0>
 8000c26:	4282      	cmp	r2, r0
 8000c28:	f200 80fa 	bhi.w	8000e20 <__udivmoddi4+0x2c4>
 8000c2c:	1a84      	subs	r4, r0, r2
 8000c2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c32:	2001      	movs	r0, #1
 8000c34:	4698      	mov	r8, r3
 8000c36:	2e00      	cmp	r6, #0
 8000c38:	d0e0      	beq.n	8000bfc <__udivmoddi4+0xa0>
 8000c3a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c3e:	e7dd      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000c40:	b902      	cbnz	r2, 8000c44 <__udivmoddi4+0xe8>
 8000c42:	deff      	udf	#255	; 0xff
 8000c44:	fab2 f282 	clz	r2, r2
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	f040 808f 	bne.w	8000d6c <__udivmoddi4+0x210>
 8000c4e:	1b49      	subs	r1, r1, r5
 8000c50:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c54:	fa1f f885 	uxth.w	r8, r5
 8000c58:	2701      	movs	r7, #1
 8000c5a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c68:	fb08 f10c 	mul.w	r1, r8, ip
 8000c6c:	4299      	cmp	r1, r3
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x124>
 8000c70:	18eb      	adds	r3, r5, r3
 8000c72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x122>
 8000c78:	4299      	cmp	r1, r3
 8000c7a:	f200 80cd 	bhi.w	8000e18 <__udivmoddi4+0x2bc>
 8000c7e:	4684      	mov	ip, r0
 8000c80:	1a59      	subs	r1, r3, r1
 8000c82:	b2a3      	uxth	r3, r4
 8000c84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c88:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c8c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c90:	fb08 f800 	mul.w	r8, r8, r0
 8000c94:	45a0      	cmp	r8, r4
 8000c96:	d907      	bls.n	8000ca8 <__udivmoddi4+0x14c>
 8000c98:	192c      	adds	r4, r5, r4
 8000c9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9e:	d202      	bcs.n	8000ca6 <__udivmoddi4+0x14a>
 8000ca0:	45a0      	cmp	r8, r4
 8000ca2:	f200 80b6 	bhi.w	8000e12 <__udivmoddi4+0x2b6>
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	eba4 0408 	sub.w	r4, r4, r8
 8000cac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb0:	e79f      	b.n	8000bf2 <__udivmoddi4+0x96>
 8000cb2:	f1c7 0c20 	rsb	ip, r7, #32
 8000cb6:	40bb      	lsls	r3, r7
 8000cb8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cbc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cc8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ccc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd0:	4325      	orrs	r5, r4
 8000cd2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cd6:	0c2c      	lsrs	r4, r5, #16
 8000cd8:	fb08 3319 	mls	r3, r8, r9, r3
 8000cdc:	fa1f fa8e 	uxth.w	sl, lr
 8000ce0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce4:	fb09 f40a 	mul.w	r4, r9, sl
 8000ce8:	429c      	cmp	r4, r3
 8000cea:	fa02 f207 	lsl.w	r2, r2, r7
 8000cee:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf2:	d90b      	bls.n	8000d0c <__udivmoddi4+0x1b0>
 8000cf4:	eb1e 0303 	adds.w	r3, lr, r3
 8000cf8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cfc:	f080 8087 	bcs.w	8000e0e <__udivmoddi4+0x2b2>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f240 8084 	bls.w	8000e0e <__udivmoddi4+0x2b2>
 8000d06:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0a:	4473      	add	r3, lr
 8000d0c:	1b1b      	subs	r3, r3, r4
 8000d0e:	b2ad      	uxth	r5, r5
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3310 	mls	r3, r8, r0, r3
 8000d18:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d1c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d20:	45a2      	cmp	sl, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x1da>
 8000d24:	eb1e 0404 	adds.w	r4, lr, r4
 8000d28:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d2c:	d26b      	bcs.n	8000e06 <__udivmoddi4+0x2aa>
 8000d2e:	45a2      	cmp	sl, r4
 8000d30:	d969      	bls.n	8000e06 <__udivmoddi4+0x2aa>
 8000d32:	3802      	subs	r0, #2
 8000d34:	4474      	add	r4, lr
 8000d36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d3e:	eba4 040a 	sub.w	r4, r4, sl
 8000d42:	454c      	cmp	r4, r9
 8000d44:	46c2      	mov	sl, r8
 8000d46:	464b      	mov	r3, r9
 8000d48:	d354      	bcc.n	8000df4 <__udivmoddi4+0x298>
 8000d4a:	d051      	beq.n	8000df0 <__udivmoddi4+0x294>
 8000d4c:	2e00      	cmp	r6, #0
 8000d4e:	d069      	beq.n	8000e24 <__udivmoddi4+0x2c8>
 8000d50:	ebb1 050a 	subs.w	r5, r1, sl
 8000d54:	eb64 0403 	sbc.w	r4, r4, r3
 8000d58:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d5c:	40fd      	lsrs	r5, r7
 8000d5e:	40fc      	lsrs	r4, r7
 8000d60:	ea4c 0505 	orr.w	r5, ip, r5
 8000d64:	e9c6 5400 	strd	r5, r4, [r6]
 8000d68:	2700      	movs	r7, #0
 8000d6a:	e747      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000d6c:	f1c2 0320 	rsb	r3, r2, #32
 8000d70:	fa20 f703 	lsr.w	r7, r0, r3
 8000d74:	4095      	lsls	r5, r2
 8000d76:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d7e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d82:	4338      	orrs	r0, r7
 8000d84:	0c01      	lsrs	r1, r0, #16
 8000d86:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8a:	fa1f f885 	uxth.w	r8, r5
 8000d8e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d92:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d96:	fb07 f308 	mul.w	r3, r7, r8
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x256>
 8000da2:	1869      	adds	r1, r5, r1
 8000da4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000da8:	d22f      	bcs.n	8000e0a <__udivmoddi4+0x2ae>
 8000daa:	428b      	cmp	r3, r1
 8000dac:	d92d      	bls.n	8000e0a <__udivmoddi4+0x2ae>
 8000dae:	3f02      	subs	r7, #2
 8000db0:	4429      	add	r1, r5
 8000db2:	1acb      	subs	r3, r1, r3
 8000db4:	b281      	uxth	r1, r0
 8000db6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dba:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dbe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc2:	fb00 f308 	mul.w	r3, r0, r8
 8000dc6:	428b      	cmp	r3, r1
 8000dc8:	d907      	bls.n	8000dda <__udivmoddi4+0x27e>
 8000dca:	1869      	adds	r1, r5, r1
 8000dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd0:	d217      	bcs.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d915      	bls.n	8000e02 <__udivmoddi4+0x2a6>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4429      	add	r1, r5
 8000dda:	1ac9      	subs	r1, r1, r3
 8000ddc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de0:	e73b      	b.n	8000c5a <__udivmoddi4+0xfe>
 8000de2:	4637      	mov	r7, r6
 8000de4:	4630      	mov	r0, r6
 8000de6:	e709      	b.n	8000bfc <__udivmoddi4+0xa0>
 8000de8:	4607      	mov	r7, r0
 8000dea:	e6e7      	b.n	8000bbc <__udivmoddi4+0x60>
 8000dec:	4618      	mov	r0, r3
 8000dee:	e6fb      	b.n	8000be8 <__udivmoddi4+0x8c>
 8000df0:	4541      	cmp	r1, r8
 8000df2:	d2ab      	bcs.n	8000d4c <__udivmoddi4+0x1f0>
 8000df4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000df8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dfc:	3801      	subs	r0, #1
 8000dfe:	4613      	mov	r3, r2
 8000e00:	e7a4      	b.n	8000d4c <__udivmoddi4+0x1f0>
 8000e02:	4660      	mov	r0, ip
 8000e04:	e7e9      	b.n	8000dda <__udivmoddi4+0x27e>
 8000e06:	4618      	mov	r0, r3
 8000e08:	e795      	b.n	8000d36 <__udivmoddi4+0x1da>
 8000e0a:	4667      	mov	r7, ip
 8000e0c:	e7d1      	b.n	8000db2 <__udivmoddi4+0x256>
 8000e0e:	4681      	mov	r9, r0
 8000e10:	e77c      	b.n	8000d0c <__udivmoddi4+0x1b0>
 8000e12:	3802      	subs	r0, #2
 8000e14:	442c      	add	r4, r5
 8000e16:	e747      	b.n	8000ca8 <__udivmoddi4+0x14c>
 8000e18:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e1c:	442b      	add	r3, r5
 8000e1e:	e72f      	b.n	8000c80 <__udivmoddi4+0x124>
 8000e20:	4638      	mov	r0, r7
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xda>
 8000e24:	4637      	mov	r7, r6
 8000e26:	e6e9      	b.n	8000bfc <__udivmoddi4+0xa0>

08000e28 <__aeabi_idiv0>:
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b084      	sub	sp, #16
 8000e30:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	463b      	mov	r3, r7
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e40:	4a21      	ldr	r2, [pc, #132]	; (8000ec8 <MX_ADC1_Init+0x9c>)
 8000e42:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e44:	4b1f      	ldr	r3, [pc, #124]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e50:	4b1c      	ldr	r3, [pc, #112]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e64:	4b17      	ldr	r3, [pc, #92]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e6a:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e6c:	4a17      	ldr	r2, [pc, #92]	; (8000ecc <MX_ADC1_Init+0xa0>)
 8000e6e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e76:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e7c:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e84:	4b0f      	ldr	r3, [pc, #60]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e8a:	480e      	ldr	r0, [pc, #56]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000e8c:	f001 f872 	bl	8001f74 <HAL_ADC_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000e96:	f000 fcb5 	bl	8001804 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_ADC1_Init+0x98>)
 8000eac:	f001 f8a6 	bl	8001ffc <HAL_ADC_ConfigChannel>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eb6:	f000 fca5 	bl	8001804 <Error_Handler>
  }

}
 8000eba:	bf00      	nop
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	2000027c 	.word	0x2000027c
 8000ec8:	40012000 	.word	0x40012000
 8000ecc:	0f000001 	.word	0x0f000001

08000ed0 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed6:	463b      	mov	r3, r7
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000ee2:	4b21      	ldr	r3, [pc, #132]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000ee4:	4a21      	ldr	r2, [pc, #132]	; (8000f6c <MX_ADC2_Init+0x9c>)
 8000ee6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ee8:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000eee:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000ef4:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f08:	4b17      	ldr	r3, [pc, #92]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f0e:	4b16      	ldr	r3, [pc, #88]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f10:	4a17      	ldr	r2, [pc, #92]	; (8000f70 <MX_ADC2_Init+0xa0>)
 8000f12:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f14:	4b14      	ldr	r3, [pc, #80]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f28:	4b0f      	ldr	r3, [pc, #60]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f2e:	480e      	ldr	r0, [pc, #56]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f30:	f001 f820 	bl	8001f74 <HAL_ADC_Init>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000f3a:	f000 fc63 	bl	8001804 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f46:	2300      	movs	r3, #0
 8000f48:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <MX_ADC2_Init+0x98>)
 8000f50:	f001 f854 	bl	8001ffc <HAL_ADC_ConfigChannel>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000f5a:	f000 fc53 	bl	8001804 <Error_Handler>
  }

}
 8000f5e:	bf00      	nop
 8000f60:	3710      	adds	r7, #16
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	20000234 	.word	0x20000234
 8000f6c:	40012100 	.word	0x40012100
 8000f70:	0f000001 	.word	0x0f000001

08000f74 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	; 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a2e      	ldr	r2, [pc, #184]	; (800104c <HAL_ADC_MspInit+0xd8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d128      	bne.n	8000fe8 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	4b2d      	ldr	r3, [pc, #180]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	4a2c      	ldr	r2, [pc, #176]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fa4:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa6:	4b2a      	ldr	r3, [pc, #168]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	4b26      	ldr	r3, [pc, #152]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a25      	ldr	r2, [pc, #148]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 031c 	add.w	r3, r7, #28
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481c      	ldr	r0, [pc, #112]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 8000fe2:	f002 f8a1 	bl	8003128 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000fe6:	e02c      	b.n	8001042 <HAL_ADC_MspInit+0xce>
  else if(adcHandle->Instance==ADC2)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1a      	ldr	r2, [pc, #104]	; (8001058 <HAL_ADC_MspInit+0xe4>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d127      	bne.n	8001042 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	4a15      	ldr	r2, [pc, #84]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8000ffc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001000:	6453      	str	r3, [r2, #68]	; 0x44
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8001018:	f043 0301 	orr.w	r3, r3, #1
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_ADC_MspInit+0xdc>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0301 	and.w	r3, r3, #1
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800102a:	2302      	movs	r3, #2
 800102c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800102e:	2303      	movs	r3, #3
 8001030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 031c 	add.w	r3, r7, #28
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_ADC_MspInit+0xe0>)
 800103e:	f002 f873 	bl	8003128 <HAL_GPIO_Init>
}
 8001042:	bf00      	nop
 8001044:	3730      	adds	r7, #48	; 0x30
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40012000 	.word	0x40012000
 8001050:	40023800 	.word	0x40023800
 8001054:	40020000 	.word	0x40020000
 8001058:	40012100 	.word	0x40012100

0800105c <MX_DAC_Init>:
DMA_HandleTypeDef hdma_dac1;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001062:	463b      	mov	r3, r7
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800106a:	4b15      	ldr	r3, [pc, #84]	; (80010c0 <MX_DAC_Init+0x64>)
 800106c:	4a15      	ldr	r2, [pc, #84]	; (80010c4 <MX_DAC_Init+0x68>)
 800106e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001070:	4813      	ldr	r0, [pc, #76]	; (80010c0 <MX_DAC_Init+0x64>)
 8001072:	f001 fb02 	bl	800267a <HAL_DAC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 800107c:	f000 fbc2 	bl	8001804 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001080:	2324      	movs	r3, #36	; 0x24
 8001082:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	2200      	movs	r2, #0
 800108c:	4619      	mov	r1, r3
 800108e:	480c      	ldr	r0, [pc, #48]	; (80010c0 <MX_DAC_Init+0x64>)
 8001090:	f001 fbe2 	bl	8002858 <HAL_DAC_ConfigChannel>
 8001094:	4603      	mov	r3, r0
 8001096:	2b00      	cmp	r3, #0
 8001098:	d001      	beq.n	800109e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800109a:	f000 fbb3 	bl	8001804 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800109e:	232c      	movs	r3, #44	; 0x2c
 80010a0:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80010a2:	463b      	mov	r3, r7
 80010a4:	2210      	movs	r2, #16
 80010a6:	4619      	mov	r1, r3
 80010a8:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_DAC_Init+0x64>)
 80010aa:	f001 fbd5 	bl	8002858 <HAL_DAC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_DAC_Init+0x5c>
  {
    Error_Handler();
 80010b4:	f000 fba6 	bl	8001804 <Error_Handler>
  }

}
 80010b8:	bf00      	nop
 80010ba:	3708      	adds	r7, #8
 80010bc:	46bd      	mov	sp, r7
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	20000324 	.word	0x20000324
 80010c4:	40007400 	.word	0x40007400

080010c8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a48      	ldr	r2, [pc, #288]	; (8001208 <HAL_DAC_MspInit+0x140>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	f040 808a 	bne.w	8001200 <HAL_DAC_MspInit+0x138>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80010ec:	2300      	movs	r3, #0
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	4b46      	ldr	r3, [pc, #280]	; (800120c <HAL_DAC_MspInit+0x144>)
 80010f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010f4:	4a45      	ldr	r2, [pc, #276]	; (800120c <HAL_DAC_MspInit+0x144>)
 80010f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80010fa:	6413      	str	r3, [r2, #64]	; 0x40
 80010fc:	4b43      	ldr	r3, [pc, #268]	; (800120c <HAL_DAC_MspInit+0x144>)
 80010fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001100:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	2300      	movs	r3, #0
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	4b3f      	ldr	r3, [pc, #252]	; (800120c <HAL_DAC_MspInit+0x144>)
 800110e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001110:	4a3e      	ldr	r2, [pc, #248]	; (800120c <HAL_DAC_MspInit+0x144>)
 8001112:	f043 0301 	orr.w	r3, r3, #1
 8001116:	6313      	str	r3, [r2, #48]	; 0x30
 8001118:	4b3c      	ldr	r3, [pc, #240]	; (800120c <HAL_DAC_MspInit+0x144>)
 800111a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001124:	2330      	movs	r3, #48	; 0x30
 8001126:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001128:	2303      	movs	r3, #3
 800112a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001130:	f107 0314 	add.w	r3, r7, #20
 8001134:	4619      	mov	r1, r3
 8001136:	4836      	ldr	r0, [pc, #216]	; (8001210 <HAL_DAC_MspInit+0x148>)
 8001138:	f001 fff6 	bl	8003128 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800113c:	4b35      	ldr	r3, [pc, #212]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 800113e:	4a36      	ldr	r2, [pc, #216]	; (8001218 <HAL_DAC_MspInit+0x150>)
 8001140:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001142:	4b34      	ldr	r3, [pc, #208]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001144:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001148:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800114a:	4b32      	ldr	r3, [pc, #200]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001150:	4b30      	ldr	r3, [pc, #192]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8001156:	4b2f      	ldr	r3, [pc, #188]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001158:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800115c:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800115e:	4b2d      	ldr	r3, [pc, #180]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001160:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001164:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001166:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001168:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800116c:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800116e:	4b29      	ldr	r3, [pc, #164]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001170:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001174:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001176:	4b27      	ldr	r3, [pc, #156]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001178:	2200      	movs	r2, #0
 800117a:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800117c:	4b25      	ldr	r3, [pc, #148]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 800117e:	2200      	movs	r2, #0
 8001180:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001182:	4824      	ldr	r0, [pc, #144]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001184:	f001 fc40 	bl	8002a08 <HAL_DMA_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 800118e:	f000 fb39 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4a1f      	ldr	r2, [pc, #124]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	4a1e      	ldr	r2, [pc, #120]	; (8001214 <HAL_DAC_MspInit+0x14c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011a0:	4a1f      	ldr	r2, [pc, #124]	; (8001220 <HAL_DAC_MspInit+0x158>)
 80011a2:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011a6:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80011aa:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ac:	4b1b      	ldr	r3, [pc, #108]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011ae:	2240      	movs	r2, #64	; 0x40
 80011b0:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011be:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011c0:	4b16      	ldr	r3, [pc, #88]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011c2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011c6:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011ce:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80011d0:	4b12      	ldr	r3, [pc, #72]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011d6:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_LOW;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011da:	2200      	movs	r2, #0
 80011dc:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011de:	4b0f      	ldr	r3, [pc, #60]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80011e4:	480d      	ldr	r0, [pc, #52]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011e6:	f001 fc0f 	bl	8002a08 <HAL_DMA_Init>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <HAL_DAC_MspInit+0x12c>
    {
      Error_Handler();
 80011f0:	f000 fb08 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a09      	ldr	r2, [pc, #36]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	4a08      	ldr	r2, [pc, #32]	; (800121c <HAL_DAC_MspInit+0x154>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40007400 	.word	0x40007400
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000
 8001214:	200002c4 	.word	0x200002c4
 8001218:	40026088 	.word	0x40026088
 800121c:	20000338 	.word	0x20000338
 8001220:	400260a0 	.word	0x400260a0

08001224 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_DMA_Init+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <MX_DMA_Init+0x88>)
 8001234:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_DMA_Init+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	4b18      	ldr	r3, [pc, #96]	; (80012ac <MX_DMA_Init+0x88>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_DMA_Init+0x88>)
 8001250:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_DMA_Init+0x88>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800125e:	603b      	str	r3, [r7, #0]
 8001260:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2010      	movs	r0, #16
 8001268:	f001 f9d1 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800126c:	2010      	movs	r0, #16
 800126e:	f001 f9ea 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2011      	movs	r0, #17
 8001278:	f001 f9c9 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800127c:	2011      	movs	r0, #17
 800127e:	f001 f9e2 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	203a      	movs	r0, #58	; 0x3a
 8001288:	f001 f9c1 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800128c:	203a      	movs	r0, #58	; 0x3a
 800128e:	f001 f9da 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2046      	movs	r0, #70	; 0x46
 8001298:	f001 f9b9 	bl	800260e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800129c:	2046      	movs	r0, #70	; 0x46
 800129e:	f001 f9d2 	bl	8002646 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_GPIO_Init+0x68>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a16      	ldr	r2, [pc, #88]	; (8001318 <MX_GPIO_Init+0x68>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_GPIO_Init+0x68>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60bb      	str	r3, [r7, #8]
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_GPIO_Init+0x68>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a0f      	ldr	r2, [pc, #60]	; (8001318 <MX_GPIO_Init+0x68>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_GPIO_Init+0x68>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	607b      	str	r3, [r7, #4]
 80012f2:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_GPIO_Init+0x68>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a08      	ldr	r2, [pc, #32]	; (8001318 <MX_GPIO_Init+0x68>)
 80012f8:	f043 0302 	orr.w	r3, r3, #2
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_GPIO_Init+0x68>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

}
 800130a:	bf00      	nop
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	40023800 	.word	0x40023800

0800131c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8001320:	4b1b      	ldr	r3, [pc, #108]	; (8001390 <MX_I2C1_Init+0x74>)
 8001322:	4a1c      	ldr	r2, [pc, #112]	; (8001394 <MX_I2C1_Init+0x78>)
 8001324:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001326:	4b1a      	ldr	r3, [pc, #104]	; (8001390 <MX_I2C1_Init+0x74>)
 8001328:	4a1b      	ldr	r2, [pc, #108]	; (8001398 <MX_I2C1_Init+0x7c>)
 800132a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800132c:	4b18      	ldr	r3, [pc, #96]	; (8001390 <MX_I2C1_Init+0x74>)
 800132e:	2200      	movs	r2, #0
 8001330:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001332:	4b17      	ldr	r3, [pc, #92]	; (8001390 <MX_I2C1_Init+0x74>)
 8001334:	2200      	movs	r2, #0
 8001336:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001338:	4b15      	ldr	r3, [pc, #84]	; (8001390 <MX_I2C1_Init+0x74>)
 800133a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800133e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001340:	4b13      	ldr	r3, [pc, #76]	; (8001390 <MX_I2C1_Init+0x74>)
 8001342:	2200      	movs	r2, #0
 8001344:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001346:	4b12      	ldr	r3, [pc, #72]	; (8001390 <MX_I2C1_Init+0x74>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800134c:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_I2C1_Init+0x74>)
 800134e:	2200      	movs	r2, #0
 8001350:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001352:	4b0f      	ldr	r3, [pc, #60]	; (8001390 <MX_I2C1_Init+0x74>)
 8001354:	2200      	movs	r2, #0
 8001356:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001358:	480d      	ldr	r0, [pc, #52]	; (8001390 <MX_I2C1_Init+0x74>)
 800135a:	f002 f88f 	bl	800347c <HAL_I2C_Init>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001364:	f000 fa4e 	bl	8001804 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001368:	2100      	movs	r1, #0
 800136a:	4809      	ldr	r0, [pc, #36]	; (8001390 <MX_I2C1_Init+0x74>)
 800136c:	f002 f9be 	bl	80036ec <HAL_I2CEx_ConfigAnalogFilter>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001376:	f000 fa45 	bl	8001804 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800137a:	2100      	movs	r1, #0
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_I2C1_Init+0x74>)
 800137e:	f002 f9f1 	bl	8003764 <HAL_I2CEx_ConfigDigitalFilter>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001388:	f000 fa3c 	bl	8001804 <Error_Handler>
  }

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000398 	.word	0x20000398
 8001394:	40005400 	.word	0x40005400
 8001398:	000186a0 	.word	0x000186a0

0800139c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	; 0x28
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a19      	ldr	r2, [pc, #100]	; (8001420 <HAL_I2C_MspInit+0x84>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d12b      	bne.n	8001416 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <HAL_I2C_MspInit+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <HAL_I2C_MspInit+0x88>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <HAL_I2C_MspInit+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013da:	23c0      	movs	r3, #192	; 0xc0
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013de:	2312      	movs	r3, #18
 80013e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e2:	2301      	movs	r3, #1
 80013e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013ea:	2304      	movs	r3, #4
 80013ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	; (8001428 <HAL_I2C_MspInit+0x8c>)
 80013f6:	f001 fe97 	bl	8003128 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	4b09      	ldr	r3, [pc, #36]	; (8001424 <HAL_I2C_MspInit+0x88>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a08      	ldr	r2, [pc, #32]	; (8001424 <HAL_I2C_MspInit+0x88>)
 8001404:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b06      	ldr	r3, [pc, #24]	; (8001424 <HAL_I2C_MspInit+0x88>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001416:	bf00      	nop
 8001418:	3728      	adds	r7, #40	; 0x28
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40005400 	.word	0x40005400
 8001424:	40023800 	.word	0x40023800
 8001428:	40020400 	.word	0x40020400
 800142c:	00000000 	.word	0x00000000

08001430 <get_sine_val>:
int PSC;					// Tim2 Pre Scalar value
uint32_t Fclock = 72000000;	// APB1 Timer Clocks
int Period = 1;				// Tim2 Period


void get_sine_val(void){
 8001430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0

	// Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	// Vsine(x)=(sine(x*(2PI/ns)+1)*((0xFFF+1)/2), this is an adjusted formula to create a positive sine.

	for(int i=0;i<Ns;i++){
 8001436:	2300      	movs	r3, #0
 8001438:	607b      	str	r3, [r7, #4]
 800143a:	e06b      	b.n	8001514 <get_sine_val+0xe4>
		sine_val[i] = ((sin(i*2*PI/Ns)+1)*((Res)/2)); // Sampling step = 2PI/ns
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff f827 	bl	8000494 <__aeabi_i2d>
 8001446:	a340      	add	r3, pc, #256	; (adr r3, 8001548 <get_sine_val+0x118>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7ff f88c 	bl	8000568 <__aeabi_dmul>
 8001450:	4603      	mov	r3, r0
 8001452:	460c      	mov	r4, r1
 8001454:	4618      	mov	r0, r3
 8001456:	4621      	mov	r1, r4
 8001458:	f04f 0200 	mov.w	r2, #0
 800145c:	4b34      	ldr	r3, [pc, #208]	; (8001530 <get_sine_val+0x100>)
 800145e:	f7ff f9ad 	bl	80007bc <__aeabi_ddiv>
 8001462:	4603      	mov	r3, r0
 8001464:	460c      	mov	r4, r1
 8001466:	ec44 3b17 	vmov	d7, r3, r4
 800146a:	eeb0 0a47 	vmov.f32	s0, s14
 800146e:	eef0 0a67 	vmov.f32	s1, s15
 8001472:	f008 fefd 	bl	800a270 <sin>
 8001476:	ec51 0b10 	vmov	r0, r1, d0
 800147a:	f04f 0200 	mov.w	r2, #0
 800147e:	4b2d      	ldr	r3, [pc, #180]	; (8001534 <get_sine_val+0x104>)
 8001480:	f7fe febc 	bl	80001fc <__adddf3>
 8001484:	4603      	mov	r3, r0
 8001486:	460c      	mov	r4, r1
 8001488:	4625      	mov	r5, r4
 800148a:	461c      	mov	r4, r3
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <get_sine_val+0x108>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0fda      	lsrs	r2, r3, #31
 8001492:	4413      	add	r3, r2
 8001494:	105b      	asrs	r3, r3, #1
 8001496:	4618      	mov	r0, r3
 8001498:	f7fe fffc 	bl	8000494 <__aeabi_i2d>
 800149c:	4602      	mov	r2, r0
 800149e:	460b      	mov	r3, r1
 80014a0:	4620      	mov	r0, r4
 80014a2:	4629      	mov	r1, r5
 80014a4:	f7ff f860 	bl	8000568 <__aeabi_dmul>
 80014a8:	4603      	mov	r3, r0
 80014aa:	460c      	mov	r4, r1
 80014ac:	4618      	mov	r0, r3
 80014ae:	4621      	mov	r1, r4
 80014b0:	f7ff fb1c 	bl	8000aec <__aeabi_d2uiz>
 80014b4:	4601      	mov	r1, r0
 80014b6:	4a21      	ldr	r2, [pc, #132]	; (800153c <get_sine_val+0x10c>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		sine_val[i] = sine_dc_offset + sine_scaled*sine_val[i];
 80014be:	4b20      	ldr	r3, [pc, #128]	; (8001540 <get_sine_val+0x110>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7fe ffe6 	bl	8000494 <__aeabi_i2d>
 80014c8:	4605      	mov	r5, r0
 80014ca:	460e      	mov	r6, r1
 80014cc:	4a1b      	ldr	r2, [pc, #108]	; (800153c <get_sine_val+0x10c>)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7fe ffcd 	bl	8000474 <__aeabi_ui2d>
 80014da:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <get_sine_val+0x114>)
 80014dc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80014e0:	461a      	mov	r2, r3
 80014e2:	4623      	mov	r3, r4
 80014e4:	f7ff f840 	bl	8000568 <__aeabi_dmul>
 80014e8:	4603      	mov	r3, r0
 80014ea:	460c      	mov	r4, r1
 80014ec:	461a      	mov	r2, r3
 80014ee:	4623      	mov	r3, r4
 80014f0:	4628      	mov	r0, r5
 80014f2:	4631      	mov	r1, r6
 80014f4:	f7fe fe82 	bl	80001fc <__adddf3>
 80014f8:	4603      	mov	r3, r0
 80014fa:	460c      	mov	r4, r1
 80014fc:	4618      	mov	r0, r3
 80014fe:	4621      	mov	r1, r4
 8001500:	f7ff faf4 	bl	8000aec <__aeabi_d2uiz>
 8001504:	4601      	mov	r1, r0
 8001506:	4a0d      	ldr	r2, [pc, #52]	; (800153c <get_sine_val+0x10c>)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i=0;i<Ns;i++){
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3301      	adds	r3, #1
 8001512:	607b      	str	r3, [r7, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2bc7      	cmp	r3, #199	; 0xc7
 8001518:	dd90      	ble.n	800143c <get_sine_val+0xc>
	}
	sine_val[Ns] = 0;
 800151a:	4b08      	ldr	r3, [pc, #32]	; (800153c <get_sine_val+0x10c>)
 800151c:	2200      	movs	r2, #0
 800151e:	f8c3 2320 	str.w	r2, [r3, #800]	; 0x320
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800152a:	bf00      	nop
 800152c:	f3af 8000 	nop.w
 8001530:	40690000 	.word	0x40690000
 8001534:	3ff00000 	.word	0x3ff00000
 8001538:	20000000 	.word	0x20000000
 800153c:	200003fc 	.word	0x200003fc
 8001540:	20000010 	.word	0x20000010
 8001544:	20000008 	.word	0x20000008
 8001548:	4d12d84a 	.word	0x4d12d84a
 800154c:	400921fb 	.word	0x400921fb

08001550 <set_clock_TIM2>:



void set_clock_TIM2(void){
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_1*(Period + 1) ) - 1;
 8001554:	4b15      	ldr	r3, [pc, #84]	; (80015ac <set_clock_TIM2+0x5c>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4a15      	ldr	r2, [pc, #84]	; (80015b0 <set_clock_TIM2+0x60>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	099b      	lsrs	r3, r3, #6
 8001560:	4a14      	ldr	r2, [pc, #80]	; (80015b4 <set_clock_TIM2+0x64>)
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	3201      	adds	r2, #1
 8001566:	4914      	ldr	r1, [pc, #80]	; (80015b8 <set_clock_TIM2+0x68>)
 8001568:	6809      	ldr	r1, [r1, #0]
 800156a:	fb01 f202 	mul.w	r2, r1, r2
 800156e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001572:	3b01      	subs	r3, #1
 8001574:	461a      	mov	r2, r3
 8001576:	4b11      	ldr	r3, [pc, #68]	; (80015bc <set_clock_TIM2+0x6c>)
 8001578:	601a      	str	r2, [r3, #0]

	  htim2.Instance = TIM2;
 800157a:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <set_clock_TIM2+0x70>)
 800157c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001580:	601a      	str	r2, [r3, #0]
	  htim2.Init.Period = Period; //+1
 8001582:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <set_clock_TIM2+0x64>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	461a      	mov	r2, r3
 8001588:	4b0d      	ldr	r3, [pc, #52]	; (80015c0 <set_clock_TIM2+0x70>)
 800158a:	60da      	str	r2, [r3, #12]
	  htim2.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <set_clock_TIM2+0x6c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b0b      	ldr	r3, [pc, #44]	; (80015c0 <set_clock_TIM2+0x70>)
 8001594:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001596:	480a      	ldr	r0, [pc, #40]	; (80015c0 <set_clock_TIM2+0x70>)
 8001598:	f003 ff08 	bl	80053ac <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <set_clock_TIM2+0x56>
	  {
	    Error_Handler();
 80015a2:	f000 f92f 	bl	8001804 <Error_Handler>
	  }
}
 80015a6:	bf00      	nop
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	2000001c 	.word	0x2000001c
 80015b0:	51eb851f 	.word	0x51eb851f
 80015b4:	20000020 	.word	0x20000020
 80015b8:	20000014 	.word	0x20000014
 80015bc:	200003f8 	.word	0x200003f8
 80015c0:	20000774 	.word	0x20000774

080015c4 <set_clock_TIM4>:

void set_clock_TIM4(void){
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	  // Fsine = FtimerRTGO/Ns,   Fsine = F(timer trigger ouput)/(number of samples)
	  // Adjust PSC and period in order to manipulate frequency.

	  PSC= (Fclock/Ns)/(Freq_Signal_2*(Period + 1) ) - 1;
 80015c8:	4b14      	ldr	r3, [pc, #80]	; (800161c <set_clock_TIM4+0x58>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a14      	ldr	r2, [pc, #80]	; (8001620 <set_clock_TIM4+0x5c>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	099b      	lsrs	r3, r3, #6
 80015d4:	4a13      	ldr	r2, [pc, #76]	; (8001624 <set_clock_TIM4+0x60>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	3201      	adds	r2, #1
 80015da:	4913      	ldr	r1, [pc, #76]	; (8001628 <set_clock_TIM4+0x64>)
 80015dc:	6809      	ldr	r1, [r1, #0]
 80015de:	fb01 f202 	mul.w	r2, r1, r2
 80015e2:	fbb3 f3f2 	udiv	r3, r3, r2
 80015e6:	3b01      	subs	r3, #1
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <set_clock_TIM4+0x68>)
 80015ec:	601a      	str	r2, [r3, #0]

	  htim4.Instance = TIM4;
 80015ee:	4b10      	ldr	r3, [pc, #64]	; (8001630 <set_clock_TIM4+0x6c>)
 80015f0:	4a10      	ldr	r2, [pc, #64]	; (8001634 <set_clock_TIM4+0x70>)
 80015f2:	601a      	str	r2, [r3, #0]
	  htim4.Init.Period = Period; //+1
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <set_clock_TIM4+0x60>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <set_clock_TIM4+0x6c>)
 80015fc:	60da      	str	r2, [r3, #12]
	  htim4.Init.Prescaler = PSC; //+1 // If this value is < 4 things start to behave funny.
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <set_clock_TIM4+0x68>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <set_clock_TIM4+0x6c>)
 8001606:	605a      	str	r2, [r3, #4]
	  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001608:	4809      	ldr	r0, [pc, #36]	; (8001630 <set_clock_TIM4+0x6c>)
 800160a:	f003 fecf 	bl	80053ac <HAL_TIM_Base_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <set_clock_TIM4+0x54>
	  {
	    Error_Handler();
 8001614:	f000 f8f6 	bl	8001804 <Error_Handler>
	  }
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}
 800161c:	2000001c 	.word	0x2000001c
 8001620:	51eb851f 	.word	0x51eb851f
 8001624:	20000020 	.word	0x20000020
 8001628:	20000018 	.word	0x20000018
 800162c:	200003f8 	.word	0x200003f8
 8001630:	20000734 	.word	0x20000734
 8001634:	40000800 	.word	0x40000800

08001638 <HAL_UART_RxCpltCallback>:
/* Setting up UART communications*/
#define uartSize 9
uint8_t rx_buff[uartSize];
uint8_t tx_buff[uartSize];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]

	// Do something

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 8001640:	2209      	movs	r2, #9
 8001642:	4904      	ldr	r1, [pc, #16]	; (8001654 <HAL_UART_RxCpltCallback+0x1c>)
 8001644:	4804      	ldr	r0, [pc, #16]	; (8001658 <HAL_UART_RxCpltCallback+0x20>)
 8001646:	f004 fa27 	bl	8005a98 <HAL_UART_Receive_DMA>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	200003ec 	.word	0x200003ec
 8001658:	20000874 	.word	0x20000874

0800165c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback (UART_HandleTypeDef *huart){
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
//	int i = 100;
//	while(i>0){
//		i = i -1;
//	}

	HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); // Receive UART
 8001664:	2209      	movs	r2, #9
 8001666:	4904      	ldr	r1, [pc, #16]	; (8001678 <HAL_UART_TxCpltCallback+0x1c>)
 8001668:	4804      	ldr	r0, [pc, #16]	; (800167c <HAL_UART_TxCpltCallback+0x20>)
 800166a:	f004 fa15 	bl	8005a98 <HAL_UART_Receive_DMA>
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200003ec 	.word	0x200003ec
 800167c:	20000874 	.word	0x20000874

08001680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001686:	f000 fbe1 	bl	8001e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800168a:	f000 f851 	bl	8001730 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800168e:	f7ff fe0f 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001692:	f7ff fdc7 	bl	8001224 <MX_DMA_Init>
  MX_DAC_Init();
 8001696:	f7ff fce1 	bl	800105c <MX_DAC_Init>
  MX_TIM2_Init();
 800169a:	f000 f999 	bl	80019d0 <MX_TIM2_Init>
  MX_TIM4_Init();
 800169e:	f000 f9e3 	bl	8001a68 <MX_TIM4_Init>
  MX_USB_DEVICE_Init();
 80016a2:	f008 f80f 	bl	80096c4 <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 80016a6:	f7ff fbc1 	bl	8000e2c <MX_ADC1_Init>
  MX_ADC2_Init();
 80016aa:	f7ff fc11 	bl	8000ed0 <MX_ADC2_Init>
  MX_I2C1_Init();
 80016ae:	f7ff fe35 	bl	800131c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80016b2:	f000 fa5b 	bl	8001b6c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80016b6:	f000 fa83 	bl	8001bc0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Sine function */
  set_clock_TIM2();						// Setting frequency of timer 2
 80016ba:	f7ff ff49 	bl	8001550 <set_clock_TIM2>
  set_clock_TIM4();						// Setting frequency of timer 4
 80016be:	f7ff ff81 	bl	80015c4 <set_clock_TIM4>
  HAL_TIM_Base_Start(&htim2);			// Start timer 2
 80016c2:	4814      	ldr	r0, [pc, #80]	; (8001714 <main+0x94>)
 80016c4:	f003 fe9d 	bl	8005402 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);			// Start timer 4
 80016c8:	4813      	ldr	r0, [pc, #76]	; (8001718 <main+0x98>)
 80016ca:	f003 fe9a 	bl	8005402 <HAL_TIM_Base_Start>
  get_sine_val();						// Call get sineval function
 80016ce:	f7ff feaf 	bl	8001430 <get_sine_val>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 80016d2:	2300      	movs	r3, #0
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	23c8      	movs	r3, #200	; 0xc8
 80016d8:	4a10      	ldr	r2, [pc, #64]	; (800171c <main+0x9c>)
 80016da:	2100      	movs	r1, #0
 80016dc:	4810      	ldr	r0, [pc, #64]	; (8001720 <main+0xa0>)
 80016de:	f000 ffef 	bl	80026c0 <HAL_DAC_Start_DMA>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_2, sine_val, Ns, DAC_ALIGN_12B_R); //Start DMA, passing list of sine values.
 80016e2:	2300      	movs	r3, #0
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	23c8      	movs	r3, #200	; 0xc8
 80016e8:	4a0c      	ldr	r2, [pc, #48]	; (800171c <main+0x9c>)
 80016ea:	2110      	movs	r1, #16
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <main+0xa0>)
 80016ee:	f000 ffe7 	bl	80026c0 <HAL_DAC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//HAL_UART_Receive_DMA(&huart1, rx_buff, uartSize); //set correct UART handler
	HAL_Delay(100);
 80016f2:	2064      	movs	r0, #100	; 0x64
 80016f4:	f000 fc1c 	bl	8001f30 <HAL_Delay>
	strcpy((char*)tx_buff, "Hello!\r\n");
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <main+0xa4>)
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <main+0xa8>)
 80016fc:	cb03      	ldmia	r3!, {r0, r1}
 80016fe:	6010      	str	r0, [r2, #0]
 8001700:	6051      	str	r1, [r2, #4]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	7213      	strb	r3, [r2, #8]
	HAL_UART_Transmit_DMA(&huart1, tx_buff, uartSize);
 8001706:	2209      	movs	r2, #9
 8001708:	4906      	ldr	r1, [pc, #24]	; (8001724 <main+0xa4>)
 800170a:	4808      	ldr	r0, [pc, #32]	; (800172c <main+0xac>)
 800170c:	f004 f958 	bl	80059c0 <HAL_UART_Transmit_DMA>
	HAL_Delay(100);
 8001710:	e7ef      	b.n	80016f2 <main+0x72>
 8001712:	bf00      	nop
 8001714:	20000774 	.word	0x20000774
 8001718:	20000734 	.word	0x20000734
 800171c:	200003fc 	.word	0x200003fc
 8001720:	20000324 	.word	0x20000324
 8001724:	20000728 	.word	0x20000728
 8001728:	0800b2b0 	.word	0x0800b2b0
 800172c:	20000874 	.word	0x20000874

08001730 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b094      	sub	sp, #80	; 0x50
 8001734:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001736:	f107 0320 	add.w	r3, r7, #32
 800173a:	2230      	movs	r2, #48	; 0x30
 800173c:	2100      	movs	r1, #0
 800173e:	4618      	mov	r0, r3
 8001740:	f008 fcd4 	bl	800a0ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	2200      	movs	r2, #0
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	605a      	str	r2, [r3, #4]
 800174e:	609a      	str	r2, [r3, #8]
 8001750:	60da      	str	r2, [r3, #12]
 8001752:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	2300      	movs	r3, #0
 8001756:	60bb      	str	r3, [r7, #8]
 8001758:	4b28      	ldr	r3, [pc, #160]	; (80017fc <SystemClock_Config+0xcc>)
 800175a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175c:	4a27      	ldr	r2, [pc, #156]	; (80017fc <SystemClock_Config+0xcc>)
 800175e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001762:	6413      	str	r3, [r2, #64]	; 0x40
 8001764:	4b25      	ldr	r3, [pc, #148]	; (80017fc <SystemClock_Config+0xcc>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001770:	2300      	movs	r3, #0
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	4b22      	ldr	r3, [pc, #136]	; (8001800 <SystemClock_Config+0xd0>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800177c:	4a20      	ldr	r2, [pc, #128]	; (8001800 <SystemClock_Config+0xd0>)
 800177e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001782:	6013      	str	r3, [r2, #0]
 8001784:	4b1e      	ldr	r3, [pc, #120]	; (8001800 <SystemClock_Config+0xd0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800178c:	607b      	str	r3, [r7, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001790:	2301      	movs	r3, #1
 8001792:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001794:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800179e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017a4:	2304      	movs	r3, #4
 80017a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80017a8:	2348      	movs	r3, #72	; 0x48
 80017aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ac:	2302      	movs	r3, #2
 80017ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017b0:	2303      	movs	r3, #3
 80017b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017b4:	f107 0320 	add.w	r3, r7, #32
 80017b8:	4618      	mov	r0, r3
 80017ba:	f003 f995 	bl	8004ae8 <HAL_RCC_OscConfig>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80017c4:	f000 f81e 	bl	8001804 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017c8:	230f      	movs	r3, #15
 80017ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017cc:	2302      	movs	r3, #2
 80017ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017da:	2300      	movs	r3, #0
 80017dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017de:	f107 030c 	add.w	r3, r7, #12
 80017e2:	2102      	movs	r1, #2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f003 fbef 	bl	8004fc8 <HAL_RCC_ClockConfig>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017f0:	f000 f808 	bl	8001804 <Error_Handler>
  }
}
 80017f4:	bf00      	nop
 80017f6:	3750      	adds	r7, #80	; 0x50
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	40023800 	.word	0x40023800
 8001800:	40007000 	.word	0x40007000

08001804 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	4b10      	ldr	r3, [pc, #64]	; (8001860 <HAL_MspInit+0x4c>)
 8001820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001822:	4a0f      	ldr	r2, [pc, #60]	; (8001860 <HAL_MspInit+0x4c>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6453      	str	r3, [r2, #68]	; 0x44
 800182a:	4b0d      	ldr	r3, [pc, #52]	; (8001860 <HAL_MspInit+0x4c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	607b      	str	r3, [r7, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	603b      	str	r3, [r7, #0]
 800183a:	4b09      	ldr	r3, [pc, #36]	; (8001860 <HAL_MspInit+0x4c>)
 800183c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183e:	4a08      	ldr	r2, [pc, #32]	; (8001860 <HAL_MspInit+0x4c>)
 8001840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001844:	6413      	str	r3, [r2, #64]	; 0x40
 8001846:	4b06      	ldr	r3, [pc, #24]	; (8001860 <HAL_MspInit+0x4c>)
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800184e:	603b      	str	r3, [r7, #0]
 8001850:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800

08001864 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <MemManage_Handler+0x4>

0800187e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001882:	e7fe      	b.n	8001882 <BusFault_Handler+0x4>

08001884 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001888:	e7fe      	b.n	8001888 <UsageFault_Handler+0x4>

0800188a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 fb1a 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 80018c4:	4802      	ldr	r0, [pc, #8]	; (80018d0 <DMA1_Stream5_IRQHandler+0x10>)
 80018c6:	f001 f9c7 	bl	8002c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80018ca:	bf00      	nop
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	200002c4 	.word	0x200002c4

080018d4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 80018d8:	4802      	ldr	r0, [pc, #8]	; (80018e4 <DMA1_Stream6_IRQHandler+0x10>)
 80018da:	f001 f9bd 	bl	8002c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80018de:	bf00      	nop
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000338 	.word	0x20000338

080018e8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <USART1_IRQHandler+0x10>)
 80018ee:	f004 f953 	bl	8005b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000874 	.word	0x20000874

080018fc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <USART2_IRQHandler+0x10>)
 8001902:	f004 f949 	bl	8005b98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200008b4 	.word	0x200008b4

08001910 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <DMA2_Stream2_IRQHandler+0x10>)
 8001916:	f001 f99f 	bl	8002c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	20000814 	.word	0x20000814

08001924 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <OTG_FS_IRQHandler+0x10>)
 800192a:	f002 f8aa 	bl	8003a82 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20001dc8 	.word	0x20001dc8

08001938 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <DMA2_Stream7_IRQHandler+0x10>)
 800193e:	f001 f98b 	bl	8002c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200007b4 	.word	0x200007b4

0800194c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <_sbrk+0x50>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d102      	bne.n	8001962 <_sbrk+0x16>
		heap_end = &end;
 800195c:	4b0f      	ldr	r3, [pc, #60]	; (800199c <_sbrk+0x50>)
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <_sbrk+0x54>)
 8001960:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <_sbrk+0x50>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <_sbrk+0x50>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	466a      	mov	r2, sp
 8001972:	4293      	cmp	r3, r2
 8001974:	d907      	bls.n	8001986 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001976:	f008 fb7f 	bl	800a078 <__errno>
 800197a:	4602      	mov	r2, r0
 800197c:	230c      	movs	r3, #12
 800197e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001980:	f04f 33ff 	mov.w	r3, #4294967295
 8001984:	e006      	b.n	8001994 <_sbrk+0x48>
	}

	heap_end += incr;
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <_sbrk+0x50>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4413      	add	r3, r2
 800198e:	4a03      	ldr	r2, [pc, #12]	; (800199c <_sbrk+0x50>)
 8001990:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001992:	68fb      	ldr	r3, [r7, #12]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	20000224 	.word	0x20000224
 80019a0:	200021d8 	.word	0x200021d8

080019a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <SystemInit+0x28>)
 80019aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ae:	4a07      	ldr	r2, [pc, #28]	; (80019cc <SystemInit+0x28>)
 80019b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80019b8:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SystemInit+0x28>)
 80019ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019be:	609a      	str	r2, [r3, #8]
#endif
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019d6:	f107 0308 	add.w	r3, r7, #8
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	605a      	str	r2, [r3, #4]
 80019e0:	609a      	str	r2, [r3, #8]
 80019e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e4:	463b      	mov	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 80019ec:	4b1d      	ldr	r3, [pc, #116]	; (8001a64 <MX_TIM2_Init+0x94>)
 80019ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1;
 80019f4:	4b1b      	ldr	r3, [pc, #108]	; (8001a64 <MX_TIM2_Init+0x94>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fa:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM2_Init+0x94>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8001a00:	4b18      	ldr	r3, [pc, #96]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a06:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001a0c:	4b15      	ldr	r3, [pc, #84]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a0e:	2280      	movs	r2, #128	; 0x80
 8001a10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a12:	4814      	ldr	r0, [pc, #80]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a14:	f003 fcca 	bl	80053ac <HAL_TIM_Base_Init>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d001      	beq.n	8001a22 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8001a1e:	f7ff fef1 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a26:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	480d      	ldr	r0, [pc, #52]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a30:	f003 fd0b 	bl	800544a <HAL_TIM_ConfigClockSource>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8001a3a:	f7ff fee3 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a42:	2300      	movs	r3, #0
 8001a44:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a46:	463b      	mov	r3, r7
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4806      	ldr	r0, [pc, #24]	; (8001a64 <MX_TIM2_Init+0x94>)
 8001a4c:	f003 feee 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8001a56:	f7ff fed5 	bl	8001804 <Error_Handler>
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3718      	adds	r7, #24
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000774 	.word	0x20000774

08001a68 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0308 	add.w	r3, r7, #8
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a7c:	463b      	mov	r3, r7
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
 8001a82:	605a      	str	r2, [r3, #4]

  htim4.Instance = TIM4;
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001a86:	4a1d      	ldr	r2, [pc, #116]	; (8001afc <MX_TIM4_Init+0x94>)
 8001a88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 8001a8a:	4b1b      	ldr	r3, [pc, #108]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b19      	ldr	r3, [pc, #100]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 8001a96:	4b18      	ldr	r3, [pc, #96]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001a98:	2201      	movs	r2, #1
 8001a9a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b16      	ldr	r3, [pc, #88]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001aa2:	4b15      	ldr	r3, [pc, #84]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001aa8:	4813      	ldr	r0, [pc, #76]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001aaa:	f003 fc7f 	bl	80053ac <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM4_Init+0x50>
  {
    Error_Handler();
 8001ab4:	f7ff fea6 	bl	8001804 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001abe:	f107 0308 	add.w	r3, r7, #8
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	480c      	ldr	r0, [pc, #48]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001ac6:	f003 fcc0 	bl	800544a <HAL_TIM_ConfigClockSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001ad0:	f7ff fe98 	bl	8001804 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ad4:	2320      	movs	r3, #32
 8001ad6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001adc:	463b      	mov	r3, r7
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4805      	ldr	r0, [pc, #20]	; (8001af8 <MX_TIM4_Init+0x90>)
 8001ae2:	f003 fea3 	bl	800582c <HAL_TIMEx_MasterConfigSynchronization>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 8001aec:	f7ff fe8a 	bl	8001804 <Error_Handler>
  }

}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000734 	.word	0x20000734
 8001afc:	40000800 	.word	0x40000800

08001b00 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b10:	d10e      	bne.n	8001b30 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b13      	ldr	r3, [pc, #76]	; (8001b64 <HAL_TIM_Base_MspInit+0x64>)
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	4a12      	ldr	r2, [pc, #72]	; (8001b64 <HAL_TIM_Base_MspInit+0x64>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	6413      	str	r3, [r2, #64]	; 0x40
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_TIM_Base_MspInit+0x64>)
 8001b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b26:	f003 0301 	and.w	r3, r3, #1
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001b2e:	e012      	b.n	8001b56 <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM4)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0c      	ldr	r2, [pc, #48]	; (8001b68 <HAL_TIM_Base_MspInit+0x68>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10d      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <HAL_TIM_Base_MspInit+0x64>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	4a08      	ldr	r2, [pc, #32]	; (8001b64 <HAL_TIM_Base_MspInit+0x64>)
 8001b44:	f043 0304 	orr.w	r3, r3, #4
 8001b48:	6413      	str	r3, [r2, #64]	; 0x40
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <HAL_TIM_Base_MspInit+0x64>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f003 0304 	and.w	r3, r3, #4
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40000800 	.word	0x40000800

08001b6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001b70:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <MX_USART1_UART_Init+0x50>)
 8001b74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8a:	4b0b      	ldr	r3, [pc, #44]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b90:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b92:	220c      	movs	r2, #12
 8001b94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b9c:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba2:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <MX_USART1_UART_Init+0x4c>)
 8001ba4:	f003 febe 	bl	8005924 <HAL_UART_Init>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bae:	f7ff fe29 	bl	8001804 <Error_Handler>
  }

}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000874 	.word	0x20000874
 8001bbc:	40011000 	.word	0x40011000

08001bc0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8001bc4:	4b11      	ldr	r3, [pc, #68]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bc6:	4a12      	ldr	r2, [pc, #72]	; (8001c10 <MX_USART2_UART_Init+0x50>)
 8001bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001bca:	4b10      	ldr	r3, [pc, #64]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001bd2:	4b0e      	ldr	r3, [pc, #56]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_2;
 8001bd8:	4b0c      	ldr	r3, [pc, #48]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bde:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001be0:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001be6:	4b09      	ldr	r3, [pc, #36]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001be8:	220c      	movs	r2, #12
 8001bea:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bec:	4b07      	ldr	r3, [pc, #28]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bf2:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bf8:	4804      	ldr	r0, [pc, #16]	; (8001c0c <MX_USART2_UART_Init+0x4c>)
 8001bfa:	f003 fe93 	bl	8005924 <HAL_UART_Init>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
 8001c04:	f7ff fdfe 	bl	8001804 <Error_Handler>
  }

}
 8001c08:	bf00      	nop
 8001c0a:	bd80      	pop	{r7, pc}
 8001c0c:	200008b4 	.word	0x200008b4
 8001c10:	40004400 	.word	0x40004400

08001c14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b08c      	sub	sp, #48	; 0x30
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c1c:	f107 031c 	add.w	r3, r7, #28
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4a69      	ldr	r2, [pc, #420]	; (8001dd8 <HAL_UART_MspInit+0x1c4>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	f040 8092 	bne.w	8001d5c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	4b67      	ldr	r3, [pc, #412]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c40:	4a66      	ldr	r2, [pc, #408]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001c42:	f043 0310 	orr.w	r3, r3, #16
 8001c46:	6453      	str	r3, [r2, #68]	; 0x44
 8001c48:	4b64      	ldr	r3, [pc, #400]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	61bb      	str	r3, [r7, #24]
 8001c52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	4b60      	ldr	r3, [pc, #384]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	4a5f      	ldr	r2, [pc, #380]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6313      	str	r3, [r2, #48]	; 0x30
 8001c64:	4b5d      	ldr	r3, [pc, #372]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c70:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c82:	2307      	movs	r3, #7
 8001c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	4854      	ldr	r0, [pc, #336]	; (8001de0 <HAL_UART_MspInit+0x1cc>)
 8001c8e:	f001 fa4b 	bl	8003128 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001c92:	4b54      	ldr	r3, [pc, #336]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001c94:	4a54      	ldr	r2, [pc, #336]	; (8001de8 <HAL_UART_MspInit+0x1d4>)
 8001c96:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001c98:	4b52      	ldr	r3, [pc, #328]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001c9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c9e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ca0:	4b50      	ldr	r3, [pc, #320]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ca6:	4b4f      	ldr	r3, [pc, #316]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cac:	4b4d      	ldr	r3, [pc, #308]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cb2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cb4:	4b4b      	ldr	r3, [pc, #300]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cba:	4b4a      	ldr	r3, [pc, #296]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001cc0:	4b48      	ldr	r3, [pc, #288]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ccc:	4b45      	ldr	r3, [pc, #276]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8001cd2:	4844      	ldr	r0, [pc, #272]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001cd4:	f000 fe98 	bl	8002a08 <HAL_DMA_Init>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d001      	beq.n	8001ce2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8001cde:	f7ff fd91 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a3f      	ldr	r2, [pc, #252]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001ce6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ce8:	4a3e      	ldr	r2, [pc, #248]	; (8001de4 <HAL_UART_MspInit+0x1d0>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001cee:	4b3f      	ldr	r3, [pc, #252]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001cf0:	4a3f      	ldr	r2, [pc, #252]	; (8001df0 <HAL_UART_MspInit+0x1dc>)
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001cf4:	4b3d      	ldr	r3, [pc, #244]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001cf6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001cfa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001cfc:	4b3b      	ldr	r3, [pc, #236]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001cfe:	2240      	movs	r2, #64	; 0x40
 8001d00:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d02:	4b3a      	ldr	r3, [pc, #232]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d04:	2200      	movs	r2, #0
 8001d06:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d08:	4b38      	ldr	r3, [pc, #224]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d10:	4b36      	ldr	r3, [pc, #216]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d16:	4b35      	ldr	r3, [pc, #212]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001d1c:	4b33      	ldr	r3, [pc, #204]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d22:	4b32      	ldr	r3, [pc, #200]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d28:	4b30      	ldr	r3, [pc, #192]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001d2e:	482f      	ldr	r0, [pc, #188]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d30:	f000 fe6a 	bl	8002a08 <HAL_DMA_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8001d3a:	f7ff fd63 	bl	8001804 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a2a      	ldr	r2, [pc, #168]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d42:	631a      	str	r2, [r3, #48]	; 0x30
 8001d44:	4a29      	ldr	r2, [pc, #164]	; (8001dec <HAL_UART_MspInit+0x1d8>)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2025      	movs	r0, #37	; 0x25
 8001d50:	f000 fc5d 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d54:	2025      	movs	r0, #37	; 0x25
 8001d56:	f000 fc76 	bl	8002646 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d5a:	e038      	b.n	8001dce <HAL_UART_MspInit+0x1ba>
  else if(uartHandle->Instance==USART2)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <HAL_UART_MspInit+0x1e0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d133      	bne.n	8001dce <HAL_UART_MspInit+0x1ba>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d74:	6413      	str	r3, [r2, #64]	; 0x40
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b15      	ldr	r3, [pc, #84]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a14      	ldr	r2, [pc, #80]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001d8c:	f043 0301 	orr.w	r3, r3, #1
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b12      	ldr	r3, [pc, #72]	; (8001ddc <HAL_UART_MspInit+0x1c8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0301 	and.w	r3, r3, #1
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d9e:	230c      	movs	r3, #12
 8001da0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da2:	2302      	movs	r3, #2
 8001da4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da6:	2300      	movs	r3, #0
 8001da8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001daa:	2303      	movs	r3, #3
 8001dac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001dae:	2307      	movs	r3, #7
 8001db0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db2:	f107 031c 	add.w	r3, r7, #28
 8001db6:	4619      	mov	r1, r3
 8001db8:	4809      	ldr	r0, [pc, #36]	; (8001de0 <HAL_UART_MspInit+0x1cc>)
 8001dba:	f001 f9b5 	bl	8003128 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	2026      	movs	r0, #38	; 0x26
 8001dc4:	f000 fc23 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001dc8:	2026      	movs	r0, #38	; 0x26
 8001dca:	f000 fc3c 	bl	8002646 <HAL_NVIC_EnableIRQ>
}
 8001dce:	bf00      	nop
 8001dd0:	3730      	adds	r7, #48	; 0x30
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	40011000 	.word	0x40011000
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020000 	.word	0x40020000
 8001de4:	20000814 	.word	0x20000814
 8001de8:	40026440 	.word	0x40026440
 8001dec:	200007b4 	.word	0x200007b4
 8001df0:	400264b8 	.word	0x400264b8
 8001df4:	40004400 	.word	0x40004400

08001df8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001df8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e30 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001dfc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001dfe:	e003      	b.n	8001e08 <LoopCopyDataInit>

08001e00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e06:	3104      	adds	r1, #4

08001e08 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e08:	480b      	ldr	r0, [pc, #44]	; (8001e38 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e0a:	4b0c      	ldr	r3, [pc, #48]	; (8001e3c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e10:	d3f6      	bcc.n	8001e00 <CopyDataInit>
  ldr  r2, =_sbss
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e14:	e002      	b.n	8001e1c <LoopFillZerobss>

08001e16 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e16:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e18:	f842 3b04 	str.w	r3, [r2], #4

08001e1c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e20:	d3f9      	bcc.n	8001e16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e22:	f7ff fdbf 	bl	80019a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f008 f92d 	bl	800a084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e2a:	f7ff fc29 	bl	8001680 <main>
  bx  lr    
 8001e2e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e30:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e34:	0800b510 	.word	0x0800b510
  ldr  r0, =_sdata
 8001e38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e3c:	20000208 	.word	0x20000208
  ldr  r2, =_sbss
 8001e40:	20000208 	.word	0x20000208
  ldr  r3, = _ebss
 8001e44:	200021d4 	.word	0x200021d4

08001e48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC_IRQHandler>
	...

08001e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e50:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <HAL_Init+0x40>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a0d      	ldr	r2, [pc, #52]	; (8001e8c <HAL_Init+0x40>)
 8001e56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <HAL_Init+0x40>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a0a      	ldr	r2, [pc, #40]	; (8001e8c <HAL_Init+0x40>)
 8001e62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e68:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <HAL_Init+0x40>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <HAL_Init+0x40>)
 8001e6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e74:	2003      	movs	r0, #3
 8001e76:	f000 fbbf 	bl	80025f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f808 	bl	8001e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e80:	f7ff fcc8 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023c00 	.word	0x40023c00

08001e90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_InitTick+0x54>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	4b12      	ldr	r3, [pc, #72]	; (8001ee8 <HAL_InitTick+0x58>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f000 fbd7 	bl	8002662 <HAL_SYSTICK_Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00e      	b.n	8001edc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0f      	cmp	r3, #15
 8001ec2:	d80a      	bhi.n	8001eda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	6879      	ldr	r1, [r7, #4]
 8001ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ecc:	f000 fb9f 	bl	800260e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ed0:	4a06      	ldr	r2, [pc, #24]	; (8001eec <HAL_InitTick+0x5c>)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	e000      	b.n	8001edc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3708      	adds	r7, #8
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	20000024 	.word	0x20000024
 8001ee8:	2000002c 	.word	0x2000002c
 8001eec:	20000028 	.word	0x20000028

08001ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b06      	ldr	r3, [pc, #24]	; (8001f10 <HAL_IncTick+0x20>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	4b06      	ldr	r3, [pc, #24]	; (8001f14 <HAL_IncTick+0x24>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4413      	add	r3, r2
 8001f00:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <HAL_IncTick+0x24>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	2000002c 	.word	0x2000002c
 8001f14:	200008f4 	.word	0x200008f4

08001f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_GetTick+0x14>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
}
 8001f20:	4618      	mov	r0, r3
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	200008f4 	.word	0x200008f4

08001f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f38:	f7ff ffee 	bl	8001f18 <HAL_GetTick>
 8001f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f48:	d005      	beq.n	8001f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f4a:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_Delay+0x40>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	461a      	mov	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4413      	add	r3, r2
 8001f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f56:	bf00      	nop
 8001f58:	f7ff ffde 	bl	8001f18 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d8f7      	bhi.n	8001f58 <HAL_Delay+0x28>
  {
  }
}
 8001f68:	bf00      	nop
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	2000002c 	.word	0x2000002c

08001f74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e033      	b.n	8001ff2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d109      	bne.n	8001fa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f7fe ffee 	bl	8000f74 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fba:	f023 0302 	bic.w	r3, r3, #2
 8001fbe:	f043 0202 	orr.w	r2, r3, #2
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f94a 	bl	8002260 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2200      	movs	r2, #0
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f023 0303 	bic.w	r3, r3, #3
 8001fda:	f043 0201 	orr.w	r2, r3, #1
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	641a      	str	r2, [r3, #64]	; 0x40
 8001fe2:	e001      	b.n	8001fe8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3710      	adds	r7, #16
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
	...

08001ffc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b085      	sub	sp, #20
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002006:	2300      	movs	r3, #0
 8002008:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1c>
 8002014:	2302      	movs	r3, #2
 8002016:	e113      	b.n	8002240 <HAL_ADC_ConfigChannel+0x244>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2201      	movs	r2, #1
 800201c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2b09      	cmp	r3, #9
 8002026:	d925      	bls.n	8002074 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	68d9      	ldr	r1, [r3, #12]
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	4613      	mov	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	4413      	add	r3, r2
 800203c:	3b1e      	subs	r3, #30
 800203e:	2207      	movs	r2, #7
 8002040:	fa02 f303 	lsl.w	r3, r2, r3
 8002044:	43da      	mvns	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	400a      	ands	r2, r1
 800204c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	68d9      	ldr	r1, [r3, #12]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	b29b      	uxth	r3, r3
 800205e:	4618      	mov	r0, r3
 8002060:	4603      	mov	r3, r0
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	4403      	add	r3, r0
 8002066:	3b1e      	subs	r3, #30
 8002068:	409a      	lsls	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	e022      	b.n	80020ba <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6919      	ldr	r1, [r3, #16]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	2207      	movs	r2, #7
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	400a      	ands	r2, r1
 8002096:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6919      	ldr	r1, [r3, #16]
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	4618      	mov	r0, r3
 80020aa:	4603      	mov	r3, r0
 80020ac:	005b      	lsls	r3, r3, #1
 80020ae:	4403      	add	r3, r0
 80020b0:	409a      	lsls	r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d824      	bhi.n	800210c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	685a      	ldr	r2, [r3, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	4413      	add	r3, r2
 80020d2:	3b05      	subs	r3, #5
 80020d4:	221f      	movs	r2, #31
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	400a      	ands	r2, r1
 80020e2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	4618      	mov	r0, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	3b05      	subs	r3, #5
 80020fe:	fa00 f203 	lsl.w	r2, r0, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
 800210a:	e04c      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	2b0c      	cmp	r3, #12
 8002112:	d824      	bhi.n	800215e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685a      	ldr	r2, [r3, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	009b      	lsls	r3, r3, #2
 8002122:	4413      	add	r3, r2
 8002124:	3b23      	subs	r3, #35	; 0x23
 8002126:	221f      	movs	r2, #31
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	43da      	mvns	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	400a      	ands	r2, r1
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	b29b      	uxth	r3, r3
 8002142:	4618      	mov	r0, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685a      	ldr	r2, [r3, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	3b23      	subs	r3, #35	; 0x23
 8002150:	fa00 f203 	lsl.w	r2, r0, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
 800215c:	e023      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	3b41      	subs	r3, #65	; 0x41
 8002170:	221f      	movs	r2, #31
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	400a      	ands	r2, r1
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4618      	mov	r0, r3
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	4413      	add	r3, r2
 8002198:	3b41      	subs	r3, #65	; 0x41
 800219a:	fa00 f203 	lsl.w	r2, r0, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_ADC_ConfigChannel+0x250>)
 80021a8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a28      	ldr	r2, [pc, #160]	; (8002250 <HAL_ADC_ConfigChannel+0x254>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d10f      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1d8>
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2b12      	cmp	r3, #18
 80021ba:	d10b      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1d      	ldr	r2, [pc, #116]	; (8002250 <HAL_ADC_ConfigChannel+0x254>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d12b      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x23a>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1c      	ldr	r2, [pc, #112]	; (8002254 <HAL_ADC_ConfigChannel+0x258>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d003      	beq.n	80021f0 <HAL_ADC_ConfigChannel+0x1f4>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b11      	cmp	r3, #17
 80021ee:	d122      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a11      	ldr	r2, [pc, #68]	; (8002254 <HAL_ADC_ConfigChannel+0x258>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d111      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_ADC_ConfigChannel+0x25c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4a11      	ldr	r2, [pc, #68]	; (800225c <HAL_ADC_ConfigChannel+0x260>)
 8002218:	fba2 2303 	umull	r2, r3, r2, r3
 800221c:	0c9a      	lsrs	r2, r3, #18
 800221e:	4613      	mov	r3, r2
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	005b      	lsls	r3, r3, #1
 8002226:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002228:	e002      	b.n	8002230 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	3b01      	subs	r3, #1
 800222e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d1f9      	bne.n	800222a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3714      	adds	r7, #20
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr
 800224c:	40012300 	.word	0x40012300
 8002250:	40012000 	.word	0x40012000
 8002254:	10000012 	.word	0x10000012
 8002258:	20000024 	.word	0x20000024
 800225c:	431bde83 	.word	0x431bde83

08002260 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002268:	4b79      	ldr	r3, [pc, #484]	; (8002450 <ADC_Init+0x1f0>)
 800226a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	685a      	ldr	r2, [r3, #4]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	431a      	orrs	r2, r3
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685a      	ldr	r2, [r3, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002294:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6859      	ldr	r1, [r3, #4]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	691b      	ldr	r3, [r3, #16]
 80022a0:	021a      	lsls	r2, r3, #8
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	430a      	orrs	r2, r1
 80022a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	685a      	ldr	r2, [r3, #4]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	6859      	ldr	r1, [r3, #4]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	430a      	orrs	r2, r1
 80022ca:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	689a      	ldr	r2, [r3, #8]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6899      	ldr	r1, [r3, #8]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68da      	ldr	r2, [r3, #12]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022f2:	4a58      	ldr	r2, [pc, #352]	; (8002454 <ADC_Init+0x1f4>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d022      	beq.n	800233e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002306:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6899      	ldr	r1, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	689a      	ldr	r2, [r3, #8]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002328:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6899      	ldr	r1, [r3, #8]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	609a      	str	r2, [r3, #8]
 800233c:	e00f      	b.n	800235e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800234c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800235c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f022 0202 	bic.w	r2, r2, #2
 800236c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6899      	ldr	r1, [r3, #8]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	7e1b      	ldrb	r3, [r3, #24]
 8002378:	005a      	lsls	r2, r3, #1
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d01b      	beq.n	80023c4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023aa:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6859      	ldr	r1, [r3, #4]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b6:	3b01      	subs	r3, #1
 80023b8:	035a      	lsls	r2, r3, #13
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	430a      	orrs	r2, r1
 80023c0:	605a      	str	r2, [r3, #4]
 80023c2:	e007      	b.n	80023d4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023d2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80023e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69db      	ldr	r3, [r3, #28]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	051a      	lsls	r2, r3, #20
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002416:	025a      	lsls	r2, r3, #9
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	430a      	orrs	r2, r1
 800241e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	689a      	ldr	r2, [r3, #8]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800242e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	6899      	ldr	r1, [r3, #8]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	029a      	lsls	r2, r3, #10
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	430a      	orrs	r2, r1
 8002442:	609a      	str	r2, [r3, #8]
}
 8002444:	bf00      	nop
 8002446:	3714      	adds	r7, #20
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr
 8002450:	40012300 	.word	0x40012300
 8002454:	0f000001 	.word	0x0f000001

08002458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002468:	4b0c      	ldr	r3, [pc, #48]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002474:	4013      	ands	r3, r2
 8002476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002480:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800248a:	4a04      	ldr	r2, [pc, #16]	; (800249c <__NVIC_SetPriorityGrouping+0x44>)
 800248c:	68bb      	ldr	r3, [r7, #8]
 800248e:	60d3      	str	r3, [r2, #12]
}
 8002490:	bf00      	nop
 8002492:	3714      	adds	r7, #20
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024a4:	4b04      	ldr	r3, [pc, #16]	; (80024b8 <__NVIC_GetPriorityGrouping+0x18>)
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	0a1b      	lsrs	r3, r3, #8
 80024aa:	f003 0307 	and.w	r3, r3, #7
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	4603      	mov	r3, r0
 80024c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	db0b      	blt.n	80024e6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ce:	79fb      	ldrb	r3, [r7, #7]
 80024d0:	f003 021f 	and.w	r2, r3, #31
 80024d4:	4907      	ldr	r1, [pc, #28]	; (80024f4 <__NVIC_EnableIRQ+0x38>)
 80024d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024da:	095b      	lsrs	r3, r3, #5
 80024dc:	2001      	movs	r0, #1
 80024de:	fa00 f202 	lsl.w	r2, r0, r2
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000e100 	.word	0xe000e100

080024f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002508:	2b00      	cmp	r3, #0
 800250a:	db0a      	blt.n	8002522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	b2da      	uxtb	r2, r3
 8002510:	490c      	ldr	r1, [pc, #48]	; (8002544 <__NVIC_SetPriority+0x4c>)
 8002512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002516:	0112      	lsls	r2, r2, #4
 8002518:	b2d2      	uxtb	r2, r2
 800251a:	440b      	add	r3, r1
 800251c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002520:	e00a      	b.n	8002538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	b2da      	uxtb	r2, r3
 8002526:	4908      	ldr	r1, [pc, #32]	; (8002548 <__NVIC_SetPriority+0x50>)
 8002528:	79fb      	ldrb	r3, [r7, #7]
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	3b04      	subs	r3, #4
 8002530:	0112      	lsls	r2, r2, #4
 8002532:	b2d2      	uxtb	r2, r2
 8002534:	440b      	add	r3, r1
 8002536:	761a      	strb	r2, [r3, #24]
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	e000e100 	.word	0xe000e100
 8002548:	e000ed00 	.word	0xe000ed00

0800254c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800254c:	b480      	push	{r7}
 800254e:	b089      	sub	sp, #36	; 0x24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	f1c3 0307 	rsb	r3, r3, #7
 8002566:	2b04      	cmp	r3, #4
 8002568:	bf28      	it	cs
 800256a:	2304      	movcs	r3, #4
 800256c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3304      	adds	r3, #4
 8002572:	2b06      	cmp	r3, #6
 8002574:	d902      	bls.n	800257c <NVIC_EncodePriority+0x30>
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	3b03      	subs	r3, #3
 800257a:	e000      	b.n	800257e <NVIC_EncodePriority+0x32>
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002580:	f04f 32ff 	mov.w	r2, #4294967295
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	401a      	ands	r2, r3
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002594:	f04f 31ff 	mov.w	r1, #4294967295
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	43d9      	mvns	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025a4:	4313      	orrs	r3, r2
         );
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3724      	adds	r7, #36	; 0x24
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
	...

080025b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3b01      	subs	r3, #1
 80025c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025c4:	d301      	bcc.n	80025ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025c6:	2301      	movs	r3, #1
 80025c8:	e00f      	b.n	80025ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025ca:	4a0a      	ldr	r2, [pc, #40]	; (80025f4 <SysTick_Config+0x40>)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	3b01      	subs	r3, #1
 80025d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025d2:	210f      	movs	r1, #15
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	f7ff ff8e 	bl	80024f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <SysTick_Config+0x40>)
 80025de:	2200      	movs	r2, #0
 80025e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025e2:	4b04      	ldr	r3, [pc, #16]	; (80025f4 <SysTick_Config+0x40>)
 80025e4:	2207      	movs	r2, #7
 80025e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000e010 	.word	0xe000e010

080025f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7ff ff29 	bl	8002458 <__NVIC_SetPriorityGrouping>
}
 8002606:	bf00      	nop
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800260e:	b580      	push	{r7, lr}
 8002610:	b086      	sub	sp, #24
 8002612:	af00      	add	r7, sp, #0
 8002614:	4603      	mov	r3, r0
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
 800261a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002620:	f7ff ff3e 	bl	80024a0 <__NVIC_GetPriorityGrouping>
 8002624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002626:	687a      	ldr	r2, [r7, #4]
 8002628:	68b9      	ldr	r1, [r7, #8]
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f7ff ff8e 	bl	800254c <NVIC_EncodePriority>
 8002630:	4602      	mov	r2, r0
 8002632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002636:	4611      	mov	r1, r2
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ff5d 	bl	80024f8 <__NVIC_SetPriority>
}
 800263e:	bf00      	nop
 8002640:	3718      	adds	r7, #24
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}

08002646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002646:	b580      	push	{r7, lr}
 8002648:	b082      	sub	sp, #8
 800264a:	af00      	add	r7, sp, #0
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff31 	bl	80024bc <__NVIC_EnableIRQ>
}
 800265a:	bf00      	nop
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f7ff ffa2 	bl	80025b4 <SysTick_Config>
 8002670:	4603      	mov	r3, r0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3708      	adds	r7, #8
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}

0800267a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800267a:	b580      	push	{r7, lr}
 800267c:	b082      	sub	sp, #8
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e014      	b.n	80026b6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	791b      	ldrb	r3, [r3, #4]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d105      	bne.n	80026a2 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	2200      	movs	r2, #0
 800269a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f7fe fd13 	bl	80010c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2202      	movs	r2, #2
 80026a6:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80026b4:	2300      	movs	r3, #0
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}
	...

080026c0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_L: 12bit left data alignment selected
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t* pData, uint32_t Length, uint32_t Alignment)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	795b      	ldrb	r3, [r3, #5]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d101      	bne.n	80026de <HAL_DAC_Start_DMA+0x1e>
 80026da:	2302      	movs	r3, #2
 80026dc:	e08e      	b.n	80027fc <HAL_DAC_Start_DMA+0x13c>
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2201      	movs	r2, #1
 80026e2:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	2202      	movs	r2, #2
 80026e8:	711a      	strb	r2, [r3, #4]

  if(Channel == DAC_CHANNEL_1)
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d12a      	bne.n	8002746 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a43      	ldr	r2, [pc, #268]	; (8002804 <HAL_DAC_Start_DMA+0x144>)
 80026f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	4a42      	ldr	r2, [pc, #264]	; (8002808 <HAL_DAC_Start_DMA+0x148>)
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a41      	ldr	r2, [pc, #260]	; (800280c <HAL_DAC_Start_DMA+0x14c>)
 8002706:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN1;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002716:	601a      	str	r2, [r3, #0]
    
    /* Case of use of channel 1 */
    switch(Alignment)
 8002718:	6a3b      	ldr	r3, [r7, #32]
 800271a:	2b04      	cmp	r3, #4
 800271c:	d009      	beq.n	8002732 <HAL_DAC_Start_DMA+0x72>
 800271e:	2b08      	cmp	r3, #8
 8002720:	d00c      	beq.n	800273c <HAL_DAC_Start_DMA+0x7c>
 8002722:	2b00      	cmp	r3, #0
 8002724:	d000      	beq.n	8002728 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8002726:	e039      	b.n	800279c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	3308      	adds	r3, #8
 800272e:	617b      	str	r3, [r7, #20]
        break;
 8002730:	e034      	b.n	800279c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	617b      	str	r3, [r7, #20]
        break;
 800273a:	e02f      	b.n	800279c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	3310      	adds	r3, #16
 8002742:	617b      	str	r3, [r7, #20]
        break;
 8002744:	e02a      	b.n	800279c <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	68db      	ldr	r3, [r3, #12]
 800274a:	4a31      	ldr	r2, [pc, #196]	; (8002810 <HAL_DAC_Start_DMA+0x150>)
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	4a30      	ldr	r2, [pc, #192]	; (8002814 <HAL_DAC_Start_DMA+0x154>)
 8002754:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	4a2f      	ldr	r2, [pc, #188]	; (8002818 <HAL_DAC_Start_DMA+0x158>)
 800275c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    hdac->Instance->CR |= DAC_CR_DMAEN2;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800276c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch(Alignment)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	2b04      	cmp	r3, #4
 8002772:	d009      	beq.n	8002788 <HAL_DAC_Start_DMA+0xc8>
 8002774:	2b08      	cmp	r3, #8
 8002776:	d00c      	beq.n	8002792 <HAL_DAC_Start_DMA+0xd2>
 8002778:	2b00      	cmp	r3, #0
 800277a:	d000      	beq.n	800277e <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800277c:	e00e      	b.n	800279c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3314      	adds	r3, #20
 8002784:	617b      	str	r3, [r7, #20]
        break;
 8002786:	e009      	b.n	800279c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	3318      	adds	r3, #24
 800278e:	617b      	str	r3, [r7, #20]
        break;
 8002790:	e004      	b.n	800279c <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	331c      	adds	r3, #28
 8002798:	617b      	str	r3, [r7, #20]
        break;
 800279a:	bf00      	nop
    }
  }
  
  /* Enable the DMA Stream */
  if(Channel == DAC_CHANNEL_1)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d10f      	bne.n	80027c2 <HAL_DAC_Start_DMA+0x102>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80027b0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6898      	ldr	r0, [r3, #8]
 80027b6:	6879      	ldr	r1, [r7, #4]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	f000 f9d2 	bl	8002b64 <HAL_DMA_Start_IT>
 80027c0:	e00e      	b.n	80027e0 <HAL_DAC_Start_DMA+0x120>
  } 
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027d0:	601a      	str	r2, [r3, #0]
    
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	68d8      	ldr	r0, [r3, #12]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	f000 f9c2 	bl	8002b64 <HAL_DMA_Start_IT>
  }
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	6819      	ldr	r1, [r3, #0]
 80027e6:	2201      	movs	r2, #1
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	430a      	orrs	r2, r1
 80027f2:	601a      	str	r2, [r3, #0]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	2200      	movs	r2, #0
 80027f8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80027fa:	2300      	movs	r3, #0
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	080028f3 	.word	0x080028f3
 8002808:	08002915 	.word	0x08002915
 800280c:	08002931 	.word	0x08002931
 8002810:	0800299b 	.word	0x0800299b
 8002814:	080029bd 	.word	0x080029bd
 8002818:	080029d9 	.word	0x080029d9

0800281c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002858:	b480      	push	{r7}
 800285a:	b087      	sub	sp, #28
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	60b9      	str	r1, [r7, #8]
 8002862:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
 8002868:	2300      	movs	r3, #0
 800286a:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	795b      	ldrb	r3, [r3, #5]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_DAC_ConfigChannel+0x20>
 8002874:	2302      	movs	r3, #2
 8002876:	e036      	b.n	80028e6 <HAL_DAC_ConfigChannel+0x8e>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2201      	movs	r2, #1
 800287c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2202      	movs	r2, #2
 8002882:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800288c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	fa02 f303 	lsl.w	r3, r2, r3
 8002896:	43db      	mvns	r3, r3
 8002898:	697a      	ldr	r2, [r7, #20]
 800289a:	4013      	ands	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	fa02 f303 	lsl.w	r3, r2, r3
 80028b2:	697a      	ldr	r2, [r7, #20]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6819      	ldr	r1, [r3, #0]
 80028c6:	22c0      	movs	r2, #192	; 0xc0
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	400a      	ands	r2, r1
 80028d6:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2201      	movs	r2, #1
 80028dc:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	371c      	adds	r7, #28
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 80028f2:	b580      	push	{r7, lr}
 80028f4:	b084      	sub	sp, #16
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028fe:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f7ff ff8b 	bl	800281c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2201      	movs	r2, #1
 800290a:	711a      	strb	r2, [r3, #4]
}
 800290c:	bf00      	nop
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)   
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002920:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7ff ff84 	bl	8002830 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8002928:	bf00      	nop
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b084      	sub	sp, #16
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800293c:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f043 0204 	orr.w	r2, r3, #4
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac); 
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	f7ff ff7a 	bl	8002844 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	711a      	strb	r2, [r3, #4]
}
 8002956:	bf00      	nop
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}

0800295e <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr

08002986 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdac);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002998:	4770      	bx	lr

0800299a <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b084      	sub	sp, #16
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	60fb      	str	r3, [r7, #12]
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 80029a8:	68f8      	ldr	r0, [r7, #12]
 80029aa:	f7ff ffd8 	bl	800295e <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  
  hdac->State= HAL_DAC_STATE_READY;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2201      	movs	r2, #1
 80029b2:	711a      	strb	r2, [r3, #4]
}
 80029b4:	bf00      	nop
 80029b6:	3710      	adds	r7, #16
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
    DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	60fb      	str	r3, [r7, #12]
    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f7ff ffd1 	bl	8002972 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	60fb      	str	r3, [r7, #12]
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f043 0204 	orr.w	r2, r3, #4
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	611a      	str	r2, [r3, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ffc7 	bl	8002986 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    
  hdac->State= HAL_DAC_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	711a      	strb	r2, [r3, #4]
}
 80029fe:	bf00      	nop
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
	...

08002a08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a10:	2300      	movs	r3, #0
 8002a12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a14:	f7ff fa80 	bl	8001f18 <HAL_GetTick>
 8002a18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d101      	bne.n	8002a24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e099      	b.n	8002b58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2202      	movs	r2, #2
 8002a30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0201 	bic.w	r2, r2, #1
 8002a42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a44:	e00f      	b.n	8002a66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a46:	f7ff fa67 	bl	8001f18 <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	2b05      	cmp	r3, #5
 8002a52:	d908      	bls.n	8002a66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2220      	movs	r2, #32
 8002a58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e078      	b.n	8002b58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1e8      	bne.n	8002a46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a7c:	697a      	ldr	r2, [r7, #20]
 8002a7e:	4b38      	ldr	r3, [pc, #224]	; (8002b60 <HAL_DMA_Init+0x158>)
 8002a80:	4013      	ands	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002aaa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a1b      	ldr	r3, [r3, #32]
 8002ab0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d107      	bne.n	8002ad0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	695b      	ldr	r3, [r3, #20]
 8002ade:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f023 0307 	bic.w	r3, r3, #7
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	d117      	bne.n	8002b2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002afe:	697a      	ldr	r2, [r7, #20]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 fa91 	bl	8003034 <DMA_CheckFifoParam>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d008      	beq.n	8002b2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2240      	movs	r2, #64	; 0x40
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002b26:	2301      	movs	r3, #1
 8002b28:	e016      	b.n	8002b58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	697a      	ldr	r2, [r7, #20]
 8002b30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa48 	bl	8002fc8 <DMA_CalcBaseAndBitshift>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b40:	223f      	movs	r2, #63	; 0x3f
 8002b42:	409a      	lsls	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2201      	movs	r2, #1
 8002b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3718      	adds	r7, #24
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	f010803f 	.word	0xf010803f

08002b64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b086      	sub	sp, #24
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d101      	bne.n	8002b8a <HAL_DMA_Start_IT+0x26>
 8002b86:	2302      	movs	r3, #2
 8002b88:	e040      	b.n	8002c0c <HAL_DMA_Start_IT+0xa8>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d12f      	bne.n	8002bfe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2202      	movs	r2, #2
 8002ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f9da 	bl	8002f6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	223f      	movs	r2, #63	; 0x3f
 8002bbe:	409a      	lsls	r2, r3
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0216 	orr.w	r2, r2, #22
 8002bd2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d007      	beq.n	8002bec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f042 0208 	orr.w	r2, r2, #8
 8002bea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	e005      	b.n	8002c0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c06:	2302      	movs	r3, #2
 8002c08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3718      	adds	r7, #24
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c22:	b2db      	uxtb	r3, r3
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d004      	beq.n	8002c32 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e00c      	b.n	8002c4c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f022 0201 	bic.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	370c      	adds	r7, #12
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c64:	4b92      	ldr	r3, [pc, #584]	; (8002eb0 <HAL_DMA_IRQHandler+0x258>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a92      	ldr	r2, [pc, #584]	; (8002eb4 <HAL_DMA_IRQHandler+0x25c>)
 8002c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c6e:	0a9b      	lsrs	r3, r3, #10
 8002c70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c82:	2208      	movs	r2, #8
 8002c84:	409a      	lsls	r2, r3
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d01a      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 0304 	and.w	r3, r3, #4
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d013      	beq.n	8002cc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0204 	bic.w	r2, r2, #4
 8002caa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb0:	2208      	movs	r2, #8
 8002cb2:	409a      	lsls	r2, r3
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbc:	f043 0201 	orr.w	r2, r3, #1
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc8:	2201      	movs	r2, #1
 8002cca:	409a      	lsls	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d012      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d00b      	beq.n	8002cfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	693b      	ldr	r3, [r7, #16]
 8002cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf2:	f043 0202 	orr.w	r2, r3, #2
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cfe:	2204      	movs	r2, #4
 8002d00:	409a      	lsls	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	4013      	ands	r3, r2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d012      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0302 	and.w	r3, r3, #2
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00b      	beq.n	8002d30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d1c:	2204      	movs	r2, #4
 8002d1e:	409a      	lsls	r2, r3
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d28:	f043 0204 	orr.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	2210      	movs	r2, #16
 8002d36:	409a      	lsls	r2, r3
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d043      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0308 	and.w	r3, r3, #8
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d03c      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d52:	2210      	movs	r2, #16
 8002d54:	409a      	lsls	r2, r3
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d018      	beq.n	8002d9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d108      	bne.n	8002d88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d024      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	4798      	blx	r3
 8002d86:	e01f      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01b      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	4798      	blx	r3
 8002d98:	e016      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d107      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0208 	bic.w	r2, r2, #8
 8002db6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dcc:	2220      	movs	r2, #32
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	f000 808e 	beq.w	8002ef6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f000 8086 	beq.w	8002ef6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	2220      	movs	r2, #32
 8002df0:	409a      	lsls	r2, r3
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b05      	cmp	r3, #5
 8002e00:	d136      	bne.n	8002e70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0216 	bic.w	r2, r2, #22
 8002e10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d103      	bne.n	8002e32 <HAL_DMA_IRQHandler+0x1da>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d007      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0208 	bic.w	r2, r2, #8
 8002e40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	223f      	movs	r2, #63	; 0x3f
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d07d      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	4798      	blx	r3
        }
        return;
 8002e6e:	e078      	b.n	8002f62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d01c      	beq.n	8002eb8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d108      	bne.n	8002e9e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d030      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	4798      	blx	r3
 8002e9c:	e02b      	b.n	8002ef6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d027      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
 8002eae:	e022      	b.n	8002ef6 <HAL_DMA_IRQHandler+0x29e>
 8002eb0:	20000024 	.word	0x20000024
 8002eb4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f022 0210 	bic.w	r2, r2, #16
 8002ed4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d003      	beq.n	8002ef6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d032      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d022      	beq.n	8002f50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2205      	movs	r2, #5
 8002f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f022 0201 	bic.w	r2, r2, #1
 8002f20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	3301      	adds	r3, #1
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	697a      	ldr	r2, [r7, #20]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d307      	bcc.n	8002f3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f2      	bne.n	8002f22 <HAL_DMA_IRQHandler+0x2ca>
 8002f3c:	e000      	b.n	8002f40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002f3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d005      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e000      	b.n	8002f64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002f62:	bf00      	nop
    }
  }
}
 8002f64:	3718      	adds	r7, #24
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop

08002f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b085      	sub	sp, #20
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	607a      	str	r2, [r7, #4]
 8002f78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b40      	cmp	r3, #64	; 0x40
 8002f98:	d108      	bne.n	8002fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002faa:	e007      	b.n	8002fbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	60da      	str	r2, [r3, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3b10      	subs	r3, #16
 8002fd8:	4a14      	ldr	r2, [pc, #80]	; (800302c <DMA_CalcBaseAndBitshift+0x64>)
 8002fda:	fba2 2303 	umull	r2, r3, r2, r3
 8002fde:	091b      	lsrs	r3, r3, #4
 8002fe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fe2:	4a13      	ldr	r2, [pc, #76]	; (8003030 <DMA_CalcBaseAndBitshift+0x68>)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2b03      	cmp	r3, #3
 8002ff4:	d909      	bls.n	800300a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ffe:	f023 0303 	bic.w	r3, r3, #3
 8003002:	1d1a      	adds	r2, r3, #4
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	659a      	str	r2, [r3, #88]	; 0x58
 8003008:	e007      	b.n	800301a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003012:	f023 0303 	bic.w	r3, r3, #3
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800301e:	4618      	mov	r0, r3
 8003020:	3714      	adds	r7, #20
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	aaaaaaab 	.word	0xaaaaaaab
 8003030:	0800b31c 	.word	0x0800b31c

08003034 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	699b      	ldr	r3, [r3, #24]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d11f      	bne.n	800308e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	2b03      	cmp	r3, #3
 8003052:	d855      	bhi.n	8003100 <DMA_CheckFifoParam+0xcc>
 8003054:	a201      	add	r2, pc, #4	; (adr r2, 800305c <DMA_CheckFifoParam+0x28>)
 8003056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305a:	bf00      	nop
 800305c:	0800306d 	.word	0x0800306d
 8003060:	0800307f 	.word	0x0800307f
 8003064:	0800306d 	.word	0x0800306d
 8003068:	08003101 	.word	0x08003101
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003074:	2b00      	cmp	r3, #0
 8003076:	d045      	beq.n	8003104 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800307c:	e042      	b.n	8003104 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003086:	d13f      	bne.n	8003108 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308c:	e03c      	b.n	8003108 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003096:	d121      	bne.n	80030dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d836      	bhi.n	800310c <DMA_CheckFifoParam+0xd8>
 800309e:	a201      	add	r2, pc, #4	; (adr r2, 80030a4 <DMA_CheckFifoParam+0x70>)
 80030a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a4:	080030b5 	.word	0x080030b5
 80030a8:	080030bb 	.word	0x080030bb
 80030ac:	080030b5 	.word	0x080030b5
 80030b0:	080030cd 	.word	0x080030cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	73fb      	strb	r3, [r7, #15]
      break;
 80030b8:	e02f      	b.n	800311a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d024      	beq.n	8003110 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030ca:	e021      	b.n	8003110 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80030d4:	d11e      	bne.n	8003114 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030da:	e01b      	b.n	8003114 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d902      	bls.n	80030e8 <DMA_CheckFifoParam+0xb4>
 80030e2:	2b03      	cmp	r3, #3
 80030e4:	d003      	beq.n	80030ee <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030e6:	e018      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	73fb      	strb	r3, [r7, #15]
      break;
 80030ec:	e015      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d00e      	beq.n	8003118 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	73fb      	strb	r3, [r7, #15]
      break;
 80030fe:	e00b      	b.n	8003118 <DMA_CheckFifoParam+0xe4>
      break;
 8003100:	bf00      	nop
 8003102:	e00a      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      break;
 8003104:	bf00      	nop
 8003106:	e008      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      break;
 8003108:	bf00      	nop
 800310a:	e006      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      break;
 800310c:	bf00      	nop
 800310e:	e004      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      break;
 8003110:	bf00      	nop
 8003112:	e002      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      break;   
 8003114:	bf00      	nop
 8003116:	e000      	b.n	800311a <DMA_CheckFifoParam+0xe6>
      break;
 8003118:	bf00      	nop
    }
  } 
  
  return status; 
 800311a:	7bfb      	ldrb	r3, [r7, #15]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003132:	2300      	movs	r3, #0
 8003134:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800313e:	2300      	movs	r3, #0
 8003140:	61fb      	str	r3, [r7, #28]
 8003142:	e177      	b.n	8003434 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003144:	2201      	movs	r2, #1
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	fa02 f303 	lsl.w	r3, r2, r3
 800314c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	697a      	ldr	r2, [r7, #20]
 8003154:	4013      	ands	r3, r2
 8003156:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	429a      	cmp	r2, r3
 800315e:	f040 8166 	bne.w	800342e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	2b01      	cmp	r3, #1
 8003168:	d00b      	beq.n	8003182 <HAL_GPIO_Init+0x5a>
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d007      	beq.n	8003182 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003176:	2b11      	cmp	r3, #17
 8003178:	d003      	beq.n	8003182 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	2b12      	cmp	r3, #18
 8003180:	d130      	bne.n	80031e4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	689b      	ldr	r3, [r3, #8]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	2203      	movs	r2, #3
 800318e:	fa02 f303 	lsl.w	r3, r2, r3
 8003192:	43db      	mvns	r3, r3
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	4013      	ands	r3, r2
 8003198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	fa02 f303 	lsl.w	r3, r2, r3
 80031a6:	69ba      	ldr	r2, [r7, #24]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80031b8:	2201      	movs	r2, #1
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	091b      	lsrs	r3, r3, #4
 80031ce:	f003 0201 	and.w	r2, r3, #1
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	fa02 f303 	lsl.w	r3, r2, r3
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	4313      	orrs	r3, r2
 80031dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69ba      	ldr	r2, [r7, #24]
 80031e2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	2203      	movs	r2, #3
 80031f0:	fa02 f303 	lsl.w	r3, r2, r3
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	689a      	ldr	r2, [r3, #8]
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	4313      	orrs	r3, r2
 800320c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	2b02      	cmp	r3, #2
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0xfc>
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	2b12      	cmp	r3, #18
 8003222:	d123      	bne.n	800326c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	08da      	lsrs	r2, r3, #3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3208      	adds	r2, #8
 800322c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003230:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	220f      	movs	r2, #15
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	4013      	ands	r3, r2
 8003246:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	691a      	ldr	r2, [r3, #16]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	fa02 f303 	lsl.w	r3, r2, r3
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	4313      	orrs	r3, r2
 800325c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	08da      	lsrs	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	3208      	adds	r2, #8
 8003266:	69b9      	ldr	r1, [r7, #24]
 8003268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	005b      	lsls	r3, r3, #1
 8003276:	2203      	movs	r2, #3
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f003 0203 	and.w	r2, r3, #3
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	f000 80c0 	beq.w	800342e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	60fb      	str	r3, [r7, #12]
 80032b2:	4b65      	ldr	r3, [pc, #404]	; (8003448 <HAL_GPIO_Init+0x320>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	4a64      	ldr	r2, [pc, #400]	; (8003448 <HAL_GPIO_Init+0x320>)
 80032b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032bc:	6453      	str	r3, [r2, #68]	; 0x44
 80032be:	4b62      	ldr	r3, [pc, #392]	; (8003448 <HAL_GPIO_Init+0x320>)
 80032c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80032c6:	60fb      	str	r3, [r7, #12]
 80032c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80032ca:	4a60      	ldr	r2, [pc, #384]	; (800344c <HAL_GPIO_Init+0x324>)
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	089b      	lsrs	r3, r3, #2
 80032d0:	3302      	adds	r3, #2
 80032d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032d8:	69fb      	ldr	r3, [r7, #28]
 80032da:	f003 0303 	and.w	r3, r3, #3
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	220f      	movs	r2, #15
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a57      	ldr	r2, [pc, #348]	; (8003450 <HAL_GPIO_Init+0x328>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d037      	beq.n	8003366 <HAL_GPIO_Init+0x23e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a56      	ldr	r2, [pc, #344]	; (8003454 <HAL_GPIO_Init+0x32c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d031      	beq.n	8003362 <HAL_GPIO_Init+0x23a>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	4a55      	ldr	r2, [pc, #340]	; (8003458 <HAL_GPIO_Init+0x330>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d02b      	beq.n	800335e <HAL_GPIO_Init+0x236>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a54      	ldr	r2, [pc, #336]	; (800345c <HAL_GPIO_Init+0x334>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d025      	beq.n	800335a <HAL_GPIO_Init+0x232>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	4a53      	ldr	r2, [pc, #332]	; (8003460 <HAL_GPIO_Init+0x338>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d01f      	beq.n	8003356 <HAL_GPIO_Init+0x22e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	4a52      	ldr	r2, [pc, #328]	; (8003464 <HAL_GPIO_Init+0x33c>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d019      	beq.n	8003352 <HAL_GPIO_Init+0x22a>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a51      	ldr	r2, [pc, #324]	; (8003468 <HAL_GPIO_Init+0x340>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d013      	beq.n	800334e <HAL_GPIO_Init+0x226>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	4a50      	ldr	r2, [pc, #320]	; (800346c <HAL_GPIO_Init+0x344>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d00d      	beq.n	800334a <HAL_GPIO_Init+0x222>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a4f      	ldr	r2, [pc, #316]	; (8003470 <HAL_GPIO_Init+0x348>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d007      	beq.n	8003346 <HAL_GPIO_Init+0x21e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <HAL_GPIO_Init+0x34c>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d101      	bne.n	8003342 <HAL_GPIO_Init+0x21a>
 800333e:	2309      	movs	r3, #9
 8003340:	e012      	b.n	8003368 <HAL_GPIO_Init+0x240>
 8003342:	230a      	movs	r3, #10
 8003344:	e010      	b.n	8003368 <HAL_GPIO_Init+0x240>
 8003346:	2308      	movs	r3, #8
 8003348:	e00e      	b.n	8003368 <HAL_GPIO_Init+0x240>
 800334a:	2307      	movs	r3, #7
 800334c:	e00c      	b.n	8003368 <HAL_GPIO_Init+0x240>
 800334e:	2306      	movs	r3, #6
 8003350:	e00a      	b.n	8003368 <HAL_GPIO_Init+0x240>
 8003352:	2305      	movs	r3, #5
 8003354:	e008      	b.n	8003368 <HAL_GPIO_Init+0x240>
 8003356:	2304      	movs	r3, #4
 8003358:	e006      	b.n	8003368 <HAL_GPIO_Init+0x240>
 800335a:	2303      	movs	r3, #3
 800335c:	e004      	b.n	8003368 <HAL_GPIO_Init+0x240>
 800335e:	2302      	movs	r3, #2
 8003360:	e002      	b.n	8003368 <HAL_GPIO_Init+0x240>
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_GPIO_Init+0x240>
 8003366:	2300      	movs	r3, #0
 8003368:	69fa      	ldr	r2, [r7, #28]
 800336a:	f002 0203 	and.w	r2, r2, #3
 800336e:	0092      	lsls	r2, r2, #2
 8003370:	4093      	lsls	r3, r2
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4313      	orrs	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003378:	4934      	ldr	r1, [pc, #208]	; (800344c <HAL_GPIO_Init+0x324>)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	089b      	lsrs	r3, r3, #2
 800337e:	3302      	adds	r3, #2
 8003380:	69ba      	ldr	r2, [r7, #24]
 8003382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003386:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_GPIO_Init+0x350>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338c:	693b      	ldr	r3, [r7, #16]
 800338e:	43db      	mvns	r3, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4013      	ands	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033aa:	4a33      	ldr	r2, [pc, #204]	; (8003478 <HAL_GPIO_Init+0x350>)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80033b0:	4b31      	ldr	r3, [pc, #196]	; (8003478 <HAL_GPIO_Init+0x350>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	43db      	mvns	r3, r3
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	4013      	ands	r3, r2
 80033be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033d4:	4a28      	ldr	r2, [pc, #160]	; (8003478 <HAL_GPIO_Init+0x350>)
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033da:	4b27      	ldr	r3, [pc, #156]	; (8003478 <HAL_GPIO_Init+0x350>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	43db      	mvns	r3, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4013      	ands	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	4313      	orrs	r3, r2
 80033fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_GPIO_Init+0x350>)
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003404:	4b1c      	ldr	r3, [pc, #112]	; (8003478 <HAL_GPIO_Init+0x350>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d003      	beq.n	8003428 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4313      	orrs	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003428:	4a13      	ldr	r2, [pc, #76]	; (8003478 <HAL_GPIO_Init+0x350>)
 800342a:	69bb      	ldr	r3, [r7, #24]
 800342c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	3301      	adds	r3, #1
 8003432:	61fb      	str	r3, [r7, #28]
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	2b0f      	cmp	r3, #15
 8003438:	f67f ae84 	bls.w	8003144 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800343c:	bf00      	nop
 800343e:	3724      	adds	r7, #36	; 0x24
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	40023800 	.word	0x40023800
 800344c:	40013800 	.word	0x40013800
 8003450:	40020000 	.word	0x40020000
 8003454:	40020400 	.word	0x40020400
 8003458:	40020800 	.word	0x40020800
 800345c:	40020c00 	.word	0x40020c00
 8003460:	40021000 	.word	0x40021000
 8003464:	40021400 	.word	0x40021400
 8003468:	40021800 	.word	0x40021800
 800346c:	40021c00 	.word	0x40021c00
 8003470:	40022000 	.word	0x40022000
 8003474:	40022400 	.word	0x40022400
 8003478:	40013c00 	.word	0x40013c00

0800347c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e11f      	b.n	80036ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003494:	b2db      	uxtb	r3, r3
 8003496:	2b00      	cmp	r3, #0
 8003498:	d106      	bne.n	80034a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f7fd ff7a 	bl	800139c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2224      	movs	r2, #36	; 0x24
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034e0:	f001 ff3c 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	4a7b      	ldr	r2, [pc, #492]	; (80036d8 <HAL_I2C_Init+0x25c>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d807      	bhi.n	8003500 <HAL_I2C_Init+0x84>
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	4a7a      	ldr	r2, [pc, #488]	; (80036dc <HAL_I2C_Init+0x260>)
 80034f4:	4293      	cmp	r3, r2
 80034f6:	bf94      	ite	ls
 80034f8:	2301      	movls	r3, #1
 80034fa:	2300      	movhi	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	e006      	b.n	800350e <HAL_I2C_Init+0x92>
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4a77      	ldr	r2, [pc, #476]	; (80036e0 <HAL_I2C_Init+0x264>)
 8003504:	4293      	cmp	r3, r2
 8003506:	bf94      	ite	ls
 8003508:	2301      	movls	r3, #1
 800350a:	2300      	movhi	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e0db      	b.n	80036ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	4a72      	ldr	r2, [pc, #456]	; (80036e4 <HAL_I2C_Init+0x268>)
 800351a:	fba2 2303 	umull	r2, r3, r2, r3
 800351e:	0c9b      	lsrs	r3, r3, #18
 8003520:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	68ba      	ldr	r2, [r7, #8]
 8003532:	430a      	orrs	r2, r1
 8003534:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a64      	ldr	r2, [pc, #400]	; (80036d8 <HAL_I2C_Init+0x25c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d802      	bhi.n	8003550 <HAL_I2C_Init+0xd4>
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	3301      	adds	r3, #1
 800354e:	e009      	b.n	8003564 <HAL_I2C_Init+0xe8>
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	4a63      	ldr	r2, [pc, #396]	; (80036e8 <HAL_I2C_Init+0x26c>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	3301      	adds	r3, #1
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	6812      	ldr	r2, [r2, #0]
 8003568:	430b      	orrs	r3, r1
 800356a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	69db      	ldr	r3, [r3, #28]
 8003572:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003576:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4956      	ldr	r1, [pc, #344]	; (80036d8 <HAL_I2C_Init+0x25c>)
 8003580:	428b      	cmp	r3, r1
 8003582:	d80d      	bhi.n	80035a0 <HAL_I2C_Init+0x124>
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1e59      	subs	r1, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003592:	3301      	adds	r3, #1
 8003594:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003598:	2b04      	cmp	r3, #4
 800359a:	bf38      	it	cc
 800359c:	2304      	movcc	r3, #4
 800359e:	e04f      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d111      	bne.n	80035cc <HAL_I2C_Init+0x150>
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	1e58      	subs	r0, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6859      	ldr	r1, [r3, #4]
 80035b0:	460b      	mov	r3, r1
 80035b2:	005b      	lsls	r3, r3, #1
 80035b4:	440b      	add	r3, r1
 80035b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035ba:	3301      	adds	r3, #1
 80035bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf0c      	ite	eq
 80035c4:	2301      	moveq	r3, #1
 80035c6:	2300      	movne	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e012      	b.n	80035f2 <HAL_I2C_Init+0x176>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	1e58      	subs	r0, r3, #1
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6859      	ldr	r1, [r3, #4]
 80035d4:	460b      	mov	r3, r1
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	440b      	add	r3, r1
 80035da:	0099      	lsls	r1, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	fbb0 f3f3 	udiv	r3, r0, r3
 80035e2:	3301      	adds	r3, #1
 80035e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	bf0c      	ite	eq
 80035ec:	2301      	moveq	r3, #1
 80035ee:	2300      	movne	r3, #0
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <HAL_I2C_Init+0x17e>
 80035f6:	2301      	movs	r3, #1
 80035f8:	e022      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d10e      	bne.n	8003620 <HAL_I2C_Init+0x1a4>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e58      	subs	r0, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6859      	ldr	r1, [r3, #4]
 800360a:	460b      	mov	r3, r1
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	440b      	add	r3, r1
 8003610:	fbb0 f3f3 	udiv	r3, r0, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800361a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361e:	e00f      	b.n	8003640 <HAL_I2C_Init+0x1c4>
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	1e58      	subs	r0, r3, #1
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	009b      	lsls	r3, r3, #2
 800362c:	440b      	add	r3, r1
 800362e:	0099      	lsls	r1, r3, #2
 8003630:	440b      	add	r3, r1
 8003632:	fbb0 f3f3 	udiv	r3, r0, r3
 8003636:	3301      	adds	r3, #1
 8003638:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	6809      	ldr	r1, [r1, #0]
 8003644:	4313      	orrs	r3, r2
 8003646:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	69da      	ldr	r2, [r3, #28]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	431a      	orrs	r2, r3
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800366e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	6911      	ldr	r1, [r2, #16]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	4311      	orrs	r1, r2
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	6812      	ldr	r2, [r2, #0]
 8003680:	430b      	orrs	r3, r1
 8003682:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	695a      	ldr	r2, [r3, #20]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	699b      	ldr	r3, [r3, #24]
 8003696:	431a      	orrs	r2, r3
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	430a      	orrs	r2, r1
 800369e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f042 0201 	orr.w	r2, r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3710      	adds	r7, #16
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	000186a0 	.word	0x000186a0
 80036dc:	001e847f 	.word	0x001e847f
 80036e0:	003d08ff 	.word	0x003d08ff
 80036e4:	431bde83 	.word	0x431bde83
 80036e8:	10624dd3 	.word	0x10624dd3

080036ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	2b20      	cmp	r3, #32
 8003700:	d129      	bne.n	8003756 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2224      	movs	r2, #36	; 0x24
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681a      	ldr	r2, [r3, #0]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f022 0201 	bic.w	r2, r2, #1
 8003718:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0210 	bic.w	r2, r2, #16
 8003728:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0201 	orr.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	e000      	b.n	8003758 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003756:	2302      	movs	r3, #2
  }
}
 8003758:	4618      	mov	r0, r3
 800375a:	370c      	adds	r7, #12
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr

08003764 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003764:	b480      	push	{r7}
 8003766:	b085      	sub	sp, #20
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800376e:	2300      	movs	r3, #0
 8003770:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b20      	cmp	r3, #32
 800377c:	d12a      	bne.n	80037d4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2224      	movs	r2, #36	; 0x24
 8003782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0201 	bic.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800379e:	89fb      	ldrh	r3, [r7, #14]
 80037a0:	f023 030f 	bic.w	r3, r3, #15
 80037a4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	89fb      	ldrh	r3, [r7, #14]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	89fa      	ldrh	r2, [r7, #14]
 80037b6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2220      	movs	r2, #32
 80037cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80037d0:	2300      	movs	r3, #0
 80037d2:	e000      	b.n	80037d6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
  }
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80037e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037e4:	b08f      	sub	sp, #60	; 0x3c
 80037e6:	af0a      	add	r7, sp, #40	; 0x28
 80037e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e10f      	b.n	8003a14 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f006 f936 	bl	8009a80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2203      	movs	r2, #3
 8003818:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003824:	2b00      	cmp	r3, #0
 8003826:	d102      	bne.n	800382e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f003 f959 	bl	8006aea <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	603b      	str	r3, [r7, #0]
 800383e:	687e      	ldr	r6, [r7, #4]
 8003840:	466d      	mov	r5, sp
 8003842:	f106 0410 	add.w	r4, r6, #16
 8003846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800384c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800384e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003852:	e885 0003 	stmia.w	r5, {r0, r1}
 8003856:	1d33      	adds	r3, r6, #4
 8003858:	cb0e      	ldmia	r3, {r1, r2, r3}
 800385a:	6838      	ldr	r0, [r7, #0]
 800385c:	f003 f830 	bl	80068c0 <USB_CoreInit>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e0d0      	b.n	8003a14 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2100      	movs	r1, #0
 8003878:	4618      	mov	r0, r3
 800387a:	f003 f947 	bl	8006b0c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
 8003882:	e04a      	b.n	800391a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003884:	7bfa      	ldrb	r2, [r7, #15]
 8003886:	6879      	ldr	r1, [r7, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	00db      	lsls	r3, r3, #3
 800388c:	1a9b      	subs	r3, r3, r2
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	440b      	add	r3, r1
 8003892:	333d      	adds	r3, #61	; 0x3d
 8003894:	2201      	movs	r2, #1
 8003896:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003898:	7bfa      	ldrb	r2, [r7, #15]
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	4613      	mov	r3, r2
 800389e:	00db      	lsls	r3, r3, #3
 80038a0:	1a9b      	subs	r3, r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	440b      	add	r3, r1
 80038a6:	333c      	adds	r3, #60	; 0x3c
 80038a8:	7bfa      	ldrb	r2, [r7, #15]
 80038aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80038ac:	7bfa      	ldrb	r2, [r7, #15]
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
 80038b0:	b298      	uxth	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	4613      	mov	r3, r2
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	1a9b      	subs	r3, r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	440b      	add	r3, r1
 80038be:	3342      	adds	r3, #66	; 0x42
 80038c0:	4602      	mov	r2, r0
 80038c2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80038c4:	7bfa      	ldrb	r2, [r7, #15]
 80038c6:	6879      	ldr	r1, [r7, #4]
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	1a9b      	subs	r3, r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	333f      	adds	r3, #63	; 0x3f
 80038d4:	2200      	movs	r2, #0
 80038d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80038d8:	7bfa      	ldrb	r2, [r7, #15]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	00db      	lsls	r3, r3, #3
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3344      	adds	r3, #68	; 0x44
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80038ec:	7bfa      	ldrb	r2, [r7, #15]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	3348      	adds	r3, #72	; 0x48
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003900:	7bfa      	ldrb	r2, [r7, #15]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	00db      	lsls	r3, r3, #3
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	3350      	adds	r3, #80	; 0x50
 8003910:	2200      	movs	r2, #0
 8003912:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003914:	7bfb      	ldrb	r3, [r7, #15]
 8003916:	3301      	adds	r3, #1
 8003918:	73fb      	strb	r3, [r7, #15]
 800391a:	7bfa      	ldrb	r2, [r7, #15]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	429a      	cmp	r2, r3
 8003922:	d3af      	bcc.n	8003884 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003924:	2300      	movs	r3, #0
 8003926:	73fb      	strb	r3, [r7, #15]
 8003928:	e044      	b.n	80039b4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800392a:	7bfa      	ldrb	r2, [r7, #15]
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800393c:	2200      	movs	r2, #0
 800393e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003940:	7bfa      	ldrb	r2, [r7, #15]
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	4613      	mov	r3, r2
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	1a9b      	subs	r3, r3, r2
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	440b      	add	r3, r1
 800394e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003952:	7bfa      	ldrb	r2, [r7, #15]
 8003954:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003956:	7bfa      	ldrb	r2, [r7, #15]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	00db      	lsls	r3, r3, #3
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003968:	2200      	movs	r2, #0
 800396a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800396c:	7bfa      	ldrb	r2, [r7, #15]
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	4613      	mov	r3, r2
 8003972:	00db      	lsls	r3, r3, #3
 8003974:	1a9b      	subs	r3, r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	440b      	add	r3, r1
 800397a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003982:	7bfa      	ldrb	r2, [r7, #15]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003998:	7bfa      	ldrb	r2, [r7, #15]
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	00db      	lsls	r3, r3, #3
 80039a0:	1a9b      	subs	r3, r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	440b      	add	r3, r1
 80039a6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ae:	7bfb      	ldrb	r3, [r7, #15]
 80039b0:	3301      	adds	r3, #1
 80039b2:	73fb      	strb	r3, [r7, #15]
 80039b4:	7bfa      	ldrb	r2, [r7, #15]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d3b5      	bcc.n	800392a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	603b      	str	r3, [r7, #0]
 80039c4:	687e      	ldr	r6, [r7, #4]
 80039c6:	466d      	mov	r5, sp
 80039c8:	f106 0410 	add.w	r4, r6, #16
 80039cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80039d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80039d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80039d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80039dc:	1d33      	adds	r3, r6, #4
 80039de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039e0:	6838      	ldr	r0, [r7, #0]
 80039e2:	f003 f8bd 	bl	8006b60 <USB_DevInit>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d005      	beq.n	80039f8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2202      	movs	r2, #2
 80039f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e00d      	b.n	8003a14 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2200      	movs	r2, #0
 80039fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 f905 	bl	8007c1c <USB_DevDisconnect>

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a1c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_PCD_Start+0x1c>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e020      	b.n	8003a7a <HAL_PCD_Start+0x5e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d109      	bne.n	8003a5c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d005      	beq.n	8003a5c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f003 f831 	bl	8006ac8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f004 f8b5 	bl	8007bda <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}

08003a82 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003a82:	b590      	push	{r4, r7, lr}
 8003a84:	b08d      	sub	sp, #52	; 0x34
 8003a86:	af00      	add	r7, sp, #0
 8003a88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a90:	6a3b      	ldr	r3, [r7, #32]
 8003a92:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f004 f973 	bl	8007d84 <USB_GetMode>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	f040 839d 	bne.w	80041e0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f004 f8d7 	bl	8007c5e <USB_ReadInterrupts>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	f000 8393 	beq.w	80041de <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4618      	mov	r0, r3
 8003abe:	f004 f8ce 	bl	8007c5e <USB_ReadInterrupts>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	f003 0302 	and.w	r3, r3, #2
 8003ac8:	2b02      	cmp	r3, #2
 8003aca:	d107      	bne.n	8003adc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	695a      	ldr	r2, [r3, #20]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f002 0202 	and.w	r2, r2, #2
 8003ada:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f004 f8bc 	bl	8007c5e <USB_ReadInterrupts>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	f003 0310 	and.w	r3, r3, #16
 8003aec:	2b10      	cmp	r3, #16
 8003aee:	d161      	bne.n	8003bb4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	699a      	ldr	r2, [r3, #24]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f022 0210 	bic.w	r2, r2, #16
 8003afe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003b00:	6a3b      	ldr	r3, [r7, #32]
 8003b02:	6a1b      	ldr	r3, [r3, #32]
 8003b04:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	f003 020f 	and.w	r2, r3, #15
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	4413      	add	r3, r2
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	0c5b      	lsrs	r3, r3, #17
 8003b24:	f003 030f 	and.w	r3, r3, #15
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	d124      	bne.n	8003b76 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003b2c:	69ba      	ldr	r2, [r7, #24]
 8003b2e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d035      	beq.n	8003ba4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	091b      	lsrs	r3, r3, #4
 8003b40:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003b42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	461a      	mov	r2, r3
 8003b4a:	6a38      	ldr	r0, [r7, #32]
 8003b4c:	f003 ff22 	bl	8007994 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	091b      	lsrs	r3, r3, #4
 8003b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b5c:	441a      	add	r2, r3
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	699a      	ldr	r2, [r3, #24]
 8003b66:	69bb      	ldr	r3, [r7, #24]
 8003b68:	091b      	lsrs	r3, r3, #4
 8003b6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b6e:	441a      	add	r2, r3
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	619a      	str	r2, [r3, #24]
 8003b74:	e016      	b.n	8003ba4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003b76:	69bb      	ldr	r3, [r7, #24]
 8003b78:	0c5b      	lsrs	r3, r3, #17
 8003b7a:	f003 030f 	and.w	r3, r3, #15
 8003b7e:	2b06      	cmp	r3, #6
 8003b80:	d110      	bne.n	8003ba4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003b88:	2208      	movs	r2, #8
 8003b8a:	4619      	mov	r1, r3
 8003b8c:	6a38      	ldr	r0, [r7, #32]
 8003b8e:	f003 ff01 	bl	8007994 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	091b      	lsrs	r3, r3, #4
 8003b9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003b9e:	441a      	add	r2, r3
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	699a      	ldr	r2, [r3, #24]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0210 	orr.w	r2, r2, #16
 8003bb2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f004 f850 	bl	8007c5e <USB_ReadInterrupts>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bc4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003bc8:	d16e      	bne.n	8003ca8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f004 f856 	bl	8007c84 <USB_ReadDevAllOutEpInterrupt>
 8003bd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003bda:	e062      	b.n	8003ca2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d057      	beq.n	8003c96 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bec:	b2d2      	uxtb	r2, r2
 8003bee:	4611      	mov	r1, r2
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f004 f87b 	bl	8007cec <USB_ReadDevOutEPInterrupt>
 8003bf6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00c      	beq.n	8003c1c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	461a      	mov	r2, r3
 8003c10:	2301      	movs	r3, #1
 8003c12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003c14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fdb0 	bl	800477c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d00c      	beq.n	8003c40 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	461a      	mov	r2, r3
 8003c34:	2308      	movs	r3, #8
 8003c36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c3a:	6878      	ldr	r0, [r7, #4]
 8003c3c:	f000 feaa 	bl	8004994 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f003 0310 	and.w	r3, r3, #16
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d008      	beq.n	8003c5c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4c:	015a      	lsls	r2, r3, #5
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c56:	461a      	mov	r2, r3
 8003c58:	2310      	movs	r3, #16
 8003c5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d008      	beq.n	8003c78 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c72:	461a      	mov	r2, r3
 8003c74:	2320      	movs	r3, #32
 8003c76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c84:	015a      	lsls	r2, r3, #5
 8003c86:	69fb      	ldr	r3, [r7, #28]
 8003c88:	4413      	add	r3, r2
 8003c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8e:	461a      	mov	r2, r3
 8003c90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003c94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	3301      	adds	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003c9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9e:	085b      	lsrs	r3, r3, #1
 8003ca0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d199      	bne.n	8003bdc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4618      	mov	r0, r3
 8003cae:	f003 ffd6 	bl	8007c5e <USB_ReadInterrupts>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003cb8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003cbc:	f040 80c0 	bne.w	8003e40 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f003 fff7 	bl	8007cb8 <USB_ReadDevAllInEpInterrupt>
 8003cca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003cd0:	e0b2      	b.n	8003e38 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 80a7 	beq.w	8003e2c <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	4611      	mov	r1, r2
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f004 f81d 	bl	8007d28 <USB_ReadDevInEPInterrupt>
 8003cee:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d057      	beq.n	8003daa <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2201      	movs	r2, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69f9      	ldr	r1, [r7, #28]
 8003d16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d20:	015a      	lsls	r2, r3, #5
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	4413      	add	r3, r2
 8003d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d132      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	00db      	lsls	r3, r3, #3
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	3348      	adds	r3, #72	; 0x48
 8003d48:	6819      	ldr	r1, [r3, #0]
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	4613      	mov	r3, r2
 8003d50:	00db      	lsls	r3, r3, #3
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	009b      	lsls	r3, r3, #2
 8003d56:	4403      	add	r3, r0
 8003d58:	3344      	adds	r3, #68	; 0x44
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4419      	add	r1, r3
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d62:	4613      	mov	r3, r2
 8003d64:	00db      	lsls	r3, r3, #3
 8003d66:	1a9b      	subs	r3, r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4403      	add	r3, r0
 8003d6c:	3348      	adds	r3, #72	; 0x48
 8003d6e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d113      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x31c>
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	00db      	lsls	r3, r3, #3
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	3350      	adds	r3, #80	; 0x50
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6818      	ldr	r0, [r3, #0]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003d96:	461a      	mov	r2, r3
 8003d98:	2101      	movs	r1, #1
 8003d9a:	f004 f825 	bl	8007de8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f005 feec 	bl	8009b82 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d008      	beq.n	8003dc6 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	2308      	movs	r3, #8
 8003dc4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f003 0310 	and.w	r3, r3, #16
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	015a      	lsls	r2, r3, #5
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2310      	movs	r3, #16
 8003de0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d008      	beq.n	8003dfe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df8:	461a      	mov	r2, r3
 8003dfa:	2340      	movs	r3, #64	; 0x40
 8003dfc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	f003 0302 	and.w	r3, r3, #2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e0a:	015a      	lsls	r2, r3, #5
 8003e0c:	69fb      	ldr	r3, [r7, #28]
 8003e0e:	4413      	add	r3, r2
 8003e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e14:	461a      	mov	r2, r3
 8003e16:	2302      	movs	r3, #2
 8003e18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d003      	beq.n	8003e2c <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003e24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 fc1b 	bl	8004662 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	3301      	adds	r3, #1
 8003e30:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e34:	085b      	lsrs	r3, r3, #1
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	f47f af49 	bne.w	8003cd2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f003 ff0a 	bl	8007c5e <USB_ReadInterrupts>
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e54:	d122      	bne.n	8003e9c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e56:	69fb      	ldr	r3, [r7, #28]
 8003e58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e64:	f023 0301 	bic.w	r3, r3, #1
 8003e68:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d108      	bne.n	8003e86 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003e7c:	2100      	movs	r1, #0
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fe26 	bl	8004ad0 <HAL_PCDEx_LPM_Callback>
 8003e84:	e002      	b.n	8003e8c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f005 fef2 	bl	8009c70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	695a      	ldr	r2, [r3, #20]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003e9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f003 fedc 	bl	8007c5e <USB_ReadInterrupts>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb0:	d112      	bne.n	8003ed8 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d102      	bne.n	8003ec8 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f005 feae 	bl	8009c24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003ed6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f003 febe 	bl	8007c5e <USB_ReadInterrupts>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ee8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eec:	f040 80c7 	bne.w	800407e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ef0:	69fb      	ldr	r3, [r7, #28]
 8003ef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	69fa      	ldr	r2, [r7, #28]
 8003efa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efe:	f023 0301 	bic.w	r3, r3, #1
 8003f02:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2110      	movs	r1, #16
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f002 ff8c 	bl	8006e28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f10:	2300      	movs	r3, #0
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f14:	e056      	b.n	8003fc4 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f18:	015a      	lsls	r2, r3, #5
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f22:	461a      	mov	r2, r3
 8003f24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f28:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f3a:	0151      	lsls	r1, r2, #5
 8003f3c:	69fa      	ldr	r2, [r7, #28]
 8003f3e:	440a      	add	r2, r1
 8003f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f44:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f48:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4c:	015a      	lsls	r2, r3, #5
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	4413      	add	r3, r2
 8003f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f5a:	0151      	lsls	r1, r2, #5
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	440a      	add	r2, r1
 8003f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f64:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f68:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f7c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003f7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f8e:	0151      	lsls	r1, r2, #5
 8003f90:	69fa      	ldr	r2, [r7, #28]
 8003f92:	440a      	add	r2, r1
 8003f94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f9c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fae:	0151      	lsls	r1, r2, #5
 8003fb0:	69fa      	ldr	r2, [r7, #28]
 8003fb2:	440a      	add	r2, r1
 8003fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fb8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fbc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d3a3      	bcc.n	8003f16 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fdc:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003fe0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d016      	beq.n	8004018 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ff0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ff4:	69fa      	ldr	r2, [r7, #28]
 8003ff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ffa:	f043 030b 	orr.w	r3, r3, #11
 8003ffe:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004002:	69fb      	ldr	r3, [r7, #28]
 8004004:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	69fa      	ldr	r2, [r7, #28]
 800400c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004010:	f043 030b 	orr.w	r3, r3, #11
 8004014:	6453      	str	r3, [r2, #68]	; 0x44
 8004016:	e015      	b.n	8004044 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401e:	695b      	ldr	r3, [r3, #20]
 8004020:	69fa      	ldr	r2, [r7, #28]
 8004022:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004026:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800402a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800402e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004036:	691b      	ldr	r3, [r3, #16]
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800403e:	f043 030b 	orr.w	r3, r3, #11
 8004042:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	69fa      	ldr	r2, [r7, #28]
 800404e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004052:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004056:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004068:	461a      	mov	r2, r3
 800406a:	f003 febd 	bl	8007de8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695a      	ldr	r2, [r3, #20]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800407c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4618      	mov	r0, r3
 8004084:	f003 fdeb 	bl	8007c5e <USB_ReadInterrupts>
 8004088:	4603      	mov	r3, r0
 800408a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004092:	d124      	bne.n	80040de <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4618      	mov	r0, r3
 800409a:	f003 fe81 	bl	8007da0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4618      	mov	r0, r3
 80040a4:	f002 ff21 	bl	8006eea <USB_GetDevSpeed>
 80040a8:	4603      	mov	r3, r0
 80040aa:	461a      	mov	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681c      	ldr	r4, [r3, #0]
 80040b4:	f001 f946 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 80040b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	461a      	mov	r2, r3
 80040c2:	4620      	mov	r0, r4
 80040c4:	f002 fc5e 	bl	8006984 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f005 fd82 	bl	8009bd2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695a      	ldr	r2, [r3, #20]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80040dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	4618      	mov	r0, r3
 80040e4:	f003 fdbb 	bl	8007c5e <USB_ReadInterrupts>
 80040e8:	4603      	mov	r3, r0
 80040ea:	f003 0308 	and.w	r3, r3, #8
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d10a      	bne.n	8004108 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f005 fd5f 	bl	8009bb6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	695a      	ldr	r2, [r3, #20]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f002 0208 	and.w	r2, r2, #8
 8004106:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f003 fda6 	bl	8007c5e <USB_ReadInterrupts>
 8004112:	4603      	mov	r3, r0
 8004114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004118:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800411c:	d10f      	bne.n	800413e <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800411e:	2300      	movs	r3, #0
 8004120:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004124:	b2db      	uxtb	r3, r3
 8004126:	4619      	mov	r1, r3
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f005 fdc1 	bl	8009cb0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	695a      	ldr	r2, [r3, #20]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800413c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4618      	mov	r0, r3
 8004144:	f003 fd8b 	bl	8007c5e <USB_ReadInterrupts>
 8004148:	4603      	mov	r3, r0
 800414a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800414e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004152:	d10f      	bne.n	8004174 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004154:	2300      	movs	r3, #0
 8004156:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	b2db      	uxtb	r3, r3
 800415c:	4619      	mov	r1, r3
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f005 fd94 	bl	8009c8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695a      	ldr	r2, [r3, #20]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004172:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4618      	mov	r0, r3
 800417a:	f003 fd70 	bl	8007c5e <USB_ReadInterrupts>
 800417e:	4603      	mov	r3, r0
 8004180:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004188:	d10a      	bne.n	80041a0 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f005 fda2 	bl	8009cd4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	695a      	ldr	r2, [r3, #20]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800419e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f003 fd5a 	bl	8007c5e <USB_ReadInterrupts>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f003 0304 	and.w	r3, r3, #4
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d115      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d002      	beq.n	80041cc <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f005 fd92 	bl	8009cf0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6859      	ldr	r1, [r3, #4]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69ba      	ldr	r2, [r7, #24]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	e000      	b.n	80041e0 <HAL_PCD_IRQHandler+0x75e>
      return;
 80041de:	bf00      	nop
    }
  }
}
 80041e0:	3734      	adds	r7, #52	; 0x34
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}

080041e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b082      	sub	sp, #8
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	6078      	str	r0, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d101      	bne.n	8004200 <HAL_PCD_SetAddress+0x1a>
 80041fc:	2302      	movs	r3, #2
 80041fe:	e013      	b.n	8004228 <HAL_PCD_SetAddress+0x42>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f003 fcb8 	bl	8007b8e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	4608      	mov	r0, r1
 800423a:	4611      	mov	r1, r2
 800423c:	461a      	mov	r2, r3
 800423e:	4603      	mov	r3, r0
 8004240:	70fb      	strb	r3, [r7, #3]
 8004242:	460b      	mov	r3, r1
 8004244:	803b      	strh	r3, [r7, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800424a:	2300      	movs	r3, #0
 800424c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800424e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004252:	2b00      	cmp	r3, #0
 8004254:	da0f      	bge.n	8004276 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004256:	78fb      	ldrb	r3, [r7, #3]
 8004258:	f003 020f 	and.w	r2, r3, #15
 800425c:	4613      	mov	r3, r2
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	3338      	adds	r3, #56	; 0x38
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4413      	add	r3, r2
 800426a:	3304      	adds	r3, #4
 800426c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2201      	movs	r2, #1
 8004272:	705a      	strb	r2, [r3, #1]
 8004274:	e00f      	b.n	8004296 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004276:	78fb      	ldrb	r3, [r7, #3]
 8004278:	f003 020f 	and.w	r2, r3, #15
 800427c:	4613      	mov	r3, r2
 800427e:	00db      	lsls	r3, r3, #3
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	4413      	add	r3, r2
 800428c:	3304      	adds	r3, #4
 800428e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 030f 	and.w	r3, r3, #15
 800429c:	b2da      	uxtb	r2, r3
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042a2:	883a      	ldrh	r2, [r7, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	78ba      	ldrb	r2, [r7, #2]
 80042ac:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d004      	beq.n	80042c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	b29a      	uxth	r2, r3
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80042c0:	78bb      	ldrb	r3, [r7, #2]
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d102      	bne.n	80042cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_PCD_EP_Open+0xaa>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e00e      	b.n	80042f8 <HAL_PCD_EP_Open+0xc8>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68f9      	ldr	r1, [r7, #12]
 80042e8:	4618      	mov	r0, r3
 80042ea:	f002 fe23 	bl	8006f34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80042f6:	7afb      	ldrb	r3, [r7, #11]
}
 80042f8:	4618      	mov	r0, r3
 80042fa:	3710      	adds	r7, #16
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bd80      	pop	{r7, pc}

08004300 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	460b      	mov	r3, r1
 800430a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800430c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004310:	2b00      	cmp	r3, #0
 8004312:	da0f      	bge.n	8004334 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004314:	78fb      	ldrb	r3, [r7, #3]
 8004316:	f003 020f 	and.w	r2, r3, #15
 800431a:	4613      	mov	r3, r2
 800431c:	00db      	lsls	r3, r3, #3
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	3338      	adds	r3, #56	; 0x38
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	4413      	add	r3, r2
 8004328:	3304      	adds	r3, #4
 800432a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2201      	movs	r2, #1
 8004330:	705a      	strb	r2, [r3, #1]
 8004332:	e00f      	b.n	8004354 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004334:	78fb      	ldrb	r3, [r7, #3]
 8004336:	f003 020f 	and.w	r2, r3, #15
 800433a:	4613      	mov	r3, r2
 800433c:	00db      	lsls	r3, r3, #3
 800433e:	1a9b      	subs	r3, r3, r2
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004346:	687a      	ldr	r2, [r7, #4]
 8004348:	4413      	add	r3, r2
 800434a:	3304      	adds	r3, #4
 800434c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	b2da      	uxtb	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_PCD_EP_Close+0x6e>
 800436a:	2302      	movs	r3, #2
 800436c:	e00e      	b.n	800438c <HAL_PCD_EP_Close+0x8c>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	4618      	mov	r0, r3
 800437e:	f002 fe61 	bl	8007044 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3710      	adds	r7, #16
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}

08004394 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b086      	sub	sp, #24
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	607a      	str	r2, [r7, #4]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	460b      	mov	r3, r1
 80043a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043a4:	7afb      	ldrb	r3, [r7, #11]
 80043a6:	f003 020f 	and.w	r2, r3, #15
 80043aa:	4613      	mov	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	1a9b      	subs	r3, r3, r2
 80043b0:	009b      	lsls	r3, r3, #2
 80043b2:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	4413      	add	r3, r2
 80043ba:	3304      	adds	r3, #4
 80043bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	683a      	ldr	r2, [r7, #0]
 80043c8:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2200      	movs	r2, #0
 80043d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043d6:	7afb      	ldrb	r3, [r7, #11]
 80043d8:	f003 030f 	and.w	r3, r3, #15
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	691b      	ldr	r3, [r3, #16]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d102      	bne.n	80043f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80043f0:	7afb      	ldrb	r3, [r7, #11]
 80043f2:	f003 030f 	and.w	r3, r3, #15
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d109      	bne.n	800440e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6818      	ldr	r0, [r3, #0]
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	b2db      	uxtb	r3, r3
 8004404:	461a      	mov	r2, r3
 8004406:	6979      	ldr	r1, [r7, #20]
 8004408:	f003 f93c 	bl	8007684 <USB_EP0StartXfer>
 800440c:	e008      	b.n	8004420 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6818      	ldr	r0, [r3, #0]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	b2db      	uxtb	r3, r3
 8004418:	461a      	mov	r2, r3
 800441a:	6979      	ldr	r1, [r7, #20]
 800441c:	f002 feee 	bl	80071fc <USB_EPStartXfer>
  }

  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	3718      	adds	r7, #24
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800442a:	b480      	push	{r7}
 800442c:	b083      	sub	sp, #12
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	460b      	mov	r3, r1
 8004434:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004436:	78fb      	ldrb	r3, [r7, #3]
 8004438:	f003 020f 	and.w	r2, r3, #15
 800443c:	6879      	ldr	r1, [r7, #4]
 800443e:	4613      	mov	r3, r2
 8004440:	00db      	lsls	r3, r3, #3
 8004442:	1a9b      	subs	r3, r3, r2
 8004444:	009b      	lsls	r3, r3, #2
 8004446:	440b      	add	r3, r1
 8004448:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800444c:	681b      	ldr	r3, [r3, #0]
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr

0800445a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b086      	sub	sp, #24
 800445e:	af00      	add	r7, sp, #0
 8004460:	60f8      	str	r0, [r7, #12]
 8004462:	607a      	str	r2, [r7, #4]
 8004464:	603b      	str	r3, [r7, #0]
 8004466:	460b      	mov	r3, r1
 8004468:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800446a:	7afb      	ldrb	r3, [r7, #11]
 800446c:	f003 020f 	and.w	r2, r3, #15
 8004470:	4613      	mov	r3, r2
 8004472:	00db      	lsls	r3, r3, #3
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	3338      	adds	r3, #56	; 0x38
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004488:	697b      	ldr	r3, [r7, #20]
 800448a:	683a      	ldr	r2, [r7, #0]
 800448c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	2200      	movs	r2, #0
 8004492:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	2201      	movs	r2, #1
 8004498:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800449a:	7afb      	ldrb	r3, [r7, #11]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	b2da      	uxtb	r2, r3
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d102      	bne.n	80044b4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044b4:	7afb      	ldrb	r3, [r7, #11]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d109      	bne.n	80044d2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6818      	ldr	r0, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	461a      	mov	r2, r3
 80044ca:	6979      	ldr	r1, [r7, #20]
 80044cc:	f003 f8da 	bl	8007684 <USB_EP0StartXfer>
 80044d0:	e008      	b.n	80044e4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6818      	ldr	r0, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	461a      	mov	r2, r3
 80044de:	6979      	ldr	r1, [r7, #20]
 80044e0:	f002 fe8c 	bl	80071fc <USB_EPStartXfer>
  }

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3718      	adds	r7, #24
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
 80044f6:	460b      	mov	r3, r1
 80044f8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80044fa:	78fb      	ldrb	r3, [r7, #3]
 80044fc:	f003 020f 	and.w	r2, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d901      	bls.n	800450c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e050      	b.n	80045ae <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800450c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004510:	2b00      	cmp	r3, #0
 8004512:	da0f      	bge.n	8004534 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004514:	78fb      	ldrb	r3, [r7, #3]
 8004516:	f003 020f 	and.w	r2, r3, #15
 800451a:	4613      	mov	r3, r2
 800451c:	00db      	lsls	r3, r3, #3
 800451e:	1a9b      	subs	r3, r3, r2
 8004520:	009b      	lsls	r3, r3, #2
 8004522:	3338      	adds	r3, #56	; 0x38
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	3304      	adds	r3, #4
 800452a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	705a      	strb	r2, [r3, #1]
 8004532:	e00d      	b.n	8004550 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004534:	78fa      	ldrb	r2, [r7, #3]
 8004536:	4613      	mov	r3, r2
 8004538:	00db      	lsls	r3, r3, #3
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4413      	add	r3, r2
 8004546:	3304      	adds	r3, #4
 8004548:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2200      	movs	r2, #0
 800454e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2201      	movs	r2, #1
 8004554:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	b2da      	uxtb	r2, r3
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004568:	2b01      	cmp	r3, #1
 800456a:	d101      	bne.n	8004570 <HAL_PCD_EP_SetStall+0x82>
 800456c:	2302      	movs	r3, #2
 800456e:	e01e      	b.n	80045ae <HAL_PCD_EP_SetStall+0xc0>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68f9      	ldr	r1, [r7, #12]
 800457e:	4618      	mov	r0, r3
 8004580:	f003 fa31 	bl	80079e6 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004584:	78fb      	ldrb	r3, [r7, #3]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10a      	bne.n	80045a4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6818      	ldr	r0, [r3, #0]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	b2d9      	uxtb	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800459e:	461a      	mov	r2, r3
 80045a0:	f003 fc22 	bl	8007de8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80045ac:	2300      	movs	r3, #0
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3710      	adds	r7, #16
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}

080045b6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045b6:	b580      	push	{r7, lr}
 80045b8:	b084      	sub	sp, #16
 80045ba:	af00      	add	r7, sp, #0
 80045bc:	6078      	str	r0, [r7, #4]
 80045be:	460b      	mov	r3, r1
 80045c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	f003 020f 	and.w	r2, r3, #15
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	685b      	ldr	r3, [r3, #4]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d901      	bls.n	80045d4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e042      	b.n	800465a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80045d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	da0f      	bge.n	80045fc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045dc:	78fb      	ldrb	r3, [r7, #3]
 80045de:	f003 020f 	and.w	r2, r3, #15
 80045e2:	4613      	mov	r3, r2
 80045e4:	00db      	lsls	r3, r3, #3
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	3338      	adds	r3, #56	; 0x38
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	4413      	add	r3, r2
 80045f0:	3304      	adds	r3, #4
 80045f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2201      	movs	r2, #1
 80045f8:	705a      	strb	r2, [r3, #1]
 80045fa:	e00f      	b.n	800461c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80045fc:	78fb      	ldrb	r3, [r7, #3]
 80045fe:	f003 020f 	and.w	r2, r3, #15
 8004602:	4613      	mov	r3, r2
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	1a9b      	subs	r3, r3, r2
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	4413      	add	r3, r2
 8004612:	3304      	adds	r3, #4
 8004614:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004622:	78fb      	ldrb	r3, [r7, #3]
 8004624:	f003 030f 	and.w	r3, r3, #15
 8004628:	b2da      	uxtb	r2, r3
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004634:	2b01      	cmp	r3, #1
 8004636:	d101      	bne.n	800463c <HAL_PCD_EP_ClrStall+0x86>
 8004638:	2302      	movs	r3, #2
 800463a:	e00e      	b.n	800465a <HAL_PCD_EP_ClrStall+0xa4>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68f9      	ldr	r1, [r7, #12]
 800464a:	4618      	mov	r0, r3
 800464c:	f003 fa39 	bl	8007ac2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004658:	2300      	movs	r3, #0
}
 800465a:	4618      	mov	r0, r3
 800465c:	3710      	adds	r7, #16
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b08a      	sub	sp, #40	; 0x28
 8004666:	af02      	add	r7, sp, #8
 8004668:	6078      	str	r0, [r7, #4]
 800466a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	3338      	adds	r3, #56	; 0x38
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	4413      	add	r3, r2
 8004686:	3304      	adds	r3, #4
 8004688:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	429a      	cmp	r2, r3
 8004694:	d901      	bls.n	800469a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06c      	b.n	8004774 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	695a      	ldr	r2, [r3, #20]
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	689b      	ldr	r3, [r3, #8]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d902      	bls.n	80046b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	3303      	adds	r3, #3
 80046ba:	089b      	lsrs	r3, r3, #2
 80046bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80046be:	e02b      	b.n	8004718 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	695a      	ldr	r2, [r3, #20]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	69fa      	ldr	r2, [r7, #28]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d902      	bls.n	80046dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	3303      	adds	r3, #3
 80046e0:	089b      	lsrs	r3, r3, #2
 80046e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68d9      	ldr	r1, [r3, #12]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	9300      	str	r3, [sp, #0]
 80046f8:	4603      	mov	r3, r0
 80046fa:	6978      	ldr	r0, [r7, #20]
 80046fc:	f003 f915 	bl	800792a <USB_WritePacket>

    ep->xfer_buff  += len;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	68da      	ldr	r2, [r3, #12]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	441a      	add	r2, r3
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	699a      	ldr	r2, [r3, #24]
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	441a      	add	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	b29b      	uxth	r3, r3
 8004728:	69ba      	ldr	r2, [r7, #24]
 800472a:	429a      	cmp	r2, r3
 800472c:	d809      	bhi.n	8004742 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	699a      	ldr	r2, [r3, #24]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004736:	429a      	cmp	r2, r3
 8004738:	d203      	bcs.n	8004742 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d1be      	bne.n	80046c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	695a      	ldr	r2, [r3, #20]
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	699b      	ldr	r3, [r3, #24]
 800474a:	429a      	cmp	r2, r3
 800474c:	d811      	bhi.n	8004772 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	f003 030f 	and.w	r3, r3, #15
 8004754:	2201      	movs	r2, #1
 8004756:	fa02 f303 	lsl.w	r3, r2, r3
 800475a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	43db      	mvns	r3, r3
 8004768:	6939      	ldr	r1, [r7, #16]
 800476a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800476e:	4013      	ands	r3, r2
 8004770:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004772:	2300      	movs	r3, #0
}
 8004774:	4618      	mov	r0, r3
 8004776:	3720      	adds	r7, #32
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b086      	sub	sp, #24
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	333c      	adds	r3, #60	; 0x3c
 8004794:	3304      	adds	r3, #4
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	015a      	lsls	r2, r3, #5
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	4413      	add	r3, r2
 80047a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a6:	689b      	ldr	r3, [r3, #8]
 80047a8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	f040 80a0 	bne.w	80048f4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d015      	beq.n	80047ea <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a72      	ldr	r2, [pc, #456]	; (800498c <PCD_EP_OutXfrComplete_int+0x210>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	f240 80dd 	bls.w	8004982 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	f000 80d7 	beq.w	8004982 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e0:	461a      	mov	r2, r3
 80047e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047e6:	6093      	str	r3, [r2, #8]
 80047e8:	e0cb      	b.n	8004982 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	f003 0320 	and.w	r3, r3, #32
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d009      	beq.n	8004808 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004800:	461a      	mov	r2, r3
 8004802:	2320      	movs	r3, #32
 8004804:	6093      	str	r3, [r2, #8]
 8004806:	e0bc      	b.n	8004982 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 80b7 	bne.w	8004982 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a5d      	ldr	r2, [pc, #372]	; (800498c <PCD_EP_OutXfrComplete_int+0x210>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d90f      	bls.n	800483c <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004822:	2b00      	cmp	r3, #0
 8004824:	d00a      	beq.n	800483c <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004832:	461a      	mov	r2, r3
 8004834:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004838:	6093      	str	r3, [r2, #8]
 800483a:	e0a2      	b.n	8004982 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 800483c:	6879      	ldr	r1, [r7, #4]
 800483e:	683a      	ldr	r2, [r7, #0]
 8004840:	4613      	mov	r3, r2
 8004842:	00db      	lsls	r3, r3, #3
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800484e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	0159      	lsls	r1, r3, #5
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	440b      	add	r3, r1
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	691b      	ldr	r3, [r3, #16]
 800485e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004862:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	683a      	ldr	r2, [r7, #0]
 8004868:	4613      	mov	r3, r2
 800486a:	00db      	lsls	r3, r3, #3
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	4403      	add	r3, r0
 8004872:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004876:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004878:	6879      	ldr	r1, [r7, #4]
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	4613      	mov	r3, r2
 800487e:	00db      	lsls	r3, r3, #3
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	4613      	mov	r3, r2
 8004892:	00db      	lsls	r3, r3, #3
 8004894:	1a9b      	subs	r3, r3, r2
 8004896:	009b      	lsls	r3, r3, #2
 8004898:	4403      	add	r3, r0
 800489a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4419      	add	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	683a      	ldr	r2, [r7, #0]
 80048a6:	4613      	mov	r3, r2
 80048a8:	00db      	lsls	r3, r3, #3
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4403      	add	r3, r0
 80048b0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80048b4:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d114      	bne.n	80048e6 <PCD_EP_OutXfrComplete_int+0x16a>
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d108      	bne.n	80048e6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6818      	ldr	r0, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80048de:	461a      	mov	r2, r3
 80048e0:	2101      	movs	r1, #1
 80048e2:	f003 fa81 	bl	8007de8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	4619      	mov	r1, r3
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f005 f92d 	bl	8009b4c <HAL_PCD_DataOutStageCallback>
 80048f2:	e046      	b.n	8004982 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	4a26      	ldr	r2, [pc, #152]	; (8004990 <PCD_EP_OutXfrComplete_int+0x214>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d124      	bne.n	8004946 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	015a      	lsls	r2, r3, #5
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004912:	461a      	mov	r2, r3
 8004914:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004918:	6093      	str	r3, [r2, #8]
 800491a:	e032      	b.n	8004982 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b00      	cmp	r3, #0
 8004924:	d008      	beq.n	8004938 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	693b      	ldr	r3, [r7, #16]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	461a      	mov	r2, r3
 8004934:	2320      	movs	r3, #32
 8004936:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f005 f904 	bl	8009b4c <HAL_PCD_DataOutStageCallback>
 8004944:	e01d      	b.n	8004982 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d114      	bne.n	8004976 <PCD_EP_OutXfrComplete_int+0x1fa>
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	4613      	mov	r3, r2
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	1a9b      	subs	r3, r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d108      	bne.n	8004976 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6818      	ldr	r0, [r3, #0]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800496e:	461a      	mov	r2, r3
 8004970:	2100      	movs	r1, #0
 8004972:	f003 fa39 	bl	8007de8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	4619      	mov	r1, r3
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f005 f8e5 	bl	8009b4c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	4f54300a 	.word	0x4f54300a
 8004990:	4f54310a 	.word	0x4f54310a

08004994 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b086      	sub	sp, #24
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	333c      	adds	r3, #60	; 0x3c
 80049ac:	3304      	adds	r3, #4
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	4a15      	ldr	r2, [pc, #84]	; (8004a1c <PCD_EP_OutSetupPacket_int+0x88>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d90e      	bls.n	80049e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	015a      	lsls	r2, r3, #5
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	4413      	add	r3, r2
 80049dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e0:	461a      	mov	r2, r3
 80049e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80049e8:	6878      	ldr	r0, [r7, #4]
 80049ea:	f005 f89d 	bl	8009b28 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4a0a      	ldr	r2, [pc, #40]	; (8004a1c <PCD_EP_OutSetupPacket_int+0x88>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d90c      	bls.n	8004a10 <PCD_EP_OutSetupPacket_int+0x7c>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d108      	bne.n	8004a10 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6818      	ldr	r0, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a08:	461a      	mov	r2, r3
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	f003 f9ec 	bl	8007de8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a10:	2300      	movs	r3, #0
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3718      	adds	r7, #24
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	4f54300a 	.word	0x4f54300a

08004a20 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	460b      	mov	r3, r1
 8004a2a:	70fb      	strb	r3, [r7, #3]
 8004a2c:	4613      	mov	r3, r2
 8004a2e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a36:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a38:	78fb      	ldrb	r3, [r7, #3]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a3e:	883b      	ldrh	r3, [r7, #0]
 8004a40:	0419      	lsls	r1, r3, #16
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	68ba      	ldr	r2, [r7, #8]
 8004a48:	430a      	orrs	r2, r1
 8004a4a:	629a      	str	r2, [r3, #40]	; 0x28
 8004a4c:	e028      	b.n	8004aa0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	0c1b      	lsrs	r3, r3, #16
 8004a56:	68ba      	ldr	r2, [r7, #8]
 8004a58:	4413      	add	r3, r2
 8004a5a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	73fb      	strb	r3, [r7, #15]
 8004a60:	e00d      	b.n	8004a7e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	7bfb      	ldrb	r3, [r7, #15]
 8004a68:	3340      	adds	r3, #64	; 0x40
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	0c1b      	lsrs	r3, r3, #16
 8004a72:	68ba      	ldr	r2, [r7, #8]
 8004a74:	4413      	add	r3, r2
 8004a76:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004a78:	7bfb      	ldrb	r3, [r7, #15]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	73fb      	strb	r3, [r7, #15]
 8004a7e:	7bfa      	ldrb	r2, [r7, #15]
 8004a80:	78fb      	ldrb	r3, [r7, #3]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d3ec      	bcc.n	8004a62 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004a88:	883b      	ldrh	r3, [r7, #0]
 8004a8a:	0418      	lsls	r0, r3, #16
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6819      	ldr	r1, [r3, #0]
 8004a90:	78fb      	ldrb	r3, [r7, #3]
 8004a92:	3b01      	subs	r3, #1
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	4302      	orrs	r2, r0
 8004a98:	3340      	adds	r3, #64	; 0x40
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3714      	adds	r7, #20
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aac:	4770      	bx	lr

08004aae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004aae:	b480      	push	{r7}
 8004ab0:	b083      	sub	sp, #12
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
 8004ab6:	460b      	mov	r3, r1
 8004ab8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	887a      	ldrh	r2, [r7, #2]
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004ac2:	2300      	movs	r3, #0
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	460b      	mov	r3, r1
 8004ada:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d101      	bne.n	8004afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e25b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d075      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b06:	4ba3      	ldr	r3, [pc, #652]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 030c 	and.w	r3, r3, #12
 8004b0e:	2b04      	cmp	r3, #4
 8004b10:	d00c      	beq.n	8004b2c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b12:	4ba0      	ldr	r3, [pc, #640]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b1a:	2b08      	cmp	r3, #8
 8004b1c:	d112      	bne.n	8004b44 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b1e:	4b9d      	ldr	r3, [pc, #628]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b2a:	d10b      	bne.n	8004b44 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	4b99      	ldr	r3, [pc, #612]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d05b      	beq.n	8004bf0 <HAL_RCC_OscConfig+0x108>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	685b      	ldr	r3, [r3, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d157      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e236      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b4c:	d106      	bne.n	8004b5c <HAL_RCC_OscConfig+0x74>
 8004b4e:	4b91      	ldr	r3, [pc, #580]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4a90      	ldr	r2, [pc, #576]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e01d      	b.n	8004b98 <HAL_RCC_OscConfig+0xb0>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b64:	d10c      	bne.n	8004b80 <HAL_RCC_OscConfig+0x98>
 8004b66:	4b8b      	ldr	r3, [pc, #556]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	4a8a      	ldr	r2, [pc, #552]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	4b88      	ldr	r3, [pc, #544]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a87      	ldr	r2, [pc, #540]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b7c:	6013      	str	r3, [r2, #0]
 8004b7e:	e00b      	b.n	8004b98 <HAL_RCC_OscConfig+0xb0>
 8004b80:	4b84      	ldr	r3, [pc, #528]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a83      	ldr	r2, [pc, #524]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b8a:	6013      	str	r3, [r2, #0]
 8004b8c:	4b81      	ldr	r3, [pc, #516]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a80      	ldr	r2, [pc, #512]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004b92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d013      	beq.n	8004bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ba0:	f7fd f9ba 	bl	8001f18 <HAL_GetTick>
 8004ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ba6:	e008      	b.n	8004bba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ba8:	f7fd f9b6 	bl	8001f18 <HAL_GetTick>
 8004bac:	4602      	mov	r2, r0
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	2b64      	cmp	r3, #100	; 0x64
 8004bb4:	d901      	bls.n	8004bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bb6:	2303      	movs	r3, #3
 8004bb8:	e1fb      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bba:	4b76      	ldr	r3, [pc, #472]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0f0      	beq.n	8004ba8 <HAL_RCC_OscConfig+0xc0>
 8004bc6:	e014      	b.n	8004bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc8:	f7fd f9a6 	bl	8001f18 <HAL_GetTick>
 8004bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bce:	e008      	b.n	8004be2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bd0:	f7fd f9a2 	bl	8001f18 <HAL_GetTick>
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	1ad3      	subs	r3, r2, r3
 8004bda:	2b64      	cmp	r3, #100	; 0x64
 8004bdc:	d901      	bls.n	8004be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	e1e7      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004be2:	4b6c      	ldr	r3, [pc, #432]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1f0      	bne.n	8004bd0 <HAL_RCC_OscConfig+0xe8>
 8004bee:	e000      	b.n	8004bf2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d063      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bfe:	4b65      	ldr	r3, [pc, #404]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	f003 030c 	and.w	r3, r3, #12
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00b      	beq.n	8004c22 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c0a:	4b62      	ldr	r3, [pc, #392]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c12:	2b08      	cmp	r3, #8
 8004c14:	d11c      	bne.n	8004c50 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c16:	4b5f      	ldr	r3, [pc, #380]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d116      	bne.n	8004c50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c22:	4b5c      	ldr	r3, [pc, #368]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0302 	and.w	r3, r3, #2
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d005      	beq.n	8004c3a <HAL_RCC_OscConfig+0x152>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d001      	beq.n	8004c3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e1bb      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c3a:	4b56      	ldr	r3, [pc, #344]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	4952      	ldr	r1, [pc, #328]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c4e:	e03a      	b.n	8004cc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	68db      	ldr	r3, [r3, #12]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d020      	beq.n	8004c9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c58:	4b4f      	ldr	r3, [pc, #316]	; (8004d98 <HAL_RCC_OscConfig+0x2b0>)
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fd f95b 	bl	8001f18 <HAL_GetTick>
 8004c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c64:	e008      	b.n	8004c78 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c66:	f7fd f957 	bl	8001f18 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	2b02      	cmp	r3, #2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e19c      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c78:	4b46      	ldr	r3, [pc, #280]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d0f0      	beq.n	8004c66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c84:	4b43      	ldr	r3, [pc, #268]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	691b      	ldr	r3, [r3, #16]
 8004c90:	00db      	lsls	r3, r3, #3
 8004c92:	4940      	ldr	r1, [pc, #256]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004c94:	4313      	orrs	r3, r2
 8004c96:	600b      	str	r3, [r1, #0]
 8004c98:	e015      	b.n	8004cc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c9a:	4b3f      	ldr	r3, [pc, #252]	; (8004d98 <HAL_RCC_OscConfig+0x2b0>)
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ca0:	f7fd f93a 	bl	8001f18 <HAL_GetTick>
 8004ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	e008      	b.n	8004cba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca8:	f7fd f936 	bl	8001f18 <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d901      	bls.n	8004cba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e17b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cba:	4b36      	ldr	r3, [pc, #216]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0302 	and.w	r3, r3, #2
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1f0      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0308 	and.w	r3, r3, #8
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d030      	beq.n	8004d34 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d016      	beq.n	8004d08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cda:	4b30      	ldr	r3, [pc, #192]	; (8004d9c <HAL_RCC_OscConfig+0x2b4>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ce0:	f7fd f91a 	bl	8001f18 <HAL_GetTick>
 8004ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ce6:	e008      	b.n	8004cfa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ce8:	f7fd f916 	bl	8001f18 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d901      	bls.n	8004cfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	e15b      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cfa:	4b26      	ldr	r3, [pc, #152]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	f003 0302 	and.w	r3, r3, #2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d0f0      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x200>
 8004d06:	e015      	b.n	8004d34 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d08:	4b24      	ldr	r3, [pc, #144]	; (8004d9c <HAL_RCC_OscConfig+0x2b4>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d0e:	f7fd f903 	bl	8001f18 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d16:	f7fd f8ff 	bl	8001f18 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e144      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d28:	4b1a      	ldr	r3, [pc, #104]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004d2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80a0 	beq.w	8004e82 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d42:	2300      	movs	r3, #0
 8004d44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d10f      	bne.n	8004d72 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d52:	2300      	movs	r3, #0
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	4b0f      	ldr	r3, [pc, #60]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	4a0e      	ldr	r2, [pc, #56]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d60:	6413      	str	r3, [r2, #64]	; 0x40
 8004d62:	4b0c      	ldr	r3, [pc, #48]	; (8004d94 <HAL_RCC_OscConfig+0x2ac>)
 8004d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d6a:	60bb      	str	r3, [r7, #8]
 8004d6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d72:	4b0b      	ldr	r3, [pc, #44]	; (8004da0 <HAL_RCC_OscConfig+0x2b8>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d121      	bne.n	8004dc2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d7e:	4b08      	ldr	r3, [pc, #32]	; (8004da0 <HAL_RCC_OscConfig+0x2b8>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a07      	ldr	r2, [pc, #28]	; (8004da0 <HAL_RCC_OscConfig+0x2b8>)
 8004d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d8a:	f7fd f8c5 	bl	8001f18 <HAL_GetTick>
 8004d8e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d90:	e011      	b.n	8004db6 <HAL_RCC_OscConfig+0x2ce>
 8004d92:	bf00      	nop
 8004d94:	40023800 	.word	0x40023800
 8004d98:	42470000 	.word	0x42470000
 8004d9c:	42470e80 	.word	0x42470e80
 8004da0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004da4:	f7fd f8b8 	bl	8001f18 <HAL_GetTick>
 8004da8:	4602      	mov	r2, r0
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	1ad3      	subs	r3, r2, r3
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d901      	bls.n	8004db6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004db2:	2303      	movs	r3, #3
 8004db4:	e0fd      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db6:	4b81      	ldr	r3, [pc, #516]	; (8004fbc <HAL_RCC_OscConfig+0x4d4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0f0      	beq.n	8004da4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d106      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x2f0>
 8004dca:	4b7d      	ldr	r3, [pc, #500]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dce:	4a7c      	ldr	r2, [pc, #496]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004dd0:	f043 0301 	orr.w	r3, r3, #1
 8004dd4:	6713      	str	r3, [r2, #112]	; 0x70
 8004dd6:	e01c      	b.n	8004e12 <HAL_RCC_OscConfig+0x32a>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b05      	cmp	r3, #5
 8004dde:	d10c      	bne.n	8004dfa <HAL_RCC_OscConfig+0x312>
 8004de0:	4b77      	ldr	r3, [pc, #476]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	4a76      	ldr	r2, [pc, #472]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004de6:	f043 0304 	orr.w	r3, r3, #4
 8004dea:	6713      	str	r3, [r2, #112]	; 0x70
 8004dec:	4b74      	ldr	r3, [pc, #464]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	4a73      	ldr	r2, [pc, #460]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004df2:	f043 0301 	orr.w	r3, r3, #1
 8004df6:	6713      	str	r3, [r2, #112]	; 0x70
 8004df8:	e00b      	b.n	8004e12 <HAL_RCC_OscConfig+0x32a>
 8004dfa:	4b71      	ldr	r3, [pc, #452]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfe:	4a70      	ldr	r2, [pc, #448]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	6713      	str	r3, [r2, #112]	; 0x70
 8004e06:	4b6e      	ldr	r3, [pc, #440]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	4a6d      	ldr	r2, [pc, #436]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004e0c:	f023 0304 	bic.w	r3, r3, #4
 8004e10:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d015      	beq.n	8004e46 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1a:	f7fd f87d 	bl	8001f18 <HAL_GetTick>
 8004e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e20:	e00a      	b.n	8004e38 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e22:	f7fd f879 	bl	8001f18 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e30:	4293      	cmp	r3, r2
 8004e32:	d901      	bls.n	8004e38 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e0bc      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	f003 0302 	and.w	r3, r3, #2
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d0ee      	beq.n	8004e22 <HAL_RCC_OscConfig+0x33a>
 8004e44:	e014      	b.n	8004e70 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e46:	f7fd f867 	bl	8001f18 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e4c:	e00a      	b.n	8004e64 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e4e:	f7fd f863 	bl	8001f18 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d901      	bls.n	8004e64 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e0a6      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e64:	4b56      	ldr	r3, [pc, #344]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e68:	f003 0302 	and.w	r3, r3, #2
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d1ee      	bne.n	8004e4e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e70:	7dfb      	ldrb	r3, [r7, #23]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d105      	bne.n	8004e82 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b52      	ldr	r3, [pc, #328]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7a:	4a51      	ldr	r2, [pc, #324]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e80:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	699b      	ldr	r3, [r3, #24]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 8092 	beq.w	8004fb0 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e8c:	4b4c      	ldr	r3, [pc, #304]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f003 030c 	and.w	r3, r3, #12
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d05c      	beq.n	8004f52 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d141      	bne.n	8004f24 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea0:	4b48      	ldr	r3, [pc, #288]	; (8004fc4 <HAL_RCC_OscConfig+0x4dc>)
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea6:	f7fd f837 	bl	8001f18 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fd f833 	bl	8001f18 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e078      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec0:	4b3f      	ldr	r3, [pc, #252]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1f0      	bne.n	8004eae <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	69da      	ldr	r2, [r3, #28]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6a1b      	ldr	r3, [r3, #32]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eda:	019b      	lsls	r3, r3, #6
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	041b      	lsls	r3, r3, #16
 8004ee8:	431a      	orrs	r2, r3
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eee:	061b      	lsls	r3, r3, #24
 8004ef0:	4933      	ldr	r1, [pc, #204]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ef6:	4b33      	ldr	r3, [pc, #204]	; (8004fc4 <HAL_RCC_OscConfig+0x4dc>)
 8004ef8:	2201      	movs	r2, #1
 8004efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004efc:	f7fd f80c 	bl	8001f18 <HAL_GetTick>
 8004f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f02:	e008      	b.n	8004f16 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f04:	f7fd f808 	bl	8001f18 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d901      	bls.n	8004f16 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e04d      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	4b2a      	ldr	r3, [pc, #168]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0f0      	beq.n	8004f04 <HAL_RCC_OscConfig+0x41c>
 8004f22:	e045      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f24:	4b27      	ldr	r3, [pc, #156]	; (8004fc4 <HAL_RCC_OscConfig+0x4dc>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f2a:	f7fc fff5 	bl	8001f18 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fc fff1 	bl	8001f18 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e036      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f44:	4b1e      	ldr	r3, [pc, #120]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f0      	bne.n	8004f32 <HAL_RCC_OscConfig+0x44a>
 8004f50:	e02e      	b.n	8004fb0 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	699b      	ldr	r3, [r3, #24]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e029      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f5e:	4b18      	ldr	r3, [pc, #96]	; (8004fc0 <HAL_RCC_OscConfig+0x4d8>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	69db      	ldr	r3, [r3, #28]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d11c      	bne.n	8004fac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d115      	bne.n	8004fac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f86:	4013      	ands	r3, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d10d      	bne.n	8004fac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d106      	bne.n	8004fac <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3718      	adds	r7, #24
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	40007000 	.word	0x40007000
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	42470060 	.word	0x42470060

08004fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e0cc      	b.n	8005176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004fdc:	4b68      	ldr	r3, [pc, #416]	; (8005180 <HAL_RCC_ClockConfig+0x1b8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f003 030f 	and.w	r3, r3, #15
 8004fe4:	683a      	ldr	r2, [r7, #0]
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d90c      	bls.n	8005004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fea:	4b65      	ldr	r3, [pc, #404]	; (8005180 <HAL_RCC_ClockConfig+0x1b8>)
 8004fec:	683a      	ldr	r2, [r7, #0]
 8004fee:	b2d2      	uxtb	r2, r2
 8004ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ff2:	4b63      	ldr	r3, [pc, #396]	; (8005180 <HAL_RCC_ClockConfig+0x1b8>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 030f 	and.w	r3, r3, #15
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d001      	beq.n	8005004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e0b8      	b.n	8005176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0302 	and.w	r3, r3, #2
 800500c:	2b00      	cmp	r3, #0
 800500e:	d020      	beq.n	8005052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b00      	cmp	r3, #0
 800501a:	d005      	beq.n	8005028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800501c:	4b59      	ldr	r3, [pc, #356]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	4a58      	ldr	r2, [pc, #352]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0308 	and.w	r3, r3, #8
 8005030:	2b00      	cmp	r3, #0
 8005032:	d005      	beq.n	8005040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005034:	4b53      	ldr	r3, [pc, #332]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	4a52      	ldr	r2, [pc, #328]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 800503a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800503e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005040:	4b50      	ldr	r3, [pc, #320]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	494d      	ldr	r1, [pc, #308]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d044      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d107      	bne.n	8005076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005066:	4b47      	ldr	r3, [pc, #284]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800506e:	2b00      	cmp	r3, #0
 8005070:	d119      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005072:	2301      	movs	r3, #1
 8005074:	e07f      	b.n	8005176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d003      	beq.n	8005086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005082:	2b03      	cmp	r3, #3
 8005084:	d107      	bne.n	8005096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005086:	4b3f      	ldr	r3, [pc, #252]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d109      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e06f      	b.n	8005176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005096:	4b3b      	ldr	r3, [pc, #236]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d101      	bne.n	80050a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	e067      	b.n	8005176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050a6:	4b37      	ldr	r3, [pc, #220]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f023 0203 	bic.w	r2, r3, #3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	4934      	ldr	r1, [pc, #208]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050b8:	f7fc ff2e 	bl	8001f18 <HAL_GetTick>
 80050bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050be:	e00a      	b.n	80050d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050c0:	f7fc ff2a 	bl	8001f18 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e04f      	b.n	8005176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050d6:	4b2b      	ldr	r3, [pc, #172]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f003 020c 	and.w	r2, r3, #12
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d1eb      	bne.n	80050c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80050e8:	4b25      	ldr	r3, [pc, #148]	; (8005180 <HAL_RCC_ClockConfig+0x1b8>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	683a      	ldr	r2, [r7, #0]
 80050f2:	429a      	cmp	r2, r3
 80050f4:	d20c      	bcs.n	8005110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050f6:	4b22      	ldr	r3, [pc, #136]	; (8005180 <HAL_RCC_ClockConfig+0x1b8>)
 80050f8:	683a      	ldr	r2, [r7, #0]
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050fe:	4b20      	ldr	r3, [pc, #128]	; (8005180 <HAL_RCC_ClockConfig+0x1b8>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 030f 	and.w	r3, r3, #15
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	429a      	cmp	r2, r3
 800510a:	d001      	beq.n	8005110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e032      	b.n	8005176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f003 0304 	and.w	r3, r3, #4
 8005118:	2b00      	cmp	r3, #0
 800511a:	d008      	beq.n	800512e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800511c:	4b19      	ldr	r3, [pc, #100]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	4916      	ldr	r1, [pc, #88]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 800512a:	4313      	orrs	r3, r2
 800512c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d009      	beq.n	800514e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800513a:	4b12      	ldr	r3, [pc, #72]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	490e      	ldr	r1, [pc, #56]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	4313      	orrs	r3, r2
 800514c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800514e:	f000 f821 	bl	8005194 <HAL_RCC_GetSysClockFreq>
 8005152:	4601      	mov	r1, r0
 8005154:	4b0b      	ldr	r3, [pc, #44]	; (8005184 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	091b      	lsrs	r3, r3, #4
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	4a0a      	ldr	r2, [pc, #40]	; (8005188 <HAL_RCC_ClockConfig+0x1c0>)
 8005160:	5cd3      	ldrb	r3, [r2, r3]
 8005162:	fa21 f303 	lsr.w	r3, r1, r3
 8005166:	4a09      	ldr	r2, [pc, #36]	; (800518c <HAL_RCC_ClockConfig+0x1c4>)
 8005168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800516a:	4b09      	ldr	r3, [pc, #36]	; (8005190 <HAL_RCC_ClockConfig+0x1c8>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7fc fe8e 	bl	8001e90 <HAL_InitTick>

  return HAL_OK;
 8005174:	2300      	movs	r3, #0
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40023c00 	.word	0x40023c00
 8005184:	40023800 	.word	0x40023800
 8005188:	0800b304 	.word	0x0800b304
 800518c:	20000024 	.word	0x20000024
 8005190:	20000028 	.word	0x20000028

08005194 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800519a:	2300      	movs	r3, #0
 800519c:	607b      	str	r3, [r7, #4]
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
 80051a2:	2300      	movs	r3, #0
 80051a4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051aa:	4b63      	ldr	r3, [pc, #396]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	f003 030c 	and.w	r3, r3, #12
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d007      	beq.n	80051c6 <HAL_RCC_GetSysClockFreq+0x32>
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d008      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0x38>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	f040 80b4 	bne.w	8005328 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051c0:	4b5e      	ldr	r3, [pc, #376]	; (800533c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80051c2:	60bb      	str	r3, [r7, #8]
       break;
 80051c4:	e0b3      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051c6:	4b5e      	ldr	r3, [pc, #376]	; (8005340 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80051c8:	60bb      	str	r3, [r7, #8]
      break;
 80051ca:	e0b0      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051cc:	4b5a      	ldr	r3, [pc, #360]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051d4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d6:	4b58      	ldr	r3, [pc, #352]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d04a      	beq.n	8005278 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e2:	4b55      	ldr	r3, [pc, #340]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	099b      	lsrs	r3, r3, #6
 80051e8:	f04f 0400 	mov.w	r4, #0
 80051ec:	f240 11ff 	movw	r1, #511	; 0x1ff
 80051f0:	f04f 0200 	mov.w	r2, #0
 80051f4:	ea03 0501 	and.w	r5, r3, r1
 80051f8:	ea04 0602 	and.w	r6, r4, r2
 80051fc:	4629      	mov	r1, r5
 80051fe:	4632      	mov	r2, r6
 8005200:	f04f 0300 	mov.w	r3, #0
 8005204:	f04f 0400 	mov.w	r4, #0
 8005208:	0154      	lsls	r4, r2, #5
 800520a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800520e:	014b      	lsls	r3, r1, #5
 8005210:	4619      	mov	r1, r3
 8005212:	4622      	mov	r2, r4
 8005214:	1b49      	subs	r1, r1, r5
 8005216:	eb62 0206 	sbc.w	r2, r2, r6
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	f04f 0400 	mov.w	r4, #0
 8005222:	0194      	lsls	r4, r2, #6
 8005224:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005228:	018b      	lsls	r3, r1, #6
 800522a:	1a5b      	subs	r3, r3, r1
 800522c:	eb64 0402 	sbc.w	r4, r4, r2
 8005230:	f04f 0100 	mov.w	r1, #0
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	00e2      	lsls	r2, r4, #3
 800523a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800523e:	00d9      	lsls	r1, r3, #3
 8005240:	460b      	mov	r3, r1
 8005242:	4614      	mov	r4, r2
 8005244:	195b      	adds	r3, r3, r5
 8005246:	eb44 0406 	adc.w	r4, r4, r6
 800524a:	f04f 0100 	mov.w	r1, #0
 800524e:	f04f 0200 	mov.w	r2, #0
 8005252:	0262      	lsls	r2, r4, #9
 8005254:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005258:	0259      	lsls	r1, r3, #9
 800525a:	460b      	mov	r3, r1
 800525c:	4614      	mov	r4, r2
 800525e:	4618      	mov	r0, r3
 8005260:	4621      	mov	r1, r4
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f04f 0400 	mov.w	r4, #0
 8005268:	461a      	mov	r2, r3
 800526a:	4623      	mov	r3, r4
 800526c:	f7fb fc5e 	bl	8000b2c <__aeabi_uldivmod>
 8005270:	4603      	mov	r3, r0
 8005272:	460c      	mov	r4, r1
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e049      	b.n	800530c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005278:	4b2f      	ldr	r3, [pc, #188]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	099b      	lsrs	r3, r3, #6
 800527e:	f04f 0400 	mov.w	r4, #0
 8005282:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005286:	f04f 0200 	mov.w	r2, #0
 800528a:	ea03 0501 	and.w	r5, r3, r1
 800528e:	ea04 0602 	and.w	r6, r4, r2
 8005292:	4629      	mov	r1, r5
 8005294:	4632      	mov	r2, r6
 8005296:	f04f 0300 	mov.w	r3, #0
 800529a:	f04f 0400 	mov.w	r4, #0
 800529e:	0154      	lsls	r4, r2, #5
 80052a0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80052a4:	014b      	lsls	r3, r1, #5
 80052a6:	4619      	mov	r1, r3
 80052a8:	4622      	mov	r2, r4
 80052aa:	1b49      	subs	r1, r1, r5
 80052ac:	eb62 0206 	sbc.w	r2, r2, r6
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	f04f 0400 	mov.w	r4, #0
 80052b8:	0194      	lsls	r4, r2, #6
 80052ba:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80052be:	018b      	lsls	r3, r1, #6
 80052c0:	1a5b      	subs	r3, r3, r1
 80052c2:	eb64 0402 	sbc.w	r4, r4, r2
 80052c6:	f04f 0100 	mov.w	r1, #0
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	00e2      	lsls	r2, r4, #3
 80052d0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80052d4:	00d9      	lsls	r1, r3, #3
 80052d6:	460b      	mov	r3, r1
 80052d8:	4614      	mov	r4, r2
 80052da:	195b      	adds	r3, r3, r5
 80052dc:	eb44 0406 	adc.w	r4, r4, r6
 80052e0:	f04f 0100 	mov.w	r1, #0
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	02a2      	lsls	r2, r4, #10
 80052ea:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80052ee:	0299      	lsls	r1, r3, #10
 80052f0:	460b      	mov	r3, r1
 80052f2:	4614      	mov	r4, r2
 80052f4:	4618      	mov	r0, r3
 80052f6:	4621      	mov	r1, r4
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f04f 0400 	mov.w	r4, #0
 80052fe:	461a      	mov	r2, r3
 8005300:	4623      	mov	r3, r4
 8005302:	f7fb fc13 	bl	8000b2c <__aeabi_uldivmod>
 8005306:	4603      	mov	r3, r0
 8005308:	460c      	mov	r4, r1
 800530a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800530c:	4b0a      	ldr	r3, [pc, #40]	; (8005338 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	0c1b      	lsrs	r3, r3, #16
 8005312:	f003 0303 	and.w	r3, r3, #3
 8005316:	3301      	adds	r3, #1
 8005318:	005b      	lsls	r3, r3, #1
 800531a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	fbb2 f3f3 	udiv	r3, r2, r3
 8005324:	60bb      	str	r3, [r7, #8]
      break;
 8005326:	e002      	b.n	800532e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005328:	4b04      	ldr	r3, [pc, #16]	; (800533c <HAL_RCC_GetSysClockFreq+0x1a8>)
 800532a:	60bb      	str	r3, [r7, #8]
      break;
 800532c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800532e:	68bb      	ldr	r3, [r7, #8]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005338:	40023800 	.word	0x40023800
 800533c:	00f42400 	.word	0x00f42400
 8005340:	007a1200 	.word	0x007a1200

08005344 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <HAL_RCC_GetHCLKFreq+0x14>)
 800534a:	681b      	ldr	r3, [r3, #0]
}
 800534c:	4618      	mov	r0, r3
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000024 	.word	0x20000024

0800535c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005360:	f7ff fff0 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 8005364:	4601      	mov	r1, r0
 8005366:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	0a9b      	lsrs	r3, r3, #10
 800536c:	f003 0307 	and.w	r3, r3, #7
 8005370:	4a03      	ldr	r2, [pc, #12]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005372:	5cd3      	ldrb	r3, [r2, r3]
 8005374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	bd80      	pop	{r7, pc}
 800537c:	40023800 	.word	0x40023800
 8005380:	0800b314 	.word	0x0800b314

08005384 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005388:	f7ff ffdc 	bl	8005344 <HAL_RCC_GetHCLKFreq>
 800538c:	4601      	mov	r1, r0
 800538e:	4b05      	ldr	r3, [pc, #20]	; (80053a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	0b5b      	lsrs	r3, r3, #13
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	4a03      	ldr	r2, [pc, #12]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800539a:	5cd3      	ldrb	r3, [r2, r3]
 800539c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40023800 	.word	0x40023800
 80053a8:	0800b314 	.word	0x0800b314

080053ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e01d      	b.n	80053fa <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d106      	bne.n	80053d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053d2:	6878      	ldr	r0, [r7, #4]
 80053d4:	f7fc fb94 	bl	8001b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2202      	movs	r2, #2
 80053dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681a      	ldr	r2, [r3, #0]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	3304      	adds	r3, #4
 80053e8:	4619      	mov	r1, r3
 80053ea:	4610      	mov	r0, r2
 80053ec:	f000 f8e4 	bl	80055b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3708      	adds	r7, #8
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005402:	b480      	push	{r7}
 8005404:	b085      	sub	sp, #20
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2202      	movs	r2, #2
 800540e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f003 0307 	and.w	r3, r3, #7
 800541c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2b06      	cmp	r3, #6
 8005422:	d007      	beq.n	8005434 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f042 0201 	orr.w	r2, r2, #1
 8005432:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800543c:	2300      	movs	r3, #0
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b084      	sub	sp, #16
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
 8005452:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <HAL_TIM_ConfigClockSource+0x18>
 800545e:	2302      	movs	r3, #2
 8005460:	e0a6      	b.n	80055b0 <HAL_TIM_ConfigClockSource+0x166>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2201      	movs	r2, #1
 8005466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2202      	movs	r2, #2
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005480:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005488:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68fa      	ldr	r2, [r7, #12]
 8005490:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d067      	beq.n	800556a <HAL_TIM_ConfigClockSource+0x120>
 800549a:	2b40      	cmp	r3, #64	; 0x40
 800549c:	d80b      	bhi.n	80054b6 <HAL_TIM_ConfigClockSource+0x6c>
 800549e:	2b10      	cmp	r3, #16
 80054a0:	d073      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x140>
 80054a2:	2b10      	cmp	r3, #16
 80054a4:	d802      	bhi.n	80054ac <HAL_TIM_ConfigClockSource+0x62>
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d06f      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80054aa:	e078      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054ac:	2b20      	cmp	r3, #32
 80054ae:	d06c      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x140>
 80054b0:	2b30      	cmp	r3, #48	; 0x30
 80054b2:	d06a      	beq.n	800558a <HAL_TIM_ConfigClockSource+0x140>
      break;
 80054b4:	e073      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054b6:	2b70      	cmp	r3, #112	; 0x70
 80054b8:	d00d      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x8c>
 80054ba:	2b70      	cmp	r3, #112	; 0x70
 80054bc:	d804      	bhi.n	80054c8 <HAL_TIM_ConfigClockSource+0x7e>
 80054be:	2b50      	cmp	r3, #80	; 0x50
 80054c0:	d033      	beq.n	800552a <HAL_TIM_ConfigClockSource+0xe0>
 80054c2:	2b60      	cmp	r3, #96	; 0x60
 80054c4:	d041      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x100>
      break;
 80054c6:	e06a      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80054c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054cc:	d066      	beq.n	800559c <HAL_TIM_ConfigClockSource+0x152>
 80054ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d2:	d017      	beq.n	8005504 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80054d4:	e063      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6899      	ldr	r1, [r3, #8]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	68db      	ldr	r3, [r3, #12]
 80054e6:	f000 f981 	bl	80057ec <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054f8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68fa      	ldr	r2, [r7, #12]
 8005500:	609a      	str	r2, [r3, #8]
      break;
 8005502:	e04c      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6818      	ldr	r0, [r3, #0]
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	6899      	ldr	r1, [r3, #8]
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	685a      	ldr	r2, [r3, #4]
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	f000 f96a 	bl	80057ec <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005526:	609a      	str	r2, [r3, #8]
      break;
 8005528:	e039      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	461a      	mov	r2, r3
 8005538:	f000 f8de 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2150      	movs	r1, #80	; 0x50
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f937 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005548:	e029      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6818      	ldr	r0, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	6859      	ldr	r1, [r3, #4]
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	461a      	mov	r2, r3
 8005558:	f000 f8fd 	bl	8005756 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2160      	movs	r1, #96	; 0x60
 8005562:	4618      	mov	r0, r3
 8005564:	f000 f927 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005568:	e019      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6818      	ldr	r0, [r3, #0]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	6859      	ldr	r1, [r3, #4]
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	461a      	mov	r2, r3
 8005578:	f000 f8be 	bl	80056f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	2140      	movs	r1, #64	; 0x40
 8005582:	4618      	mov	r0, r3
 8005584:	f000 f917 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 8005588:	e009      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4619      	mov	r1, r3
 8005594:	4610      	mov	r0, r2
 8005596:	f000 f90e 	bl	80057b6 <TIM_ITRx_SetConfig>
      break;
 800559a:	e000      	b.n	800559e <HAL_TIM_ConfigClockSource+0x154>
      break;
 800559c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	3710      	adds	r7, #16
 80055b4:	46bd      	mov	sp, r7
 80055b6:	bd80      	pop	{r7, pc}

080055b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a40      	ldr	r2, [pc, #256]	; (80056cc <TIM_Base_SetConfig+0x114>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055d6:	d00f      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3d      	ldr	r2, [pc, #244]	; (80056d0 <TIM_Base_SetConfig+0x118>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d00b      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a3c      	ldr	r2, [pc, #240]	; (80056d4 <TIM_Base_SetConfig+0x11c>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d007      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a3b      	ldr	r2, [pc, #236]	; (80056d8 <TIM_Base_SetConfig+0x120>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d003      	beq.n	80055f8 <TIM_Base_SetConfig+0x40>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a3a      	ldr	r2, [pc, #232]	; (80056dc <TIM_Base_SetConfig+0x124>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d108      	bne.n	800560a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2f      	ldr	r2, [pc, #188]	; (80056cc <TIM_Base_SetConfig+0x114>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d02b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005618:	d027      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a2c      	ldr	r2, [pc, #176]	; (80056d0 <TIM_Base_SetConfig+0x118>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d023      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a2b      	ldr	r2, [pc, #172]	; (80056d4 <TIM_Base_SetConfig+0x11c>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01f      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a2a      	ldr	r2, [pc, #168]	; (80056d8 <TIM_Base_SetConfig+0x120>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d01b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a29      	ldr	r2, [pc, #164]	; (80056dc <TIM_Base_SetConfig+0x124>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d017      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a28      	ldr	r2, [pc, #160]	; (80056e0 <TIM_Base_SetConfig+0x128>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d013      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a27      	ldr	r2, [pc, #156]	; (80056e4 <TIM_Base_SetConfig+0x12c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d00f      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <TIM_Base_SetConfig+0x130>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00b      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a25      	ldr	r2, [pc, #148]	; (80056ec <TIM_Base_SetConfig+0x134>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d007      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a24      	ldr	r2, [pc, #144]	; (80056f0 <TIM_Base_SetConfig+0x138>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d003      	beq.n	800566a <TIM_Base_SetConfig+0xb2>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a23      	ldr	r2, [pc, #140]	; (80056f4 <TIM_Base_SetConfig+0x13c>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d108      	bne.n	800567c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	689a      	ldr	r2, [r3, #8]
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	4a0a      	ldr	r2, [pc, #40]	; (80056cc <TIM_Base_SetConfig+0x114>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d003      	beq.n	80056b0 <TIM_Base_SetConfig+0xf8>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4a0c      	ldr	r2, [pc, #48]	; (80056dc <TIM_Base_SetConfig+0x124>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d103      	bne.n	80056b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	615a      	str	r2, [r3, #20]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40000400 	.word	0x40000400
 80056d4:	40000800 	.word	0x40000800
 80056d8:	40000c00 	.word	0x40000c00
 80056dc:	40010400 	.word	0x40010400
 80056e0:	40014000 	.word	0x40014000
 80056e4:	40014400 	.word	0x40014400
 80056e8:	40014800 	.word	0x40014800
 80056ec:	40001800 	.word	0x40001800
 80056f0:	40001c00 	.word	0x40001c00
 80056f4:	40002000 	.word	0x40002000

080056f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b087      	sub	sp, #28
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	f023 0201 	bic.w	r2, r3, #1
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	699b      	ldr	r3, [r3, #24]
 800571a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	011b      	lsls	r3, r3, #4
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f023 030a 	bic.w	r3, r3, #10
 8005734:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	693a      	ldr	r2, [r7, #16]
 8005742:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	621a      	str	r2, [r3, #32]
}
 800574a:	bf00      	nop
 800574c:	371c      	adds	r7, #28
 800574e:	46bd      	mov	sp, r7
 8005750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005754:	4770      	bx	lr

08005756 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005756:	b480      	push	{r7}
 8005758:	b087      	sub	sp, #28
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	f023 0210 	bic.w	r2, r3, #16
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1b      	ldr	r3, [r3, #32]
 8005778:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005780:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	031b      	lsls	r3, r3, #12
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	4313      	orrs	r3, r2
 800578a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800578c:	693b      	ldr	r3, [r7, #16]
 800578e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005792:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	011b      	lsls	r3, r3, #4
 8005798:	693a      	ldr	r2, [r7, #16]
 800579a:	4313      	orrs	r3, r2
 800579c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	697a      	ldr	r2, [r7, #20]
 80057a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	693a      	ldr	r2, [r7, #16]
 80057a8:	621a      	str	r2, [r3, #32]
}
 80057aa:	bf00      	nop
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b085      	sub	sp, #20
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ce:	683a      	ldr	r2, [r7, #0]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	f043 0307 	orr.w	r3, r3, #7
 80057d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	609a      	str	r2, [r3, #8]
}
 80057e0:	bf00      	nop
 80057e2:	3714      	adds	r7, #20
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]
 80057f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	021a      	lsls	r2, r3, #8
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	431a      	orrs	r2, r3
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	4313      	orrs	r3, r2
 8005814:	697a      	ldr	r2, [r7, #20]
 8005816:	4313      	orrs	r3, r2
 8005818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	609a      	str	r2, [r3, #8]
}
 8005820:	bf00      	nop
 8005822:	371c      	adds	r7, #28
 8005824:	46bd      	mov	sp, r7
 8005826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582a:	4770      	bx	lr

0800582c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005840:	2302      	movs	r3, #2
 8005842:	e05a      	b.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800586a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4313      	orrs	r3, r2
 8005874:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a21      	ldr	r2, [pc, #132]	; (8005908 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d022      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005890:	d01d      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1d      	ldr	r2, [pc, #116]	; (800590c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d018      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1b      	ldr	r2, [pc, #108]	; (8005910 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d013      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1a      	ldr	r2, [pc, #104]	; (8005914 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d00e      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a18      	ldr	r2, [pc, #96]	; (8005918 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d009      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a17      	ldr	r2, [pc, #92]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d004      	beq.n	80058ce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a15      	ldr	r2, [pc, #84]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d10c      	bne.n	80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4313      	orrs	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68ba      	ldr	r2, [r7, #8]
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40010000 	.word	0x40010000
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	40010400 	.word	0x40010400
 800591c:	40014000 	.word	0x40014000
 8005920:	40001800 	.word	0x40001800

08005924 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e03f      	b.n	80059b6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800593c:	b2db      	uxtb	r3, r3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f7fc f962 	bl	8001c14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2224      	movs	r2, #36	; 0x24
 8005954:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	68da      	ldr	r2, [r3, #12]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005966:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f000 fc2d 	bl	80061c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691a      	ldr	r2, [r3, #16]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800597c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	695a      	ldr	r2, [r3, #20]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800598c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	68da      	ldr	r2, [r3, #12]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800599c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2200      	movs	r2, #0
 80059a2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2220      	movs	r2, #32
 80059a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
	...

080059c0 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b086      	sub	sp, #24
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	2b20      	cmp	r3, #32
 80059d8:	d153      	bne.n	8005a82 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d002      	beq.n	80059e6 <HAL_UART_Transmit_DMA+0x26>
 80059e0:	88fb      	ldrh	r3, [r7, #6]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e04c      	b.n	8005a84 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d101      	bne.n	80059f8 <HAL_UART_Transmit_DMA+0x38>
 80059f4:	2302      	movs	r3, #2
 80059f6:	e045      	b.n	8005a84 <HAL_UART_Transmit_DMA+0xc4>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2201      	movs	r2, #1
 80059fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005a00:	68ba      	ldr	r2, [r7, #8]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	88fa      	ldrh	r2, [r7, #6]
 8005a0a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	88fa      	ldrh	r2, [r7, #6]
 8005a10:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2200      	movs	r2, #0
 8005a16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2221      	movs	r2, #33	; 0x21
 8005a1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a24:	4a19      	ldr	r2, [pc, #100]	; (8005a8c <HAL_UART_Transmit_DMA+0xcc>)
 8005a26:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2c:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <HAL_UART_Transmit_DMA+0xd0>)
 8005a2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	4a17      	ldr	r2, [pc, #92]	; (8005a94 <HAL_UART_Transmit_DMA+0xd4>)
 8005a36:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005a40:	f107 0308 	add.w	r3, r7, #8
 8005a44:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	6819      	ldr	r1, [r3, #0]
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3304      	adds	r3, #4
 8005a54:	461a      	mov	r2, r3
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	f7fd f884 	bl	8002b64 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a64:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695a      	ldr	r2, [r3, #20]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005a7c:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	e000      	b.n	8005a84 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8005a82:	2302      	movs	r3, #2
  }
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	08005dd5 	.word	0x08005dd5
 8005a90:	08005e27 	.word	0x08005e27
 8005a94:	08005ec7 	.word	0x08005ec7

08005a98 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b086      	sub	sp, #24
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005aac:	b2db      	uxtb	r3, r3
 8005aae:	2b20      	cmp	r3, #32
 8005ab0:	d166      	bne.n	8005b80 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <HAL_UART_Receive_DMA+0x26>
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e05f      	b.n	8005b82 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d101      	bne.n	8005ad0 <HAL_UART_Receive_DMA+0x38>
 8005acc:	2302      	movs	r3, #2
 8005ace:	e058      	b.n	8005b82 <HAL_UART_Receive_DMA+0xea>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	88fa      	ldrh	r2, [r7, #6]
 8005ae2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2222      	movs	r2, #34	; 0x22
 8005aee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	4a25      	ldr	r2, [pc, #148]	; (8005b8c <HAL_UART_Receive_DMA+0xf4>)
 8005af8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afe:	4a24      	ldr	r2, [pc, #144]	; (8005b90 <HAL_UART_Receive_DMA+0xf8>)
 8005b00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b06:	4a23      	ldr	r2, [pc, #140]	; (8005b94 <HAL_UART_Receive_DMA+0xfc>)
 8005b08:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b0e:	2200      	movs	r2, #0
 8005b10:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005b12:	f107 0308 	add.w	r3, r7, #8
 8005b16:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	3304      	adds	r3, #4
 8005b22:	4619      	mov	r1, r3
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	88fb      	ldrh	r3, [r7, #6]
 8005b2a:	f7fd f81b 	bl	8002b64 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005b2e:	2300      	movs	r3, #0
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	613b      	str	r3, [r7, #16]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	685b      	ldr	r3, [r3, #4]
 8005b40:	613b      	str	r3, [r7, #16]
 8005b42:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	68da      	ldr	r2, [r3, #12]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	695a      	ldr	r2, [r3, #20]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0201 	orr.w	r2, r2, #1
 8005b6a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695a      	ldr	r2, [r3, #20]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b7a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	e000      	b.n	8005b82 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005b80:	2302      	movs	r3, #2
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	08005e43 	.word	0x08005e43
 8005b90:	08005eab 	.word	0x08005eab
 8005b94:	08005ec7 	.word	0x08005ec7

08005b98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b088      	sub	sp, #32
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	f003 030f 	and.w	r3, r3, #15
 8005bc6:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8005bc8:	693b      	ldr	r3, [r7, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d10d      	bne.n	8005bea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	f003 0320 	and.w	r3, r3, #32
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d008      	beq.n	8005bea <HAL_UART_IRQHandler+0x52>
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f003 0320 	and.w	r3, r3, #32
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 fa6f 	bl	80060c6 <UART_Receive_IT>
      return;
 8005be8:	e0d1      	b.n	8005d8e <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	f000 80b0 	beq.w	8005d52 <HAL_UART_IRQHandler+0x1ba>
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_UART_IRQHandler+0x70>
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80a5 	beq.w	8005d52 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d00a      	beq.n	8005c28 <HAL_UART_IRQHandler+0x90>
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d005      	beq.n	8005c28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c20:	f043 0201 	orr.w	r2, r3, #1
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	f003 0304 	and.w	r3, r3, #4
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00a      	beq.n	8005c48 <HAL_UART_IRQHandler+0xb0>
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d005      	beq.n	8005c48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c40:	f043 0202 	orr.w	r2, r3, #2
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	f003 0302 	and.w	r3, r3, #2
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00a      	beq.n	8005c68 <HAL_UART_IRQHandler+0xd0>
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f003 0301 	and.w	r3, r3, #1
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c60:	f043 0204 	orr.w	r2, r3, #4
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005c68:	69fb      	ldr	r3, [r7, #28]
 8005c6a:	f003 0308 	and.w	r3, r3, #8
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00f      	beq.n	8005c92 <HAL_UART_IRQHandler+0xfa>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	f003 0320 	and.w	r3, r3, #32
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <HAL_UART_IRQHandler+0xee>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d005      	beq.n	8005c92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8a:	f043 0208 	orr.w	r2, r3, #8
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d078      	beq.n	8005d8c <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	f003 0320 	and.w	r3, r3, #32
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x11c>
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	f003 0320 	and.w	r3, r3, #32
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d002      	beq.n	8005cb4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 fa09 	bl	80060c6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b40      	cmp	r3, #64	; 0x40
 8005cc0:	bf0c      	ite	eq
 8005cc2:	2301      	moveq	r3, #1
 8005cc4:	2300      	movne	r3, #0
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d102      	bne.n	8005cdc <HAL_UART_IRQHandler+0x144>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d031      	beq.n	8005d40 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f000 f952 	bl	8005f86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
 8005ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cec:	2b40      	cmp	r3, #64	; 0x40
 8005cee:	d123      	bne.n	8005d38 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cfe:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d013      	beq.n	8005d30 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d0c:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <HAL_UART_IRQHandler+0x1fc>)
 8005d0e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fc ff7d 	bl	8002c14 <HAL_DMA_Abort_IT>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d016      	beq.n	8005d4e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005d2a:	4610      	mov	r0, r2
 8005d2c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d2e:	e00e      	b.n	8005d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f845 	bl	8005dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d36:	e00a      	b.n	8005d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f000 f841 	bl	8005dc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3e:	e006      	b.n	8005d4e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f83d 	bl	8005dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005d4c:	e01e      	b.n	8005d8c <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d4e:	bf00      	nop
    return;
 8005d50:	e01c      	b.n	8005d8c <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d008      	beq.n	8005d6e <HAL_UART_IRQHandler+0x1d6>
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d003      	beq.n	8005d6e <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f000 f93f 	bl	8005fea <UART_Transmit_IT>
    return;
 8005d6c:	e00f      	b.n	8005d8e <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d6e:	69fb      	ldr	r3, [r7, #28]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_UART_IRQHandler+0x1f6>
 8005d78:	69bb      	ldr	r3, [r7, #24]
 8005d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 f987 	bl	8006096 <UART_EndTransmit_IT>
    return;
 8005d88:	bf00      	nop
 8005d8a:	e000      	b.n	8005d8e <HAL_UART_IRQHandler+0x1f6>
    return;
 8005d8c:	bf00      	nop
  }
}
 8005d8e:	3720      	adds	r7, #32
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	08005fc3 	.word	0x08005fc3

08005d98 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d113      	bne.n	8005e18 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e04:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e14:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e16:	e002      	b.n	8005e1e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8005e18:	68f8      	ldr	r0, [r7, #12]
 8005e1a:	f7fb fc1f 	bl	800165c <HAL_UART_TxCpltCallback>
}
 8005e1e:	bf00      	nop
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e34:	68f8      	ldr	r0, [r7, #12]
 8005e36:	f7ff ffaf 	bl	8005d98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e3a:	bf00      	nop
 8005e3c:	3710      	adds	r7, #16
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd80      	pop	{r7, pc}

08005e42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e42:	b580      	push	{r7, lr}
 8005e44:	b084      	sub	sp, #16
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d11e      	bne.n	8005e9c <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68da      	ldr	r2, [r3, #12]
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e72:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	695a      	ldr	r2, [r3, #20]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f022 0201 	bic.w	r2, r2, #1
 8005e82:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695a      	ldr	r2, [r3, #20]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e92:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2220      	movs	r2, #32
 8005e98:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8005e9c:	68f8      	ldr	r0, [r7, #12]
 8005e9e:	f7fb fbcb 	bl	8001638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ea2:	bf00      	nop
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005eb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	f7ff ff77 	bl	8005dac <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ebe:	bf00      	nop
 8005ec0:	3710      	adds	r7, #16
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b084      	sub	sp, #16
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee2:	2b80      	cmp	r3, #128	; 0x80
 8005ee4:	bf0c      	ite	eq
 8005ee6:	2301      	moveq	r3, #1
 8005ee8:	2300      	movne	r3, #0
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b21      	cmp	r3, #33	; 0x21
 8005ef8:	d108      	bne.n	8005f0c <UART_DMAError+0x46>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d005      	beq.n	8005f0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	2200      	movs	r2, #0
 8005f04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005f06:	68b8      	ldr	r0, [r7, #8]
 8005f08:	f000 f827 	bl	8005f5a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b40      	cmp	r3, #64	; 0x40
 8005f18:	bf0c      	ite	eq
 8005f1a:	2301      	moveq	r3, #1
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b22      	cmp	r3, #34	; 0x22
 8005f2c:	d108      	bne.n	8005f40 <UART_DMAError+0x7a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d005      	beq.n	8005f40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	2200      	movs	r2, #0
 8005f38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005f3a:	68b8      	ldr	r0, [r7, #8]
 8005f3c:	f000 f823 	bl	8005f86 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f44:	f043 0210 	orr.w	r2, r3, #16
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005f4c:	68b8      	ldr	r0, [r7, #8]
 8005f4e:	f7ff ff37 	bl	8005dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005f52:	bf00      	nop
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68da      	ldr	r2, [r3, #12]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005f70:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2220      	movs	r2, #32
 8005f76:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b083      	sub	sp, #12
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	68da      	ldr	r2, [r3, #12]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f9c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	695a      	ldr	r2, [r3, #20]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0201 	bic.w	r2, r2, #1
 8005fac:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2220      	movs	r2, #32
 8005fb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005fb6:	bf00      	nop
 8005fb8:	370c      	adds	r7, #12
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr

08005fc2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005fc2:	b580      	push	{r7, lr}
 8005fc4:	b084      	sub	sp, #16
 8005fc6:	af00      	add	r7, sp, #0
 8005fc8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff feef 	bl	8005dc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005fe2:	bf00      	nop
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ff8:	b2db      	uxtb	r3, r3
 8005ffa:	2b21      	cmp	r3, #33	; 0x21
 8005ffc:	d144      	bne.n	8006088 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006006:	d11a      	bne.n	800603e <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	461a      	mov	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800601c:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d105      	bne.n	8006032 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a1b      	ldr	r3, [r3, #32]
 800602a:	1c9a      	adds	r2, r3, #2
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	621a      	str	r2, [r3, #32]
 8006030:	e00e      	b.n	8006050 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	621a      	str	r2, [r3, #32]
 800603c:	e008      	b.n	8006050 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a1b      	ldr	r3, [r3, #32]
 8006042:	1c59      	adds	r1, r3, #1
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6211      	str	r1, [r2, #32]
 8006048:	781a      	ldrb	r2, [r3, #0]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29b      	uxth	r3, r3
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	4619      	mov	r1, r3
 800605e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006060:	2b00      	cmp	r3, #0
 8006062:	d10f      	bne.n	8006084 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	68da      	ldr	r2, [r3, #12]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006072:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006082:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006084:	2300      	movs	r3, #0
 8006086:	e000      	b.n	800608a <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006088:	2302      	movs	r3, #2
  }
}
 800608a:	4618      	mov	r0, r3
 800608c:	3714      	adds	r7, #20
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b082      	sub	sp, #8
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2220      	movs	r2, #32
 80060b2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fb fad0 	bl	800165c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3708      	adds	r7, #8
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}

080060c6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060c6:	b580      	push	{r7, lr}
 80060c8:	b084      	sub	sp, #16
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	2b22      	cmp	r3, #34	; 0x22
 80060d8:	d171      	bne.n	80061be <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060e2:	d123      	bne.n	800612c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060e8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10e      	bne.n	8006110 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060fe:	b29a      	uxth	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006108:	1c9a      	adds	r2, r3, #2
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	629a      	str	r2, [r3, #40]	; 0x28
 800610e:	e029      	b.n	8006164 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	b29b      	uxth	r3, r3
 8006118:	b2db      	uxtb	r3, r3
 800611a:	b29a      	uxth	r2, r3
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006124:	1c5a      	adds	r2, r3, #1
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	629a      	str	r2, [r3, #40]	; 0x28
 800612a:	e01b      	b.n	8006164 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	691b      	ldr	r3, [r3, #16]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6858      	ldr	r0, [r3, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800613e:	1c59      	adds	r1, r3, #1
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6291      	str	r1, [r2, #40]	; 0x28
 8006144:	b2c2      	uxtb	r2, r0
 8006146:	701a      	strb	r2, [r3, #0]
 8006148:	e00c      	b.n	8006164 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006156:	1c58      	adds	r0, r3, #1
 8006158:	6879      	ldr	r1, [r7, #4]
 800615a:	6288      	str	r0, [r1, #40]	; 0x28
 800615c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006160:	b2d2      	uxtb	r2, r2
 8006162:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29b      	uxth	r3, r3
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	4619      	mov	r1, r3
 8006172:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006174:	2b00      	cmp	r3, #0
 8006176:	d120      	bne.n	80061ba <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0220 	bic.w	r2, r2, #32
 8006186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006196:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0201 	bic.w	r2, r2, #1
 80061a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fb fa41 	bl	8001638 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e002      	b.n	80061c0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	e000      	b.n	80061c0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80061be:	2302      	movs	r3, #2
  }
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3710      	adds	r7, #16
 80061c4:	46bd      	mov	sp, r7
 80061c6:	bd80      	pop	{r7, pc}

080061c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061cc:	b085      	sub	sp, #20
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68da      	ldr	r2, [r3, #12]
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689a      	ldr	r2, [r3, #8]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	431a      	orrs	r2, r3
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	695b      	ldr	r3, [r3, #20]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	69db      	ldr	r3, [r3, #28]
 80061fc:	4313      	orrs	r3, r2
 80061fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800620a:	f023 030c 	bic.w	r3, r3, #12
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	430b      	orrs	r3, r1
 8006216:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	695b      	ldr	r3, [r3, #20]
 800621e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	699a      	ldr	r2, [r3, #24]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	430a      	orrs	r2, r1
 800622c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	69db      	ldr	r3, [r3, #28]
 8006232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006236:	f040 818b 	bne.w	8006550 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4ac1      	ldr	r2, [pc, #772]	; (8006544 <UART_SetConfig+0x37c>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d005      	beq.n	8006250 <UART_SetConfig+0x88>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4abf      	ldr	r2, [pc, #764]	; (8006548 <UART_SetConfig+0x380>)
 800624a:	4293      	cmp	r3, r2
 800624c:	f040 80bd 	bne.w	80063ca <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006250:	f7ff f898 	bl	8005384 <HAL_RCC_GetPCLK2Freq>
 8006254:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	461d      	mov	r5, r3
 800625a:	f04f 0600 	mov.w	r6, #0
 800625e:	46a8      	mov	r8, r5
 8006260:	46b1      	mov	r9, r6
 8006262:	eb18 0308 	adds.w	r3, r8, r8
 8006266:	eb49 0409 	adc.w	r4, r9, r9
 800626a:	4698      	mov	r8, r3
 800626c:	46a1      	mov	r9, r4
 800626e:	eb18 0805 	adds.w	r8, r8, r5
 8006272:	eb49 0906 	adc.w	r9, r9, r6
 8006276:	f04f 0100 	mov.w	r1, #0
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006282:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006286:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800628a:	4688      	mov	r8, r1
 800628c:	4691      	mov	r9, r2
 800628e:	eb18 0005 	adds.w	r0, r8, r5
 8006292:	eb49 0106 	adc.w	r1, r9, r6
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	461d      	mov	r5, r3
 800629c:	f04f 0600 	mov.w	r6, #0
 80062a0:	196b      	adds	r3, r5, r5
 80062a2:	eb46 0406 	adc.w	r4, r6, r6
 80062a6:	461a      	mov	r2, r3
 80062a8:	4623      	mov	r3, r4
 80062aa:	f7fa fc3f 	bl	8000b2c <__aeabi_uldivmod>
 80062ae:	4603      	mov	r3, r0
 80062b0:	460c      	mov	r4, r1
 80062b2:	461a      	mov	r2, r3
 80062b4:	4ba5      	ldr	r3, [pc, #660]	; (800654c <UART_SetConfig+0x384>)
 80062b6:	fba3 2302 	umull	r2, r3, r3, r2
 80062ba:	095b      	lsrs	r3, r3, #5
 80062bc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	461d      	mov	r5, r3
 80062c4:	f04f 0600 	mov.w	r6, #0
 80062c8:	46a9      	mov	r9, r5
 80062ca:	46b2      	mov	sl, r6
 80062cc:	eb19 0309 	adds.w	r3, r9, r9
 80062d0:	eb4a 040a 	adc.w	r4, sl, sl
 80062d4:	4699      	mov	r9, r3
 80062d6:	46a2      	mov	sl, r4
 80062d8:	eb19 0905 	adds.w	r9, r9, r5
 80062dc:	eb4a 0a06 	adc.w	sl, sl, r6
 80062e0:	f04f 0100 	mov.w	r1, #0
 80062e4:	f04f 0200 	mov.w	r2, #0
 80062e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80062ec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80062f0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80062f4:	4689      	mov	r9, r1
 80062f6:	4692      	mov	sl, r2
 80062f8:	eb19 0005 	adds.w	r0, r9, r5
 80062fc:	eb4a 0106 	adc.w	r1, sl, r6
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	461d      	mov	r5, r3
 8006306:	f04f 0600 	mov.w	r6, #0
 800630a:	196b      	adds	r3, r5, r5
 800630c:	eb46 0406 	adc.w	r4, r6, r6
 8006310:	461a      	mov	r2, r3
 8006312:	4623      	mov	r3, r4
 8006314:	f7fa fc0a 	bl	8000b2c <__aeabi_uldivmod>
 8006318:	4603      	mov	r3, r0
 800631a:	460c      	mov	r4, r1
 800631c:	461a      	mov	r2, r3
 800631e:	4b8b      	ldr	r3, [pc, #556]	; (800654c <UART_SetConfig+0x384>)
 8006320:	fba3 1302 	umull	r1, r3, r3, r2
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	2164      	movs	r1, #100	; 0x64
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	3332      	adds	r3, #50	; 0x32
 8006332:	4a86      	ldr	r2, [pc, #536]	; (800654c <UART_SetConfig+0x384>)
 8006334:	fba2 2303 	umull	r2, r3, r2, r3
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	005b      	lsls	r3, r3, #1
 800633c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006340:	4498      	add	r8, r3
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	461d      	mov	r5, r3
 8006346:	f04f 0600 	mov.w	r6, #0
 800634a:	46a9      	mov	r9, r5
 800634c:	46b2      	mov	sl, r6
 800634e:	eb19 0309 	adds.w	r3, r9, r9
 8006352:	eb4a 040a 	adc.w	r4, sl, sl
 8006356:	4699      	mov	r9, r3
 8006358:	46a2      	mov	sl, r4
 800635a:	eb19 0905 	adds.w	r9, r9, r5
 800635e:	eb4a 0a06 	adc.w	sl, sl, r6
 8006362:	f04f 0100 	mov.w	r1, #0
 8006366:	f04f 0200 	mov.w	r2, #0
 800636a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800636e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006372:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006376:	4689      	mov	r9, r1
 8006378:	4692      	mov	sl, r2
 800637a:	eb19 0005 	adds.w	r0, r9, r5
 800637e:	eb4a 0106 	adc.w	r1, sl, r6
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	461d      	mov	r5, r3
 8006388:	f04f 0600 	mov.w	r6, #0
 800638c:	196b      	adds	r3, r5, r5
 800638e:	eb46 0406 	adc.w	r4, r6, r6
 8006392:	461a      	mov	r2, r3
 8006394:	4623      	mov	r3, r4
 8006396:	f7fa fbc9 	bl	8000b2c <__aeabi_uldivmod>
 800639a:	4603      	mov	r3, r0
 800639c:	460c      	mov	r4, r1
 800639e:	461a      	mov	r2, r3
 80063a0:	4b6a      	ldr	r3, [pc, #424]	; (800654c <UART_SetConfig+0x384>)
 80063a2:	fba3 1302 	umull	r1, r3, r3, r2
 80063a6:	095b      	lsrs	r3, r3, #5
 80063a8:	2164      	movs	r1, #100	; 0x64
 80063aa:	fb01 f303 	mul.w	r3, r1, r3
 80063ae:	1ad3      	subs	r3, r2, r3
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	3332      	adds	r3, #50	; 0x32
 80063b4:	4a65      	ldr	r2, [pc, #404]	; (800654c <UART_SetConfig+0x384>)
 80063b6:	fba2 2303 	umull	r2, r3, r2, r3
 80063ba:	095b      	lsrs	r3, r3, #5
 80063bc:	f003 0207 	and.w	r2, r3, #7
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	4442      	add	r2, r8
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	e26f      	b.n	80068aa <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ca:	f7fe ffc7 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 80063ce:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	461d      	mov	r5, r3
 80063d4:	f04f 0600 	mov.w	r6, #0
 80063d8:	46a8      	mov	r8, r5
 80063da:	46b1      	mov	r9, r6
 80063dc:	eb18 0308 	adds.w	r3, r8, r8
 80063e0:	eb49 0409 	adc.w	r4, r9, r9
 80063e4:	4698      	mov	r8, r3
 80063e6:	46a1      	mov	r9, r4
 80063e8:	eb18 0805 	adds.w	r8, r8, r5
 80063ec:	eb49 0906 	adc.w	r9, r9, r6
 80063f0:	f04f 0100 	mov.w	r1, #0
 80063f4:	f04f 0200 	mov.w	r2, #0
 80063f8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80063fc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006400:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006404:	4688      	mov	r8, r1
 8006406:	4691      	mov	r9, r2
 8006408:	eb18 0005 	adds.w	r0, r8, r5
 800640c:	eb49 0106 	adc.w	r1, r9, r6
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	461d      	mov	r5, r3
 8006416:	f04f 0600 	mov.w	r6, #0
 800641a:	196b      	adds	r3, r5, r5
 800641c:	eb46 0406 	adc.w	r4, r6, r6
 8006420:	461a      	mov	r2, r3
 8006422:	4623      	mov	r3, r4
 8006424:	f7fa fb82 	bl	8000b2c <__aeabi_uldivmod>
 8006428:	4603      	mov	r3, r0
 800642a:	460c      	mov	r4, r1
 800642c:	461a      	mov	r2, r3
 800642e:	4b47      	ldr	r3, [pc, #284]	; (800654c <UART_SetConfig+0x384>)
 8006430:	fba3 2302 	umull	r2, r3, r3, r2
 8006434:	095b      	lsrs	r3, r3, #5
 8006436:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	461d      	mov	r5, r3
 800643e:	f04f 0600 	mov.w	r6, #0
 8006442:	46a9      	mov	r9, r5
 8006444:	46b2      	mov	sl, r6
 8006446:	eb19 0309 	adds.w	r3, r9, r9
 800644a:	eb4a 040a 	adc.w	r4, sl, sl
 800644e:	4699      	mov	r9, r3
 8006450:	46a2      	mov	sl, r4
 8006452:	eb19 0905 	adds.w	r9, r9, r5
 8006456:	eb4a 0a06 	adc.w	sl, sl, r6
 800645a:	f04f 0100 	mov.w	r1, #0
 800645e:	f04f 0200 	mov.w	r2, #0
 8006462:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006466:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800646a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800646e:	4689      	mov	r9, r1
 8006470:	4692      	mov	sl, r2
 8006472:	eb19 0005 	adds.w	r0, r9, r5
 8006476:	eb4a 0106 	adc.w	r1, sl, r6
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	461d      	mov	r5, r3
 8006480:	f04f 0600 	mov.w	r6, #0
 8006484:	196b      	adds	r3, r5, r5
 8006486:	eb46 0406 	adc.w	r4, r6, r6
 800648a:	461a      	mov	r2, r3
 800648c:	4623      	mov	r3, r4
 800648e:	f7fa fb4d 	bl	8000b2c <__aeabi_uldivmod>
 8006492:	4603      	mov	r3, r0
 8006494:	460c      	mov	r4, r1
 8006496:	461a      	mov	r2, r3
 8006498:	4b2c      	ldr	r3, [pc, #176]	; (800654c <UART_SetConfig+0x384>)
 800649a:	fba3 1302 	umull	r1, r3, r3, r2
 800649e:	095b      	lsrs	r3, r3, #5
 80064a0:	2164      	movs	r1, #100	; 0x64
 80064a2:	fb01 f303 	mul.w	r3, r1, r3
 80064a6:	1ad3      	subs	r3, r2, r3
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	3332      	adds	r3, #50	; 0x32
 80064ac:	4a27      	ldr	r2, [pc, #156]	; (800654c <UART_SetConfig+0x384>)
 80064ae:	fba2 2303 	umull	r2, r3, r2, r3
 80064b2:	095b      	lsrs	r3, r3, #5
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064ba:	4498      	add	r8, r3
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	461d      	mov	r5, r3
 80064c0:	f04f 0600 	mov.w	r6, #0
 80064c4:	46a9      	mov	r9, r5
 80064c6:	46b2      	mov	sl, r6
 80064c8:	eb19 0309 	adds.w	r3, r9, r9
 80064cc:	eb4a 040a 	adc.w	r4, sl, sl
 80064d0:	4699      	mov	r9, r3
 80064d2:	46a2      	mov	sl, r4
 80064d4:	eb19 0905 	adds.w	r9, r9, r5
 80064d8:	eb4a 0a06 	adc.w	sl, sl, r6
 80064dc:	f04f 0100 	mov.w	r1, #0
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80064e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80064ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80064f0:	4689      	mov	r9, r1
 80064f2:	4692      	mov	sl, r2
 80064f4:	eb19 0005 	adds.w	r0, r9, r5
 80064f8:	eb4a 0106 	adc.w	r1, sl, r6
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	461d      	mov	r5, r3
 8006502:	f04f 0600 	mov.w	r6, #0
 8006506:	196b      	adds	r3, r5, r5
 8006508:	eb46 0406 	adc.w	r4, r6, r6
 800650c:	461a      	mov	r2, r3
 800650e:	4623      	mov	r3, r4
 8006510:	f7fa fb0c 	bl	8000b2c <__aeabi_uldivmod>
 8006514:	4603      	mov	r3, r0
 8006516:	460c      	mov	r4, r1
 8006518:	461a      	mov	r2, r3
 800651a:	4b0c      	ldr	r3, [pc, #48]	; (800654c <UART_SetConfig+0x384>)
 800651c:	fba3 1302 	umull	r1, r3, r3, r2
 8006520:	095b      	lsrs	r3, r3, #5
 8006522:	2164      	movs	r1, #100	; 0x64
 8006524:	fb01 f303 	mul.w	r3, r1, r3
 8006528:	1ad3      	subs	r3, r2, r3
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	3332      	adds	r3, #50	; 0x32
 800652e:	4a07      	ldr	r2, [pc, #28]	; (800654c <UART_SetConfig+0x384>)
 8006530:	fba2 2303 	umull	r2, r3, r2, r3
 8006534:	095b      	lsrs	r3, r3, #5
 8006536:	f003 0207 	and.w	r2, r3, #7
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4442      	add	r2, r8
 8006540:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006542:	e1b2      	b.n	80068aa <UART_SetConfig+0x6e2>
 8006544:	40011000 	.word	0x40011000
 8006548:	40011400 	.word	0x40011400
 800654c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4ad7      	ldr	r2, [pc, #860]	; (80068b4 <UART_SetConfig+0x6ec>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d005      	beq.n	8006566 <UART_SetConfig+0x39e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4ad6      	ldr	r2, [pc, #856]	; (80068b8 <UART_SetConfig+0x6f0>)
 8006560:	4293      	cmp	r3, r2
 8006562:	f040 80d1 	bne.w	8006708 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006566:	f7fe ff0d 	bl	8005384 <HAL_RCC_GetPCLK2Freq>
 800656a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	469a      	mov	sl, r3
 8006570:	f04f 0b00 	mov.w	fp, #0
 8006574:	46d0      	mov	r8, sl
 8006576:	46d9      	mov	r9, fp
 8006578:	eb18 0308 	adds.w	r3, r8, r8
 800657c:	eb49 0409 	adc.w	r4, r9, r9
 8006580:	4698      	mov	r8, r3
 8006582:	46a1      	mov	r9, r4
 8006584:	eb18 080a 	adds.w	r8, r8, sl
 8006588:	eb49 090b 	adc.w	r9, r9, fp
 800658c:	f04f 0100 	mov.w	r1, #0
 8006590:	f04f 0200 	mov.w	r2, #0
 8006594:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006598:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800659c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065a0:	4688      	mov	r8, r1
 80065a2:	4691      	mov	r9, r2
 80065a4:	eb1a 0508 	adds.w	r5, sl, r8
 80065a8:	eb4b 0609 	adc.w	r6, fp, r9
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	4619      	mov	r1, r3
 80065b2:	f04f 0200 	mov.w	r2, #0
 80065b6:	f04f 0300 	mov.w	r3, #0
 80065ba:	f04f 0400 	mov.w	r4, #0
 80065be:	0094      	lsls	r4, r2, #2
 80065c0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80065c4:	008b      	lsls	r3, r1, #2
 80065c6:	461a      	mov	r2, r3
 80065c8:	4623      	mov	r3, r4
 80065ca:	4628      	mov	r0, r5
 80065cc:	4631      	mov	r1, r6
 80065ce:	f7fa faad 	bl	8000b2c <__aeabi_uldivmod>
 80065d2:	4603      	mov	r3, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	461a      	mov	r2, r3
 80065d8:	4bb8      	ldr	r3, [pc, #736]	; (80068bc <UART_SetConfig+0x6f4>)
 80065da:	fba3 2302 	umull	r2, r3, r3, r2
 80065de:	095b      	lsrs	r3, r3, #5
 80065e0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	469b      	mov	fp, r3
 80065e8:	f04f 0c00 	mov.w	ip, #0
 80065ec:	46d9      	mov	r9, fp
 80065ee:	46e2      	mov	sl, ip
 80065f0:	eb19 0309 	adds.w	r3, r9, r9
 80065f4:	eb4a 040a 	adc.w	r4, sl, sl
 80065f8:	4699      	mov	r9, r3
 80065fa:	46a2      	mov	sl, r4
 80065fc:	eb19 090b 	adds.w	r9, r9, fp
 8006600:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006604:	f04f 0100 	mov.w	r1, #0
 8006608:	f04f 0200 	mov.w	r2, #0
 800660c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006610:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006614:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006618:	4689      	mov	r9, r1
 800661a:	4692      	mov	sl, r2
 800661c:	eb1b 0509 	adds.w	r5, fp, r9
 8006620:	eb4c 060a 	adc.w	r6, ip, sl
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4619      	mov	r1, r3
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	f04f 0300 	mov.w	r3, #0
 8006632:	f04f 0400 	mov.w	r4, #0
 8006636:	0094      	lsls	r4, r2, #2
 8006638:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800663c:	008b      	lsls	r3, r1, #2
 800663e:	461a      	mov	r2, r3
 8006640:	4623      	mov	r3, r4
 8006642:	4628      	mov	r0, r5
 8006644:	4631      	mov	r1, r6
 8006646:	f7fa fa71 	bl	8000b2c <__aeabi_uldivmod>
 800664a:	4603      	mov	r3, r0
 800664c:	460c      	mov	r4, r1
 800664e:	461a      	mov	r2, r3
 8006650:	4b9a      	ldr	r3, [pc, #616]	; (80068bc <UART_SetConfig+0x6f4>)
 8006652:	fba3 1302 	umull	r1, r3, r3, r2
 8006656:	095b      	lsrs	r3, r3, #5
 8006658:	2164      	movs	r1, #100	; 0x64
 800665a:	fb01 f303 	mul.w	r3, r1, r3
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	011b      	lsls	r3, r3, #4
 8006662:	3332      	adds	r3, #50	; 0x32
 8006664:	4a95      	ldr	r2, [pc, #596]	; (80068bc <UART_SetConfig+0x6f4>)
 8006666:	fba2 2303 	umull	r2, r3, r2, r3
 800666a:	095b      	lsrs	r3, r3, #5
 800666c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006670:	4498      	add	r8, r3
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	469b      	mov	fp, r3
 8006676:	f04f 0c00 	mov.w	ip, #0
 800667a:	46d9      	mov	r9, fp
 800667c:	46e2      	mov	sl, ip
 800667e:	eb19 0309 	adds.w	r3, r9, r9
 8006682:	eb4a 040a 	adc.w	r4, sl, sl
 8006686:	4699      	mov	r9, r3
 8006688:	46a2      	mov	sl, r4
 800668a:	eb19 090b 	adds.w	r9, r9, fp
 800668e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006692:	f04f 0100 	mov.w	r1, #0
 8006696:	f04f 0200 	mov.w	r2, #0
 800669a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800669e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066a6:	4689      	mov	r9, r1
 80066a8:	4692      	mov	sl, r2
 80066aa:	eb1b 0509 	adds.w	r5, fp, r9
 80066ae:	eb4c 060a 	adc.w	r6, ip, sl
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4619      	mov	r1, r3
 80066b8:	f04f 0200 	mov.w	r2, #0
 80066bc:	f04f 0300 	mov.w	r3, #0
 80066c0:	f04f 0400 	mov.w	r4, #0
 80066c4:	0094      	lsls	r4, r2, #2
 80066c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80066ca:	008b      	lsls	r3, r1, #2
 80066cc:	461a      	mov	r2, r3
 80066ce:	4623      	mov	r3, r4
 80066d0:	4628      	mov	r0, r5
 80066d2:	4631      	mov	r1, r6
 80066d4:	f7fa fa2a 	bl	8000b2c <__aeabi_uldivmod>
 80066d8:	4603      	mov	r3, r0
 80066da:	460c      	mov	r4, r1
 80066dc:	461a      	mov	r2, r3
 80066de:	4b77      	ldr	r3, [pc, #476]	; (80068bc <UART_SetConfig+0x6f4>)
 80066e0:	fba3 1302 	umull	r1, r3, r3, r2
 80066e4:	095b      	lsrs	r3, r3, #5
 80066e6:	2164      	movs	r1, #100	; 0x64
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	1ad3      	subs	r3, r2, r3
 80066ee:	011b      	lsls	r3, r3, #4
 80066f0:	3332      	adds	r3, #50	; 0x32
 80066f2:	4a72      	ldr	r2, [pc, #456]	; (80068bc <UART_SetConfig+0x6f4>)
 80066f4:	fba2 2303 	umull	r2, r3, r2, r3
 80066f8:	095b      	lsrs	r3, r3, #5
 80066fa:	f003 020f 	and.w	r2, r3, #15
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4442      	add	r2, r8
 8006704:	609a      	str	r2, [r3, #8]
 8006706:	e0d0      	b.n	80068aa <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006708:	f7fe fe28 	bl	800535c <HAL_RCC_GetPCLK1Freq>
 800670c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	469a      	mov	sl, r3
 8006712:	f04f 0b00 	mov.w	fp, #0
 8006716:	46d0      	mov	r8, sl
 8006718:	46d9      	mov	r9, fp
 800671a:	eb18 0308 	adds.w	r3, r8, r8
 800671e:	eb49 0409 	adc.w	r4, r9, r9
 8006722:	4698      	mov	r8, r3
 8006724:	46a1      	mov	r9, r4
 8006726:	eb18 080a 	adds.w	r8, r8, sl
 800672a:	eb49 090b 	adc.w	r9, r9, fp
 800672e:	f04f 0100 	mov.w	r1, #0
 8006732:	f04f 0200 	mov.w	r2, #0
 8006736:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800673a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800673e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006742:	4688      	mov	r8, r1
 8006744:	4691      	mov	r9, r2
 8006746:	eb1a 0508 	adds.w	r5, sl, r8
 800674a:	eb4b 0609 	adc.w	r6, fp, r9
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	685b      	ldr	r3, [r3, #4]
 8006752:	4619      	mov	r1, r3
 8006754:	f04f 0200 	mov.w	r2, #0
 8006758:	f04f 0300 	mov.w	r3, #0
 800675c:	f04f 0400 	mov.w	r4, #0
 8006760:	0094      	lsls	r4, r2, #2
 8006762:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006766:	008b      	lsls	r3, r1, #2
 8006768:	461a      	mov	r2, r3
 800676a:	4623      	mov	r3, r4
 800676c:	4628      	mov	r0, r5
 800676e:	4631      	mov	r1, r6
 8006770:	f7fa f9dc 	bl	8000b2c <__aeabi_uldivmod>
 8006774:	4603      	mov	r3, r0
 8006776:	460c      	mov	r4, r1
 8006778:	461a      	mov	r2, r3
 800677a:	4b50      	ldr	r3, [pc, #320]	; (80068bc <UART_SetConfig+0x6f4>)
 800677c:	fba3 2302 	umull	r2, r3, r3, r2
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006786:	68bb      	ldr	r3, [r7, #8]
 8006788:	469b      	mov	fp, r3
 800678a:	f04f 0c00 	mov.w	ip, #0
 800678e:	46d9      	mov	r9, fp
 8006790:	46e2      	mov	sl, ip
 8006792:	eb19 0309 	adds.w	r3, r9, r9
 8006796:	eb4a 040a 	adc.w	r4, sl, sl
 800679a:	4699      	mov	r9, r3
 800679c:	46a2      	mov	sl, r4
 800679e:	eb19 090b 	adds.w	r9, r9, fp
 80067a2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80067a6:	f04f 0100 	mov.w	r1, #0
 80067aa:	f04f 0200 	mov.w	r2, #0
 80067ae:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067b2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067b6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067ba:	4689      	mov	r9, r1
 80067bc:	4692      	mov	sl, r2
 80067be:	eb1b 0509 	adds.w	r5, fp, r9
 80067c2:	eb4c 060a 	adc.w	r6, ip, sl
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	4619      	mov	r1, r3
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	f04f 0400 	mov.w	r4, #0
 80067d8:	0094      	lsls	r4, r2, #2
 80067da:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80067de:	008b      	lsls	r3, r1, #2
 80067e0:	461a      	mov	r2, r3
 80067e2:	4623      	mov	r3, r4
 80067e4:	4628      	mov	r0, r5
 80067e6:	4631      	mov	r1, r6
 80067e8:	f7fa f9a0 	bl	8000b2c <__aeabi_uldivmod>
 80067ec:	4603      	mov	r3, r0
 80067ee:	460c      	mov	r4, r1
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b32      	ldr	r3, [pc, #200]	; (80068bc <UART_SetConfig+0x6f4>)
 80067f4:	fba3 1302 	umull	r1, r3, r3, r2
 80067f8:	095b      	lsrs	r3, r3, #5
 80067fa:	2164      	movs	r1, #100	; 0x64
 80067fc:	fb01 f303 	mul.w	r3, r1, r3
 8006800:	1ad3      	subs	r3, r2, r3
 8006802:	011b      	lsls	r3, r3, #4
 8006804:	3332      	adds	r3, #50	; 0x32
 8006806:	4a2d      	ldr	r2, [pc, #180]	; (80068bc <UART_SetConfig+0x6f4>)
 8006808:	fba2 2303 	umull	r2, r3, r2, r3
 800680c:	095b      	lsrs	r3, r3, #5
 800680e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006812:	4498      	add	r8, r3
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	469b      	mov	fp, r3
 8006818:	f04f 0c00 	mov.w	ip, #0
 800681c:	46d9      	mov	r9, fp
 800681e:	46e2      	mov	sl, ip
 8006820:	eb19 0309 	adds.w	r3, r9, r9
 8006824:	eb4a 040a 	adc.w	r4, sl, sl
 8006828:	4699      	mov	r9, r3
 800682a:	46a2      	mov	sl, r4
 800682c:	eb19 090b 	adds.w	r9, r9, fp
 8006830:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006834:	f04f 0100 	mov.w	r1, #0
 8006838:	f04f 0200 	mov.w	r2, #0
 800683c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006840:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006844:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006848:	4689      	mov	r9, r1
 800684a:	4692      	mov	sl, r2
 800684c:	eb1b 0509 	adds.w	r5, fp, r9
 8006850:	eb4c 060a 	adc.w	r6, ip, sl
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	4619      	mov	r1, r3
 800685a:	f04f 0200 	mov.w	r2, #0
 800685e:	f04f 0300 	mov.w	r3, #0
 8006862:	f04f 0400 	mov.w	r4, #0
 8006866:	0094      	lsls	r4, r2, #2
 8006868:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800686c:	008b      	lsls	r3, r1, #2
 800686e:	461a      	mov	r2, r3
 8006870:	4623      	mov	r3, r4
 8006872:	4628      	mov	r0, r5
 8006874:	4631      	mov	r1, r6
 8006876:	f7fa f959 	bl	8000b2c <__aeabi_uldivmod>
 800687a:	4603      	mov	r3, r0
 800687c:	460c      	mov	r4, r1
 800687e:	461a      	mov	r2, r3
 8006880:	4b0e      	ldr	r3, [pc, #56]	; (80068bc <UART_SetConfig+0x6f4>)
 8006882:	fba3 1302 	umull	r1, r3, r3, r2
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	2164      	movs	r1, #100	; 0x64
 800688a:	fb01 f303 	mul.w	r3, r1, r3
 800688e:	1ad3      	subs	r3, r2, r3
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	3332      	adds	r3, #50	; 0x32
 8006894:	4a09      	ldr	r2, [pc, #36]	; (80068bc <UART_SetConfig+0x6f4>)
 8006896:	fba2 2303 	umull	r2, r3, r2, r3
 800689a:	095b      	lsrs	r3, r3, #5
 800689c:	f003 020f 	and.w	r2, r3, #15
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4442      	add	r2, r8
 80068a6:	609a      	str	r2, [r3, #8]
}
 80068a8:	e7ff      	b.n	80068aa <UART_SetConfig+0x6e2>
 80068aa:	bf00      	nop
 80068ac:	3714      	adds	r7, #20
 80068ae:	46bd      	mov	sp, r7
 80068b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b4:	40011000 	.word	0x40011000
 80068b8:	40011400 	.word	0x40011400
 80068bc:	51eb851f 	.word	0x51eb851f

080068c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068c0:	b084      	sub	sp, #16
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b084      	sub	sp, #16
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	f107 001c 	add.w	r0, r7, #28
 80068ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d122      	bne.n	800691e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80068ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006900:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006902:	2b01      	cmp	r3, #1
 8006904:	d105      	bne.n	8006912 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f001 fac6 	bl	8007ea4 <USB_CoreReset>
 8006918:	4603      	mov	r3, r0
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	e01a      	b.n	8006954 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f001 faba 	bl	8007ea4 <USB_CoreReset>
 8006930:	4603      	mov	r3, r0
 8006932:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006934:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	d106      	bne.n	8006948 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800693e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
 8006946:	e005      	b.n	8006954 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800694c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006956:	2b01      	cmp	r3, #1
 8006958:	d10b      	bne.n	8006972 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	689b      	ldr	r3, [r3, #8]
 800695e:	f043 0206 	orr.w	r2, r3, #6
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	689b      	ldr	r3, [r3, #8]
 800696a:	f043 0220 	orr.w	r2, r3, #32
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006972:	7bfb      	ldrb	r3, [r7, #15]
}
 8006974:	4618      	mov	r0, r3
 8006976:	3710      	adds	r7, #16
 8006978:	46bd      	mov	sp, r7
 800697a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800697e:	b004      	add	sp, #16
 8006980:	4770      	bx	lr
	...

08006984 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006984:	b480      	push	{r7}
 8006986:	b087      	sub	sp, #28
 8006988:	af00      	add	r7, sp, #0
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	4613      	mov	r3, r2
 8006990:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006992:	79fb      	ldrb	r3, [r7, #7]
 8006994:	2b02      	cmp	r3, #2
 8006996:	d165      	bne.n	8006a64 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006998:	68bb      	ldr	r3, [r7, #8]
 800699a:	4a41      	ldr	r2, [pc, #260]	; (8006aa0 <USB_SetTurnaroundTime+0x11c>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d906      	bls.n	80069ae <USB_SetTurnaroundTime+0x2a>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4a40      	ldr	r2, [pc, #256]	; (8006aa4 <USB_SetTurnaroundTime+0x120>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d802      	bhi.n	80069ae <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80069a8:	230f      	movs	r3, #15
 80069aa:	617b      	str	r3, [r7, #20]
 80069ac:	e062      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a3c      	ldr	r2, [pc, #240]	; (8006aa4 <USB_SetTurnaroundTime+0x120>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d906      	bls.n	80069c4 <USB_SetTurnaroundTime+0x40>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a3b      	ldr	r2, [pc, #236]	; (8006aa8 <USB_SetTurnaroundTime+0x124>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d802      	bhi.n	80069c4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80069be:	230e      	movs	r3, #14
 80069c0:	617b      	str	r3, [r7, #20]
 80069c2:	e057      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4a38      	ldr	r2, [pc, #224]	; (8006aa8 <USB_SetTurnaroundTime+0x124>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d906      	bls.n	80069da <USB_SetTurnaroundTime+0x56>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	4a37      	ldr	r2, [pc, #220]	; (8006aac <USB_SetTurnaroundTime+0x128>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d802      	bhi.n	80069da <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80069d4:	230d      	movs	r3, #13
 80069d6:	617b      	str	r3, [r7, #20]
 80069d8:	e04c      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4a33      	ldr	r2, [pc, #204]	; (8006aac <USB_SetTurnaroundTime+0x128>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d906      	bls.n	80069f0 <USB_SetTurnaroundTime+0x6c>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	4a32      	ldr	r2, [pc, #200]	; (8006ab0 <USB_SetTurnaroundTime+0x12c>)
 80069e6:	4293      	cmp	r3, r2
 80069e8:	d802      	bhi.n	80069f0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80069ea:	230c      	movs	r3, #12
 80069ec:	617b      	str	r3, [r7, #20]
 80069ee:	e041      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	4a2f      	ldr	r2, [pc, #188]	; (8006ab0 <USB_SetTurnaroundTime+0x12c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d906      	bls.n	8006a06 <USB_SetTurnaroundTime+0x82>
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4a2e      	ldr	r2, [pc, #184]	; (8006ab4 <USB_SetTurnaroundTime+0x130>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d802      	bhi.n	8006a06 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006a00:	230b      	movs	r3, #11
 8006a02:	617b      	str	r3, [r7, #20]
 8006a04:	e036      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	4a2a      	ldr	r2, [pc, #168]	; (8006ab4 <USB_SetTurnaroundTime+0x130>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d906      	bls.n	8006a1c <USB_SetTurnaroundTime+0x98>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	4a29      	ldr	r2, [pc, #164]	; (8006ab8 <USB_SetTurnaroundTime+0x134>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d802      	bhi.n	8006a1c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006a16:	230a      	movs	r3, #10
 8006a18:	617b      	str	r3, [r7, #20]
 8006a1a:	e02b      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4a26      	ldr	r2, [pc, #152]	; (8006ab8 <USB_SetTurnaroundTime+0x134>)
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d906      	bls.n	8006a32 <USB_SetTurnaroundTime+0xae>
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	4a25      	ldr	r2, [pc, #148]	; (8006abc <USB_SetTurnaroundTime+0x138>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d802      	bhi.n	8006a32 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006a2c:	2309      	movs	r3, #9
 8006a2e:	617b      	str	r3, [r7, #20]
 8006a30:	e020      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	4a21      	ldr	r2, [pc, #132]	; (8006abc <USB_SetTurnaroundTime+0x138>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d906      	bls.n	8006a48 <USB_SetTurnaroundTime+0xc4>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	4a20      	ldr	r2, [pc, #128]	; (8006ac0 <USB_SetTurnaroundTime+0x13c>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d802      	bhi.n	8006a48 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006a42:	2308      	movs	r3, #8
 8006a44:	617b      	str	r3, [r7, #20]
 8006a46:	e015      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ac0 <USB_SetTurnaroundTime+0x13c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d906      	bls.n	8006a5e <USB_SetTurnaroundTime+0xda>
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4a1c      	ldr	r2, [pc, #112]	; (8006ac4 <USB_SetTurnaroundTime+0x140>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d802      	bhi.n	8006a5e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006a58:	2307      	movs	r3, #7
 8006a5a:	617b      	str	r3, [r7, #20]
 8006a5c:	e00a      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006a5e:	2306      	movs	r3, #6
 8006a60:	617b      	str	r3, [r7, #20]
 8006a62:	e007      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006a64:	79fb      	ldrb	r3, [r7, #7]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006a6a:	2309      	movs	r3, #9
 8006a6c:	617b      	str	r3, [r7, #20]
 8006a6e:	e001      	b.n	8006a74 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006a70:	2309      	movs	r3, #9
 8006a72:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	029b      	lsls	r3, r3, #10
 8006a88:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	371c      	adds	r7, #28
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	00d8acbf 	.word	0x00d8acbf
 8006aa4:	00e4e1bf 	.word	0x00e4e1bf
 8006aa8:	00f423ff 	.word	0x00f423ff
 8006aac:	0106737f 	.word	0x0106737f
 8006ab0:	011a499f 	.word	0x011a499f
 8006ab4:	01312cff 	.word	0x01312cff
 8006ab8:	014ca43f 	.word	0x014ca43f
 8006abc:	016e35ff 	.word	0x016e35ff
 8006ac0:	01a6ab1f 	.word	0x01a6ab1f
 8006ac4:	01e847ff 	.word	0x01e847ff

08006ac8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f043 0201 	orr.w	r2, r3, #1
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b083      	sub	sp, #12
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	689b      	ldr	r3, [r3, #8]
 8006af6:	f023 0201 	bic.w	r2, r3, #1
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006afe:	2300      	movs	r3, #0
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b082      	sub	sp, #8
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	460b      	mov	r3, r1
 8006b16:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	68db      	ldr	r3, [r3, #12]
 8006b1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b24:	78fb      	ldrb	r3, [r7, #3]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d106      	bne.n	8006b38 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	60da      	str	r2, [r3, #12]
 8006b36:	e00b      	b.n	8006b50 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68db      	ldr	r3, [r3, #12]
 8006b42:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	60da      	str	r2, [r3, #12]
 8006b4a:	e001      	b.n	8006b50 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e003      	b.n	8006b58 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006b50:	2032      	movs	r0, #50	; 0x32
 8006b52:	f7fb f9ed 	bl	8001f30 <HAL_Delay>

  return HAL_OK;
 8006b56:	2300      	movs	r3, #0
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b60:	b084      	sub	sp, #16
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b086      	sub	sp, #24
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b6e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	e009      	b.n	8006b94 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	3340      	adds	r3, #64	; 0x40
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	4413      	add	r3, r2
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006b8e:	693b      	ldr	r3, [r7, #16]
 8006b90:	3301      	adds	r3, #1
 8006b92:	613b      	str	r3, [r7, #16]
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	2b0e      	cmp	r3, #14
 8006b98:	d9f2      	bls.n	8006b80 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006b9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d11c      	bne.n	8006bda <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bae:	f043 0302 	orr.w	r3, r3, #2
 8006bb2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bb8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bc4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bd0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	639a      	str	r2, [r3, #56]	; 0x38
 8006bd8:	e00b      	b.n	8006bf2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bde:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c04:	4619      	mov	r1, r3
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c0c:	461a      	mov	r2, r3
 8006c0e:	680b      	ldr	r3, [r1, #0]
 8006c10:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d10c      	bne.n	8006c32 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d104      	bne.n	8006c28 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006c1e:	2100      	movs	r1, #0
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f949 	bl	8006eb8 <USB_SetDevSpeed>
 8006c26:	e008      	b.n	8006c3a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006c28:	2101      	movs	r1, #1
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f944 	bl	8006eb8 <USB_SetDevSpeed>
 8006c30:	e003      	b.n	8006c3a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006c32:	2103      	movs	r1, #3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 f93f 	bl	8006eb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006c3a:	2110      	movs	r1, #16
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f000 f8f3 	bl	8006e28 <USB_FlushTxFifo>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f911 	bl	8006e74 <USB_FlushRxFifo>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d001      	beq.n	8006c5c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c62:	461a      	mov	r2, r3
 8006c64:	2300      	movs	r3, #0
 8006c66:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6e:	461a      	mov	r2, r3
 8006c70:	2300      	movs	r3, #0
 8006c72:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	e043      	b.n	8006d0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	015a      	lsls	r2, r3, #5
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	4413      	add	r3, r2
 8006c8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c9c:	d118      	bne.n	8006cd0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d10a      	bne.n	8006cba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	015a      	lsls	r2, r3, #5
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	4413      	add	r3, r2
 8006cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006cb6:	6013      	str	r3, [r2, #0]
 8006cb8:	e013      	b.n	8006ce2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	015a      	lsls	r2, r3, #5
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ccc:	6013      	str	r3, [r2, #0]
 8006cce:	e008      	b.n	8006ce2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cdc:	461a      	mov	r2, r3
 8006cde:	2300      	movs	r3, #0
 8006ce0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	015a      	lsls	r2, r3, #5
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4413      	add	r3, r2
 8006cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006cee:	461a      	mov	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	015a      	lsls	r2, r3, #5
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d00:	461a      	mov	r2, r3
 8006d02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	693a      	ldr	r2, [r7, #16]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d3b7      	bcc.n	8006c86 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	e043      	b.n	8006da4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	015a      	lsls	r2, r3, #5
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	4413      	add	r3, r2
 8006d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d32:	d118      	bne.n	8006d66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d10a      	bne.n	8006d50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	015a      	lsls	r2, r3, #5
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d46:	461a      	mov	r2, r3
 8006d48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d4c:	6013      	str	r3, [r2, #0]
 8006d4e:	e013      	b.n	8006d78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d62:	6013      	str	r3, [r2, #0]
 8006d64:	e008      	b.n	8006d78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	015a      	lsls	r2, r3, #5
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	4413      	add	r3, r2
 8006d6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d72:	461a      	mov	r2, r3
 8006d74:	2300      	movs	r3, #0
 8006d76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d84:	461a      	mov	r2, r3
 8006d86:	2300      	movs	r3, #0
 8006d88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	015a      	lsls	r2, r3, #5
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	4413      	add	r3, r2
 8006d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d96:	461a      	mov	r2, r3
 8006d98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	3301      	adds	r3, #1
 8006da2:	613b      	str	r3, [r7, #16]
 8006da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d3b7      	bcc.n	8006d1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dbe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006dcc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d105      	bne.n	8006de0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f043 0210 	orr.w	r2, r3, #16
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	699a      	ldr	r2, [r3, #24]
 8006de4:	4b0f      	ldr	r3, [pc, #60]	; (8006e24 <USB_DevInit+0x2c4>)
 8006de6:	4313      	orrs	r3, r2
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006dec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d005      	beq.n	8006dfe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	699b      	ldr	r3, [r3, #24]
 8006df6:	f043 0208 	orr.w	r2, r3, #8
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006dfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d107      	bne.n	8006e14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	699b      	ldr	r3, [r3, #24]
 8006e08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e0c:	f043 0304 	orr.w	r3, r3, #4
 8006e10:	687a      	ldr	r2, [r7, #4]
 8006e12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006e14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e16:	4618      	mov	r0, r3
 8006e18:	3718      	adds	r7, #24
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e20:	b004      	add	sp, #16
 8006e22:	4770      	bx	lr
 8006e24:	803c3800 	.word	0x803c3800

08006e28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	019b      	lsls	r3, r3, #6
 8006e3a:	f043 0220 	orr.w	r2, r3, #32
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3301      	adds	r3, #1
 8006e46:	60fb      	str	r3, [r7, #12]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	4a09      	ldr	r2, [pc, #36]	; (8006e70 <USB_FlushTxFifo+0x48>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d901      	bls.n	8006e54 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006e50:	2303      	movs	r3, #3
 8006e52:	e006      	b.n	8006e62 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	691b      	ldr	r3, [r3, #16]
 8006e58:	f003 0320 	and.w	r3, r3, #32
 8006e5c:	2b20      	cmp	r3, #32
 8006e5e:	d0f0      	beq.n	8006e42 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
 8006e6e:	bf00      	nop
 8006e70:	00030d40 	.word	0x00030d40

08006e74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006e74:	b480      	push	{r7}
 8006e76:	b085      	sub	sp, #20
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2210      	movs	r2, #16
 8006e84:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4a09      	ldr	r2, [pc, #36]	; (8006eb4 <USB_FlushRxFifo+0x40>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d901      	bls.n	8006e98 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e006      	b.n	8006ea6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	691b      	ldr	r3, [r3, #16]
 8006e9c:	f003 0310 	and.w	r3, r3, #16
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d0f0      	beq.n	8006e86 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006ea4:	2300      	movs	r3, #0
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr
 8006eb2:	bf00      	nop
 8006eb4:	00030d40 	.word	0x00030d40

08006eb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ece:	681a      	ldr	r2, [r3, #0]
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	68f9      	ldr	r1, [r7, #12]
 8006ed4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ed8:	4313      	orrs	r3, r2
 8006eda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006edc:	2300      	movs	r3, #0
}
 8006ede:	4618      	mov	r0, r3
 8006ee0:	3714      	adds	r7, #20
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr

08006eea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006eea:	b480      	push	{r7}
 8006eec:	b087      	sub	sp, #28
 8006eee:	af00      	add	r7, sp, #0
 8006ef0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	f003 0306 	and.w	r3, r3, #6
 8006f02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d102      	bne.n	8006f10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	75fb      	strb	r3, [r7, #23]
 8006f0e:	e00a      	b.n	8006f26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d002      	beq.n	8006f1c <USB_GetDevSpeed+0x32>
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	2b06      	cmp	r3, #6
 8006f1a:	d102      	bne.n	8006f22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	75fb      	strb	r3, [r7, #23]
 8006f20:	e001      	b.n	8006f26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006f22:	230f      	movs	r3, #15
 8006f24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	371c      	adds	r7, #28
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
 8006f3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	785b      	ldrb	r3, [r3, #1]
 8006f4c:	2b01      	cmp	r3, #1
 8006f4e:	d13a      	bne.n	8006fc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	f003 030f 	and.w	r3, r3, #15
 8006f60:	2101      	movs	r1, #1
 8006f62:	fa01 f303 	lsl.w	r3, r1, r3
 8006f66:	b29b      	uxth	r3, r3
 8006f68:	68f9      	ldr	r1, [r7, #12]
 8006f6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	015a      	lsls	r2, r3, #5
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	4413      	add	r3, r2
 8006f7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d155      	bne.n	8007034 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	78db      	ldrb	r3, [r3, #3]
 8006fa2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fa4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	059b      	lsls	r3, r3, #22
 8006faa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006fac:	4313      	orrs	r3, r2
 8006fae:	68ba      	ldr	r2, [r7, #8]
 8006fb0:	0151      	lsls	r1, r2, #5
 8006fb2:	68fa      	ldr	r2, [r7, #12]
 8006fb4:	440a      	add	r2, r1
 8006fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006fc2:	6013      	str	r3, [r2, #0]
 8006fc4:	e036      	b.n	8007034 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fcc:	69da      	ldr	r2, [r3, #28]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	f003 030f 	and.w	r3, r3, #15
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8006fdc:	041b      	lsls	r3, r3, #16
 8006fde:	68f9      	ldr	r1, [r7, #12]
 8006fe0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	015a      	lsls	r2, r3, #5
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	4413      	add	r3, r2
 8006ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d11a      	bne.n	8007034 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	015a      	lsls	r2, r3, #5
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4413      	add	r3, r2
 8007006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	78db      	ldrb	r3, [r3, #3]
 8007018:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800701a:	430b      	orrs	r3, r1
 800701c:	4313      	orrs	r3, r2
 800701e:	68ba      	ldr	r2, [r7, #8]
 8007020:	0151      	lsls	r1, r2, #5
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	440a      	add	r2, r1
 8007026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800702a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800702e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007032:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3714      	adds	r7, #20
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr
	...

08007044 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007052:	683b      	ldr	r3, [r7, #0]
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d161      	bne.n	8007124 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007072:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007076:	d11f      	bne.n	80070b8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	440a      	add	r2, r1
 800708e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007092:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007096:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68ba      	ldr	r2, [r7, #8]
 80070a8:	0151      	lsls	r1, r2, #5
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	440a      	add	r2, r1
 80070ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070b6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	f003 030f 	and.w	r3, r3, #15
 80070c8:	2101      	movs	r1, #1
 80070ca:	fa01 f303 	lsl.w	r3, r1, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	43db      	mvns	r3, r3
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070d8:	4013      	ands	r3, r2
 80070da:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070e2:	69da      	ldr	r2, [r3, #28]
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	f003 030f 	and.w	r3, r3, #15
 80070ec:	2101      	movs	r1, #1
 80070ee:	fa01 f303 	lsl.w	r3, r1, r3
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	68f9      	ldr	r1, [r7, #12]
 80070f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070fc:	4013      	ands	r3, r2
 80070fe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	015a      	lsls	r2, r3, #5
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	0159      	lsls	r1, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	440b      	add	r3, r1
 8007116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711a:	4619      	mov	r1, r3
 800711c:	4b35      	ldr	r3, [pc, #212]	; (80071f4 <USB_DeactivateEndpoint+0x1b0>)
 800711e:	4013      	ands	r3, r2
 8007120:	600b      	str	r3, [r1, #0]
 8007122:	e060      	b.n	80071e6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	015a      	lsls	r2, r3, #5
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	4413      	add	r3, r2
 800712c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800713a:	d11f      	bne.n	800717c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	015a      	lsls	r2, r3, #5
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	4413      	add	r3, r2
 8007144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	0151      	lsls	r1, r2, #5
 800714e:	68fa      	ldr	r2, [r7, #12]
 8007150:	440a      	add	r2, r1
 8007152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007156:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800715a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	015a      	lsls	r2, r3, #5
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	4413      	add	r3, r2
 8007164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	68ba      	ldr	r2, [r7, #8]
 800716c:	0151      	lsls	r1, r2, #5
 800716e:	68fa      	ldr	r2, [r7, #12]
 8007170:	440a      	add	r2, r1
 8007172:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007176:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800717a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 030f 	and.w	r3, r3, #15
 800718c:	2101      	movs	r1, #1
 800718e:	fa01 f303 	lsl.w	r3, r1, r3
 8007192:	041b      	lsls	r3, r3, #16
 8007194:	43db      	mvns	r3, r3
 8007196:	68f9      	ldr	r1, [r7, #12]
 8007198:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800719c:	4013      	ands	r3, r2
 800719e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a6:	69da      	ldr	r2, [r3, #28]
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	781b      	ldrb	r3, [r3, #0]
 80071ac:	f003 030f 	and.w	r3, r3, #15
 80071b0:	2101      	movs	r1, #1
 80071b2:	fa01 f303 	lsl.w	r3, r1, r3
 80071b6:	041b      	lsls	r3, r3, #16
 80071b8:	43db      	mvns	r3, r3
 80071ba:	68f9      	ldr	r1, [r7, #12]
 80071bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071c0:	4013      	ands	r3, r2
 80071c2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	015a      	lsls	r2, r3, #5
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	4413      	add	r3, r2
 80071cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071d0:	681a      	ldr	r2, [r3, #0]
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	0159      	lsls	r1, r3, #5
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	440b      	add	r3, r1
 80071da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071de:	4619      	mov	r1, r3
 80071e0:	4b05      	ldr	r3, [pc, #20]	; (80071f8 <USB_DeactivateEndpoint+0x1b4>)
 80071e2:	4013      	ands	r3, r2
 80071e4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr
 80071f4:	ec337800 	.word	0xec337800
 80071f8:	eff37800 	.word	0xeff37800

080071fc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b08a      	sub	sp, #40	; 0x28
 8007200:	af02      	add	r7, sp, #8
 8007202:	60f8      	str	r0, [r7, #12]
 8007204:	60b9      	str	r1, [r7, #8]
 8007206:	4613      	mov	r3, r2
 8007208:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	785b      	ldrb	r3, [r3, #1]
 8007218:	2b01      	cmp	r3, #1
 800721a:	f040 815c 	bne.w	80074d6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	695b      	ldr	r3, [r3, #20]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d132      	bne.n	800728c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	69ba      	ldr	r2, [r7, #24]
 8007236:	0151      	lsls	r1, r2, #5
 8007238:	69fa      	ldr	r2, [r7, #28]
 800723a:	440a      	add	r2, r1
 800723c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007240:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007244:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	015a      	lsls	r2, r3, #5
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	4413      	add	r3, r2
 8007252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007256:	691b      	ldr	r3, [r3, #16]
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	0151      	lsls	r1, r2, #5
 800725c:	69fa      	ldr	r2, [r7, #28]
 800725e:	440a      	add	r2, r1
 8007260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007264:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007268:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	0151      	lsls	r1, r2, #5
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	440a      	add	r2, r1
 8007280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007284:	0cdb      	lsrs	r3, r3, #19
 8007286:	04db      	lsls	r3, r3, #19
 8007288:	6113      	str	r3, [r2, #16]
 800728a:	e074      	b.n	8007376 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	015a      	lsls	r2, r3, #5
 8007290:	69fb      	ldr	r3, [r7, #28]
 8007292:	4413      	add	r3, r2
 8007294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007298:	691b      	ldr	r3, [r3, #16]
 800729a:	69ba      	ldr	r2, [r7, #24]
 800729c:	0151      	lsls	r1, r2, #5
 800729e:	69fa      	ldr	r2, [r7, #28]
 80072a0:	440a      	add	r2, r1
 80072a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a6:	0cdb      	lsrs	r3, r3, #19
 80072a8:	04db      	lsls	r3, r3, #19
 80072aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80072ac:	69bb      	ldr	r3, [r7, #24]
 80072ae:	015a      	lsls	r2, r3, #5
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	4413      	add	r3, r2
 80072b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b8:	691b      	ldr	r3, [r3, #16]
 80072ba:	69ba      	ldr	r2, [r7, #24]
 80072bc:	0151      	lsls	r1, r2, #5
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	440a      	add	r2, r1
 80072c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072ca:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072ce:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	015a      	lsls	r2, r3, #5
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	4413      	add	r3, r2
 80072d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072dc:	691a      	ldr	r2, [r3, #16]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6959      	ldr	r1, [r3, #20]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	440b      	add	r3, r1
 80072e8:	1e59      	subs	r1, r3, #1
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	689b      	ldr	r3, [r3, #8]
 80072ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80072f2:	04d9      	lsls	r1, r3, #19
 80072f4:	4b9d      	ldr	r3, [pc, #628]	; (800756c <USB_EPStartXfer+0x370>)
 80072f6:	400b      	ands	r3, r1
 80072f8:	69b9      	ldr	r1, [r7, #24]
 80072fa:	0148      	lsls	r0, r1, #5
 80072fc:	69f9      	ldr	r1, [r7, #28]
 80072fe:	4401      	add	r1, r0
 8007300:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007304:	4313      	orrs	r3, r2
 8007306:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	015a      	lsls	r2, r3, #5
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	4413      	add	r3, r2
 8007310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	695b      	ldr	r3, [r3, #20]
 800731a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800731e:	69b9      	ldr	r1, [r7, #24]
 8007320:	0148      	lsls	r0, r1, #5
 8007322:	69f9      	ldr	r1, [r7, #28]
 8007324:	4401      	add	r1, r0
 8007326:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800732a:	4313      	orrs	r3, r2
 800732c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	78db      	ldrb	r3, [r3, #3]
 8007332:	2b01      	cmp	r3, #1
 8007334:	d11f      	bne.n	8007376 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007336:	69bb      	ldr	r3, [r7, #24]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	0151      	lsls	r1, r2, #5
 8007348:	69fa      	ldr	r2, [r7, #28]
 800734a:	440a      	add	r2, r1
 800734c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007350:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007354:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	4413      	add	r3, r2
 800735e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	0151      	lsls	r1, r2, #5
 8007368:	69fa      	ldr	r2, [r7, #28]
 800736a:	440a      	add	r2, r1
 800736c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007370:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007374:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007376:	79fb      	ldrb	r3, [r7, #7]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d14b      	bne.n	8007414 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	691b      	ldr	r3, [r3, #16]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d009      	beq.n	8007398 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	015a      	lsls	r2, r3, #5
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	4413      	add	r3, r2
 800738c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007390:	461a      	mov	r2, r3
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	78db      	ldrb	r3, [r3, #3]
 800739c:	2b01      	cmp	r3, #1
 800739e:	d128      	bne.n	80073f2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d110      	bne.n	80073d2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	69ba      	ldr	r2, [r7, #24]
 80073c0:	0151      	lsls	r1, r2, #5
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	440a      	add	r2, r1
 80073c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073ce:	6013      	str	r3, [r2, #0]
 80073d0:	e00f      	b.n	80073f2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	015a      	lsls	r2, r3, #5
 80073d6:	69fb      	ldr	r3, [r7, #28]
 80073d8:	4413      	add	r3, r2
 80073da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	69ba      	ldr	r2, [r7, #24]
 80073e2:	0151      	lsls	r1, r2, #5
 80073e4:	69fa      	ldr	r2, [r7, #28]
 80073e6:	440a      	add	r2, r1
 80073e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073f0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80073f2:	69bb      	ldr	r3, [r7, #24]
 80073f4:	015a      	lsls	r2, r3, #5
 80073f6:	69fb      	ldr	r3, [r7, #28]
 80073f8:	4413      	add	r3, r2
 80073fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69ba      	ldr	r2, [r7, #24]
 8007402:	0151      	lsls	r1, r2, #5
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	440a      	add	r2, r1
 8007408:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800740c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007410:	6013      	str	r3, [r2, #0]
 8007412:	e12f      	b.n	8007674 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007414:	69bb      	ldr	r3, [r7, #24]
 8007416:	015a      	lsls	r2, r3, #5
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	4413      	add	r3, r2
 800741c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	69ba      	ldr	r2, [r7, #24]
 8007424:	0151      	lsls	r1, r2, #5
 8007426:	69fa      	ldr	r2, [r7, #28]
 8007428:	440a      	add	r2, r1
 800742a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800742e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007432:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	78db      	ldrb	r3, [r3, #3]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d015      	beq.n	8007468 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 8117 	beq.w	8007674 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	f003 030f 	and.w	r3, r3, #15
 8007456:	2101      	movs	r1, #1
 8007458:	fa01 f303 	lsl.w	r3, r1, r3
 800745c:	69f9      	ldr	r1, [r7, #28]
 800745e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007462:	4313      	orrs	r3, r2
 8007464:	634b      	str	r3, [r1, #52]	; 0x34
 8007466:	e105      	b.n	8007674 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007474:	2b00      	cmp	r3, #0
 8007476:	d110      	bne.n	800749a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	69fb      	ldr	r3, [r7, #28]
 800747e:	4413      	add	r3, r2
 8007480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	69ba      	ldr	r2, [r7, #24]
 8007488:	0151      	lsls	r1, r2, #5
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	440a      	add	r2, r1
 800748e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007492:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007496:	6013      	str	r3, [r2, #0]
 8007498:	e00f      	b.n	80074ba <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	015a      	lsls	r2, r3, #5
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	4413      	add	r3, r2
 80074a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	0151      	lsls	r1, r2, #5
 80074ac:	69fa      	ldr	r2, [r7, #28]
 80074ae:	440a      	add	r2, r1
 80074b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80074ba:	68bb      	ldr	r3, [r7, #8]
 80074bc:	68d9      	ldr	r1, [r3, #12]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	781a      	ldrb	r2, [r3, #0]
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	695b      	ldr	r3, [r3, #20]
 80074c6:	b298      	uxth	r0, r3
 80074c8:	79fb      	ldrb	r3, [r7, #7]
 80074ca:	9300      	str	r3, [sp, #0]
 80074cc:	4603      	mov	r3, r0
 80074ce:	68f8      	ldr	r0, [r7, #12]
 80074d0:	f000 fa2b 	bl	800792a <USB_WritePacket>
 80074d4:	e0ce      	b.n	8007674 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	69fb      	ldr	r3, [r7, #28]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e2:	691b      	ldr	r3, [r3, #16]
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	0151      	lsls	r1, r2, #5
 80074e8:	69fa      	ldr	r2, [r7, #28]
 80074ea:	440a      	add	r2, r1
 80074ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074f0:	0cdb      	lsrs	r3, r3, #19
 80074f2:	04db      	lsls	r3, r3, #19
 80074f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80074f6:	69bb      	ldr	r3, [r7, #24]
 80074f8:	015a      	lsls	r2, r3, #5
 80074fa:	69fb      	ldr	r3, [r7, #28]
 80074fc:	4413      	add	r3, r2
 80074fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	69ba      	ldr	r2, [r7, #24]
 8007506:	0151      	lsls	r1, r2, #5
 8007508:	69fa      	ldr	r2, [r7, #28]
 800750a:	440a      	add	r2, r1
 800750c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007510:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007514:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007518:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d126      	bne.n	8007570 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	015a      	lsls	r2, r3, #5
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	4413      	add	r3, r2
 800752a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800752e:	691a      	ldr	r2, [r3, #16]
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007538:	69b9      	ldr	r1, [r7, #24]
 800753a:	0148      	lsls	r0, r1, #5
 800753c:	69f9      	ldr	r1, [r7, #28]
 800753e:	4401      	add	r1, r0
 8007540:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007544:	4313      	orrs	r3, r2
 8007546:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	015a      	lsls	r2, r3, #5
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	4413      	add	r3, r2
 8007550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007554:	691b      	ldr	r3, [r3, #16]
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	0151      	lsls	r1, r2, #5
 800755a:	69fa      	ldr	r2, [r7, #28]
 800755c:	440a      	add	r2, r1
 800755e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007566:	6113      	str	r3, [r2, #16]
 8007568:	e036      	b.n	80075d8 <USB_EPStartXfer+0x3dc>
 800756a:	bf00      	nop
 800756c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	695a      	ldr	r2, [r3, #20]
 8007574:	68bb      	ldr	r3, [r7, #8]
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	4413      	add	r3, r2
 800757a:	1e5a      	subs	r2, r3, #1
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	fbb2 f3f3 	udiv	r3, r2, r3
 8007584:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007586:	69bb      	ldr	r3, [r7, #24]
 8007588:	015a      	lsls	r2, r3, #5
 800758a:	69fb      	ldr	r3, [r7, #28]
 800758c:	4413      	add	r3, r2
 800758e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007592:	691a      	ldr	r2, [r3, #16]
 8007594:	8afb      	ldrh	r3, [r7, #22]
 8007596:	04d9      	lsls	r1, r3, #19
 8007598:	4b39      	ldr	r3, [pc, #228]	; (8007680 <USB_EPStartXfer+0x484>)
 800759a:	400b      	ands	r3, r1
 800759c:	69b9      	ldr	r1, [r7, #24]
 800759e:	0148      	lsls	r0, r1, #5
 80075a0:	69f9      	ldr	r1, [r7, #28]
 80075a2:	4401      	add	r1, r0
 80075a4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075a8:	4313      	orrs	r3, r2
 80075aa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075b8:	691a      	ldr	r2, [r3, #16]
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	8af9      	ldrh	r1, [r7, #22]
 80075c0:	fb01 f303 	mul.w	r3, r1, r3
 80075c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80075c8:	69b9      	ldr	r1, [r7, #24]
 80075ca:	0148      	lsls	r0, r1, #5
 80075cc:	69f9      	ldr	r1, [r7, #28]
 80075ce:	4401      	add	r1, r0
 80075d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80075d4:	4313      	orrs	r3, r2
 80075d6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d10d      	bne.n	80075fa <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d009      	beq.n	80075fa <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	68d9      	ldr	r1, [r3, #12]
 80075ea:	69bb      	ldr	r3, [r7, #24]
 80075ec:	015a      	lsls	r2, r3, #5
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	4413      	add	r3, r2
 80075f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f6:	460a      	mov	r2, r1
 80075f8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	78db      	ldrb	r3, [r3, #3]
 80075fe:	2b01      	cmp	r3, #1
 8007600:	d128      	bne.n	8007654 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007608:	689b      	ldr	r3, [r3, #8]
 800760a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800760e:	2b00      	cmp	r3, #0
 8007610:	d110      	bne.n	8007634 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	015a      	lsls	r2, r3, #5
 8007616:	69fb      	ldr	r3, [r7, #28]
 8007618:	4413      	add	r3, r2
 800761a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	69ba      	ldr	r2, [r7, #24]
 8007622:	0151      	lsls	r1, r2, #5
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	440a      	add	r2, r1
 8007628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800762c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007630:	6013      	str	r3, [r2, #0]
 8007632:	e00f      	b.n	8007654 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007634:	69bb      	ldr	r3, [r7, #24]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	69fb      	ldr	r3, [r7, #28]
 800763a:	4413      	add	r3, r2
 800763c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	69ba      	ldr	r2, [r7, #24]
 8007644:	0151      	lsls	r1, r2, #5
 8007646:	69fa      	ldr	r2, [r7, #28]
 8007648:	440a      	add	r2, r1
 800764a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800764e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007652:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	015a      	lsls	r2, r3, #5
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	4413      	add	r3, r2
 800765c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	0151      	lsls	r1, r2, #5
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	440a      	add	r2, r1
 800766a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800766e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007672:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007674:	2300      	movs	r3, #0
}
 8007676:	4618      	mov	r0, r3
 8007678:	3720      	adds	r7, #32
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}
 800767e:	bf00      	nop
 8007680:	1ff80000 	.word	0x1ff80000

08007684 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007684:	b480      	push	{r7}
 8007686:	b087      	sub	sp, #28
 8007688:	af00      	add	r7, sp, #0
 800768a:	60f8      	str	r0, [r7, #12]
 800768c:	60b9      	str	r1, [r7, #8]
 800768e:	4613      	mov	r3, r2
 8007690:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	781b      	ldrb	r3, [r3, #0]
 800769a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	785b      	ldrb	r3, [r3, #1]
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	f040 80cd 	bne.w	8007840 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d132      	bne.n	8007714 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	015a      	lsls	r2, r3, #5
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	4413      	add	r3, r2
 80076b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	693a      	ldr	r2, [r7, #16]
 80076be:	0151      	lsls	r1, r2, #5
 80076c0:	697a      	ldr	r2, [r7, #20]
 80076c2:	440a      	add	r2, r1
 80076c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076de:	691b      	ldr	r3, [r3, #16]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	0151      	lsls	r1, r2, #5
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	440a      	add	r2, r1
 80076e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	015a      	lsls	r2, r3, #5
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4413      	add	r3, r2
 80076fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	693a      	ldr	r2, [r7, #16]
 8007702:	0151      	lsls	r1, r2, #5
 8007704:	697a      	ldr	r2, [r7, #20]
 8007706:	440a      	add	r2, r1
 8007708:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800770c:	0cdb      	lsrs	r3, r3, #19
 800770e:	04db      	lsls	r3, r3, #19
 8007710:	6113      	str	r3, [r2, #16]
 8007712:	e04e      	b.n	80077b2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007714:	693b      	ldr	r3, [r7, #16]
 8007716:	015a      	lsls	r2, r3, #5
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	4413      	add	r3, r2
 800771c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007720:	691b      	ldr	r3, [r3, #16]
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	0151      	lsls	r1, r2, #5
 8007726:	697a      	ldr	r2, [r7, #20]
 8007728:	440a      	add	r2, r1
 800772a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800772e:	0cdb      	lsrs	r3, r3, #19
 8007730:	04db      	lsls	r3, r3, #19
 8007732:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007734:	693b      	ldr	r3, [r7, #16]
 8007736:	015a      	lsls	r2, r3, #5
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	4413      	add	r3, r2
 800773c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	693a      	ldr	r2, [r7, #16]
 8007744:	0151      	lsls	r1, r2, #5
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	440a      	add	r2, r1
 800774a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007752:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007756:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	695a      	ldr	r2, [r3, #20]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	689b      	ldr	r3, [r3, #8]
 8007760:	429a      	cmp	r2, r3
 8007762:	d903      	bls.n	800776c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	689a      	ldr	r2, [r3, #8]
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	4413      	add	r3, r2
 8007774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	0151      	lsls	r1, r2, #5
 800777e:	697a      	ldr	r2, [r7, #20]
 8007780:	440a      	add	r2, r1
 8007782:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007786:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800778a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800778c:	693b      	ldr	r3, [r7, #16]
 800778e:	015a      	lsls	r2, r3, #5
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	4413      	add	r3, r2
 8007794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007798:	691a      	ldr	r2, [r3, #16]
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	695b      	ldr	r3, [r3, #20]
 800779e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077a2:	6939      	ldr	r1, [r7, #16]
 80077a4:	0148      	lsls	r0, r1, #5
 80077a6:	6979      	ldr	r1, [r7, #20]
 80077a8:	4401      	add	r1, r0
 80077aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80077ae:	4313      	orrs	r3, r2
 80077b0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80077b2:	79fb      	ldrb	r3, [r7, #7]
 80077b4:	2b01      	cmp	r3, #1
 80077b6:	d11e      	bne.n	80077f6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d009      	beq.n	80077d4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	697b      	ldr	r3, [r7, #20]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077cc:	461a      	mov	r2, r3
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	693a      	ldr	r2, [r7, #16]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077f2:	6013      	str	r3, [r2, #0]
 80077f4:	e092      	b.n	800791c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	693a      	ldr	r2, [r7, #16]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	697a      	ldr	r2, [r7, #20]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007810:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007814:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	695b      	ldr	r3, [r3, #20]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d07e      	beq.n	800791c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007824:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	2101      	movs	r1, #1
 8007830:	fa01 f303 	lsl.w	r3, r1, r3
 8007834:	6979      	ldr	r1, [r7, #20]
 8007836:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800783a:	4313      	orrs	r3, r2
 800783c:	634b      	str	r3, [r1, #52]	; 0x34
 800783e:	e06d      	b.n	800791c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	697b      	ldr	r3, [r7, #20]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800784c:	691b      	ldr	r3, [r3, #16]
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	0151      	lsls	r1, r2, #5
 8007852:	697a      	ldr	r2, [r7, #20]
 8007854:	440a      	add	r2, r1
 8007856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800785a:	0cdb      	lsrs	r3, r3, #19
 800785c:	04db      	lsls	r3, r3, #19
 800785e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	4413      	add	r3, r2
 8007868:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	693a      	ldr	r2, [r7, #16]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	697a      	ldr	r2, [r7, #20]
 8007874:	440a      	add	r2, r1
 8007876:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800787a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800787e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007882:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	689a      	ldr	r2, [r3, #8]
 8007890:	68bb      	ldr	r3, [r7, #8]
 8007892:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	015a      	lsls	r2, r3, #5
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	4413      	add	r3, r2
 800789c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a0:	691b      	ldr	r3, [r3, #16]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	0151      	lsls	r1, r2, #5
 80078a6:	697a      	ldr	r2, [r7, #20]
 80078a8:	440a      	add	r2, r1
 80078aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078b2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c0:	691a      	ldr	r2, [r3, #16]
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	689b      	ldr	r3, [r3, #8]
 80078c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078ca:	6939      	ldr	r1, [r7, #16]
 80078cc:	0148      	lsls	r0, r1, #5
 80078ce:	6979      	ldr	r1, [r7, #20]
 80078d0:	4401      	add	r1, r0
 80078d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078d6:	4313      	orrs	r3, r2
 80078d8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d10d      	bne.n	80078fc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	68db      	ldr	r3, [r3, #12]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80078e8:	68bb      	ldr	r3, [r7, #8]
 80078ea:	68d9      	ldr	r1, [r3, #12]
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	015a      	lsls	r2, r3, #5
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	4413      	add	r3, r2
 80078f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f8:	460a      	mov	r2, r1
 80078fa:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	015a      	lsls	r2, r3, #5
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	4413      	add	r3, r2
 8007904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	693a      	ldr	r2, [r7, #16]
 800790c:	0151      	lsls	r1, r2, #5
 800790e:	697a      	ldr	r2, [r7, #20]
 8007910:	440a      	add	r2, r1
 8007912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800791a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800791c:	2300      	movs	r3, #0
}
 800791e:	4618      	mov	r0, r3
 8007920:	371c      	adds	r7, #28
 8007922:	46bd      	mov	sp, r7
 8007924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007928:	4770      	bx	lr

0800792a <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800792a:	b480      	push	{r7}
 800792c:	b089      	sub	sp, #36	; 0x24
 800792e:	af00      	add	r7, sp, #0
 8007930:	60f8      	str	r0, [r7, #12]
 8007932:	60b9      	str	r1, [r7, #8]
 8007934:	4611      	mov	r1, r2
 8007936:	461a      	mov	r2, r3
 8007938:	460b      	mov	r3, r1
 800793a:	71fb      	strb	r3, [r7, #7]
 800793c:	4613      	mov	r3, r2
 800793e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8007944:	68bb      	ldr	r3, [r7, #8]
 8007946:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8007948:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800794c:	2b00      	cmp	r3, #0
 800794e:	d11a      	bne.n	8007986 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007950:	88bb      	ldrh	r3, [r7, #4]
 8007952:	3303      	adds	r3, #3
 8007954:	089b      	lsrs	r3, r3, #2
 8007956:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007958:	2300      	movs	r3, #0
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	e00f      	b.n	800797e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800795e:	79fb      	ldrb	r3, [r7, #7]
 8007960:	031a      	lsls	r2, r3, #12
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	4413      	add	r3, r2
 8007966:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800796a:	461a      	mov	r2, r3
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	3304      	adds	r3, #4
 8007976:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	3301      	adds	r3, #1
 800797c:	61bb      	str	r3, [r7, #24]
 800797e:	69ba      	ldr	r2, [r7, #24]
 8007980:	693b      	ldr	r3, [r7, #16]
 8007982:	429a      	cmp	r2, r3
 8007984:	d3eb      	bcc.n	800795e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007986:	2300      	movs	r3, #0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3724      	adds	r7, #36	; 0x24
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007994:	b480      	push	{r7}
 8007996:	b089      	sub	sp, #36	; 0x24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	3303      	adds	r3, #3
 80079ae:	089b      	lsrs	r3, r3, #2
 80079b0:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80079b2:	2300      	movs	r3, #0
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	e00b      	b.n	80079d0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80079be:	681a      	ldr	r2, [r3, #0]
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	601a      	str	r2, [r3, #0]
    pDest++;
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	3304      	adds	r3, #4
 80079c8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	3301      	adds	r3, #1
 80079ce:	61bb      	str	r3, [r7, #24]
 80079d0:	69ba      	ldr	r2, [r7, #24]
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d3ef      	bcc.n	80079b8 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80079d8:	69fb      	ldr	r3, [r7, #28]
}
 80079da:	4618      	mov	r0, r3
 80079dc:	3724      	adds	r7, #36	; 0x24
 80079de:	46bd      	mov	sp, r7
 80079e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e4:	4770      	bx	lr

080079e6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b085      	sub	sp, #20
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80079f4:	683b      	ldr	r3, [r7, #0]
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	785b      	ldrb	r3, [r3, #1]
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d12c      	bne.n	8007a5c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	015a      	lsls	r2, r3, #5
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	4413      	add	r3, r2
 8007a0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	db12      	blt.n	8007a3a <USB_EPSetStall+0x54>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00f      	beq.n	8007a3a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	015a      	lsls	r2, r3, #5
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	4413      	add	r3, r2
 8007a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	68ba      	ldr	r2, [r7, #8]
 8007a2a:	0151      	lsls	r1, r2, #5
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	440a      	add	r2, r1
 8007a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a34:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a38:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	68fa      	ldr	r2, [r7, #12]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	e02b      	b.n	8007ab4 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	015a      	lsls	r2, r3, #5
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	4413      	add	r3, r2
 8007a64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	db12      	blt.n	8007a94 <USB_EPSetStall+0xae>
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d00f      	beq.n	8007a94 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a92:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	015a      	lsls	r2, r3, #5
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	68ba      	ldr	r2, [r7, #8]
 8007aa4:	0151      	lsls	r1, r2, #5
 8007aa6:	68fa      	ldr	r2, [r7, #12]
 8007aa8:	440a      	add	r2, r1
 8007aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007aae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ab2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007ab4:	2300      	movs	r3, #0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr

08007ac2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ac2:	b480      	push	{r7}
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	af00      	add	r7, sp, #0
 8007ac8:	6078      	str	r0, [r7, #4]
 8007aca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	785b      	ldrb	r3, [r3, #1]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d128      	bne.n	8007b30 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	68ba      	ldr	r2, [r7, #8]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007af8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007afc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	78db      	ldrb	r3, [r3, #3]
 8007b02:	2b03      	cmp	r3, #3
 8007b04:	d003      	beq.n	8007b0e <USB_EPClearStall+0x4c>
 8007b06:	683b      	ldr	r3, [r7, #0]
 8007b08:	78db      	ldrb	r3, [r3, #3]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d138      	bne.n	8007b80 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	015a      	lsls	r2, r3, #5
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	4413      	add	r3, r2
 8007b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	68ba      	ldr	r2, [r7, #8]
 8007b1e:	0151      	lsls	r1, r2, #5
 8007b20:	68fa      	ldr	r2, [r7, #12]
 8007b22:	440a      	add	r2, r1
 8007b24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	e027      	b.n	8007b80 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	0151      	lsls	r1, r2, #5
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	440a      	add	r2, r1
 8007b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	78db      	ldrb	r3, [r3, #3]
 8007b54:	2b03      	cmp	r3, #3
 8007b56:	d003      	beq.n	8007b60 <USB_EPClearStall+0x9e>
 8007b58:	683b      	ldr	r3, [r7, #0]
 8007b5a:	78db      	ldrb	r3, [r3, #3]
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d10f      	bne.n	8007b80 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	68ba      	ldr	r2, [r7, #8]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b7e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3714      	adds	r7, #20
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr

08007b8e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b085      	sub	sp, #20
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bac:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007bb0:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	78fb      	ldrb	r3, [r7, #3]
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007bcc:	2300      	movs	r3, #0
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bf4:	f023 0303 	bic.w	r3, r3, #3
 8007bf8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	68fa      	ldr	r2, [r7, #12]
 8007c04:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c08:	f023 0302 	bic.w	r3, r3, #2
 8007c0c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3714      	adds	r7, #20
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr

08007c1c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b085      	sub	sp, #20
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	68fa      	ldr	r2, [r7, #12]
 8007c32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c36:	f023 0303 	bic.w	r3, r3, #3
 8007c3a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	68fa      	ldr	r2, [r7, #12]
 8007c46:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007c4a:	f043 0302 	orr.w	r3, r3, #2
 8007c4e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007c50:	2300      	movs	r3, #0
}
 8007c52:	4618      	mov	r0, r3
 8007c54:	3714      	adds	r7, #20
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr

08007c5e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695b      	ldr	r3, [r3, #20]
 8007c6a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	68fa      	ldr	r2, [r7, #12]
 8007c72:	4013      	ands	r3, r2
 8007c74:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c76:	68fb      	ldr	r3, [r7, #12]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3714      	adds	r7, #20
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b085      	sub	sp, #20
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca0:	69db      	ldr	r3, [r3, #28]
 8007ca2:	68ba      	ldr	r2, [r7, #8]
 8007ca4:	4013      	ands	r3, r2
 8007ca6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	0c1b      	lsrs	r3, r3, #16
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd4:	69db      	ldr	r3, [r3, #28]
 8007cd6:	68ba      	ldr	r2, [r7, #8]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	b29b      	uxth	r3, r3
}
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	3714      	adds	r7, #20
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b085      	sub	sp, #20
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	460b      	mov	r3, r1
 8007cf6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d12:	695b      	ldr	r3, [r3, #20]
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	4013      	ands	r3, r2
 8007d18:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d1a:	68bb      	ldr	r3, [r7, #8]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3714      	adds	r7, #20
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b087      	sub	sp, #28
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
 8007d30:	460b      	mov	r3, r1
 8007d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d4a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007d4c:	78fb      	ldrb	r3, [r7, #3]
 8007d4e:	f003 030f 	and.w	r3, r3, #15
 8007d52:	68fa      	ldr	r2, [r7, #12]
 8007d54:	fa22 f303 	lsr.w	r3, r2, r3
 8007d58:	01db      	lsls	r3, r3, #7
 8007d5a:	b2db      	uxtb	r3, r3
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007d62:	78fb      	ldrb	r3, [r7, #3]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	4013      	ands	r3, r2
 8007d74:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d76:	68bb      	ldr	r3, [r7, #8]
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	371c      	adds	r7, #28
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr

08007d84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	695b      	ldr	r3, [r3, #20]
 8007d90:	f003 0301 	and.w	r3, r3, #1
}
 8007d94:	4618      	mov	r0, r3
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007dba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007dbe:	f023 0307 	bic.w	r3, r3, #7
 8007dc2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	68fa      	ldr	r2, [r7, #12]
 8007dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dd6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
	...

08007de8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b087      	sub	sp, #28
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	460b      	mov	r3, r1
 8007df2:	607a      	str	r2, [r7, #4]
 8007df4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	333c      	adds	r3, #60	; 0x3c
 8007dfe:	3304      	adds	r3, #4
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	4a26      	ldr	r2, [pc, #152]	; (8007ea0 <USB_EP0_OutStart+0xb8>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d90a      	bls.n	8007e22 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e1c:	d101      	bne.n	8007e22 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	e037      	b.n	8007e92 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e28:	461a      	mov	r2, r3
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	697a      	ldr	r2, [r7, #20]
 8007e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e48:	691b      	ldr	r3, [r3, #16]
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e50:	f043 0318 	orr.w	r3, r3, #24
 8007e54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007e56:	697b      	ldr	r3, [r7, #20]
 8007e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e64:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e68:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e6a:	7afb      	ldrb	r3, [r7, #11]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d10f      	bne.n	8007e90 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e76:	461a      	mov	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e8a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	371c      	adds	r7, #28
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	4f54300a 	.word	0x4f54300a

08007ea4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b085      	sub	sp, #20
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007eac:	2300      	movs	r3, #0
 8007eae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	60fb      	str	r3, [r7, #12]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	4a13      	ldr	r2, [pc, #76]	; (8007f08 <USB_CoreReset+0x64>)
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e01b      	b.n	8007efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	691b      	ldr	r3, [r3, #16]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	daf2      	bge.n	8007eb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	691b      	ldr	r3, [r3, #16]
 8007ed2:	f043 0201 	orr.w	r2, r3, #1
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	3301      	adds	r3, #1
 8007ede:	60fb      	str	r3, [r7, #12]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4a09      	ldr	r2, [pc, #36]	; (8007f08 <USB_CoreReset+0x64>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d901      	bls.n	8007eec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e006      	b.n	8007efa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d0f0      	beq.n	8007eda <USB_CoreReset+0x36>

  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3714      	adds	r7, #20
 8007efe:	46bd      	mov	sp, r7
 8007f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f04:	4770      	bx	lr
 8007f06:	bf00      	nop
 8007f08:	00030d40 	.word	0x00030d40

08007f0c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	460b      	mov	r3, r1
 8007f16:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007f18:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007f1c:	f002 f8d6 	bl	800a0cc <malloc>
 8007f20:	4603      	mov	r3, r0
 8007f22:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d105      	bne.n	8007f36 <USBD_CDC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8007f32:	2302      	movs	r3, #2
 8007f34:	e066      	b.n	8008004 <USBD_CDC_Init+0xf8>
  }

  pdev->pClassData = (void *)hcdc;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	68fa      	ldr	r2, [r7, #12]
 8007f3a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	7c1b      	ldrb	r3, [r3, #16]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d119      	bne.n	8007f7a <USBD_CDC_Init+0x6e>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f4a:	2202      	movs	r2, #2
 8007f4c:	2181      	movs	r1, #129	; 0x81
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f001 ff43 	bl	8009dda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f5e:	2202      	movs	r2, #2
 8007f60:	2101      	movs	r1, #1
 8007f62:	6878      	ldr	r0, [r7, #4]
 8007f64:	f001 ff39 	bl	8009dda <USBD_LL_OpenEP>
                          CDC_DATA_HS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CDC CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2210      	movs	r2, #16
 8007f74:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8007f78:	e016      	b.n	8007fa8 <USBD_CDC_Init+0x9c>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007f7a:	2340      	movs	r3, #64	; 0x40
 8007f7c:	2202      	movs	r2, #2
 8007f7e:	2181      	movs	r1, #129	; 0x81
 8007f80:	6878      	ldr	r0, [r7, #4]
 8007f82:	f001 ff2a 	bl	8009dda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

     pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	871a      	strh	r2, [r3, #56]	; 0x38

     /* Open EP OUT */
     (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007f8c:	2340      	movs	r3, #64	; 0x40
 8007f8e:	2202      	movs	r2, #2
 8007f90:	2101      	movs	r1, #1
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f001 ff21 	bl	8009dda <USBD_LL_OpenEP>
                          CDC_DATA_FS_OUT_PACKET_SIZE);

      pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

      /* Set bInterval for CMD Endpoint */
      pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fa8:	2308      	movs	r3, #8
 8007faa:	2203      	movs	r2, #3
 8007fac:	2182      	movs	r1, #130	; 0x82
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 ff13 	bl	8009dda <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	2200      	movs	r2, #0
 8007fca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	7c1b      	ldrb	r3, [r3, #16]
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d109      	bne.n	8007ff2 <USBD_CDC_Init+0xe6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007fe4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007fe8:	2101      	movs	r1, #1
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f001 ffe4 	bl	8009fb8 <USBD_LL_PrepareReceive>
 8007ff0:	e007      	b.n	8008002 <USBD_CDC_Init+0xf6>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ff8:	2340      	movs	r3, #64	; 0x40
 8007ffa:	2101      	movs	r1, #1
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f001 ffdb 	bl	8009fb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008002:	2300      	movs	r3, #0
}
 8008004:	4618      	mov	r0, r3
 8008006:	3710      	adds	r7, #16
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}

0800800c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	b084      	sub	sp, #16
 8008010:	af00      	add	r7, sp, #0
 8008012:	6078      	str	r0, [r7, #4]
 8008014:	460b      	mov	r3, r1
 8008016:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  uint8_t ret = 0U;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800801c:	2181      	movs	r1, #129	; 0x81
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 ff01 	bl	8009e26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2200      	movs	r2, #0
 8008028:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800802a:	2101      	movs	r1, #1
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f001 fefa 	bl	8009e26 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800803a:	2182      	movs	r1, #130	; 0x82
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 fef2 	bl	8009e26 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2200      	movs	r2, #0
 8008046:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008058:	2b00      	cmp	r3, #0
 800805a:	d00e      	beq.n	800807a <USBD_CDC_DeInit+0x6e>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800806c:	4618      	mov	r0, r3
 800806e:	f002 f835 	bl	800a0dc <free>
    pdev->pClassData = NULL;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2200      	movs	r2, #0
 8008076:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return ret;
 800807a:	7bfb      	ldrb	r3, [r7, #15]
}
 800807c:	4618      	mov	r0, r3
 800807e:	3710      	adds	r7, #16
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}

08008084 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b086      	sub	sp, #24
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
 800808c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008094:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800809a:	2300      	movs	r3, #0
 800809c:	81bb      	strh	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	781b      	ldrb	r3, [r3, #0]
 80080a6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d03a      	beq.n	8008124 <USBD_CDC_Setup+0xa0>
 80080ae:	2b20      	cmp	r3, #32
 80080b0:	f040 8097 	bne.w	80081e2 <USBD_CDC_Setup+0x15e>
  {
  case USB_REQ_TYPE_CLASS:
    if (req->wLength != 0U)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	88db      	ldrh	r3, [r3, #6]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d029      	beq.n	8008110 <USBD_CDC_Setup+0x8c>
    {
      if ((req->bmRequest & 0x80U) != 0U)
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	b25b      	sxtb	r3, r3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	da11      	bge.n	80080ea <USBD_CDC_Setup+0x66>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080cc:	689b      	ldr	r3, [r3, #8]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)hcdc->data,
 80080d2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	88d2      	ldrh	r2, [r2, #6]
 80080d8:	4798      	blx	r3
                                                          req->wLength);

          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, req->wLength);
 80080da:	6939      	ldr	r1, [r7, #16]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	88db      	ldrh	r3, [r3, #6]
 80080e0:	461a      	mov	r2, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f001 fa6d 	bl	80095c2 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)req, 0U);
    }
    break;
 80080e8:	e082      	b.n	80081f0 <USBD_CDC_Setup+0x16c>
        hcdc->CmdOpCode = req->bRequest;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	785a      	ldrb	r2, [r3, #1]
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	88db      	ldrh	r3, [r3, #6]
 80080f8:	b2da      	uxtb	r2, r3
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8008100:	6939      	ldr	r1, [r7, #16]
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	88db      	ldrh	r3, [r3, #6]
 8008106:	461a      	mov	r2, r3
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f001 fa86 	bl	800961a <USBD_CtlPrepareRx>
    break;
 800810e:	e06f      	b.n	80081f0 <USBD_CDC_Setup+0x16c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008116:	689b      	ldr	r3, [r3, #8]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	7850      	ldrb	r0, [r2, #1]
 800811c:	2200      	movs	r2, #0
 800811e:	6839      	ldr	r1, [r7, #0]
 8008120:	4798      	blx	r3
    break;
 8008122:	e065      	b.n	80081f0 <USBD_CDC_Setup+0x16c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	785b      	ldrb	r3, [r3, #1]
 8008128:	2b0b      	cmp	r3, #11
 800812a:	d84f      	bhi.n	80081cc <USBD_CDC_Setup+0x148>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <USBD_CDC_Setup+0xb0>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008165 	.word	0x08008165
 8008138:	080081db 	.word	0x080081db
 800813c:	080081cd 	.word	0x080081cd
 8008140:	080081cd 	.word	0x080081cd
 8008144:	080081cd 	.word	0x080081cd
 8008148:	080081cd 	.word	0x080081cd
 800814c:	080081cd 	.word	0x080081cd
 8008150:	080081cd 	.word	0x080081cd
 8008154:	080081cd 	.word	0x080081cd
 8008158:	080081cd 	.word	0x080081cd
 800815c:	0800818d 	.word	0x0800818d
 8008160:	080081b5 	.word	0x080081b5
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800816a:	2b03      	cmp	r3, #3
 800816c:	d107      	bne.n	800817e <USBD_CDC_Setup+0xfa>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800816e:	f107 030c 	add.w	r3, r7, #12
 8008172:	2202      	movs	r2, #2
 8008174:	4619      	mov	r1, r3
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f001 fa23 	bl	80095c2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800817c:	e030      	b.n	80081e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 800817e:	6839      	ldr	r1, [r7, #0]
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 f9ad 	bl	80094e0 <USBD_CtlError>
        ret = USBD_FAIL;
 8008186:	2303      	movs	r3, #3
 8008188:	75fb      	strb	r3, [r7, #23]
      break;
 800818a:	e029      	b.n	80081e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008192:	2b03      	cmp	r3, #3
 8008194:	d107      	bne.n	80081a6 <USBD_CDC_Setup+0x122>
      {
        (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008196:	f107 030f 	add.w	r3, r7, #15
 800819a:	2201      	movs	r2, #1
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f001 fa0f 	bl	80095c2 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80081a4:	e01c      	b.n	80081e0 <USBD_CDC_Setup+0x15c>
        USBD_CtlError(pdev, req);
 80081a6:	6839      	ldr	r1, [r7, #0]
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f001 f999 	bl	80094e0 <USBD_CtlError>
        ret = USBD_FAIL;
 80081ae:	2303      	movs	r3, #3
 80081b0:	75fb      	strb	r3, [r7, #23]
      break;
 80081b2:	e015      	b.n	80081e0 <USBD_CDC_Setup+0x15c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80081ba:	2b03      	cmp	r3, #3
 80081bc:	d00f      	beq.n	80081de <USBD_CDC_Setup+0x15a>
      {
        USBD_CtlError(pdev, req);
 80081be:	6839      	ldr	r1, [r7, #0]
 80081c0:	6878      	ldr	r0, [r7, #4]
 80081c2:	f001 f98d 	bl	80094e0 <USBD_CtlError>
        ret = USBD_FAIL;
 80081c6:	2303      	movs	r3, #3
 80081c8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80081ca:	e008      	b.n	80081de <USBD_CDC_Setup+0x15a>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 80081cc:	6839      	ldr	r1, [r7, #0]
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 f986 	bl	80094e0 <USBD_CtlError>
      ret = USBD_FAIL;
 80081d4:	2303      	movs	r3, #3
 80081d6:	75fb      	strb	r3, [r7, #23]
      break;
 80081d8:	e002      	b.n	80081e0 <USBD_CDC_Setup+0x15c>
      break;
 80081da:	bf00      	nop
 80081dc:	e008      	b.n	80081f0 <USBD_CDC_Setup+0x16c>
      break;
 80081de:	bf00      	nop
    }
    break;
 80081e0:	e006      	b.n	80081f0 <USBD_CDC_Setup+0x16c>

  default:
    USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f001 f97b 	bl	80094e0 <USBD_CtlError>
    ret = USBD_FAIL;
 80081ea:	2303      	movs	r3, #3
 80081ec:	75fb      	strb	r3, [r7, #23]
    break;
 80081ee:	bf00      	nop
  }

  return (uint8_t)ret;
 80081f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}
 80081fa:	bf00      	nop

080081fc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b084      	sub	sp, #16
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800820e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800821a:	2303      	movs	r3, #3
 800821c:	e049      	b.n	80082b2 <USBD_CDC_DataIn+0xb6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008224:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008226:	78fa      	ldrb	r2, [r7, #3]
 8008228:	6879      	ldr	r1, [r7, #4]
 800822a:	4613      	mov	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4413      	add	r3, r2
 8008230:	009b      	lsls	r3, r3, #2
 8008232:	440b      	add	r3, r1
 8008234:	3318      	adds	r3, #24
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d029      	beq.n	8008290 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800823c:	78fa      	ldrb	r2, [r7, #3]
 800823e:	6879      	ldr	r1, [r7, #4]
 8008240:	4613      	mov	r3, r2
 8008242:	009b      	lsls	r3, r3, #2
 8008244:	4413      	add	r3, r2
 8008246:	009b      	lsls	r3, r3, #2
 8008248:	440b      	add	r3, r1
 800824a:	3318      	adds	r3, #24
 800824c:	681a      	ldr	r2, [r3, #0]
 800824e:	78f9      	ldrb	r1, [r7, #3]
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	460b      	mov	r3, r1
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	1a5b      	subs	r3, r3, r1
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	4403      	add	r3, r0
 800825c:	3344      	adds	r3, #68	; 0x44
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	fbb2 f1f3 	udiv	r1, r2, r3
 8008264:	fb03 f301 	mul.w	r3, r3, r1
 8008268:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800826a:	2b00      	cmp	r3, #0
 800826c:	d110      	bne.n	8008290 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800826e:	78fa      	ldrb	r2, [r7, #3]
 8008270:	6879      	ldr	r1, [r7, #4]
 8008272:	4613      	mov	r3, r2
 8008274:	009b      	lsls	r3, r3, #2
 8008276:	4413      	add	r3, r2
 8008278:	009b      	lsls	r3, r3, #2
 800827a:	440b      	add	r3, r1
 800827c:	3318      	adds	r3, #24
 800827e:	2200      	movs	r2, #0
 8008280:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008282:	78f9      	ldrb	r1, [r7, #3]
 8008284:	2300      	movs	r3, #0
 8008286:	2200      	movs	r2, #0
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f001 fe74 	bl	8009f76 <USBD_LL_Transmit>
 800828e:	e00f      	b.n	80082b0 <USBD_CDC_DataIn+0xb4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	68ba      	ldr	r2, [r7, #8]
 80082a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80082a6:	68ba      	ldr	r2, [r7, #8]
 80082a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80082ac:	78fa      	ldrb	r2, [r7, #3]
 80082ae:	4798      	blx	r3
  }

  return (uint8_t)USBD_OK;
 80082b0:	2300      	movs	r3, #0
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}

080082ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
 80082c2:	460b      	mov	r3, r1
 80082c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d101      	bne.n	80082dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80082d8:	2303      	movs	r3, #3
 80082da:	e015      	b.n	8008308 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80082dc:	78fb      	ldrb	r3, [r7, #3]
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f001 fe8a 	bl	8009ffa <USBD_LL_GetRxDataSize>
 80082e6:	4602      	mov	r2, r0
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80082f4:	68db      	ldr	r3, [r3, #12]
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80082fc:	68fa      	ldr	r2, [r7, #12]
 80082fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008302:	4611      	mov	r1, r2
 8008304:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3710      	adds	r7, #16
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}

08008310 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800831e:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008326:	2b00      	cmp	r3, #0
 8008328:	d015      	beq.n	8008356 <USBD_CDC_EP0_RxReady+0x46>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008330:	2bff      	cmp	r3, #255	; 0xff
 8008332:	d010      	beq.n	8008356 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8008342:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800834a:	b292      	uxth	r2, r2
 800834c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	22ff      	movs	r2, #255	; 0xff
 8008352:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }

  return (uint8_t)USBD_OK;
 8008356:	2300      	movs	r3, #0
}
 8008358:	4618      	mov	r0, r3
 800835a:	3710      	adds	r7, #16
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}

08008360 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2243      	movs	r2, #67	; 0x43
 800836c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800836e:	4b03      	ldr	r3, [pc, #12]	; (800837c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	200000b8 	.word	0x200000b8

08008380 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008380:	b480      	push	{r7}
 8008382:	b083      	sub	sp, #12
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2243      	movs	r2, #67	; 0x43
 800838c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800838e:	4b03      	ldr	r3, [pc, #12]	; (800839c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008390:	4618      	mov	r0, r3
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr
 800839c:	20000074 	.word	0x20000074

080083a0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b083      	sub	sp, #12
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2243      	movs	r2, #67	; 0x43
 80083ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80083ae:	4b03      	ldr	r3, [pc, #12]	; (80083bc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80083b0:	4618      	mov	r0, r3
 80083b2:	370c      	adds	r7, #12
 80083b4:	46bd      	mov	sp, r7
 80083b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ba:	4770      	bx	lr
 80083bc:	200000fc 	.word	0x200000fc

080083c0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	220a      	movs	r2, #10
 80083cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80083ce:	4b03      	ldr	r3, [pc, #12]	; (80083dc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	370c      	adds	r7, #12
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr
 80083dc:	20000030 	.word	0x20000030

080083e0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d101      	bne.n	80083f4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e004      	b.n	80083fe <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	370c      	adds	r7, #12
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr

0800840a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800840a:	b480      	push	{r7}
 800840c:	b087      	sub	sp, #28
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800841c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	371c      	adds	r7, #28
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800844c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	683a      	ldr	r2, [r7, #0]
 8008452:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008472:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800847e:	2303      	movs	r3, #3
 8008480:	e016      	b.n	80084b0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	7c1b      	ldrb	r3, [r3, #16]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d109      	bne.n	800849e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008490:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008494:	2101      	movs	r1, #1
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f001 fd8e 	bl	8009fb8 <USBD_LL_PrepareReceive>
 800849c:	e007      	b.n	80084ae <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80084a4:	2340      	movs	r3, #64	; 0x40
 80084a6:	2101      	movs	r1, #1
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f001 fd85 	bl	8009fb8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b086      	sub	sp, #24
 80084bc:	af00      	add	r7, sp, #0
 80084be:	60f8      	str	r0, [r7, #12]
 80084c0:	60b9      	str	r1, [r7, #8]
 80084c2:	4613      	mov	r3, r2
 80084c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d101      	bne.n	80084d0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80084cc:	2303      	movs	r3, #3
 80084ce:	e025      	b.n	800851c <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d003      	beq.n	80084e2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	2200      	movs	r2, #0
 80084de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d003      	beq.n	80084f4 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d003      	beq.n	8008502 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	68ba      	ldr	r2, [r7, #8]
 80084fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2201      	movs	r2, #1
 8008506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	79fa      	ldrb	r2, [r7, #7]
 800850e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008510:	68f8      	ldr	r0, [r7, #12]
 8008512:	f001 fbfb 	bl	8009d0c <USBD_LL_Init>
 8008516:	4603      	mov	r3, r0
 8008518:	75fb      	strb	r3, [r7, #23]

  return ret;
 800851a:	7dfb      	ldrb	r3, [r7, #23]
}
 800851c:	4618      	mov	r0, r3
 800851e:	3718      	adds	r7, #24
 8008520:	46bd      	mov	sp, r7
 8008522:	bd80      	pop	{r7, pc}

08008524 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b084      	sub	sp, #16
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800852e:	2300      	movs	r3, #0
 8008530:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008532:	683b      	ldr	r3, [r7, #0]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d101      	bne.n	800853c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008538:	2303      	movs	r3, #3
 800853a:	e010      	b.n	800855e <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	683a      	ldr	r2, [r7, #0]
 8008540:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	f107 020e 	add.w	r2, r7, #14
 8008550:	4610      	mov	r0, r2
 8008552:	4798      	blx	r3
 8008554:	4602      	mov	r2, r0
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	3710      	adds	r7, #16
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}

08008566 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b082      	sub	sp, #8
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f001 fc18 	bl	8009da4 <USBD_LL_Start>
 8008574:	4603      	mov	r3, r0
}
 8008576:	4618      	mov	r0, r3
 8008578:	3708      	adds	r7, #8
 800857a:	46bd      	mov	sp, r7
 800857c:	bd80      	pop	{r7, pc}

0800857e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008586:	2300      	movs	r3, #0
}
 8008588:	4618      	mov	r0, r3
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
 800859c:	460b      	mov	r3, r1
 800859e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80085a0:	2303      	movs	r3, #3
 80085a2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d009      	beq.n	80085c2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	78fa      	ldrb	r2, [r7, #3]
 80085b8:	4611      	mov	r1, r2
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	4798      	blx	r3
 80085be:	4603      	mov	r3, r0
 80085c0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80085c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
 80085d4:	460b      	mov	r3, r1
 80085d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d007      	beq.n	80085f2 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	78fa      	ldrb	r2, [r7, #3]
 80085ec:	4611      	mov	r1, r2
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
  }

  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3708      	adds	r7, #8
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b084      	sub	sp, #16
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
 8008604:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800860c:	6839      	ldr	r1, [r7, #0]
 800860e:	4618      	mov	r0, r3
 8008610:	f000 ff2c 	bl	800946c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2201      	movs	r2, #1
 8008618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008622:	461a      	mov	r2, r3
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008630:	f003 031f 	and.w	r3, r3, #31
 8008634:	2b01      	cmp	r3, #1
 8008636:	d00e      	beq.n	8008656 <USBD_LL_SetupStage+0x5a>
 8008638:	2b01      	cmp	r3, #1
 800863a:	d302      	bcc.n	8008642 <USBD_LL_SetupStage+0x46>
 800863c:	2b02      	cmp	r3, #2
 800863e:	d014      	beq.n	800866a <USBD_LL_SetupStage+0x6e>
 8008640:	e01d      	b.n	800867e <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fa18 	bl	8008a80 <USBD_StdDevReq>
 8008650:	4603      	mov	r3, r0
 8008652:	73fb      	strb	r3, [r7, #15]
      break;
 8008654:	e020      	b.n	8008698 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800865c:	4619      	mov	r1, r3
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fa7c 	bl	8008b5c <USBD_StdItfReq>
 8008664:	4603      	mov	r3, r0
 8008666:	73fb      	strb	r3, [r7, #15]
      break;
 8008668:	e016      	b.n	8008698 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008670:	4619      	mov	r1, r3
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fab8 	bl	8008be8 <USBD_StdEPReq>
 8008678:	4603      	mov	r3, r0
 800867a:	73fb      	strb	r3, [r7, #15]
      break;
 800867c:	e00c      	b.n	8008698 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008684:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008688:	b2db      	uxtb	r3, r3
 800868a:	4619      	mov	r1, r3
 800868c:	6878      	ldr	r0, [r7, #4]
 800868e:	f001 fbe9 	bl	8009e64 <USBD_LL_StallEP>
 8008692:	4603      	mov	r3, r0
 8008694:	73fb      	strb	r3, [r7, #15]
      break;
 8008696:	bf00      	nop
  }

  return ret;
 8008698:	7bfb      	ldrb	r3, [r7, #15]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3710      	adds	r7, #16
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}

080086a2 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80086a2:	b580      	push	{r7, lr}
 80086a4:	b086      	sub	sp, #24
 80086a6:	af00      	add	r7, sp, #0
 80086a8:	60f8      	str	r0, [r7, #12]
 80086aa:	460b      	mov	r3, r1
 80086ac:	607a      	str	r2, [r7, #4]
 80086ae:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80086b0:	7afb      	ldrb	r3, [r7, #11]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d137      	bne.n	8008726 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80086bc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80086c4:	2b03      	cmp	r3, #3
 80086c6:	d14a      	bne.n	800875e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80086c8:	693b      	ldr	r3, [r7, #16]
 80086ca:	689a      	ldr	r2, [r3, #8]
 80086cc:	693b      	ldr	r3, [r7, #16]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d913      	bls.n	80086fc <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	689a      	ldr	r2, [r3, #8]
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	1ad2      	subs	r2, r2, r3
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80086e2:	693b      	ldr	r3, [r7, #16]
 80086e4:	68da      	ldr	r2, [r3, #12]
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	689b      	ldr	r3, [r3, #8]
 80086ea:	4293      	cmp	r3, r2
 80086ec:	bf28      	it	cs
 80086ee:	4613      	movcs	r3, r2
 80086f0:	461a      	mov	r2, r3
 80086f2:	6879      	ldr	r1, [r7, #4]
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f000 ffad 	bl	8009654 <USBD_CtlContinueRx>
 80086fa:	e030      	b.n	800875e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800870e:	2b03      	cmp	r3, #3
 8008710:	d105      	bne.n	800871e <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008718:	691b      	ldr	r3, [r3, #16]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800871e:	68f8      	ldr	r0, [r7, #12]
 8008720:	f000 ffa9 	bl	8009676 <USBD_CtlSendStatus>
 8008724:	e01b      	b.n	800875e <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d013      	beq.n	800875a <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008738:	2b03      	cmp	r3, #3
 800873a:	d10e      	bne.n	800875a <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008742:	699b      	ldr	r3, [r3, #24]
 8008744:	7afa      	ldrb	r2, [r7, #11]
 8008746:	4611      	mov	r1, r2
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	4798      	blx	r3
 800874c:	4603      	mov	r3, r0
 800874e:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8008750:	7dfb      	ldrb	r3, [r7, #23]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d003      	beq.n	800875e <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8008756:	7dfb      	ldrb	r3, [r7, #23]
 8008758:	e002      	b.n	8008760 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800875a:	2303      	movs	r3, #3
 800875c:	e000      	b.n	8008760 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800875e:	2300      	movs	r3, #0
}
 8008760:	4618      	mov	r0, r3
 8008762:	3718      	adds	r7, #24
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	460b      	mov	r3, r1
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d16a      	bne.n	8008852 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3314      	adds	r3, #20
 8008780:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008788:	2b02      	cmp	r3, #2
 800878a:	d155      	bne.n	8008838 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	689a      	ldr	r2, [r3, #8]
 8008790:	693b      	ldr	r3, [r7, #16]
 8008792:	68db      	ldr	r3, [r3, #12]
 8008794:	429a      	cmp	r2, r3
 8008796:	d914      	bls.n	80087c2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	689a      	ldr	r2, [r3, #8]
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	68db      	ldr	r3, [r3, #12]
 80087a0:	1ad2      	subs	r2, r2, r3
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	461a      	mov	r2, r3
 80087ac:	6879      	ldr	r1, [r7, #4]
 80087ae:	68f8      	ldr	r0, [r7, #12]
 80087b0:	f000 ff22 	bl	80095f8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087b4:	2300      	movs	r3, #0
 80087b6:	2200      	movs	r2, #0
 80087b8:	2100      	movs	r1, #0
 80087ba:	68f8      	ldr	r0, [r7, #12]
 80087bc:	f001 fbfc 	bl	8009fb8 <USBD_LL_PrepareReceive>
 80087c0:	e03a      	b.n	8008838 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	68da      	ldr	r2, [r3, #12]
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	689b      	ldr	r3, [r3, #8]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	d11c      	bne.n	8008808 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	685a      	ldr	r2, [r3, #4]
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d316      	bcc.n	8008808 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	685a      	ldr	r2, [r3, #4]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d20f      	bcs.n	8008808 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80087e8:	2200      	movs	r2, #0
 80087ea:	2100      	movs	r1, #0
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f000 ff03 	bl	80095f8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	2200      	movs	r2, #0
 80087f6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80087fa:	2300      	movs	r3, #0
 80087fc:	2200      	movs	r2, #0
 80087fe:	2100      	movs	r1, #0
 8008800:	68f8      	ldr	r0, [r7, #12]
 8008802:	f001 fbd9 	bl	8009fb8 <USBD_LL_PrepareReceive>
 8008806:	e017      	b.n	8008838 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800880e:	68db      	ldr	r3, [r3, #12]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d00a      	beq.n	800882a <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800881a:	2b03      	cmp	r3, #3
 800881c:	d105      	bne.n	800882a <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	68f8      	ldr	r0, [r7, #12]
 8008828:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800882a:	2180      	movs	r1, #128	; 0x80
 800882c:	68f8      	ldr	r0, [r7, #12]
 800882e:	f001 fb19 	bl	8009e64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	f000 ff32 	bl	800969c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800883e:	2b01      	cmp	r3, #1
 8008840:	d123      	bne.n	800888a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f7ff fe9b 	bl	800857e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008850:	e01b      	b.n	800888a <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008858:	695b      	ldr	r3, [r3, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d013      	beq.n	8008886 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008864:	2b03      	cmp	r3, #3
 8008866:	d10e      	bne.n	8008886 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800886e:	695b      	ldr	r3, [r3, #20]
 8008870:	7afa      	ldrb	r2, [r7, #11]
 8008872:	4611      	mov	r1, r2
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	4798      	blx	r3
 8008878:	4603      	mov	r3, r0
 800887a:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800887c:	7dfb      	ldrb	r3, [r7, #23]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d003      	beq.n	800888a <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8008882:	7dfb      	ldrb	r3, [r7, #23]
 8008884:	e002      	b.n	800888c <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008886:	2303      	movs	r3, #3
 8008888:	e000      	b.n	800888c <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3718      	adds	r7, #24
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2201      	movs	r2, #1
 80088a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d009      	beq.n	80088d8 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	6852      	ldr	r2, [r2, #4]
 80088d0:	b2d2      	uxtb	r2, r2
 80088d2:	4611      	mov	r1, r2
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088d8:	2340      	movs	r3, #64	; 0x40
 80088da:	2200      	movs	r2, #0
 80088dc:	2100      	movs	r1, #0
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 fa7b 	bl	8009dda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2240      	movs	r2, #64	; 0x40
 80088f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80088f4:	2340      	movs	r3, #64	; 0x40
 80088f6:	2200      	movs	r2, #0
 80088f8:	2180      	movs	r1, #128	; 0x80
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f001 fa6d 	bl	8009dda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2201      	movs	r2, #1
 8008904:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2240      	movs	r2, #64	; 0x40
 800890a:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3708      	adds	r7, #8
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}

08008916 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008916:	b480      	push	{r7}
 8008918:	b083      	sub	sp, #12
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	78fa      	ldrb	r2, [r7, #3]
 8008926:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	370c      	adds	r7, #12
 800892e:	46bd      	mov	sp, r7
 8008930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008934:	4770      	bx	lr

08008936 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008936:	b480      	push	{r7}
 8008938:	b083      	sub	sp, #12
 800893a:	af00      	add	r7, sp, #0
 800893c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2204      	movs	r2, #4
 800894e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008952:	2300      	movs	r3, #0
}
 8008954:	4618      	mov	r0, r3
 8008956:	370c      	adds	r7, #12
 8008958:	46bd      	mov	sp, r7
 800895a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895e:	4770      	bx	lr

08008960 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800896e:	2b04      	cmp	r3, #4
 8008970:	d105      	bne.n	800897e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800897e:	2300      	movs	r3, #0
}
 8008980:	4618      	mov	r0, r3
 8008982:	370c      	adds	r7, #12
 8008984:	46bd      	mov	sp, r7
 8008986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898a:	4770      	bx	lr

0800898c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b082      	sub	sp, #8
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800899a:	2b03      	cmp	r3, #3
 800899c:	d10b      	bne.n	80089b6 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d005      	beq.n	80089b6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	3708      	adds	r7, #8
 80089bc:	46bd      	mov	sp, r7
 80089be:	bd80      	pop	{r7, pc}

080089c0 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	460b      	mov	r3, r1
 80089ca:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
 80089e2:	460b      	mov	r3, r1
 80089e4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	370c      	adds	r7, #12
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr

080089f4 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr

08008a0a <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008a0a:	b580      	push	{r7, lr}
 8008a0c:	b082      	sub	sp, #8
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2201      	movs	r2, #1
 8008a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d009      	beq.n	8008a38 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a2a:	685b      	ldr	r3, [r3, #4]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	6852      	ldr	r2, [r2, #4]
 8008a30:	b2d2      	uxtb	r2, r2
 8008a32:	4611      	mov	r1, r2
 8008a34:	6878      	ldr	r0, [r7, #4]
 8008a36:	4798      	blx	r3
  }

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3708      	adds	r7, #8
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008a42:	b480      	push	{r7}
 8008a44:	b087      	sub	sp, #28
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008a54:	697b      	ldr	r3, [r7, #20]
 8008a56:	3301      	adds	r3, #1
 8008a58:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	781b      	ldrb	r3, [r3, #0]
 8008a5e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008a60:	8a3b      	ldrh	r3, [r7, #16]
 8008a62:	021b      	lsls	r3, r3, #8
 8008a64:	b21a      	sxth	r2, r3
 8008a66:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	b21b      	sxth	r3, r3
 8008a6e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008a70:	89fb      	ldrh	r3, [r7, #14]
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	371c      	adds	r7, #28
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr
	...

08008a80 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	781b      	ldrb	r3, [r3, #0]
 8008a92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008a96:	2b20      	cmp	r3, #32
 8008a98:	d004      	beq.n	8008aa4 <USBD_StdDevReq+0x24>
 8008a9a:	2b40      	cmp	r3, #64	; 0x40
 8008a9c:	d002      	beq.n	8008aa4 <USBD_StdDevReq+0x24>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00a      	beq.n	8008ab8 <USBD_StdDevReq+0x38>
 8008aa2:	e050      	b.n	8008b46 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	6839      	ldr	r1, [r7, #0]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	4798      	blx	r3
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab6:	e04b      	b.n	8008b50 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	785b      	ldrb	r3, [r3, #1]
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d83c      	bhi.n	8008b3a <USBD_StdDevReq+0xba>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <USBD_StdDevReq+0x48>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008b1d 	.word	0x08008b1d
 8008acc:	08008b31 	.word	0x08008b31
 8008ad0:	08008b3b 	.word	0x08008b3b
 8008ad4:	08008b27 	.word	0x08008b27
 8008ad8:	08008b3b 	.word	0x08008b3b
 8008adc:	08008afb 	.word	0x08008afb
 8008ae0:	08008af1 	.word	0x08008af1
 8008ae4:	08008b3b 	.word	0x08008b3b
 8008ae8:	08008b13 	.word	0x08008b13
 8008aec:	08008b05 	.word	0x08008b05
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8008af0:	6839      	ldr	r1, [r7, #0]
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f000 f9ce 	bl	8008e94 <USBD_GetDescriptor>
      break;
 8008af8:	e024      	b.n	8008b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 8008afa:	6839      	ldr	r1, [r7, #0]
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 fb33 	bl	8009168 <USBD_SetAddress>
      break;
 8008b02:	e01f      	b.n	8008b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8008b04:	6839      	ldr	r1, [r7, #0]
 8008b06:	6878      	ldr	r0, [r7, #4]
 8008b08:	f000 fb70 	bl	80091ec <USBD_SetConfig>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b10:	e018      	b.n	8008b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8008b12:	6839      	ldr	r1, [r7, #0]
 8008b14:	6878      	ldr	r0, [r7, #4]
 8008b16:	f000 fc0d 	bl	8009334 <USBD_GetConfig>
      break;
 8008b1a:	e013      	b.n	8008b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8008b1c:	6839      	ldr	r1, [r7, #0]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f000 fc3c 	bl	800939c <USBD_GetStatus>
      break;
 8008b24:	e00e      	b.n	8008b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 8008b26:	6839      	ldr	r1, [r7, #0]
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fc6a 	bl	8009402 <USBD_SetFeature>
      break;
 8008b2e:	e009      	b.n	8008b44 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8008b30:	6839      	ldr	r1, [r7, #0]
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 fc79 	bl	800942a <USBD_ClrFeature>
      break;
 8008b38:	e004      	b.n	8008b44 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fccf 	bl	80094e0 <USBD_CtlError>
      break;
 8008b42:	bf00      	nop
    }
    break;
 8008b44:	e004      	b.n	8008b50 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 8008b46:	6839      	ldr	r1, [r7, #0]
 8008b48:	6878      	ldr	r0, [r7, #4]
 8008b4a:	f000 fcc9 	bl	80094e0 <USBD_CtlError>
    break;
 8008b4e:	bf00      	nop
  }

  return ret;
 8008b50:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	bf00      	nop

08008b5c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b66:	2300      	movs	r3, #0
 8008b68:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008b72:	2b20      	cmp	r3, #32
 8008b74:	d003      	beq.n	8008b7e <USBD_StdItfReq+0x22>
 8008b76:	2b40      	cmp	r3, #64	; 0x40
 8008b78:	d001      	beq.n	8008b7e <USBD_StdItfReq+0x22>
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d12a      	bne.n	8008bd4 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b84:	3b01      	subs	r3, #1
 8008b86:	2b02      	cmp	r3, #2
 8008b88:	d81d      	bhi.n	8008bc6 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	889b      	ldrh	r3, [r3, #4]
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d813      	bhi.n	8008bbc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b9a:	689b      	ldr	r3, [r3, #8]
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	4798      	blx	r3
 8008ba2:	4603      	mov	r3, r0
 8008ba4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	88db      	ldrh	r3, [r3, #6]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d110      	bne.n	8008bd0 <USBD_StdItfReq+0x74>
 8008bae:	7bfb      	ldrb	r3, [r7, #15]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d10d      	bne.n	8008bd0 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f000 fd5e 	bl	8009676 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8008bba:	e009      	b.n	8008bd0 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f000 fc8e 	bl	80094e0 <USBD_CtlError>
      break;
 8008bc4:	e004      	b.n	8008bd0 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8008bc6:	6839      	ldr	r1, [r7, #0]
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fc89 	bl	80094e0 <USBD_CtlError>
      break;
 8008bce:	e000      	b.n	8008bd2 <USBD_StdItfReq+0x76>
      break;
 8008bd0:	bf00      	nop
    }
    break;
 8008bd2:	e004      	b.n	8008bde <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008bd4:	6839      	ldr	r1, [r7, #0]
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fc82 	bl	80094e0 <USBD_CtlError>
    break;
 8008bdc:	bf00      	nop
  }

  return ret;
 8008bde:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be0:	4618      	mov	r0, r3
 8008be2:	3710      	adds	r7, #16
 8008be4:	46bd      	mov	sp, r7
 8008be6:	bd80      	pop	{r7, pc}

08008be8 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b084      	sub	sp, #16
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
 8008bf0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	889b      	ldrh	r3, [r3, #4]
 8008bfa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	781b      	ldrb	r3, [r3, #0]
 8008c00:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	d004      	beq.n	8008c12 <USBD_StdEPReq+0x2a>
 8008c08:	2b40      	cmp	r3, #64	; 0x40
 8008c0a:	d002      	beq.n	8008c12 <USBD_StdEPReq+0x2a>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <USBD_StdEPReq+0x3e>
 8008c10:	e135      	b.n	8008e7e <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c18:	689b      	ldr	r3, [r3, #8]
 8008c1a:	6839      	ldr	r1, [r7, #0]
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	4798      	blx	r3
 8008c20:	4603      	mov	r3, r0
 8008c22:	73fb      	strb	r3, [r7, #15]
    break;
 8008c24:	e130      	b.n	8008e88 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	785b      	ldrb	r3, [r3, #1]
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d03e      	beq.n	8008cac <USBD_StdEPReq+0xc4>
 8008c2e:	2b03      	cmp	r3, #3
 8008c30:	d002      	beq.n	8008c38 <USBD_StdEPReq+0x50>
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d077      	beq.n	8008d26 <USBD_StdEPReq+0x13e>
 8008c36:	e11c      	b.n	8008e72 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c3e:	2b02      	cmp	r3, #2
 8008c40:	d002      	beq.n	8008c48 <USBD_StdEPReq+0x60>
 8008c42:	2b03      	cmp	r3, #3
 8008c44:	d015      	beq.n	8008c72 <USBD_StdEPReq+0x8a>
 8008c46:	e02b      	b.n	8008ca0 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008c48:	7bbb      	ldrb	r3, [r7, #14]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d00c      	beq.n	8008c68 <USBD_StdEPReq+0x80>
 8008c4e:	7bbb      	ldrb	r3, [r7, #14]
 8008c50:	2b80      	cmp	r3, #128	; 0x80
 8008c52:	d009      	beq.n	8008c68 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c54:	7bbb      	ldrb	r3, [r7, #14]
 8008c56:	4619      	mov	r1, r3
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f001 f903 	bl	8009e64 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c5e:	2180      	movs	r1, #128	; 0x80
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f001 f8ff 	bl	8009e64 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008c66:	e020      	b.n	8008caa <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 8008c68:	6839      	ldr	r1, [r7, #0]
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fc38 	bl	80094e0 <USBD_CtlError>
        break;
 8008c70:	e01b      	b.n	8008caa <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	885b      	ldrh	r3, [r3, #2]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d10e      	bne.n	8008c98 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008c7a:	7bbb      	ldrb	r3, [r7, #14]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00b      	beq.n	8008c98 <USBD_StdEPReq+0xb0>
 8008c80:	7bbb      	ldrb	r3, [r7, #14]
 8008c82:	2b80      	cmp	r3, #128	; 0x80
 8008c84:	d008      	beq.n	8008c98 <USBD_StdEPReq+0xb0>
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	88db      	ldrh	r3, [r3, #6]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d104      	bne.n	8008c98 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 f8e6 	bl	8009e64 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fcec 	bl	8009676 <USBD_CtlSendStatus>

        break;
 8008c9e:	e004      	b.n	8008caa <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fc1c 	bl	80094e0 <USBD_CtlError>
        break;
 8008ca8:	bf00      	nop
      }
      break;
 8008caa:	e0e7      	b.n	8008e7c <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb2:	2b02      	cmp	r3, #2
 8008cb4:	d002      	beq.n	8008cbc <USBD_StdEPReq+0xd4>
 8008cb6:	2b03      	cmp	r3, #3
 8008cb8:	d015      	beq.n	8008ce6 <USBD_StdEPReq+0xfe>
 8008cba:	e02d      	b.n	8008d18 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008cbc:	7bbb      	ldrb	r3, [r7, #14]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d00c      	beq.n	8008cdc <USBD_StdEPReq+0xf4>
 8008cc2:	7bbb      	ldrb	r3, [r7, #14]
 8008cc4:	2b80      	cmp	r3, #128	; 0x80
 8008cc6:	d009      	beq.n	8008cdc <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8008cc8:	7bbb      	ldrb	r3, [r7, #14]
 8008cca:	4619      	mov	r1, r3
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 f8c9 	bl	8009e64 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cd2:	2180      	movs	r1, #128	; 0x80
 8008cd4:	6878      	ldr	r0, [r7, #4]
 8008cd6:	f001 f8c5 	bl	8009e64 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8008cda:	e023      	b.n	8008d24 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8008cdc:	6839      	ldr	r1, [r7, #0]
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f000 fbfe 	bl	80094e0 <USBD_CtlError>
        break;
 8008ce4:	e01e      	b.n	8008d24 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	885b      	ldrh	r3, [r3, #2]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d119      	bne.n	8008d22 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d004      	beq.n	8008d02 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008cf8:	7bbb      	ldrb	r3, [r7, #14]
 8008cfa:	4619      	mov	r1, r3
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f001 f8d0 	bl	8009ea2 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f000 fcb7 	bl	8009676 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d0e:	689b      	ldr	r3, [r3, #8]
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	4798      	blx	r3
        }
        break;
 8008d16:	e004      	b.n	8008d22 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8008d18:	6839      	ldr	r1, [r7, #0]
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 fbe0 	bl	80094e0 <USBD_CtlError>
        break;
 8008d20:	e000      	b.n	8008d24 <USBD_StdEPReq+0x13c>
        break;
 8008d22:	bf00      	nop
      }
      break;
 8008d24:	e0aa      	b.n	8008e7c <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d2c:	2b02      	cmp	r3, #2
 8008d2e:	d002      	beq.n	8008d36 <USBD_StdEPReq+0x14e>
 8008d30:	2b03      	cmp	r3, #3
 8008d32:	d032      	beq.n	8008d9a <USBD_StdEPReq+0x1b2>
 8008d34:	e097      	b.n	8008e66 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008d36:	7bbb      	ldrb	r3, [r7, #14]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d007      	beq.n	8008d4c <USBD_StdEPReq+0x164>
 8008d3c:	7bbb      	ldrb	r3, [r7, #14]
 8008d3e:	2b80      	cmp	r3, #128	; 0x80
 8008d40:	d004      	beq.n	8008d4c <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8008d42:	6839      	ldr	r1, [r7, #0]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f000 fbcb 	bl	80094e0 <USBD_CtlError>
          break;
 8008d4a:	e091      	b.n	8008e70 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	da0b      	bge.n	8008d6c <USBD_StdEPReq+0x184>
 8008d54:	7bbb      	ldrb	r3, [r7, #14]
 8008d56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	009b      	lsls	r3, r3, #2
 8008d5e:	4413      	add	r3, r2
 8008d60:	009b      	lsls	r3, r3, #2
 8008d62:	3310      	adds	r3, #16
 8008d64:	687a      	ldr	r2, [r7, #4]
 8008d66:	4413      	add	r3, r2
 8008d68:	3304      	adds	r3, #4
 8008d6a:	e00b      	b.n	8008d84 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
 8008d6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008d72:	4613      	mov	r3, r2
 8008d74:	009b      	lsls	r3, r3, #2
 8008d76:	4413      	add	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008d7e:	687a      	ldr	r2, [r7, #4]
 8008d80:	4413      	add	r3, r2
 8008d82:	3304      	adds	r3, #4
 8008d84:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	4619      	mov	r1, r3
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f000 fc15 	bl	80095c2 <USBD_CtlSendData>
        break;
 8008d98:	e06a      	b.n	8008e70 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8008d9a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	da11      	bge.n	8008dc6 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008da2:	7bbb      	ldrb	r3, [r7, #14]
 8008da4:	f003 020f 	and.w	r2, r3, #15
 8008da8:	6879      	ldr	r1, [r7, #4]
 8008daa:	4613      	mov	r3, r2
 8008dac:	009b      	lsls	r3, r3, #2
 8008dae:	4413      	add	r3, r2
 8008db0:	009b      	lsls	r3, r3, #2
 8008db2:	440b      	add	r3, r1
 8008db4:	3324      	adds	r3, #36	; 0x24
 8008db6:	881b      	ldrh	r3, [r3, #0]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d117      	bne.n	8008dec <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008dbc:	6839      	ldr	r1, [r7, #0]
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 fb8e 	bl	80094e0 <USBD_CtlError>
            break;
 8008dc4:	e054      	b.n	8008e70 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008dc6:	7bbb      	ldrb	r3, [r7, #14]
 8008dc8:	f003 020f 	and.w	r2, r3, #15
 8008dcc:	6879      	ldr	r1, [r7, #4]
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	440b      	add	r3, r1
 8008dd8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008ddc:	881b      	ldrh	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d104      	bne.n	8008dec <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8008de2:	6839      	ldr	r1, [r7, #0]
 8008de4:	6878      	ldr	r0, [r7, #4]
 8008de6:	f000 fb7b 	bl	80094e0 <USBD_CtlError>
            break;
 8008dea:	e041      	b.n	8008e70 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008dec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	da0b      	bge.n	8008e0c <USBD_StdEPReq+0x224>
 8008df4:	7bbb      	ldrb	r3, [r7, #14]
 8008df6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	009b      	lsls	r3, r3, #2
 8008dfe:	4413      	add	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	3310      	adds	r3, #16
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	4413      	add	r3, r2
 8008e08:	3304      	adds	r3, #4
 8008e0a:	e00b      	b.n	8008e24 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8008e0c:	7bbb      	ldrb	r3, [r7, #14]
 8008e0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008e12:	4613      	mov	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	4413      	add	r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	4413      	add	r3, r2
 8008e22:	3304      	adds	r3, #4
 8008e24:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d002      	beq.n	8008e32 <USBD_StdEPReq+0x24a>
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b80      	cmp	r3, #128	; 0x80
 8008e30:	d103      	bne.n	8008e3a <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8008e32:	68bb      	ldr	r3, [r7, #8]
 8008e34:	2200      	movs	r2, #0
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	e00e      	b.n	8008e58 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008e3a:	7bbb      	ldrb	r3, [r7, #14]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 f84e 	bl	8009ee0 <USBD_LL_IsStallEP>
 8008e44:	4603      	mov	r3, r0
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8008e4a:	68bb      	ldr	r3, [r7, #8]
 8008e4c:	2201      	movs	r2, #1
 8008e4e:	601a      	str	r2, [r3, #0]
 8008e50:	e002      	b.n	8008e58 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2200      	movs	r2, #0
 8008e56:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 fbaf 	bl	80095c2 <USBD_CtlSendData>
          break;
 8008e64:	e004      	b.n	8008e70 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8008e66:	6839      	ldr	r1, [r7, #0]
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fb39 	bl	80094e0 <USBD_CtlError>
        break;
 8008e6e:	bf00      	nop
      }
      break;
 8008e70:	e004      	b.n	8008e7c <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8008e72:	6839      	ldr	r1, [r7, #0]
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fb33 	bl	80094e0 <USBD_CtlError>
      break;
 8008e7a:	bf00      	nop
    }
    break;
 8008e7c:	e004      	b.n	8008e88 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f000 fb2d 	bl	80094e0 <USBD_CtlError>
    break;
 8008e86:	bf00      	nop
  }

  return ret;
 8008e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3710      	adds	r7, #16
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
	...

08008e94 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	885b      	ldrh	r3, [r3, #2]
 8008eae:	0a1b      	lsrs	r3, r3, #8
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	2b06      	cmp	r3, #6
 8008eb6:	f200 8128 	bhi.w	800910a <USBD_GetDescriptor+0x276>
 8008eba:	a201      	add	r2, pc, #4	; (adr r2, 8008ec0 <USBD_GetDescriptor+0x2c>)
 8008ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ec0:	08008edd 	.word	0x08008edd
 8008ec4:	08008ef5 	.word	0x08008ef5
 8008ec8:	08008f35 	.word	0x08008f35
 8008ecc:	0800910b 	.word	0x0800910b
 8008ed0:	0800910b 	.word	0x0800910b
 8008ed4:	080090ab 	.word	0x080090ab
 8008ed8:	080090d7 	.word	0x080090d7
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	687a      	ldr	r2, [r7, #4]
 8008ee6:	7c12      	ldrb	r2, [r2, #16]
 8008ee8:	f107 0108 	add.w	r1, r7, #8
 8008eec:	4610      	mov	r0, r2
 8008eee:	4798      	blx	r3
 8008ef0:	60f8      	str	r0, [r7, #12]
    break;
 8008ef2:	e112      	b.n	800911a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	7c1b      	ldrb	r3, [r3, #16]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d10d      	bne.n	8008f18 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f04:	f107 0208 	add.w	r2, r7, #8
 8008f08:	4610      	mov	r0, r2
 8008f0a:	4798      	blx	r3
 8008f0c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	3301      	adds	r3, #1
 8008f12:	2202      	movs	r2, #2
 8008f14:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8008f16:	e100      	b.n	800911a <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f20:	f107 0208 	add.w	r2, r7, #8
 8008f24:	4610      	mov	r0, r2
 8008f26:	4798      	blx	r3
 8008f28:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	2202      	movs	r2, #2
 8008f30:	701a      	strb	r2, [r3, #0]
    break;
 8008f32:	e0f2      	b.n	800911a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	885b      	ldrh	r3, [r3, #2]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b05      	cmp	r3, #5
 8008f3c:	f200 80ac 	bhi.w	8009098 <USBD_GetDescriptor+0x204>
 8008f40:	a201      	add	r2, pc, #4	; (adr r2, 8008f48 <USBD_GetDescriptor+0xb4>)
 8008f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f46:	bf00      	nop
 8008f48:	08008f61 	.word	0x08008f61
 8008f4c:	08008f95 	.word	0x08008f95
 8008f50:	08008fc9 	.word	0x08008fc9
 8008f54:	08008ffd 	.word	0x08008ffd
 8008f58:	08009031 	.word	0x08009031
 8008f5c:	08009065 	.word	0x08009065
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f66:	685b      	ldr	r3, [r3, #4]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d00b      	beq.n	8008f84 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	687a      	ldr	r2, [r7, #4]
 8008f76:	7c12      	ldrb	r2, [r2, #16]
 8008f78:	f107 0108 	add.w	r1, r7, #8
 8008f7c:	4610      	mov	r0, r2
 8008f7e:	4798      	blx	r3
 8008f80:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008f82:	e091      	b.n	80090a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008f84:	6839      	ldr	r1, [r7, #0]
 8008f86:	6878      	ldr	r0, [r7, #4]
 8008f88:	f000 faaa 	bl	80094e0 <USBD_CtlError>
        err++;
 8008f8c:	7afb      	ldrb	r3, [r7, #11]
 8008f8e:	3301      	adds	r3, #1
 8008f90:	72fb      	strb	r3, [r7, #11]
      break;
 8008f92:	e089      	b.n	80090a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	7c12      	ldrb	r2, [r2, #16]
 8008fac:	f107 0108 	add.w	r1, r7, #8
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	4798      	blx	r3
 8008fb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fb6:	e077      	b.n	80090a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008fb8:	6839      	ldr	r1, [r7, #0]
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f000 fa90 	bl	80094e0 <USBD_CtlError>
        err++;
 8008fc0:	7afb      	ldrb	r3, [r7, #11]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	72fb      	strb	r3, [r7, #11]
      break;
 8008fc6:	e06f      	b.n	80090a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008fda:	68db      	ldr	r3, [r3, #12]
 8008fdc:	687a      	ldr	r2, [r7, #4]
 8008fde:	7c12      	ldrb	r2, [r2, #16]
 8008fe0:	f107 0108 	add.w	r1, r7, #8
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	4798      	blx	r3
 8008fe8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008fea:	e05d      	b.n	80090a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8008fec:	6839      	ldr	r1, [r7, #0]
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 fa76 	bl	80094e0 <USBD_CtlError>
        err++;
 8008ff4:	7afb      	ldrb	r3, [r7, #11]
 8008ff6:	3301      	adds	r3, #1
 8008ff8:	72fb      	strb	r3, [r7, #11]
      break;
 8008ffa:	e055      	b.n	80090a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d00b      	beq.n	8009020 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800900e:	691b      	ldr	r3, [r3, #16]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	7c12      	ldrb	r2, [r2, #16]
 8009014:	f107 0108 	add.w	r1, r7, #8
 8009018:	4610      	mov	r0, r2
 800901a:	4798      	blx	r3
 800901c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800901e:	e043      	b.n	80090a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009020:	6839      	ldr	r1, [r7, #0]
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa5c 	bl	80094e0 <USBD_CtlError>
        err++;
 8009028:	7afb      	ldrb	r3, [r7, #11]
 800902a:	3301      	adds	r3, #1
 800902c:	72fb      	strb	r3, [r7, #11]
      break;
 800902e:	e03b      	b.n	80090a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009036:	695b      	ldr	r3, [r3, #20]
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009042:	695b      	ldr	r3, [r3, #20]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	7c12      	ldrb	r2, [r2, #16]
 8009048:	f107 0108 	add.w	r1, r7, #8
 800904c:	4610      	mov	r0, r2
 800904e:	4798      	blx	r3
 8009050:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009052:	e029      	b.n	80090a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009054:	6839      	ldr	r1, [r7, #0]
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f000 fa42 	bl	80094e0 <USBD_CtlError>
        err++;
 800905c:	7afb      	ldrb	r3, [r7, #11]
 800905e:	3301      	adds	r3, #1
 8009060:	72fb      	strb	r3, [r7, #11]
      break;
 8009062:	e021      	b.n	80090a8 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800906a:	699b      	ldr	r3, [r3, #24]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d00b      	beq.n	8009088 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009076:	699b      	ldr	r3, [r3, #24]
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	7c12      	ldrb	r2, [r2, #16]
 800907c:	f107 0108 	add.w	r1, r7, #8
 8009080:	4610      	mov	r0, r2
 8009082:	4798      	blx	r3
 8009084:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009086:	e00f      	b.n	80090a8 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8009088:	6839      	ldr	r1, [r7, #0]
 800908a:	6878      	ldr	r0, [r7, #4]
 800908c:	f000 fa28 	bl	80094e0 <USBD_CtlError>
        err++;
 8009090:	7afb      	ldrb	r3, [r7, #11]
 8009092:	3301      	adds	r3, #1
 8009094:	72fb      	strb	r3, [r7, #11]
      break;
 8009096:	e007      	b.n	80090a8 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8009098:	6839      	ldr	r1, [r7, #0]
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa20 	bl	80094e0 <USBD_CtlError>
      err++;
 80090a0:	7afb      	ldrb	r3, [r7, #11]
 80090a2:	3301      	adds	r3, #1
 80090a4:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80090a6:	bf00      	nop
    }
    break;
 80090a8:	e037      	b.n	800911a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	7c1b      	ldrb	r3, [r3, #16]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d109      	bne.n	80090c6 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ba:	f107 0208 	add.w	r2, r7, #8
 80090be:	4610      	mov	r0, r2
 80090c0:	4798      	blx	r3
 80090c2:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80090c4:	e029      	b.n	800911a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80090c6:	6839      	ldr	r1, [r7, #0]
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 fa09 	bl	80094e0 <USBD_CtlError>
      err++;
 80090ce:	7afb      	ldrb	r3, [r7, #11]
 80090d0:	3301      	adds	r3, #1
 80090d2:	72fb      	strb	r3, [r7, #11]
    break;
 80090d4:	e021      	b.n	800911a <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	7c1b      	ldrb	r3, [r3, #16]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10d      	bne.n	80090fa <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090e6:	f107 0208 	add.w	r2, r7, #8
 80090ea:	4610      	mov	r0, r2
 80090ec:	4798      	blx	r3
 80090ee:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	3301      	adds	r3, #1
 80090f4:	2207      	movs	r2, #7
 80090f6:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80090f8:	e00f      	b.n	800911a <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80090fa:	6839      	ldr	r1, [r7, #0]
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 f9ef 	bl	80094e0 <USBD_CtlError>
      err++;
 8009102:	7afb      	ldrb	r3, [r7, #11]
 8009104:	3301      	adds	r3, #1
 8009106:	72fb      	strb	r3, [r7, #11]
    break;
 8009108:	e007      	b.n	800911a <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800910a:	6839      	ldr	r1, [r7, #0]
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f000 f9e7 	bl	80094e0 <USBD_CtlError>
    err++;
 8009112:	7afb      	ldrb	r3, [r7, #11]
 8009114:	3301      	adds	r3, #1
 8009116:	72fb      	strb	r3, [r7, #11]
    break;
 8009118:	bf00      	nop
  }

  if (err != 0U)
 800911a:	7afb      	ldrb	r3, [r7, #11]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d11e      	bne.n	800915e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	88db      	ldrh	r3, [r3, #6]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d016      	beq.n	8009156 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8009128:	893b      	ldrh	r3, [r7, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d00e      	beq.n	800914c <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800912e:	683b      	ldr	r3, [r7, #0]
 8009130:	88da      	ldrh	r2, [r3, #6]
 8009132:	893b      	ldrh	r3, [r7, #8]
 8009134:	4293      	cmp	r3, r2
 8009136:	bf28      	it	cs
 8009138:	4613      	movcs	r3, r2
 800913a:	b29b      	uxth	r3, r3
 800913c:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800913e:	893b      	ldrh	r3, [r7, #8]
 8009140:	461a      	mov	r2, r3
 8009142:	68f9      	ldr	r1, [r7, #12]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa3c 	bl	80095c2 <USBD_CtlSendData>
 800914a:	e009      	b.n	8009160 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 f9c6 	bl	80094e0 <USBD_CtlError>
 8009154:	e004      	b.n	8009160 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8009156:	6878      	ldr	r0, [r7, #4]
 8009158:	f000 fa8d 	bl	8009676 <USBD_CtlSendStatus>
 800915c:	e000      	b.n	8009160 <USBD_GetDescriptor+0x2cc>
    return;
 800915e:	bf00      	nop
    }
  }
}
 8009160:	3710      	adds	r7, #16
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop

08009168 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b084      	sub	sp, #16
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	889b      	ldrh	r3, [r3, #4]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d130      	bne.n	80091dc <USBD_SetAddress+0x74>
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	88db      	ldrh	r3, [r3, #6]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d12c      	bne.n	80091dc <USBD_SetAddress+0x74>
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	885b      	ldrh	r3, [r3, #2]
 8009186:	2b7f      	cmp	r3, #127	; 0x7f
 8009188:	d828      	bhi.n	80091dc <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	885b      	ldrh	r3, [r3, #2]
 800918e:	b2db      	uxtb	r3, r3
 8009190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009194:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800919c:	2b03      	cmp	r3, #3
 800919e:	d104      	bne.n	80091aa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80091a0:	6839      	ldr	r1, [r7, #0]
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f000 f99c 	bl	80094e0 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091a8:	e01c      	b.n	80091e4 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	7bfa      	ldrb	r2, [r7, #15]
 80091ae:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80091b2:	7bfb      	ldrb	r3, [r7, #15]
 80091b4:	4619      	mov	r1, r3
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 febe 	bl	8009f38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 fa5a 	bl	8009676 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80091c2:	7bfb      	ldrb	r3, [r7, #15]
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d004      	beq.n	80091d2 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2202      	movs	r2, #2
 80091cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091d0:	e008      	b.n	80091e4 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2201      	movs	r2, #1
 80091d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80091da:	e003      	b.n	80091e4 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80091dc:	6839      	ldr	r1, [r7, #0]
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f97e 	bl	80094e0 <USBD_CtlError>
  }
}
 80091e4:	bf00      	nop
 80091e6:	3710      	adds	r7, #16
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
 80091f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091f6:	2300      	movs	r3, #0
 80091f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	885b      	ldrh	r3, [r3, #2]
 80091fe:	b2da      	uxtb	r2, r3
 8009200:	4b4b      	ldr	r3, [pc, #300]	; (8009330 <USBD_SetConfig+0x144>)
 8009202:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009204:	4b4a      	ldr	r3, [pc, #296]	; (8009330 <USBD_SetConfig+0x144>)
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d905      	bls.n	8009218 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800920c:	6839      	ldr	r1, [r7, #0]
 800920e:	6878      	ldr	r0, [r7, #4]
 8009210:	f000 f966 	bl	80094e0 <USBD_CtlError>
    return USBD_FAIL;
 8009214:	2303      	movs	r3, #3
 8009216:	e087      	b.n	8009328 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800921e:	2b02      	cmp	r3, #2
 8009220:	d002      	beq.n	8009228 <USBD_SetConfig+0x3c>
 8009222:	2b03      	cmp	r3, #3
 8009224:	d025      	beq.n	8009272 <USBD_SetConfig+0x86>
 8009226:	e071      	b.n	800930c <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8009228:	4b41      	ldr	r3, [pc, #260]	; (8009330 <USBD_SetConfig+0x144>)
 800922a:	781b      	ldrb	r3, [r3, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d01c      	beq.n	800926a <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8009230:	4b3f      	ldr	r3, [pc, #252]	; (8009330 <USBD_SetConfig+0x144>)
 8009232:	781b      	ldrb	r3, [r3, #0]
 8009234:	461a      	mov	r2, r3
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800923a:	4b3d      	ldr	r3, [pc, #244]	; (8009330 <USBD_SetConfig+0x144>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f7ff f9a7 	bl	8008594 <USBD_SetClassConfig>
 8009246:	4603      	mov	r3, r0
 8009248:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800924a:	7bfb      	ldrb	r3, [r7, #15]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d004      	beq.n	800925a <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f944 	bl	80094e0 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8009258:	e065      	b.n	8009326 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fa0b 	bl	8009676 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2203      	movs	r2, #3
 8009264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8009268:	e05d      	b.n	8009326 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 fa03 	bl	8009676 <USBD_CtlSendStatus>
    break;
 8009270:	e059      	b.n	8009326 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8009272:	4b2f      	ldr	r3, [pc, #188]	; (8009330 <USBD_SetConfig+0x144>)
 8009274:	781b      	ldrb	r3, [r3, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d112      	bne.n	80092a0 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2202      	movs	r2, #2
 800927e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8009282:	4b2b      	ldr	r3, [pc, #172]	; (8009330 <USBD_SetConfig+0x144>)
 8009284:	781b      	ldrb	r3, [r3, #0]
 8009286:	461a      	mov	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800928c:	4b28      	ldr	r3, [pc, #160]	; (8009330 <USBD_SetConfig+0x144>)
 800928e:	781b      	ldrb	r3, [r3, #0]
 8009290:	4619      	mov	r1, r3
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7ff f99a 	bl	80085cc <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 f9ec 	bl	8009676 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800929e:	e042      	b.n	8009326 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80092a0:	4b23      	ldr	r3, [pc, #140]	; (8009330 <USBD_SetConfig+0x144>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	461a      	mov	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	685b      	ldr	r3, [r3, #4]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d02a      	beq.n	8009304 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	b2db      	uxtb	r3, r3
 80092b4:	4619      	mov	r1, r3
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f7ff f988 	bl	80085cc <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80092bc:	4b1c      	ldr	r3, [pc, #112]	; (8009330 <USBD_SetConfig+0x144>)
 80092be:	781b      	ldrb	r3, [r3, #0]
 80092c0:	461a      	mov	r2, r3
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80092c6:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <USBD_SetConfig+0x144>)
 80092c8:	781b      	ldrb	r3, [r3, #0]
 80092ca:	4619      	mov	r1, r3
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7ff f961 	bl	8008594 <USBD_SetClassConfig>
 80092d2:	4603      	mov	r3, r0
 80092d4:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80092d6:	7bfb      	ldrb	r3, [r7, #15]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d00f      	beq.n	80092fc <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80092dc:	6839      	ldr	r1, [r7, #0]
 80092de:	6878      	ldr	r0, [r7, #4]
 80092e0:	f000 f8fe 	bl	80094e0 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	b2db      	uxtb	r3, r3
 80092ea:	4619      	mov	r1, r3
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff f96d 	bl	80085cc <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2202      	movs	r2, #2
 80092f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80092fa:	e014      	b.n	8009326 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f000 f9ba 	bl	8009676 <USBD_CtlSendStatus>
    break;
 8009302:	e010      	b.n	8009326 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 f9b6 	bl	8009676 <USBD_CtlSendStatus>
    break;
 800930a:	e00c      	b.n	8009326 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800930c:	6839      	ldr	r1, [r7, #0]
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f000 f8e6 	bl	80094e0 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009314:	4b06      	ldr	r3, [pc, #24]	; (8009330 <USBD_SetConfig+0x144>)
 8009316:	781b      	ldrb	r3, [r3, #0]
 8009318:	4619      	mov	r1, r3
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff f956 	bl	80085cc <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8009320:	2303      	movs	r3, #3
 8009322:	73fb      	strb	r3, [r7, #15]
    break;
 8009324:	bf00      	nop
  }

  return ret;
 8009326:	7bfb      	ldrb	r3, [r7, #15]
}
 8009328:	4618      	mov	r0, r3
 800932a:	3710      	adds	r7, #16
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}
 8009330:	20000228 	.word	0x20000228

08009334 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	88db      	ldrh	r3, [r3, #6]
 8009342:	2b01      	cmp	r3, #1
 8009344:	d004      	beq.n	8009350 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009346:	6839      	ldr	r1, [r7, #0]
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f000 f8c9 	bl	80094e0 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800934e:	e021      	b.n	8009394 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009356:	2b01      	cmp	r3, #1
 8009358:	db17      	blt.n	800938a <USBD_GetConfig+0x56>
 800935a:	2b02      	cmp	r3, #2
 800935c:	dd02      	ble.n	8009364 <USBD_GetConfig+0x30>
 800935e:	2b03      	cmp	r3, #3
 8009360:	d00b      	beq.n	800937a <USBD_GetConfig+0x46>
 8009362:	e012      	b.n	800938a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	3308      	adds	r3, #8
 800936e:	2201      	movs	r2, #1
 8009370:	4619      	mov	r1, r3
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f925 	bl	80095c2 <USBD_CtlSendData>
      break;
 8009378:	e00c      	b.n	8009394 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3304      	adds	r3, #4
 800937e:	2201      	movs	r2, #1
 8009380:	4619      	mov	r1, r3
 8009382:	6878      	ldr	r0, [r7, #4]
 8009384:	f000 f91d 	bl	80095c2 <USBD_CtlSendData>
      break;
 8009388:	e004      	b.n	8009394 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f000 f8a7 	bl	80094e0 <USBD_CtlError>
      break;
 8009392:	bf00      	nop
}
 8009394:	bf00      	nop
 8009396:	3708      	adds	r7, #8
 8009398:	46bd      	mov	sp, r7
 800939a:	bd80      	pop	{r7, pc}

0800939c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800939c:	b580      	push	{r7, lr}
 800939e:	b082      	sub	sp, #8
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ac:	3b01      	subs	r3, #1
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d81e      	bhi.n	80093f0 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	88db      	ldrh	r3, [r3, #6]
 80093b6:	2b02      	cmp	r3, #2
 80093b8:	d004      	beq.n	80093c4 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80093ba:	6839      	ldr	r1, [r7, #0]
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f000 f88f 	bl	80094e0 <USBD_CtlError>
      break;
 80093c2:	e01a      	b.n	80093fa <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d005      	beq.n	80093e0 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	f043 0202 	orr.w	r2, r3, #2
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	330c      	adds	r3, #12
 80093e4:	2202      	movs	r2, #2
 80093e6:	4619      	mov	r1, r3
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f000 f8ea 	bl	80095c2 <USBD_CtlSendData>
    break;
 80093ee:	e004      	b.n	80093fa <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80093f0:	6839      	ldr	r1, [r7, #0]
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f000 f874 	bl	80094e0 <USBD_CtlError>
    break;
 80093f8:	bf00      	nop
  }
}
 80093fa:	bf00      	nop
 80093fc:	3708      	adds	r7, #8
 80093fe:	46bd      	mov	sp, r7
 8009400:	bd80      	pop	{r7, pc}

08009402 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009402:	b580      	push	{r7, lr}
 8009404:	b082      	sub	sp, #8
 8009406:	af00      	add	r7, sp, #0
 8009408:	6078      	str	r0, [r7, #4]
 800940a:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	885b      	ldrh	r3, [r3, #2]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d106      	bne.n	8009422 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	2201      	movs	r2, #1
 8009418:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f92a 	bl	8009676 <USBD_CtlSendStatus>
  }
}
 8009422:	bf00      	nop
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800943a:	3b01      	subs	r3, #1
 800943c:	2b02      	cmp	r3, #2
 800943e:	d80b      	bhi.n	8009458 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	885b      	ldrh	r3, [r3, #2]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d10c      	bne.n	8009462 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f000 f910 	bl	8009676 <USBD_CtlSendStatus>
      }
      break;
 8009456:	e004      	b.n	8009462 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8009458:	6839      	ldr	r1, [r7, #0]
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f840 	bl	80094e0 <USBD_CtlError>
      break;
 8009460:	e000      	b.n	8009464 <USBD_ClrFeature+0x3a>
      break;
 8009462:	bf00      	nop
  }
}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800946c:	b580      	push	{r7, lr}
 800946e:	b084      	sub	sp, #16
 8009470:	af00      	add	r7, sp, #0
 8009472:	6078      	str	r0, [r7, #4]
 8009474:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	781a      	ldrb	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	781a      	ldrb	r2, [r3, #0]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009496:	68f8      	ldr	r0, [r7, #12]
 8009498:	f7ff fad3 	bl	8008a42 <SWAPBYTE>
 800949c:	4603      	mov	r3, r0
 800949e:	461a      	mov	r2, r3
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3301      	adds	r3, #1
 80094a8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3301      	adds	r3, #1
 80094ae:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80094b0:	68f8      	ldr	r0, [r7, #12]
 80094b2:	f7ff fac6 	bl	8008a42 <SWAPBYTE>
 80094b6:	4603      	mov	r3, r0
 80094b8:	461a      	mov	r2, r3
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3301      	adds	r3, #1
 80094c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3301      	adds	r3, #1
 80094c8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80094ca:	68f8      	ldr	r0, [r7, #12]
 80094cc:	f7ff fab9 	bl	8008a42 <SWAPBYTE>
 80094d0:	4603      	mov	r3, r0
 80094d2:	461a      	mov	r2, r3
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	80da      	strh	r2, [r3, #6]
}
 80094d8:	bf00      	nop
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b082      	sub	sp, #8
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
 80094e8:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80094ea:	2180      	movs	r1, #128	; 0x80
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fcb9 	bl	8009e64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80094f2:	2100      	movs	r1, #0
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 fcb5 	bl	8009e64 <USBD_LL_StallEP>
}
 80094fa:	bf00      	nop
 80094fc:	3708      	adds	r7, #8
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b086      	sub	sp, #24
 8009506:	af00      	add	r7, sp, #0
 8009508:	60f8      	str	r0, [r7, #12]
 800950a:	60b9      	str	r1, [r7, #8]
 800950c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800950e:	2300      	movs	r3, #0
 8009510:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d036      	beq.n	8009586 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800951c:	6938      	ldr	r0, [r7, #16]
 800951e:	f000 f836 	bl	800958e <USBD_GetLen>
 8009522:	4603      	mov	r3, r0
 8009524:	3301      	adds	r3, #1
 8009526:	b29b      	uxth	r3, r3
 8009528:	005b      	lsls	r3, r3, #1
 800952a:	b29a      	uxth	r2, r3
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009530:	7dfb      	ldrb	r3, [r7, #23]
 8009532:	68ba      	ldr	r2, [r7, #8]
 8009534:	4413      	add	r3, r2
 8009536:	687a      	ldr	r2, [r7, #4]
 8009538:	7812      	ldrb	r2, [r2, #0]
 800953a:	701a      	strb	r2, [r3, #0]
  idx++;
 800953c:	7dfb      	ldrb	r3, [r7, #23]
 800953e:	3301      	adds	r3, #1
 8009540:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009542:	7dfb      	ldrb	r3, [r7, #23]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	4413      	add	r3, r2
 8009548:	2203      	movs	r2, #3
 800954a:	701a      	strb	r2, [r3, #0]
  idx++;
 800954c:	7dfb      	ldrb	r3, [r7, #23]
 800954e:	3301      	adds	r3, #1
 8009550:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009552:	e013      	b.n	800957c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009554:	7dfb      	ldrb	r3, [r7, #23]
 8009556:	68ba      	ldr	r2, [r7, #8]
 8009558:	4413      	add	r3, r2
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	7812      	ldrb	r2, [r2, #0]
 800955e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	3301      	adds	r3, #1
 8009564:	613b      	str	r3, [r7, #16]
    idx++;
 8009566:	7dfb      	ldrb	r3, [r7, #23]
 8009568:	3301      	adds	r3, #1
 800956a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800956c:	7dfb      	ldrb	r3, [r7, #23]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	4413      	add	r3, r2
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]
    idx++;
 8009576:	7dfb      	ldrb	r3, [r7, #23]
 8009578:	3301      	adds	r3, #1
 800957a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	781b      	ldrb	r3, [r3, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e7      	bne.n	8009554 <USBD_GetString+0x52>
 8009584:	e000      	b.n	8009588 <USBD_GetString+0x86>
    return;
 8009586:	bf00      	nop
  }
}
 8009588:	3718      	adds	r7, #24
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}

0800958e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800958e:	b480      	push	{r7}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009596:	2300      	movs	r3, #0
 8009598:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800959e:	e005      	b.n	80095ac <USBD_GetLen+0x1e>
  {
    len++;
 80095a0:	7bfb      	ldrb	r3, [r7, #15]
 80095a2:	3301      	adds	r3, #1
 80095a4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	3301      	adds	r3, #1
 80095aa:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80095ac:	68bb      	ldr	r3, [r7, #8]
 80095ae:	781b      	ldrb	r3, [r3, #0]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d1f5      	bne.n	80095a0 <USBD_GetLen+0x12>
  }

  return len;
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3714      	adds	r7, #20
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr

080095c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80095c2:	b580      	push	{r7, lr}
 80095c4:	b084      	sub	sp, #16
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	60f8      	str	r0, [r7, #12]
 80095ca:	60b9      	str	r1, [r7, #8]
 80095cc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2202      	movs	r2, #2
 80095d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	687a      	ldr	r2, [r7, #4]
 80095da:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	68ba      	ldr	r2, [r7, #8]
 80095e6:	2100      	movs	r1, #0
 80095e8:	68f8      	ldr	r0, [r7, #12]
 80095ea:	f000 fcc4 	bl	8009f76 <USBD_LL_Transmit>

  return USBD_OK;
 80095ee:	2300      	movs	r3, #0
}
 80095f0:	4618      	mov	r0, r3
 80095f2:	3710      	adds	r7, #16
 80095f4:	46bd      	mov	sp, r7
 80095f6:	bd80      	pop	{r7, pc}

080095f8 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b084      	sub	sp, #16
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	60f8      	str	r0, [r7, #12]
 8009600:	60b9      	str	r1, [r7, #8]
 8009602:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68ba      	ldr	r2, [r7, #8]
 8009608:	2100      	movs	r1, #0
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 fcb3 	bl	8009f76 <USBD_LL_Transmit>

  return USBD_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3710      	adds	r7, #16
 8009616:	46bd      	mov	sp, r7
 8009618:	bd80      	pop	{r7, pc}

0800961a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800961a:	b580      	push	{r7, lr}
 800961c:	b084      	sub	sp, #16
 800961e:	af00      	add	r7, sp, #0
 8009620:	60f8      	str	r0, [r7, #12]
 8009622:	60b9      	str	r1, [r7, #8]
 8009624:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2203      	movs	r2, #3
 800962a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	687a      	ldr	r2, [r7, #4]
 800963a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	68ba      	ldr	r2, [r7, #8]
 8009642:	2100      	movs	r1, #0
 8009644:	68f8      	ldr	r0, [r7, #12]
 8009646:	f000 fcb7 	bl	8009fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	60f8      	str	r0, [r7, #12]
 800965c:	60b9      	str	r1, [r7, #8]
 800965e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	2100      	movs	r1, #0
 8009666:	68f8      	ldr	r0, [r7, #12]
 8009668:	f000 fca6 	bl	8009fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800966c:	2300      	movs	r3, #0
}
 800966e:	4618      	mov	r0, r3
 8009670:	3710      	adds	r7, #16
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b082      	sub	sp, #8
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2204      	movs	r2, #4
 8009682:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009686:	2300      	movs	r3, #0
 8009688:	2200      	movs	r2, #0
 800968a:	2100      	movs	r1, #0
 800968c:	6878      	ldr	r0, [r7, #4]
 800968e:	f000 fc72 	bl	8009f76 <USBD_LL_Transmit>

  return USBD_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b082      	sub	sp, #8
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2205      	movs	r2, #5
 80096a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80096ac:	2300      	movs	r3, #0
 80096ae:	2200      	movs	r2, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fc80 	bl	8009fb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80096b8:	2300      	movs	r3, #0
}
 80096ba:	4618      	mov	r0, r3
 80096bc:	3708      	adds	r7, #8
 80096be:	46bd      	mov	sp, r7
 80096c0:	bd80      	pop	{r7, pc}
	...

080096c4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80096c8:	2200      	movs	r2, #0
 80096ca:	4912      	ldr	r1, [pc, #72]	; (8009714 <MX_USB_DEVICE_Init+0x50>)
 80096cc:	4812      	ldr	r0, [pc, #72]	; (8009718 <MX_USB_DEVICE_Init+0x54>)
 80096ce:	f7fe fef3 	bl	80084b8 <USBD_Init>
 80096d2:	4603      	mov	r3, r0
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d001      	beq.n	80096dc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80096d8:	f7f8 f894 	bl	8001804 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80096dc:	490f      	ldr	r1, [pc, #60]	; (800971c <MX_USB_DEVICE_Init+0x58>)
 80096de:	480e      	ldr	r0, [pc, #56]	; (8009718 <MX_USB_DEVICE_Init+0x54>)
 80096e0:	f7fe ff20 	bl	8008524 <USBD_RegisterClass>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d001      	beq.n	80096ee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80096ea:	f7f8 f88b 	bl	8001804 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80096ee:	490c      	ldr	r1, [pc, #48]	; (8009720 <MX_USB_DEVICE_Init+0x5c>)
 80096f0:	4809      	ldr	r0, [pc, #36]	; (8009718 <MX_USB_DEVICE_Init+0x54>)
 80096f2:	f7fe fe75 	bl	80083e0 <USBD_CDC_RegisterInterface>
 80096f6:	4603      	mov	r3, r0
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d001      	beq.n	8009700 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80096fc:	f7f8 f882 	bl	8001804 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009700:	4805      	ldr	r0, [pc, #20]	; (8009718 <MX_USB_DEVICE_Init+0x54>)
 8009702:	f7fe ff30 	bl	8008566 <USBD_Start>
 8009706:	4603      	mov	r3, r0
 8009708:	2b00      	cmp	r3, #0
 800970a:	d001      	beq.n	8009710 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800970c:	f7f8 f87a 	bl	8001804 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009710:	bf00      	nop
 8009712:	bd80      	pop	{r7, pc}
 8009714:	20000154 	.word	0x20000154
 8009718:	200008f8 	.word	0x200008f8
 800971c:	2000003c 	.word	0x2000003c
 8009720:	20000140 	.word	0x20000140

08009724 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009724:	b580      	push	{r7, lr}
 8009726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009728:	2200      	movs	r2, #0
 800972a:	4905      	ldr	r1, [pc, #20]	; (8009740 <CDC_Init_FS+0x1c>)
 800972c:	4805      	ldr	r0, [pc, #20]	; (8009744 <CDC_Init_FS+0x20>)
 800972e:	f7fe fe6c 	bl	800840a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009732:	4905      	ldr	r1, [pc, #20]	; (8009748 <CDC_Init_FS+0x24>)
 8009734:	4803      	ldr	r0, [pc, #12]	; (8009744 <CDC_Init_FS+0x20>)
 8009736:	f7fe fe81 	bl	800843c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800973a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800973c:	4618      	mov	r0, r3
 800973e:	bd80      	pop	{r7, pc}
 8009740:	200013c8 	.word	0x200013c8
 8009744:	200008f8 	.word	0x200008f8
 8009748:	20000bc8 	.word	0x20000bc8

0800974c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800974c:	b480      	push	{r7}
 800974e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009750:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009752:	4618      	mov	r0, r3
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
 8009768:	4613      	mov	r3, r2
 800976a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800976c:	79fb      	ldrb	r3, [r7, #7]
 800976e:	2b23      	cmp	r3, #35	; 0x23
 8009770:	d84a      	bhi.n	8009808 <CDC_Control_FS+0xac>
 8009772:	a201      	add	r2, pc, #4	; (adr r2, 8009778 <CDC_Control_FS+0x1c>)
 8009774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009778:	08009809 	.word	0x08009809
 800977c:	08009809 	.word	0x08009809
 8009780:	08009809 	.word	0x08009809
 8009784:	08009809 	.word	0x08009809
 8009788:	08009809 	.word	0x08009809
 800978c:	08009809 	.word	0x08009809
 8009790:	08009809 	.word	0x08009809
 8009794:	08009809 	.word	0x08009809
 8009798:	08009809 	.word	0x08009809
 800979c:	08009809 	.word	0x08009809
 80097a0:	08009809 	.word	0x08009809
 80097a4:	08009809 	.word	0x08009809
 80097a8:	08009809 	.word	0x08009809
 80097ac:	08009809 	.word	0x08009809
 80097b0:	08009809 	.word	0x08009809
 80097b4:	08009809 	.word	0x08009809
 80097b8:	08009809 	.word	0x08009809
 80097bc:	08009809 	.word	0x08009809
 80097c0:	08009809 	.word	0x08009809
 80097c4:	08009809 	.word	0x08009809
 80097c8:	08009809 	.word	0x08009809
 80097cc:	08009809 	.word	0x08009809
 80097d0:	08009809 	.word	0x08009809
 80097d4:	08009809 	.word	0x08009809
 80097d8:	08009809 	.word	0x08009809
 80097dc:	08009809 	.word	0x08009809
 80097e0:	08009809 	.word	0x08009809
 80097e4:	08009809 	.word	0x08009809
 80097e8:	08009809 	.word	0x08009809
 80097ec:	08009809 	.word	0x08009809
 80097f0:	08009809 	.word	0x08009809
 80097f4:	08009809 	.word	0x08009809
 80097f8:	08009809 	.word	0x08009809
 80097fc:	08009809 	.word	0x08009809
 8009800:	08009809 	.word	0x08009809
 8009804:	08009809 	.word	0x08009809
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009808:	bf00      	nop
  }

  return (USBD_OK);
 800980a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800980c:	4618      	mov	r0, r3
 800980e:	370c      	adds	r7, #12
 8009810:	46bd      	mov	sp, r7
 8009812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009816:	4770      	bx	lr

08009818 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b082      	sub	sp, #8
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
 8009820:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009822:	6879      	ldr	r1, [r7, #4]
 8009824:	4805      	ldr	r0, [pc, #20]	; (800983c <CDC_Receive_FS+0x24>)
 8009826:	f7fe fe09 	bl	800843c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800982a:	4804      	ldr	r0, [pc, #16]	; (800983c <CDC_Receive_FS+0x24>)
 800982c:	f7fe fe1a 	bl	8008464 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009830:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009832:	4618      	mov	r0, r3
 8009834:	3708      	adds	r7, #8
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
 800983a:	bf00      	nop
 800983c:	200008f8 	.word	0x200008f8

08009840 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009840:	b480      	push	{r7}
 8009842:	b087      	sub	sp, #28
 8009844:	af00      	add	r7, sp, #0
 8009846:	60f8      	str	r0, [r7, #12]
 8009848:	60b9      	str	r1, [r7, #8]
 800984a:	4613      	mov	r3, r2
 800984c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800984e:	2300      	movs	r3, #0
 8009850:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009852:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009856:	4618      	mov	r0, r3
 8009858:	371c      	adds	r7, #28
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
	...

08009864 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	6039      	str	r1, [r7, #0]
 800986e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	2212      	movs	r2, #18
 8009874:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009876:	4b03      	ldr	r3, [pc, #12]	; (8009884 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009878:	4618      	mov	r0, r3
 800987a:	370c      	adds	r7, #12
 800987c:	46bd      	mov	sp, r7
 800987e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009882:	4770      	bx	lr
 8009884:	20000170 	.word	0x20000170

08009888 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	4603      	mov	r3, r0
 8009890:	6039      	str	r1, [r7, #0]
 8009892:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	2204      	movs	r2, #4
 8009898:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800989a:	4b03      	ldr	r3, [pc, #12]	; (80098a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800989c:	4618      	mov	r0, r3
 800989e:	370c      	adds	r7, #12
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr
 80098a8:	20000184 	.word	0x20000184

080098ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b082      	sub	sp, #8
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	4603      	mov	r3, r0
 80098b4:	6039      	str	r1, [r7, #0]
 80098b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80098b8:	79fb      	ldrb	r3, [r7, #7]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d105      	bne.n	80098ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098be:	683a      	ldr	r2, [r7, #0]
 80098c0:	4907      	ldr	r1, [pc, #28]	; (80098e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098c2:	4808      	ldr	r0, [pc, #32]	; (80098e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098c4:	f7ff fe1d 	bl	8009502 <USBD_GetString>
 80098c8:	e004      	b.n	80098d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80098ca:	683a      	ldr	r2, [r7, #0]
 80098cc:	4904      	ldr	r1, [pc, #16]	; (80098e0 <USBD_FS_ProductStrDescriptor+0x34>)
 80098ce:	4805      	ldr	r0, [pc, #20]	; (80098e4 <USBD_FS_ProductStrDescriptor+0x38>)
 80098d0:	f7ff fe17 	bl	8009502 <USBD_GetString>
  }
  return USBD_StrDesc;
 80098d4:	4b02      	ldr	r3, [pc, #8]	; (80098e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80098d6:	4618      	mov	r0, r3
 80098d8:	3708      	adds	r7, #8
 80098da:	46bd      	mov	sp, r7
 80098dc:	bd80      	pop	{r7, pc}
 80098de:	bf00      	nop
 80098e0:	20001bc8 	.word	0x20001bc8
 80098e4:	0800b2bc 	.word	0x0800b2bc

080098e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b082      	sub	sp, #8
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80098f4:	683a      	ldr	r2, [r7, #0]
 80098f6:	4904      	ldr	r1, [pc, #16]	; (8009908 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80098f8:	4804      	ldr	r0, [pc, #16]	; (800990c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80098fa:	f7ff fe02 	bl	8009502 <USBD_GetString>
  return USBD_StrDesc;
 80098fe:	4b02      	ldr	r3, [pc, #8]	; (8009908 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009900:	4618      	mov	r0, r3
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}
 8009908:	20001bc8 	.word	0x20001bc8
 800990c:	0800b2d4 	.word	0x0800b2d4

08009910 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	4603      	mov	r3, r0
 8009918:	6039      	str	r1, [r7, #0]
 800991a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	221a      	movs	r2, #26
 8009920:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009922:	f000 f843 	bl	80099ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009926:	4b02      	ldr	r3, [pc, #8]	; (8009930 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009928:	4618      	mov	r0, r3
 800992a:	3708      	adds	r7, #8
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}
 8009930:	20000188 	.word	0x20000188

08009934 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b082      	sub	sp, #8
 8009938:	af00      	add	r7, sp, #0
 800993a:	4603      	mov	r3, r0
 800993c:	6039      	str	r1, [r7, #0]
 800993e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009940:	79fb      	ldrb	r3, [r7, #7]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d105      	bne.n	8009952 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009946:	683a      	ldr	r2, [r7, #0]
 8009948:	4907      	ldr	r1, [pc, #28]	; (8009968 <USBD_FS_ConfigStrDescriptor+0x34>)
 800994a:	4808      	ldr	r0, [pc, #32]	; (800996c <USBD_FS_ConfigStrDescriptor+0x38>)
 800994c:	f7ff fdd9 	bl	8009502 <USBD_GetString>
 8009950:	e004      	b.n	800995c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009952:	683a      	ldr	r2, [r7, #0]
 8009954:	4904      	ldr	r1, [pc, #16]	; (8009968 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009956:	4805      	ldr	r0, [pc, #20]	; (800996c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009958:	f7ff fdd3 	bl	8009502 <USBD_GetString>
  }
  return USBD_StrDesc;
 800995c:	4b02      	ldr	r3, [pc, #8]	; (8009968 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800995e:	4618      	mov	r0, r3
 8009960:	3708      	adds	r7, #8
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20001bc8 	.word	0x20001bc8
 800996c:	0800b2e8 	.word	0x0800b2e8

08009970 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009970:	b580      	push	{r7, lr}
 8009972:	b082      	sub	sp, #8
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	6039      	str	r1, [r7, #0]
 800997a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800997c:	79fb      	ldrb	r3, [r7, #7]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d105      	bne.n	800998e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009982:	683a      	ldr	r2, [r7, #0]
 8009984:	4907      	ldr	r1, [pc, #28]	; (80099a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009986:	4808      	ldr	r0, [pc, #32]	; (80099a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009988:	f7ff fdbb 	bl	8009502 <USBD_GetString>
 800998c:	e004      	b.n	8009998 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800998e:	683a      	ldr	r2, [r7, #0]
 8009990:	4904      	ldr	r1, [pc, #16]	; (80099a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009992:	4805      	ldr	r0, [pc, #20]	; (80099a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009994:	f7ff fdb5 	bl	8009502 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009998:	4b02      	ldr	r3, [pc, #8]	; (80099a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800999a:	4618      	mov	r0, r3
 800999c:	3708      	adds	r7, #8
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	20001bc8 	.word	0x20001bc8
 80099a8:	0800b2f4 	.word	0x0800b2f4

080099ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b084      	sub	sp, #16
 80099b0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80099b2:	4b0f      	ldr	r3, [pc, #60]	; (80099f0 <Get_SerialNum+0x44>)
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80099b8:	4b0e      	ldr	r3, [pc, #56]	; (80099f4 <Get_SerialNum+0x48>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80099be:	4b0e      	ldr	r3, [pc, #56]	; (80099f8 <Get_SerialNum+0x4c>)
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80099c4:	68fa      	ldr	r2, [r7, #12]
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	4413      	add	r3, r2
 80099ca:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d009      	beq.n	80099e6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80099d2:	2208      	movs	r2, #8
 80099d4:	4909      	ldr	r1, [pc, #36]	; (80099fc <Get_SerialNum+0x50>)
 80099d6:	68f8      	ldr	r0, [r7, #12]
 80099d8:	f000 f814 	bl	8009a04 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80099dc:	2204      	movs	r2, #4
 80099de:	4908      	ldr	r1, [pc, #32]	; (8009a00 <Get_SerialNum+0x54>)
 80099e0:	68b8      	ldr	r0, [r7, #8]
 80099e2:	f000 f80f 	bl	8009a04 <IntToUnicode>
  }
}
 80099e6:	bf00      	nop
 80099e8:	3710      	adds	r7, #16
 80099ea:	46bd      	mov	sp, r7
 80099ec:	bd80      	pop	{r7, pc}
 80099ee:	bf00      	nop
 80099f0:	1fff7a10 	.word	0x1fff7a10
 80099f4:	1fff7a14 	.word	0x1fff7a14
 80099f8:	1fff7a18 	.word	0x1fff7a18
 80099fc:	2000018a 	.word	0x2000018a
 8009a00:	2000019a 	.word	0x2000019a

08009a04 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009a04:	b480      	push	{r7}
 8009a06:	b087      	sub	sp, #28
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	60f8      	str	r0, [r7, #12]
 8009a0c:	60b9      	str	r1, [r7, #8]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009a12:	2300      	movs	r3, #0
 8009a14:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009a16:	2300      	movs	r3, #0
 8009a18:	75fb      	strb	r3, [r7, #23]
 8009a1a:	e027      	b.n	8009a6c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	0f1b      	lsrs	r3, r3, #28
 8009a20:	2b09      	cmp	r3, #9
 8009a22:	d80b      	bhi.n	8009a3c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	0f1b      	lsrs	r3, r3, #28
 8009a28:	b2da      	uxtb	r2, r3
 8009a2a:	7dfb      	ldrb	r3, [r7, #23]
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	4619      	mov	r1, r3
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	440b      	add	r3, r1
 8009a34:	3230      	adds	r2, #48	; 0x30
 8009a36:	b2d2      	uxtb	r2, r2
 8009a38:	701a      	strb	r2, [r3, #0]
 8009a3a:	e00a      	b.n	8009a52 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	0f1b      	lsrs	r3, r3, #28
 8009a40:	b2da      	uxtb	r2, r3
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	005b      	lsls	r3, r3, #1
 8009a46:	4619      	mov	r1, r3
 8009a48:	68bb      	ldr	r3, [r7, #8]
 8009a4a:	440b      	add	r3, r1
 8009a4c:	3237      	adds	r2, #55	; 0x37
 8009a4e:	b2d2      	uxtb	r2, r2
 8009a50:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	011b      	lsls	r3, r3, #4
 8009a56:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009a58:	7dfb      	ldrb	r3, [r7, #23]
 8009a5a:	005b      	lsls	r3, r3, #1
 8009a5c:	3301      	adds	r3, #1
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	4413      	add	r3, r2
 8009a62:	2200      	movs	r2, #0
 8009a64:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009a66:	7dfb      	ldrb	r3, [r7, #23]
 8009a68:	3301      	adds	r3, #1
 8009a6a:	75fb      	strb	r3, [r7, #23]
 8009a6c:	7dfa      	ldrb	r2, [r7, #23]
 8009a6e:	79fb      	ldrb	r3, [r7, #7]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d3d3      	bcc.n	8009a1c <IntToUnicode+0x18>
  }
}
 8009a74:	bf00      	nop
 8009a76:	371c      	adds	r7, #28
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b08a      	sub	sp, #40	; 0x28
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a88:	f107 0314 	add.w	r3, r7, #20
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	601a      	str	r2, [r3, #0]
 8009a90:	605a      	str	r2, [r3, #4]
 8009a92:	609a      	str	r2, [r3, #8]
 8009a94:	60da      	str	r2, [r3, #12]
 8009a96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009aa0:	d13a      	bne.n	8009b18 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	613b      	str	r3, [r7, #16]
 8009aa6:	4b1e      	ldr	r3, [pc, #120]	; (8009b20 <HAL_PCD_MspInit+0xa0>)
 8009aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aaa:	4a1d      	ldr	r2, [pc, #116]	; (8009b20 <HAL_PCD_MspInit+0xa0>)
 8009aac:	f043 0301 	orr.w	r3, r3, #1
 8009ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8009ab2:	4b1b      	ldr	r3, [pc, #108]	; (8009b20 <HAL_PCD_MspInit+0xa0>)
 8009ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	613b      	str	r3, [r7, #16]
 8009abc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009abe:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009ac2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009acc:	2303      	movs	r3, #3
 8009ace:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009ad0:	230a      	movs	r3, #10
 8009ad2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ad4:	f107 0314 	add.w	r3, r7, #20
 8009ad8:	4619      	mov	r1, r3
 8009ada:	4812      	ldr	r0, [pc, #72]	; (8009b24 <HAL_PCD_MspInit+0xa4>)
 8009adc:	f7f9 fb24 	bl	8003128 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009ae0:	4b0f      	ldr	r3, [pc, #60]	; (8009b20 <HAL_PCD_MspInit+0xa0>)
 8009ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ae4:	4a0e      	ldr	r2, [pc, #56]	; (8009b20 <HAL_PCD_MspInit+0xa0>)
 8009ae6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aea:	6353      	str	r3, [r2, #52]	; 0x34
 8009aec:	2300      	movs	r3, #0
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	4b0b      	ldr	r3, [pc, #44]	; (8009b20 <HAL_PCD_MspInit+0xa0>)
 8009af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009af4:	4a0a      	ldr	r2, [pc, #40]	; (8009b20 <HAL_PCD_MspInit+0xa0>)
 8009af6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009afa:	6453      	str	r3, [r2, #68]	; 0x44
 8009afc:	4b08      	ldr	r3, [pc, #32]	; (8009b20 <HAL_PCD_MspInit+0xa0>)
 8009afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2100      	movs	r1, #0
 8009b0c:	2043      	movs	r0, #67	; 0x43
 8009b0e:	f7f8 fd7e 	bl	800260e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009b12:	2043      	movs	r0, #67	; 0x43
 8009b14:	f7f8 fd97 	bl	8002646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009b18:	bf00      	nop
 8009b1a:	3728      	adds	r7, #40	; 0x28
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	40023800 	.word	0x40023800
 8009b24:	40020000 	.word	0x40020000

08009b28 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	4610      	mov	r0, r2
 8009b40:	f7fe fd5c 	bl	80085fc <USBD_LL_SetupStage>
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}

08009b4c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
 8009b54:	460b      	mov	r3, r1
 8009b56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b5e:	78fa      	ldrb	r2, [r7, #3]
 8009b60:	6879      	ldr	r1, [r7, #4]
 8009b62:	4613      	mov	r3, r2
 8009b64:	00db      	lsls	r3, r3, #3
 8009b66:	1a9b      	subs	r3, r3, r2
 8009b68:	009b      	lsls	r3, r3, #2
 8009b6a:	440b      	add	r3, r1
 8009b6c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009b70:	681a      	ldr	r2, [r3, #0]
 8009b72:	78fb      	ldrb	r3, [r7, #3]
 8009b74:	4619      	mov	r1, r3
 8009b76:	f7fe fd94 	bl	80086a2 <USBD_LL_DataOutStage>
}
 8009b7a:	bf00      	nop
 8009b7c:	3708      	adds	r7, #8
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}

08009b82 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b82:	b580      	push	{r7, lr}
 8009b84:	b082      	sub	sp, #8
 8009b86:	af00      	add	r7, sp, #0
 8009b88:	6078      	str	r0, [r7, #4]
 8009b8a:	460b      	mov	r3, r1
 8009b8c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009b94:	78fa      	ldrb	r2, [r7, #3]
 8009b96:	6879      	ldr	r1, [r7, #4]
 8009b98:	4613      	mov	r3, r2
 8009b9a:	00db      	lsls	r3, r3, #3
 8009b9c:	1a9b      	subs	r3, r3, r2
 8009b9e:	009b      	lsls	r3, r3, #2
 8009ba0:	440b      	add	r3, r1
 8009ba2:	3348      	adds	r3, #72	; 0x48
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	78fb      	ldrb	r3, [r7, #3]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	f7fe fddd 	bl	8008768 <USBD_LL_DataInStage>
}
 8009bae:	bf00      	nop
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}

08009bb6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bb6:	b580      	push	{r7, lr}
 8009bb8:	b082      	sub	sp, #8
 8009bba:	af00      	add	r7, sp, #0
 8009bbc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	f7fe fee1 	bl	800898c <USBD_LL_SOF>
}
 8009bca:	bf00      	nop
 8009bcc:	3708      	adds	r7, #8
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009bd2:	b580      	push	{r7, lr}
 8009bd4:	b084      	sub	sp, #16
 8009bd6:	af00      	add	r7, sp, #0
 8009bd8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	68db      	ldr	r3, [r3, #12]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d102      	bne.n	8009bec <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009be6:	2300      	movs	r3, #0
 8009be8:	73fb      	strb	r3, [r7, #15]
 8009bea:	e008      	b.n	8009bfe <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	68db      	ldr	r3, [r3, #12]
 8009bf0:	2b02      	cmp	r3, #2
 8009bf2:	d102      	bne.n	8009bfa <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	73fb      	strb	r3, [r7, #15]
 8009bf8:	e001      	b.n	8009bfe <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8009bfa:	f7f7 fe03 	bl	8001804 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c04:	7bfa      	ldrb	r2, [r7, #15]
 8009c06:	4611      	mov	r1, r2
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f7fe fe84 	bl	8008916 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7fe fe3d 	bl	8008894 <USBD_LL_Reset>
}
 8009c1a:	bf00      	nop
 8009c1c:	3710      	adds	r7, #16
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
	...

08009c24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c32:	4618      	mov	r0, r3
 8009c34:	f7fe fe7f 	bl	8008936 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	687a      	ldr	r2, [r7, #4]
 8009c44:	6812      	ldr	r2, [r2, #0]
 8009c46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009c4a:	f043 0301 	orr.w	r3, r3, #1
 8009c4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009c58:	4b04      	ldr	r3, [pc, #16]	; (8009c6c <HAL_PCD_SuspendCallback+0x48>)
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	4a03      	ldr	r2, [pc, #12]	; (8009c6c <HAL_PCD_SuspendCallback+0x48>)
 8009c5e:	f043 0306 	orr.w	r3, r3, #6
 8009c62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009c64:	bf00      	nop
 8009c66:	3708      	adds	r7, #8
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}
 8009c6c:	e000ed00 	.word	0xe000ed00

08009c70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f7fe fe6e 	bl	8008960 <USBD_LL_Resume>
}
 8009c84:	bf00      	nop
 8009c86:	3708      	adds	r7, #8
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd80      	pop	{r7, pc}

08009c8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
 8009c94:	460b      	mov	r3, r1
 8009c96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	4611      	mov	r1, r2
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe fe99 	bl	80089da <USBD_LL_IsoOUTIncomplete>
}
 8009ca8:	bf00      	nop
 8009caa:	3708      	adds	r7, #8
 8009cac:	46bd      	mov	sp, r7
 8009cae:	bd80      	pop	{r7, pc}

08009cb0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b082      	sub	sp, #8
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cc2:	78fa      	ldrb	r2, [r7, #3]
 8009cc4:	4611      	mov	r1, r2
 8009cc6:	4618      	mov	r0, r3
 8009cc8:	f7fe fe7a 	bl	80089c0 <USBD_LL_IsoINIncomplete>
}
 8009ccc:	bf00      	nop
 8009cce:	3708      	adds	r7, #8
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	bd80      	pop	{r7, pc}

08009cd4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cd4:	b580      	push	{r7, lr}
 8009cd6:	b082      	sub	sp, #8
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fe fe86 	bl	80089f4 <USBD_LL_DevConnected>
}
 8009ce8:	bf00      	nop
 8009cea:	3708      	adds	r7, #8
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b082      	sub	sp, #8
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009cfe:	4618      	mov	r0, r3
 8009d00:	f7fe fe83 	bl	8008a0a <USBD_LL_DevDisconnected>
}
 8009d04:	bf00      	nop
 8009d06:	3708      	adds	r7, #8
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d13c      	bne.n	8009d96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009d1c:	4a20      	ldr	r2, [pc, #128]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a1e      	ldr	r2, [pc, #120]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009d2c:	4b1c      	ldr	r3, [pc, #112]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009d32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009d34:	4b1a      	ldr	r3, [pc, #104]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d36:	2204      	movs	r2, #4
 8009d38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009d3a:	4b19      	ldr	r3, [pc, #100]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d3c:	2202      	movs	r2, #2
 8009d3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009d40:	4b17      	ldr	r3, [pc, #92]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d42:	2200      	movs	r2, #0
 8009d44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009d46:	4b16      	ldr	r3, [pc, #88]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d48:	2202      	movs	r2, #2
 8009d4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009d4c:	4b14      	ldr	r3, [pc, #80]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d4e:	2200      	movs	r2, #0
 8009d50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009d52:	4b13      	ldr	r3, [pc, #76]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d54:	2200      	movs	r2, #0
 8009d56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009d58:	4b11      	ldr	r3, [pc, #68]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009d5e:	4b10      	ldr	r3, [pc, #64]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d60:	2200      	movs	r2, #0
 8009d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009d64:	4b0e      	ldr	r3, [pc, #56]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d66:	2200      	movs	r2, #0
 8009d68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009d6a:	480d      	ldr	r0, [pc, #52]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d6c:	f7f9 fd39 	bl	80037e2 <HAL_PCD_Init>
 8009d70:	4603      	mov	r3, r0
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d001      	beq.n	8009d7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009d76:	f7f7 fd45 	bl	8001804 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009d7a:	2180      	movs	r1, #128	; 0x80
 8009d7c:	4808      	ldr	r0, [pc, #32]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d7e:	f7fa fe96 	bl	8004aae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009d82:	2240      	movs	r2, #64	; 0x40
 8009d84:	2100      	movs	r1, #0
 8009d86:	4806      	ldr	r0, [pc, #24]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d88:	f7fa fe4a 	bl	8004a20 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009d8c:	2280      	movs	r2, #128	; 0x80
 8009d8e:	2101      	movs	r1, #1
 8009d90:	4803      	ldr	r0, [pc, #12]	; (8009da0 <USBD_LL_Init+0x94>)
 8009d92:	f7fa fe45 	bl	8004a20 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3708      	adds	r7, #8
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	bd80      	pop	{r7, pc}
 8009da0:	20001dc8 	.word	0x20001dc8

08009da4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009dba:	4618      	mov	r0, r3
 8009dbc:	f7f9 fe2e 	bl	8003a1c <HAL_PCD_Start>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009dc4:	7bfb      	ldrb	r3, [r7, #15]
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f000 f92a 	bl	800a020 <USBD_Get_USB_Status>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3710      	adds	r7, #16
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b084      	sub	sp, #16
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	4608      	mov	r0, r1
 8009de4:	4611      	mov	r1, r2
 8009de6:	461a      	mov	r2, r3
 8009de8:	4603      	mov	r3, r0
 8009dea:	70fb      	strb	r3, [r7, #3]
 8009dec:	460b      	mov	r3, r1
 8009dee:	70bb      	strb	r3, [r7, #2]
 8009df0:	4613      	mov	r3, r2
 8009df2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009df4:	2300      	movs	r3, #0
 8009df6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009e02:	78bb      	ldrb	r3, [r7, #2]
 8009e04:	883a      	ldrh	r2, [r7, #0]
 8009e06:	78f9      	ldrb	r1, [r7, #3]
 8009e08:	f7fa fa12 	bl	8004230 <HAL_PCD_EP_Open>
 8009e0c:	4603      	mov	r3, r0
 8009e0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e10:	7bfb      	ldrb	r3, [r7, #15]
 8009e12:	4618      	mov	r0, r3
 8009e14:	f000 f904 	bl	800a020 <USBD_Get_USB_Status>
 8009e18:	4603      	mov	r3, r0
 8009e1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	460b      	mov	r3, r1
 8009e30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e32:	2300      	movs	r3, #0
 8009e34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e36:	2300      	movs	r3, #0
 8009e38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e40:	78fa      	ldrb	r2, [r7, #3]
 8009e42:	4611      	mov	r1, r2
 8009e44:	4618      	mov	r0, r3
 8009e46:	f7fa fa5b 	bl	8004300 <HAL_PCD_EP_Close>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f000 f8e5 	bl	800a020 <USBD_Get_USB_Status>
 8009e56:	4603      	mov	r3, r0
 8009e58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b084      	sub	sp, #16
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	460b      	mov	r3, r1
 8009e6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009e74:	2300      	movs	r3, #0
 8009e76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009e7e:	78fa      	ldrb	r2, [r7, #3]
 8009e80:	4611      	mov	r1, r2
 8009e82:	4618      	mov	r0, r3
 8009e84:	f7fa fb33 	bl	80044ee <HAL_PCD_EP_SetStall>
 8009e88:	4603      	mov	r3, r0
 8009e8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009e8c:	7bfb      	ldrb	r3, [r7, #15]
 8009e8e:	4618      	mov	r0, r3
 8009e90:	f000 f8c6 	bl	800a020 <USBD_Get_USB_Status>
 8009e94:	4603      	mov	r3, r0
 8009e96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	3710      	adds	r7, #16
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	bd80      	pop	{r7, pc}

08009ea2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ea2:	b580      	push	{r7, lr}
 8009ea4:	b084      	sub	sp, #16
 8009ea6:	af00      	add	r7, sp, #0
 8009ea8:	6078      	str	r0, [r7, #4]
 8009eaa:	460b      	mov	r3, r1
 8009eac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009eae:	2300      	movs	r3, #0
 8009eb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	4611      	mov	r1, r2
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	f7fa fb78 	bl	80045b6 <HAL_PCD_EP_ClrStall>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009eca:	7bfb      	ldrb	r3, [r7, #15]
 8009ecc:	4618      	mov	r0, r3
 8009ece:	f000 f8a7 	bl	800a020 <USBD_Get_USB_Status>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ed6:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ed8:	4618      	mov	r0, r3
 8009eda:	3710      	adds	r7, #16
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}

08009ee0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	b085      	sub	sp, #20
 8009ee4:	af00      	add	r7, sp, #0
 8009ee6:	6078      	str	r0, [r7, #4]
 8009ee8:	460b      	mov	r3, r1
 8009eea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009ef2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009ef4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	da0b      	bge.n	8009f14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f02:	68f9      	ldr	r1, [r7, #12]
 8009f04:	4613      	mov	r3, r2
 8009f06:	00db      	lsls	r3, r3, #3
 8009f08:	1a9b      	subs	r3, r3, r2
 8009f0a:	009b      	lsls	r3, r3, #2
 8009f0c:	440b      	add	r3, r1
 8009f0e:	333e      	adds	r3, #62	; 0x3e
 8009f10:	781b      	ldrb	r3, [r3, #0]
 8009f12:	e00b      	b.n	8009f2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009f14:	78fb      	ldrb	r3, [r7, #3]
 8009f16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009f1a:	68f9      	ldr	r1, [r7, #12]
 8009f1c:	4613      	mov	r3, r2
 8009f1e:	00db      	lsls	r3, r3, #3
 8009f20:	1a9b      	subs	r3, r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	440b      	add	r3, r1
 8009f26:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009f2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b084      	sub	sp, #16
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	460b      	mov	r3, r1
 8009f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f44:	2300      	movs	r3, #0
 8009f46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f48:	2300      	movs	r3, #0
 8009f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f52:	78fa      	ldrb	r2, [r7, #3]
 8009f54:	4611      	mov	r1, r2
 8009f56:	4618      	mov	r0, r3
 8009f58:	f7fa f945 	bl	80041e6 <HAL_PCD_SetAddress>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 f85c 	bl	800a020 <USBD_Get_USB_Status>
 8009f68:	4603      	mov	r3, r0
 8009f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3710      	adds	r7, #16
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}

08009f76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009f76:	b580      	push	{r7, lr}
 8009f78:	b086      	sub	sp, #24
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	60f8      	str	r0, [r7, #12]
 8009f7e:	607a      	str	r2, [r7, #4]
 8009f80:	603b      	str	r3, [r7, #0]
 8009f82:	460b      	mov	r3, r1
 8009f84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f86:	2300      	movs	r3, #0
 8009f88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f94:	7af9      	ldrb	r1, [r7, #11]
 8009f96:	683b      	ldr	r3, [r7, #0]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	f7fa fa5e 	bl	800445a <HAL_PCD_EP_Transmit>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa2:	7dfb      	ldrb	r3, [r7, #23]
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	f000 f83b 	bl	800a020 <USBD_Get_USB_Status>
 8009faa:	4603      	mov	r3, r0
 8009fac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009fae:	7dbb      	ldrb	r3, [r7, #22]
}
 8009fb0:	4618      	mov	r0, r3
 8009fb2:	3718      	adds	r7, #24
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}

08009fb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009fb8:	b580      	push	{r7, lr}
 8009fba:	b086      	sub	sp, #24
 8009fbc:	af00      	add	r7, sp, #0
 8009fbe:	60f8      	str	r0, [r7, #12]
 8009fc0:	607a      	str	r2, [r7, #4]
 8009fc2:	603b      	str	r3, [r7, #0]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fd6:	7af9      	ldrb	r1, [r7, #11]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	687a      	ldr	r2, [r7, #4]
 8009fdc:	f7fa f9da 	bl	8004394 <HAL_PCD_EP_Receive>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fe4:	7dfb      	ldrb	r3, [r7, #23]
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	f000 f81a 	bl	800a020 <USBD_Get_USB_Status>
 8009fec:	4603      	mov	r3, r0
 8009fee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009ff0:	7dbb      	ldrb	r3, [r7, #22]
}
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	3718      	adds	r7, #24
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
 800a002:	460b      	mov	r3, r1
 800a004:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	4611      	mov	r1, r2
 800a010:	4618      	mov	r0, r3
 800a012:	f7fa fa0a 	bl	800442a <HAL_PCD_EP_GetRxCount>
 800a016:	4603      	mov	r3, r0
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3708      	adds	r7, #8
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a02a:	2300      	movs	r3, #0
 800a02c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a02e:	79fb      	ldrb	r3, [r7, #7]
 800a030:	2b03      	cmp	r3, #3
 800a032:	d817      	bhi.n	800a064 <USBD_Get_USB_Status+0x44>
 800a034:	a201      	add	r2, pc, #4	; (adr r2, 800a03c <USBD_Get_USB_Status+0x1c>)
 800a036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a03a:	bf00      	nop
 800a03c:	0800a04d 	.word	0x0800a04d
 800a040:	0800a053 	.word	0x0800a053
 800a044:	0800a059 	.word	0x0800a059
 800a048:	0800a05f 	.word	0x0800a05f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a04c:	2300      	movs	r3, #0
 800a04e:	73fb      	strb	r3, [r7, #15]
    break;
 800a050:	e00b      	b.n	800a06a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a052:	2303      	movs	r3, #3
 800a054:	73fb      	strb	r3, [r7, #15]
    break;
 800a056:	e008      	b.n	800a06a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a058:	2301      	movs	r3, #1
 800a05a:	73fb      	strb	r3, [r7, #15]
    break;
 800a05c:	e005      	b.n	800a06a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a05e:	2303      	movs	r3, #3
 800a060:	73fb      	strb	r3, [r7, #15]
    break;
 800a062:	e002      	b.n	800a06a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a064:	2303      	movs	r3, #3
 800a066:	73fb      	strb	r3, [r7, #15]
    break;
 800a068:	bf00      	nop
  }
  return usb_status;
 800a06a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <__errno>:
 800a078:	4b01      	ldr	r3, [pc, #4]	; (800a080 <__errno+0x8>)
 800a07a:	6818      	ldr	r0, [r3, #0]
 800a07c:	4770      	bx	lr
 800a07e:	bf00      	nop
 800a080:	200001a4 	.word	0x200001a4

0800a084 <__libc_init_array>:
 800a084:	b570      	push	{r4, r5, r6, lr}
 800a086:	4e0d      	ldr	r6, [pc, #52]	; (800a0bc <__libc_init_array+0x38>)
 800a088:	4c0d      	ldr	r4, [pc, #52]	; (800a0c0 <__libc_init_array+0x3c>)
 800a08a:	1ba4      	subs	r4, r4, r6
 800a08c:	10a4      	asrs	r4, r4, #2
 800a08e:	2500      	movs	r5, #0
 800a090:	42a5      	cmp	r5, r4
 800a092:	d109      	bne.n	800a0a8 <__libc_init_array+0x24>
 800a094:	4e0b      	ldr	r6, [pc, #44]	; (800a0c4 <__libc_init_array+0x40>)
 800a096:	4c0c      	ldr	r4, [pc, #48]	; (800a0c8 <__libc_init_array+0x44>)
 800a098:	f001 f8fc 	bl	800b294 <_init>
 800a09c:	1ba4      	subs	r4, r4, r6
 800a09e:	10a4      	asrs	r4, r4, #2
 800a0a0:	2500      	movs	r5, #0
 800a0a2:	42a5      	cmp	r5, r4
 800a0a4:	d105      	bne.n	800a0b2 <__libc_init_array+0x2e>
 800a0a6:	bd70      	pop	{r4, r5, r6, pc}
 800a0a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0ac:	4798      	blx	r3
 800a0ae:	3501      	adds	r5, #1
 800a0b0:	e7ee      	b.n	800a090 <__libc_init_array+0xc>
 800a0b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a0b6:	4798      	blx	r3
 800a0b8:	3501      	adds	r5, #1
 800a0ba:	e7f2      	b.n	800a0a2 <__libc_init_array+0x1e>
 800a0bc:	0800b508 	.word	0x0800b508
 800a0c0:	0800b508 	.word	0x0800b508
 800a0c4:	0800b508 	.word	0x0800b508
 800a0c8:	0800b50c 	.word	0x0800b50c

0800a0cc <malloc>:
 800a0cc:	4b02      	ldr	r3, [pc, #8]	; (800a0d8 <malloc+0xc>)
 800a0ce:	4601      	mov	r1, r0
 800a0d0:	6818      	ldr	r0, [r3, #0]
 800a0d2:	f000 b861 	b.w	800a198 <_malloc_r>
 800a0d6:	bf00      	nop
 800a0d8:	200001a4 	.word	0x200001a4

0800a0dc <free>:
 800a0dc:	4b02      	ldr	r3, [pc, #8]	; (800a0e8 <free+0xc>)
 800a0de:	4601      	mov	r1, r0
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	f000 b80b 	b.w	800a0fc <_free_r>
 800a0e6:	bf00      	nop
 800a0e8:	200001a4 	.word	0x200001a4

0800a0ec <memset>:
 800a0ec:	4402      	add	r2, r0
 800a0ee:	4603      	mov	r3, r0
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d100      	bne.n	800a0f6 <memset+0xa>
 800a0f4:	4770      	bx	lr
 800a0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a0fa:	e7f9      	b.n	800a0f0 <memset+0x4>

0800a0fc <_free_r>:
 800a0fc:	b538      	push	{r3, r4, r5, lr}
 800a0fe:	4605      	mov	r5, r0
 800a100:	2900      	cmp	r1, #0
 800a102:	d045      	beq.n	800a190 <_free_r+0x94>
 800a104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a108:	1f0c      	subs	r4, r1, #4
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bfb8      	it	lt
 800a10e:	18e4      	addlt	r4, r4, r3
 800a110:	f000 f8ac 	bl	800a26c <__malloc_lock>
 800a114:	4a1f      	ldr	r2, [pc, #124]	; (800a194 <_free_r+0x98>)
 800a116:	6813      	ldr	r3, [r2, #0]
 800a118:	4610      	mov	r0, r2
 800a11a:	b933      	cbnz	r3, 800a12a <_free_r+0x2e>
 800a11c:	6063      	str	r3, [r4, #4]
 800a11e:	6014      	str	r4, [r2, #0]
 800a120:	4628      	mov	r0, r5
 800a122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a126:	f000 b8a2 	b.w	800a26e <__malloc_unlock>
 800a12a:	42a3      	cmp	r3, r4
 800a12c:	d90c      	bls.n	800a148 <_free_r+0x4c>
 800a12e:	6821      	ldr	r1, [r4, #0]
 800a130:	1862      	adds	r2, r4, r1
 800a132:	4293      	cmp	r3, r2
 800a134:	bf04      	itt	eq
 800a136:	681a      	ldreq	r2, [r3, #0]
 800a138:	685b      	ldreq	r3, [r3, #4]
 800a13a:	6063      	str	r3, [r4, #4]
 800a13c:	bf04      	itt	eq
 800a13e:	1852      	addeq	r2, r2, r1
 800a140:	6022      	streq	r2, [r4, #0]
 800a142:	6004      	str	r4, [r0, #0]
 800a144:	e7ec      	b.n	800a120 <_free_r+0x24>
 800a146:	4613      	mov	r3, r2
 800a148:	685a      	ldr	r2, [r3, #4]
 800a14a:	b10a      	cbz	r2, 800a150 <_free_r+0x54>
 800a14c:	42a2      	cmp	r2, r4
 800a14e:	d9fa      	bls.n	800a146 <_free_r+0x4a>
 800a150:	6819      	ldr	r1, [r3, #0]
 800a152:	1858      	adds	r0, r3, r1
 800a154:	42a0      	cmp	r0, r4
 800a156:	d10b      	bne.n	800a170 <_free_r+0x74>
 800a158:	6820      	ldr	r0, [r4, #0]
 800a15a:	4401      	add	r1, r0
 800a15c:	1858      	adds	r0, r3, r1
 800a15e:	4282      	cmp	r2, r0
 800a160:	6019      	str	r1, [r3, #0]
 800a162:	d1dd      	bne.n	800a120 <_free_r+0x24>
 800a164:	6810      	ldr	r0, [r2, #0]
 800a166:	6852      	ldr	r2, [r2, #4]
 800a168:	605a      	str	r2, [r3, #4]
 800a16a:	4401      	add	r1, r0
 800a16c:	6019      	str	r1, [r3, #0]
 800a16e:	e7d7      	b.n	800a120 <_free_r+0x24>
 800a170:	d902      	bls.n	800a178 <_free_r+0x7c>
 800a172:	230c      	movs	r3, #12
 800a174:	602b      	str	r3, [r5, #0]
 800a176:	e7d3      	b.n	800a120 <_free_r+0x24>
 800a178:	6820      	ldr	r0, [r4, #0]
 800a17a:	1821      	adds	r1, r4, r0
 800a17c:	428a      	cmp	r2, r1
 800a17e:	bf04      	itt	eq
 800a180:	6811      	ldreq	r1, [r2, #0]
 800a182:	6852      	ldreq	r2, [r2, #4]
 800a184:	6062      	str	r2, [r4, #4]
 800a186:	bf04      	itt	eq
 800a188:	1809      	addeq	r1, r1, r0
 800a18a:	6021      	streq	r1, [r4, #0]
 800a18c:	605c      	str	r4, [r3, #4]
 800a18e:	e7c7      	b.n	800a120 <_free_r+0x24>
 800a190:	bd38      	pop	{r3, r4, r5, pc}
 800a192:	bf00      	nop
 800a194:	2000022c 	.word	0x2000022c

0800a198 <_malloc_r>:
 800a198:	b570      	push	{r4, r5, r6, lr}
 800a19a:	1ccd      	adds	r5, r1, #3
 800a19c:	f025 0503 	bic.w	r5, r5, #3
 800a1a0:	3508      	adds	r5, #8
 800a1a2:	2d0c      	cmp	r5, #12
 800a1a4:	bf38      	it	cc
 800a1a6:	250c      	movcc	r5, #12
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	4606      	mov	r6, r0
 800a1ac:	db01      	blt.n	800a1b2 <_malloc_r+0x1a>
 800a1ae:	42a9      	cmp	r1, r5
 800a1b0:	d903      	bls.n	800a1ba <_malloc_r+0x22>
 800a1b2:	230c      	movs	r3, #12
 800a1b4:	6033      	str	r3, [r6, #0]
 800a1b6:	2000      	movs	r0, #0
 800a1b8:	bd70      	pop	{r4, r5, r6, pc}
 800a1ba:	f000 f857 	bl	800a26c <__malloc_lock>
 800a1be:	4a21      	ldr	r2, [pc, #132]	; (800a244 <_malloc_r+0xac>)
 800a1c0:	6814      	ldr	r4, [r2, #0]
 800a1c2:	4621      	mov	r1, r4
 800a1c4:	b991      	cbnz	r1, 800a1ec <_malloc_r+0x54>
 800a1c6:	4c20      	ldr	r4, [pc, #128]	; (800a248 <_malloc_r+0xb0>)
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	b91b      	cbnz	r3, 800a1d4 <_malloc_r+0x3c>
 800a1cc:	4630      	mov	r0, r6
 800a1ce:	f000 f83d 	bl	800a24c <_sbrk_r>
 800a1d2:	6020      	str	r0, [r4, #0]
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	f000 f838 	bl	800a24c <_sbrk_r>
 800a1dc:	1c43      	adds	r3, r0, #1
 800a1de:	d124      	bne.n	800a22a <_malloc_r+0x92>
 800a1e0:	230c      	movs	r3, #12
 800a1e2:	6033      	str	r3, [r6, #0]
 800a1e4:	4630      	mov	r0, r6
 800a1e6:	f000 f842 	bl	800a26e <__malloc_unlock>
 800a1ea:	e7e4      	b.n	800a1b6 <_malloc_r+0x1e>
 800a1ec:	680b      	ldr	r3, [r1, #0]
 800a1ee:	1b5b      	subs	r3, r3, r5
 800a1f0:	d418      	bmi.n	800a224 <_malloc_r+0x8c>
 800a1f2:	2b0b      	cmp	r3, #11
 800a1f4:	d90f      	bls.n	800a216 <_malloc_r+0x7e>
 800a1f6:	600b      	str	r3, [r1, #0]
 800a1f8:	50cd      	str	r5, [r1, r3]
 800a1fa:	18cc      	adds	r4, r1, r3
 800a1fc:	4630      	mov	r0, r6
 800a1fe:	f000 f836 	bl	800a26e <__malloc_unlock>
 800a202:	f104 000b 	add.w	r0, r4, #11
 800a206:	1d23      	adds	r3, r4, #4
 800a208:	f020 0007 	bic.w	r0, r0, #7
 800a20c:	1ac3      	subs	r3, r0, r3
 800a20e:	d0d3      	beq.n	800a1b8 <_malloc_r+0x20>
 800a210:	425a      	negs	r2, r3
 800a212:	50e2      	str	r2, [r4, r3]
 800a214:	e7d0      	b.n	800a1b8 <_malloc_r+0x20>
 800a216:	428c      	cmp	r4, r1
 800a218:	684b      	ldr	r3, [r1, #4]
 800a21a:	bf16      	itet	ne
 800a21c:	6063      	strne	r3, [r4, #4]
 800a21e:	6013      	streq	r3, [r2, #0]
 800a220:	460c      	movne	r4, r1
 800a222:	e7eb      	b.n	800a1fc <_malloc_r+0x64>
 800a224:	460c      	mov	r4, r1
 800a226:	6849      	ldr	r1, [r1, #4]
 800a228:	e7cc      	b.n	800a1c4 <_malloc_r+0x2c>
 800a22a:	1cc4      	adds	r4, r0, #3
 800a22c:	f024 0403 	bic.w	r4, r4, #3
 800a230:	42a0      	cmp	r0, r4
 800a232:	d005      	beq.n	800a240 <_malloc_r+0xa8>
 800a234:	1a21      	subs	r1, r4, r0
 800a236:	4630      	mov	r0, r6
 800a238:	f000 f808 	bl	800a24c <_sbrk_r>
 800a23c:	3001      	adds	r0, #1
 800a23e:	d0cf      	beq.n	800a1e0 <_malloc_r+0x48>
 800a240:	6025      	str	r5, [r4, #0]
 800a242:	e7db      	b.n	800a1fc <_malloc_r+0x64>
 800a244:	2000022c 	.word	0x2000022c
 800a248:	20000230 	.word	0x20000230

0800a24c <_sbrk_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	4c06      	ldr	r4, [pc, #24]	; (800a268 <_sbrk_r+0x1c>)
 800a250:	2300      	movs	r3, #0
 800a252:	4605      	mov	r5, r0
 800a254:	4608      	mov	r0, r1
 800a256:	6023      	str	r3, [r4, #0]
 800a258:	f7f7 fb78 	bl	800194c <_sbrk>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_sbrk_r+0x1a>
 800a260:	6823      	ldr	r3, [r4, #0]
 800a262:	b103      	cbz	r3, 800a266 <_sbrk_r+0x1a>
 800a264:	602b      	str	r3, [r5, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	200021d0 	.word	0x200021d0

0800a26c <__malloc_lock>:
 800a26c:	4770      	bx	lr

0800a26e <__malloc_unlock>:
 800a26e:	4770      	bx	lr

0800a270 <sin>:
 800a270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a272:	ec51 0b10 	vmov	r0, r1, d0
 800a276:	4a20      	ldr	r2, [pc, #128]	; (800a2f8 <sin+0x88>)
 800a278:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a27c:	4293      	cmp	r3, r2
 800a27e:	dc07      	bgt.n	800a290 <sin+0x20>
 800a280:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 800a2f0 <sin+0x80>
 800a284:	2000      	movs	r0, #0
 800a286:	f000 fe37 	bl	800aef8 <__kernel_sin>
 800a28a:	ec51 0b10 	vmov	r0, r1, d0
 800a28e:	e007      	b.n	800a2a0 <sin+0x30>
 800a290:	4a1a      	ldr	r2, [pc, #104]	; (800a2fc <sin+0x8c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	dd09      	ble.n	800a2aa <sin+0x3a>
 800a296:	ee10 2a10 	vmov	r2, s0
 800a29a:	460b      	mov	r3, r1
 800a29c:	f7f5 ffac 	bl	80001f8 <__aeabi_dsub>
 800a2a0:	ec41 0b10 	vmov	d0, r0, r1
 800a2a4:	b005      	add	sp, #20
 800a2a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800a2aa:	4668      	mov	r0, sp
 800a2ac:	f000 f828 	bl	800a300 <__ieee754_rem_pio2>
 800a2b0:	f000 0003 	and.w	r0, r0, #3
 800a2b4:	2801      	cmp	r0, #1
 800a2b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a2ba:	ed9d 0b00 	vldr	d0, [sp]
 800a2be:	d004      	beq.n	800a2ca <sin+0x5a>
 800a2c0:	2802      	cmp	r0, #2
 800a2c2:	d005      	beq.n	800a2d0 <sin+0x60>
 800a2c4:	b970      	cbnz	r0, 800a2e4 <sin+0x74>
 800a2c6:	2001      	movs	r0, #1
 800a2c8:	e7dd      	b.n	800a286 <sin+0x16>
 800a2ca:	f000 fa0d 	bl	800a6e8 <__kernel_cos>
 800a2ce:	e7dc      	b.n	800a28a <sin+0x1a>
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	f000 fe11 	bl	800aef8 <__kernel_sin>
 800a2d6:	ec53 2b10 	vmov	r2, r3, d0
 800a2da:	ee10 0a10 	vmov	r0, s0
 800a2de:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a2e2:	e7dd      	b.n	800a2a0 <sin+0x30>
 800a2e4:	f000 fa00 	bl	800a6e8 <__kernel_cos>
 800a2e8:	e7f5      	b.n	800a2d6 <sin+0x66>
 800a2ea:	bf00      	nop
 800a2ec:	f3af 8000 	nop.w
	...
 800a2f8:	3fe921fb 	.word	0x3fe921fb
 800a2fc:	7fefffff 	.word	0x7fefffff

0800a300 <__ieee754_rem_pio2>:
 800a300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a304:	ec57 6b10 	vmov	r6, r7, d0
 800a308:	4bc3      	ldr	r3, [pc, #780]	; (800a618 <__ieee754_rem_pio2+0x318>)
 800a30a:	b08d      	sub	sp, #52	; 0x34
 800a30c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800a310:	4598      	cmp	r8, r3
 800a312:	4604      	mov	r4, r0
 800a314:	9704      	str	r7, [sp, #16]
 800a316:	dc07      	bgt.n	800a328 <__ieee754_rem_pio2+0x28>
 800a318:	2200      	movs	r2, #0
 800a31a:	2300      	movs	r3, #0
 800a31c:	ed84 0b00 	vstr	d0, [r4]
 800a320:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800a324:	2500      	movs	r5, #0
 800a326:	e027      	b.n	800a378 <__ieee754_rem_pio2+0x78>
 800a328:	4bbc      	ldr	r3, [pc, #752]	; (800a61c <__ieee754_rem_pio2+0x31c>)
 800a32a:	4598      	cmp	r8, r3
 800a32c:	dc75      	bgt.n	800a41a <__ieee754_rem_pio2+0x11a>
 800a32e:	9b04      	ldr	r3, [sp, #16]
 800a330:	4dbb      	ldr	r5, [pc, #748]	; (800a620 <__ieee754_rem_pio2+0x320>)
 800a332:	2b00      	cmp	r3, #0
 800a334:	ee10 0a10 	vmov	r0, s0
 800a338:	a3a9      	add	r3, pc, #676	; (adr r3, 800a5e0 <__ieee754_rem_pio2+0x2e0>)
 800a33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a33e:	4639      	mov	r1, r7
 800a340:	dd36      	ble.n	800a3b0 <__ieee754_rem_pio2+0xb0>
 800a342:	f7f5 ff59 	bl	80001f8 <__aeabi_dsub>
 800a346:	45a8      	cmp	r8, r5
 800a348:	4606      	mov	r6, r0
 800a34a:	460f      	mov	r7, r1
 800a34c:	d018      	beq.n	800a380 <__ieee754_rem_pio2+0x80>
 800a34e:	a3a6      	add	r3, pc, #664	; (adr r3, 800a5e8 <__ieee754_rem_pio2+0x2e8>)
 800a350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a354:	f7f5 ff50 	bl	80001f8 <__aeabi_dsub>
 800a358:	4602      	mov	r2, r0
 800a35a:	460b      	mov	r3, r1
 800a35c:	e9c4 2300 	strd	r2, r3, [r4]
 800a360:	4630      	mov	r0, r6
 800a362:	4639      	mov	r1, r7
 800a364:	f7f5 ff48 	bl	80001f8 <__aeabi_dsub>
 800a368:	a39f      	add	r3, pc, #636	; (adr r3, 800a5e8 <__ieee754_rem_pio2+0x2e8>)
 800a36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a36e:	f7f5 ff43 	bl	80001f8 <__aeabi_dsub>
 800a372:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a376:	2501      	movs	r5, #1
 800a378:	4628      	mov	r0, r5
 800a37a:	b00d      	add	sp, #52	; 0x34
 800a37c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a380:	a39b      	add	r3, pc, #620	; (adr r3, 800a5f0 <__ieee754_rem_pio2+0x2f0>)
 800a382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a386:	f7f5 ff37 	bl	80001f8 <__aeabi_dsub>
 800a38a:	a39b      	add	r3, pc, #620	; (adr r3, 800a5f8 <__ieee754_rem_pio2+0x2f8>)
 800a38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a390:	4606      	mov	r6, r0
 800a392:	460f      	mov	r7, r1
 800a394:	f7f5 ff30 	bl	80001f8 <__aeabi_dsub>
 800a398:	4602      	mov	r2, r0
 800a39a:	460b      	mov	r3, r1
 800a39c:	e9c4 2300 	strd	r2, r3, [r4]
 800a3a0:	4630      	mov	r0, r6
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	f7f5 ff28 	bl	80001f8 <__aeabi_dsub>
 800a3a8:	a393      	add	r3, pc, #588	; (adr r3, 800a5f8 <__ieee754_rem_pio2+0x2f8>)
 800a3aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3ae:	e7de      	b.n	800a36e <__ieee754_rem_pio2+0x6e>
 800a3b0:	f7f5 ff24 	bl	80001fc <__adddf3>
 800a3b4:	45a8      	cmp	r8, r5
 800a3b6:	4606      	mov	r6, r0
 800a3b8:	460f      	mov	r7, r1
 800a3ba:	d016      	beq.n	800a3ea <__ieee754_rem_pio2+0xea>
 800a3bc:	a38a      	add	r3, pc, #552	; (adr r3, 800a5e8 <__ieee754_rem_pio2+0x2e8>)
 800a3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c2:	f7f5 ff1b 	bl	80001fc <__adddf3>
 800a3c6:	4602      	mov	r2, r0
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	e9c4 2300 	strd	r2, r3, [r4]
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	4639      	mov	r1, r7
 800a3d2:	f7f5 ff11 	bl	80001f8 <__aeabi_dsub>
 800a3d6:	a384      	add	r3, pc, #528	; (adr r3, 800a5e8 <__ieee754_rem_pio2+0x2e8>)
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	f7f5 ff0e 	bl	80001fc <__adddf3>
 800a3e0:	f04f 35ff 	mov.w	r5, #4294967295
 800a3e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a3e8:	e7c6      	b.n	800a378 <__ieee754_rem_pio2+0x78>
 800a3ea:	a381      	add	r3, pc, #516	; (adr r3, 800a5f0 <__ieee754_rem_pio2+0x2f0>)
 800a3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f0:	f7f5 ff04 	bl	80001fc <__adddf3>
 800a3f4:	a380      	add	r3, pc, #512	; (adr r3, 800a5f8 <__ieee754_rem_pio2+0x2f8>)
 800a3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3fa:	4606      	mov	r6, r0
 800a3fc:	460f      	mov	r7, r1
 800a3fe:	f7f5 fefd 	bl	80001fc <__adddf3>
 800a402:	4602      	mov	r2, r0
 800a404:	460b      	mov	r3, r1
 800a406:	e9c4 2300 	strd	r2, r3, [r4]
 800a40a:	4630      	mov	r0, r6
 800a40c:	4639      	mov	r1, r7
 800a40e:	f7f5 fef3 	bl	80001f8 <__aeabi_dsub>
 800a412:	a379      	add	r3, pc, #484	; (adr r3, 800a5f8 <__ieee754_rem_pio2+0x2f8>)
 800a414:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a418:	e7e0      	b.n	800a3dc <__ieee754_rem_pio2+0xdc>
 800a41a:	4b82      	ldr	r3, [pc, #520]	; (800a624 <__ieee754_rem_pio2+0x324>)
 800a41c:	4598      	cmp	r8, r3
 800a41e:	f300 80d0 	bgt.w	800a5c2 <__ieee754_rem_pio2+0x2c2>
 800a422:	f000 fe23 	bl	800b06c <fabs>
 800a426:	ec57 6b10 	vmov	r6, r7, d0
 800a42a:	ee10 0a10 	vmov	r0, s0
 800a42e:	a374      	add	r3, pc, #464	; (adr r3, 800a600 <__ieee754_rem_pio2+0x300>)
 800a430:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a434:	4639      	mov	r1, r7
 800a436:	f7f6 f897 	bl	8000568 <__aeabi_dmul>
 800a43a:	2200      	movs	r2, #0
 800a43c:	4b7a      	ldr	r3, [pc, #488]	; (800a628 <__ieee754_rem_pio2+0x328>)
 800a43e:	f7f5 fedd 	bl	80001fc <__adddf3>
 800a442:	f7f6 fb2b 	bl	8000a9c <__aeabi_d2iz>
 800a446:	4605      	mov	r5, r0
 800a448:	f7f6 f824 	bl	8000494 <__aeabi_i2d>
 800a44c:	a364      	add	r3, pc, #400	; (adr r3, 800a5e0 <__ieee754_rem_pio2+0x2e0>)
 800a44e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a452:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a456:	f7f6 f887 	bl	8000568 <__aeabi_dmul>
 800a45a:	4602      	mov	r2, r0
 800a45c:	460b      	mov	r3, r1
 800a45e:	4630      	mov	r0, r6
 800a460:	4639      	mov	r1, r7
 800a462:	f7f5 fec9 	bl	80001f8 <__aeabi_dsub>
 800a466:	a360      	add	r3, pc, #384	; (adr r3, 800a5e8 <__ieee754_rem_pio2+0x2e8>)
 800a468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a46c:	4682      	mov	sl, r0
 800a46e:	468b      	mov	fp, r1
 800a470:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a474:	f7f6 f878 	bl	8000568 <__aeabi_dmul>
 800a478:	2d1f      	cmp	r5, #31
 800a47a:	4606      	mov	r6, r0
 800a47c:	460f      	mov	r7, r1
 800a47e:	dc0c      	bgt.n	800a49a <__ieee754_rem_pio2+0x19a>
 800a480:	1e6a      	subs	r2, r5, #1
 800a482:	4b6a      	ldr	r3, [pc, #424]	; (800a62c <__ieee754_rem_pio2+0x32c>)
 800a484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a488:	4543      	cmp	r3, r8
 800a48a:	d006      	beq.n	800a49a <__ieee754_rem_pio2+0x19a>
 800a48c:	4632      	mov	r2, r6
 800a48e:	463b      	mov	r3, r7
 800a490:	4650      	mov	r0, sl
 800a492:	4659      	mov	r1, fp
 800a494:	f7f5 feb0 	bl	80001f8 <__aeabi_dsub>
 800a498:	e00e      	b.n	800a4b8 <__ieee754_rem_pio2+0x1b8>
 800a49a:	4632      	mov	r2, r6
 800a49c:	463b      	mov	r3, r7
 800a49e:	4650      	mov	r0, sl
 800a4a0:	4659      	mov	r1, fp
 800a4a2:	f7f5 fea9 	bl	80001f8 <__aeabi_dsub>
 800a4a6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a4aa:	9305      	str	r3, [sp, #20]
 800a4ac:	9a05      	ldr	r2, [sp, #20]
 800a4ae:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a4b2:	1ad3      	subs	r3, r2, r3
 800a4b4:	2b10      	cmp	r3, #16
 800a4b6:	dc02      	bgt.n	800a4be <__ieee754_rem_pio2+0x1be>
 800a4b8:	e9c4 0100 	strd	r0, r1, [r4]
 800a4bc:	e039      	b.n	800a532 <__ieee754_rem_pio2+0x232>
 800a4be:	a34c      	add	r3, pc, #304	; (adr r3, 800a5f0 <__ieee754_rem_pio2+0x2f0>)
 800a4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a4c8:	f7f6 f84e 	bl	8000568 <__aeabi_dmul>
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	460f      	mov	r7, r1
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	4650      	mov	r0, sl
 800a4d6:	4659      	mov	r1, fp
 800a4d8:	f7f5 fe8e 	bl	80001f8 <__aeabi_dsub>
 800a4dc:	4602      	mov	r2, r0
 800a4de:	460b      	mov	r3, r1
 800a4e0:	4680      	mov	r8, r0
 800a4e2:	4689      	mov	r9, r1
 800a4e4:	4650      	mov	r0, sl
 800a4e6:	4659      	mov	r1, fp
 800a4e8:	f7f5 fe86 	bl	80001f8 <__aeabi_dsub>
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	463b      	mov	r3, r7
 800a4f0:	f7f5 fe82 	bl	80001f8 <__aeabi_dsub>
 800a4f4:	a340      	add	r3, pc, #256	; (adr r3, 800a5f8 <__ieee754_rem_pio2+0x2f8>)
 800a4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4fa:	4606      	mov	r6, r0
 800a4fc:	460f      	mov	r7, r1
 800a4fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a502:	f7f6 f831 	bl	8000568 <__aeabi_dmul>
 800a506:	4632      	mov	r2, r6
 800a508:	463b      	mov	r3, r7
 800a50a:	f7f5 fe75 	bl	80001f8 <__aeabi_dsub>
 800a50e:	4602      	mov	r2, r0
 800a510:	460b      	mov	r3, r1
 800a512:	4606      	mov	r6, r0
 800a514:	460f      	mov	r7, r1
 800a516:	4640      	mov	r0, r8
 800a518:	4649      	mov	r1, r9
 800a51a:	f7f5 fe6d 	bl	80001f8 <__aeabi_dsub>
 800a51e:	9a05      	ldr	r2, [sp, #20]
 800a520:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800a524:	1ad3      	subs	r3, r2, r3
 800a526:	2b31      	cmp	r3, #49	; 0x31
 800a528:	dc20      	bgt.n	800a56c <__ieee754_rem_pio2+0x26c>
 800a52a:	e9c4 0100 	strd	r0, r1, [r4]
 800a52e:	46c2      	mov	sl, r8
 800a530:	46cb      	mov	fp, r9
 800a532:	e9d4 8900 	ldrd	r8, r9, [r4]
 800a536:	4650      	mov	r0, sl
 800a538:	4642      	mov	r2, r8
 800a53a:	464b      	mov	r3, r9
 800a53c:	4659      	mov	r1, fp
 800a53e:	f7f5 fe5b 	bl	80001f8 <__aeabi_dsub>
 800a542:	463b      	mov	r3, r7
 800a544:	4632      	mov	r2, r6
 800a546:	f7f5 fe57 	bl	80001f8 <__aeabi_dsub>
 800a54a:	9b04      	ldr	r3, [sp, #16]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a552:	f6bf af11 	bge.w	800a378 <__ieee754_rem_pio2+0x78>
 800a556:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a55a:	6063      	str	r3, [r4, #4]
 800a55c:	f8c4 8000 	str.w	r8, [r4]
 800a560:	60a0      	str	r0, [r4, #8]
 800a562:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a566:	60e3      	str	r3, [r4, #12]
 800a568:	426d      	negs	r5, r5
 800a56a:	e705      	b.n	800a378 <__ieee754_rem_pio2+0x78>
 800a56c:	a326      	add	r3, pc, #152	; (adr r3, 800a608 <__ieee754_rem_pio2+0x308>)
 800a56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a576:	f7f5 fff7 	bl	8000568 <__aeabi_dmul>
 800a57a:	4606      	mov	r6, r0
 800a57c:	460f      	mov	r7, r1
 800a57e:	4602      	mov	r2, r0
 800a580:	460b      	mov	r3, r1
 800a582:	4640      	mov	r0, r8
 800a584:	4649      	mov	r1, r9
 800a586:	f7f5 fe37 	bl	80001f8 <__aeabi_dsub>
 800a58a:	4602      	mov	r2, r0
 800a58c:	460b      	mov	r3, r1
 800a58e:	4682      	mov	sl, r0
 800a590:	468b      	mov	fp, r1
 800a592:	4640      	mov	r0, r8
 800a594:	4649      	mov	r1, r9
 800a596:	f7f5 fe2f 	bl	80001f8 <__aeabi_dsub>
 800a59a:	4632      	mov	r2, r6
 800a59c:	463b      	mov	r3, r7
 800a59e:	f7f5 fe2b 	bl	80001f8 <__aeabi_dsub>
 800a5a2:	a31b      	add	r3, pc, #108	; (adr r3, 800a610 <__ieee754_rem_pio2+0x310>)
 800a5a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	460f      	mov	r7, r1
 800a5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a5b0:	f7f5 ffda 	bl	8000568 <__aeabi_dmul>
 800a5b4:	4632      	mov	r2, r6
 800a5b6:	463b      	mov	r3, r7
 800a5b8:	f7f5 fe1e 	bl	80001f8 <__aeabi_dsub>
 800a5bc:	4606      	mov	r6, r0
 800a5be:	460f      	mov	r7, r1
 800a5c0:	e764      	b.n	800a48c <__ieee754_rem_pio2+0x18c>
 800a5c2:	4b1b      	ldr	r3, [pc, #108]	; (800a630 <__ieee754_rem_pio2+0x330>)
 800a5c4:	4598      	cmp	r8, r3
 800a5c6:	dd35      	ble.n	800a634 <__ieee754_rem_pio2+0x334>
 800a5c8:	ee10 2a10 	vmov	r2, s0
 800a5cc:	463b      	mov	r3, r7
 800a5ce:	4630      	mov	r0, r6
 800a5d0:	4639      	mov	r1, r7
 800a5d2:	f7f5 fe11 	bl	80001f8 <__aeabi_dsub>
 800a5d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800a5da:	e9c4 0100 	strd	r0, r1, [r4]
 800a5de:	e6a1      	b.n	800a324 <__ieee754_rem_pio2+0x24>
 800a5e0:	54400000 	.word	0x54400000
 800a5e4:	3ff921fb 	.word	0x3ff921fb
 800a5e8:	1a626331 	.word	0x1a626331
 800a5ec:	3dd0b461 	.word	0x3dd0b461
 800a5f0:	1a600000 	.word	0x1a600000
 800a5f4:	3dd0b461 	.word	0x3dd0b461
 800a5f8:	2e037073 	.word	0x2e037073
 800a5fc:	3ba3198a 	.word	0x3ba3198a
 800a600:	6dc9c883 	.word	0x6dc9c883
 800a604:	3fe45f30 	.word	0x3fe45f30
 800a608:	2e000000 	.word	0x2e000000
 800a60c:	3ba3198a 	.word	0x3ba3198a
 800a610:	252049c1 	.word	0x252049c1
 800a614:	397b839a 	.word	0x397b839a
 800a618:	3fe921fb 	.word	0x3fe921fb
 800a61c:	4002d97b 	.word	0x4002d97b
 800a620:	3ff921fb 	.word	0x3ff921fb
 800a624:	413921fb 	.word	0x413921fb
 800a628:	3fe00000 	.word	0x3fe00000
 800a62c:	0800b324 	.word	0x0800b324
 800a630:	7fefffff 	.word	0x7fefffff
 800a634:	ea4f 5528 	mov.w	r5, r8, asr #20
 800a638:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 800a63c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800a640:	4630      	mov	r0, r6
 800a642:	460f      	mov	r7, r1
 800a644:	f7f6 fa2a 	bl	8000a9c <__aeabi_d2iz>
 800a648:	f7f5 ff24 	bl	8000494 <__aeabi_i2d>
 800a64c:	4602      	mov	r2, r0
 800a64e:	460b      	mov	r3, r1
 800a650:	4630      	mov	r0, r6
 800a652:	4639      	mov	r1, r7
 800a654:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800a658:	f7f5 fdce 	bl	80001f8 <__aeabi_dsub>
 800a65c:	2200      	movs	r2, #0
 800a65e:	4b1f      	ldr	r3, [pc, #124]	; (800a6dc <__ieee754_rem_pio2+0x3dc>)
 800a660:	f7f5 ff82 	bl	8000568 <__aeabi_dmul>
 800a664:	460f      	mov	r7, r1
 800a666:	4606      	mov	r6, r0
 800a668:	f7f6 fa18 	bl	8000a9c <__aeabi_d2iz>
 800a66c:	f7f5 ff12 	bl	8000494 <__aeabi_i2d>
 800a670:	4602      	mov	r2, r0
 800a672:	460b      	mov	r3, r1
 800a674:	4630      	mov	r0, r6
 800a676:	4639      	mov	r1, r7
 800a678:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a67c:	f7f5 fdbc 	bl	80001f8 <__aeabi_dsub>
 800a680:	2200      	movs	r2, #0
 800a682:	4b16      	ldr	r3, [pc, #88]	; (800a6dc <__ieee754_rem_pio2+0x3dc>)
 800a684:	f7f5 ff70 	bl	8000568 <__aeabi_dmul>
 800a688:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800a68c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800a690:	f04f 0803 	mov.w	r8, #3
 800a694:	2600      	movs	r6, #0
 800a696:	2700      	movs	r7, #0
 800a698:	4632      	mov	r2, r6
 800a69a:	463b      	mov	r3, r7
 800a69c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800a6a0:	f108 3aff 	add.w	sl, r8, #4294967295
 800a6a4:	f7f6 f9c8 	bl	8000a38 <__aeabi_dcmpeq>
 800a6a8:	b9b0      	cbnz	r0, 800a6d8 <__ieee754_rem_pio2+0x3d8>
 800a6aa:	4b0d      	ldr	r3, [pc, #52]	; (800a6e0 <__ieee754_rem_pio2+0x3e0>)
 800a6ac:	9301      	str	r3, [sp, #4]
 800a6ae:	2302      	movs	r3, #2
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4643      	mov	r3, r8
 800a6b6:	4621      	mov	r1, r4
 800a6b8:	a806      	add	r0, sp, #24
 800a6ba:	f000 f8dd 	bl	800a878 <__kernel_rem_pio2>
 800a6be:	9b04      	ldr	r3, [sp, #16]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	4605      	mov	r5, r0
 800a6c4:	f6bf ae58 	bge.w	800a378 <__ieee754_rem_pio2+0x78>
 800a6c8:	6863      	ldr	r3, [r4, #4]
 800a6ca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6ce:	6063      	str	r3, [r4, #4]
 800a6d0:	68e3      	ldr	r3, [r4, #12]
 800a6d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800a6d6:	e746      	b.n	800a566 <__ieee754_rem_pio2+0x266>
 800a6d8:	46d0      	mov	r8, sl
 800a6da:	e7dd      	b.n	800a698 <__ieee754_rem_pio2+0x398>
 800a6dc:	41700000 	.word	0x41700000
 800a6e0:	0800b3a4 	.word	0x0800b3a4
 800a6e4:	00000000 	.word	0x00000000

0800a6e8 <__kernel_cos>:
 800a6e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6ec:	ec59 8b10 	vmov	r8, r9, d0
 800a6f0:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 800a6f4:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 800a6f8:	ed2d 8b02 	vpush	{d8}
 800a6fc:	eeb0 8a41 	vmov.f32	s16, s2
 800a700:	eef0 8a61 	vmov.f32	s17, s3
 800a704:	da07      	bge.n	800a716 <__kernel_cos+0x2e>
 800a706:	ee10 0a10 	vmov	r0, s0
 800a70a:	4649      	mov	r1, r9
 800a70c:	f7f6 f9c6 	bl	8000a9c <__aeabi_d2iz>
 800a710:	2800      	cmp	r0, #0
 800a712:	f000 8089 	beq.w	800a828 <__kernel_cos+0x140>
 800a716:	4642      	mov	r2, r8
 800a718:	464b      	mov	r3, r9
 800a71a:	4640      	mov	r0, r8
 800a71c:	4649      	mov	r1, r9
 800a71e:	f7f5 ff23 	bl	8000568 <__aeabi_dmul>
 800a722:	2200      	movs	r2, #0
 800a724:	4b4e      	ldr	r3, [pc, #312]	; (800a860 <__kernel_cos+0x178>)
 800a726:	4604      	mov	r4, r0
 800a728:	460d      	mov	r5, r1
 800a72a:	f7f5 ff1d 	bl	8000568 <__aeabi_dmul>
 800a72e:	a340      	add	r3, pc, #256	; (adr r3, 800a830 <__kernel_cos+0x148>)
 800a730:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a734:	4682      	mov	sl, r0
 800a736:	468b      	mov	fp, r1
 800a738:	4620      	mov	r0, r4
 800a73a:	4629      	mov	r1, r5
 800a73c:	f7f5 ff14 	bl	8000568 <__aeabi_dmul>
 800a740:	a33d      	add	r3, pc, #244	; (adr r3, 800a838 <__kernel_cos+0x150>)
 800a742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a746:	f7f5 fd59 	bl	80001fc <__adddf3>
 800a74a:	4622      	mov	r2, r4
 800a74c:	462b      	mov	r3, r5
 800a74e:	f7f5 ff0b 	bl	8000568 <__aeabi_dmul>
 800a752:	a33b      	add	r3, pc, #236	; (adr r3, 800a840 <__kernel_cos+0x158>)
 800a754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a758:	f7f5 fd4e 	bl	80001f8 <__aeabi_dsub>
 800a75c:	4622      	mov	r2, r4
 800a75e:	462b      	mov	r3, r5
 800a760:	f7f5 ff02 	bl	8000568 <__aeabi_dmul>
 800a764:	a338      	add	r3, pc, #224	; (adr r3, 800a848 <__kernel_cos+0x160>)
 800a766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a76a:	f7f5 fd47 	bl	80001fc <__adddf3>
 800a76e:	4622      	mov	r2, r4
 800a770:	462b      	mov	r3, r5
 800a772:	f7f5 fef9 	bl	8000568 <__aeabi_dmul>
 800a776:	a336      	add	r3, pc, #216	; (adr r3, 800a850 <__kernel_cos+0x168>)
 800a778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a77c:	f7f5 fd3c 	bl	80001f8 <__aeabi_dsub>
 800a780:	4622      	mov	r2, r4
 800a782:	462b      	mov	r3, r5
 800a784:	f7f5 fef0 	bl	8000568 <__aeabi_dmul>
 800a788:	a333      	add	r3, pc, #204	; (adr r3, 800a858 <__kernel_cos+0x170>)
 800a78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a78e:	f7f5 fd35 	bl	80001fc <__adddf3>
 800a792:	4622      	mov	r2, r4
 800a794:	462b      	mov	r3, r5
 800a796:	f7f5 fee7 	bl	8000568 <__aeabi_dmul>
 800a79a:	4622      	mov	r2, r4
 800a79c:	462b      	mov	r3, r5
 800a79e:	f7f5 fee3 	bl	8000568 <__aeabi_dmul>
 800a7a2:	ec53 2b18 	vmov	r2, r3, d8
 800a7a6:	4604      	mov	r4, r0
 800a7a8:	460d      	mov	r5, r1
 800a7aa:	4640      	mov	r0, r8
 800a7ac:	4649      	mov	r1, r9
 800a7ae:	f7f5 fedb 	bl	8000568 <__aeabi_dmul>
 800a7b2:	460b      	mov	r3, r1
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	4629      	mov	r1, r5
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f7f5 fd1d 	bl	80001f8 <__aeabi_dsub>
 800a7be:	4b29      	ldr	r3, [pc, #164]	; (800a864 <__kernel_cos+0x17c>)
 800a7c0:	429e      	cmp	r6, r3
 800a7c2:	4680      	mov	r8, r0
 800a7c4:	4689      	mov	r9, r1
 800a7c6:	dc11      	bgt.n	800a7ec <__kernel_cos+0x104>
 800a7c8:	4602      	mov	r2, r0
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	4650      	mov	r0, sl
 800a7ce:	4659      	mov	r1, fp
 800a7d0:	f7f5 fd12 	bl	80001f8 <__aeabi_dsub>
 800a7d4:	460b      	mov	r3, r1
 800a7d6:	4924      	ldr	r1, [pc, #144]	; (800a868 <__kernel_cos+0x180>)
 800a7d8:	4602      	mov	r2, r0
 800a7da:	2000      	movs	r0, #0
 800a7dc:	f7f5 fd0c 	bl	80001f8 <__aeabi_dsub>
 800a7e0:	ecbd 8b02 	vpop	{d8}
 800a7e4:	ec41 0b10 	vmov	d0, r0, r1
 800a7e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ec:	4b1f      	ldr	r3, [pc, #124]	; (800a86c <__kernel_cos+0x184>)
 800a7ee:	491e      	ldr	r1, [pc, #120]	; (800a868 <__kernel_cos+0x180>)
 800a7f0:	429e      	cmp	r6, r3
 800a7f2:	bfcc      	ite	gt
 800a7f4:	4d1e      	ldrgt	r5, [pc, #120]	; (800a870 <__kernel_cos+0x188>)
 800a7f6:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 800a7fa:	2400      	movs	r4, #0
 800a7fc:	4622      	mov	r2, r4
 800a7fe:	462b      	mov	r3, r5
 800a800:	2000      	movs	r0, #0
 800a802:	f7f5 fcf9 	bl	80001f8 <__aeabi_dsub>
 800a806:	4622      	mov	r2, r4
 800a808:	4606      	mov	r6, r0
 800a80a:	460f      	mov	r7, r1
 800a80c:	462b      	mov	r3, r5
 800a80e:	4650      	mov	r0, sl
 800a810:	4659      	mov	r1, fp
 800a812:	f7f5 fcf1 	bl	80001f8 <__aeabi_dsub>
 800a816:	4642      	mov	r2, r8
 800a818:	464b      	mov	r3, r9
 800a81a:	f7f5 fced 	bl	80001f8 <__aeabi_dsub>
 800a81e:	4602      	mov	r2, r0
 800a820:	460b      	mov	r3, r1
 800a822:	4630      	mov	r0, r6
 800a824:	4639      	mov	r1, r7
 800a826:	e7d9      	b.n	800a7dc <__kernel_cos+0xf4>
 800a828:	2000      	movs	r0, #0
 800a82a:	490f      	ldr	r1, [pc, #60]	; (800a868 <__kernel_cos+0x180>)
 800a82c:	e7d8      	b.n	800a7e0 <__kernel_cos+0xf8>
 800a82e:	bf00      	nop
 800a830:	be8838d4 	.word	0xbe8838d4
 800a834:	bda8fae9 	.word	0xbda8fae9
 800a838:	bdb4b1c4 	.word	0xbdb4b1c4
 800a83c:	3e21ee9e 	.word	0x3e21ee9e
 800a840:	809c52ad 	.word	0x809c52ad
 800a844:	3e927e4f 	.word	0x3e927e4f
 800a848:	19cb1590 	.word	0x19cb1590
 800a84c:	3efa01a0 	.word	0x3efa01a0
 800a850:	16c15177 	.word	0x16c15177
 800a854:	3f56c16c 	.word	0x3f56c16c
 800a858:	5555554c 	.word	0x5555554c
 800a85c:	3fa55555 	.word	0x3fa55555
 800a860:	3fe00000 	.word	0x3fe00000
 800a864:	3fd33332 	.word	0x3fd33332
 800a868:	3ff00000 	.word	0x3ff00000
 800a86c:	3fe90000 	.word	0x3fe90000
 800a870:	3fd20000 	.word	0x3fd20000
 800a874:	00000000 	.word	0x00000000

0800a878 <__kernel_rem_pio2>:
 800a878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a87c:	ed2d 8b02 	vpush	{d8}
 800a880:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800a884:	1ed4      	subs	r4, r2, #3
 800a886:	9308      	str	r3, [sp, #32]
 800a888:	9101      	str	r1, [sp, #4]
 800a88a:	4bc5      	ldr	r3, [pc, #788]	; (800aba0 <__kernel_rem_pio2+0x328>)
 800a88c:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800a88e:	9009      	str	r0, [sp, #36]	; 0x24
 800a890:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a894:	9304      	str	r3, [sp, #16]
 800a896:	9b08      	ldr	r3, [sp, #32]
 800a898:	3b01      	subs	r3, #1
 800a89a:	9307      	str	r3, [sp, #28]
 800a89c:	2318      	movs	r3, #24
 800a89e:	fb94 f4f3 	sdiv	r4, r4, r3
 800a8a2:	f06f 0317 	mvn.w	r3, #23
 800a8a6:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800a8aa:	fb04 3303 	mla	r3, r4, r3, r3
 800a8ae:	eb03 0a02 	add.w	sl, r3, r2
 800a8b2:	9b04      	ldr	r3, [sp, #16]
 800a8b4:	9a07      	ldr	r2, [sp, #28]
 800a8b6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800ab90 <__kernel_rem_pio2+0x318>
 800a8ba:	eb03 0802 	add.w	r8, r3, r2
 800a8be:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a8c0:	1aa7      	subs	r7, r4, r2
 800a8c2:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800a8c6:	ae22      	add	r6, sp, #136	; 0x88
 800a8c8:	2500      	movs	r5, #0
 800a8ca:	4545      	cmp	r5, r8
 800a8cc:	dd13      	ble.n	800a8f6 <__kernel_rem_pio2+0x7e>
 800a8ce:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800ab90 <__kernel_rem_pio2+0x318>
 800a8d2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800a8d6:	2600      	movs	r6, #0
 800a8d8:	9b04      	ldr	r3, [sp, #16]
 800a8da:	429e      	cmp	r6, r3
 800a8dc:	dc32      	bgt.n	800a944 <__kernel_rem_pio2+0xcc>
 800a8de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8e0:	9302      	str	r3, [sp, #8]
 800a8e2:	9b08      	ldr	r3, [sp, #32]
 800a8e4:	199d      	adds	r5, r3, r6
 800a8e6:	ab22      	add	r3, sp, #136	; 0x88
 800a8e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a8ec:	9306      	str	r3, [sp, #24]
 800a8ee:	ec59 8b18 	vmov	r8, r9, d8
 800a8f2:	2700      	movs	r7, #0
 800a8f4:	e01f      	b.n	800a936 <__kernel_rem_pio2+0xbe>
 800a8f6:	42ef      	cmn	r7, r5
 800a8f8:	d407      	bmi.n	800a90a <__kernel_rem_pio2+0x92>
 800a8fa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800a8fe:	f7f5 fdc9 	bl	8000494 <__aeabi_i2d>
 800a902:	e8e6 0102 	strd	r0, r1, [r6], #8
 800a906:	3501      	adds	r5, #1
 800a908:	e7df      	b.n	800a8ca <__kernel_rem_pio2+0x52>
 800a90a:	ec51 0b18 	vmov	r0, r1, d8
 800a90e:	e7f8      	b.n	800a902 <__kernel_rem_pio2+0x8a>
 800a910:	9906      	ldr	r1, [sp, #24]
 800a912:	9d02      	ldr	r5, [sp, #8]
 800a914:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800a918:	9106      	str	r1, [sp, #24]
 800a91a:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 800a91e:	9502      	str	r5, [sp, #8]
 800a920:	f7f5 fe22 	bl	8000568 <__aeabi_dmul>
 800a924:	4602      	mov	r2, r0
 800a926:	460b      	mov	r3, r1
 800a928:	4640      	mov	r0, r8
 800a92a:	4649      	mov	r1, r9
 800a92c:	f7f5 fc66 	bl	80001fc <__adddf3>
 800a930:	3701      	adds	r7, #1
 800a932:	4680      	mov	r8, r0
 800a934:	4689      	mov	r9, r1
 800a936:	9b07      	ldr	r3, [sp, #28]
 800a938:	429f      	cmp	r7, r3
 800a93a:	dde9      	ble.n	800a910 <__kernel_rem_pio2+0x98>
 800a93c:	e8eb 8902 	strd	r8, r9, [fp], #8
 800a940:	3601      	adds	r6, #1
 800a942:	e7c9      	b.n	800a8d8 <__kernel_rem_pio2+0x60>
 800a944:	9b04      	ldr	r3, [sp, #16]
 800a946:	aa0e      	add	r2, sp, #56	; 0x38
 800a948:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a94c:	930c      	str	r3, [sp, #48]	; 0x30
 800a94e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800a950:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a954:	9c04      	ldr	r4, [sp, #16]
 800a956:	930b      	str	r3, [sp, #44]	; 0x2c
 800a958:	ab9a      	add	r3, sp, #616	; 0x268
 800a95a:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 800a95e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a962:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a966:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800a96a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 800a96e:	ab9a      	add	r3, sp, #616	; 0x268
 800a970:	445b      	add	r3, fp
 800a972:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800a976:	2500      	movs	r5, #0
 800a978:	1b63      	subs	r3, r4, r5
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	dc78      	bgt.n	800aa70 <__kernel_rem_pio2+0x1f8>
 800a97e:	4650      	mov	r0, sl
 800a980:	ec49 8b10 	vmov	d0, r8, r9
 800a984:	f000 fc00 	bl	800b188 <scalbn>
 800a988:	ec57 6b10 	vmov	r6, r7, d0
 800a98c:	2200      	movs	r2, #0
 800a98e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800a992:	ee10 0a10 	vmov	r0, s0
 800a996:	4639      	mov	r1, r7
 800a998:	f7f5 fde6 	bl	8000568 <__aeabi_dmul>
 800a99c:	ec41 0b10 	vmov	d0, r0, r1
 800a9a0:	f000 fb6e 	bl	800b080 <floor>
 800a9a4:	2200      	movs	r2, #0
 800a9a6:	ec51 0b10 	vmov	r0, r1, d0
 800a9aa:	4b7e      	ldr	r3, [pc, #504]	; (800aba4 <__kernel_rem_pio2+0x32c>)
 800a9ac:	f7f5 fddc 	bl	8000568 <__aeabi_dmul>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4630      	mov	r0, r6
 800a9b6:	4639      	mov	r1, r7
 800a9b8:	f7f5 fc1e 	bl	80001f8 <__aeabi_dsub>
 800a9bc:	460f      	mov	r7, r1
 800a9be:	4606      	mov	r6, r0
 800a9c0:	f7f6 f86c 	bl	8000a9c <__aeabi_d2iz>
 800a9c4:	9006      	str	r0, [sp, #24]
 800a9c6:	f7f5 fd65 	bl	8000494 <__aeabi_i2d>
 800a9ca:	4602      	mov	r2, r0
 800a9cc:	460b      	mov	r3, r1
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	4639      	mov	r1, r7
 800a9d2:	f7f5 fc11 	bl	80001f8 <__aeabi_dsub>
 800a9d6:	f1ba 0f00 	cmp.w	sl, #0
 800a9da:	4606      	mov	r6, r0
 800a9dc:	460f      	mov	r7, r1
 800a9de:	dd6c      	ble.n	800aaba <__kernel_rem_pio2+0x242>
 800a9e0:	1e62      	subs	r2, r4, #1
 800a9e2:	ab0e      	add	r3, sp, #56	; 0x38
 800a9e4:	f1ca 0118 	rsb	r1, sl, #24
 800a9e8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800a9ec:	9d06      	ldr	r5, [sp, #24]
 800a9ee:	fa40 f301 	asr.w	r3, r0, r1
 800a9f2:	441d      	add	r5, r3
 800a9f4:	408b      	lsls	r3, r1
 800a9f6:	1ac0      	subs	r0, r0, r3
 800a9f8:	ab0e      	add	r3, sp, #56	; 0x38
 800a9fa:	9506      	str	r5, [sp, #24]
 800a9fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800aa00:	f1ca 0317 	rsb	r3, sl, #23
 800aa04:	fa40 f303 	asr.w	r3, r0, r3
 800aa08:	9302      	str	r3, [sp, #8]
 800aa0a:	9b02      	ldr	r3, [sp, #8]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dd62      	ble.n	800aad6 <__kernel_rem_pio2+0x25e>
 800aa10:	9b06      	ldr	r3, [sp, #24]
 800aa12:	2200      	movs	r2, #0
 800aa14:	3301      	adds	r3, #1
 800aa16:	9306      	str	r3, [sp, #24]
 800aa18:	4615      	mov	r5, r2
 800aa1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800aa1e:	4294      	cmp	r4, r2
 800aa20:	f300 8095 	bgt.w	800ab4e <__kernel_rem_pio2+0x2d6>
 800aa24:	f1ba 0f00 	cmp.w	sl, #0
 800aa28:	dd07      	ble.n	800aa3a <__kernel_rem_pio2+0x1c2>
 800aa2a:	f1ba 0f01 	cmp.w	sl, #1
 800aa2e:	f000 80a2 	beq.w	800ab76 <__kernel_rem_pio2+0x2fe>
 800aa32:	f1ba 0f02 	cmp.w	sl, #2
 800aa36:	f000 80c1 	beq.w	800abbc <__kernel_rem_pio2+0x344>
 800aa3a:	9b02      	ldr	r3, [sp, #8]
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d14a      	bne.n	800aad6 <__kernel_rem_pio2+0x25e>
 800aa40:	4632      	mov	r2, r6
 800aa42:	463b      	mov	r3, r7
 800aa44:	2000      	movs	r0, #0
 800aa46:	4958      	ldr	r1, [pc, #352]	; (800aba8 <__kernel_rem_pio2+0x330>)
 800aa48:	f7f5 fbd6 	bl	80001f8 <__aeabi_dsub>
 800aa4c:	4606      	mov	r6, r0
 800aa4e:	460f      	mov	r7, r1
 800aa50:	2d00      	cmp	r5, #0
 800aa52:	d040      	beq.n	800aad6 <__kernel_rem_pio2+0x25e>
 800aa54:	4650      	mov	r0, sl
 800aa56:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800ab98 <__kernel_rem_pio2+0x320>
 800aa5a:	f000 fb95 	bl	800b188 <scalbn>
 800aa5e:	4630      	mov	r0, r6
 800aa60:	4639      	mov	r1, r7
 800aa62:	ec53 2b10 	vmov	r2, r3, d0
 800aa66:	f7f5 fbc7 	bl	80001f8 <__aeabi_dsub>
 800aa6a:	4606      	mov	r6, r0
 800aa6c:	460f      	mov	r7, r1
 800aa6e:	e032      	b.n	800aad6 <__kernel_rem_pio2+0x25e>
 800aa70:	2200      	movs	r2, #0
 800aa72:	4b4e      	ldr	r3, [pc, #312]	; (800abac <__kernel_rem_pio2+0x334>)
 800aa74:	4640      	mov	r0, r8
 800aa76:	4649      	mov	r1, r9
 800aa78:	f7f5 fd76 	bl	8000568 <__aeabi_dmul>
 800aa7c:	f7f6 f80e 	bl	8000a9c <__aeabi_d2iz>
 800aa80:	f7f5 fd08 	bl	8000494 <__aeabi_i2d>
 800aa84:	2200      	movs	r2, #0
 800aa86:	4b4a      	ldr	r3, [pc, #296]	; (800abb0 <__kernel_rem_pio2+0x338>)
 800aa88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aa8c:	f7f5 fd6c 	bl	8000568 <__aeabi_dmul>
 800aa90:	4602      	mov	r2, r0
 800aa92:	460b      	mov	r3, r1
 800aa94:	4640      	mov	r0, r8
 800aa96:	4649      	mov	r1, r9
 800aa98:	f7f5 fbae 	bl	80001f8 <__aeabi_dsub>
 800aa9c:	f7f5 fffe 	bl	8000a9c <__aeabi_d2iz>
 800aaa0:	ab0e      	add	r3, sp, #56	; 0x38
 800aaa2:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800aaa6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800aaaa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaae:	f7f5 fba5 	bl	80001fc <__adddf3>
 800aab2:	3501      	adds	r5, #1
 800aab4:	4680      	mov	r8, r0
 800aab6:	4689      	mov	r9, r1
 800aab8:	e75e      	b.n	800a978 <__kernel_rem_pio2+0x100>
 800aaba:	d105      	bne.n	800aac8 <__kernel_rem_pio2+0x250>
 800aabc:	1e63      	subs	r3, r4, #1
 800aabe:	aa0e      	add	r2, sp, #56	; 0x38
 800aac0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800aac4:	15c3      	asrs	r3, r0, #23
 800aac6:	e79f      	b.n	800aa08 <__kernel_rem_pio2+0x190>
 800aac8:	2200      	movs	r2, #0
 800aaca:	4b3a      	ldr	r3, [pc, #232]	; (800abb4 <__kernel_rem_pio2+0x33c>)
 800aacc:	f7f5 ffd2 	bl	8000a74 <__aeabi_dcmpge>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d139      	bne.n	800ab48 <__kernel_rem_pio2+0x2d0>
 800aad4:	9002      	str	r0, [sp, #8]
 800aad6:	2200      	movs	r2, #0
 800aad8:	2300      	movs	r3, #0
 800aada:	4630      	mov	r0, r6
 800aadc:	4639      	mov	r1, r7
 800aade:	f7f5 ffab 	bl	8000a38 <__aeabi_dcmpeq>
 800aae2:	2800      	cmp	r0, #0
 800aae4:	f000 80c7 	beq.w	800ac76 <__kernel_rem_pio2+0x3fe>
 800aae8:	1e65      	subs	r5, r4, #1
 800aaea:	462b      	mov	r3, r5
 800aaec:	2200      	movs	r2, #0
 800aaee:	9904      	ldr	r1, [sp, #16]
 800aaf0:	428b      	cmp	r3, r1
 800aaf2:	da6a      	bge.n	800abca <__kernel_rem_pio2+0x352>
 800aaf4:	2a00      	cmp	r2, #0
 800aaf6:	f000 8088 	beq.w	800ac0a <__kernel_rem_pio2+0x392>
 800aafa:	ab0e      	add	r3, sp, #56	; 0x38
 800aafc:	f1aa 0a18 	sub.w	sl, sl, #24
 800ab00:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f000 80b4 	beq.w	800ac72 <__kernel_rem_pio2+0x3fa>
 800ab0a:	4650      	mov	r0, sl
 800ab0c:	ed9f 0b22 	vldr	d0, [pc, #136]	; 800ab98 <__kernel_rem_pio2+0x320>
 800ab10:	f000 fb3a 	bl	800b188 <scalbn>
 800ab14:	00ec      	lsls	r4, r5, #3
 800ab16:	ab72      	add	r3, sp, #456	; 0x1c8
 800ab18:	191e      	adds	r6, r3, r4
 800ab1a:	ec59 8b10 	vmov	r8, r9, d0
 800ab1e:	f106 0a08 	add.w	sl, r6, #8
 800ab22:	462f      	mov	r7, r5
 800ab24:	2f00      	cmp	r7, #0
 800ab26:	f280 80df 	bge.w	800ace8 <__kernel_rem_pio2+0x470>
 800ab2a:	ed9f 8b19 	vldr	d8, [pc, #100]	; 800ab90 <__kernel_rem_pio2+0x318>
 800ab2e:	f04f 0a00 	mov.w	sl, #0
 800ab32:	eba5 030a 	sub.w	r3, r5, sl
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f2c0 810a 	blt.w	800ad50 <__kernel_rem_pio2+0x4d8>
 800ab3c:	f8df b078 	ldr.w	fp, [pc, #120]	; 800abb8 <__kernel_rem_pio2+0x340>
 800ab40:	ec59 8b18 	vmov	r8, r9, d8
 800ab44:	2700      	movs	r7, #0
 800ab46:	e0f5      	b.n	800ad34 <__kernel_rem_pio2+0x4bc>
 800ab48:	2302      	movs	r3, #2
 800ab4a:	9302      	str	r3, [sp, #8]
 800ab4c:	e760      	b.n	800aa10 <__kernel_rem_pio2+0x198>
 800ab4e:	ab0e      	add	r3, sp, #56	; 0x38
 800ab50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab54:	b94d      	cbnz	r5, 800ab6a <__kernel_rem_pio2+0x2f2>
 800ab56:	b12b      	cbz	r3, 800ab64 <__kernel_rem_pio2+0x2ec>
 800ab58:	a80e      	add	r0, sp, #56	; 0x38
 800ab5a:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800ab5e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ab62:	2301      	movs	r3, #1
 800ab64:	3201      	adds	r2, #1
 800ab66:	461d      	mov	r5, r3
 800ab68:	e759      	b.n	800aa1e <__kernel_rem_pio2+0x1a6>
 800ab6a:	a80e      	add	r0, sp, #56	; 0x38
 800ab6c:	1acb      	subs	r3, r1, r3
 800ab6e:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800ab72:	462b      	mov	r3, r5
 800ab74:	e7f6      	b.n	800ab64 <__kernel_rem_pio2+0x2ec>
 800ab76:	1e62      	subs	r2, r4, #1
 800ab78:	ab0e      	add	r3, sp, #56	; 0x38
 800ab7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab7e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ab82:	a90e      	add	r1, sp, #56	; 0x38
 800ab84:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ab88:	e757      	b.n	800aa3a <__kernel_rem_pio2+0x1c2>
 800ab8a:	bf00      	nop
 800ab8c:	f3af 8000 	nop.w
	...
 800ab9c:	3ff00000 	.word	0x3ff00000
 800aba0:	0800b4f0 	.word	0x0800b4f0
 800aba4:	40200000 	.word	0x40200000
 800aba8:	3ff00000 	.word	0x3ff00000
 800abac:	3e700000 	.word	0x3e700000
 800abb0:	41700000 	.word	0x41700000
 800abb4:	3fe00000 	.word	0x3fe00000
 800abb8:	0800b4b0 	.word	0x0800b4b0
 800abbc:	1e62      	subs	r2, r4, #1
 800abbe:	ab0e      	add	r3, sp, #56	; 0x38
 800abc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abc4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800abc8:	e7db      	b.n	800ab82 <__kernel_rem_pio2+0x30a>
 800abca:	a90e      	add	r1, sp, #56	; 0x38
 800abcc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	430a      	orrs	r2, r1
 800abd4:	e78b      	b.n	800aaee <__kernel_rem_pio2+0x276>
 800abd6:	3301      	adds	r3, #1
 800abd8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800abdc:	2900      	cmp	r1, #0
 800abde:	d0fa      	beq.n	800abd6 <__kernel_rem_pio2+0x35e>
 800abe0:	9a08      	ldr	r2, [sp, #32]
 800abe2:	4422      	add	r2, r4
 800abe4:	00d2      	lsls	r2, r2, #3
 800abe6:	a922      	add	r1, sp, #136	; 0x88
 800abe8:	18e3      	adds	r3, r4, r3
 800abea:	9206      	str	r2, [sp, #24]
 800abec:	440a      	add	r2, r1
 800abee:	9302      	str	r3, [sp, #8]
 800abf0:	f10b 0108 	add.w	r1, fp, #8
 800abf4:	f102 0308 	add.w	r3, r2, #8
 800abf8:	1c66      	adds	r6, r4, #1
 800abfa:	910a      	str	r1, [sp, #40]	; 0x28
 800abfc:	2500      	movs	r5, #0
 800abfe:	930d      	str	r3, [sp, #52]	; 0x34
 800ac00:	9b02      	ldr	r3, [sp, #8]
 800ac02:	42b3      	cmp	r3, r6
 800ac04:	da04      	bge.n	800ac10 <__kernel_rem_pio2+0x398>
 800ac06:	461c      	mov	r4, r3
 800ac08:	e6a6      	b.n	800a958 <__kernel_rem_pio2+0xe0>
 800ac0a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ac0c:	2301      	movs	r3, #1
 800ac0e:	e7e3      	b.n	800abd8 <__kernel_rem_pio2+0x360>
 800ac10:	9b06      	ldr	r3, [sp, #24]
 800ac12:	18ef      	adds	r7, r5, r3
 800ac14:	ab22      	add	r3, sp, #136	; 0x88
 800ac16:	441f      	add	r7, r3
 800ac18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800ac1e:	f7f5 fc39 	bl	8000494 <__aeabi_i2d>
 800ac22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac24:	461c      	mov	r4, r3
 800ac26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac28:	e9c7 0100 	strd	r0, r1, [r7]
 800ac2c:	eb03 0b05 	add.w	fp, r3, r5
 800ac30:	2700      	movs	r7, #0
 800ac32:	f04f 0800 	mov.w	r8, #0
 800ac36:	f04f 0900 	mov.w	r9, #0
 800ac3a:	9b07      	ldr	r3, [sp, #28]
 800ac3c:	429f      	cmp	r7, r3
 800ac3e:	dd08      	ble.n	800ac52 <__kernel_rem_pio2+0x3da>
 800ac40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac42:	aa72      	add	r2, sp, #456	; 0x1c8
 800ac44:	18eb      	adds	r3, r5, r3
 800ac46:	4413      	add	r3, r2
 800ac48:	e9c3 8902 	strd	r8, r9, [r3, #8]
 800ac4c:	3601      	adds	r6, #1
 800ac4e:	3508      	adds	r5, #8
 800ac50:	e7d6      	b.n	800ac00 <__kernel_rem_pio2+0x388>
 800ac52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800ac56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800ac5a:	f7f5 fc85 	bl	8000568 <__aeabi_dmul>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7f5 fac9 	bl	80001fc <__adddf3>
 800ac6a:	3701      	adds	r7, #1
 800ac6c:	4680      	mov	r8, r0
 800ac6e:	4689      	mov	r9, r1
 800ac70:	e7e3      	b.n	800ac3a <__kernel_rem_pio2+0x3c2>
 800ac72:	3d01      	subs	r5, #1
 800ac74:	e741      	b.n	800aafa <__kernel_rem_pio2+0x282>
 800ac76:	f1ca 0000 	rsb	r0, sl, #0
 800ac7a:	ec47 6b10 	vmov	d0, r6, r7
 800ac7e:	f000 fa83 	bl	800b188 <scalbn>
 800ac82:	ec57 6b10 	vmov	r6, r7, d0
 800ac86:	2200      	movs	r2, #0
 800ac88:	4b99      	ldr	r3, [pc, #612]	; (800aef0 <__kernel_rem_pio2+0x678>)
 800ac8a:	ee10 0a10 	vmov	r0, s0
 800ac8e:	4639      	mov	r1, r7
 800ac90:	f7f5 fef0 	bl	8000a74 <__aeabi_dcmpge>
 800ac94:	b1f8      	cbz	r0, 800acd6 <__kernel_rem_pio2+0x45e>
 800ac96:	2200      	movs	r2, #0
 800ac98:	4b96      	ldr	r3, [pc, #600]	; (800aef4 <__kernel_rem_pio2+0x67c>)
 800ac9a:	4630      	mov	r0, r6
 800ac9c:	4639      	mov	r1, r7
 800ac9e:	f7f5 fc63 	bl	8000568 <__aeabi_dmul>
 800aca2:	f7f5 fefb 	bl	8000a9c <__aeabi_d2iz>
 800aca6:	4680      	mov	r8, r0
 800aca8:	f7f5 fbf4 	bl	8000494 <__aeabi_i2d>
 800acac:	2200      	movs	r2, #0
 800acae:	4b90      	ldr	r3, [pc, #576]	; (800aef0 <__kernel_rem_pio2+0x678>)
 800acb0:	f7f5 fc5a 	bl	8000568 <__aeabi_dmul>
 800acb4:	460b      	mov	r3, r1
 800acb6:	4602      	mov	r2, r0
 800acb8:	4639      	mov	r1, r7
 800acba:	4630      	mov	r0, r6
 800acbc:	f7f5 fa9c 	bl	80001f8 <__aeabi_dsub>
 800acc0:	f7f5 feec 	bl	8000a9c <__aeabi_d2iz>
 800acc4:	1c65      	adds	r5, r4, #1
 800acc6:	ab0e      	add	r3, sp, #56	; 0x38
 800acc8:	f10a 0a18 	add.w	sl, sl, #24
 800accc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800acd0:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800acd4:	e719      	b.n	800ab0a <__kernel_rem_pio2+0x292>
 800acd6:	4630      	mov	r0, r6
 800acd8:	4639      	mov	r1, r7
 800acda:	f7f5 fedf 	bl	8000a9c <__aeabi_d2iz>
 800acde:	ab0e      	add	r3, sp, #56	; 0x38
 800ace0:	4625      	mov	r5, r4
 800ace2:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ace6:	e710      	b.n	800ab0a <__kernel_rem_pio2+0x292>
 800ace8:	ab0e      	add	r3, sp, #56	; 0x38
 800acea:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800acee:	f7f5 fbd1 	bl	8000494 <__aeabi_i2d>
 800acf2:	4642      	mov	r2, r8
 800acf4:	464b      	mov	r3, r9
 800acf6:	f7f5 fc37 	bl	8000568 <__aeabi_dmul>
 800acfa:	2200      	movs	r2, #0
 800acfc:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800ad00:	4b7c      	ldr	r3, [pc, #496]	; (800aef4 <__kernel_rem_pio2+0x67c>)
 800ad02:	4640      	mov	r0, r8
 800ad04:	4649      	mov	r1, r9
 800ad06:	f7f5 fc2f 	bl	8000568 <__aeabi_dmul>
 800ad0a:	3f01      	subs	r7, #1
 800ad0c:	4680      	mov	r8, r0
 800ad0e:	4689      	mov	r9, r1
 800ad10:	e708      	b.n	800ab24 <__kernel_rem_pio2+0x2ac>
 800ad12:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800ad16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad1a:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 800ad1e:	f7f5 fc23 	bl	8000568 <__aeabi_dmul>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	4640      	mov	r0, r8
 800ad28:	4649      	mov	r1, r9
 800ad2a:	f7f5 fa67 	bl	80001fc <__adddf3>
 800ad2e:	3701      	adds	r7, #1
 800ad30:	4680      	mov	r8, r0
 800ad32:	4689      	mov	r9, r1
 800ad34:	9b04      	ldr	r3, [sp, #16]
 800ad36:	429f      	cmp	r7, r3
 800ad38:	dc01      	bgt.n	800ad3e <__kernel_rem_pio2+0x4c6>
 800ad3a:	45ba      	cmp	sl, r7
 800ad3c:	dae9      	bge.n	800ad12 <__kernel_rem_pio2+0x49a>
 800ad3e:	ab4a      	add	r3, sp, #296	; 0x128
 800ad40:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ad44:	e9c3 8900 	strd	r8, r9, [r3]
 800ad48:	f10a 0a01 	add.w	sl, sl, #1
 800ad4c:	3e08      	subs	r6, #8
 800ad4e:	e6f0      	b.n	800ab32 <__kernel_rem_pio2+0x2ba>
 800ad50:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d85b      	bhi.n	800ae0e <__kernel_rem_pio2+0x596>
 800ad56:	e8df f003 	tbb	[pc, r3]
 800ad5a:	264a      	.short	0x264a
 800ad5c:	0226      	.short	0x0226
 800ad5e:	ab9a      	add	r3, sp, #616	; 0x268
 800ad60:	441c      	add	r4, r3
 800ad62:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800ad66:	46a2      	mov	sl, r4
 800ad68:	46ab      	mov	fp, r5
 800ad6a:	f1bb 0f00 	cmp.w	fp, #0
 800ad6e:	dc6c      	bgt.n	800ae4a <__kernel_rem_pio2+0x5d2>
 800ad70:	46a2      	mov	sl, r4
 800ad72:	46ab      	mov	fp, r5
 800ad74:	f1bb 0f01 	cmp.w	fp, #1
 800ad78:	f300 8086 	bgt.w	800ae88 <__kernel_rem_pio2+0x610>
 800ad7c:	2000      	movs	r0, #0
 800ad7e:	2100      	movs	r1, #0
 800ad80:	2d01      	cmp	r5, #1
 800ad82:	f300 80a0 	bgt.w	800aec6 <__kernel_rem_pio2+0x64e>
 800ad86:	9b02      	ldr	r3, [sp, #8]
 800ad88:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 800ad8c:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	f040 809e 	bne.w	800aed2 <__kernel_rem_pio2+0x65a>
 800ad96:	9b01      	ldr	r3, [sp, #4]
 800ad98:	e9c3 7800 	strd	r7, r8, [r3]
 800ad9c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800ada0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800ada4:	e033      	b.n	800ae0e <__kernel_rem_pio2+0x596>
 800ada6:	3408      	adds	r4, #8
 800ada8:	ab4a      	add	r3, sp, #296	; 0x128
 800adaa:	441c      	add	r4, r3
 800adac:	462e      	mov	r6, r5
 800adae:	2000      	movs	r0, #0
 800adb0:	2100      	movs	r1, #0
 800adb2:	2e00      	cmp	r6, #0
 800adb4:	da3a      	bge.n	800ae2c <__kernel_rem_pio2+0x5b4>
 800adb6:	9b02      	ldr	r3, [sp, #8]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d03d      	beq.n	800ae38 <__kernel_rem_pio2+0x5c0>
 800adbc:	4602      	mov	r2, r0
 800adbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800adc2:	9c01      	ldr	r4, [sp, #4]
 800adc4:	e9c4 2300 	strd	r2, r3, [r4]
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800add0:	f7f5 fa12 	bl	80001f8 <__aeabi_dsub>
 800add4:	ae4c      	add	r6, sp, #304	; 0x130
 800add6:	2401      	movs	r4, #1
 800add8:	42a5      	cmp	r5, r4
 800adda:	da30      	bge.n	800ae3e <__kernel_rem_pio2+0x5c6>
 800addc:	9b02      	ldr	r3, [sp, #8]
 800adde:	b113      	cbz	r3, 800ade6 <__kernel_rem_pio2+0x56e>
 800ade0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ade4:	4619      	mov	r1, r3
 800ade6:	9b01      	ldr	r3, [sp, #4]
 800ade8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800adec:	e00f      	b.n	800ae0e <__kernel_rem_pio2+0x596>
 800adee:	ab9a      	add	r3, sp, #616	; 0x268
 800adf0:	441c      	add	r4, r3
 800adf2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800adf6:	2000      	movs	r0, #0
 800adf8:	2100      	movs	r1, #0
 800adfa:	2d00      	cmp	r5, #0
 800adfc:	da10      	bge.n	800ae20 <__kernel_rem_pio2+0x5a8>
 800adfe:	9b02      	ldr	r3, [sp, #8]
 800ae00:	b113      	cbz	r3, 800ae08 <__kernel_rem_pio2+0x590>
 800ae02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae06:	4619      	mov	r1, r3
 800ae08:	9b01      	ldr	r3, [sp, #4]
 800ae0a:	e9c3 0100 	strd	r0, r1, [r3]
 800ae0e:	9b06      	ldr	r3, [sp, #24]
 800ae10:	f003 0007 	and.w	r0, r3, #7
 800ae14:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ae18:	ecbd 8b02 	vpop	{d8}
 800ae1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae20:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae24:	f7f5 f9ea 	bl	80001fc <__adddf3>
 800ae28:	3d01      	subs	r5, #1
 800ae2a:	e7e6      	b.n	800adfa <__kernel_rem_pio2+0x582>
 800ae2c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800ae30:	f7f5 f9e4 	bl	80001fc <__adddf3>
 800ae34:	3e01      	subs	r6, #1
 800ae36:	e7bc      	b.n	800adb2 <__kernel_rem_pio2+0x53a>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	460b      	mov	r3, r1
 800ae3c:	e7c1      	b.n	800adc2 <__kernel_rem_pio2+0x54a>
 800ae3e:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800ae42:	f7f5 f9db 	bl	80001fc <__adddf3>
 800ae46:	3401      	adds	r4, #1
 800ae48:	e7c6      	b.n	800add8 <__kernel_rem_pio2+0x560>
 800ae4a:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 800ae4e:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ae52:	4640      	mov	r0, r8
 800ae54:	ec53 2b17 	vmov	r2, r3, d7
 800ae58:	4649      	mov	r1, r9
 800ae5a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae5e:	f7f5 f9cd 	bl	80001fc <__adddf3>
 800ae62:	4602      	mov	r2, r0
 800ae64:	460b      	mov	r3, r1
 800ae66:	4606      	mov	r6, r0
 800ae68:	460f      	mov	r7, r1
 800ae6a:	4640      	mov	r0, r8
 800ae6c:	4649      	mov	r1, r9
 800ae6e:	f7f5 f9c3 	bl	80001f8 <__aeabi_dsub>
 800ae72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ae76:	f7f5 f9c1 	bl	80001fc <__adddf3>
 800ae7a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae7e:	e9ca 0100 	strd	r0, r1, [sl]
 800ae82:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800ae86:	e770      	b.n	800ad6a <__kernel_rem_pio2+0x4f2>
 800ae88:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 800ae8c:	ed3a 7b02 	vldmdb	sl!, {d7}
 800ae90:	4630      	mov	r0, r6
 800ae92:	ec53 2b17 	vmov	r2, r3, d7
 800ae96:	4639      	mov	r1, r7
 800ae98:	ed8d 7b04 	vstr	d7, [sp, #16]
 800ae9c:	f7f5 f9ae 	bl	80001fc <__adddf3>
 800aea0:	4602      	mov	r2, r0
 800aea2:	460b      	mov	r3, r1
 800aea4:	4680      	mov	r8, r0
 800aea6:	4689      	mov	r9, r1
 800aea8:	4630      	mov	r0, r6
 800aeaa:	4639      	mov	r1, r7
 800aeac:	f7f5 f9a4 	bl	80001f8 <__aeabi_dsub>
 800aeb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aeb4:	f7f5 f9a2 	bl	80001fc <__adddf3>
 800aeb8:	f10b 3bff 	add.w	fp, fp, #4294967295
 800aebc:	e9ca 0100 	strd	r0, r1, [sl]
 800aec0:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800aec4:	e756      	b.n	800ad74 <__kernel_rem_pio2+0x4fc>
 800aec6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800aeca:	f7f5 f997 	bl	80001fc <__adddf3>
 800aece:	3d01      	subs	r5, #1
 800aed0:	e756      	b.n	800ad80 <__kernel_rem_pio2+0x508>
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	9a01      	ldr	r2, [sp, #4]
 800aed6:	601f      	str	r7, [r3, #0]
 800aed8:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800aedc:	605c      	str	r4, [r3, #4]
 800aede:	609d      	str	r5, [r3, #8]
 800aee0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800aee4:	60d3      	str	r3, [r2, #12]
 800aee6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aeea:	6110      	str	r0, [r2, #16]
 800aeec:	6153      	str	r3, [r2, #20]
 800aeee:	e78e      	b.n	800ae0e <__kernel_rem_pio2+0x596>
 800aef0:	41700000 	.word	0x41700000
 800aef4:	3e700000 	.word	0x3e700000

0800aef8 <__kernel_sin>:
 800aef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aefc:	ec55 4b10 	vmov	r4, r5, d0
 800af00:	b085      	sub	sp, #20
 800af02:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800af06:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800af0a:	ed8d 1b00 	vstr	d1, [sp]
 800af0e:	9002      	str	r0, [sp, #8]
 800af10:	da06      	bge.n	800af20 <__kernel_sin+0x28>
 800af12:	ee10 0a10 	vmov	r0, s0
 800af16:	4629      	mov	r1, r5
 800af18:	f7f5 fdc0 	bl	8000a9c <__aeabi_d2iz>
 800af1c:	2800      	cmp	r0, #0
 800af1e:	d051      	beq.n	800afc4 <__kernel_sin+0xcc>
 800af20:	4622      	mov	r2, r4
 800af22:	462b      	mov	r3, r5
 800af24:	4620      	mov	r0, r4
 800af26:	4629      	mov	r1, r5
 800af28:	f7f5 fb1e 	bl	8000568 <__aeabi_dmul>
 800af2c:	4682      	mov	sl, r0
 800af2e:	468b      	mov	fp, r1
 800af30:	4602      	mov	r2, r0
 800af32:	460b      	mov	r3, r1
 800af34:	4620      	mov	r0, r4
 800af36:	4629      	mov	r1, r5
 800af38:	f7f5 fb16 	bl	8000568 <__aeabi_dmul>
 800af3c:	a341      	add	r3, pc, #260	; (adr r3, 800b044 <__kernel_sin+0x14c>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	4680      	mov	r8, r0
 800af44:	4689      	mov	r9, r1
 800af46:	4650      	mov	r0, sl
 800af48:	4659      	mov	r1, fp
 800af4a:	f7f5 fb0d 	bl	8000568 <__aeabi_dmul>
 800af4e:	a33f      	add	r3, pc, #252	; (adr r3, 800b04c <__kernel_sin+0x154>)
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f7f5 f950 	bl	80001f8 <__aeabi_dsub>
 800af58:	4652      	mov	r2, sl
 800af5a:	465b      	mov	r3, fp
 800af5c:	f7f5 fb04 	bl	8000568 <__aeabi_dmul>
 800af60:	a33c      	add	r3, pc, #240	; (adr r3, 800b054 <__kernel_sin+0x15c>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f7f5 f949 	bl	80001fc <__adddf3>
 800af6a:	4652      	mov	r2, sl
 800af6c:	465b      	mov	r3, fp
 800af6e:	f7f5 fafb 	bl	8000568 <__aeabi_dmul>
 800af72:	a33a      	add	r3, pc, #232	; (adr r3, 800b05c <__kernel_sin+0x164>)
 800af74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af78:	f7f5 f93e 	bl	80001f8 <__aeabi_dsub>
 800af7c:	4652      	mov	r2, sl
 800af7e:	465b      	mov	r3, fp
 800af80:	f7f5 faf2 	bl	8000568 <__aeabi_dmul>
 800af84:	a337      	add	r3, pc, #220	; (adr r3, 800b064 <__kernel_sin+0x16c>)
 800af86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af8a:	f7f5 f937 	bl	80001fc <__adddf3>
 800af8e:	9b02      	ldr	r3, [sp, #8]
 800af90:	4606      	mov	r6, r0
 800af92:	460f      	mov	r7, r1
 800af94:	b9db      	cbnz	r3, 800afce <__kernel_sin+0xd6>
 800af96:	4602      	mov	r2, r0
 800af98:	460b      	mov	r3, r1
 800af9a:	4650      	mov	r0, sl
 800af9c:	4659      	mov	r1, fp
 800af9e:	f7f5 fae3 	bl	8000568 <__aeabi_dmul>
 800afa2:	a325      	add	r3, pc, #148	; (adr r3, 800b038 <__kernel_sin+0x140>)
 800afa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afa8:	f7f5 f926 	bl	80001f8 <__aeabi_dsub>
 800afac:	4642      	mov	r2, r8
 800afae:	464b      	mov	r3, r9
 800afb0:	f7f5 fada 	bl	8000568 <__aeabi_dmul>
 800afb4:	4602      	mov	r2, r0
 800afb6:	460b      	mov	r3, r1
 800afb8:	4620      	mov	r0, r4
 800afba:	4629      	mov	r1, r5
 800afbc:	f7f5 f91e 	bl	80001fc <__adddf3>
 800afc0:	4604      	mov	r4, r0
 800afc2:	460d      	mov	r5, r1
 800afc4:	ec45 4b10 	vmov	d0, r4, r5
 800afc8:	b005      	add	sp, #20
 800afca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afce:	2200      	movs	r2, #0
 800afd0:	4b1b      	ldr	r3, [pc, #108]	; (800b040 <__kernel_sin+0x148>)
 800afd2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800afd6:	f7f5 fac7 	bl	8000568 <__aeabi_dmul>
 800afda:	4632      	mov	r2, r6
 800afdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800afe0:	463b      	mov	r3, r7
 800afe2:	4640      	mov	r0, r8
 800afe4:	4649      	mov	r1, r9
 800afe6:	f7f5 fabf 	bl	8000568 <__aeabi_dmul>
 800afea:	4602      	mov	r2, r0
 800afec:	460b      	mov	r3, r1
 800afee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aff2:	f7f5 f901 	bl	80001f8 <__aeabi_dsub>
 800aff6:	4652      	mov	r2, sl
 800aff8:	465b      	mov	r3, fp
 800affa:	f7f5 fab5 	bl	8000568 <__aeabi_dmul>
 800affe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b002:	f7f5 f8f9 	bl	80001f8 <__aeabi_dsub>
 800b006:	a30c      	add	r3, pc, #48	; (adr r3, 800b038 <__kernel_sin+0x140>)
 800b008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00c:	4606      	mov	r6, r0
 800b00e:	460f      	mov	r7, r1
 800b010:	4640      	mov	r0, r8
 800b012:	4649      	mov	r1, r9
 800b014:	f7f5 faa8 	bl	8000568 <__aeabi_dmul>
 800b018:	4602      	mov	r2, r0
 800b01a:	460b      	mov	r3, r1
 800b01c:	4630      	mov	r0, r6
 800b01e:	4639      	mov	r1, r7
 800b020:	f7f5 f8ec 	bl	80001fc <__adddf3>
 800b024:	4602      	mov	r2, r0
 800b026:	460b      	mov	r3, r1
 800b028:	4620      	mov	r0, r4
 800b02a:	4629      	mov	r1, r5
 800b02c:	f7f5 f8e4 	bl	80001f8 <__aeabi_dsub>
 800b030:	e7c6      	b.n	800afc0 <__kernel_sin+0xc8>
 800b032:	bf00      	nop
 800b034:	f3af 8000 	nop.w
 800b038:	55555549 	.word	0x55555549
 800b03c:	3fc55555 	.word	0x3fc55555
 800b040:	3fe00000 	.word	0x3fe00000
 800b044:	5acfd57c 	.word	0x5acfd57c
 800b048:	3de5d93a 	.word	0x3de5d93a
 800b04c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b050:	3e5ae5e6 	.word	0x3e5ae5e6
 800b054:	57b1fe7d 	.word	0x57b1fe7d
 800b058:	3ec71de3 	.word	0x3ec71de3
 800b05c:	19c161d5 	.word	0x19c161d5
 800b060:	3f2a01a0 	.word	0x3f2a01a0
 800b064:	1110f8a6 	.word	0x1110f8a6
 800b068:	3f811111 	.word	0x3f811111

0800b06c <fabs>:
 800b06c:	ec51 0b10 	vmov	r0, r1, d0
 800b070:	ee10 2a10 	vmov	r2, s0
 800b074:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b078:	ec43 2b10 	vmov	d0, r2, r3
 800b07c:	4770      	bx	lr
	...

0800b080 <floor>:
 800b080:	ec51 0b10 	vmov	r0, r1, d0
 800b084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b088:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800b08c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800b090:	2e13      	cmp	r6, #19
 800b092:	460c      	mov	r4, r1
 800b094:	ee10 5a10 	vmov	r5, s0
 800b098:	4680      	mov	r8, r0
 800b09a:	dc34      	bgt.n	800b106 <floor+0x86>
 800b09c:	2e00      	cmp	r6, #0
 800b09e:	da16      	bge.n	800b0ce <floor+0x4e>
 800b0a0:	a335      	add	r3, pc, #212	; (adr r3, 800b178 <floor+0xf8>)
 800b0a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0a6:	f7f5 f8a9 	bl	80001fc <__adddf3>
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	2300      	movs	r3, #0
 800b0ae:	f7f5 fceb 	bl	8000a88 <__aeabi_dcmpgt>
 800b0b2:	b148      	cbz	r0, 800b0c8 <floor+0x48>
 800b0b4:	2c00      	cmp	r4, #0
 800b0b6:	da59      	bge.n	800b16c <floor+0xec>
 800b0b8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b0bc:	4a30      	ldr	r2, [pc, #192]	; (800b180 <floor+0x100>)
 800b0be:	432b      	orrs	r3, r5
 800b0c0:	2500      	movs	r5, #0
 800b0c2:	42ab      	cmp	r3, r5
 800b0c4:	bf18      	it	ne
 800b0c6:	4614      	movne	r4, r2
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	4628      	mov	r0, r5
 800b0cc:	e025      	b.n	800b11a <floor+0x9a>
 800b0ce:	4f2d      	ldr	r7, [pc, #180]	; (800b184 <floor+0x104>)
 800b0d0:	4137      	asrs	r7, r6
 800b0d2:	ea01 0307 	and.w	r3, r1, r7
 800b0d6:	4303      	orrs	r3, r0
 800b0d8:	d01f      	beq.n	800b11a <floor+0x9a>
 800b0da:	a327      	add	r3, pc, #156	; (adr r3, 800b178 <floor+0xf8>)
 800b0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e0:	f7f5 f88c 	bl	80001fc <__adddf3>
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f7f5 fcce 	bl	8000a88 <__aeabi_dcmpgt>
 800b0ec:	2800      	cmp	r0, #0
 800b0ee:	d0eb      	beq.n	800b0c8 <floor+0x48>
 800b0f0:	2c00      	cmp	r4, #0
 800b0f2:	bfbe      	ittt	lt
 800b0f4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800b0f8:	fa43 f606 	asrlt.w	r6, r3, r6
 800b0fc:	19a4      	addlt	r4, r4, r6
 800b0fe:	ea24 0407 	bic.w	r4, r4, r7
 800b102:	2500      	movs	r5, #0
 800b104:	e7e0      	b.n	800b0c8 <floor+0x48>
 800b106:	2e33      	cmp	r6, #51	; 0x33
 800b108:	dd0b      	ble.n	800b122 <floor+0xa2>
 800b10a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800b10e:	d104      	bne.n	800b11a <floor+0x9a>
 800b110:	ee10 2a10 	vmov	r2, s0
 800b114:	460b      	mov	r3, r1
 800b116:	f7f5 f871 	bl	80001fc <__adddf3>
 800b11a:	ec41 0b10 	vmov	d0, r0, r1
 800b11e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b122:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800b126:	f04f 33ff 	mov.w	r3, #4294967295
 800b12a:	fa23 f707 	lsr.w	r7, r3, r7
 800b12e:	4207      	tst	r7, r0
 800b130:	d0f3      	beq.n	800b11a <floor+0x9a>
 800b132:	a311      	add	r3, pc, #68	; (adr r3, 800b178 <floor+0xf8>)
 800b134:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b138:	f7f5 f860 	bl	80001fc <__adddf3>
 800b13c:	2200      	movs	r2, #0
 800b13e:	2300      	movs	r3, #0
 800b140:	f7f5 fca2 	bl	8000a88 <__aeabi_dcmpgt>
 800b144:	2800      	cmp	r0, #0
 800b146:	d0bf      	beq.n	800b0c8 <floor+0x48>
 800b148:	2c00      	cmp	r4, #0
 800b14a:	da02      	bge.n	800b152 <floor+0xd2>
 800b14c:	2e14      	cmp	r6, #20
 800b14e:	d103      	bne.n	800b158 <floor+0xd8>
 800b150:	3401      	adds	r4, #1
 800b152:	ea25 0507 	bic.w	r5, r5, r7
 800b156:	e7b7      	b.n	800b0c8 <floor+0x48>
 800b158:	2301      	movs	r3, #1
 800b15a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800b15e:	fa03 f606 	lsl.w	r6, r3, r6
 800b162:	4435      	add	r5, r6
 800b164:	4545      	cmp	r5, r8
 800b166:	bf38      	it	cc
 800b168:	18e4      	addcc	r4, r4, r3
 800b16a:	e7f2      	b.n	800b152 <floor+0xd2>
 800b16c:	2500      	movs	r5, #0
 800b16e:	462c      	mov	r4, r5
 800b170:	e7aa      	b.n	800b0c8 <floor+0x48>
 800b172:	bf00      	nop
 800b174:	f3af 8000 	nop.w
 800b178:	8800759c 	.word	0x8800759c
 800b17c:	7e37e43c 	.word	0x7e37e43c
 800b180:	bff00000 	.word	0xbff00000
 800b184:	000fffff 	.word	0x000fffff

0800b188 <scalbn>:
 800b188:	b570      	push	{r4, r5, r6, lr}
 800b18a:	ec55 4b10 	vmov	r4, r5, d0
 800b18e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800b192:	4606      	mov	r6, r0
 800b194:	462b      	mov	r3, r5
 800b196:	b9aa      	cbnz	r2, 800b1c4 <scalbn+0x3c>
 800b198:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b19c:	4323      	orrs	r3, r4
 800b19e:	d03b      	beq.n	800b218 <scalbn+0x90>
 800b1a0:	4b31      	ldr	r3, [pc, #196]	; (800b268 <scalbn+0xe0>)
 800b1a2:	4629      	mov	r1, r5
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	ee10 0a10 	vmov	r0, s0
 800b1aa:	f7f5 f9dd 	bl	8000568 <__aeabi_dmul>
 800b1ae:	4b2f      	ldr	r3, [pc, #188]	; (800b26c <scalbn+0xe4>)
 800b1b0:	429e      	cmp	r6, r3
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	460d      	mov	r5, r1
 800b1b6:	da12      	bge.n	800b1de <scalbn+0x56>
 800b1b8:	a327      	add	r3, pc, #156	; (adr r3, 800b258 <scalbn+0xd0>)
 800b1ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1be:	f7f5 f9d3 	bl	8000568 <__aeabi_dmul>
 800b1c2:	e009      	b.n	800b1d8 <scalbn+0x50>
 800b1c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800b1c8:	428a      	cmp	r2, r1
 800b1ca:	d10c      	bne.n	800b1e6 <scalbn+0x5e>
 800b1cc:	ee10 2a10 	vmov	r2, s0
 800b1d0:	4620      	mov	r0, r4
 800b1d2:	4629      	mov	r1, r5
 800b1d4:	f7f5 f812 	bl	80001fc <__adddf3>
 800b1d8:	4604      	mov	r4, r0
 800b1da:	460d      	mov	r5, r1
 800b1dc:	e01c      	b.n	800b218 <scalbn+0x90>
 800b1de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800b1e2:	460b      	mov	r3, r1
 800b1e4:	3a36      	subs	r2, #54	; 0x36
 800b1e6:	4432      	add	r2, r6
 800b1e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800b1ec:	428a      	cmp	r2, r1
 800b1ee:	dd0b      	ble.n	800b208 <scalbn+0x80>
 800b1f0:	ec45 4b11 	vmov	d1, r4, r5
 800b1f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 800b260 <scalbn+0xd8>
 800b1f8:	f000 f83c 	bl	800b274 <copysign>
 800b1fc:	a318      	add	r3, pc, #96	; (adr r3, 800b260 <scalbn+0xd8>)
 800b1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b202:	ec51 0b10 	vmov	r0, r1, d0
 800b206:	e7da      	b.n	800b1be <scalbn+0x36>
 800b208:	2a00      	cmp	r2, #0
 800b20a:	dd08      	ble.n	800b21e <scalbn+0x96>
 800b20c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b210:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b214:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b218:	ec45 4b10 	vmov	d0, r4, r5
 800b21c:	bd70      	pop	{r4, r5, r6, pc}
 800b21e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800b222:	da0d      	bge.n	800b240 <scalbn+0xb8>
 800b224:	f24c 3350 	movw	r3, #50000	; 0xc350
 800b228:	429e      	cmp	r6, r3
 800b22a:	ec45 4b11 	vmov	d1, r4, r5
 800b22e:	dce1      	bgt.n	800b1f4 <scalbn+0x6c>
 800b230:	ed9f 0b09 	vldr	d0, [pc, #36]	; 800b258 <scalbn+0xd0>
 800b234:	f000 f81e 	bl	800b274 <copysign>
 800b238:	a307      	add	r3, pc, #28	; (adr r3, 800b258 <scalbn+0xd0>)
 800b23a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b23e:	e7e0      	b.n	800b202 <scalbn+0x7a>
 800b240:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800b244:	3236      	adds	r2, #54	; 0x36
 800b246:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800b24a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800b24e:	4620      	mov	r0, r4
 800b250:	4629      	mov	r1, r5
 800b252:	2200      	movs	r2, #0
 800b254:	4b06      	ldr	r3, [pc, #24]	; (800b270 <scalbn+0xe8>)
 800b256:	e7b2      	b.n	800b1be <scalbn+0x36>
 800b258:	c2f8f359 	.word	0xc2f8f359
 800b25c:	01a56e1f 	.word	0x01a56e1f
 800b260:	8800759c 	.word	0x8800759c
 800b264:	7e37e43c 	.word	0x7e37e43c
 800b268:	43500000 	.word	0x43500000
 800b26c:	ffff3cb0 	.word	0xffff3cb0
 800b270:	3c900000 	.word	0x3c900000

0800b274 <copysign>:
 800b274:	ec51 0b10 	vmov	r0, r1, d0
 800b278:	ee11 0a90 	vmov	r0, s3
 800b27c:	ee10 2a10 	vmov	r2, s0
 800b280:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b284:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800b288:	ea41 0300 	orr.w	r3, r1, r0
 800b28c:	ec43 2b10 	vmov	d0, r2, r3
 800b290:	4770      	bx	lr
	...

0800b294 <_init>:
 800b294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b296:	bf00      	nop
 800b298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b29a:	bc08      	pop	{r3}
 800b29c:	469e      	mov	lr, r3
 800b29e:	4770      	bx	lr

0800b2a0 <_fini>:
 800b2a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2a2:	bf00      	nop
 800b2a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2a6:	bc08      	pop	{r3}
 800b2a8:	469e      	mov	lr, r3
 800b2aa:	4770      	bx	lr
